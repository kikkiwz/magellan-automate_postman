{
	"info": {
		"_postman_id": "d2116ce1-201c-4914-a8a6-d0cbd38210cf",
		"name": "Provisioning_Partner",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Partner",
			"item": [
				{
					"name": "CreatePartner",
					"item": [
						{
							"name": "CreatePartner_TST_F2_1_1_001_Success",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var Username = pm.environment.get(\"Username\");\r",
											"var Password = pm.environment.get(\"Password\");\r",
											"\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"\r",
											"\r",
											"pm.environment.set(\"Value_CreatePartner_TST_F2_1_1_001_PartnerName\",fieldDataValue.Provisioning.Partner.CreatePartner.Value_CreatePartner_TST_F2_1_1_001_PartnerName)\r",
											"pm.environment.set(\"Value_CreatePartner_TST_F2_1_1_001_PartnerType\",JSON.stringify(fieldDataValue.Provisioning.Partner.CreatePartner.Value_CreatePartner_TST_F2_1_1_001_PartnerType))\r",
											"pm.environment.set(\"Value_CreatePartner_TST_F2_1_1_001_PartnerDetail_MerchantContact\",fieldDataValue.Provisioning.Partner.CreatePartner.Value_CreatePartner_TST_F2_1_1_001_PartnerDetail_MerchantContact)\r",
											"pm.environment.set(\"Value_CreatePartner_TST_F2_1_1_001_PartnerDetail_CPID\",fieldDataValue.Provisioning.Partner.CreatePartner.Value_CreatePartner_TST_F2_1_1_001_PartnerDetail_CPID)\r",
											"pm.environment.set(\"Value_CreatePartner_TST_F2_1_1_001_Property_RouteEngine\",fieldDataValue.Provisioning.Partner.CreatePartner.Value_CreatePartner_TST_F2_1_1_001_Property_RouteEngine)\r",
											"\r",
											"\r",
											"//format YYYYMMDDHHMMSSS\r",
											"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
											"// console.log('currentTmestamp',currentTmestamp);\r",
											"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
											"\r",
											"\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- statusCodeList --------------//\r",
											"//set variable to statusCodeList JSON.parse\r",
											"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
											"//set global variable to statusCode 200\r",
											"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
											"//set global variable to statusCode 201\r",
											"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
											"\r",
											"//---------------- resultCodeList --------------//\r",
											"//set variable to resultCodeList JSON.parse\r",
											"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
											"//set global variable to resultCode \"20000\"\r",
											"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
											"//set global variable to resultCode \"20100\"\r",
											"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
											"\r",
											"//---------------- resultDescriptionSuccessList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
											"//set global variable to resultDescription \"SignInProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
											"//set global variable to resultDescription \"CreatePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
											"//set global variable to resultDescription \"RemovePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
											"//set global variable to resultDescription \"InquiryPartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionInquiryPartner\", resultDescriptionSuccessList.resultDescriptionInquiryPartner);\r",
											"\r",
											"\r",
											"//---------------- HeaderList --------------//\r",
											"//set variable to HeaderList JSON.parse\r",
											"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
											"//---------------- set globals Other --------------//\r",
											"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
											"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
											"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
											"//set global variable to kbn-versio \"7.5.1\"\r",
											"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Signin_ --------------//\r",
											"//set global variable to x_ais_OrderRef \"Signin_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Partner --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
											"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
											"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
											"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
											"//set global variable to x_ais_OrderRef \"InquiryPartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_InquiryPartner\", HeaderList.Partner.x_ais_OrderRef_InquiryPartner);\r",
											"//set global variable to x_ais_OrderDesc \"InquiryPartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_InquiryPartner\", HeaderList.Partner.x_ais_OrderDesc_InquiryPartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultDescription \"SignInProcess is Success\"\r",
											"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
											"\r",
											"\r",
											"//---------------- urlRouteList --------------//\r",
											"//set variable to urlRouteList JSON.parse\r",
											"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
											"//---------------- set url Create --------------//\r",
											"//set global variable to url \"/api/v1/auth/signin\"\r",
											"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
											"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
											"//---------------- get url Create --------------//\r",
											"//get global variable to url \"/api/v1/auth/signin\"\r",
											"var urlSignin = pm.globals.get(\"urlSignin\");\r",
											"\r",
											"//---------------- set url Remove --------------//\r",
											"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set url Inquiry --------------//\r",
											"//set global variable to url \"/api/v1/Partner/InquiryPartner\"\r",
											"pm.globals.set(\"urlPartnerInquiryPartner\", urlRouteList.Partner.urlPartnerInquiryPartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"Signin_\"\r",
											"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"// Signin get token\r",
											" Signin = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username,\r",
											"                password:Password\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"\r",
											"        //set random_number\r",
											"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
											"        //set PartnerName\r",
											"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
											"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
											"        //set MerchantContact\r",
											"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
											"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
											"        // set CPID\r",
											"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
											"        pm.environment.set(\"CPID\", CPIDValue)\r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"Signin();\r",
											"setTimeout(function(){}, 5000);\r",
											" \r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"InquiryPartner_\"\r",
											"var x_ais_OrderRef_InquiryPartner = pm.globals.get(\"x_ais_OrderRef_InquiryPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"InquiryPartner\"\r",
											"var x_ais_OrderDesc_InquiryPartner = pm.globals.get(\"x_ais_OrderDesc_InquiryPartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Inquiry --------------//\r",
											"//get global variable to url \"/api/v1/Partner/InquiryPartner\"\r",
											"var urlPartnerInquiryPartner = pm.globals.get(\"urlPartnerInquiryPartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Remove --------------//\r",
											"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultCode \"20100\"\r",
											"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
											"//get global variable to resultDescription \"RemovePartner is Success\"\r",
											"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
											"//get global variable to resultDescription \"CreatePartner is Success\"\r",
											"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
											"//get global variable to resultDescription \"InquiryPartner is Success\"\r",
											"var resultDescriptionInquiryPartner = pm.globals.get(\"resultDescriptionInquiryPartner\");\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.environment.set(\"GetResponse_PartnerId\", jsonData.PartnerInfo.PartnerId);\r",
											"pm.environment.set(\"GetResponse_CustomerId\", jsonData.PartnerInfo.CustomerId);\r",
											"\r",
											"\r",
											"pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"    pm.response.to.have.status(statusCodeCreatedSuccess);\r",
											"});\r",
											"\r",
											"pm.test('CreatePartner : operationStatus code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeCreatedSuccess);\r",
											"});\r",
											"\r",
											"pm.test('CreatePartner : operationStatus description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionCreatePartner);\r",
											"});\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"\r",
											"// RemovePartner\r",
											"RemovePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemovePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemovePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsRemovePartner = {\r",
											"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemovePartner,\r",
											"            body: httpRequestRemovePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request RemovePartner');\r",
											"        let response = await reqPromise(optionsRemovePartner);\r",
											"        let jsonDataRemovePartner = await response.json();\r",
											"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
											"    \r",
											"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemovePartner is Success\r",
											"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"//---------------- LogDefaultValue --------------//\r",
											"//set variable to LogDefaultValue JSON.parse\r",
											"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
											"// console.log('LogDefaultValue',LogDefaultValue);\r",
											"//---------------- set globals Other --------------//\r",
											"\r",
											"var SearchLog = LogDefaultValue.SearchLog;\r",
											"// console.log('SearchLog',SearchLog);\r",
											"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
											"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
											"var kbn_version = SearchLog.header.kbn_version;\r",
											"var authorization = SearchLog.header.Authorization;\r",
											"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
											"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
											"var namespace = LogDefaultValue.Other.namespace;\r",
											"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
											"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
											"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
											"var methodPost = LogDefaultValue.Other.methodPost;\r",
											"\r",
											"// Detail\r",
											"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
											"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
											"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
											"\r",
											"// Summary\r",
											"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
											"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
											"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
											"\r",
											"// ProvisioningAPIs [Partner]\r",
											"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
											"var cmdName = LogDefaultValue.Provisioning.Partner.cmdNameCreatePartner;\r",
											"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
											"var containerId = LogDefaultValue.Provisioning.containerId;\r",
											"var requestObjectUrlStaging = LogDefaultValue.Provisioning.Partner.requestObjectUrlCreatePartnerMgStaging;\r",
											"\r",
											"// Check CDR (Summary Log) and EDR (Detail Log)\r",
											"SearchLogFindTid = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSearchLogFindTid = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization' : authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = x_ais_OrderRef_CreatePartner + current_timestamp;\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch : : :1\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestSearchLogFindTid = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"\r",
											"        let optionsSearchLogFindTid = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptSearchLogFindTid,\r",
											"            body: httpRequestSearchLogFindTid\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsSearchLogFindTid);\r",
											"        let jsonDataSearchLogFindTid = await response.json();\r",
											"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
											"\r",
											"        // //200\r",
											"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"\r",
											"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
											"        console.log('hits : : : 1',hits)\r",
											"  \r",
											"        // find tid\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            // let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"        \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"\r",
											"            if(applicationNameValue == applicationName){\r",
											"                let tid = hits[i]._source.cauldron.tid;\r",
											"                pm.environment.set(\"tid\", tid);\r",
											"                break;\r",
											"           }\r",
											"        }\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"CheckLog = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCheckLog = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = pm.environment.get(\"tid\");\r",
											"\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch : : 2\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestCheckLog = {\r",
											"            mode: 'raw',\r",
											"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"        let optionsCheckLog = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptCheckLog,\r",
											"            body: httpRequestCheckLog\r",
											"        }; \r",
											"        let response = await reqPromise(optionsCheckLog);\r",
											"        let jsonDataCheckLog = await response.json();\r",
											"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
											"        \r",
											"        // //200\r",
											"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });     \r",
											"        \r",
											"        let hits = jsonDataCheckLog.hits.hits\r",
											"        // console.log('hits',hits)\r",
											"  \r",
											"        // find logType\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            //  let logType = hits[i]._source.cauldron.logType\r",
											"            let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"           \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            \r",
											"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
											"            // console.log('resultDataLog',resultDataLog)\r",
											"            // console.log(logType)\r",
											"            // console.log(logTypeDetail)\r",
											"            // console.log(logTypeSummary)\r",
											"\r",
											"            let tidControl = x_ais_OrderRef_CreatePartner + current_timestamp;\r",
											"            // console.log(tidControl);\r",
											"            if(applicationNameValue == applicationName){\r",
											"                 \r",
											"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ProvisioningAPIs\r",
											"                     pm.test(\"Check Summary Log : CreatePartner\" , function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Summary Log ( Expected = Actual) [CreatePartner] ==================\");\r",
											"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
											"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
											"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeCreatedSuccess);\r",
											"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionCreatePartner);\r",
											"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
											"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                         // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
											"                        //  console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
											"                    \r",
											"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp);\r",
											"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName);\r",
											"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeCreatedSuccess);\r",
											"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionCreatePartner);\r",
											"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp);\r",
											"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary);\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);  \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace);\r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName);\r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId);\r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
											"                        // pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
											"\r",
											"                        // check custom\r",
											"                        // \"custom\":[ { \"no\":\"1\", \"endPointName\":\"db.TenantsCollection\", \"responseStatus\":\"Success:InquiryTenant was successfully.\", \"processTime\":2.91 }, { \"no\":\"2\", \"endPointName\":\"db.CustomersCollection\", \"responseStatus\":\"Success:InsertCustomer was successfully.\", \"processTime\":1.1485 }, { \"no\":\"3\", \"endPointName\":\"db.TenantsCollection\", \"responseStatus\":\"Success:InsertTenant was successfully.\", \"processTime\":1.9625 } ],\r",
											"\r",
											"                        let custom = resultDataLog.custom.endPointSummary;\r",
											"                        console.log(\"custom : : :\",custom)\r",
											"                        let countCustom = custom.length;   \r",
											"\r",
											"                        // [\"db.TenantsCollection\",\"db.CustomersCollection\",\"db.TenantsCollection\"]\r",
											"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_CreatePartner;\r",
											"                        // [\"Success:InquiryTenant was successfully.\",\"Success:InsertCustomer was successfully.\",\"Success:InsertTenant was successfully.\"]\r",
											"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_CreatePartner;\r",
											"                        let countCustomStep = dataEndPointName.length;\r",
											"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
											"                        for(let i=0;i<countCustomStep;i++){\r",
											"                            let no = custom[i].no;\r",
											"                            let valueEndPointName = custom[i].endPointName;\r",
											"                            let valueResponseStatus = custom[i].responseStatus;\r",
											"                            // console.log(\"i\",i);\r",
											"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
											"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
											"                           \r",
											"                            console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep );\r",
											"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString() );\r",
											"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i] );\r",
											"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i] );\r",
											"                           \r",
											"                            pm.expect(no).to.eql((i+1).toString()); \r",
											"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
											"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]);  \r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"\r",
											"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ProvisioningAPIs\r",
											"                    \r",
											"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
											"                    // console.log('endPointNameValue ',endPointNameValue)\r",
											"                    // console.log('endPointNameProvisioningAPIs ',endPointNameProvisioningAPIs)\r",
											"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [CreatePartner]\", function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Detail Log ( Expected = Actual) [CreatePartner] ==================\");\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
											"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
											"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
											"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
											"                       \r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail);\r",
											"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail);\r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace);\r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName);\r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId);\r",
											"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime);\r",
											"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
											"\r",
											"                        if( endPointNameValue == endPointNameProvisioningAPIs){     //\"endPointName\":\"ProvisioningAPIs\"\r",
											"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs); \r",
											"                            \r",
											"                            // console.log(\"resultDataLog :\",resultDataLog)\r",
											"                            // console.log(\"resultDataLog.custom1 :\",resultDataLog.custom1)\r",
											"                            // console.log(\"resultDataLog.custom1.requestObject :\",resultDataLog.custom1.requestObject)\r",
											"                            // check requestObject\r",
											"                                // \"requestObject\":\"{\\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Partner/CreatePartner\\\",\\\"method\\\":\\\"POST\\\",\\\"headers\\\":{\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"CreatePartner_202103231503693\\\",\\\"x-ais-orderdesc\\\":\\\"CreatePartner\\\",\\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAFGqEAZd8xJfDiWnmUTQnUILTUz2eudCOyvuC4tlIIbY0IlAkkY2KW0\\\"},\\\"body\\\":{\\\"PartnerName\\\":\\\"QATestPartner1111111\\\",\\\"PartnerType\\\":[\\\"Supplier\\\",\\\"Customer\\\"],\\\"PartnerDetail\\\":{\\\"MerchantContact\\\":\\\"QATestPartner01@ais.co.th\\\",\\\"CPID\\\":\\\"QATestPartner01@ais.co.th\\\"},\\\"Property\\\":{\\\"RouteEngine\\\":false}}}\"\r",
											"\r",
											"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);      \r",
											"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
											"                            let url = urlCheckLog + requestObjectUrlStaging;\r",
											"                            let x_ais_orderref = x_ais_OrderRef_CreatePartner + current_timestamp;\r",
											"                            let x_ais_orderdesc = x_ais_OrderDesc_CreatePartner;\r",
											"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken\");\r",
											"                            let CustomerId = pm.environment.get(\"GetResponse_CustomerId\");\r",
											"                            let PartnerId = pm.environment.get(\"GetResponse_PartnerId\");\r",
											"                            let PartnerName = pm.environment.get(\"PartnerName\");\r",
											"                            let PartnerType = pm.environment.get(\"Value_CreatePartner_TST_F2_1_1_001_PartnerType\");\r",
											"                            let PartnerDetailMerchantContact = pm.environment.get(\"Value_CreatePartner_TST_F2_1_1_001_PartnerDetail_MerchantContact\");\r",
											"                            let PartnerDetailCPID = pm.environment.get(\"Value_CreatePartner_TST_F2_1_1_001_PartnerDetail_CPID\");\r",
											"                            let PropertyRouteEngine = pm.environment.get(\"Value_CreatePartner_TST_F2_1_1_001_Property_RouteEngine\");\r",
											"                            \r",
											"                            pm.expect(jsonParseRequestObject.url).to.eql(url);\r",
											"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerName).to.eql(PartnerName);\r",
											"                            pm.expect(JSON.stringify(jsonParseRequestObject.body.PartnerType)).to.eql(PartnerType);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerDetail.MerchantContact).to.eql(PartnerDetailMerchantContact);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerDetail.CPID).to.eql(PartnerDetailCPID);\r",
											"                            pm.expect(jsonParseRequestObject.body.Property.RouteEngine).to.eql(PropertyRouteEngine);\r",
											"\r",
											"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
											"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
											"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
											"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
											"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
											"                            console.log(\"resquest.body.PartnerName : \" + jsonParseRequestObject.body.PartnerName + \" = \" + PartnerName);\r",
											"                            console.log(\"resquest.body.PartnerType : \" + JSON.stringify(jsonParseRequestObject.body.PartnerType) + \" = \" + PartnerType);\r",
											"                            console.log(\"resquest.body.MerchantContact : \" + jsonParseRequestObject.body.MerchantContact + \" = \" + PartnerDetailMerchantContact);\r",
											"                            console.log(\"resquest.body.CPID : \" + jsonParseRequestObject.body.PartnerDetail.CPID + \" = \" + PartnerDetailCPID);\r",
											"                            console.log(\"resquest.body.RouteEngine : \" + jsonParseRequestObject.body.Property.RouteEngine + \" = \" + PropertyRouteEngine);\r",
											"\r",
											"                           \r",
											"\r",
											"                          \r",
											"                            // check responseObject\r",
											"                            // \"responseObject\":\"{\\\"PartnerInfo\\\":{\\\"CustomerId\\\":\\\"6059a4f863fa0e0001b9d2ef\\\",\\\"PartnerId\\\":\\\"6059a4f863fa0e0001b9d2f0\\\",\\\"PartnerName\\\":\\\"QATestPartner1111111\\\",\\\"PartnerType\\\":[\\\"Supplier\\\",\\\"Customer\\\"],\\\"PartnerDetail\\\":{\\\"MerchantContact\\\":\\\"QATestPartner01@ais.co.th\\\",\\\"CPID\\\":\\\"QATestPartner01@ais.co.th\\\"},\\\"Property\\\":{\\\"RouteEngine\\\":false},\\\"CreateDate\\\":\\\"2021-03-23T15:21:12.6726951+07:00\\\"},\\\"OperationStatus\\\":{\\\"Code\\\":\\\"20100\\\",\\\"Description\\\":\\\"CreatePartner is Success\\\"}}\",\"activityLog\":{\"startTime\":\"2021-03-23T15:21:12.6619894+07:00\",\"endTime\":\"2021-03-23T15:21:12.6785132+07:00\",\"processTime\":16.5238}}\r",
											"\r",
											"                         \r",
											"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
											"                            // console.log(\"jsonParseResponseObject:\", JSON.parse(resultDataLog.custom1.responseObject))  \r",
											"                                      \r",
											"                            console.log(\"response.PartnerInfo.CustomerId : \" + jsonParseResponseObject.PartnerInfo.CustomerId + \" = \" + CustomerId);\r",
											"                            console.log(\"response.PartnerInfo.PartnerId : \" + jsonParseResponseObject.PartnerInfo.PartnerId + \" = \" + PartnerId);\r",
											"                            console.log(\"response.PartnerInfo.PartnerName : \" + jsonParseResponseObject.PartnerInfo.PartnerName + \" = \" + PartnerName);  \r",
											"                            console.log(\"response.PartnerInfo.PartnerType : \" + JSON.stringify(jsonParseResponseObject.PartnerInfo.PartnerType) + \" = \" + PartnerType);                  \r",
											"                            console.log(\"response.PartnerInfo.MerchantContact : \" + jsonParseResponseObject.PartnerInfo.PartnerDetail.MerchantContact + \" = \" + PartnerDetailMerchantContact); \r",
											"                            console.log(\"response.PartnerInfo.CPID : \" + jsonParseResponseObject.PartnerInfo.PartnerDetail.CPID + \" = \" + PartnerDetailCPID);\r",
											"                            console.log(\"response.PartnerInfo.RouteEngine : \" + jsonParseResponseObject.PartnerInfo.Property.RouteEngine + \" = \" + PropertyRouteEngine);\r",
											"                            console.log(\"response.PartnerInfo.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeCreatedSuccess);\r",
											"                            console.log(\"response.PartnerInfo.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionCreatePartner);\r",
											"                               \r",
											"                            pm.expect(jsonParseResponseObject.PartnerInfo.CustomerId).to.eql(CustomerId);  \r",
											"                            pm.expect(jsonParseResponseObject.PartnerInfo.PartnerId).to.eql(PartnerId);                          \r",
											"                            pm.expect(jsonParseResponseObject.PartnerInfo.PartnerName).to.eql(PartnerName);                           \r",
											"                            pm.expect(JSON.stringify(jsonParseResponseObject.PartnerInfo.PartnerType)).to.eql(PartnerType);                                 \r",
											"                            pm.expect(jsonParseResponseObject.PartnerInfo.PartnerDetail.MerchantContact).to.eql(PartnerDetailMerchantContact);                          \r",
											"                            pm.expect(jsonParseResponseObject.PartnerInfo.PartnerDetail.CPID).to.eql(PartnerDetailCPID);  \r",
											"                            pm.expect(jsonParseResponseObject.PartnerInfo.Property.RouteEngine).to.eql(PropertyRouteEngine);  \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeCreatedSuccess);  \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionCreatePartner);  \r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// InquiryPartner\r",
											"InquiryPartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptInquiryPartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_InquiryPartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_InquiryPartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestInquiryPartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsInquiryPartner = {\r",
											"            url: url + provisioningapis + urlPartnerInquiryPartner,\r",
											"            method: 'POST',\r",
											"            header: headersOptInquiryPartner,\r",
											"            body: httpRequestInquiryPartner\r",
											"        };\r",
											"\r",
											"        // console.log('request InquiryPartner');\r",
											"        let response = await reqPromise(optionsInquiryPartner);\r",
											"        let jsonDataInquiryPartner = await response.json();\r",
											"        // console.log('jsonDataInquiryPartner : : : ',jsonDataInquiryPartner)\r",
											"    \r",
											"        let operationStatusInquiryPartner = await jsonDataInquiryPartner.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"InquiryPartner : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('InquiryPartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusInquiryPartner).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //InquiryPartner is Success\r",
											"        pm.test('InquiryPartner : OperationStatus Description is '+'\"'+ resultDescriptionInquiryPartner+'\"', function () {\r",
											"            pm.expect(operationStatusInquiryPartner).to.have.property('Description', resultDescriptionInquiryPartner);\r",
											"        });\r",
											"\r",
											"        //Check Data\r",
											"        let PartnerInfo = await jsonDataInquiryPartner.partnerInfo;\r",
											"        // console.log('PartnerInfo : : :',PartnerInfo);\r",
											"\r",
											"        for(let i=0;i<PartnerInfo.length;i++){\r",
											"            pm.test('Verify DB Check Data : CreatePartner' , function () {\r",
											"                console.log(\"===============================================================================================================\")    \r",
											"                console.log(\"======== Verify DB Check Data ( Expected = Actual) [CreatePartner] ==================\");\r",
											"                console.log(\"Code : \" + operationStatusInquiryPartner.Code + \" = \" + resultCodeSuccess);\r",
											"                console.log(\"Description : \" + operationStatusInquiryPartner.Description + \" = \" + resultDescriptionInquiryPartner);\r",
											"                console.log(\"PartnerId : \" + PartnerInfo[i].PartnerId + \" = \" + pm.environment.get(\"GetResponse_PartnerId\"));\r",
											"                console.log(\"PartnerName : \" + PartnerInfo[i].PartnerName + \" = \" + pm.environment.get(\"PartnerName\"));\r",
											"                console.log(\"PartnerType : \" +JSON.stringify(PartnerInfo[i].PartnerType) + \" = \" + pm.environment.get(\"Value_CreatePartner_TST_F2_1_1_001_PartnerType\"));\r",
											"                console.log(\"MerchantContact : \" + PartnerInfo[i].PartnerDetail.MerchantContact + \" = \" + pm.environment.get(\"Value_CreatePartner_TST_F2_1_1_001_PartnerDetail_MerchantContact\"));\r",
											"                console.log(\"CPID : \" + PartnerInfo[i].PartnerDetail.CPID + \" = \" + pm.environment.get(\"Value_CreatePartner_TST_F2_1_1_001_PartnerDetail_CPID\"));\r",
											"                 \r",
											"                pm.expect(operationStatusInquiryPartner.Code).to.eql(resultCodeSuccess);\r",
											"                pm.expect(operationStatusInquiryPartner.Description).to.eql(resultDescriptionInquiryPartner);\r",
											"                pm.expect(PartnerInfo[i].PartnerId).to.eql(pm.environment.get(\"GetResponse_PartnerId\"));\r",
											"                pm.expect(PartnerInfo[i].PartnerName).to.eql(pm.environment.get(\"PartnerName\"));\r",
											"                pm.expect(JSON.stringify(PartnerInfo[i].PartnerType)).to.eql(pm.environment.get(\"Value_CreatePartner_TST_F2_1_1_001_PartnerType\"));\r",
											"                pm.expect(PartnerInfo[i].PartnerDetail.MerchantContact).to.eql(pm.environment.get(\"Value_CreatePartner_TST_F2_1_1_001_PartnerDetail_MerchantContact\"));\r",
											"                pm.expect(PartnerInfo[i].PartnerDetail.CPID).to.eql(pm.environment.get(\"Value_CreatePartner_TST_F2_1_1_001_PartnerDetail_CPID\"));\r",
											"            });\r",
											"        }\r",
											"\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"setTimeout(function(){SearchLogFindTid();}, 6000); \r",
											"setTimeout(function(){CheckLog();}, 15000); \r",
											"setTimeout(function(){InquiryPartner();}, 30000);  \r",
											"setTimeout(function(){RemovePartner();}, 40000);\r",
											"setTimeout(function(){\r",
											"pm.environment.unset(\"current_timestamp\");\r",
											"pm.environment.unset(\"AccessToken\");\r",
											"pm.environment.unset(\"Value_CreatePartner_TST_F2_1_1_001_PartnerName\");\r",
											"pm.environment.unset(\"Value_CreatePartner_TST_F2_1_1_001_PartnerType\");\r",
											"pm.environment.unset(\"Value_CreatePartner_TST_F2_1_1_001_PartnerDetail_MerchantContact\");\r",
											"pm.environment.unset(\"Value_CreatePartner_TST_F2_1_1_001_PartnerDetail_CPID\");\r",
											"pm.environment.unset(\"Value_CreatePartner_TST_F2_1_1_001_Property_RouteEngine\");\r",
											"pm.environment.unset(\"GetResponse_PartnerId\");\r",
											"pm.environment.unset(\"GetResponse_CustomerId\");\r",
											"pm.environment.unset(\"tid\");\r",
											"pm.environment.unset(\"PartnerName\");\r",
											"\r",
											"}, 50000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-ais-UserName",
										"value": "{{x_ais_UserName_AisPartner}}",
										"type": "text"
									},
									{
										"key": "x-ais-OrderRef",
										"value": "{{x_ais_OrderRef_CreatePartner}}{{current_timestamp}}"
									},
									{
										"key": "x-ais-OrderDesc",
										"value": "{{x_ais_OrderDesc_CreatePartner}}",
										"type": "text"
									},
									{
										"key": "x-ais-AccessToken",
										"value": "{{Bearer}} {{AccessToken}}"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"PartnerName\": \"{{PartnerName}}\",\r\n  \"PartnerType\": {{Value_CreatePartner_TST_F2_1_1_001_PartnerType}},\r\n  \"PartnerDetail\": {\r\n    \"MerchantContact\": \"{{Value_CreatePartner_TST_F2_1_1_001_PartnerDetail_MerchantContact}}\",\r\n    \"CPID\": \"{{Value_CreatePartner_TST_F2_1_1_001_PartnerDetail_CPID}}\"\r\n  },\r\n  \"Property\": {\r\n    \"RouteEngine\": \"{{Value_CreatePartner_TST_F2_1_1_001_Property_RouteEngine}}\"\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{url}}{{provisioningapis}}/api/v1/Partner/CreatePartner",
									"host": [
										"{{url}}{{provisioningapis}}"
									],
									"path": [
										"api",
										"v1",
										"Partner",
										"CreatePartner"
									]
								},
								"description": "Type:Desire"
							},
							"response": []
						},
						{
							"name": "CreatePartner_TST_F2_0_2_002_Error_PartnerNameAlreadyUse",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"\r",
											"\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreatePartnerfail_\"\r",
											"var x_ais_OrderRef_CreatePartner_fail = pm.globals.get(\"x_ais_OrderRef_CreatePartner_fail\");\r",
											"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"//get global variable to statusCode 403\r",
											"var statusCodeForbidden = pm.globals.get(\"statusCodeForbidden\");\r",
											"//get global variable to resultCode \"40301\"\r",
											"var resultCodeTheClientRequestedAlreadyExists = pm.globals.get(\"resultCodeTheClientRequestedAlreadyExists\");\r",
											"//get global variable to resultDescription \"The PartnerName is Already Use\"\r",
											"var resultDescriptionThePartnerNameIsAlreadyExisted = pm.globals.get(\"resultDescriptionThePartnerNameIsAlreadyExisted\");\r",
											"\r",
											"pm.test(\"CreatePartner: Status code is \" + statusCodeForbidden, function () {\r",
											"    pm.response.to.have.status(statusCodeForbidden);\r",
											"});\r",
											"pm.test('CreatePartner: operationStatus code is '+'\"'+ resultCodeTheClientRequestedAlreadyExists +'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeTheClientRequestedAlreadyExists);\r",
											"});\r",
											"pm.test('CreatePartner: operationStatus Description is '+'\"'+ resultDescriptionThePartnerNameIsAlreadyExisted+'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionThePartnerNameIsAlreadyExisted);\r",
											"});\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"//---------------- LogDefaultValue --------------//\r",
											"//set variable to LogDefaultValue JSON.parse\r",
											"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
											"// console.log('LogDefaultValue',LogDefaultValue);\r",
											"//---------------- set globals Other --------------//\r",
											"\r",
											"var SearchLog = LogDefaultValue.SearchLog;\r",
											"// console.log('SearchLog',SearchLog);\r",
											"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
											"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
											"var kbn_version = SearchLog.header.kbn_version;\r",
											"var authorization = SearchLog.header.Authorization;\r",
											"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
											"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
											"var namespace = LogDefaultValue.Other.namespace;\r",
											"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
											"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
											"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
											"var methodPost = LogDefaultValue.Other.methodPost;\r",
											"\r",
											"// Detail\r",
											"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
											"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
											"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
											"\r",
											"// Summary\r",
											"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
											"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
											"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
											"\r",
											"// ProvisioningAPIs [Partner]\r",
											"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
											"var cmdName = LogDefaultValue.Provisioning.Partner.cmdNameCreatePartner;\r",
											"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
											"var containerId = LogDefaultValue.Provisioning.containerId;\r",
											"var requestObjectUrlStaging = LogDefaultValue.Provisioning.Partner.requestObjectUrlCreatePartnerMgStaging;\r",
											"\r",
											"// Check CDR (Summary Log) and EDR (Detail Log)\r",
											"SearchLogFindTid = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSearchLogFindTid = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization' : authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = x_ais_OrderRef_CreatePartner_fail + current_timestamp;\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestSearchLogFindTid = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"\r",
											"        let optionsSearchLogFindTid = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptSearchLogFindTid,\r",
											"            body: httpRequestSearchLogFindTid\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsSearchLogFindTid);\r",
											"        let jsonDataSearchLogFindTid = await response.json();\r",
											"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
											"\r",
											"        // //200\r",
											"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"\r",
											"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
											"        console.log('hits',hits)\r",
											"  \r",
											"        // find tid\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            // let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"        \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            if(applicationNameValue == applicationName){\r",
											"                let tid = hits[i]._source.cauldron.tid;\r",
											"                pm.environment.set(\"tid\", tid);\r",
											"                break;\r",
											"           }\r",
											"        }\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"CheckLog = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCheckLog = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = pm.environment.get(\"tid\");\r",
											"\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestCheckLog = {\r",
											"            mode: 'raw',\r",
											"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"        let optionsCheckLog = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptCheckLog,\r",
											"            body: httpRequestCheckLog\r",
											"        }; \r",
											"        let response = await reqPromise(optionsCheckLog);\r",
											"        let jsonDataCheckLog = await response.json();\r",
											"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
											"        \r",
											"        // //200\r",
											"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });     \r",
											"        \r",
											"        let hits = jsonDataCheckLog.hits.hits\r",
											"        console.log('hits',hits)\r",
											"  \r",
											"        // find logType\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            //  let logType = hits[i]._source.cauldron.logType\r",
											"            let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"           \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            \r",
											"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
											"            // console.log('resultDataLog',resultDataLog)\r",
											"\r",
											"            let tidControl = x_ais_OrderRef_CreatePartner_fail + current_timestamp;\r",
											"            // console.log(tidControl);\r",
											"            if(applicationNameValue == applicationName){\r",
											"                 \r",
											"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ProvisioningAPIs\r",
											"                pm.test(\"Check Summary Log : CreatePartner\" , function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Summary Log ( Expected = Actual) [CreatePartner] ==================\");\r",
											"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
											"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
											"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeTheClientRequestedAlreadyExists);\r",
											"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionThePartnerNameIsAlreadyExisted);\r",
											"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
											"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                         // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
											"                        //  console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
											"\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
											"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
											"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeTheClientRequestedAlreadyExists); \r",
											"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionThePartnerNameIsAlreadyExisted); \r",
											"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
											"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
											"                        // pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
											"\r",
											"\r",
											"                        // check custom\r",
											"                        // \"custom\":[ { \"no\":\"1\", \"endPointName\":\"db.TenantsCollection\", \"responseStatus\":\"Success:InquiryTenant was successfully.\", \"processTime\":2.6042 } ],\r",
											"\r",
											"                        let custom = resultDataLog.custom.endPointSummary;\r",
											"                        console.log(\"custom : : :\",custom)\r",
											"                        let countCustom = custom.length;\r",
											"\r",
											"                        // [\"db.TenantsCollection\"],\r",
											"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_CreatePartner_002;\r",
											"                        // [\"Success:InquiryTenant was successfully.\"]\r",
											"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_CreatePartner_002;\r",
											"                        let countCustomStep = dataEndPointName.length;\r",
											"                        // pm.expect(countCustom).to.eql(countCustomStep); \r",
											"                        for(let i=0;i<countCustomStep;i++){\r",
											"                            let no = custom[i].no;\r",
											"                            let valueEndPointName = custom[i].endPointName;\r",
											"                            let valueResponseStatus = custom[i].responseStatus;\r",
											"                            // console.log(\"i\",i);\r",
											"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
											"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
											"                           \r",
											"                            console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep );\r",
											"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString() );\r",
											"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i] );\r",
											"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i] );\r",
											"                           \r",
											"                            pm.expect(no).to.eql((i+1).toString()); \r",
											"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
											"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]);  \r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"\r",
											"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ProvisioningAPIs\r",
											"\r",
											"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
											"                    // console.log('endPointNameValue ',endPointNameValue)\r",
											"                     pm.test(\"Check Detail Log : \" + endPointNameValue + \" [CreatePartner]\", function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Detail Log ( Expected = Actual) [CreatePartner] ==================\");\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
											"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
											"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
											"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
											"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
											"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
											"\r",
											"                        if( endPointNameValue == endPointNameProvisioningAPIs){     //\"endPointName\":\"ProvisioningAPIs\"\r",
											"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs); \r",
											"                        \r",
											"                            // check requestObject\r",
											"                            // requestObject\":\"{ \\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Partner/CreatePartner\\\", \\\"method\\\":\\\"POST\\\", \\\"headers\\\":{ \\\"x-ais-username\\\":\\\"AisPartner\\\", \\\"x-ais-orderref\\\":\\\"CreatePartnerfail_202104271104852\\\", \\\"x-ais-orderdesc\\\":\\\"CreatePartner\\\", \\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAGz3tsie+KV1NzhQ0VBvE5uYgwI/SLKJUGDoYgnNvJATUIlAkkY2KW0\\\" }, \\\"body\\\":{ \\\"PartnerName\\\":\\\"QA_Partner01\\\", \\\"PartnerType\\\":[ \\\"Supplier\\\", \\\"Customer\\\" ], \\\"PartnerDetail\\\":{ \\\"MerchantContact\\\":\\\"QA_Partner01@ais.co.th\\\", \\\"CPID\\\":\\\"QA_Partner01@ais.co.th\\\" }, \\\"Property\\\":{ \\\"RouteEngine\\\":\\\"false\\\" } } }\",\r",
											"                            \r",
											"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
											"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
											"                            let url = urlCheckLog + requestObjectUrlStaging; \r",
											"                            let x_ais_orderref = x_ais_OrderRef_CreatePartner_fail + current_timestamp;\r",
											"                            let x_ais_orderdesc = x_ais_OrderDesc_CreatePartner;\r",
											"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken\");\r",
											"                            let PartnerName = pm.environment.get(\"Value_CreatePartner_TST_F2_0_2_002_PartnerName\");\r",
											"                            let PartnerType = pm.environment.get(\"Value_CreatePartner_TST_F2_0_2_002_PartnerType\");\r",
											"                            let PartnerDetailMerchantContact = pm.environment.get(\"Value_CreatePartner_TST_F2_0_2_002_PartnerDetail_MerchantContact\");\r",
											"                            let PartnerDetailCPID = pm.environment.get(\"Value_CreatePartner_TST_F2_0_2_002_PartnerDetail_CPID\");\r",
											"                            let PropertyRouteEngine = pm.environment.get(\"Value_CreatePartner_TST_F2_0_2_002_Property_RouteEngine\");\r",
											"                                    \r",
											"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
											"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerName).to.eql(PartnerName);\r",
											"                            pm.expect(JSON.stringify(jsonParseRequestObject.body.PartnerType)).to.eql(PartnerType);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerDetail.MerchantContact).to.eql(PartnerDetailMerchantContact);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerDetail.CPID).to.eql(PartnerDetailCPID);\r",
											"                            pm.expect(jsonParseRequestObject.body.Property.RouteEngine).to.eql(PropertyRouteEngine);\r",
											"\r",
											"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
											"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
											"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
											"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
											"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
											"                            console.log(\"resquest.body.PartnerName : \" + jsonParseRequestObject.body.PartnerName + \" = \" + PartnerName);\r",
											"                            console.log(\"resquest.body.PartnerType : \" + JSON.stringify(jsonParseRequestObject.body.PartnerType) + \" = \" + PartnerType);\r",
											"                            console.log(\"resquest.body.MerchantContact : \" + jsonParseRequestObject.body.MerchantContact + \" = \" + PartnerDetailMerchantContact);\r",
											"                            console.log(\"resquest.body.CPID : \" + jsonParseRequestObject.body.PartnerDetail.CPID + \" = \" + PartnerDetailCPID);\r",
											"                            console.log(\"resquest.body.RouteEngine : \" + jsonParseRequestObject.body.Property.RouteEngine + \" = \" + PropertyRouteEngine);\r",
											"        \r",
											"                            // check responseObject\r",
											"                            // \"responseObject\":\"{ \\\"OperationStatus\\\":{ \\\"Code\\\":\\\"40302\\\", \\\"Description\\\":\\\"The PartnerName is Already Use\\\" }\r",
											"\r",
											"\r",
											"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
											"                            // console.log('jsonParseResponseObject',jsonParseResponseObject);  \r",
											"\r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeTheClientRequestedAlreadyExists);  \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionThePartnerNameIsAlreadyExisted);  \r",
											"\r",
											"                            console.log(\"response.PartnerInfo.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeTheClientRequestedAlreadyExists);\r",
											"                            console.log(\"response.PartnerInfo.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionThePartnerNameIsAlreadyExisted);\r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"setTimeout(function(){SearchLogFindTid();}, 6000); \r",
											"setTimeout(function(){CheckLog();}, 11000); \r",
											"setTimeout(function(){\r",
											"pm.environment.unset(\"current_timestamp\");\r",
											"pm.environment.unset(\"AccessToken\");\r",
											"pm.environment.unset(\"Value_CreatePartner_TST_F2_0_2_002_PartnerName\");\r",
											"pm.environment.unset(\"Value_CreatePartner_TST_F2_0_2_002_PartnerType\");\r",
											"pm.environment.unset(\"Value_CreatePartner_TST_F2_0_2_002_PartnerDetail_MerchantContact\");\r",
											"pm.environment.unset(\"Value_CreatePartner_TST_F2_0_2_002_PartnerDetail_CPID\");\r",
											"pm.environment.unset(\"Value_CreatePartner_TST_F2_0_2_002_Property_RouteEngine\");\r",
											"pm.environment.unset(\"tid\");\r",
											"}, 40000);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var Username = pm.environment.get(\"Username\");\r",
											"var Password = pm.environment.get(\"Password\");\r",
											"\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"pm.environment.set(\"Value_CreatePartner_TST_F2_0_2_002_PartnerName\",fieldDataValue.Provisioning.Partner.CreatePartner.Value_CreatePartner_TST_F2_0_2_002_PartnerName)\r",
											"pm.environment.set(\"Value_CreatePartner_TST_F2_0_2_002_PartnerType\",JSON.stringify(fieldDataValue.Provisioning.Partner.CreatePartner.Value_CreatePartner_TST_F2_0_2_002_PartnerType))\r",
											"pm.environment.set(\"Value_CreatePartner_TST_F2_0_2_002_PartnerDetail_MerchantContact\",fieldDataValue.Provisioning.Partner.CreatePartner.Value_CreatePartner_TST_F2_0_2_002_PartnerDetail_MerchantContact)\r",
											"pm.environment.set(\"Value_CreatePartner_TST_F2_0_2_002_PartnerDetail_CPID\",fieldDataValue.Provisioning.Partner.CreatePartner.Value_CreatePartner_TST_F2_0_2_002_PartnerDetail_CPID)\r",
											"pm.environment.set(\"Value_CreatePartner_TST_F2_0_2_002_Property_RouteEngine\",fieldDataValue.Provisioning.Partner.CreatePartner.Value_CreatePartner_TST_F2_0_2_002_Property_RouteEngine)\r",
											"\r",
											"//format YYYYMMDDHHMMSSS\r",
											"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
											"// console.log('currentTmestamp',currentTmestamp);\r",
											"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- statusCodeList --------------//\r",
											"//set variable to statusCodeList JSON.parse\r",
											"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
											"//set global variable to statusCode 403\r",
											"pm.globals.set(\"statusCodeForbidden\", statusCodeList.statusCodeForbidden);\r",
											"\r",
											"//---------------- resultCodeList --------------//\r",
											"//set variable to resultCodeList JSON.parse\r",
											"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
											"//set global variable to resultCode \"40301\"\r",
											"pm.globals.set(\"resultCodeTheClientRequestedAlreadyExists\", resultCodeList.resultCodeTheClientRequestedAlreadyExists);\r",
											"\r",
											"//---------------- resultDescriptionErrorList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
											"//set global variable to resultDescription \"The PartnerName is Already Existed\"\r",
											"pm.globals.set(\"resultDescriptionThePartnerNameIsAlreadyExisted\", resultDescriptionErrorList.resultDescriptionThePartnerNameIsAlreadyExisted);\r",
											"\r",
											"//---------------- HeaderList --------------//\r",
											"//set variable to HeaderList JSON.parse\r",
											"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
											"//---------------- set globals Other --------------//\r",
											"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
											"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
											"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
											"//set global variable to kbn-versio \"7.5.1\"\r",
											"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Signin_ --------------//\r",
											"//set global variable to x_ais_OrderRef \"Signin_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals CreatePartner --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
											"//set global variable to x_ais_OrderRef \"CreatePartner_fail\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreatePartner_fail\", HeaderList.Partner.x_ais_OrderRef_CreatePartner_fail);\r",
											"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultDescription \"SignInProcess is Success\"\r",
											"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
											"\r",
											"\r",
											"//---------------- urlRouteList --------------//\r",
											"//set variable to urlRouteList JSON.parse\r",
											"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
											"//---------------- set url Create --------------//\r",
											"//set global variable to url \"/api/v1/auth/signin\"\r",
											"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
											"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
											"//---------------- get url Create --------------//\r",
											"//get global variable to url \"/api/v1/auth/signin\"\r",
											"var urlSignin = pm.globals.get(\"urlSignin\");\r",
											"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set url Remove --------------//\r",
											"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"Signin_\"\r",
											"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"// Signin get token\r",
											" Signin = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username,\r",
											"                password:Password\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"\r",
											"        //set random_number\r",
											"        // pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
											"        // //set PartnerName\r",
											"        //  let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
											"        // pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
											"        // //set MerchantContact\r",
											"        // let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
											"        // pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
											"        // // set CPID\r",
											"        // let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
											"        // pm.environment.set(\"CPID\", CPIDValue)\r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"Signin();\r",
											"setTimeout(function(){}, 3000);\r",
											" \r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-ais-UserName",
										"type": "text",
										"value": "{{x_ais_UserName_AisPartner}}"
									},
									{
										"key": "x-ais-OrderRef",
										"value": "{{x_ais_OrderRef_CreatePartner_fail}}{{current_timestamp}}"
									},
									{
										"key": "x-ais-OrderDesc",
										"type": "text",
										"value": "{{x_ais_OrderDesc_CreatePartner}}"
									},
									{
										"key": "x-ais-AccessToken",
										"value": "{{Bearer}} {{AccessToken}}"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"PartnerName\": \"{{Value_CreatePartner_TST_F2_0_2_002_PartnerName}}\",\r\n  \"PartnerType\": {{Value_CreatePartner_TST_F2_0_2_002_PartnerType}},\r\n  \"PartnerDetail\": {\r\n    \"MerchantContact\": \"{{Value_CreatePartner_TST_F2_0_2_002_PartnerDetail_MerchantContact}}\",\r\n    \"CPID\": \"{{Value_CreatePartner_TST_F2_0_2_002_PartnerDetail_CPID}}\"\r\n  },\r\n  \"Property\": {\r\n    \"RouteEngine\":\"{{Value_CreatePartner_TST_F2_0_2_002_Property_RouteEngine}}\"\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{url}}{{provisioningapis}}/api/v1/Partner/CreatePartner",
									"host": [
										"{{url}}{{provisioningapis}}"
									],
									"path": [
										"api",
										"v1",
										"Partner",
										"CreatePartner"
									]
								},
								"description": "Type:Desire"
							},
							"response": []
						},
						{
							"name": "CreatePartner_TST_F2_0_2_003_Error_PartnerTypeIsRequired",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"\r",
											"\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreatePartnerfail_\"\r",
											"var x_ais_OrderRef_CreatePartner_fail = pm.globals.get(\"x_ais_OrderRef_CreatePartner_fail\");\r",
											"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"//get global variable to statusCode 403\r",
											"var statusCodeForbidden = pm.globals.get(\"statusCodeForbidden\");\r",
											"//get global variable to resultCode \"40300\"\r",
											"var resultCodeForbiddenMissingOrInvalidParameter = pm.globals.get(\"resultCodeForbiddenMissingOrInvalidParameter\");\r",
											"//get global variable to resultDescription \"The PartnerType field is required.\"\r",
											"var resultDescriptionThePartnerTypeFieldIsRequired = pm.globals.get(\"resultDescriptionThePartnerTypeFieldIsRequired\");\r",
											"\r",
											"pm.test(\"CreatePartner: Status code is \" + statusCodeForbidden, function () {\r",
											"    pm.response.to.have.status(statusCodeForbidden);\r",
											"});\r",
											"pm.test('CreatePartner: operationStatus code is '+'\"'+ resultCodeForbiddenMissingOrInvalidParameter +'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeForbiddenMissingOrInvalidParameter);\r",
											"});\r",
											"pm.test('CreatePartner: operationStatus Description is '+'\"'+ resultDescriptionThePartnerTypeFieldIsRequired+'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionThePartnerTypeFieldIsRequired);\r",
											"});\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"//---------------- LogDefaultValue --------------//\r",
											"//set variable to LogDefaultValue JSON.parse\r",
											"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
											"// console.log('LogDefaultValue',LogDefaultValue);\r",
											"//---------------- set globals Other --------------//\r",
											"\r",
											"var SearchLog = LogDefaultValue.SearchLog;\r",
											"// console.log('SearchLog',SearchLog);\r",
											"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
											"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
											"var kbn_version = SearchLog.header.kbn_version;\r",
											"var authorization = SearchLog.header.Authorization;\r",
											"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
											"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
											"var namespace = LogDefaultValue.Other.namespace;\r",
											"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
											"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
											"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
											"var methodPost = LogDefaultValue.Other.methodPost;\r",
											"\r",
											"// Detail\r",
											"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
											"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
											"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
											"\r",
											"// Summary\r",
											"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
											"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
											"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
											"\r",
											"// ProvisioningAPIs [Partner]\r",
											"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
											"var cmdName = LogDefaultValue.Provisioning.Partner.cmdNameCreatePartner;\r",
											"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
											"var containerId = LogDefaultValue.Provisioning.containerId;\r",
											"var requestObjectUrlStaging = LogDefaultValue.Provisioning.Partner.requestObjectUrlCreatePartnerMgStaging;\r",
											"\r",
											"// Check CDR (Summary Log) and EDR (Detail Log)\r",
											"SearchLogFindTid = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSearchLogFindTid = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization' : authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = x_ais_OrderRef_CreatePartner_fail + current_timestamp;\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestSearchLogFindTid = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"\r",
											"        let optionsSearchLogFindTid = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptSearchLogFindTid,\r",
											"            body: httpRequestSearchLogFindTid\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsSearchLogFindTid);\r",
											"        let jsonDataSearchLogFindTid = await response.json();\r",
											"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
											"\r",
											"        // //200\r",
											"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"\r",
											"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
											"        console.log('hits',hits)\r",
											"  \r",
											"        // find tid\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            // let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"        \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            if(applicationNameValue == applicationName){\r",
											"                let tid = hits[i]._source.cauldron.tid;\r",
											"                pm.environment.set(\"tid\", tid);\r",
											"                break;\r",
											"           }\r",
											"        }\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"CheckLog = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCheckLog = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = pm.environment.get(\"tid\");\r",
											"\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestCheckLog = {\r",
											"            mode: 'raw',\r",
											"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"        let optionsCheckLog = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptCheckLog,\r",
											"            body: httpRequestCheckLog\r",
											"        }; \r",
											"        let response = await reqPromise(optionsCheckLog);\r",
											"        let jsonDataCheckLog = await response.json();\r",
											"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
											"        \r",
											"        // //200\r",
											"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });     \r",
											"        \r",
											"        let hits = jsonDataCheckLog.hits.hits\r",
											"        console.log('hits',hits)\r",
											"  \r",
											"        // find logType\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            //  let logType = hits[i]._source.cauldron.logType\r",
											"            let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"           \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            \r",
											"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
											"            // console.log('resultDataLog',resultDataLog)\r",
											"\r",
											"            let tidControl = x_ais_OrderRef_CreatePartner_fail + current_timestamp;\r",
											"            // console.log(tidControl);\r",
											"            if(applicationNameValue == applicationName){\r",
											"                 \r",
											"               if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ProvisioningAPIs\r",
											"                     pm.test(\"Check Summary Log : CreatePartner\" , function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Summary Log ( Expected = Actual) [CreatePartner] ==================\");\r",
											"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
											"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
											"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeForbiddenMissingOrInvalidParameter);\r",
											"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionThePartnerTypeFieldIsRequired);\r",
											"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
											"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                         // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
											"                        console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
											"                    \r",
											"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp);\r",
											"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName);\r",
											"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeForbiddenMissingOrInvalidParameter);\r",
											"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionThePartnerTypeFieldIsRequired);\r",
											"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp);\r",
											"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary);\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);  \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace);\r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName);\r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId);\r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
											"                        pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
											"\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"\r",
											"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ProvisioningAPIs\r",
											"\r",
											"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
											"                    // console.log('endPointNameValue ',endPointNameValue)\r",
											"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [CreatePartner]\", function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Detail Log ( Expected = Actual) [CreatePartner] ==================\");\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
											"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
											"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
											"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
											"\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
											"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
											"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
											"\r",
											"                        if( endPointNameValue == endPointNameProvisioningAPIs){     //\"endPointName\":\"ProvisioningAPIs\"\r",
											"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs); \r",
											"                        \r",
											"                            // check requestObject\r",
											"                            // \"requestObject\":\"{ \\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Partner/CreatePartner\\\", \\\"method\\\":\\\"POST\\\", \\\"headers\\\":{ \\\"x-ais-username\\\":\\\"AisPartner\\\", \\\"x-ais-orderref\\\":\\\"CreatePartnerfail_202104271104409\\\", \\\"x-ais-orderdesc\\\":\\\"CreatePartner\\\", \\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAGz3tsie+KV1MPIk03Jvb7aJaVvC6hzGrdw3oHSFyFWX0IlAkkY2KW0\\\" }, \\\"body\\\":{ \\\"PartnerName\\\":\\\"QA_Partner01\\\", \\\"PartnerDetail\\\":{ \\\"MerchantContact\\\":\\\"QA_Partner01@ais.co.th\\\", \\\"CPID\\\":\\\"QA_Partner01@ais.co.th\\\" }, \\\"Property\\\":{ \\\"RouteEngine\\\":\\\"false\\\" } }\r",
											"                            \r",
											"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
											"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
											"\r",
											"                            \r",
											"\r",
											"                            let url = urlCheckLog + requestObjectUrlStaging; \r",
											"                            let x_ais_orderref = x_ais_OrderRef_CreatePartner_fail + current_timestamp;\r",
											"                            let x_ais_orderdesc = x_ais_OrderDesc_CreatePartner;\r",
											"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken\");                     \r",
											"                            let PartnerName = pm.environment.get(\"Value_CreatePartner_TST_F2_0_2_003_PartnerName\");\r",
											"                            let PartnerDetailMerchantContact = pm.environment.get(\"Value_CreatePartner_TST_F2_0_2_003_PartnerDetail_MerchantContact\");\r",
											"                            let PartnerDetailCPID = pm.environment.get(\"Value_CreatePartner_TST_F2_0_2_003_PartnerDetail_CPID\");\r",
											"                            let PropertyRouteEngine = pm.environment.get(\"Value_CreatePartner_TST_F2_0_2_003_Property_RouteEngine\");\r",
											"\r",
											"                            \r",
											"                            pm.expect(jsonParseRequestObject.url).to.eql(url);\r",
											"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerName).to.eql(PartnerName);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerDetail.MerchantContact).to.eql(PartnerDetailMerchantContact);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerDetail.CPID).to.eql(PartnerDetailCPID);\r",
											"                            pm.expect(jsonParseRequestObject.body.Property.RouteEngine).to.eql(PropertyRouteEngine);\r",
											"\r",
											"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
											"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
											"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
											"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
											"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
											"                            console.log(\"resquest.body.PartnerName : \" + jsonParseRequestObject.body.PartnerName + \" = \" + PartnerName);\r",
											"                            console.log(\"resquest.body.MerchantContact : \" + jsonParseRequestObject.body.MerchantContact + \" = \" + PartnerDetailMerchantContact);\r",
											"                            console.log(\"resquest.body.CPID : \" + jsonParseRequestObject.body.PartnerDetail.CPID + \" = \" + PartnerDetailCPID);\r",
											"                            console.log(\"resquest.body.RouteEngine : \" + jsonParseRequestObject.body.Property.RouteEngine + \" = \" + PropertyRouteEngine);\r",
											"                           \r",
											"\r",
											"                                          \r",
											"                            // check responseObject\r",
											"                            // \"responseObject\":\"{ \\\"OperationStatus\\\":{ \\\"Code\\\":\\\"40300\\\", \\\"Description\\\":\\\"The PartnerType field is required.\\\" } }\",\r",
											"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
											"                            // console.log('jsonParseResponseObject',jsonParseResponseObject);  \r",
											"\r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeForbiddenMissingOrInvalidParameter);  \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionThePartnerTypeFieldIsRequired);  \r",
											"\r",
											"                            console.log(\"response.PartnerInfo.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeForbiddenMissingOrInvalidParameter);\r",
											"                            console.log(\"response.PartnerInfo.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionThePartnerTypeFieldIsRequired);\r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"setTimeout(function(){SearchLogFindTid();}, 6000); \r",
											"setTimeout(function(){CheckLog();}, 11000); \r",
											"setTimeout(function(){\r",
											"pm.environment.unset(\"current_timestamp\");\r",
											"pm.environment.unset(\"AccessToken\");\r",
											"pm.environment.unset(\"Value_CreatePartner_TST_F2_0_2_003_PartnerName\");\r",
											"pm.environment.unset(\"Value_CreatePartner_TST_F2_0_2_003_PartnerDetail_MerchantContact\");\r",
											"pm.environment.unset(\"Value_CreatePartner_TST_F2_0_2_003_PartnerDetail_CPID\");\r",
											"pm.environment.unset(\"Value_CreatePartner_TST_F2_0_2_003_Property_RouteEngine\");\r",
											"pm.environment.unset(\"tid\");\r",
											"}, 40000);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var Username = pm.environment.get(\"Username\");\r",
											"var Password = pm.environment.get(\"Password\");\r",
											"\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"pm.environment.set(\"Value_CreatePartner_TST_F2_0_2_003_PartnerName\",fieldDataValue.Provisioning.Partner.CreatePartner.Value_CreatePartner_TST_F2_0_2_003_PartnerName)\r",
											"pm.environment.set(\"Value_CreatePartner_TST_F2_0_2_003_PartnerDetail_MerchantContact\",fieldDataValue.Provisioning.Partner.CreatePartner.Value_CreatePartner_TST_F2_0_2_003_PartnerDetail_MerchantContact)\r",
											"pm.environment.set(\"Value_CreatePartner_TST_F2_0_2_003_PartnerDetail_CPID\",fieldDataValue.Provisioning.Partner.CreatePartner.Value_CreatePartner_TST_F2_0_2_003_PartnerDetail_CPID)\r",
											"pm.environment.set(\"Value_CreatePartner_TST_F2_0_2_003_Property_RouteEngine\",fieldDataValue.Provisioning.Partner.CreatePartner.Value_CreatePartner_TST_F2_0_2_003_Property_RouteEngine)\r",
											"\r",
											"\r",
											"//format YYYYMMDDHHMMSSS\r",
											"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
											"// console.log('currentTmestamp',currentTmestamp);\r",
											"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- statusCodeList --------------//\r",
											"//set variable to statusCodeList JSON.parse\r",
											"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
											"//set global variable to statusCode 403\r",
											"pm.globals.set(\"statusCodeForbidden\", statusCodeList.statusCodeForbidden);\r",
											"\r",
											"\r",
											"//---------------- resultCodeList --------------//\r",
											"//set variable to resultCodeList JSON.parse\r",
											"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
											"//set global variable to resultCode \"40300\"\r",
											"pm.globals.set(\"resultCodeForbiddenMissingOrInvalidParameter\", resultCodeList.resultCodeForbiddenMissingOrInvalidParameter);\r",
											"\r",
											"\r",
											"//---------------- resultDescriptionErrorList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
											"//set global variable to resultDescription \"The PartnerName is Already Use\"\r",
											"pm.globals.set(\"resultDescriptionThePartnerTypeFieldIsRequired\", resultDescriptionErrorList.resultDescriptionThePartnerTypeFieldIsRequired);\r",
											"\r",
											"\r",
											"\r",
											"//---------------- HeaderList --------------//\r",
											"//set variable to HeaderList JSON.parse\r",
											"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
											"//---------------- set globals Other --------------//\r",
											"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
											"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
											"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
											"//set global variable to kbn-versio \"7.5.1\"\r",
											"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Signin_ --------------//\r",
											"//set global variable to x_ais_OrderRef \"Signin_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals CreatePartner --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
											"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultDescription \"SignInProcess is Success\"\r",
											"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
											"\r",
											"\r",
											"//---------------- urlRouteList --------------//\r",
											"//set variable to urlRouteList JSON.parse\r",
											"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
											"//---------------- set url Create --------------//\r",
											"//set global variable to url \"/api/v1/auth/signin\"\r",
											"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
											"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
											"//---------------- get url Create --------------//\r",
											"//get global variable to url \"/api/v1/auth/signin\"\r",
											"var urlSignin = pm.globals.get(\"urlSignin\");\r",
											"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set url Remove --------------//\r",
											"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"Signin_\"\r",
											"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"// Signin get token\r",
											" Signin = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username,\r",
											"                password:Password\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"\r",
											"        //set random_number\r",
											"        // pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
											"        // //set PartnerName\r",
											"        //  let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
											"        // pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
											"        // //set MerchantContact\r",
											"        // let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
											"        // pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
											"        // // set CPID\r",
											"        // let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
											"        // pm.environment.set(\"CPID\", CPIDValue)\r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"Signin();\r",
											"setTimeout(function(){}, 5000);\r",
											" \r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-ais-UserName",
										"type": "text",
										"value": "{{x_ais_UserName_AisPartner}}"
									},
									{
										"key": "x-ais-OrderRef",
										"value": "{{x_ais_OrderRef_CreatePartner_fail}}{{current_timestamp}}"
									},
									{
										"key": "x-ais-OrderDesc",
										"type": "text",
										"value": "{{x_ais_OrderDesc_CreatePartner}}"
									},
									{
										"key": "x-ais-AccessToken",
										"value": "{{Bearer}} {{AccessToken}}"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"PartnerName\": \"{{Value_CreatePartner_TST_F2_0_2_003_PartnerName}}\",\r\n  \"PartnerDetail\": {\r\n    \"MerchantContact\": \"{{Value_CreatePartner_TST_F2_0_2_003_PartnerDetail_MerchantContact}}\",\r\n    \"CPID\": \"{{Value_CreatePartner_TST_F2_0_2_003_PartnerDetail_CPID}}\"\r\n  },\r\n  \"Property\": {\r\n    \"RouteEngine\":\"{{Value_CreatePartner_TST_F2_0_2_003_Property_RouteEngine}}\"\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{url}}{{provisioningapis}}/api/v1/Partner/CreatePartner",
									"host": [
										"{{url}}{{provisioningapis}}"
									],
									"path": [
										"api",
										"v1",
										"Partner",
										"CreatePartner"
									]
								},
								"description": "Type:Desire"
							},
							"response": []
						},
						{
							"name": "CreatePartner_TST_F2_0_2_004_Error_SupplierAdminRoleInvalid",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var Username = pm.environment.get(\"Username_SupplierAdmin\");\r",
											"var Password = pm.environment.get(\"Password_SupplierAdmin\");\r",
											"\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"\r",
											"\r",
											"\r",
											"pm.environment.set(\"Value_CreatePartner_TST_F2_1_1_001_PartnerName\",fieldDataValue.Provisioning.Partner.CreatePartner.Value_CreatePartner_TST_F2_1_1_001_PartnerName)\r",
											"pm.environment.set(\"Value_CreatePartner_TST_F2_1_1_001_PartnerType\",JSON.stringify(fieldDataValue.Provisioning.Partner.CreatePartner.Value_CreatePartner_TST_F2_1_1_001_PartnerType))\r",
											"pm.environment.set(\"Value_CreatePartner_TST_F2_1_1_001_PartnerDetail_MerchantContact\",fieldDataValue.Provisioning.Partner.CreatePartner.Value_CreatePartner_TST_F2_1_1_001_PartnerDetail_MerchantContact)\r",
											"pm.environment.set(\"Value_CreatePartner_TST_F2_1_1_001_PartnerDetail_CPID\",fieldDataValue.Provisioning.Partner.CreatePartner.Value_CreatePartner_TST_F2_1_1_001_PartnerDetail_CPID)\r",
											"pm.environment.set(\"Value_CreatePartner_TST_F2_1_1_001_Property_RouteEngine\",fieldDataValue.Provisioning.Partner.CreatePartner.Value_CreatePartner_TST_F2_1_1_001_Property_RouteEngine)\r",
											"\r",
											"\r",
											"//format YYYYMMDDHHMMSSS\r",
											"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
											"\r",
											"// console.log('currentTmestamp',currentTmestamp);\r",
											"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
											"\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- statusCodeList --------------//\r",
											"//set variable to statusCodeList JSON.parse\r",
											"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
											"//set global variable to statusCode 200\r",
											"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
											"//set global variable to statusCode 201\r",
											"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
											"//set global variable to statusCode 403\r",
											"pm.globals.set(\"statusCodeForbidden\", statusCodeList.statusCodeForbidden);\r",
											"\r",
											"//---------------- resultCodeList ------------- -//\r",
											"//set variable to resultCodeList JSON.parse\r",
											"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
											"//set global variable to resultCode \"20000\"\r",
											"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
											"//set global variable to resultCode \"20100\"\r",
											"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
											"//set global variable to resultCode \"40308\"\r",
											"pm.globals.set(\"resultCodeRoleInvalid\", resultCodeList.resultCodeRoleInvalid);\r",
											"\r",
											"//---------------- resultDescriptionSuccessList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
											"//set global variable to resultDescription \"SignInProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
											"//set global variable to resultDescription \"CreatePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
											"//set global variable to resultDescription \"RemovePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
											"//set global variable to resultDescription \"InquiryPartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionInquiryPartner\", resultDescriptionSuccessList.resultDescriptionInquiryPartner);\r",
											"//set global variable to resultDescription \"RemoveSystemUser is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveSystemUser\", resultDescriptionSuccessList.resultDescriptionRemoveSystemUser);\r",
											"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
											"\r",
											"//---------------- resultDescriptionErrorList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
											"//set global variable to resultDescription \"Role Invalid\"\r",
											"pm.globals.set(\"resultDescriptionRoleInvalid\", resultDescriptionErrorList.resultDescriptionRoleInvalid);\r",
											"\r",
											"\r",
											"//---------------- HeaderList --------------//\r",
											"//set variable to HeaderList JSON.parse\r",
											"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
											"//---------------- set globals Other --------------//\r",
											"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
											"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
											"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
											"//set global variable to kbn-versio \"7.5.1\"\r",
											"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Signin_ --------------//\r",
											"//set global variable to x_ais_OrderRef \"Signin_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Partner --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
											"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
											"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
											"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
											"//set global variable to x_ais_OrderRef \"InquiryPartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_InquiryPartner\", HeaderList.Partner.x_ais_OrderRef_InquiryPartner);\r",
											"//set global variable to x_ais_OrderDesc \"InquiryPartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_InquiryPartner\", HeaderList.Partner.x_ais_OrderDesc_InquiryPartner);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals CreateAccount --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
											"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
											"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
											"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals SystemUser --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreateSystemUser_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreateSystemUser\", HeaderList.SystemUser.x_ais_OrderRef_CreateSystemUser);\r",
											"//set global variable to x_ais_OrderDesc \"CreateSystemUser\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreateSystemUser\", HeaderList.SystemUser.x_ais_OrderDesc_CreateSystemUser);\r",
											"//set global variable to x_ais_OrderRef \"RemoveSystemUser_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemoveSystemUser\", HeaderList.SystemUser.x_ais_OrderRef_RemoveSystemUser);\r",
											"//set global variable to x_ais_OrderDesc \"RemoveSystemUser\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemoveSystemUser\", HeaderList.SystemUser.x_ais_OrderDesc_RemoveSystemUser);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultCode \"20100\"\r",
											"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
											"//get global variable to resultDescription \"SignInProcess is Success\"\r",
											"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
											"\r",
											"\r",
											"\r",
											"//---------------- urlRouteList --------------//\r",
											"//set variable to urlRouteList JSON.parse\r",
											"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
											"//---------------- set url Create --------------//\r",
											"//set global variable to url \"/api/v1/auth/signin\"\r",
											"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
											"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
											"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
											"//set global variable to url \"/api/v1/SystemUser/CreateSystemUser\"\r",
											"pm.globals.set(\"urlSystemUserCreateSystemUser\", urlRouteList.SystemUser.urlSystemUserCreateSystemUser);\r",
											"//---------------- get url Create --------------//\r",
											"//get global variable to url \"/api/v1/auth/signin\"\r",
											"var urlSignin = pm.globals.get(\"urlSignin\");\r",
											"\r",
											"\r",
											"//---------------- set url Remove --------------//\r",
											"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
											"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
											"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
											"//set global variable to url \"/api/v1/SystemUser/RemoveSystemUser\"\r",
											"pm.globals.set(\"urlSystemUserRemoveSystemUser\", urlRouteList.SystemUser.urlSystemUserRemoveSystemUser);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set url Inquiry --------------//\r",
											"//set global variable to url \"/api/v1/Partner/InquiryPartner\"\r",
											"pm.globals.set(\"urlPartnerInquiryPartner\", urlRouteList.Partner.urlPartnerInquiryPartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"Signin_\"\r",
											"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"// Signin get token ROOT ADMIN\r",
											" Signin = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username,\r",
											"                password:Password\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        \r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"\r",
											"        // set random_number\r",
											"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
											"        //set PartnerName\r",
											"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
											"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
											"        //set MerchantContact\r",
											"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
											"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
											"        // set CPID\r",
											"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
											"        pm.environment.set(\"CPID\", CPIDValue)\r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"Signin();\r",
											"setTimeout(async function(){}, 4000); \r",
											" \r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get globals SystemUser --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemoveSystemUser_\"\r",
											"var x_ais_OrderRef_RemoveSystemUser = pm.globals.get(\"x_ais_OrderRef_RemoveSystemUser\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveSystemUser\"\r",
											"var x_ais_OrderDesc_RemoveSystemUser = pm.globals.get(\"x_ais_OrderDesc_RemoveSystemUser\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"//---------------- get url Remove --------------//\r",
											"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
											"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
											"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
											"//get global variable to url \"/api/v1/SystemUser/RemoveSystemUser\"\r",
											"var urlSystemUserRemoveSystemUser = pm.globals.get(\"urlSystemUserRemoveSystemUser\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultDescription \"RemovePartner is Success\"\r",
											"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
											"//get global variable to resultDescription \"RemoveAccount is Success\r",
											"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
											"//get global variable to resultDescription \"RemoveSystemUser is Success\"\r",
											"var resultDescriptionRemoveSystemUser = pm.globals.get(\"resultDescriptionRemoveSystemUser\");\r",
											"\r",
											"\r",
											"//get global variable to statusCode 403\r",
											"var statusCodeForbidden = pm.globals.get(\"statusCodeForbidden\");\r",
											"//get global variable to resultCode \"40308\"\r",
											"var resultCodeRoleInvalid = pm.globals.get(\"resultCodeRoleInvalid\");\r",
											"//get global variable to resultDescription \"Role Invalid\"\r",
											"var resultDescriptionRoleInvalid = pm.globals.get(\"resultDescriptionRoleInvalid\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"CreatePartner : Status code is \" + statusCodeForbidden, function () {\r",
											"    pm.response.to.have.status(statusCodeForbidden);\r",
											"});\r",
											"\r",
											"pm.test('CreatePartner : operationStatus code is '+'\"'+ resultCodeRoleInvalid +'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeRoleInvalid);\r",
											"});\r",
											"\r",
											"pm.test('CreatePartner : operationStatus description is '+'\"'+ resultDescriptionRoleInvalid+'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionRoleInvalid);\r",
											"});\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"// RemovePartner ROOT ADMIN\r",
											"RemovePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemovePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemovePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsRemovePartner = {\r",
											"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemovePartner,\r",
											"            body: httpRequestRemovePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request RemovePartner');\r",
											"        let response = await reqPromise(optionsRemovePartner);\r",
											"        let jsonDataRemovePartner = await response.json();\r",
											"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
											"    \r",
											"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemovePartner is Success\r",
											"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// RemoveAccount ROOT ADMIN\r",
											" RemoveAccount = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemoveAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemoveAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsRemoveAccount = {\r",
											"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemoveAccount,\r",
											"            body: httpRequestRemoveAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request RemoveAccount');\r",
											"        let response = await reqPromise(optionsRemoveAccount);\r",
											"        let jsonDataRemoveAccount = await response.json();\r",
											"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
											"    \r",
											"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemoveAccount is Success\r",
											"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
											"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// RemoveSystemUser ROOT ADMIN\r",
											" RemoveSystemUser = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemoveSystemUser = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemoveSystemUser + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveSystemUser,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemoveSystemUser = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"SystemUserId\": pm.environment.get(\"GetResponse_SystemUserId\")\r",
											"            })\r",
											"        };\r",
											"\r",
											"        let optionsRemoveSystemUser = {\r",
											"            url: url + provisioningapis + urlSystemUserRemoveSystemUser,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemoveSystemUser,\r",
											"            body: httpRequestRemoveSystemUser\r",
											"        };\r",
											"\r",
											"        // console.log('request RemoveSystemUser');\r",
											"        let response = await reqPromise(optionsRemoveSystemUser);\r",
											"        let jsonDataRemoveSystemUser = await response.json();\r",
											"        // console.log('jsonDataRemoveSystemUser',jsonDataRemoveSystemUser)\r",
											"    \r",
											"        let operationStatusRemoveSystemUser = await jsonDataRemoveSystemUser.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemoveSystemUser : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemoveSystemUser : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemoveSystemUser).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemoveSystemUser is Success\r",
											"        pm.test('RemoveSystemUser : OperationStatus Description is '+'\"'+ resultDescriptionRemoveSystemUser+'\"', function () {\r",
											"            pm.expect(operationStatusRemoveSystemUser).to.have.property('Description', resultDescriptionRemoveSystemUser);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"//---------------- LogDefaultValue --------------//\r",
											"//set variable to LogDefaultValue JSON.parse\r",
											"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
											"// console.log('LogDefaultValue',LogDefaultValue);\r",
											"//---------------- set globals Other --------------//\r",
											"\r",
											"var SearchLog = LogDefaultValue.SearchLog;\r",
											"// console.log('SearchLog',SearchLog);\r",
											"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
											"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
											"var kbn_version = SearchLog.header.kbn_version;\r",
											"var authorization = SearchLog.header.Authorization;\r",
											"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
											"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
											"var namespace = LogDefaultValue.Other.namespace;\r",
											"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
											"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
											"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
											"var methodPost = LogDefaultValue.Other.methodPost;\r",
											"\r",
											"// Detail\r",
											"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
											"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
											"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
											"\r",
											"// Summary\r",
											"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
											"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
											"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
											"\r",
											"// ProvisioningAPIs [Partner]\r",
											"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
											"var cmdName = LogDefaultValue.Provisioning.Partner.cmdNameCreatePartner;\r",
											"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
											"var containerId = LogDefaultValue.Provisioning.containerId;\r",
											"var requestObjectUrlStaging = LogDefaultValue.Provisioning.Partner.requestObjectUrlCreatePartnerMgStaging;\r",
											"\r",
											"// Check CDR (Summary Log) and EDR (Detail Log)\r",
											"SearchLogFindTid = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSearchLogFindTid = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization' : authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = x_ais_OrderRef_CreatePartner + current_timestamp;\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch : : :1\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestSearchLogFindTid = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"\r",
											"        let optionsSearchLogFindTid = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptSearchLogFindTid,\r",
											"            body: httpRequestSearchLogFindTid\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsSearchLogFindTid);\r",
											"        let jsonDataSearchLogFindTid = await response.json();\r",
											"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
											"\r",
											"        // //200\r",
											"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"\r",
											"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
											"        console.log('hits : : : 1',hits)\r",
											"  \r",
											"        // find tid\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            // let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"        \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"\r",
											"            if(applicationNameValue == applicationName){\r",
											"                let tid = hits[i]._source.cauldron.tid;\r",
											"                pm.environment.set(\"tid\", tid);\r",
											"                break;\r",
											"           }\r",
											"        }\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"CheckLog = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCheckLog = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = pm.environment.get(\"tid\");\r",
											"\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch : : 2\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestCheckLog = {\r",
											"            mode: 'raw',\r",
											"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"        let optionsCheckLog = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptCheckLog,\r",
											"            body: httpRequestCheckLog\r",
											"        }; \r",
											"        let response = await reqPromise(optionsCheckLog);\r",
											"        let jsonDataCheckLog = await response.json();\r",
											"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
											"        \r",
											"        // //200\r",
											"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });     \r",
											"        \r",
											"        let hits = jsonDataCheckLog.hits.hits\r",
											"        // console.log('hits',hits)\r",
											"  \r",
											"        // find logType\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            //  let logType = hits[i]._source.cauldron.logType\r",
											"            let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"           \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            \r",
											"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
											"            // console.log('resultDataLog',resultDataLog)\r",
											"            // console.log(logType)\r",
											"            // console.log(logTypeDetail)\r",
											"            // console.log(logTypeSummary)\r",
											"\r",
											"            let tidControl = x_ais_OrderRef_CreatePartner + current_timestamp;\r",
											"            // console.log(tidControl);\r",
											"            if(applicationNameValue == applicationName){\r",
											"                 \r",
											"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ProvisioningAPIs\r",
											"                     pm.test(\"Check Summary Log : CreatePartner\" , function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Summary Log ( Expected = Actual) [CreatePartner] ==================\");\r",
											"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
											"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
											"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeRoleInvalid);\r",
											"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionRoleInvalid);\r",
											"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
											"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                         // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
											"                        console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
											"                    \r",
											"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp);\r",
											"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName);\r",
											"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeRoleInvalid);\r",
											"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionRoleInvalid);\r",
											"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp);\r",
											"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary);\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);  \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace);\r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName);\r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId);\r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
											"                        pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
											"\r",
											"                \r",
											"                    }); \r",
											"                }\r",
											"\r",
											"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ProvisioningAPIs\r",
											"                    \r",
											"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
											"                    // console.log('endPointNameValue ',endPointNameValue)\r",
											"                    // console.log('endPointNameProvisioningAPIs ',endPointNameProvisioningAPIs)\r",
											"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [CreatePartner]\", function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Detail Log ( Expected = Actual) [CreatePartner] ==================\");\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
											"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
											"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
											"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
											"                       \r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail);\r",
											"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail);\r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace);\r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName);\r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId);\r",
											"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime);\r",
											"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
											"\r",
											"                        if( endPointNameValue == endPointNameProvisioningAPIs){     //\"endPointName\":\"ProvisioningAPIs\"\r",
											"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs); \r",
											"                            \r",
											"                            // console.log(\"resultDataLog :\",resultDataLog)\r",
											"                            // console.log(\"resultDataLog.custom1 :\",resultDataLog.custom1)\r",
											"                            // console.log(\"resultDataLog.custom1.requestObject :\",resultDataLog.custom1.requestObject)\r",
											"                            // check requestObject\r",
											"                                // \"requestObject\":\"{\\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Partner/CreatePartner\\\",\\\"method\\\":\\\"POST\\\",\\\"headers\\\":{\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"CreatePartner_202103231503693\\\",\\\"x-ais-orderdesc\\\":\\\"CreatePartner\\\",\\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAFGqEAZd8xJfDiWnmUTQnUILTUz2eudCOyvuC4tlIIbY0IlAkkY2KW0\\\"},\\\"body\\\":{\\\"PartnerName\\\":\\\"QATestPartner1111111\\\",\\\"PartnerType\\\":[\\\"Supplier\\\",\\\"Customer\\\"],\\\"PartnerDetail\\\":{\\\"MerchantContact\\\":\\\"QATestPartner01@ais.co.th\\\",\\\"CPID\\\":\\\"QATestPartner01@ais.co.th\\\"},\\\"Property\\\":{\\\"RouteEngine\\\":false}}}\"\r",
											"\r",
											"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);      \r",
											"                            console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
											"                            let url = urlCheckLog + requestObjectUrlStaging;\r",
											"                            let x_ais_orderref = x_ais_OrderRef_CreatePartner + current_timestamp;\r",
											"                            let x_ais_orderdesc = x_ais_OrderDesc_CreatePartner;\r",
											"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken\");\r",
											"\r",
											"                            let PartnerName = pm.environment.get(\"Value_CreatePartner_TST_F2_1_1_001_PartnerName\");\r",
											"                            let PartnerType = pm.environment.get(\"Value_CreatePartner_TST_F2_1_1_001_PartnerType\");\r",
											"                            let PartnerDetailMerchantContact = pm.environment.get(\"Value_CreatePartner_TST_F2_1_1_001_PartnerDetail_MerchantContact\");\r",
											"                            let PartnerDetailCPID = pm.environment.get(\"Value_CreatePartner_TST_F2_1_1_001_PartnerDetail_CPID\");\r",
											"                            let PropertyRouteEngine = pm.environment.get(\"Value_CreatePartner_TST_F2_1_1_001_Property_RouteEngine\");\r",
											"                            \r",
											"                            pm.expect(jsonParseRequestObject.url).to.eql(url);\r",
											"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerName).to.eql(PartnerName);\r",
											"                            pm.expect(JSON.stringify(jsonParseRequestObject.body.PartnerType)).to.eql(PartnerType);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerDetail.MerchantContact).to.eql(PartnerDetailMerchantContact);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerDetail.CPID).to.eql(PartnerDetailCPID);\r",
											"                            pm.expect(jsonParseRequestObject.body.Property.RouteEngine).to.eql(PropertyRouteEngine);\r",
											"\r",
											"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
											"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
											"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
											"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
											"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
											"                            console.log(\"resquest.body.PartnerName : \" + jsonParseRequestObject.body.PartnerName + \" = \" + PartnerName);\r",
											"                            console.log(\"resquest.body.PartnerType : \" + JSON.stringify(jsonParseRequestObject.body.PartnerType) + \" = \" + PartnerType);\r",
											"                            console.log(\"resquest.body.MerchantContact : \" + jsonParseRequestObject.body.MerchantContact + \" = \" + PartnerDetailMerchantContact);\r",
											"                            console.log(\"resquest.body.CPID : \" + jsonParseRequestObject.body.PartnerDetail.CPID + \" = \" + PartnerDetailCPID);\r",
											"                            console.log(\"resquest.body.RouteEngine : \" + jsonParseRequestObject.body.Property.RouteEngine + \" = \" + PropertyRouteEngine);\r",
											"\r",
											"                           \r",
											"\r",
											"                          \r",
											"                            // check responseObject\r",
											"                            // \"responseObject\":\"{\\\"PartnerInfo\\\":{\\\"CustomerId\\\":\\\"6059a4f863fa0e0001b9d2ef\\\",\\\"PartnerId\\\":\\\"6059a4f863fa0e0001b9d2f0\\\",\\\"PartnerName\\\":\\\"QATestPartner1111111\\\",\\\"PartnerType\\\":[\\\"Supplier\\\",\\\"Customer\\\"],\\\"PartnerDetail\\\":{\\\"MerchantContact\\\":\\\"QATestPartner01@ais.co.th\\\",\\\"CPID\\\":\\\"QATestPartner01@ais.co.th\\\"},\\\"Property\\\":{\\\"RouteEngine\\\":false},\\\"CreateDate\\\":\\\"2021-03-23T15:21:12.6726951+07:00\\\"},\\\"OperationStatus\\\":{\\\"Code\\\":\\\"20100\\\",\\\"Description\\\":\\\"CreatePartner is Success\\\"}}\",\"activityLog\":{\"startTime\":\"2021-03-23T15:21:12.6619894+07:00\",\"endTime\":\"2021-03-23T15:21:12.6785132+07:00\",\"processTime\":16.5238}}\r",
											"\r",
											"                         \r",
											"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
											"                            // console.log(\"jsonParseResponseObject:\", JSON.parse(resultDataLog.custom1.responseObject))  \r",
											"                                      \r",
											"  \r",
											"                            console.log(\"response.PartnerInfo.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeRoleInvalid);\r",
											"                            console.log(\"response.PartnerInfo.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionRoleInvalid);\r",
											"                               \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeRoleInvalid);  \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionRoleInvalid);  \r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"setTimeout(function(){SearchLogFindTid();}, 9000); \r",
											"setTimeout(function(){CheckLog();}, 10000); \r",
											"setTimeout(function(){\r",
											"pm.environment.unset(\"current_timestamp\");\r",
											"pm.environment.unset(\"AccessToken\");\r",
											"pm.environment.unset(\"Value_CreatePartner_TST_F2_1_1_001_PartnerName\");\r",
											"pm.environment.unset(\"Value_CreatePartner_TST_F2_1_1_001_PartnerType\");\r",
											"pm.environment.unset(\"Value_CreatePartner_TST_F2_1_1_001_PartnerDetail_MerchantContact\");\r",
											"pm.environment.unset(\"Value_CreatePartner_TST_F2_1_1_001_PartnerDetail_CPID\");\r",
											"pm.environment.unset(\"Value_CreatePartner_TST_F2_1_1_001_Property_RouteEngine\");\r",
											"pm.environment.unset(\"GetResponse_PartnerId\");\r",
											"pm.environment.unset(\"AccessToken2\");\r",
											"pm.environment.unset(\"tid\");\r",
											"pm.environment.unset(\"AuthenInfo_Username\");\r",
											"pm.environment.unset(\"AuthenInfo_Password\");\r",
											"pm.environment.unset(\"random_number\");\r",
											"pm.environment.unset(\"PartnerName\");\r",
											"pm.environment.unset(\"MerchantContact\");\r",
											"pm.environment.unset(\"CPID\");\r",
											"pm.environment.unset(\"AccountName\");\r",
											"pm.environment.unset(\"GetResponse_AccountName\");\r",
											"pm.environment.unset(\"GetResponse_AccountId\");\r",
											"pm.environment.unset(\"GetResponse_SystemUserId\");\r",
											"pm.environment.unset(\"current_timestamp2\");\r",
											"\r",
											"\r",
											"}, 30000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-ais-UserName",
										"value": "{{x_ais_UserName_AisPartner}}",
										"type": "text"
									},
									{
										"key": "x-ais-OrderRef",
										"value": "{{x_ais_OrderRef_CreatePartner}}{{current_timestamp}}"
									},
									{
										"key": "x-ais-OrderDesc",
										"value": "{{x_ais_OrderDesc_CreatePartner}}",
										"type": "text"
									},
									{
										"key": "x-ais-AccessToken",
										"value": "{{Bearer}} {{AccessToken}}"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"PartnerName\": \"{{Value_CreatePartner_TST_F2_1_1_001_PartnerName}}\",\r\n  \"PartnerType\": {{Value_CreatePartner_TST_F2_1_1_001_PartnerType}},\r\n  \"PartnerDetail\": {\r\n    \"MerchantContact\": \"{{Value_CreatePartner_TST_F2_1_1_001_PartnerDetail_MerchantContact}}\",\r\n    \"CPID\": \"{{Value_CreatePartner_TST_F2_1_1_001_PartnerDetail_CPID}}\"\r\n  },\r\n  \"Property\": {\r\n    \"RouteEngine\": \"{{Value_CreatePartner_TST_F2_1_1_001_Property_RouteEngine}}\"\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{url}}{{provisioningapis}}/api/v1/Partner/CreatePartner",
									"host": [
										"{{url}}{{provisioningapis}}"
									],
									"path": [
										"api",
										"v1",
										"Partner",
										"CreatePartner"
									]
								},
								"description": "Type:Desire"
							},
							"response": []
						},
						{
							"name": "CreatePartner_TST_F2_0_2_005_Error_CustomerAdminRoleInvalid",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var Username = pm.environment.get(\"Username_CustomerAdmin\");\r",
											"var Password = pm.environment.get(\"Password_CustomerAdmin\");\r",
											"\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"\r",
											"pm.environment.set(\"Value_CreatePartner_TST_F2_1_1_001_PartnerName\",fieldDataValue.Provisioning.Partner.CreatePartner.Value_CreatePartner_TST_F2_1_1_001_PartnerName)\r",
											"pm.environment.set(\"Value_CreatePartner_TST_F2_1_1_001_PartnerType\",JSON.stringify(fieldDataValue.Provisioning.Partner.CreatePartner.Value_CreatePartner_TST_F2_1_1_001_PartnerType))\r",
											"pm.environment.set(\"Value_CreatePartner_TST_F2_1_1_001_PartnerDetail_MerchantContact\",fieldDataValue.Provisioning.Partner.CreatePartner.Value_CreatePartner_TST_F2_1_1_001_PartnerDetail_MerchantContact)\r",
											"pm.environment.set(\"Value_CreatePartner_TST_F2_1_1_001_PartnerDetail_CPID\",fieldDataValue.Provisioning.Partner.CreatePartner.Value_CreatePartner_TST_F2_1_1_001_PartnerDetail_CPID)\r",
											"pm.environment.set(\"Value_CreatePartner_TST_F2_1_1_001_Property_RouteEngine\",fieldDataValue.Provisioning.Partner.CreatePartner.Value_CreatePartner_TST_F2_1_1_001_Property_RouteEngine)\r",
											"\r",
											"\r",
											"//format YYYYMMDDHHMMSSS\r",
											"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
											"\r",
											"// console.log('currentTmestamp',currentTmestamp);\r",
											"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
											"\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var current_timestamp2 = pm.environment.get(\"current_timestamp2\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- statusCodeList --------------//\r",
											"//set variable to statusCodeList JSON.parse\r",
											"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
											"//set global variable to statusCode 200\r",
											"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
											"//set global variable to statusCode 201\r",
											"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
											"//set global variable to statusCode 403\r",
											"pm.globals.set(\"statusCodeForbidden\", statusCodeList.statusCodeForbidden);\r",
											"\r",
											"//---------------- resultCodeList ------------- -//\r",
											"//set variable to resultCodeList JSON.parse\r",
											"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
											"//set global variable to resultCode \"20000\"\r",
											"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
											"//set global variable to resultCode \"20100\"\r",
											"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
											"//set global variable to resultCode \"40308\"\r",
											"pm.globals.set(\"resultCodeRoleInvalid\", resultCodeList.resultCodeRoleInvalid);\r",
											"\r",
											"//---------------- resultDescriptionSuccessList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
											"//set global variable to resultDescription \"SignInProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
											"//set global variable to resultDescription \"CreatePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
											"//set global variable to resultDescription \"RemovePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
											"//set global variable to resultDescription \"InquiryPartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionInquiryPartner\", resultDescriptionSuccessList.resultDescriptionInquiryPartner);\r",
											"//set global variable to resultDescription \"RemoveSystemUser is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveSystemUser\", resultDescriptionSuccessList.resultDescriptionRemoveSystemUser);\r",
											"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
											"\r",
											"//---------------- resultDescriptionErrorList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
											"//set global variable to resultDescription \"Role Invalid\"\r",
											"pm.globals.set(\"resultDescriptionRoleInvalid\", resultDescriptionErrorList.resultDescriptionRoleInvalid);\r",
											"\r",
											"\r",
											"//---------------- HeaderList --------------//\r",
											"//set variable to HeaderList JSON.parse\r",
											"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
											"//---------------- set globals Other --------------//\r",
											"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
											"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
											"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
											"//set global variable to kbn-versio \"7.5.1\"\r",
											"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Signin_ --------------//\r",
											"//set global variable to x_ais_OrderRef \"Signin_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Partner --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
											"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
											"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
											"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
											"//set global variable to x_ais_OrderRef \"InquiryPartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_InquiryPartner\", HeaderList.Partner.x_ais_OrderRef_InquiryPartner);\r",
											"//set global variable to x_ais_OrderDesc \"InquiryPartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_InquiryPartner\", HeaderList.Partner.x_ais_OrderDesc_InquiryPartner);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals CreateAccount --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
											"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
											"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
											"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals SystemUser --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreateSystemUser_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreateSystemUser\", HeaderList.SystemUser.x_ais_OrderRef_CreateSystemUser);\r",
											"//set global variable to x_ais_OrderDesc \"CreateSystemUser\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreateSystemUser\", HeaderList.SystemUser.x_ais_OrderDesc_CreateSystemUser);\r",
											"//set global variable to x_ais_OrderRef \"RemoveSystemUser_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemoveSystemUser\", HeaderList.SystemUser.x_ais_OrderRef_RemoveSystemUser);\r",
											"//set global variable to x_ais_OrderDesc \"RemoveSystemUser\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemoveSystemUser\", HeaderList.SystemUser.x_ais_OrderDesc_RemoveSystemUser);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultCode \"20100\"\r",
											"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
											"//get global variable to resultDescription \"SignInProcess is Success\"\r",
											"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
											"\r",
											"\r",
											"\r",
											"//---------------- urlRouteList --------------//\r",
											"//set variable to urlRouteList JSON.parse\r",
											"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
											"//---------------- set url Create --------------//\r",
											"//set global variable to url \"/api/v1/auth/signin\"\r",
											"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
											"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
											"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
											"//set global variable to url \"/api/v1/SystemUser/CreateSystemUser\"\r",
											"pm.globals.set(\"urlSystemUserCreateSystemUser\", urlRouteList.SystemUser.urlSystemUserCreateSystemUser);\r",
											"//---------------- get url Create --------------//\r",
											"//get global variable to url \"/api/v1/auth/signin\"\r",
											"var urlSignin = pm.globals.get(\"urlSignin\");\r",
											"\r",
											"\r",
											"//---------------- set url Remove --------------//\r",
											"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
											"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
											"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
											"//set global variable to url \"/api/v1/SystemUser/RemoveSystemUser\"\r",
											"pm.globals.set(\"urlSystemUserRemoveSystemUser\", urlRouteList.SystemUser.urlSystemUserRemoveSystemUser);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set url Inquiry --------------//\r",
											"//set global variable to url \"/api/v1/Partner/InquiryPartner\"\r",
											"pm.globals.set(\"urlPartnerInquiryPartner\", urlRouteList.Partner.urlPartnerInquiryPartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"Signin_\"\r",
											"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"// Signin get token ROOT ADMIN\r",
											" Signin = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp2,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username,\r",
											"                password:Password\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        \r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"\r",
											"        // set random_number\r",
											"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
											"        //set PartnerName\r",
											"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
											"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
											"        //set MerchantContact\r",
											"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
											"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
											"        // set CPID\r",
											"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
											"        pm.environment.set(\"CPID\", CPIDValue)\r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"setTimeout(async function(){}, 1000); \r",
											"Signin();\r",
											"setTimeout(async function(){}, 4000); \r",
											" \r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get globals SystemUser --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemoveSystemUser_\"\r",
											"var x_ais_OrderRef_RemoveSystemUser = pm.globals.get(\"x_ais_OrderRef_RemoveSystemUser\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveSystemUser\"\r",
											"var x_ais_OrderDesc_RemoveSystemUser = pm.globals.get(\"x_ais_OrderDesc_RemoveSystemUser\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Inquiry --------------//\r",
											"//get global variable to url \"/api/v1/Partner/InquiryPartner\"\r",
											"var urlPartnerInquiryPartner = pm.globals.get(\"urlPartnerInquiryPartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Remove --------------//\r",
											"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
											"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
											"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
											"//get global variable to url \"/api/v1/SystemUser/RemoveSystemUser\"\r",
											"var urlSystemUserRemoveSystemUser = pm.globals.get(\"urlSystemUserRemoveSystemUser\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultDescription \"RemovePartner is Success\"\r",
											"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
											"//get global variable to resultDescription \"RemoveAccount is Success\r",
											"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
											"//get global variable to resultDescription \"RemoveSystemUser is Success\"\r",
											"var resultDescriptionRemoveSystemUser = pm.globals.get(\"resultDescriptionRemoveSystemUser\");\r",
											"\r",
											"\r",
											"//get global variable to statusCode 403\r",
											"var statusCodeForbidden = pm.globals.get(\"statusCodeForbidden\");\r",
											"//get global variable to resultCode \"40308\"\r",
											"var resultCodeRoleInvalid = pm.globals.get(\"resultCodeRoleInvalid\");\r",
											"//get global variable to resultDescription \"Role Invalid\"\r",
											"var resultDescriptionRoleInvalid = pm.globals.get(\"resultDescriptionRoleInvalid\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"CreatePartner : Status code is \" + statusCodeForbidden, function () {\r",
											"    pm.response.to.have.status(statusCodeForbidden);\r",
											"});\r",
											"\r",
											"pm.test('CreatePartner : operationStatus code is '+'\"'+ resultCodeRoleInvalid +'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeRoleInvalid);\r",
											"});\r",
											"\r",
											"pm.test('CreatePartner : operationStatus description is '+'\"'+ resultDescriptionRoleInvalid+'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionRoleInvalid);\r",
											"});\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"// RemovePartner ROOT ADMIN\r",
											"RemovePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemovePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemovePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsRemovePartner = {\r",
											"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemovePartner,\r",
											"            body: httpRequestRemovePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request RemovePartner');\r",
											"        let response = await reqPromise(optionsRemovePartner);\r",
											"        let jsonDataRemovePartner = await response.json();\r",
											"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
											"    \r",
											"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemovePartner is Success\r",
											"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// RemoveAccount ROOT ADMIN\r",
											" RemoveAccount = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemoveAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemoveAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsRemoveAccount = {\r",
											"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemoveAccount,\r",
											"            body: httpRequestRemoveAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request RemoveAccount');\r",
											"        let response = await reqPromise(optionsRemoveAccount);\r",
											"        let jsonDataRemoveAccount = await response.json();\r",
											"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
											"    \r",
											"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemoveAccount is Success\r",
											"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
											"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// RemoveSystemUser ROOT ADMIN\r",
											" RemoveSystemUser = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemoveSystemUser = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemoveSystemUser + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveSystemUser,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemoveSystemUser = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"SystemUserId\": pm.environment.get(\"GetResponse_SystemUserId\")\r",
											"            })\r",
											"        };\r",
											"\r",
											"        let optionsRemoveSystemUser = {\r",
											"            url: url + provisioningapis + urlSystemUserRemoveSystemUser,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemoveSystemUser,\r",
											"            body: httpRequestRemoveSystemUser\r",
											"        };\r",
											"\r",
											"        // console.log('request RemoveSystemUser');\r",
											"        let response = await reqPromise(optionsRemoveSystemUser);\r",
											"        let jsonDataRemoveSystemUser = await response.json();\r",
											"        // console.log('jsonDataRemoveSystemUser',jsonDataRemoveSystemUser)\r",
											"    \r",
											"        let operationStatusRemoveSystemUser = await jsonDataRemoveSystemUser.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemoveSystemUser : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemoveSystemUser : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemoveSystemUser).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemoveSystemUser is Success\r",
											"        pm.test('RemoveSystemUser : OperationStatus Description is '+'\"'+ resultDescriptionRemoveSystemUser+'\"', function () {\r",
											"            pm.expect(operationStatusRemoveSystemUser).to.have.property('Description', resultDescriptionRemoveSystemUser);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"//---------------- LogDefaultValue --------------//\r",
											"//set variable to LogDefaultValue JSON.parse\r",
											"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
											"// console.log('LogDefaultValue',LogDefaultValue);\r",
											"//---------------- set globals Other --------------//\r",
											"\r",
											"var SearchLog = LogDefaultValue.SearchLog;\r",
											"// console.log('SearchLog',SearchLog);\r",
											"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
											"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
											"var kbn_version = SearchLog.header.kbn_version;\r",
											"var authorization = SearchLog.header.Authorization;\r",
											"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
											"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
											"var namespace = LogDefaultValue.Other.namespace;\r",
											"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
											"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
											"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
											"var methodPost = LogDefaultValue.Other.methodPost;\r",
											"\r",
											"// Detail\r",
											"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
											"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
											"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
											"\r",
											"// Summary\r",
											"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
											"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
											"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
											"\r",
											"// ProvisioningAPIs [Partner]\r",
											"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
											"var cmdName = LogDefaultValue.Provisioning.Partner.cmdNameCreatePartner;\r",
											"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
											"var containerId = LogDefaultValue.Provisioning.containerId;\r",
											"var requestObjectUrlStaging = LogDefaultValue.Provisioning.Partner.requestObjectUrlCreatePartnerMgStaging;\r",
											"\r",
											"// Check CDR (Summary Log) and EDR (Detail Log)\r",
											"SearchLogFindTid = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSearchLogFindTid = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization' : authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = x_ais_OrderRef_CreatePartner + current_timestamp;\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch : : :1\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestSearchLogFindTid = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"\r",
											"        let optionsSearchLogFindTid = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptSearchLogFindTid,\r",
											"            body: httpRequestSearchLogFindTid\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsSearchLogFindTid);\r",
											"        let jsonDataSearchLogFindTid = await response.json();\r",
											"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
											"\r",
											"        // //200\r",
											"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"\r",
											"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
											"        console.log('hits : : : 1',hits)\r",
											"  \r",
											"        // find tid\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            // let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"        \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"\r",
											"            if(applicationNameValue == applicationName){\r",
											"                let tid = hits[i]._source.cauldron.tid;\r",
											"                pm.environment.set(\"tid\", tid);\r",
											"                break;\r",
											"           }\r",
											"        }\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"CheckLog = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCheckLog = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = pm.environment.get(\"tid\");\r",
											"\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch : : 2\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestCheckLog = {\r",
											"            mode: 'raw',\r",
											"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"        let optionsCheckLog = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptCheckLog,\r",
											"            body: httpRequestCheckLog\r",
											"        }; \r",
											"        let response = await reqPromise(optionsCheckLog);\r",
											"        let jsonDataCheckLog = await response.json();\r",
											"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
											"        \r",
											"        // //200\r",
											"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });     \r",
											"        \r",
											"        let hits = jsonDataCheckLog.hits.hits\r",
											"        // console.log('hits',hits)\r",
											"  \r",
											"        // find logType\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            //  let logType = hits[i]._source.cauldron.logType\r",
											"            let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"           \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            \r",
											"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
											"            // console.log('resultDataLog',resultDataLog)\r",
											"            // console.log(logType)\r",
											"            // console.log(logTypeDetail)\r",
											"            // console.log(logTypeSummary)\r",
											"\r",
											"            let tidControl = x_ais_OrderRef_CreatePartner + current_timestamp;\r",
											"            // console.log(tidControl);\r",
											"            if(applicationNameValue == applicationName){\r",
											"                 \r",
											"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ProvisioningAPIs\r",
											"                     pm.test(\"Check Summary Log : CreatePartner\" , function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Summary Log ( Expected = Actual) [CreatePartner] ==================\");\r",
											"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
											"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
											"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeRoleInvalid);\r",
											"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionRoleInvalid);\r",
											"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
											"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                         // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
											"                        console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
											"                    \r",
											"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp);\r",
											"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName);\r",
											"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeRoleInvalid);\r",
											"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionRoleInvalid);\r",
											"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp);\r",
											"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary);\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);  \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace);\r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName);\r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId);\r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
											"                        pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
											"\r",
											"                \r",
											"                    }); \r",
											"                }\r",
											"\r",
											"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ProvisioningAPIs\r",
											"                    \r",
											"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
											"                    // console.log('endPointNameValue ',endPointNameValue)\r",
											"                    // console.log('endPointNameProvisioningAPIs ',endPointNameProvisioningAPIs)\r",
											"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [CreatePartner]\", function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Detail Log ( Expected = Actual) [CreatePartner] ==================\");\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
											"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
											"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
											"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
											"                       \r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail);\r",
											"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail);\r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace);\r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName);\r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId);\r",
											"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime);\r",
											"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
											"\r",
											"                        if( endPointNameValue == endPointNameProvisioningAPIs){     //\"endPointName\":\"ProvisioningAPIs\"\r",
											"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs); \r",
											"                            \r",
											"                            // console.log(\"resultDataLog :\",resultDataLog)\r",
											"                            // console.log(\"resultDataLog.custom1 :\",resultDataLog.custom1)\r",
											"                            // console.log(\"resultDataLog.custom1.requestObject :\",resultDataLog.custom1.requestObject)\r",
											"                            // check requestObject\r",
											"                                // \"requestObject\":\"{\\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Partner/CreatePartner\\\",\\\"method\\\":\\\"POST\\\",\\\"headers\\\":{\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"CreatePartner_202103231503693\\\",\\\"x-ais-orderdesc\\\":\\\"CreatePartner\\\",\\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAFGqEAZd8xJfDiWnmUTQnUILTUz2eudCOyvuC4tlIIbY0IlAkkY2KW0\\\"},\\\"body\\\":{\\\"PartnerName\\\":\\\"QATestPartner1111111\\\",\\\"PartnerType\\\":[\\\"Supplier\\\",\\\"Customer\\\"],\\\"PartnerDetail\\\":{\\\"MerchantContact\\\":\\\"QATestPartner01@ais.co.th\\\",\\\"CPID\\\":\\\"QATestPartner01@ais.co.th\\\"},\\\"Property\\\":{\\\"RouteEngine\\\":false}}}\"\r",
											"\r",
											"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);      \r",
											"                            console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
											"                            let url = urlCheckLog + requestObjectUrlStaging;\r",
											"                            let x_ais_orderref = x_ais_OrderRef_CreatePartner + current_timestamp;\r",
											"                            let x_ais_orderdesc = x_ais_OrderDesc_CreatePartner;\r",
											"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken\");\r",
											"\r",
											"                            let PartnerName = pm.environment.get(\"Value_CreatePartner_TST_F2_1_1_001_PartnerName\");\r",
											"                            let PartnerType = pm.environment.get(\"Value_CreatePartner_TST_F2_1_1_001_PartnerType\");\r",
											"                            let PartnerDetailMerchantContact = pm.environment.get(\"Value_CreatePartner_TST_F2_1_1_001_PartnerDetail_MerchantContact\");\r",
											"                            let PartnerDetailCPID = pm.environment.get(\"Value_CreatePartner_TST_F2_1_1_001_PartnerDetail_CPID\");\r",
											"                            let PropertyRouteEngine = pm.environment.get(\"Value_CreatePartner_TST_F2_1_1_001_Property_RouteEngine\");\r",
											"                            \r",
											"                            pm.expect(jsonParseRequestObject.url).to.eql(url);\r",
											"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerName).to.eql(PartnerName);\r",
											"                            pm.expect(JSON.stringify(jsonParseRequestObject.body.PartnerType)).to.eql(PartnerType);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerDetail.MerchantContact).to.eql(PartnerDetailMerchantContact);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerDetail.CPID).to.eql(PartnerDetailCPID);\r",
											"                            pm.expect(jsonParseRequestObject.body.Property.RouteEngine).to.eql(PropertyRouteEngine);\r",
											"\r",
											"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
											"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
											"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
											"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
											"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
											"                            console.log(\"resquest.body.PartnerName : \" + jsonParseRequestObject.body.PartnerName + \" = \" + PartnerName);\r",
											"                            console.log(\"resquest.body.PartnerType : \" + JSON.stringify(jsonParseRequestObject.body.PartnerType) + \" = \" + PartnerType);\r",
											"                            console.log(\"resquest.body.MerchantContact : \" + jsonParseRequestObject.body.MerchantContact + \" = \" + PartnerDetailMerchantContact);\r",
											"                            console.log(\"resquest.body.CPID : \" + jsonParseRequestObject.body.PartnerDetail.CPID + \" = \" + PartnerDetailCPID);\r",
											"                            console.log(\"resquest.body.RouteEngine : \" + jsonParseRequestObject.body.Property.RouteEngine + \" = \" + PropertyRouteEngine);\r",
											"\r",
											"                           \r",
											"\r",
											"                          \r",
											"                            // check responseObject\r",
											"                            // \"responseObject\":\"{\\\"PartnerInfo\\\":{\\\"CustomerId\\\":\\\"6059a4f863fa0e0001b9d2ef\\\",\\\"PartnerId\\\":\\\"6059a4f863fa0e0001b9d2f0\\\",\\\"PartnerName\\\":\\\"QATestPartner1111111\\\",\\\"PartnerType\\\":[\\\"Supplier\\\",\\\"Customer\\\"],\\\"PartnerDetail\\\":{\\\"MerchantContact\\\":\\\"QATestPartner01@ais.co.th\\\",\\\"CPID\\\":\\\"QATestPartner01@ais.co.th\\\"},\\\"Property\\\":{\\\"RouteEngine\\\":false},\\\"CreateDate\\\":\\\"2021-03-23T15:21:12.6726951+07:00\\\"},\\\"OperationStatus\\\":{\\\"Code\\\":\\\"20100\\\",\\\"Description\\\":\\\"CreatePartner is Success\\\"}}\",\"activityLog\":{\"startTime\":\"2021-03-23T15:21:12.6619894+07:00\",\"endTime\":\"2021-03-23T15:21:12.6785132+07:00\",\"processTime\":16.5238}}\r",
											"\r",
											"                         \r",
											"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
											"                            // console.log(\"jsonParseResponseObject:\", JSON.parse(resultDataLog.custom1.responseObject))  \r",
											"                                      \r",
											"  \r",
											"                            console.log(\"response.PartnerInfo.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeRoleInvalid);\r",
											"                            console.log(\"response.PartnerInfo.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionRoleInvalid);\r",
											"                               \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeRoleInvalid);  \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionRoleInvalid);  \r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"setTimeout(function(){SearchLogFindTid();}, 10000); \r",
											"setTimeout(function(){CheckLog();}, 20000); \r",
											"setTimeout(function(){\r",
											"pm.environment.unset(\"current_timestamp\");\r",
											"pm.environment.unset(\"AccessToken\");\r",
											"pm.environment.unset(\"Value_CreatePartner_TST_F2_1_1_001_PartnerName\");\r",
											"pm.environment.unset(\"Value_CreatePartner_TST_F2_1_1_001_PartnerType\");\r",
											"pm.environment.unset(\"Value_CreatePartner_TST_F2_1_1_001_PartnerDetail_MerchantContact\");\r",
											"pm.environment.unset(\"Value_CreatePartner_TST_F2_1_1_001_PartnerDetail_CPID\");\r",
											"pm.environment.unset(\"Value_CreatePartner_TST_F2_1_1_001_Property_RouteEngine\");\r",
											"pm.environment.unset(\"GetResponse_PartnerId\");\r",
											"pm.environment.unset(\"AccessToken2\");\r",
											"pm.environment.unset(\"tid\");\r",
											"pm.environment.unset(\"AuthenInfo_Username\");\r",
											"pm.environment.unset(\"AuthenInfo_Password\");\r",
											"pm.environment.unset(\"random_number\");\r",
											"pm.environment.unset(\"PartnerName\");\r",
											"pm.environment.unset(\"MerchantContact\");\r",
											"pm.environment.unset(\"CPID\");\r",
											"pm.environment.unset(\"AccountName\");\r",
											"pm.environment.unset(\"GetResponse_AccountName\");\r",
											"pm.environment.unset(\"GetResponse_AccountId\");\r",
											"pm.environment.unset(\"GetResponse_SystemUserId\");\r",
											"pm.environment.unset(\"current_timestamp2\");\r",
											"\r",
											"\r",
											"}, 30000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-ais-UserName",
										"value": "{{x_ais_UserName_AisPartner}}",
										"type": "text"
									},
									{
										"key": "x-ais-OrderRef",
										"value": "{{x_ais_OrderRef_CreatePartner}}{{current_timestamp}}"
									},
									{
										"key": "x-ais-OrderDesc",
										"value": "{{x_ais_OrderDesc_CreatePartner}}",
										"type": "text"
									},
									{
										"key": "x-ais-AccessToken",
										"value": "{{Bearer}} {{AccessToken}}"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"PartnerName\": \"{{Value_CreatePartner_TST_F2_1_1_001_PartnerName}}\",\r\n  \"PartnerType\": {{Value_CreatePartner_TST_F2_1_1_001_PartnerType}},\r\n  \"PartnerDetail\": {\r\n    \"MerchantContact\": \"{{Value_CreatePartner_TST_F2_1_1_001_PartnerDetail_MerchantContact}}\",\r\n    \"CPID\": \"{{Value_CreatePartner_TST_F2_1_1_001_PartnerDetail_CPID}}\"\r\n  },\r\n  \"Property\": {\r\n    \"RouteEngine\": \"{{Value_CreatePartner_TST_F2_1_1_001_Property_RouteEngine}}\"\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{url}}{{provisioningapis}}/api/v1/Partner/CreatePartner",
									"host": [
										"{{url}}{{provisioningapis}}"
									],
									"path": [
										"api",
										"v1",
										"Partner",
										"CreatePartner"
									]
								},
								"description": "Type:Desire"
							},
							"response": []
						},
						{
							"name": "CreatePartner_TST_F2_0_2_006_Error_SupplierRoleInvalid",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var Username = pm.environment.get(\"Username_Supplier\");\r",
											"var Password = pm.environment.get(\"Password_Supplier\");\r",
											"\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"\r",
											"pm.environment.set(\"Value_CreatePartner_TST_F2_1_1_001_PartnerName\",fieldDataValue.Provisioning.Partner.CreatePartner.Value_CreatePartner_TST_F2_1_1_001_PartnerName)\r",
											"pm.environment.set(\"Value_CreatePartner_TST_F2_1_1_001_PartnerType\",JSON.stringify(fieldDataValue.Provisioning.Partner.CreatePartner.Value_CreatePartner_TST_F2_1_1_001_PartnerType))\r",
											"pm.environment.set(\"Value_CreatePartner_TST_F2_1_1_001_PartnerDetail_MerchantContact\",fieldDataValue.Provisioning.Partner.CreatePartner.Value_CreatePartner_TST_F2_1_1_001_PartnerDetail_MerchantContact)\r",
											"pm.environment.set(\"Value_CreatePartner_TST_F2_1_1_001_PartnerDetail_CPID\",fieldDataValue.Provisioning.Partner.CreatePartner.Value_CreatePartner_TST_F2_1_1_001_PartnerDetail_CPID)\r",
											"pm.environment.set(\"Value_CreatePartner_TST_F2_1_1_001_Property_RouteEngine\",fieldDataValue.Provisioning.Partner.CreatePartner.Value_CreatePartner_TST_F2_1_1_001_Property_RouteEngine)\r",
											"\r",
											"\r",
											"//format YYYYMMDDHHMMSSS\r",
											"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
											"\r",
											"// console.log('currentTmestamp',currentTmestamp);\r",
											"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
											"\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var current_timestamp2 = pm.environment.get(\"current_timestamp2\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- statusCodeList --------------//\r",
											"//set variable to statusCodeList JSON.parse\r",
											"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
											"//set global variable to statusCode 200\r",
											"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
											"//set global variable to statusCode 201\r",
											"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
											"//set global variable to statusCode 403\r",
											"pm.globals.set(\"statusCodeForbidden\", statusCodeList.statusCodeForbidden);\r",
											"\r",
											"//---------------- resultCodeList ------------- -//\r",
											"//set variable to resultCodeList JSON.parse\r",
											"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
											"//set global variable to resultCode \"20000\"\r",
											"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
											"//set global variable to resultCode \"20100\"\r",
											"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
											"//set global variable to resultCode \"40308\"\r",
											"pm.globals.set(\"resultCodeRoleInvalid\", resultCodeList.resultCodeRoleInvalid);\r",
											"\r",
											"//---------------- resultDescriptionSuccessList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
											"//set global variable to resultDescription \"SignInProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
											"//set global variable to resultDescription \"CreatePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
											"//set global variable to resultDescription \"RemovePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
											"//set global variable to resultDescription \"InquiryPartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionInquiryPartner\", resultDescriptionSuccessList.resultDescriptionInquiryPartner);\r",
											"//set global variable to resultDescription \"RemoveSystemUser is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveSystemUser\", resultDescriptionSuccessList.resultDescriptionRemoveSystemUser);\r",
											"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
											"\r",
											"//---------------- resultDescriptionErrorList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
											"//set global variable to resultDescription \"Role Invalid\"\r",
											"pm.globals.set(\"resultDescriptionRoleInvalid\", resultDescriptionErrorList.resultDescriptionRoleInvalid);\r",
											"\r",
											"\r",
											"//---------------- HeaderList --------------//\r",
											"//set variable to HeaderList JSON.parse\r",
											"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
											"//---------------- set globals Other --------------//\r",
											"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
											"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
											"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
											"//set global variable to kbn-versio \"7.5.1\"\r",
											"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Signin_ --------------//\r",
											"//set global variable to x_ais_OrderRef \"Signin_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Partner --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
											"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
											"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
											"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
											"//set global variable to x_ais_OrderRef \"InquiryPartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_InquiryPartner\", HeaderList.Partner.x_ais_OrderRef_InquiryPartner);\r",
											"//set global variable to x_ais_OrderDesc \"InquiryPartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_InquiryPartner\", HeaderList.Partner.x_ais_OrderDesc_InquiryPartner);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals CreateAccount --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
											"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
											"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
											"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals SystemUser --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreateSystemUser_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreateSystemUser\", HeaderList.SystemUser.x_ais_OrderRef_CreateSystemUser);\r",
											"//set global variable to x_ais_OrderDesc \"CreateSystemUser\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreateSystemUser\", HeaderList.SystemUser.x_ais_OrderDesc_CreateSystemUser);\r",
											"//set global variable to x_ais_OrderRef \"RemoveSystemUser_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemoveSystemUser\", HeaderList.SystemUser.x_ais_OrderRef_RemoveSystemUser);\r",
											"//set global variable to x_ais_OrderDesc \"RemoveSystemUser\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemoveSystemUser\", HeaderList.SystemUser.x_ais_OrderDesc_RemoveSystemUser);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultCode \"20100\"\r",
											"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
											"//get global variable to resultDescription \"SignInProcess is Success\"\r",
											"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
											"\r",
											"\r",
											"\r",
											"//---------------- urlRouteList --------------//\r",
											"//set variable to urlRouteList JSON.parse\r",
											"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
											"//---------------- set url Create --------------//\r",
											"//set global variable to url \"/api/v1/auth/signin\"\r",
											"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
											"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
											"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
											"//set global variable to url \"/api/v1/SystemUser/CreateSystemUser\"\r",
											"pm.globals.set(\"urlSystemUserCreateSystemUser\", urlRouteList.SystemUser.urlSystemUserCreateSystemUser);\r",
											"//---------------- get url Create --------------//\r",
											"//get global variable to url \"/api/v1/auth/signin\"\r",
											"var urlSignin = pm.globals.get(\"urlSignin\");\r",
											"\r",
											"\r",
											"//---------------- set url Remove --------------//\r",
											"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
											"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
											"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
											"//set global variable to url \"/api/v1/SystemUser/RemoveSystemUser\"\r",
											"pm.globals.set(\"urlSystemUserRemoveSystemUser\", urlRouteList.SystemUser.urlSystemUserRemoveSystemUser);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set url Inquiry --------------//\r",
											"//set global variable to url \"/api/v1/Partner/InquiryPartner\"\r",
											"pm.globals.set(\"urlPartnerInquiryPartner\", urlRouteList.Partner.urlPartnerInquiryPartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"Signin_\"\r",
											"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"// Signin get token ROOT ADMIN\r",
											" Signin = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp2,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username,\r",
											"                password:Password\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        \r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"\r",
											"        // set random_number\r",
											"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
											"        //set PartnerName\r",
											"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
											"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
											"        //set MerchantContact\r",
											"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
											"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
											"        // set CPID\r",
											"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
											"        pm.environment.set(\"CPID\", CPIDValue)\r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"setTimeout(async function(){}, 1000); \r",
											"Signin();\r",
											"setTimeout(async function(){}, 4000); \r",
											" \r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get globals SystemUser --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemoveSystemUser_\"\r",
											"var x_ais_OrderRef_RemoveSystemUser = pm.globals.get(\"x_ais_OrderRef_RemoveSystemUser\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveSystemUser\"\r",
											"var x_ais_OrderDesc_RemoveSystemUser = pm.globals.get(\"x_ais_OrderDesc_RemoveSystemUser\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Inquiry --------------//\r",
											"//get global variable to url \"/api/v1/Partner/InquiryPartner\"\r",
											"var urlPartnerInquiryPartner = pm.globals.get(\"urlPartnerInquiryPartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Remove --------------//\r",
											"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
											"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
											"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
											"//get global variable to url \"/api/v1/SystemUser/RemoveSystemUser\"\r",
											"var urlSystemUserRemoveSystemUser = pm.globals.get(\"urlSystemUserRemoveSystemUser\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultDescription \"RemovePartner is Success\"\r",
											"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
											"//get global variable to resultDescription \"RemoveAccount is Success\r",
											"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
											"//get global variable to resultDescription \"RemoveSystemUser is Success\"\r",
											"var resultDescriptionRemoveSystemUser = pm.globals.get(\"resultDescriptionRemoveSystemUser\");\r",
											"\r",
											"\r",
											"//get global variable to statusCode 403\r",
											"var statusCodeForbidden = pm.globals.get(\"statusCodeForbidden\");\r",
											"//get global variable to resultCode \"40308\"\r",
											"var resultCodeRoleInvalid = pm.globals.get(\"resultCodeRoleInvalid\");\r",
											"//get global variable to resultDescription \"Role Invalid\"\r",
											"var resultDescriptionRoleInvalid = pm.globals.get(\"resultDescriptionRoleInvalid\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"CreatePartner : Status code is \" + statusCodeForbidden, function () {\r",
											"    pm.response.to.have.status(statusCodeForbidden);\r",
											"});\r",
											"\r",
											"pm.test('CreatePartner : operationStatus code is '+'\"'+ resultCodeRoleInvalid +'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeRoleInvalid);\r",
											"});\r",
											"\r",
											"pm.test('CreatePartner : operationStatus description is '+'\"'+ resultDescriptionRoleInvalid+'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionRoleInvalid);\r",
											"});\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"// RemovePartner ROOT ADMIN\r",
											"RemovePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemovePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemovePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsRemovePartner = {\r",
											"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemovePartner,\r",
											"            body: httpRequestRemovePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request RemovePartner');\r",
											"        let response = await reqPromise(optionsRemovePartner);\r",
											"        let jsonDataRemovePartner = await response.json();\r",
											"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
											"    \r",
											"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemovePartner is Success\r",
											"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// RemoveAccount ROOT ADMIN\r",
											" RemoveAccount = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemoveAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemoveAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsRemoveAccount = {\r",
											"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemoveAccount,\r",
											"            body: httpRequestRemoveAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request RemoveAccount');\r",
											"        let response = await reqPromise(optionsRemoveAccount);\r",
											"        let jsonDataRemoveAccount = await response.json();\r",
											"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
											"    \r",
											"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemoveAccount is Success\r",
											"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
											"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// RemoveSystemUser ROOT ADMIN\r",
											" RemoveSystemUser = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemoveSystemUser = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemoveSystemUser + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveSystemUser,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemoveSystemUser = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"SystemUserId\": pm.environment.get(\"GetResponse_SystemUserId\")\r",
											"            })\r",
											"        };\r",
											"\r",
											"        let optionsRemoveSystemUser = {\r",
											"            url: url + provisioningapis + urlSystemUserRemoveSystemUser,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemoveSystemUser,\r",
											"            body: httpRequestRemoveSystemUser\r",
											"        };\r",
											"\r",
											"        // console.log('request RemoveSystemUser');\r",
											"        let response = await reqPromise(optionsRemoveSystemUser);\r",
											"        let jsonDataRemoveSystemUser = await response.json();\r",
											"        // console.log('jsonDataRemoveSystemUser',jsonDataRemoveSystemUser)\r",
											"    \r",
											"        let operationStatusRemoveSystemUser = await jsonDataRemoveSystemUser.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemoveSystemUser : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemoveSystemUser : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemoveSystemUser).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemoveSystemUser is Success\r",
											"        pm.test('RemoveSystemUser : OperationStatus Description is '+'\"'+ resultDescriptionRemoveSystemUser+'\"', function () {\r",
											"            pm.expect(operationStatusRemoveSystemUser).to.have.property('Description', resultDescriptionRemoveSystemUser);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"//---------------- LogDefaultValue --------------//\r",
											"//set variable to LogDefaultValue JSON.parse\r",
											"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
											"// console.log('LogDefaultValue',LogDefaultValue);\r",
											"//---------------- set globals Other --------------//\r",
											"\r",
											"var SearchLog = LogDefaultValue.SearchLog;\r",
											"// console.log('SearchLog',SearchLog);\r",
											"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
											"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
											"var kbn_version = SearchLog.header.kbn_version;\r",
											"var authorization = SearchLog.header.Authorization;\r",
											"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
											"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
											"var namespace = LogDefaultValue.Other.namespace;\r",
											"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
											"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
											"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
											"var methodPost = LogDefaultValue.Other.methodPost;\r",
											"\r",
											"// Detail\r",
											"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
											"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
											"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
											"\r",
											"// Summary\r",
											"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
											"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
											"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
											"\r",
											"// ProvisioningAPIs [Partner]\r",
											"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
											"var cmdName = LogDefaultValue.Provisioning.Partner.cmdNameCreatePartner;\r",
											"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
											"var containerId = LogDefaultValue.Provisioning.containerId;\r",
											"var requestObjectUrlStaging = LogDefaultValue.Provisioning.Partner.requestObjectUrlCreatePartnerMgStaging;\r",
											"\r",
											"// Check CDR (Summary Log) and EDR (Detail Log)\r",
											"SearchLogFindTid = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSearchLogFindTid = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization' : authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = x_ais_OrderRef_CreatePartner + current_timestamp;\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch : : :1\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestSearchLogFindTid = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"\r",
											"        let optionsSearchLogFindTid = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptSearchLogFindTid,\r",
											"            body: httpRequestSearchLogFindTid\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsSearchLogFindTid);\r",
											"        let jsonDataSearchLogFindTid = await response.json();\r",
											"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
											"\r",
											"        // //200\r",
											"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"\r",
											"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
											"        console.log('hits : : : 1',hits)\r",
											"  \r",
											"        // find tid\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            // let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"        \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"\r",
											"            if(applicationNameValue == applicationName){\r",
											"                let tid = hits[i]._source.cauldron.tid;\r",
											"                pm.environment.set(\"tid\", tid);\r",
											"                break;\r",
											"           }\r",
											"        }\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"CheckLog = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCheckLog = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = pm.environment.get(\"tid\");\r",
											"\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch : : 2\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestCheckLog = {\r",
											"            mode: 'raw',\r",
											"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"        let optionsCheckLog = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptCheckLog,\r",
											"            body: httpRequestCheckLog\r",
											"        }; \r",
											"        let response = await reqPromise(optionsCheckLog);\r",
											"        let jsonDataCheckLog = await response.json();\r",
											"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
											"        \r",
											"        // //200\r",
											"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });     \r",
											"        \r",
											"        let hits = jsonDataCheckLog.hits.hits\r",
											"        // console.log('hits',hits)\r",
											"  \r",
											"        // find logType\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            //  let logType = hits[i]._source.cauldron.logType\r",
											"            let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"           \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            \r",
											"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
											"            // console.log('resultDataLog',resultDataLog)\r",
											"            // console.log(logType)\r",
											"            // console.log(logTypeDetail)\r",
											"            // console.log(logTypeSummary)\r",
											"\r",
											"            let tidControl = x_ais_OrderRef_CreatePartner + current_timestamp;\r",
											"            // console.log(tidControl);\r",
											"            if(applicationNameValue == applicationName){\r",
											"                 \r",
											"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ProvisioningAPIs\r",
											"                     pm.test(\"Check Summary Log : CreatePartner\" , function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Summary Log ( Expected = Actual) [CreatePartner] ==================\");\r",
											"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
											"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
											"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeRoleInvalid);\r",
											"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionRoleInvalid);\r",
											"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
											"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                         // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
											"                        console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
											"                    \r",
											"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp);\r",
											"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName);\r",
											"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeRoleInvalid);\r",
											"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionRoleInvalid);\r",
											"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp);\r",
											"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary);\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);  \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace);\r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName);\r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId);\r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
											"                        pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
											"\r",
											"                \r",
											"                    }); \r",
											"                }\r",
											"\r",
											"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ProvisioningAPIs\r",
											"                    \r",
											"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
											"                    // console.log('endPointNameValue ',endPointNameValue)\r",
											"                    // console.log('endPointNameProvisioningAPIs ',endPointNameProvisioningAPIs)\r",
											"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [CreatePartner]\", function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Detail Log ( Expected = Actual) [CreatePartner] ==================\");\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
											"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
											"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
											"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
											"                       \r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail);\r",
											"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail);\r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace);\r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName);\r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId);\r",
											"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime);\r",
											"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
											"\r",
											"                        if( endPointNameValue == endPointNameProvisioningAPIs){     //\"endPointName\":\"ProvisioningAPIs\"\r",
											"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs); \r",
											"                            \r",
											"                            // console.log(\"resultDataLog :\",resultDataLog)\r",
											"                            // console.log(\"resultDataLog.custom1 :\",resultDataLog.custom1)\r",
											"                            // console.log(\"resultDataLog.custom1.requestObject :\",resultDataLog.custom1.requestObject)\r",
											"                            // check requestObject\r",
											"                                // \"requestObject\":\"{\\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Partner/CreatePartner\\\",\\\"method\\\":\\\"POST\\\",\\\"headers\\\":{\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"CreatePartner_202103231503693\\\",\\\"x-ais-orderdesc\\\":\\\"CreatePartner\\\",\\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAFGqEAZd8xJfDiWnmUTQnUILTUz2eudCOyvuC4tlIIbY0IlAkkY2KW0\\\"},\\\"body\\\":{\\\"PartnerName\\\":\\\"QATestPartner1111111\\\",\\\"PartnerType\\\":[\\\"Supplier\\\",\\\"Customer\\\"],\\\"PartnerDetail\\\":{\\\"MerchantContact\\\":\\\"QATestPartner01@ais.co.th\\\",\\\"CPID\\\":\\\"QATestPartner01@ais.co.th\\\"},\\\"Property\\\":{\\\"RouteEngine\\\":false}}}\"\r",
											"\r",
											"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);      \r",
											"                            console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
											"                            let url = urlCheckLog + requestObjectUrlStaging;\r",
											"                            let x_ais_orderref = x_ais_OrderRef_CreatePartner + current_timestamp;\r",
											"                            let x_ais_orderdesc = x_ais_OrderDesc_CreatePartner;\r",
											"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken\");\r",
											"\r",
											"                            let PartnerName = pm.environment.get(\"Value_CreatePartner_TST_F2_1_1_001_PartnerName\");\r",
											"                            let PartnerType = pm.environment.get(\"Value_CreatePartner_TST_F2_1_1_001_PartnerType\");\r",
											"                            let PartnerDetailMerchantContact = pm.environment.get(\"Value_CreatePartner_TST_F2_1_1_001_PartnerDetail_MerchantContact\");\r",
											"                            let PartnerDetailCPID = pm.environment.get(\"Value_CreatePartner_TST_F2_1_1_001_PartnerDetail_CPID\");\r",
											"                            let PropertyRouteEngine = pm.environment.get(\"Value_CreatePartner_TST_F2_1_1_001_Property_RouteEngine\");\r",
											"                            \r",
											"                            pm.expect(jsonParseRequestObject.url).to.eql(url);\r",
											"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerName).to.eql(PartnerName);\r",
											"                            pm.expect(JSON.stringify(jsonParseRequestObject.body.PartnerType)).to.eql(PartnerType);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerDetail.MerchantContact).to.eql(PartnerDetailMerchantContact);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerDetail.CPID).to.eql(PartnerDetailCPID);\r",
											"                            pm.expect(jsonParseRequestObject.body.Property.RouteEngine).to.eql(PropertyRouteEngine);\r",
											"\r",
											"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
											"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
											"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
											"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
											"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
											"                            console.log(\"resquest.body.PartnerName : \" + jsonParseRequestObject.body.PartnerName + \" = \" + PartnerName);\r",
											"                            console.log(\"resquest.body.PartnerType : \" + JSON.stringify(jsonParseRequestObject.body.PartnerType) + \" = \" + PartnerType);\r",
											"                            console.log(\"resquest.body.MerchantContact : \" + jsonParseRequestObject.body.MerchantContact + \" = \" + PartnerDetailMerchantContact);\r",
											"                            console.log(\"resquest.body.CPID : \" + jsonParseRequestObject.body.PartnerDetail.CPID + \" = \" + PartnerDetailCPID);\r",
											"                            console.log(\"resquest.body.RouteEngine : \" + jsonParseRequestObject.body.Property.RouteEngine + \" = \" + PropertyRouteEngine);\r",
											"\r",
											"                           \r",
											"\r",
											"                          \r",
											"                            // check responseObject\r",
											"                            // \"responseObject\":\"{\\\"PartnerInfo\\\":{\\\"CustomerId\\\":\\\"6059a4f863fa0e0001b9d2ef\\\",\\\"PartnerId\\\":\\\"6059a4f863fa0e0001b9d2f0\\\",\\\"PartnerName\\\":\\\"QATestPartner1111111\\\",\\\"PartnerType\\\":[\\\"Supplier\\\",\\\"Customer\\\"],\\\"PartnerDetail\\\":{\\\"MerchantContact\\\":\\\"QATestPartner01@ais.co.th\\\",\\\"CPID\\\":\\\"QATestPartner01@ais.co.th\\\"},\\\"Property\\\":{\\\"RouteEngine\\\":false},\\\"CreateDate\\\":\\\"2021-03-23T15:21:12.6726951+07:00\\\"},\\\"OperationStatus\\\":{\\\"Code\\\":\\\"20100\\\",\\\"Description\\\":\\\"CreatePartner is Success\\\"}}\",\"activityLog\":{\"startTime\":\"2021-03-23T15:21:12.6619894+07:00\",\"endTime\":\"2021-03-23T15:21:12.6785132+07:00\",\"processTime\":16.5238}}\r",
											"\r",
											"                         \r",
											"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
											"                            // console.log(\"jsonParseResponseObject:\", JSON.parse(resultDataLog.custom1.responseObject))  \r",
											"                                      \r",
											"  \r",
											"                            console.log(\"response.PartnerInfo.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeRoleInvalid);\r",
											"                            console.log(\"response.PartnerInfo.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionRoleInvalid);\r",
											"                               \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeRoleInvalid);  \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionRoleInvalid);  \r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"setTimeout(function(){SearchLogFindTid();}, 10000); \r",
											"setTimeout(function(){CheckLog();}, 20000); \r",
											"setTimeout(function(){\r",
											"pm.environment.unset(\"current_timestamp\");\r",
											"pm.environment.unset(\"AccessToken\");\r",
											"pm.environment.unset(\"Value_CreatePartner_TST_F2_1_1_001_PartnerName\");\r",
											"pm.environment.unset(\"Value_CreatePartner_TST_F2_1_1_001_PartnerType\");\r",
											"pm.environment.unset(\"Value_CreatePartner_TST_F2_1_1_001_PartnerDetail_MerchantContact\");\r",
											"pm.environment.unset(\"Value_CreatePartner_TST_F2_1_1_001_PartnerDetail_CPID\");\r",
											"pm.environment.unset(\"Value_CreatePartner_TST_F2_1_1_001_Property_RouteEngine\");\r",
											"pm.environment.unset(\"GetResponse_PartnerId\");\r",
											"pm.environment.unset(\"AccessToken2\");\r",
											"pm.environment.unset(\"tid\");\r",
											"pm.environment.unset(\"AuthenInfo_Username\");\r",
											"pm.environment.unset(\"AuthenInfo_Password\");\r",
											"pm.environment.unset(\"random_number\");\r",
											"pm.environment.unset(\"PartnerName\");\r",
											"pm.environment.unset(\"MerchantContact\");\r",
											"pm.environment.unset(\"CPID\");\r",
											"pm.environment.unset(\"AccountName\");\r",
											"pm.environment.unset(\"GetResponse_AccountName\");\r",
											"pm.environment.unset(\"GetResponse_AccountId\");\r",
											"pm.environment.unset(\"GetResponse_SystemUserId\");\r",
											"pm.environment.unset(\"current_timestamp2\");\r",
											"\r",
											"\r",
											"}, 30000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-ais-UserName",
										"value": "{{x_ais_UserName_AisPartner}}",
										"type": "text"
									},
									{
										"key": "x-ais-OrderRef",
										"value": "{{x_ais_OrderRef_CreatePartner}}{{current_timestamp}}"
									},
									{
										"key": "x-ais-OrderDesc",
										"value": "{{x_ais_OrderDesc_CreatePartner}}",
										"type": "text"
									},
									{
										"key": "x-ais-AccessToken",
										"value": "{{Bearer}} {{AccessToken}}"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"PartnerName\": \"{{Value_CreatePartner_TST_F2_1_1_001_PartnerName}}\",\r\n  \"PartnerType\": {{Value_CreatePartner_TST_F2_1_1_001_PartnerType}},\r\n  \"PartnerDetail\": {\r\n    \"MerchantContact\": \"{{Value_CreatePartner_TST_F2_1_1_001_PartnerDetail_MerchantContact}}\",\r\n    \"CPID\": \"{{Value_CreatePartner_TST_F2_1_1_001_PartnerDetail_CPID}}\"\r\n  },\r\n  \"Property\": {\r\n    \"RouteEngine\": \"{{Value_CreatePartner_TST_F2_1_1_001_Property_RouteEngine}}\"\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{url}}{{provisioningapis}}/api/v1/Partner/CreatePartner",
									"host": [
										"{{url}}{{provisioningapis}}"
									],
									"path": [
										"api",
										"v1",
										"Partner",
										"CreatePartner"
									]
								},
								"description": "Type:Desire"
							},
							"response": []
						},
						{
							"name": "CreatePartner_TST_F2_0_2_007_Error_CustomerRoleInvalid",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var Username = pm.environment.get(\"Username_Customer\");\r",
											"var Password = pm.environment.get(\"Password_Customer\");\r",
											"\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"\r",
											"pm.environment.set(\"Value_CreatePartner_TST_F2_1_1_001_PartnerName\",fieldDataValue.Provisioning.Partner.CreatePartner.Value_CreatePartner_TST_F2_1_1_001_PartnerName)\r",
											"pm.environment.set(\"Value_CreatePartner_TST_F2_1_1_001_PartnerType\",JSON.stringify(fieldDataValue.Provisioning.Partner.CreatePartner.Value_CreatePartner_TST_F2_1_1_001_PartnerType))\r",
											"pm.environment.set(\"Value_CreatePartner_TST_F2_1_1_001_PartnerDetail_MerchantContact\",fieldDataValue.Provisioning.Partner.CreatePartner.Value_CreatePartner_TST_F2_1_1_001_PartnerDetail_MerchantContact)\r",
											"pm.environment.set(\"Value_CreatePartner_TST_F2_1_1_001_PartnerDetail_CPID\",fieldDataValue.Provisioning.Partner.CreatePartner.Value_CreatePartner_TST_F2_1_1_001_PartnerDetail_CPID)\r",
											"pm.environment.set(\"Value_CreatePartner_TST_F2_1_1_001_Property_RouteEngine\",fieldDataValue.Provisioning.Partner.CreatePartner.Value_CreatePartner_TST_F2_1_1_001_Property_RouteEngine)\r",
											"\r",
											"\r",
											"//format YYYYMMDDHHMMSSS\r",
											"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
											"\r",
											"// console.log('currentTmestamp',currentTmestamp);\r",
											"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
											"\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var current_timestamp2 = pm.environment.get(\"current_timestamp2\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- statusCodeList --------------//\r",
											"//set variable to statusCodeList JSON.parse\r",
											"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
											"//set global variable to statusCode 200\r",
											"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
											"//set global variable to statusCode 201\r",
											"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
											"//set global variable to statusCode 403\r",
											"pm.globals.set(\"statusCodeForbidden\", statusCodeList.statusCodeForbidden);\r",
											"\r",
											"//---------------- resultCodeList ------------- -//\r",
											"//set variable to resultCodeList JSON.parse\r",
											"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
											"//set global variable to resultCode \"20000\"\r",
											"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
											"//set global variable to resultCode \"20100\"\r",
											"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
											"//set global variable to resultCode \"40308\"\r",
											"pm.globals.set(\"resultCodeRoleInvalid\", resultCodeList.resultCodeRoleInvalid);\r",
											"\r",
											"//---------------- resultDescriptionSuccessList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
											"//set global variable to resultDescription \"SignInProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
											"//set global variable to resultDescription \"CreatePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
											"//set global variable to resultDescription \"RemovePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
											"//set global variable to resultDescription \"InquiryPartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionInquiryPartner\", resultDescriptionSuccessList.resultDescriptionInquiryPartner);\r",
											"//set global variable to resultDescription \"RemoveSystemUser is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveSystemUser\", resultDescriptionSuccessList.resultDescriptionRemoveSystemUser);\r",
											"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
											"\r",
											"//---------------- resultDescriptionErrorList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
											"//set global variable to resultDescription \"Role Invalid\"\r",
											"pm.globals.set(\"resultDescriptionRoleInvalid\", resultDescriptionErrorList.resultDescriptionRoleInvalid);\r",
											"\r",
											"\r",
											"//---------------- HeaderList --------------//\r",
											"//set variable to HeaderList JSON.parse\r",
											"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
											"//---------------- set globals Other --------------//\r",
											"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
											"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
											"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
											"//set global variable to kbn-versio \"7.5.1\"\r",
											"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Signin_ --------------//\r",
											"//set global variable to x_ais_OrderRef \"Signin_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Partner --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
											"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
											"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
											"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
											"//set global variable to x_ais_OrderRef \"InquiryPartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_InquiryPartner\", HeaderList.Partner.x_ais_OrderRef_InquiryPartner);\r",
											"//set global variable to x_ais_OrderDesc \"InquiryPartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_InquiryPartner\", HeaderList.Partner.x_ais_OrderDesc_InquiryPartner);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals CreateAccount --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
											"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
											"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
											"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals SystemUser --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreateSystemUser_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreateSystemUser\", HeaderList.SystemUser.x_ais_OrderRef_CreateSystemUser);\r",
											"//set global variable to x_ais_OrderDesc \"CreateSystemUser\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreateSystemUser\", HeaderList.SystemUser.x_ais_OrderDesc_CreateSystemUser);\r",
											"//set global variable to x_ais_OrderRef \"RemoveSystemUser_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemoveSystemUser\", HeaderList.SystemUser.x_ais_OrderRef_RemoveSystemUser);\r",
											"//set global variable to x_ais_OrderDesc \"RemoveSystemUser\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemoveSystemUser\", HeaderList.SystemUser.x_ais_OrderDesc_RemoveSystemUser);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultCode \"20100\"\r",
											"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
											"//get global variable to resultDescription \"SignInProcess is Success\"\r",
											"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
											"\r",
											"\r",
											"\r",
											"//---------------- urlRouteList --------------//\r",
											"//set variable to urlRouteList JSON.parse\r",
											"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
											"//---------------- set url Create --------------//\r",
											"//set global variable to url \"/api/v1/auth/signin\"\r",
											"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
											"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
											"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
											"//set global variable to url \"/api/v1/SystemUser/CreateSystemUser\"\r",
											"pm.globals.set(\"urlSystemUserCreateSystemUser\", urlRouteList.SystemUser.urlSystemUserCreateSystemUser);\r",
											"//---------------- get url Create --------------//\r",
											"//get global variable to url \"/api/v1/auth/signin\"\r",
											"var urlSignin = pm.globals.get(\"urlSignin\");\r",
											"\r",
											"\r",
											"//---------------- set url Remove --------------//\r",
											"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
											"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
											"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
											"//set global variable to url \"/api/v1/SystemUser/RemoveSystemUser\"\r",
											"pm.globals.set(\"urlSystemUserRemoveSystemUser\", urlRouteList.SystemUser.urlSystemUserRemoveSystemUser);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set url Inquiry --------------//\r",
											"//set global variable to url \"/api/v1/Partner/InquiryPartner\"\r",
											"pm.globals.set(\"urlPartnerInquiryPartner\", urlRouteList.Partner.urlPartnerInquiryPartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"Signin_\"\r",
											"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"// Signin get token ROOT ADMIN\r",
											" Signin = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp2,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username,\r",
											"                password:Password\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        \r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"\r",
											"        // set random_number\r",
											"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
											"        //set PartnerName\r",
											"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
											"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
											"        //set MerchantContact\r",
											"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
											"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
											"        // set CPID\r",
											"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
											"        pm.environment.set(\"CPID\", CPIDValue)\r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"setTimeout(async function(){}, 1000); \r",
											"Signin();\r",
											"setTimeout(async function(){}, 4000); \r",
											" \r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get globals SystemUser --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemoveSystemUser_\"\r",
											"var x_ais_OrderRef_RemoveSystemUser = pm.globals.get(\"x_ais_OrderRef_RemoveSystemUser\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveSystemUser\"\r",
											"var x_ais_OrderDesc_RemoveSystemUser = pm.globals.get(\"x_ais_OrderDesc_RemoveSystemUser\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Inquiry --------------//\r",
											"//get global variable to url \"/api/v1/Partner/InquiryPartner\"\r",
											"var urlPartnerInquiryPartner = pm.globals.get(\"urlPartnerInquiryPartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Remove --------------//\r",
											"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
											"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
											"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
											"//get global variable to url \"/api/v1/SystemUser/RemoveSystemUser\"\r",
											"var urlSystemUserRemoveSystemUser = pm.globals.get(\"urlSystemUserRemoveSystemUser\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultDescription \"RemovePartner is Success\"\r",
											"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
											"//get global variable to resultDescription \"RemoveAccount is Success\r",
											"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
											"//get global variable to resultDescription \"RemoveSystemUser is Success\"\r",
											"var resultDescriptionRemoveSystemUser = pm.globals.get(\"resultDescriptionRemoveSystemUser\");\r",
											"\r",
											"\r",
											"//get global variable to statusCode 403\r",
											"var statusCodeForbidden = pm.globals.get(\"statusCodeForbidden\");\r",
											"//get global variable to resultCode \"40308\"\r",
											"var resultCodeRoleInvalid = pm.globals.get(\"resultCodeRoleInvalid\");\r",
											"//get global variable to resultDescription \"Role Invalid\"\r",
											"var resultDescriptionRoleInvalid = pm.globals.get(\"resultDescriptionRoleInvalid\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"CreatePartner : Status code is \" + statusCodeForbidden, function () {\r",
											"    pm.response.to.have.status(statusCodeForbidden);\r",
											"});\r",
											"\r",
											"pm.test('CreatePartner : operationStatus code is '+'\"'+ resultCodeRoleInvalid +'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeRoleInvalid);\r",
											"});\r",
											"\r",
											"pm.test('CreatePartner : operationStatus description is '+'\"'+ resultDescriptionRoleInvalid+'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionRoleInvalid);\r",
											"});\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"// RemovePartner ROOT ADMIN\r",
											"RemovePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemovePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemovePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsRemovePartner = {\r",
											"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemovePartner,\r",
											"            body: httpRequestRemovePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request RemovePartner');\r",
											"        let response = await reqPromise(optionsRemovePartner);\r",
											"        let jsonDataRemovePartner = await response.json();\r",
											"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
											"    \r",
											"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemovePartner is Success\r",
											"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// RemoveAccount ROOT ADMIN\r",
											" RemoveAccount = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemoveAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemoveAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsRemoveAccount = {\r",
											"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemoveAccount,\r",
											"            body: httpRequestRemoveAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request RemoveAccount');\r",
											"        let response = await reqPromise(optionsRemoveAccount);\r",
											"        let jsonDataRemoveAccount = await response.json();\r",
											"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
											"    \r",
											"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemoveAccount is Success\r",
											"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
											"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// RemoveSystemUser ROOT ADMIN\r",
											" RemoveSystemUser = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemoveSystemUser = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemoveSystemUser + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveSystemUser,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemoveSystemUser = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"SystemUserId\": pm.environment.get(\"GetResponse_SystemUserId\")\r",
											"            })\r",
											"        };\r",
											"\r",
											"        let optionsRemoveSystemUser = {\r",
											"            url: url + provisioningapis + urlSystemUserRemoveSystemUser,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemoveSystemUser,\r",
											"            body: httpRequestRemoveSystemUser\r",
											"        };\r",
											"\r",
											"        // console.log('request RemoveSystemUser');\r",
											"        let response = await reqPromise(optionsRemoveSystemUser);\r",
											"        let jsonDataRemoveSystemUser = await response.json();\r",
											"        // console.log('jsonDataRemoveSystemUser',jsonDataRemoveSystemUser)\r",
											"    \r",
											"        let operationStatusRemoveSystemUser = await jsonDataRemoveSystemUser.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemoveSystemUser : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemoveSystemUser : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemoveSystemUser).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemoveSystemUser is Success\r",
											"        pm.test('RemoveSystemUser : OperationStatus Description is '+'\"'+ resultDescriptionRemoveSystemUser+'\"', function () {\r",
											"            pm.expect(operationStatusRemoveSystemUser).to.have.property('Description', resultDescriptionRemoveSystemUser);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"//---------------- LogDefaultValue --------------//\r",
											"//set variable to LogDefaultValue JSON.parse\r",
											"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
											"// console.log('LogDefaultValue',LogDefaultValue);\r",
											"//---------------- set globals Other --------------//\r",
											"\r",
											"var SearchLog = LogDefaultValue.SearchLog;\r",
											"// console.log('SearchLog',SearchLog);\r",
											"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
											"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
											"var kbn_version = SearchLog.header.kbn_version;\r",
											"var authorization = SearchLog.header.Authorization;\r",
											"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
											"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
											"var namespace = LogDefaultValue.Other.namespace;\r",
											"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
											"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
											"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
											"var methodPost = LogDefaultValue.Other.methodPost;\r",
											"\r",
											"// Detail\r",
											"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
											"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
											"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
											"\r",
											"// Summary\r",
											"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
											"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
											"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
											"\r",
											"// ProvisioningAPIs [Partner]\r",
											"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
											"var cmdName = LogDefaultValue.Provisioning.Partner.cmdNameCreatePartner;\r",
											"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
											"var containerId = LogDefaultValue.Provisioning.containerId;\r",
											"var requestObjectUrlStaging = LogDefaultValue.Provisioning.Partner.requestObjectUrlCreatePartnerMgStaging;\r",
											"\r",
											"// Check CDR (Summary Log) and EDR (Detail Log)\r",
											"SearchLogFindTid = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSearchLogFindTid = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization' : authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = x_ais_OrderRef_CreatePartner + current_timestamp;\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch : : :1\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestSearchLogFindTid = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"\r",
											"        let optionsSearchLogFindTid = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptSearchLogFindTid,\r",
											"            body: httpRequestSearchLogFindTid\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsSearchLogFindTid);\r",
											"        let jsonDataSearchLogFindTid = await response.json();\r",
											"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
											"\r",
											"        // //200\r",
											"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"\r",
											"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
											"        console.log('hits : : : 1',hits)\r",
											"  \r",
											"        // find tid\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            // let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"        \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"\r",
											"            if(applicationNameValue == applicationName){\r",
											"                let tid = hits[i]._source.cauldron.tid;\r",
											"                pm.environment.set(\"tid\", tid);\r",
											"                break;\r",
											"           }\r",
											"        }\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"CheckLog = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCheckLog = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = pm.environment.get(\"tid\");\r",
											"\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch : : 2\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestCheckLog = {\r",
											"            mode: 'raw',\r",
											"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"        let optionsCheckLog = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptCheckLog,\r",
											"            body: httpRequestCheckLog\r",
											"        }; \r",
											"        let response = await reqPromise(optionsCheckLog);\r",
											"        let jsonDataCheckLog = await response.json();\r",
											"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
											"        \r",
											"        // //200\r",
											"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });     \r",
											"        \r",
											"        let hits = jsonDataCheckLog.hits.hits\r",
											"        // console.log('hits',hits)\r",
											"  \r",
											"        // find logType\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            //  let logType = hits[i]._source.cauldron.logType\r",
											"            let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"           \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            \r",
											"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
											"            // console.log('resultDataLog',resultDataLog)\r",
											"            // console.log(logType)\r",
											"            // console.log(logTypeDetail)\r",
											"            // console.log(logTypeSummary)\r",
											"\r",
											"            let tidControl = x_ais_OrderRef_CreatePartner + current_timestamp;\r",
											"            // console.log(tidControl);\r",
											"            if(applicationNameValue == applicationName){\r",
											"                 \r",
											"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ProvisioningAPIs\r",
											"                     pm.test(\"Check Summary Log : CreatePartner\" , function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Summary Log ( Expected = Actual) [CreatePartner] ==================\");\r",
											"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
											"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
											"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeRoleInvalid);\r",
											"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionRoleInvalid);\r",
											"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
											"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                         // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
											"                        console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
											"                    \r",
											"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp);\r",
											"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName);\r",
											"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeRoleInvalid);\r",
											"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionRoleInvalid);\r",
											"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp);\r",
											"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary);\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);  \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace);\r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName);\r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId);\r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
											"                        pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
											"\r",
											"                \r",
											"                    }); \r",
											"                }\r",
											"\r",
											"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ProvisioningAPIs\r",
											"                    \r",
											"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
											"                    // console.log('endPointNameValue ',endPointNameValue)\r",
											"                    // console.log('endPointNameProvisioningAPIs ',endPointNameProvisioningAPIs)\r",
											"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [CreatePartner]\", function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Detail Log ( Expected = Actual) [CreatePartner] ==================\");\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
											"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
											"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
											"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
											"                       \r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail);\r",
											"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail);\r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace);\r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName);\r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId);\r",
											"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime);\r",
											"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
											"\r",
											"                        if( endPointNameValue == endPointNameProvisioningAPIs){     //\"endPointName\":\"ProvisioningAPIs\"\r",
											"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs); \r",
											"                            \r",
											"                            // console.log(\"resultDataLog :\",resultDataLog)\r",
											"                            // console.log(\"resultDataLog.custom1 :\",resultDataLog.custom1)\r",
											"                            // console.log(\"resultDataLog.custom1.requestObject :\",resultDataLog.custom1.requestObject)\r",
											"                            // check requestObject\r",
											"                                // \"requestObject\":\"{\\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Partner/CreatePartner\\\",\\\"method\\\":\\\"POST\\\",\\\"headers\\\":{\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"CreatePartner_202103231503693\\\",\\\"x-ais-orderdesc\\\":\\\"CreatePartner\\\",\\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAFGqEAZd8xJfDiWnmUTQnUILTUz2eudCOyvuC4tlIIbY0IlAkkY2KW0\\\"},\\\"body\\\":{\\\"PartnerName\\\":\\\"QATestPartner1111111\\\",\\\"PartnerType\\\":[\\\"Supplier\\\",\\\"Customer\\\"],\\\"PartnerDetail\\\":{\\\"MerchantContact\\\":\\\"QATestPartner01@ais.co.th\\\",\\\"CPID\\\":\\\"QATestPartner01@ais.co.th\\\"},\\\"Property\\\":{\\\"RouteEngine\\\":false}}}\"\r",
											"\r",
											"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);      \r",
											"                            console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
											"                            let url = urlCheckLog + requestObjectUrlStaging;\r",
											"                            let x_ais_orderref = x_ais_OrderRef_CreatePartner + current_timestamp;\r",
											"                            let x_ais_orderdesc = x_ais_OrderDesc_CreatePartner;\r",
											"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken\");\r",
											"\r",
											"                            let PartnerName = pm.environment.get(\"Value_CreatePartner_TST_F2_1_1_001_PartnerName\");\r",
											"                            let PartnerType = pm.environment.get(\"Value_CreatePartner_TST_F2_1_1_001_PartnerType\");\r",
											"                            let PartnerDetailMerchantContact = pm.environment.get(\"Value_CreatePartner_TST_F2_1_1_001_PartnerDetail_MerchantContact\");\r",
											"                            let PartnerDetailCPID = pm.environment.get(\"Value_CreatePartner_TST_F2_1_1_001_PartnerDetail_CPID\");\r",
											"                            let PropertyRouteEngine = pm.environment.get(\"Value_CreatePartner_TST_F2_1_1_001_Property_RouteEngine\");\r",
											"                            \r",
											"                            pm.expect(jsonParseRequestObject.url).to.eql(url);\r",
											"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerName).to.eql(PartnerName);\r",
											"                            pm.expect(JSON.stringify(jsonParseRequestObject.body.PartnerType)).to.eql(PartnerType);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerDetail.MerchantContact).to.eql(PartnerDetailMerchantContact);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerDetail.CPID).to.eql(PartnerDetailCPID);\r",
											"                            pm.expect(jsonParseRequestObject.body.Property.RouteEngine).to.eql(PropertyRouteEngine);\r",
											"\r",
											"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
											"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
											"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
											"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
											"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
											"                            console.log(\"resquest.body.PartnerName : \" + jsonParseRequestObject.body.PartnerName + \" = \" + PartnerName);\r",
											"                            console.log(\"resquest.body.PartnerType : \" + JSON.stringify(jsonParseRequestObject.body.PartnerType) + \" = \" + PartnerType);\r",
											"                            console.log(\"resquest.body.MerchantContact : \" + jsonParseRequestObject.body.MerchantContact + \" = \" + PartnerDetailMerchantContact);\r",
											"                            console.log(\"resquest.body.CPID : \" + jsonParseRequestObject.body.PartnerDetail.CPID + \" = \" + PartnerDetailCPID);\r",
											"                            console.log(\"resquest.body.RouteEngine : \" + jsonParseRequestObject.body.Property.RouteEngine + \" = \" + PropertyRouteEngine);\r",
											"\r",
											"                           \r",
											"\r",
											"                          \r",
											"                            // check responseObject\r",
											"                            // \"responseObject\":\"{\\\"PartnerInfo\\\":{\\\"CustomerId\\\":\\\"6059a4f863fa0e0001b9d2ef\\\",\\\"PartnerId\\\":\\\"6059a4f863fa0e0001b9d2f0\\\",\\\"PartnerName\\\":\\\"QATestPartner1111111\\\",\\\"PartnerType\\\":[\\\"Supplier\\\",\\\"Customer\\\"],\\\"PartnerDetail\\\":{\\\"MerchantContact\\\":\\\"QATestPartner01@ais.co.th\\\",\\\"CPID\\\":\\\"QATestPartner01@ais.co.th\\\"},\\\"Property\\\":{\\\"RouteEngine\\\":false},\\\"CreateDate\\\":\\\"2021-03-23T15:21:12.6726951+07:00\\\"},\\\"OperationStatus\\\":{\\\"Code\\\":\\\"20100\\\",\\\"Description\\\":\\\"CreatePartner is Success\\\"}}\",\"activityLog\":{\"startTime\":\"2021-03-23T15:21:12.6619894+07:00\",\"endTime\":\"2021-03-23T15:21:12.6785132+07:00\",\"processTime\":16.5238}}\r",
											"\r",
											"                         \r",
											"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
											"                            // console.log(\"jsonParseResponseObject:\", JSON.parse(resultDataLog.custom1.responseObject))  \r",
											"                                      \r",
											"  \r",
											"                            console.log(\"response.PartnerInfo.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeRoleInvalid);\r",
											"                            console.log(\"response.PartnerInfo.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionRoleInvalid);\r",
											"                               \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeRoleInvalid);  \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionRoleInvalid);  \r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"setTimeout(function(){SearchLogFindTid();}, 10000); \r",
											"setTimeout(function(){CheckLog();}, 20000); \r",
											"setTimeout(function(){\r",
											"pm.environment.unset(\"current_timestamp\");\r",
											"pm.environment.unset(\"AccessToken\");\r",
											"pm.environment.unset(\"Value_CreatePartner_TST_F2_1_1_001_PartnerName\");\r",
											"pm.environment.unset(\"Value_CreatePartner_TST_F2_1_1_001_PartnerType\");\r",
											"pm.environment.unset(\"Value_CreatePartner_TST_F2_1_1_001_PartnerDetail_MerchantContact\");\r",
											"pm.environment.unset(\"Value_CreatePartner_TST_F2_1_1_001_PartnerDetail_CPID\");\r",
											"pm.environment.unset(\"Value_CreatePartner_TST_F2_1_1_001_Property_RouteEngine\");\r",
											"pm.environment.unset(\"GetResponse_PartnerId\");\r",
											"pm.environment.unset(\"AccessToken2\");\r",
											"pm.environment.unset(\"tid\");\r",
											"pm.environment.unset(\"AuthenInfo_Username\");\r",
											"pm.environment.unset(\"AuthenInfo_Password\");\r",
											"pm.environment.unset(\"random_number\");\r",
											"pm.environment.unset(\"PartnerName\");\r",
											"pm.environment.unset(\"MerchantContact\");\r",
											"pm.environment.unset(\"CPID\");\r",
											"pm.environment.unset(\"AccountName\");\r",
											"pm.environment.unset(\"GetResponse_AccountName\");\r",
											"pm.environment.unset(\"GetResponse_AccountId\");\r",
											"pm.environment.unset(\"GetResponse_SystemUserId\");\r",
											"pm.environment.unset(\"current_timestamp2\");\r",
											"\r",
											"\r",
											"}, 30000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-ais-UserName",
										"value": "{{x_ais_UserName_AisPartner}}",
										"type": "text"
									},
									{
										"key": "x-ais-OrderRef",
										"value": "{{x_ais_OrderRef_CreatePartner}}{{current_timestamp}}"
									},
									{
										"key": "x-ais-OrderDesc",
										"value": "{{x_ais_OrderDesc_CreatePartner}}",
										"type": "text"
									},
									{
										"key": "x-ais-AccessToken",
										"value": "{{Bearer}} {{AccessToken}}"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"PartnerName\": \"{{Value_CreatePartner_TST_F2_1_1_001_PartnerName}}\",\r\n  \"PartnerType\": {{Value_CreatePartner_TST_F2_1_1_001_PartnerType}},\r\n  \"PartnerDetail\": {\r\n    \"MerchantContact\": \"{{Value_CreatePartner_TST_F2_1_1_001_PartnerDetail_MerchantContact}}\",\r\n    \"CPID\": \"{{Value_CreatePartner_TST_F2_1_1_001_PartnerDetail_CPID}}\"\r\n  },\r\n  \"Property\": {\r\n    \"RouteEngine\": \"{{Value_CreatePartner_TST_F2_1_1_001_Property_RouteEngine}}\"\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{url}}{{provisioningapis}}/api/v1/Partner/CreatePartner",
									"host": [
										"{{url}}{{provisioningapis}}"
									],
									"path": [
										"api",
										"v1",
										"Partner",
										"CreatePartner"
									]
								},
								"description": "Type:Desire"
							},
							"response": []
						}
					]
				},
				{
					"name": "UpdatePartner",
					"item": [
						{
							"name": "UpdatePartner_TST_F3_1_1_001_Success",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var Username = pm.environment.get(\"Username\");\r",
											"var Password = pm.environment.get(\"Password\");\r",
											"\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"\r",
											"pm.environment.set(\"Value_UpdatePartner_PartnerName\",fieldDataValue.Provisioning.Partner.UpdatePartner.Value_UpdatePartner_PartnerName)\r",
											"pm.environment.set(\"Value_UpdatePartner_PartnerType\",JSON.stringify(fieldDataValue.Provisioning.Partner.UpdatePartner.Value_UpdatePartner_PartnerType))\r",
											"pm.environment.set(\"Value_UpdatePartner_PartnerDetail_MerchantContact\",fieldDataValue.Provisioning.Partner.UpdatePartner.Value_UpdatePartner_PartnerDetail_MerchantContact)\r",
											"pm.environment.set(\"Value_UpdatePartner_PartnerDetail_CPID\",fieldDataValue.Provisioning.Partner.UpdatePartner.Value_UpdatePartner_PartnerDetail_CPID)\r",
											"\r",
											"\r",
											"//format YYYYMMDDHHMMSSS\r",
											"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
											"// console.log('currentTmestamp',currentTmestamp);\r",
											"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- statusCodeList --------------//\r",
											"//set variable to statusCodeList JSON.parse\r",
											"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
											"//set global variable to statusCode 200\r",
											"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
											"//set global variable to statusCode 201\r",
											"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
											"\r",
											"//---------------- resultCodeList --------------//\r",
											"//set variable to resultCodeList JSON.parse\r",
											"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
											"//set global variable to resultCode \"20000\"\r",
											"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
											"//set global variable to resultCode \"20100\"\r",
											"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
											"\r",
											"//---------------- resultDescriptionSuccessList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
											"//set global variable to resultDescription \"SignInProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
											"//set global variable to resultDescription \"CreatePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
											"//set global variable to resultDescription \"RemovePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
											"//set global variable to resultDescription \"UpdatePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionUpdatePartner\", resultDescriptionSuccessList.resultDescriptionUpdatePartner);\r",
											"//set global variable to resultDescription \"InquiryPartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionInquiryPartner\", resultDescriptionSuccessList.resultDescriptionInquiryPartner);\r",
											"\r",
											"\r",
											"//---------------- HeaderList --------------//\r",
											"//set variable to HeaderList JSON.parse\r",
											"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
											"//---------------- set globals Other --------------//\r",
											"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
											"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
											"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
											"//set global variable to kbn-versio \"7.5.1\"\r",
											"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Signin_ --------------//\r",
											"//set global variable to x_ais_OrderRef \"Signin_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals CreatePartner --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
											"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
											"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
											"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
											"//set global variable to x_ais_OrderRef \"InquiryPartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_InquiryPartner\", HeaderList.Partner.x_ais_OrderRef_InquiryPartner);\r",
											"//set global variable to x_ais_OrderDesc \"InquiryPartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_InquiryPartner\", HeaderList.Partner.x_ais_OrderDesc_InquiryPartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set globals Partner --------------//\r",
											"//set global variable to x_ais_OrderRef \"UpdatePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_UpdatePartner\", HeaderList.Partner.x_ais_OrderRef_UpdatePartner);\r",
											"//set global variable to x_ais_OrderRef \"UpdatePartnerfail_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_UpdatePartner_fail\", HeaderList.Partner.x_ais_OrderRef_UpdatePartner_fail);\r",
											"//set global variable to x_ais_OrderDesc \"UpdatePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UpdatePartner\", HeaderList.Partner.x_ais_OrderDesc_UpdatePartner);\r",
											"\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultCode \"20100\"\r",
											"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
											"//get global variable to resultDescription \"SignInProcess is Success\"\r",
											"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
											"//get global variable to resultDescription \"CreatePartner is Success\"\r",
											"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
											"\r",
											"\r",
											"//---------------- urlRouteList --------------//\r",
											"//set variable to urlRouteList JSON.parse\r",
											"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
											"//---------------- set url Create --------------//\r",
											"//set global variable to url \"/api/v1/auth/signin\"\r",
											"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
											"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
											"\r",
											"//---------------- get url Create --------------//\r",
											"//get global variable to url \"/api/v1/auth/signin\"\r",
											"var urlSignin = pm.globals.get(\"urlSignin\");\r",
											"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
											"\r",
											"//---------------- set url Remove --------------//\r",
											"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set url Inquiry --------------//\r",
											"//set global variable to url \"/api/v1/Partner/InquiryPartner\"\r",
											"pm.globals.set(\"urlPartnerInquiryPartner\", urlRouteList.Partner.urlPartnerInquiryPartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"Signin_\"\r",
											"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"// Signin get token\r",
											" Signin = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username,\r",
											"                password:Password\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"\r",
											"        //set random_number\r",
											"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
											"        //set PartnerName\r",
											"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
											"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
											"        //set MerchantContact\r",
											"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
											"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
											"        // set CPID\r",
											"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
											"        pm.environment.set(\"CPID\", CPIDValue)\r",
											"        \r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreatePartner\r",
											" CreatePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreatePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreatePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
											"                \"PartnerType\": fieldDataValue.Partner.PartnerTypeValue, // [\"Supplier\",\"Customer\"]\r",
											"                \"PartnerDetail\": {\r",
											"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
											"                    \"CPID\": pm.environment.get(\"CPID\")\r",
											"                },\r",
											"                \"Property\": {\r",
											"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
											"                }\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsCreatePartner = {\r",
											"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreatePartner,\r",
											"            body: httpRequestCreatePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsCreatePartner);\r",
											"        let jsonDataCreatePartner = await response.json();\r",
											"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
											"    \r",
											"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreatePartner is Success\r",
											"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
											"        });\r",
											"\r",
											"        console.log(\"jsonDataCreatePartner.PartnerInfo.PartnerId : :\", jsonDataCreatePartner.PartnerInfo.PartnerId)\r",
											"        //GetResponse_PartnerId\r",
											"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
											"\r",
											"        //GetResponse_CustomerId\r",
											"        pm.environment.set(\"GetResponse_CustomerId\", jsonDataCreatePartner.PartnerInfo.CustomerId);\r",
											"        \r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"Signin();\r",
											"setTimeout(async function(){await CreatePartner();}, 5000); \r",
											"setTimeout(async function(){}, 6000);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"InquiryPartner_\"\r",
											"var x_ais_OrderRef_InquiryPartner = pm.globals.get(\"x_ais_OrderRef_InquiryPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"InquiryPartner\"\r",
											"var x_ais_OrderDesc_InquiryPartner = pm.globals.get(\"x_ais_OrderDesc_InquiryPartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"UpdatePartner_\"\r",
											"var x_ais_OrderRef_UpdatePartner = pm.globals.get(\"x_ais_OrderRef_UpdatePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"UpdatePartner\"\r",
											"var x_ais_OrderDesc_UpdatePartner = pm.globals.get(\"x_ais_OrderDesc_UpdatePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Inquiry --------------//\r",
											"//get global variable to url \"/api/v1/Partner/InquiryPartner\"\r",
											"var urlPartnerInquiryPartner = pm.globals.get(\"urlPartnerInquiryPartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Remove --------------//\r",
											"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultDescription \"RemovePartner is Success\"\r",
											"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
											"//get global variable to resultDescription \"UpdatePartner is Success\"\r",
											"var resultDescriptionUpdatePartner = pm.globals.get(\"resultDescriptionUpdatePartner\");\r",
											"//get global variable to resultDescription \"InquiryPartner is Success\"\r",
											"var resultDescriptionInquiryPartner = pm.globals.get(\"resultDescriptionInquiryPartner\");\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"UpdatePartner : Status code is \" + statusCodeSuccess, function () {\r",
											"    pm.response.to.have.status(statusCodeSuccess);\r",
											"});\r",
											"\r",
											"pm.test('UpdatePartner : operationStatus code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeSuccess);\r",
											"});\r",
											"\r",
											"pm.test('UpdatePartner : operationStatus description is '+'\"'+ resultDescriptionUpdatePartner+'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionUpdatePartner);\r",
											"});\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"// RemovePartner\r",
											" RemovePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemovePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemovePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsRemovePartner = {\r",
											"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemovePartner,\r",
											"            body: httpRequestRemovePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request RemovePartner');\r",
											"        let response = await reqPromise(optionsRemovePartner);\r",
											"        let jsonDataRemovePartner = await response.json();\r",
											"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
											"    \r",
											"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemovePartner is Success\r",
											"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"//---------------- LogDefaultValue --------------//\r",
											"//set variable to LogDefaultValue JSON.parse\r",
											"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
											"// console.log('LogDefaultValue',LogDefaultValue);\r",
											"//---------------- set globals Other --------------//\r",
											"\r",
											"var SearchLog = LogDefaultValue.SearchLog;\r",
											"// console.log('SearchLog',SearchLog);\r",
											"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
											"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
											"var kbn_version = SearchLog.header.kbn_version;\r",
											"var authorization = SearchLog.header.Authorization;\r",
											"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
											"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
											"var namespace = LogDefaultValue.Other.namespace;\r",
											"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
											"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
											"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
											"var methodPut = LogDefaultValue.Other.methodPut;\r",
											"\r",
											"// Detail\r",
											"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
											"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
											"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
											"\r",
											"// Summary\r",
											"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
											"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
											"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
											"\r",
											"// ProvisioningAPIs [Partner]\r",
											"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
											"var cmdName = LogDefaultValue.Provisioning.Partner.cmdNameUpdatePartner;\r",
											"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
											"var containerId = LogDefaultValue.Provisioning.containerId;\r",
											"var requestObjectUrlStaging = LogDefaultValue.Provisioning.Partner.requestObjectUrlUpdatePartnerMgStaging;\r",
											"\r",
											"// Check CDR (Summary Log) and EDR (Detail Log)\r",
											"SearchLogFindTid = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSearchLogFindTid = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization' : authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = x_ais_OrderRef_UpdatePartner + current_timestamp;\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestSearchLogFindTid = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"\r",
											"        let optionsSearchLogFindTid = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptSearchLogFindTid,\r",
											"            body: httpRequestSearchLogFindTid\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsSearchLogFindTid);\r",
											"        let jsonDataSearchLogFindTid = await response.json();\r",
											"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
											"\r",
											"        // //200\r",
											"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"\r",
											"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
											"        console.log('hits',hits)\r",
											"  \r",
											"        // find tid\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            // let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"        \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            if(applicationNameValue == applicationName){\r",
											"                let tid = hits[i]._source.cauldron.tid;\r",
											"                pm.environment.set(\"tid\", tid);\r",
											"                break;\r",
											"           }\r",
											"        }\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"CheckLog = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCheckLog = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = pm.environment.get(\"tid\");\r",
											"\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestCheckLog = {\r",
											"            mode: 'raw',\r",
											"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"        let optionsCheckLog = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptCheckLog,\r",
											"            body: httpRequestCheckLog\r",
											"        }; \r",
											"        let response = await reqPromise(optionsCheckLog);\r",
											"        let jsonDataCheckLog = await response.json();\r",
											"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
											"        \r",
											"        // //200\r",
											"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });     \r",
											"        \r",
											"        let hits = jsonDataCheckLog.hits.hits\r",
											"        // console.log('hits',hits)\r",
											"  \r",
											"        // find logType\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            //  let logType = hits[i]._source.cauldron.logType\r",
											"            let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"           \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            \r",
											"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
											"            // console.log('resultDataLog',resultDataLog)\r",
											"\r",
											"            let tidControl = x_ais_OrderRef_UpdatePartner + current_timestamp;\r",
											"            // console.log(tidControl);\r",
											"            if(applicationNameValue == applicationName){\r",
											"                 \r",
											"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ProvisioningAPIs\r",
											"                     pm.test(\"Check Summary Log : UpdatePartner\" , function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Summary Log ( Expected = Actual) [UpdatePartner] ==================\");\r",
											"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
											"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
											"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeSuccess);\r",
											"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionUpdatePartner);\r",
											"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
											"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                         // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
											"                        //  console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
											"\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
											"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
											"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeSuccess); \r",
											"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionUpdatePartner); \r",
											"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
											"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
											"                        // pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
											"\r",
											"                    // check custom\r",
											"                    // \t\"custom\":[ { \"no\":\"1\", \"endPointName\":\"db.TenantsCollection\", \"responseStatus\":\"Success:InquiryTenant was successfully.\", \"processTime\":1.7675 }, { \"no\":\"2\", \"endPointName\":\"db.TenantsCollection\", \"responseStatus\":\"Success:InquiryTenantName was successfully.\", \"processTime\":2.6443 }, { \"no\":\"3\", \"endPointName\":\"db.CustomersCollection\", \"responseStatus\":\"Success:UpdateCustomer was successfully.\", \"processTime\":1.6815 }, { \"no\":\"4\", \"endPointName\":\"db.TenantsCollection\", \"responseStatus\":\"Success:UpdateTenant was successfully.\", \"processTime\":1.2958 } ],\r",
											"\r",
											"                        let custom = resultDataLog.custom.endPointSummary;\r",
											"                        console.log(\"custom : : :\",custom)\r",
											"                        let countCustom = custom.length;\r",
											"\r",
											"                        // [\"db.TenantsCollection\",\"db.TenantsCollection\",\"db.CustomersCollection\",\"db.TenantsCollection\"],\r",
											"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_UpdatePartner;\r",
											"                        // [\"Success:InquiryTenant was successfully.\",\"Success:InquiryTenantName was successfully.\",\"Success:UpdateCustomer was successfully.\",\"Success:UpdateTenant was successfully.\"]\r",
											"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_UpdatePartner;\r",
											"                        let countCustomStep = dataEndPointName.length;\r",
											"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
											"                        for(let i=0;i<countCustomStep;i++){\r",
											"                            let no = custom[i].no;\r",
											"                            let valueEndPointName = custom[i].endPointName;\r",
											"                            let valueResponseStatus = custom[i].responseStatus;\r",
											"                            // console.log(\"i\",i);\r",
											"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
											"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
											"                           \r",
											"                            console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep );\r",
											"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString() );\r",
											"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i] );\r",
											"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i] );\r",
											"                           \r",
											"                            pm.expect(no).to.eql((i+1).toString()); \r",
											"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
											"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]);  \r",
											"                        }\r",
											"\r",
											"\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"\r",
											"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ProvisioningAPIs\r",
											"\r",
											"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
											"                    // console.log('endPointNameValue ',endPointNameValue)\r",
											"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [UpdatePartner]\", function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Detail Log ( Expected = Actual) [UpdatePartner] ==================\");\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
											"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
											"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
											"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
											"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
											"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
											"\r",
											"                        if( endPointNameValue == endPointNameProvisioningAPIs){     //\"endPointName\":\"ProvisioningAPIs\"\r",
											"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs); \r",
											"                        \r",
											"                            // check requestObject\r",
											"                            // \"requestObject\":\"{ \\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Partner/UpdatePartner\\\", \\\"method\\\":\\\"PUT\\\", \\\"headers\\\":{ \\\"x-ais-username\\\":\\\"AisPartner\\\", \\\"x-ais-orderref\\\":\\\"UpdatePartner_202104271404273\\\", \\\"x-ais-orderdesc\\\":\\\"UpdatePartner\\\", \\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAGz3tsie+KV1ML04AJwxsO6ElXkKFtnnoFw3oHSFyFWX0IlAkkY2KW0\\\" }, \\\"body\\\":{ \\\"PartnerId\\\":\\\"6087c42ae14c9c0001380dee\\\", \\\"PartnerName\\\":\\\"QA_Partner0001[ Edit ]\\\", \\\"PartnerType\\\":[ \\\"Supplier\\\", \\\"Customer\\\" ], \\\"PartnerDetail\\\":{ \\\"MerchantContact\\\":\\\"QA_Partner01ud@ais.co.th\\\", \\\"CPID\\\":\\\"QA_Partner01@ais.co.th\\\" } } }\",\r",
											"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
											"                            // console.log('jsonParseRequestObject : : :',jsonParseRequestObject);\r",
											"\r",
											"                            let url = urlCheckLog + requestObjectUrlStaging;  \r",
											"                            let x_ais_orderref = x_ais_OrderRef_UpdatePartner + current_timestamp;\r",
											"                            let x_ais_orderdesc = x_ais_OrderDesc_UpdatePartner;\r",
											"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken\");  \r",
											"                            let CustomerId = pm.environment.get(\"GetResponse_CustomerId\");\r",
											"                            let PartnerId = pm.environment.get(\"GetResponse_PartnerId\");\r",
											"                            let PartnerName = pm.environment.get(\"Value_UpdatePartner_PartnerName\");\r",
											"                            let PartnerType = pm.environment.get(\"Value_UpdatePartner_PartnerType\");\r",
											"                            let PartnerDetailMerchantContact = pm.environment.get(\"Value_UpdatePartner_PartnerDetail_MerchantContact\");\r",
											"                            let PartnerDetailCPID = pm.environment.get(\"Value_UpdatePartner_PartnerDetail_CPID\");\r",
											"\r",
											"\r",
											"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
											"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPut);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerId).to.eql(PartnerId);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerName).to.eql(PartnerName);\r",
											"                            pm.expect(JSON.stringify(jsonParseRequestObject.body.PartnerType)).to.eql(PartnerType);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerDetail.MerchantContact).to.eql(PartnerDetailMerchantContact);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerDetail.CPID).to.eql(PartnerDetailCPID);\r",
											"\r",
											"\r",
											"\r",
											"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
											"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPut);\r",
											"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
											"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
											"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
											"                            console.log(\"resquest.body.PartnerId : \" + jsonParseRequestObject.body.PartnerId + \" = \" + PartnerId);\r",
											"                            console.log(\"resquest.body.PartnerName : \" + jsonParseRequestObject.body.PartnerName + \" = \" + PartnerName);\r",
											"                            console.log(\"resquest.body.PartnerType : \" + JSON.stringify(jsonParseRequestObject.body.PartnerType) + \" = \" + PartnerType);\r",
											"                            console.log(\"resquest.body.MerchantContact : \" + jsonParseRequestObject.body.PartnerDetail.MerchantContact + \" = \" + PartnerDetailMerchantContact);\r",
											"                            console.log(\"resquest.body.CPID : \" + jsonParseRequestObject.body.PartnerDetail.CPID + \" = \" + PartnerDetailCPID);\r",
											"\r",
											"\r",
											"          \r",
											"                            // check responseObject\r",
											"                            //  \"responseObject\":\"{ \\\"partnerInfo\\\":{ \\\"CustomerId\\\":\\\"6087c42ae14c9c0001380ded\\\", \\\"PartnerId\\\":\\\"6087c42ae14c9c0001380dee\\\", \\\"PartnerName\\\":\\\"QA_Partner0001[ Edit ]\\\", \\\"PartnerType\\\":[ \\\"Supplier\\\", \\\"Customer\\\" ], \\\"PartnerDetail\\\":{ \\\"MerchantContact\\\":\\\"QA_Partner01ud@ais.co.th\\\", \\\"CPID\\\":\\\"QA_Partner01@ais.co.th\\\" }, \\\"AccountInfo\\\":[ ], \\\"Property\\\":{ \\\"RouteEngine\\\":false }, \\\"CreateDate\\\":\\\"2021-04-27T14:58:34.522+07:00\\\" }, \\\"OperationStatus\\\":{ \\\"Code\\\":\\\"20000\\\", \\\"Description\\\":\\\"UpdatePartner is Success\\\" }\r",
											"\r",
											"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
											"                            // console.log('jsonParseResponseObject : : :',jsonParseResponseObject);\r",
											"\r",
											"                            pm.expect(jsonParseResponseObject.partnerInfo.CustomerId).to.eql(CustomerId);  \r",
											"                            pm.expect(jsonParseResponseObject.partnerInfo.PartnerId).to.eql(PartnerId);\r",
											"                            pm.expect(jsonParseResponseObject.partnerInfo.PartnerName).to.eql(PartnerName);  \r",
											"                            pm.expect(JSON.stringify(jsonParseResponseObject.partnerInfo.PartnerType)).to.eql(PartnerType);                           \r",
											"                            pm.expect(jsonParseResponseObject.partnerInfo.PartnerDetail.MerchantContact).to.eql(PartnerDetailMerchantContact);  \r",
											"                            pm.expect(jsonParseResponseObject.partnerInfo.PartnerDetail.CPID).to.eql(PartnerDetailCPID);  \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeSuccess);  \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionUpdatePartner);  \r",
											"\r",
											"\r",
											"                            console.log(\"response.partnerInfo.CustomerId : \" + jsonParseResponseObject.partnerInfo.CustomerId + \" = \" + CustomerId);\r",
											"                            console.log(\"response.partnerInfo.PartnerId : \" + jsonParseResponseObject.partnerInfo.PartnerId + \" = \" + PartnerId);\r",
											"                            console.log(\"response.partnerInfo.PartnerName : \" + jsonParseResponseObject.partnerInfo.PartnerName + \" = \" + PartnerName);  \r",
											"                            console.log(\"response.partnerInfo.PartnerType : \" + JSON.stringify(jsonParseResponseObject.partnerInfo.PartnerType) + \" = \" + PartnerType);                  \r",
											"                            console.log(\"response.partnerInfo.MerchantContact : \" + jsonParseResponseObject.partnerInfo.PartnerDetail.MerchantContact + \" = \" + PartnerDetailMerchantContact); \r",
											"                            console.log(\"response.partnerInfo.CPID : \" + jsonParseResponseObject.partnerInfo.PartnerDetail.CPID + \" = \" + PartnerDetailCPID);\r",
											"                            console.log(\"response.partnerInfo.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeSuccess);\r",
											"                            console.log(\"response.partnerInfo.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionUpdatePartner);\r",
											"\r",
											"\r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// InquiryPartner\r",
											"InquiryPartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptInquiryPartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_InquiryPartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_InquiryPartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestInquiryPartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsInquiryPartner = {\r",
											"            url: url + provisioningapis + urlPartnerInquiryPartner,\r",
											"            method: 'POST',\r",
											"            header: headersOptInquiryPartner,\r",
											"            body: httpRequestInquiryPartner\r",
											"        };\r",
											"\r",
											"        // console.log('request InquiryPartner');\r",
											"        let response = await reqPromise(optionsInquiryPartner);\r",
											"        let jsonDataInquiryPartner = await response.json();\r",
											"        // console.log('jsonDataInquiryPartner : : : ',jsonDataInquiryPartner)\r",
											"    \r",
											"        let operationStatusInquiryPartner = await jsonDataInquiryPartner.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"InquiryPartner : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('InquiryPartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusInquiryPartner).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //InquiryPartner is Success\r",
											"        pm.test('InquiryPartner : OperationStatus Description is '+'\"'+ resultDescriptionInquiryPartner+'\"', function () {\r",
											"            pm.expect(operationStatusInquiryPartner).to.have.property('Description', resultDescriptionInquiryPartner);\r",
											"        });\r",
											"\r",
											"        //Check Data\r",
											"        let PartnerInfo = await jsonDataInquiryPartner.partnerInfo;\r",
											"        // console.log('PartnerInfo : : :',PartnerInfo);\r",
											"        \r",
											"        for(let i=0;i<PartnerInfo.length;i++){\r",
											"            pm.test('Verify DB Check Data : UpdatePartner' , function () {\r",
											"                console.log(\"===============================================================================================================\")    \r",
											"                console.log(\"======== Verify DB Check Data ( Expected = Actual) [UpdatePartner] ==================\");\r",
											"                console.log(\"Code : \" + operationStatusInquiryPartner.Code + \" = \" + resultCodeSuccess);\r",
											"                console.log(\"Description : \" + operationStatusInquiryPartner.Description + \" = \" + resultDescriptionInquiryPartner);\r",
											"                console.log(\"PartnerId : \" + PartnerInfo[i].PartnerId + \" = \" + pm.environment.get(\"GetResponse_PartnerId\"));\r",
											"                console.log(\"PartnerName : \" + PartnerInfo[i].PartnerName + \" = \" + pm.environment.get(\"Value_UpdatePartner_PartnerName\"));\r",
											"                console.log(\"PartnerType : \" +JSON.stringify(PartnerInfo[i].PartnerType) + \" = \" + pm.environment.get(\"Value_UpdatePartner_PartnerType\"));\r",
											"                console.log(\"MerchantContact : \" + PartnerInfo[i].PartnerDetail.MerchantContact + \" = \" + pm.environment.get(\"Value_UpdatePartner_PartnerDetail_MerchantContact\"));\r",
											"                console.log(\"CPID : \" + PartnerInfo[i].PartnerDetail.CPID + \" = \" + pm.environment.get(\"Value_UpdatePartner_PartnerDetail_CPID\"));\r",
											"\r",
											"\r",
											"                pm.expect(operationStatusInquiryPartner.Code).to.eql(resultCodeSuccess);\r",
											"                pm.expect(operationStatusInquiryPartner.Description).to.eql(resultDescriptionInquiryPartner);\r",
											"                pm.expect(PartnerInfo[i].PartnerId).to.eql(pm.environment.get(\"GetResponse_PartnerId\"));\r",
											"                pm.expect(PartnerInfo[i].PartnerName).to.eql(pm.environment.get(\"Value_UpdatePartner_PartnerName\"));\r",
											"                pm.expect(JSON.stringify(PartnerInfo[i].PartnerType)).to.eql(pm.environment.get(\"Value_UpdatePartner_PartnerType\"));\r",
											"                pm.expect(PartnerInfo[i].PartnerDetail.MerchantContact).to.eql(pm.environment.get(\"Value_UpdatePartner_PartnerDetail_MerchantContact\"));\r",
											"                pm.expect(PartnerInfo[i].PartnerDetail.CPID).to.eql(pm.environment.get(\"Value_UpdatePartner_PartnerDetail_CPID\"));\r",
											"            });\r",
											"        }\r",
											"\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"setTimeout(function(){SearchLogFindTid();}, 7000); \r",
											"setTimeout(function(){CheckLog();}, 20000); \r",
											"setTimeout(function(){InquiryPartner();}, 30000); \r",
											"setTimeout(function(){RemovePartner();}, 40000); \r",
											"setTimeout(function(){\r",
											"pm.environment.unset(\"random_number\");\r",
											"pm.environment.unset(\"PartnerName\");\r",
											"pm.environment.unset(\"MerchantContact\");\r",
											"pm.environment.unset(\"CPID\");\r",
											"pm.environment.unset(\"sessionId\");\r",
											"pm.environment.unset(\"current_timestamp\");\r",
											"pm.environment.unset(\"AccessToken\");\r",
											"pm.environment.unset(\"GetResponse_PartnerId\");\r",
											"pm.environment.unset(\"GetResponse_CustomerId\");\r",
											"pm.environment.unset(\"Value_UpdatePartner_PartnerName\");\r",
											"pm.environment.unset(\"Value_UpdatePartner_PartnerType\");\r",
											"pm.environment.unset(\"Value_UpdatePartner_PartnerDetail_MerchantContact\");\r",
											"pm.environment.unset(\"Value_UpdatePartner_PartnerDetail_CPID\");\r",
											"pm.environment.unset(\"tid\");\r",
											"\r",
											"}, 50000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-ais-UserName",
										"type": "text",
										"value": "{{x_ais_UserName_AisPartner}}"
									},
									{
										"key": "x-ais-OrderRef",
										"value": "{{x_ais_OrderRef_UpdatePartner}}{{current_timestamp}}"
									},
									{
										"key": "x-ais-OrderDesc",
										"type": "text",
										"value": "{{x_ais_OrderDesc_UpdatePartner}}"
									},
									{
										"key": "x-ais-AccessToken",
										"value": "{{Bearer}} {{AccessToken}}"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"PartnerId\": \"{{GetResponse_PartnerId}}\",\r\n  \"PartnerName\": \"{{Value_UpdatePartner_PartnerName}}\",\r\n  \"PartnerType\": {{Value_UpdatePartner_PartnerType}},\r\n  \"PartnerDetail\": {\r\n    \"MerchantContact\": \"{{Value_UpdatePartner_PartnerDetail_MerchantContact}}\",\r\n    \"CPID\": \"{{Value_UpdatePartner_PartnerDetail_CPID}}\"\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{url}}{{provisioningapis}}/api/v1/Partner/UpdatePartner",
									"host": [
										"{{url}}{{provisioningapis}}"
									],
									"path": [
										"api",
										"v1",
										"Partner",
										"UpdatePartner"
									]
								},
								"description": "Type:Desire"
							},
							"response": []
						},
						{
							"name": "UpdatePartner_TST_F3_0_2_002_Error_PartnerIdNotFound",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var Username = pm.environment.get(\"Username\");\r",
											"var Password = pm.environment.get(\"Password\");\r",
											"\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"pm.environment.set(\"Value_UpdatePartner_TST_F3_0_2_002_PartnerDetail_PartnerId\",fieldDataValue.Provisioning.Partner.UpdatePartner.Value_UpdatePartner_TST_F3_0_2_002_PartnerDetail_PartnerId)\r",
											"pm.environment.set(\"Value_UpdatePartner_PartnerName\",fieldDataValue.Provisioning.Partner.UpdatePartner.Value_UpdatePartner_PartnerName)\r",
											"pm.environment.set(\"Value_UpdatePartner_PartnerType\",JSON.stringify(fieldDataValue.Provisioning.Partner.UpdatePartner.Value_UpdatePartner_PartnerType))\r",
											"pm.environment.set(\"Value_UpdatePartner_PartnerDetail_MerchantContact\",fieldDataValue.Provisioning.Partner.UpdatePartner.Value_UpdatePartner_PartnerDetail_MerchantContact)\r",
											"pm.environment.set(\"Value_UpdatePartner_PartnerDetail_CPID\",fieldDataValue.Provisioning.Partner.UpdatePartner.Value_UpdatePartner_PartnerDetail_CPID)\r",
											"\r",
											"\r",
											"//format YYYYMMDDHHMMSSS\r",
											"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
											"// console.log('currentTmestamp',currentTmestamp);\r",
											"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- statusCodeList --------------//\r",
											"//set variable to statusCodeList JSON.parse\r",
											"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
											"//set global variable to statusCode 200\r",
											"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
											"//set global variable to statusCode 201\r",
											"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
											"//set global variable to statusCode 404\r",
											"pm.globals.set(\"statusCodeNotFound\", statusCodeList.statusCodeNotFound);\r",
											"\r",
											"//---------------- resultCodeList --------------//\r",
											"//set variable to resultCodeList JSON.parse\r",
											"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
											"//set global variable to resultCode \"20000\"\r",
											"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
											"//set global variable to resultCode \"20100\"\r",
											"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
											"//set global variable to resultCode \"40400\"\r",
											"pm.globals.set(\"resultCodeNotFound\", resultCodeList.resultCodeNotFound);\r",
											"\r",
											"//---------------- resultDescriptionSuccessList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
											"//set global variable to resultDescription \"SignInProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
											"//set global variable to resultDescription \"CreatePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
											"//set global variable to resultDescription \"RemovePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
											"//set global variable to resultDescription \"UpdatePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionUpdatePartner\", resultDescriptionSuccessList.resultDescriptionUpdatePartner);\r",
											"\r",
											"//---------------- resultDescriptionErrorList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
											"//set global variable to resultDescription \"The PartnerId is Not Found\"\r",
											"pm.globals.set(\"resultDescriptionThePartnerIdIsNotFound\", resultDescriptionErrorList.resultDescriptionThePartnerIdIsNotFound);\r",
											"\r",
											"\r",
											"//---------------- HeaderList --------------//\r",
											"//set variable to HeaderList JSON.parse\r",
											"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
											"//---------------- set globals Other --------------//\r",
											"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
											"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
											"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
											"//set global variable to kbn-versio \"7.5.1\"\r",
											"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Signin_ --------------//\r",
											"//set global variable to x_ais_OrderRef \"Signin_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals CreatePartner --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
											"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
											"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
											"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set globals Partner --------------//\r",
											"//set global variable to x_ais_OrderRef \"UpdatePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_UpdatePartner\", HeaderList.Partner.x_ais_OrderRef_UpdatePartner);\r",
											"//set global variable to x_ais_OrderRef \"UpdatePartnerfail_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_UpdatePartner_fail\", HeaderList.Partner.x_ais_OrderRef_UpdatePartner_fail);\r",
											"//set global variable to x_ais_OrderDesc \"UpdatePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UpdatePartner\", HeaderList.Partner.x_ais_OrderDesc_UpdatePartner);\r",
											"//------------------------------------------------------------//\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultCode \"20100\"\r",
											"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
											"//get global variable to resultDescription \"SignInProcess is Success\"\r",
											"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
											"//get global variable to resultDescription \"CreatePartner is Success\"\r",
											"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
											"\r",
											"\r",
											"//---------------- urlRouteList --------------//\r",
											"//set variable to urlRouteList JSON.parse\r",
											"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
											"//---------------- set url Create --------------//\r",
											"//set global variable to url \"/api/v1/auth/signin\"\r",
											"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
											"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
											"\r",
											"//---------------- get url Create --------------//\r",
											"//get global variable to url \"/api/v1/auth/signin\"\r",
											"var urlSignin = pm.globals.get(\"urlSignin\");\r",
											"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
											"\r",
											"//---------------- set url Remove --------------//\r",
											"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
											"\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"Signin_\"\r",
											"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"// Signin get token\r",
											" Signin = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username,\r",
											"                password:Password\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"\r",
											"        //set random_number\r",
											"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
											"        //set PartnerName\r",
											"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
											"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
											"        //set MerchantContact\r",
											"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
											"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
											"        // set CPID\r",
											"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
											"        pm.environment.set(\"CPID\", CPIDValue)\r",
											"        \r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreatePartner\r",
											" CreatePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreatePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreatePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
											"                \"PartnerType\": [\r",
											"                    \"Supplier\",\r",
											"                    \"Customer\"\r",
											"                ],\r",
											"                \"PartnerDetail\": {\r",
											"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
											"                    \"CPID\": pm.environment.get(\"CPID\")\r",
											"                },\r",
											"                \"Property\": {\r",
											"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
											"                }\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsCreatePartner = {\r",
											"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreatePartner,\r",
											"            body: httpRequestCreatePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsCreatePartner);\r",
											"        let jsonDataCreatePartner = await response.json();\r",
											"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
											"    \r",
											"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreatePartner is Success\r",
											"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
											"        });\r",
											"\r",
											"        //GetResponse_PartnerId\r",
											"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
											"\r",
											"        //GetResponse_CustomerId\r",
											"        pm.environment.set(\"GetResponse_CustomerId\", jsonDataCreatePartner.PartnerInfo.CustomerId);\r",
											"        \r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"Signin();\r",
											"setTimeout(async function(){await CreatePartner();}, 5000); \r",
											"setTimeout(async function(){}, 6000);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"UpdatePartner_\"\r",
											"var x_ais_OrderRef_UpdatePartner = pm.globals.get(\"x_ais_OrderRef_UpdatePartner\");\r",
											"//get global variable to x_ais_OrderRef \"UpdatePartnerfail_\"\r",
											"var x_ais_OrderRef_UpdatePartner_fail = pm.globals.get(\"x_ais_OrderRef_UpdatePartner_fail\");\r",
											"//get global variable to x_ais_OrderDesc \"UpdatePartner\"\r",
											"var x_ais_OrderDesc_UpdatePartner = pm.globals.get(\"x_ais_OrderDesc_UpdatePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Remove --------------//\r",
											"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
											"\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultCode \"20100\"\r",
											"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
											"//get global variable to resultDescription \"RemovePartner is Success\"\r",
											"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"//get global variable to statusCode 404\r",
											"var statusCodeNotFound = pm.globals.get(\"statusCodeNotFound\");\r",
											"//get global variable to resultCode \"40400\"\r",
											"var resultCodeNotFound = pm.globals.get(\"resultCodeNotFound\");\r",
											"//get global variable to resultDescription \"The PartnerId is Not Found\"\r",
											"var resultDescriptionThePartnerIdIsNotFound = pm.globals.get(\"resultDescriptionThePartnerIdIsNotFound\");\r",
											"\r",
											"pm.test(\"UpdatePartner : Status code is \" + statusCodeNotFound, function () {\r",
											"    pm.response.to.have.status(statusCodeNotFound);\r",
											"});\r",
											"\r",
											"pm.test('UpdatePartner : operationStatus code is '+'\"'+ resultCodeNotFound +'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeNotFound);\r",
											"});\r",
											"\r",
											"pm.test('UpdatePartner : operationStatus description is '+'\"'+ resultDescriptionThePartnerIdIsNotFound+'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionThePartnerIdIsNotFound);\r",
											"});\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"// RemovePartner\r",
											" RemovePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemovePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemovePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsRemovePartner = {\r",
											"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemovePartner,\r",
											"            body: httpRequestRemovePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request RemovePartner');\r",
											"        let response = await reqPromise(optionsRemovePartner);\r",
											"        let jsonDataRemovePartner = await response.json();\r",
											"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
											"    \r",
											"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemovePartner is Success\r",
											"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"//---------------- LogDefaultValue --------------//\r",
											"//set variable to LogDefaultValue JSON.parse\r",
											"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
											"// console.log('LogDefaultValue',LogDefaultValue);\r",
											"//---------------- set globals Other --------------//\r",
											"\r",
											"var SearchLog = LogDefaultValue.SearchLog;\r",
											"// console.log('SearchLog',SearchLog);\r",
											"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
											"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
											"var kbn_version = SearchLog.header.kbn_version;\r",
											"var authorization = SearchLog.header.Authorization;\r",
											"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
											"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
											"var namespace = LogDefaultValue.Other.namespace;\r",
											"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
											"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
											"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
											"var methodPut = LogDefaultValue.Other.methodPut;\r",
											"\r",
											"// Detail\r",
											"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
											"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
											"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
											"\r",
											"// Summary\r",
											"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
											"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
											"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
											"\r",
											"// ProvisioningAPIs [Partner]\r",
											"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
											"var cmdName = LogDefaultValue.Provisioning.Partner.cmdNameUpdatePartner;\r",
											"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
											"var containerId = LogDefaultValue.Provisioning.containerId;\r",
											"var requestObjectUrlStaging = LogDefaultValue.Provisioning.Partner.requestObjectUrlUpdatePartnerMgStaging;\r",
											"\r",
											"// Check CDR (Summary Log) and EDR (Detail Log)\r",
											"SearchLogFindTid = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSearchLogFindTid = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization' : authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = x_ais_OrderRef_UpdatePartner_fail + current_timestamp;\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestSearchLogFindTid = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"\r",
											"        let optionsSearchLogFindTid = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptSearchLogFindTid,\r",
											"            body: httpRequestSearchLogFindTid\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsSearchLogFindTid);\r",
											"        let jsonDataSearchLogFindTid = await response.json();\r",
											"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
											"\r",
											"        // //200\r",
											"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"\r",
											"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
											"        console.log('hits',hits)\r",
											"  \r",
											"        // find tid\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            // let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"        \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            if(applicationNameValue == applicationName){\r",
											"                let tid = hits[i]._source.cauldron.tid;\r",
											"                pm.environment.set(\"tid\", tid);\r",
											"                break;\r",
											"           }\r",
											"        }\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"CheckLog = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCheckLog = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = pm.environment.get(\"tid\");\r",
											"\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestCheckLog = {\r",
											"            mode: 'raw',\r",
											"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"        let optionsCheckLog = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptCheckLog,\r",
											"            body: httpRequestCheckLog\r",
											"        }; \r",
											"        let response = await reqPromise(optionsCheckLog);\r",
											"        let jsonDataCheckLog = await response.json();\r",
											"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
											"        \r",
											"        // //200\r",
											"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });     \r",
											"        \r",
											"        let hits = jsonDataCheckLog.hits.hits\r",
											"        console.log('hits',hits)\r",
											"  \r",
											"        // find logType\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            //  let logType = hits[i]._source.cauldron.logType\r",
											"            let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"           \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            \r",
											"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
											"            // console.log('resultDataLog',resultDataLog)\r",
											"\r",
											"            let tidControl = x_ais_OrderRef_UpdatePartner_fail + current_timestamp;\r",
											"            // console.log(tidControl);\r",
											"            if(applicationNameValue == applicationName){\r",
											"                 \r",
											"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ProvisioningAPIs\r",
											"                    pm.test(\"Check Summary Log : UpdatePartner\" , function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Summary Log ( Expected = Actual) [UpdatePartner] ==================\");\r",
											"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
											"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
											"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeNotFound);\r",
											"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionThePartnerIdIsNotFound);\r",
											"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
											"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                         // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
											"                        //  console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
											"\r",
											"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
											"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
											"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeNotFound); \r",
											"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionThePartnerIdIsNotFound); \r",
											"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
											"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
											"                        // pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
											"\r",
											"\r",
											"                        // check custom\r",
											"                        // \"custom\":[ { \"no\":\"1\", \"endPointName\":\"db.TenantsCollection\", \"responseStatus\":\"Success:InquiryTenant was successfully.\", \"processTime\":2.0933 } ],\r",
											"\r",
											"                        let custom = resultDataLog.custom.endPointSummary;\r",
											"                        console.log(\"custom : : :\",custom)\r",
											"                        let countCustom = custom.length;\r",
											"\r",
											"                        // [\"db.TenantsCollection\"],\r",
											"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_UpdatePartner_002;\r",
											"                        // // [\"Success:InquiryTenant was successfully.\"]\r",
											"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_UpdatePartner_002;\r",
											"                        let countCustomStep = dataEndPointName.length;\r",
											"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
											"                        for(let i=0;i<countCustomStep;i++){\r",
											"                            let no = custom[i].no;\r",
											"                            let valueEndPointName = custom[i].endPointName;\r",
											"                            let valueResponseStatus = custom[i].responseStatus;\r",
											"                            // console.log(\"i\",i);\r",
											"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
											"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
											"                           \r",
											"                            console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep );\r",
											"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString() );\r",
											"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i] );\r",
											"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i] );\r",
											"                           \r",
											"                            pm.expect(no).to.eql((i+1).toString()); \r",
											"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
											"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]);  \r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"\r",
											"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ProvisioningAPIs\r",
											"\r",
											"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
											"                    // console.log('endPointNameValue ',endPointNameValue)\r",
											"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [UpdatePartner]\", function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Detail Log ( Expected = Actual) [UpdatePartner] ==================\");\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
											"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
											"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
											"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
											"\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
											"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
											"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
											"\r",
											"                        if( endPointNameValue == endPointNameProvisioningAPIs){     //\"endPointName\":\"ProvisioningAPIs\"\r",
											"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs); \r",
											"                        \r",
											"                            // check requestObject\r",
											"                            // \"requestObject\":\"{ \\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Partner/UpdatePartner\\\", \\\"method\\\":\\\"PUT\\\", \\\"headers\\\":{ \\\"x-ais-username\\\":\\\"AisPartner\\\", \\\"x-ais-orderref\\\":\\\"UpdatePartnerfail_202104271504019\\\", \\\"x-ais-orderdesc\\\":\\\"UpdatePartner\\\", \\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAGz3tsie+KV1BVEQt6yJ2nuFVv5oLCCNkSDoYgnNvJATUIlAkkY2KW0\\\" }, \\\"body\\\":{ \\\"PartnerId\\\":\\\"6007a6da61c7bb0001583845\\\", \\\"PartnerName\\\":\\\"QA_Partner0001[ Edit ]\\\", \\\"PartnerType\\\":[ \\\"Supplier\\\", \\\"Customer\\\" ], \\\"PartnerDetail\\\":{ \\\"MerchantContact\\\":\\\"QA_Partner01ud@ais.co.th\\\", \\\"CPID\\\":\\\"QA_Partner01@ais.co.th\\\" } }\r",
											"                            \r",
											"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
											"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
											"                            let url = urlCheckLog + requestObjectUrlStaging;\r",
											"                            let x_ais_orderref = x_ais_OrderRef_UpdatePartner_fail + current_timestamp;\r",
											"                            let x_ais_orderdesc = x_ais_OrderDesc_UpdatePartner;\r",
											"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken\");\r",
											"                            let PartnerId = pm.environment.get(\"Value_UpdatePartner_TST_F3_0_2_002_PartnerDetail_PartnerId\");\r",
											"                            let PartnerName = pm.environment.get(\"Value_UpdatePartner_PartnerName\");\r",
											"                            let PartnerType = pm.environment.get(\"Value_UpdatePartner_PartnerType\");\r",
											"                            let PartnerDetailMerchantContact = pm.environment.get(\"Value_UpdatePartner_PartnerDetail_MerchantContact\");\r",
											"                            let PartnerDetailCPID = pm.environment.get(\"Value_UpdatePartner_PartnerDetail_CPID\");\r",
											"\r",
											"\r",
											"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
											"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPut);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerId).to.eql(PartnerId);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerName).to.eql(PartnerName);\r",
											"                            pm.expect(JSON.stringify(jsonParseRequestObject.body.PartnerType)).to.eql(PartnerType);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerDetail.MerchantContact).to.eql(PartnerDetailMerchantContact);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerDetail.CPID).to.eql(PartnerDetailCPID);\r",
											"\r",
											"\r",
											"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
											"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPut);\r",
											"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
											"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
											"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
											"                            console.log(\"resquest.body.PartnerId : \" + jsonParseRequestObject.body.PartnerId + \" = \" + PartnerId);\r",
											"                            console.log(\"resquest.body.PartnerName : \" + jsonParseRequestObject.body.PartnerName + \" = \" + PartnerName);\r",
											"                            console.log(\"resquest.body.PartnerType : \" + JSON.stringify(jsonParseRequestObject.body.PartnerType) + \" = \" + PartnerType);\r",
											"                            console.log(\"resquest.body.MerchantContact : \" + jsonParseRequestObject.body.PartnerDetail.MerchantContact + \" = \" + PartnerDetailMerchantContact);\r",
											"                            console.log(\"resquest.body.CPID : \" + jsonParseRequestObject.body.PartnerDetail.CPID + \" = \" + PartnerDetailCPID);\r",
											"\r",
											"                            \r",
											"                            // check responseObject\r",
											"                            // \"responseObject\":\"{ \\\"OperationStatus\\\":{ \\\"Code\\\":\\\"40400\\\", \\\"Description\\\":\\\"The PartnerId is Not Found\\\" }\r",
											"\r",
											"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
											"                            // console.log('jsonParseResponseObject',jsonParseResponseObject);\r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeNotFound);  \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionThePartnerIdIsNotFound);  \r",
											"\r",
											"                            console.log(\"response.partnerInfo.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeNotFound);\r",
											"                            console.log(\"response.partnerInfo.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionThePartnerIdIsNotFound);\r",
											"\r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"setTimeout(function(){SearchLogFindTid();}, 30000); \r",
											"setTimeout(function(){CheckLog();}, 40000); \r",
											"setTimeout(function(){RemovePartner();}, 50000); \r",
											"\r",
											"setTimeout(function(){\r",
											"pm.environment.unset(\"random_number\");\r",
											"pm.environment.unset(\"PartnerName\");\r",
											"pm.environment.unset(\"MerchantContact\");\r",
											"pm.environment.unset(\"CPID\");\r",
											"pm.environment.unset(\"sessionId\");\r",
											"pm.environment.unset(\"current_timestamp\");\r",
											"pm.environment.unset(\"AccessToken\");\r",
											"pm.environment.unset(\"GetResponse_PartnerId\");\r",
											"pm.environment.unset(\"GetResponse_CustomerId\");\r",
											"pm.environment.unset(\"Value_UpdatePartner_TST_F3_0_2_003_PartnerDetail_PartnerId\");\r",
											"pm.environment.unset(\"Value_UpdatePartner_PartnerName\");\r",
											"pm.environment.unset(\"Value_UpdatePartner_PartnerType\");\r",
											"pm.environment.unset(\"Value_UpdatePartner_PartnerDetail_MerchantContact\");\r",
											"pm.environment.unset(\"Value_UpdatePartner_PartnerDetail_CPID\");\r",
											"pm.environment.unset(\"Value_UpdatePartner_TST_F3_0_2_002_PartnerDetail_PartnerId\");\r",
											"pm.environment.unset(\"tid\");\r",
											"\r",
											"}, 60000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-ais-UserName",
										"type": "text",
										"value": "{{x_ais_UserName_AisPartner}}"
									},
									{
										"key": "x-ais-OrderRef",
										"value": "{{x_ais_OrderRef_UpdatePartner_fail}}{{current_timestamp}}"
									},
									{
										"key": "x-ais-OrderDesc",
										"type": "text",
										"value": "{{x_ais_OrderDesc_UpdatePartner}}"
									},
									{
										"key": "x-ais-AccessToken",
										"value": "{{Bearer}} {{AccessToken}}"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"PartnerId\": \"{{Value_UpdatePartner_TST_F3_0_2_002_PartnerDetail_PartnerId}}\",\r\n  \"PartnerName\": \"{{Value_UpdatePartner_PartnerName}}\",\r\n  \"PartnerType\": {{Value_UpdatePartner_PartnerType}},\r\n  \"PartnerDetail\": {\r\n    \"MerchantContact\": \"{{Value_UpdatePartner_PartnerDetail_MerchantContact}}\",\r\n    \"CPID\": \"{{Value_UpdatePartner_PartnerDetail_CPID}}\"\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{url}}{{provisioningapis}}/api/v1/Partner/UpdatePartner",
									"host": [
										"{{url}}{{provisioningapis}}"
									],
									"path": [
										"api",
										"v1",
										"Partner",
										"UpdatePartner"
									]
								},
								"description": "Type:Desire"
							},
							"response": []
						},
						{
							"name": "UpdatePartner_TST_F3_0_2_003_Error_PartnerTypeIsRequired",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var Username = pm.environment.get(\"Username\");\r",
											"var Password = pm.environment.get(\"Password\");\r",
											"\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"pm.environment.set(\"Value_UpdatePartner_PartnerName\",fieldDataValue.Provisioning.Partner.UpdatePartner.Value_UpdatePartner_PartnerName)\r",
											"pm.environment.set(\"Value_UpdatePartner_PartnerType\",JSON.stringify(fieldDataValue.Provisioning.Partner.UpdatePartner.Value_UpdatePartner_PartnerType))\r",
											"pm.environment.set(\"Value_UpdatePartner_PartnerDetail_MerchantContact\",fieldDataValue.Provisioning.Partner.UpdatePartner.Value_UpdatePartner_PartnerDetail_MerchantContact)\r",
											"pm.environment.set(\"Value_UpdatePartner_PartnerDetail_CPID\",fieldDataValue.Provisioning.Partner.UpdatePartner.Value_UpdatePartner_PartnerDetail_CPID)\r",
											"pm.environment.set(\"Value_UpdatePartner_TST_F3_0_2_003_PartnerDetail_PartnerId\",fieldDataValue.Provisioning.Partner.UpdatePartner.Value_UpdatePartner_TST_F3_0_2_003_PartnerDetail_PartnerId)\r",
											"\r",
											"\r",
											"//format YYYYMMDDHHMMSSS\r",
											"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
											"// console.log('currentTmestamp',currentTmestamp);\r",
											"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- statusCodeList --------------//\r",
											"//set variable to statusCodeList JSON.parse\r",
											"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
											"//set global variable to statusCode 200\r",
											"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
											"//set global variable to statusCode 201\r",
											"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
											"//set global variable to statusCode 403\r",
											"pm.globals.set(\"statusCodeForbidden\", statusCodeList.statusCodeForbidden);\r",
											"\r",
											"//---------------- resultCodeList --------------//\r",
											"//set variable to resultCodeList JSON.parse\r",
											"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
											"//set global variable to resultCode \"20000\"\r",
											"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
											"//set global variable to resultCode \"20100\"\r",
											"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
											"//set global variable to resultCode \"40300\"\r",
											"pm.globals.set(\"resultCodeForbiddenMissingOrInvalidParameter\", resultCodeList.resultCodeForbiddenMissingOrInvalidParameter);\r",
											"\r",
											"//---------------- resultDescriptionSuccessList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
											"//set global variable to resultDescription \"SignInProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
											"//set global variable to resultDescription \"CreatePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
											"//set global variable to resultDescription \"RemovePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
											"\r",
											"\r",
											"//---------------- resultDescriptionErrorList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
											"//set global variable to resultDescription \"The PartnerId field is not Object Id.\"\r",
											"pm.globals.set(\"resultDescriptionThePartnerIdFieldIsNotObjectId\", resultDescriptionErrorList.resultDescriptionThePartnerIdFieldIsNotObjectId);\r",
											"\r",
											"\r",
											"//---------------- HeaderList --------------//\r",
											"//set variable to HeaderList JSON.parse\r",
											"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
											"//---------------- set globals Other --------------//\r",
											"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
											"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
											"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
											"//set global variable to kbn-versio \"7.5.1\"\r",
											"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Signin_ --------------//\r",
											"//set global variable to x_ais_OrderRef \"Signin_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals CreatePartner --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
											"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
											"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
											"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set globals Partner --------------//\r",
											"//set global variable to x_ais_OrderRef \"UpdatePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_UpdatePartner\", HeaderList.Partner.x_ais_OrderRef_UpdatePartner);\r",
											"//set global variable to x_ais_OrderRef \"UpdatePartnerfail_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_UpdatePartner_fail\", HeaderList.Partner.x_ais_OrderRef_UpdatePartner_fail);\r",
											"//set global variable to x_ais_OrderDesc \"UpdatePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UpdatePartner\", HeaderList.Partner.x_ais_OrderDesc_UpdatePartner);\r",
											"//------------------------------------------------------------//\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultCode \"20100\"\r",
											"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
											"//get global variable to resultDescription \"SignInProcess is Success\"\r",
											"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
											"//get global variable to resultDescription \"CreatePartner is Success\"\r",
											"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
											"\r",
											"\r",
											"//---------------- urlRouteList --------------//\r",
											"//set variable to urlRouteList JSON.parse\r",
											"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
											"//---------------- set url Create --------------//\r",
											"//set global variable to url \"/api/v1/auth/signin\"\r",
											"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
											"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
											"\r",
											"//---------------- get url Create --------------//\r",
											"//get global variable to url \"/api/v1/auth/signin\"\r",
											"var urlSignin = pm.globals.get(\"urlSignin\");\r",
											"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
											"\r",
											"//---------------- set url Remove --------------//\r",
											"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
											"\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"Signin_\"\r",
											"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"// Signin get token\r",
											" Signin = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username,\r",
											"                password:Password\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"\r",
											"        //set random_number\r",
											"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
											"        //set PartnerName\r",
											"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
											"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
											"        //set MerchantContact\r",
											"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
											"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
											"        // set CPID\r",
											"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
											"        pm.environment.set(\"CPID\", CPIDValue)\r",
											"        \r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreatePartner\r",
											" CreatePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreatePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreatePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
											"                \"PartnerType\": [\r",
											"                    \"Supplier\",\r",
											"                    \"Customer\"\r",
											"                ],\r",
											"                \"PartnerDetail\": {\r",
											"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
											"                    \"CPID\": pm.environment.get(\"CPID\")\r",
											"                },\r",
											"                \"Property\": {\r",
											"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
											"                }\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsCreatePartner = {\r",
											"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreatePartner,\r",
											"            body: httpRequestCreatePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsCreatePartner);\r",
											"        let jsonDataCreatePartner = await response.json();\r",
											"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
											"    \r",
											"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreatePartner is Success\r",
											"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
											"        });\r",
											"\r",
											"        //GetResponse_PartnerId\r",
											"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
											"\r",
											"        //GetResponse_CustomerId\r",
											"        pm.environment.set(\"GetResponse_CustomerId\", jsonDataCreatePartner.PartnerInfo.CustomerId);\r",
											"        \r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"Signin();\r",
											"setTimeout(async function(){await CreatePartner();}, 5000); \r",
											"setTimeout(async function(){}, 6000);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"UpdatePartner_\"\r",
											"var x_ais_OrderRef_UpdatePartner = pm.globals.get(\"x_ais_OrderRef_UpdatePartner\");\r",
											"//get global variable to x_ais_OrderRef \"UpdatePartnerfail_\"\r",
											"var x_ais_OrderRef_UpdatePartner_fail = pm.globals.get(\"x_ais_OrderRef_UpdatePartner_fail\");\r",
											"//get global variable to x_ais_OrderDesc \"UpdatePartner\"\r",
											"var x_ais_OrderDesc_UpdatePartner = pm.globals.get(\"x_ais_OrderDesc_UpdatePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Remove --------------//\r",
											"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
											"\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultCode \"20100\"\r",
											"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
											"//get global variable to resultDescription \"RemovePartner is Success\"\r",
											"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"//get global variable to statusCode 403\r",
											"var statusCodeForbidden = pm.globals.get(\"statusCodeForbidden\");\r",
											"//get global variable to resultCode \"40300\"\r",
											"var resultCodeForbiddenMissingOrInvalidParameter = pm.globals.get(\"resultCodeForbiddenMissingOrInvalidParameter\");\r",
											"//get global variable to resultDescription \"The PartnerId field is not Object Id.\"\r",
											"var resultDescriptionThePartnerIdFieldIsNotObjectId = pm.globals.get(\"resultDescriptionThePartnerIdFieldIsNotObjectId\");\r",
											"\r",
											"pm.test(\"UpdatePartner : Status code is \" + statusCodeForbidden, function () {\r",
											"    pm.response.to.have.status(statusCodeForbidden);\r",
											"});\r",
											"\r",
											"pm.test('UpdatePartner : operationStatus code is '+'\"'+ resultCodeForbiddenMissingOrInvalidParameter +'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeForbiddenMissingOrInvalidParameter);\r",
											"});\r",
											"\r",
											"pm.test('UpdatePartner : operationStatus description is '+'\"'+ resultDescriptionThePartnerIdFieldIsNotObjectId+'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionThePartnerIdFieldIsNotObjectId);\r",
											"});\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"// RemovePartner\r",
											" RemovePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemovePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemovePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsRemovePartner = {\r",
											"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemovePartner,\r",
											"            body: httpRequestRemovePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request RemovePartner');\r",
											"        let response = await reqPromise(optionsRemovePartner);\r",
											"        let jsonDataRemovePartner = await response.json();\r",
											"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
											"    \r",
											"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemovePartner is Success\r",
											"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"//---------------- LogDefaultValue --------------//\r",
											"//set variable to LogDefaultValue JSON.parse\r",
											"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
											"// console.log('LogDefaultValue',LogDefaultValue);\r",
											"//---------------- set globals Other --------------//\r",
											"\r",
											"var SearchLog = LogDefaultValue.SearchLog;\r",
											"// console.log('SearchLog',SearchLog);\r",
											"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
											"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
											"var kbn_version = SearchLog.header.kbn_version;\r",
											"var authorization = SearchLog.header.Authorization;\r",
											"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
											"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
											"var namespace = LogDefaultValue.Other.namespace;\r",
											"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
											"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
											"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
											"var methodPut = LogDefaultValue.Other.methodPut;\r",
											"\r",
											"// Detail\r",
											"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
											"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
											"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
											"\r",
											"// Summary\r",
											"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
											"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
											"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
											"\r",
											"// ProvisioningAPIs [Partner]\r",
											"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
											"var cmdName = LogDefaultValue.Provisioning.Partner.cmdNameUpdatePartner;\r",
											"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
											"var containerId = LogDefaultValue.Provisioning.containerId;\r",
											"var requestObjectUrlStaging = LogDefaultValue.Provisioning.Partner.requestObjectUrlUpdatePartnerMgStaging;\r",
											"\r",
											"// Check CDR (Summary Log) and EDR (Detail Log)\r",
											"SearchLogFindTid = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSearchLogFindTid = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization' : authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = x_ais_OrderRef_UpdatePartner_fail + current_timestamp;\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestSearchLogFindTid = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"\r",
											"        let optionsSearchLogFindTid = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptSearchLogFindTid,\r",
											"            body: httpRequestSearchLogFindTid\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsSearchLogFindTid);\r",
											"        let jsonDataSearchLogFindTid = await response.json();\r",
											"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
											"\r",
											"        // //200\r",
											"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"\r",
											"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
											"        console.log('hits',hits)\r",
											"  \r",
											"        // find tid\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            // let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"        \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            if(applicationNameValue == applicationName){\r",
											"                let tid = hits[i]._source.cauldron.tid;\r",
											"                pm.environment.set(\"tid\", tid);\r",
											"                break;\r",
											"           }\r",
											"        }\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"CheckLog = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCheckLog = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = pm.environment.get(\"tid\");\r",
											"\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestCheckLog = {\r",
											"            mode: 'raw',\r",
											"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"        let optionsCheckLog = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptCheckLog,\r",
											"            body: httpRequestCheckLog\r",
											"        }; \r",
											"        let response = await reqPromise(optionsCheckLog);\r",
											"        let jsonDataCheckLog = await response.json();\r",
											"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
											"        \r",
											"        // //200\r",
											"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });     \r",
											"        \r",
											"        let hits = jsonDataCheckLog.hits.hits\r",
											"        console.log('hits',hits)\r",
											"  \r",
											"        // find logType\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            //  let logType = hits[i]._source.cauldron.logType\r",
											"            let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"           \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            \r",
											"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
											"            // console.log('resultDataLog',resultDataLog)\r",
											"\r",
											"            let tidControl = x_ais_OrderRef_UpdatePartner_fail + current_timestamp;\r",
											"            // console.log(tidControl);\r",
											"            if(applicationNameValue == applicationName){\r",
											"                 \r",
											"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ProvisioningAPIs\r",
											"                    pm.test(\"Check Summary Log : UpdatePartner\" , function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Summary Log ( Expected = Actual) [UpdatePartner] ==================\");\r",
											"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
											"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
											"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeForbiddenMissingOrInvalidParameter);\r",
											"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionThePartnerIdFieldIsNotObjectId);\r",
											"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
											"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                         // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
											"                        console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
											"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
											"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeForbiddenMissingOrInvalidParameter); \r",
											"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionThePartnerIdFieldIsNotObjectId); \r",
											"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
											"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
											"                        pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
											"\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"\r",
											"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ProvisioningAPIs\r",
											"\r",
											"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
											"                    // console.log('endPointNameValue ',endPointNameValue)\r",
											"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [UpdatePartner]\", function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Detail Log ( Expected = Actual) [UpdatePartner] ==================\");\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
											"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
											"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
											"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
											"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
											"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
											"\r",
											"                        if( endPointNameValue == endPointNameProvisioningAPIs){     //\"endPointName\":\"ProvisioningAPIs\"\r",
											"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs); \r",
											"                        \r",
											"                            // check requestObject\r",
											"                            // requestObject\":\"{ \\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Partner/UpdatePartner\\\", \\\"method\\\":\\\"PUT\\\", \\\"headers\\\":{ \\\"x-ais-username\\\":\\\"AisPartner\\\", \\\"x-ais-orderref\\\":\\\"UpdatePartnerfail_202104271604358\\\", \\\"x-ais-orderdesc\\\":\\\"UpdatePartner\\\", \\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAGz3tsie+KV1AqSOnHhk7bH+/MUeQqPselw3oHSFyFWX0IlAkkY2KW0\\\" }, \\\"body\\\":{ \\\"PartnerId\\\":\\\"6087dc13e14c9c00013811f0xx\\\", \\\"PartnerName\\\":\\\"QA_Partner0001[ Edit ]\\\", \\\"PartnerType\\\":[ \\\"Supplier\\\", \\\"Customer\\\" ], \\\"PartnerDetail\\\":{ \\\"MerchantContact\\\":\\\"QA_Partner01ud@ais.co.th\\\", \\\"CPID\\\":\\\"QA_Partner01@ais.co.th\\\" } }\r",
											"                            \r",
											"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
											"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
											"                            let url = urlCheckLog + requestObjectUrlStaging;\r",
											"                            let x_ais_orderref = x_ais_OrderRef_UpdatePartner_fail + current_timestamp;\r",
											"                            let x_ais_orderdesc = x_ais_OrderDesc_UpdatePartner;\r",
											"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken\");\r",
											"                            let PartnerId = pm.environment.get(\"GetResponse_PartnerId\")+pm.environment.get(\"Value_UpdatePartner_TST_F3_0_2_003_PartnerDetail_PartnerId\");\r",
											"                            let PartnerName = pm.environment.get(\"Value_UpdatePartner_PartnerName\");\r",
											"                            let PartnerType = pm.environment.get(\"Value_UpdatePartner_PartnerType\");\r",
											"                            let PartnerDetailMerchantContact = pm.environment.get(\"Value_UpdatePartner_PartnerDetail_MerchantContact\");\r",
											"                            let PartnerDetailCPID = pm.environment.get(\"Value_UpdatePartner_PartnerDetail_CPID\");\r",
											"\r",
											"\r",
											"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
											"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPut);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerId).to.eql(PartnerId);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerName).to.eql(PartnerName);\r",
											"                            pm.expect(JSON.stringify(jsonParseRequestObject.body.PartnerType)).to.eql(PartnerType);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerDetail.MerchantContact).to.eql(PartnerDetailMerchantContact);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerDetail.CPID).to.eql(PartnerDetailCPID);\r",
											"\r",
											"\r",
											"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
											"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPut);\r",
											"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
											"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
											"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
											"                            console.log(\"resquest.body.PartnerId : \" + jsonParseRequestObject.body.PartnerId + \" = \" + PartnerId);\r",
											"                            console.log(\"resquest.body.PartnerName : \" + jsonParseRequestObject.body.PartnerName + \" = \" + PartnerName);\r",
											"                            console.log(\"resquest.body.PartnerType : \" + JSON.stringify(jsonParseRequestObject.body.PartnerType) + \" = \" + PartnerType);\r",
											"                            console.log(\"resquest.body.MerchantContact : \" + jsonParseRequestObject.body.PartnerDetail.MerchantContact + \" = \" + PartnerDetailMerchantContact);\r",
											"                            console.log(\"resquest.body.CPID : \" + jsonParseRequestObject.body.PartnerDetail.CPID + \" = \" + PartnerDetailCPID);\r",
											"\r",
											"                            \r",
											"                            // check responseObject\r",
											"                            // \"responseObject\":\"{ \\\"OperationStatus\\\":{ \\\"Code\\\":\\\"40300\\\", \\\"Description\\\":\\\"The PartnerId field is not Object Id.\\\" }\r",
											"\r",
											"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
											"                            // console.log('jsonParseResponseObject',jsonParseResponseObject);\r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeForbiddenMissingOrInvalidParameter);  \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionThePartnerIdFieldIsNotObjectId);  \r",
											"\r",
											"\r",
											"                            console.log(\"response.partnerInfo.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeForbiddenMissingOrInvalidParameter);\r",
											"                            console.log(\"response.partnerInfo.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionThePartnerIdFieldIsNotObjectId);\r",
											"\r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"setTimeout(function(){SearchLogFindTid();}, 8000); \r",
											"setTimeout(function(){CheckLog();}, 12000); \r",
											"setTimeout(function(){RemovePartner();}, 25000); \r",
											"\r",
											"setTimeout(function(){\r",
											"pm.environment.unset(\"random_number\");\r",
											"pm.environment.unset(\"PartnerName\");\r",
											"pm.environment.unset(\"MerchantContact\");\r",
											"pm.environment.unset(\"CPID\");\r",
											"pm.environment.unset(\"sessionId\");\r",
											"pm.environment.unset(\"current_timestamp\");\r",
											"pm.environment.unset(\"AccessToken\");\r",
											"pm.environment.unset(\"GetResponse_PartnerId\");\r",
											"pm.environment.unset(\"GetResponse_CustomerId\");\r",
											"pm.environment.unset(\"Value_UpdatePartner_PartnerName\");\r",
											"pm.environment.unset(\"Value_UpdatePartner_PartnerType\");\r",
											"pm.environment.unset(\"Value_UpdatePartner_PartnerDetail_MerchantContact\");\r",
											"pm.environment.unset(\"Value_UpdatePartner_PartnerDetail_CPID\");\r",
											"}, 90000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-ais-UserName",
										"type": "text",
										"value": "{{x_ais_UserName_AisPartner}}"
									},
									{
										"key": "x-ais-OrderRef",
										"value": "{{x_ais_OrderRef_UpdatePartner_fail}}{{current_timestamp}}"
									},
									{
										"key": "x-ais-OrderDesc",
										"type": "text",
										"value": "{{x_ais_OrderDesc_UpdatePartner}}"
									},
									{
										"key": "x-ais-AccessToken",
										"value": "{{Bearer}} {{AccessToken}}"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"PartnerId\": \"{{GetResponse_PartnerId}}{{Value_UpdatePartner_TST_F3_0_2_003_PartnerDetail_PartnerId}}\",\r\n  \"PartnerName\": \"{{Value_UpdatePartner_PartnerName}}\",\r\n  \"PartnerType\": {{Value_UpdatePartner_PartnerType}},\r\n  \"PartnerDetail\": {\r\n    \"MerchantContact\": \"{{Value_UpdatePartner_PartnerDetail_MerchantContact}}\",\r\n    \"CPID\": \"{{Value_UpdatePartner_PartnerDetail_CPID}}\"\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{url}}{{provisioningapis}}/api/v1/Partner/UpdatePartner",
									"host": [
										"{{url}}{{provisioningapis}}"
									],
									"path": [
										"api",
										"v1",
										"Partner",
										"UpdatePartner"
									]
								},
								"description": "Type:Desire"
							},
							"response": []
						},
						{
							"name": "UpdatePartner_TST_F3_0_2_004_Error_PartnerNameAlreadyExisted",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var Username = pm.environment.get(\"Username\");\r",
											"var Password = pm.environment.get(\"Password\");\r",
											"\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"\r",
											"pm.environment.set(\"Value_UpdatePartner_PartnerType\",JSON.stringify(fieldDataValue.Provisioning.Partner.UpdatePartner.Value_UpdatePartner_PartnerType))\r",
											"pm.environment.set(\"Value_UpdatePartner_PartnerDetail_MerchantContact\",fieldDataValue.Provisioning.Partner.UpdatePartner.Value_UpdatePartner_PartnerDetail_MerchantContact)\r",
											"pm.environment.set(\"Value_UpdatePartner_PartnerDetail_CPID\",fieldDataValue.Provisioning.Partner.UpdatePartner.Value_UpdatePartner_PartnerDetail_CPID)\r",
											"\r",
											"//format YYYYMMDDHHMMSSS\r",
											"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
											"// console.log('currentTmestamp',currentTmestamp);\r",
											"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- statusCodeList --------------//\r",
											"//set variable to statusCodeList JSON.parse\r",
											"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
											"//set global variable to statusCode 200\r",
											"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
											"//set global variable to statusCode 201\r",
											"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
											"//set global variable to statusCode 403\r",
											"pm.globals.set(\"statusCodeForbidden\", statusCodeList.statusCodeForbidden);\r",
											"\r",
											"//---------------- resultCodeList --------------//\r",
											"//set variable to resultCodeList JSON.parse\r",
											"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
											"//set global variable to resultCode \"20000\"\r",
											"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
											"//set global variable to resultCode \"20100\"\r",
											"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
											"//set global variable to resultCode \"40301\"\r",
											"pm.globals.set(\"resultCodeTheClientRequestedAlreadyExists\", resultCodeList.resultCodeTheClientRequestedAlreadyExists);\r",
											"\r",
											"//---------------- resultDescriptionSuccessList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
											"//set global variable to resultDescription \"SignInProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
											"//set global variable to resultDescription \"CreatePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
											"//set global variable to resultDescription \"RemovePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
											"//set global variable to resultDescription \"UpdatePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionUpdatePartner\", resultDescriptionSuccessList.resultDescriptionUpdatePartner);\r",
											"\r",
											"//---------------- resultDescriptionErrorList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
											"//set global variable to resultDescription \"The PartnerName is Already Existed.\"\r",
											"pm.globals.set(\"resultDescriptionThePartnerNameIsAlreadyExisted\", resultDescriptionErrorList.resultDescriptionThePartnerNameIsAlreadyExisted);\r",
											"\r",
											"\r",
											"//---------------- HeaderList --------------//\r",
											"//set variable to HeaderList JSON.parse\r",
											"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
											"//---------------- set globals Other --------------//\r",
											"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
											"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
											"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
											"//set global variable to kbn-versio \"7.5.1\"\r",
											"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Signin_ --------------//\r",
											"//set global variable to x_ais_OrderRef \"Signin_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals CreatePartner --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
											"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
											"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
											"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set globals Partner --------------//\r",
											"//set global variable to x_ais_OrderRef \"UpdatePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_UpdatePartner\", HeaderList.Partner.x_ais_OrderRef_UpdatePartner);\r",
											"//set global variable to x_ais_OrderRef \"UpdatePartnerfail_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_UpdatePartner_fail\", HeaderList.Partner.x_ais_OrderRef_UpdatePartner_fail);\r",
											"//set global variable to x_ais_OrderDesc \"UpdatePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UpdatePartner\", HeaderList.Partner.x_ais_OrderDesc_UpdatePartner);\r",
											"//------------------------------------------------------------//\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultCode \"20100\"\r",
											"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
											"//get global variable to resultDescription \"SignInProcess is Success\"\r",
											"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
											"//get global variable to resultDescription \"CreatePartner is Success\"\r",
											"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
											"\r",
											"//---------------- urlRouteList --------------//\r",
											"//set variable to urlRouteList JSON.parse\r",
											"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
											"//---------------- set url Create --------------//\r",
											"//set global variable to url \"/api/v1/auth/signin\"\r",
											"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
											"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
											"\r",
											"//---------------- get url Create --------------//\r",
											"//get global variable to url \"/api/v1/auth/signin\"\r",
											"var urlSignin = pm.globals.get(\"urlSignin\");\r",
											"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
											"\r",
											"//---------------- set url Remove --------------//\r",
											"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"Signin_\"\r",
											"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"// Signin get token\r",
											" Signin = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username,\r",
											"                password:Password\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"\r",
											"        //set random_number\r",
											"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
											"        //set PartnerName\r",
											"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
											"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
											"        //set MerchantContact\r",
											"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
											"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
											"        // set CPID\r",
											"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
											"        pm.environment.set(\"CPID\", CPIDValue)\r",
											"        \r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreatePartner\r",
											" CreatePartner1 = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreatePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreatePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
											"                \"PartnerType\": [\r",
											"                    \"Supplier\",\r",
											"                    \"Customer\"\r",
											"                ],\r",
											"                \"PartnerDetail\": {\r",
											"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
											"                    \"CPID\": pm.environment.get(\"CPID\")\r",
											"                },\r",
											"                \"Property\": {\r",
											"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
											"                }\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsCreatePartner = {\r",
											"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreatePartner,\r",
											"            body: httpRequestCreatePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsCreatePartner);\r",
											"        let jsonDataCreatePartner = await response.json();\r",
											"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
											"    \r",
											"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreatePartner is Success\r",
											"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
											"        });\r",
											"\r",
											"        //GetResponse_PartnerId\r",
											"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
											"\r",
											"        //GetResponse_CustomerId\r",
											"        pm.environment.set(\"GetResponse_CustomerId\", jsonDataCreatePartner.PartnerInfo.CustomerId);\r",
											"        \r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreatePartner\r",
											" CreatePartner2 = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreatePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreatePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerName\": pm.environment.get(\"PartnerName\")+2,\r",
											"                \"PartnerType\": [\r",
											"                    \"Supplier\",\r",
											"                    \"Customer\"\r",
											"                ],\r",
											"                \"PartnerDetail\": {\r",
											"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
											"                    \"CPID\": pm.environment.get(\"CPID\")\r",
											"                },\r",
											"                \"Property\": {\r",
											"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
											"                }\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsCreatePartner = {\r",
											"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreatePartner,\r",
											"            body: httpRequestCreatePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsCreatePartner);\r",
											"        let jsonDataCreatePartner = await response.json();\r",
											"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
											"    \r",
											"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreatePartner is Success\r",
											"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
											"        });\r",
											"\r",
											"        //GetResponse_PartnerId\r",
											"        pm.environment.set(\"GetResponse_PartnerId_2\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
											"\r",
											"        //GetResponse_CustomerId\r",
											"        pm.environment.set(\"GetResponse_CustomerId\", jsonDataCreatePartner.PartnerInfo.CustomerId);\r",
											"        \r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"Signin();\r",
											"setTimeout(async function(){await CreatePartner1();}, 5000); \r",
											"setTimeout(async function(){await CreatePartner2();}, 6000); \r",
											"setTimeout(async function(){}, 7000);\r",
											"setTimeout(function(){}, 8000);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"UpdatePartner_\"\r",
											"var x_ais_OrderRef_UpdatePartner = pm.globals.get(\"x_ais_OrderRef_UpdatePartner\");\r",
											"//get global variable to x_ais_OrderRef \"UpdatePartnerfail_\"\r",
											"var x_ais_OrderRef_UpdatePartner_fail = pm.globals.get(\"x_ais_OrderRef_UpdatePartner_fail\");\r",
											"//get global variable to x_ais_OrderDesc \"UpdatePartner\"\r",
											"var x_ais_OrderDesc_UpdatePartner = pm.globals.get(\"x_ais_OrderDesc_UpdatePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Remove --------------//\r",
											"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
											"\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultCode \"20100\"\r",
											"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
											"//get global variable to resultDescription \"RemovePartner is Success\"\r",
											"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"//get global variable to statusCode 403\r",
											"var statusCodeForbidden = pm.globals.get(\"statusCodeForbidden\");\r",
											"//get global variable to resultCode \"40301\"\r",
											"var resultCodeTheClientRequestedAlreadyExists = pm.globals.get(\"resultCodeTheClientRequestedAlreadyExists\");\r",
											"//get global variable to resultDescription \"The PartnerName is Already Existed.\"\r",
											"var resultDescriptionThePartnerNameIsAlreadyExisted = pm.globals.get(\"resultDescriptionThePartnerNameIsAlreadyExisted\");\r",
											"\r",
											"pm.test(\"UpdatePartner : Status code is \" + statusCodeForbidden, function () {\r",
											"    pm.response.to.have.status(statusCodeForbidden);\r",
											"});\r",
											"\r",
											"pm.test('UpdatePartner : operationStatus code is '+'\"'+ resultCodeTheClientRequestedAlreadyExists +'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeTheClientRequestedAlreadyExists);\r",
											"});\r",
											"\r",
											"pm.test('UpdatePartner : operationStatus description is '+'\"'+ resultDescriptionThePartnerNameIsAlreadyExisted+'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionThePartnerNameIsAlreadyExisted);\r",
											"});\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"// RemovePartner\r",
											" RemovePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemovePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemovePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsRemovePartner = {\r",
											"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemovePartner,\r",
											"            body: httpRequestRemovePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request RemovePartner');\r",
											"        let response = await reqPromise(optionsRemovePartner);\r",
											"        let jsonDataRemovePartner = await response.json();\r",
											"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
											"    \r",
											"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemovePartner is Success\r",
											"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"//---------------- LogDefaultValue --------------//\r",
											"//set variable to LogDefaultValue JSON.parse\r",
											"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
											"// console.log('LogDefaultValue',LogDefaultValue);\r",
											"//---------------- set globals Other --------------//\r",
											"\r",
											"var SearchLog = LogDefaultValue.SearchLog;\r",
											"// console.log('SearchLog',SearchLog);\r",
											"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
											"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
											"var kbn_version = SearchLog.header.kbn_version;\r",
											"var authorization = SearchLog.header.Authorization;\r",
											"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
											"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
											"var namespace = LogDefaultValue.Other.namespace;\r",
											"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
											"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
											"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
											"var methodPut = LogDefaultValue.Other.methodPut;\r",
											"\r",
											"// Detail\r",
											"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
											"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
											"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
											"\r",
											"// Summary\r",
											"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
											"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
											"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
											"\r",
											"// ProvisioningAPIs [Partner]\r",
											"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
											"var cmdName = LogDefaultValue.Provisioning.Partner.cmdNameUpdatePartner;\r",
											"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
											"var containerId = LogDefaultValue.Provisioning.containerId;\r",
											"var requestObjectUrlStaging = LogDefaultValue.Provisioning.Partner.requestObjectUrlUpdatePartnerMgStaging;\r",
											"\r",
											"// Check CDR (Summary Log) and EDR (Detail Log)\r",
											"SearchLogFindTid = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSearchLogFindTid = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization' : authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = x_ais_OrderRef_UpdatePartner_fail + current_timestamp;\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestSearchLogFindTid = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"\r",
											"        let optionsSearchLogFindTid = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptSearchLogFindTid,\r",
											"            body: httpRequestSearchLogFindTid\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsSearchLogFindTid);\r",
											"        let jsonDataSearchLogFindTid = await response.json();\r",
											"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
											"\r",
											"        // //200\r",
											"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"\r",
											"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
											"        console.log('hits',hits)\r",
											"  \r",
											"        // find tid\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            // let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"        \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            if(applicationNameValue == applicationName){\r",
											"                let tid = hits[i]._source.cauldron.tid;\r",
											"                pm.environment.set(\"tid\", tid);\r",
											"                break;\r",
											"           }\r",
											"        }\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"CheckLog = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCheckLog = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = pm.environment.get(\"tid\");\r",
											"\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestCheckLog = {\r",
											"            mode: 'raw',\r",
											"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"        let optionsCheckLog = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptCheckLog,\r",
											"            body: httpRequestCheckLog\r",
											"        }; \r",
											"        let response = await reqPromise(optionsCheckLog);\r",
											"        let jsonDataCheckLog = await response.json();\r",
											"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
											"        \r",
											"        // //200\r",
											"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });     \r",
											"        \r",
											"        let hits = jsonDataCheckLog.hits.hits\r",
											"        console.log('hits',hits)\r",
											"  \r",
											"        // find logType\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            //  let logType = hits[i]._source.cauldron.logType\r",
											"            let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"           \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            \r",
											"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
											"            // console.log('resultDataLog',resultDataLog)\r",
											"\r",
											"            let tidControl = x_ais_OrderRef_UpdatePartner_fail + current_timestamp;\r",
											"            // console.log(tidControl);\r",
											"            if(applicationNameValue == applicationName){\r",
											"                 \r",
											"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ProvisioningAPIs\r",
											"                    pm.test(\"Check Summary Log : UpdatePartner\" , function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Summary Log ( Expected = Actual) [UpdatePartner] ==================\");\r",
											"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
											"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
											"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeTheClientRequestedAlreadyExists);\r",
											"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionThePartnerNameIsAlreadyExisted);\r",
											"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
											"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                         // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
											"                        //  console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
											"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
											"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeTheClientRequestedAlreadyExists); \r",
											"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionThePartnerNameIsAlreadyExisted); \r",
											"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
											"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
											"                        // pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
											"                        \r",
											"\r",
											"                        // check custom\r",
											"                        // \"custom\":[ { \"no\":\"1\", \"endPointName\":\"db.TenantsCollection\", \"responseStatus\":\"Success:InquiryTenant was successfully.\", \"processTime\":2.4815 }, { \"no\":\"2\", \"endPointName\":\"db.TenantsCollection\", \"responseStatus\":\"Success:InquiryTenantName was successfully.\", \"processTime\":2.891 } ],\r",
											"\r",
											"                        let custom = resultDataLog.custom.endPointSummary;\r",
											"                        // console.log(\"custom : : :\",custom)\r",
											"                        let countCustom = custom.length;\r",
											"\r",
											"                        //[\"db.TenantsCollection\",\"db.TenantsCollection\"],\r",
											"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_UpdatePartner_004;\r",
											"                        // [\"Success:InquiryTenant was successfully.\",\"Success:InquiryTenantName was successfully.\"]\r",
											"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_UpdatePartner_004;\r",
											"                        let countCustomStep = dataEndPointName.length;\r",
											"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
											"                        for(let i=0;i<countCustomStep;i++){\r",
											"                            let no = custom[i].no;\r",
											"                            let valueEndPointName = custom[i].endPointName;\r",
											"                            let valueResponseStatus = custom[i].responseStatus;\r",
											"                            // console.log(\"i\",i);\r",
											"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
											"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
											"                           \r",
											"                            console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep );\r",
											"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString() );\r",
											"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i] );\r",
											"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i] );\r",
											"                           \r",
											"                            pm.expect(no).to.eql((i+1).toString()); \r",
											"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
											"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]);  \r",
											"                        }\r",
											"\r",
											"\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"\r",
											"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ProvisioningAPIs\r",
											"\r",
											"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
											"                    // console.log('endPointNameValue ',endPointNameValue)\r",
											"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [UpdatePartner]\", function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Detail Log ( Expected = Actual) [UpdatePartner] ==================\");\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
											"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
											"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
											"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
											"\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
											"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
											"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
											"\r",
											"                        if( endPointNameValue == endPointNameProvisioningAPIs){     //\"endPointName\":\"ProvisioningAPIs\"\r",
											"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs); \r",
											"                        \r",
											"                            // check requestObject\r",
											"                            // \"requestObject\":\"{ \\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Partner/UpdatePartner\\\", \\\"method\\\":\\\"PUT\\\", \\\"headers\\\":{ \\\"x-ais-username\\\":\\\"AisPartner\\\", \\\"x-ais-orderref\\\":\\\"UpdatePartnerfail_202104271704883\\\", \\\"x-ais-orderdesc\\\":\\\"UpdatePartner\\\", \\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAGz3tsie+KV1JKNhVrsXf5yZAWzJ8uxh/9+fUyAlN01L0IlAkkY2KW0\\\" }, \\\"body\\\":{ \\\"PartnerId\\\":\\\"6087e194e14c9c00013812a3\\\", \\\"PartnerName\\\":\\\"Jida_TestPartnerName216872\\\", \\\"PartnerType\\\":[ \\\"Supplier\\\", \\\"Customer\\\" ], \\\"PartnerDetail\\\":{ \\\"MerchantContact\\\":\\\"QA_Partner01ud@ais.co.th\\\", \\\"CPID\\\":\\\"QA_Partner01@ais.co.th\\\" } }\r",
											"                            \r",
											"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
											"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
											"                            let url = urlCheckLog + requestObjectUrlStaging;\r",
											"                            let x_ais_orderref = x_ais_OrderRef_UpdatePartner_fail + current_timestamp;\r",
											"                            let x_ais_orderdesc = x_ais_OrderDesc_UpdatePartner;\r",
											"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken\");\r",
											"                            let PartnerId = pm.environment.get(\"GetResponse_PartnerId_2\");\r",
											"                            let PartnerName = pm.environment.get(\"PartnerName\");\r",
											"                            let PartnerType = pm.environment.get(\"Value_UpdatePartner_PartnerType\");\r",
											"                            let PartnerDetailMerchantContact = pm.environment.get(\"Value_UpdatePartner_PartnerDetail_MerchantContact\");\r",
											"                            let PartnerDetailCPID = pm.environment.get(\"Value_UpdatePartner_PartnerDetail_CPID\");\r",
											"\r",
											"\r",
											"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
											"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPut);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerId).to.eql(PartnerId);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerName).to.eql(PartnerName);\r",
											"                            pm.expect(JSON.stringify(jsonParseRequestObject.body.PartnerType)).to.eql(PartnerType);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerDetail.MerchantContact).to.eql(PartnerDetailMerchantContact);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerDetail.CPID).to.eql(PartnerDetailCPID);\r",
											"\r",
											"\r",
											"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
											"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPut);\r",
											"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
											"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
											"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
											"                            console.log(\"resquest.body.PartnerId : \" + jsonParseRequestObject.body.PartnerId + \" = \" + PartnerId);\r",
											"                            console.log(\"resquest.body.PartnerName : \" + jsonParseRequestObject.body.PartnerName + \" = \" + PartnerName);\r",
											"                            console.log(\"resquest.body.PartnerType : \" + JSON.stringify(jsonParseRequestObject.body.PartnerType) + \" = \" + PartnerType);\r",
											"                            console.log(\"resquest.body.MerchantContact : \" + jsonParseRequestObject.body.PartnerDetail.MerchantContact + \" = \" + PartnerDetailMerchantContact);\r",
											"                            console.log(\"resquest.body.CPID : \" + jsonParseRequestObject.body.PartnerDetail.CPID + \" = \" + PartnerDetailCPID);\r",
											"\r",
											"                            \r",
											"                            // check responseObject\r",
											"                            // \"responseObject\":\"{ \\\"OperationStatus\\\":{ \\\"Code\\\":\\\"40301\\\", \\\"Description\\\":\\\"The PartnerName is Already Existed\\\" }\r",
											"\r",
											"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
											"                            // console.log('jsonParseResponseObject',jsonParseResponseObject);\r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeTheClientRequestedAlreadyExists);  \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionThePartnerNameIsAlreadyExisted);  \r",
											"\r",
											"                            console.log(\"response.partnerInfo.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeTheClientRequestedAlreadyExists);\r",
											"                            console.log(\"response.partnerInfo.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionThePartnerNameIsAlreadyExisted);\r",
											"\r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"setTimeout(function(){SearchLogFindTid();}, 9000); \r",
											"setTimeout(function(){CheckLog();}, 20000); \r",
											"setTimeout(function(){RemovePartner();}, 30000); \r",
											"\r",
											"setTimeout(function(){\r",
											"pm.environment.unset(\"random_number\");\r",
											"pm.environment.unset(\"PartnerName\");\r",
											"pm.environment.unset(\"MerchantContact\");\r",
											"pm.environment.unset(\"CPID\");\r",
											"pm.environment.unset(\"sessionId\");\r",
											"pm.environment.unset(\"current_timestamp\");\r",
											"pm.environment.unset(\"AccessToken\");\r",
											"pm.environment.unset(\"GetResponse_PartnerId\");\r",
											"pm.environment.unset(\"GetResponse_PartnerName\");\r",
											"pm.environment.unset(\"GetResponse_CustomerId\");\r",
											"pm.environment.unset(\"Value_UpdatePartner_PartnerName\");\r",
											"pm.environment.unset(\"Value_UpdatePartner_PartnerType\");\r",
											"pm.environment.unset(\"Value_UpdatePartner_PartnerDetail_MerchantContact\");\r",
											"pm.environment.unset(\"Value_UpdatePartner_PartnerDetail_CPID\");\r",
											"pm.environment.unset(\"Value_UpdatePartner_TST_F3_0_2_003_PartnerDetail_PartnerId\");\r",
											"pm.environment.unset(\"tid\");\r",
											"pm.environment.unset(\"GetResponse_PartnerId_2\");\r",
											"\r",
											"\r",
											"\r",
											"}, 120000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-ais-UserName",
										"type": "text",
										"value": "{{x_ais_UserName_AisPartner}}"
									},
									{
										"key": "x-ais-OrderRef",
										"value": "{{x_ais_OrderRef_UpdatePartner_fail}}{{current_timestamp}}"
									},
									{
										"key": "x-ais-OrderDesc",
										"type": "text",
										"value": "{{x_ais_OrderDesc_UpdatePartner}}"
									},
									{
										"key": "x-ais-AccessToken",
										"value": "{{Bearer}} {{AccessToken}}"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"PartnerId\": \"{{GetResponse_PartnerId_2}}\",\r\n  \"PartnerName\": \"{{PartnerName}}\",\r\n  \"PartnerType\": {{Value_UpdatePartner_PartnerType}},\r\n  \"PartnerDetail\": {\r\n    \"MerchantContact\": \"{{Value_UpdatePartner_PartnerDetail_MerchantContact}}\",\r\n    \"CPID\": \"{{Value_UpdatePartner_PartnerDetail_CPID}}\"\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{url}}{{provisioningapis}}/api/v1/Partner/UpdatePartner",
									"host": [
										"{{url}}{{provisioningapis}}"
									],
									"path": [
										"api",
										"v1",
										"Partner",
										"UpdatePartner"
									]
								},
								"description": "Type:Desire"
							},
							"response": []
						},
						{
							"name": "UpdatePartner_TST_F3_0_2_005_Error_SupplierAdminRoleInvalid",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var Username = pm.environment.get(\"Username\");\r",
											"var Password = pm.environment.get(\"Password\");\r",
											"var Username2 = pm.environment.get(\"Username_SupplierAdmin\");\r",
											"var Password2 = pm.environment.get(\"Password_SupplierAdmin\");\r",
											"\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"let UserRole = fieldDataValue.role.role_Supplier;\r",
											"\r",
											"\r",
											"pm.environment.set(\"Value_UpdatePartner_PartnerName\",fieldDataValue.Provisioning.Partner.UpdatePartner.Value_UpdatePartner_PartnerName)\r",
											"pm.environment.set(\"Value_UpdatePartner_PartnerType\",JSON.stringify(fieldDataValue.Provisioning.Partner.UpdatePartner.Value_UpdatePartner_PartnerType))\r",
											"pm.environment.set(\"Value_UpdatePartner_PartnerDetail_MerchantContact\",fieldDataValue.Provisioning.Partner.UpdatePartner.Value_UpdatePartner_PartnerDetail_MerchantContact)\r",
											"pm.environment.set(\"Value_UpdatePartner_PartnerDetail_CPID\",fieldDataValue.Provisioning.Partner.UpdatePartner.Value_UpdatePartner_PartnerDetail_CPID)\r",
											"\r",
											"\r",
											"//format YYYYMMDDHHMMSSS\r",
											"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
											"var currentTmestamp2 = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
											"// console.log('currentTmestamp',currentTmestamp);\r",
											"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
											"pm.environment.set(\"current_timestamp2\", currentTmestamp2);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var current_timestamp2 = pm.environment.get(\"current_timestamp2\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- statusCodeList --------------//\r",
											"//set variable to statusCodeList JSON.parse\r",
											"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
											"//set global variable to statusCode 200\r",
											"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
											"//set global variable to statusCode 201\r",
											"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
											"//set global variable to statusCode 403\r",
											"pm.globals.set(\"statusCodeForbidden\", statusCodeList.statusCodeForbidden);\r",
											"\r",
											"//---------------- resultCodeList --------------//\r",
											"//set variable to resultCodeList JSON.parse\r",
											"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
											"//set global variable to resultCode \"20000\"\r",
											"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
											"//set global variable to resultCode \"20100\"\r",
											"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
											"//set global variable to resultCode \"40308\"\r",
											"pm.globals.set(\"resultCodeRoleInvalid\", resultCodeList.resultCodeRoleInvalid);\r",
											"\r",
											"//---------------- resultDescriptionSuccessList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
											"//set global variable to resultDescription \"SignInProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
											"//set global variable to resultDescription \"CreatePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
											"//set global variable to resultDescription \"RemovePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
											"//set global variable to resultDescription \"UpdatePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionUpdatePartner\", resultDescriptionSuccessList.resultDescriptionUpdatePartner);\r",
											"//set global variable to resultDescription \"InquiryPartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionInquiryPartner\", resultDescriptionSuccessList.resultDescriptionInquiryPartner);\r",
											"//set global variable to resultDescription \"RemoveSystemUser is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveSystemUser\", resultDescriptionSuccessList.resultDescriptionRemoveSystemUser);\r",
											"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
											"//set global variable to resultDescription CreateAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
											"//set global variable to resultDescription \"CreateSystemUser is Success\",\r",
											"pm.globals.set(\"resultDescriptionCreateSystemUser\", resultDescriptionSuccessList.resultDescriptionCreateSystemUser);\r",
											"\r",
											"//---------------- resultDescriptionErrorList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
											"//set global variable to resultDescription \"Role Invalid\"\r",
											"pm.globals.set(\"resultDescriptionRoleInvalid\", resultDescriptionErrorList.resultDescriptionRoleInvalid);\r",
											"\r",
											"\r",
											"//---------------- HeaderList --------------//\r",
											"//set variable to HeaderList JSON.parse\r",
											"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
											"//---------------- set globals Other --------------//\r",
											"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
											"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
											"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
											"//set global variable to kbn-versio \"7.5.1\"\r",
											"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Signin_ --------------//\r",
											"//set global variable to x_ais_OrderRef \"Signin_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals CreatePartner --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
											"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
											"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
											"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
											"//set global variable to x_ais_OrderRef \"InquiryPartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_InquiryPartner\", HeaderList.Partner.x_ais_OrderRef_InquiryPartner);\r",
											"//set global variable to x_ais_OrderDesc \"InquiryPartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_InquiryPartner\", HeaderList.Partner.x_ais_OrderDesc_InquiryPartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set globals CreateAccount --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
											"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
											"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
											"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set globals SystemUser --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreateSystemUser_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreateSystemUser\", HeaderList.SystemUser.x_ais_OrderRef_CreateSystemUser);\r",
											"//set global variable to x_ais_OrderDesc \"CreateSystemUser\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreateSystemUser\", HeaderList.SystemUser.x_ais_OrderDesc_CreateSystemUser);\r",
											"//set global variable to x_ais_OrderRef \"RemoveSystemUser_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemoveSystemUser\", HeaderList.SystemUser.x_ais_OrderRef_RemoveSystemUser);\r",
											"//set global variable to x_ais_OrderDesc \"RemoveSystemUser\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemoveSystemUser\", HeaderList.SystemUser.x_ais_OrderDesc_RemoveSystemUser);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set globals Partner --------------//\r",
											"//set global variable to x_ais_OrderRef \"UpdatePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_UpdatePartner\", HeaderList.Partner.x_ais_OrderRef_UpdatePartner);\r",
											"//set global variable to x_ais_OrderRef \"UpdatePartnerfail_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_UpdatePartner_fail\", HeaderList.Partner.x_ais_OrderRef_UpdatePartner_fail);\r",
											"//set global variable to x_ais_OrderDesc \"UpdatePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UpdatePartner\", HeaderList.Partner.x_ais_OrderDesc_UpdatePartner);\r",
											"\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultCode \"20100\"\r",
											"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
											"//get global variable to resultDescription \"SignInProcess is Success\"\r",
											"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
											"//get global variable to resultDescription \"CreatePartner is Success\"\r",
											"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
											"//get global variable to resultDescription \"CreateAccount is Success\"\r",
											"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
											"//get global variable to resultDescription \"CreateSystemUser is Success\"\r",
											"var resultDescriptionCreateSystemUser = pm.globals.get(\"resultDescriptionCreateSystemUser\");\r",
											"\r",
											"\r",
											"//---------------- urlRouteList --------------//\r",
											"//set variable to urlRouteList JSON.parse\r",
											"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
											"//---------------- set url Create --------------//\r",
											"//set global variable to url \"/api/v1/auth/signin\"\r",
											"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
											"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
											"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
											"//set global variable to url \"/api/v1/SystemUser/CreateSystemUser\"\r",
											"pm.globals.set(\"urlSystemUserCreateSystemUser\", urlRouteList.SystemUser.urlSystemUserCreateSystemUser);\r",
											"\r",
											"//---------------- get url Create --------------//\r",
											"//get global variable to url \"/api/v1/auth/signin\"\r",
											"var urlSignin = pm.globals.get(\"urlSignin\");\r",
											"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
											"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
											"//get global variable to url \"/api/v1/SystemUser/CreateSystemUser\"\r",
											"var urlSystemUserCreateSystemUser = pm.globals.get(\"urlSystemUserCreateSystemUser\");\r",
											"\r",
											"//---------------- set url Remove --------------//\r",
											"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
											"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
											"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
											"//set global variable to url \"/api/v1/SystemUser/RemoveSystemUser\"\r",
											"pm.globals.set(\"urlSystemUserRemoveSystemUser\", urlRouteList.SystemUser.urlSystemUserRemoveSystemUser);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set url Inquiry --------------//\r",
											"//set global variable to url \"/api/v1/Partner/InquiryPartner\"\r",
											"pm.globals.set(\"urlPartnerInquiryPartner\", urlRouteList.Partner.urlPartnerInquiryPartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"Signin_\"\r",
											"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals SystemUser --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreateSystemUser_\"\r",
											"var x_ais_OrderRef_CreateSystemUser = pm.globals.get(\"x_ais_OrderRef_CreateSystemUser\");\r",
											"//get global variable to x_ais_OrderDesc \"CreateSystemUser\"\r",
											"var x_ais_OrderDesc_CreateSystemUser = pm.globals.get(\"x_ais_OrderDesc_CreateSystemUser\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"// Signin get token ROOT ADMIN\r",
											" Signin = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username,\r",
											"                password:Password\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"\r",
											"        //set random_number\r",
											"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
											"        //set PartnerName\r",
											"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
											"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
											"        //set MerchantContact\r",
											"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
											"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
											"        // set CPID\r",
											"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
											"        pm.environment.set(\"CPID\", CPIDValue)\r",
											"        \r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreatePartner ROOT ADMIN\r",
											" CreatePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreatePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreatePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
											"                \"PartnerType\": [\r",
											"                    \"Supplier\",\r",
											"                    \"Customer\"\r",
											"                ],\r",
											"                \"PartnerDetail\": {\r",
											"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
											"                    \"CPID\": pm.environment.get(\"CPID\")\r",
											"                },\r",
											"                \"Property\": {\r",
											"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
											"                }\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsCreatePartner = {\r",
											"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreatePartner,\r",
											"            body: httpRequestCreatePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsCreatePartner);\r",
											"        let jsonDataCreatePartner = await response.json();\r",
											"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
											"    \r",
											"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreatePartner is Success\r",
											"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
											"        });\r",
											"\r",
											"        console.log(\"jsonDataCreatePartner.PartnerInfo.PartnerId : :\", jsonDataCreatePartner.PartnerInfo.PartnerId)\r",
											"        //GetResponse_PartnerId\r",
											"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
											"\r",
											"        //GetResponse_CustomerId\r",
											"        pm.environment.set(\"GetResponse_CustomerId\", jsonDataCreatePartner.PartnerInfo.CustomerId);\r",
											"\r",
											"        //Accountname\r",
											"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
											"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
											"        \r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreateAccount ROOT ADMIN\r",
											" CreateAccount = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreateAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp2,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreateAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
											"                })\r",
											"        };\r",
											"        \r",
											"        let optionsCreateAccount = {\r",
											"            url: url + provisioningapis + urlAccountCreateAccount,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreateAccount,\r",
											"            body: httpRequestCreateAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request CreateAccount');\r",
											"        let response = await reqPromise(optionsCreateAccount);\r",
											"        let jsonDataCreateAccount = await response.json();\r",
											"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
											"    \r",
											"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreateAccount : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreateAccount is Success\r",
											"        pm.test('CreateAccount : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
											"        });\r",
											"        // GetResponse_AccountName\r",
											"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
											"        // GetResponse_AccountId\r",
											"        pm.environment.set(\"GetResponse_AccountId\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
											"       // random_number\r",
											"        pm.environment.set(\"random_number\",pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
											"\r",
											"        // for(let i=0;i<countData;i++){\r",
											"        //     // random_IM\r",
											"        //     pm.environment.set(\"random_IM\"+[i+1], _.random(10000000, 99999999)+\" \"+_.random(1000000, 9999999))\r",
											"        //     // random_ICCID\r",
											"        //     pm.environment.set(\"random_ICCID\"+[i+1], _.random(1000000, 9999999)+\" \"+_.random(100000, 999999))\r",
											"\r",
											"        //     //ThingName\r",
											"        //     let thingNameValue = fieldDataValue.Provisioning.Thing.ThingNameValue; // \"QAtestthing_T01\"\r",
											"        //     pm.environment.set(\"ThingName\"+[i+1],thingNameValue + [i+1] + pm.environment.get(\"random_number\"))\r",
											"        // }\r",
											"\r",
											"\r",
											"\r",
											"        // AuthenInfo_Username\r",
											"        let AuthenInfoUsernameValue = fieldDataValue.Provisioning.SystemUser.AuthenInfo_Username; // \"AuthenInfoUsername\"\r",
											"        pm.environment.set(\"AuthenInfo_Username\", AuthenInfoUsernameValue + pm.environment.get(\"random_number\"))\r",
											"        // AuthenInfo_Password\r",
											"        let AuthenInfoPasswordValue = fieldDataValue.Provisioning.SystemUser.AuthenInfo_Password; // \"bnZkZm5nZXJnbGtkanZlaWdqbmVvZGtsZA==\"\r",
											"        pm.environment.set(\"AuthenInfo_Password\",AuthenInfoPasswordValue)\r",
											"            \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// Signin get token\r",
											" Signin2 = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp2,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"               // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username2,\r",
											"                password:Password2\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken2\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"Signin();\r",
											"setTimeout(async function(){await CreatePartner();}, 8000); \r",
											"setTimeout(async function(){await CreateAccount();}, 9000); \r",
											"setTimeout(async function(){await Signin2();}, 20000); \r",
											"setTimeout(async function(){}, 25000);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get globals SystemUser --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemoveSystemUser_\"\r",
											"var x_ais_OrderRef_RemoveSystemUser = pm.globals.get(\"x_ais_OrderRef_RemoveSystemUser\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveSystemUser\"\r",
											"var x_ais_OrderDesc_RemoveSystemUser = pm.globals.get(\"x_ais_OrderDesc_RemoveSystemUser\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"InquiryPartner_\"\r",
											"var x_ais_OrderRef_InquiryPartner = pm.globals.get(\"x_ais_OrderRef_InquiryPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"InquiryPartner\"\r",
											"var x_ais_OrderDesc_InquiryPartner = pm.globals.get(\"x_ais_OrderDesc_InquiryPartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"UpdatePartner_\"\r",
											"var x_ais_OrderRef_UpdatePartner = pm.globals.get(\"x_ais_OrderRef_UpdatePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"UpdatePartner\"\r",
											"var x_ais_OrderDesc_UpdatePartner = pm.globals.get(\"x_ais_OrderDesc_UpdatePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Inquiry --------------//\r",
											"//get global variable to url \"/api/v1/Partner/InquiryPartner\"\r",
											"var urlPartnerInquiryPartner = pm.globals.get(\"urlPartnerInquiryPartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Remove --------------//\r",
											"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
											"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
											"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
											"//get global variable to url \"/api/v1/SystemUser/RemoveSystemUser\"\r",
											"var urlSystemUserRemoveSystemUser = pm.globals.get(\"urlSystemUserRemoveSystemUser\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultDescription \"RemovePartner is Success\"\r",
											"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
											"//get global variable to resultDescription \"UpdatePartner is Success\"\r",
											"var resultDescriptionRoleInvalid = pm.globals.get(\"resultDescriptionRoleInvalid\");\r",
											"//get global variable to resultDescription \"InquiryPartner is Success\"\r",
											"var resultDescriptionInquiryPartner = pm.globals.get(\"resultDescriptionInquiryPartner\");\r",
											"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
											"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
											"//get global variable to resultDescription \"RemoveSystemUser is Success\"\r",
											"var resultDescriptionRemoveSystemUser = pm.globals.get(\"resultDescriptionRemoveSystemUser\");\r",
											"\r",
											"//get global variable to statusCode 403\r",
											"var statusCodeForbidden = pm.globals.get(\"statusCodeForbidden\");\r",
											"//get global variable to resultCode \"40308\"\r",
											"var resultCodeRoleInvalid = pm.globals.get(\"resultCodeRoleInvalid\");\r",
											"//get global variable to resultDescription \"Role Invalid\"\r",
											"var resultDescriptionRoleInvalid = pm.globals.get(\"resultDescriptionRoleInvalid\");\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"UpdatePartner : Status code is \" + statusCodeForbidden, function () {\r",
											"    pm.response.to.have.status(statusCodeForbidden);\r",
											"});\r",
											"\r",
											"pm.test('UpdatePartner : operationStatus code is '+'\"'+ resultCodeRoleInvalid +'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeRoleInvalid);\r",
											"});\r",
											"\r",
											"pm.test('UpdatePartner : operationStatus description is '+'\"'+ resultDescriptionRoleInvalid+'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionRoleInvalid);\r",
											"});\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"// RemovePartner\r",
											" RemovePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemovePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemovePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsRemovePartner = {\r",
											"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemovePartner,\r",
											"            body: httpRequestRemovePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request RemovePartner');\r",
											"        let response = await reqPromise(optionsRemovePartner);\r",
											"        let jsonDataRemovePartner = await response.json();\r",
											"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
											"    \r",
											"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemovePartner is Success\r",
											"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// RemoveAccount ROOT ADMIN\r",
											" RemoveAccount = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemoveAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemoveAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsRemoveAccount = {\r",
											"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemoveAccount,\r",
											"            body: httpRequestRemoveAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request RemoveAccount');\r",
											"        let response = await reqPromise(optionsRemoveAccount);\r",
											"        let jsonDataRemoveAccount = await response.json();\r",
											"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
											"    \r",
											"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemoveAccount is Success\r",
											"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
											"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"//---------------- LogDefaultValue --------------//\r",
											"//set variable to LogDefaultValue JSON.parse\r",
											"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
											"// console.log('LogDefaultValue',LogDefaultValue);\r",
											"//---------------- set globals Other --------------//\r",
											"\r",
											"var SearchLog = LogDefaultValue.SearchLog;\r",
											"// console.log('SearchLog',SearchLog);\r",
											"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
											"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
											"var kbn_version = SearchLog.header.kbn_version;\r",
											"var authorization = SearchLog.header.Authorization;\r",
											"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
											"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
											"var namespace = LogDefaultValue.Other.namespace;\r",
											"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
											"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
											"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
											"var methodPut = LogDefaultValue.Other.methodPut;\r",
											"\r",
											"// Detail\r",
											"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
											"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
											"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
											"\r",
											"// Summary\r",
											"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
											"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
											"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
											"\r",
											"// ProvisioningAPIs [Partner]\r",
											"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
											"var cmdName = LogDefaultValue.Provisioning.Partner.cmdNameUpdatePartner;\r",
											"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
											"var containerId = LogDefaultValue.Provisioning.containerId;\r",
											"var requestObjectUrlStaging = LogDefaultValue.Provisioning.Partner.requestObjectUrlUpdatePartnerMgStaging;\r",
											"\r",
											"// Check CDR (Summary Log) and EDR (Detail Log)\r",
											"SearchLogFindTid = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSearchLogFindTid = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization' : authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = x_ais_OrderRef_UpdatePartner + current_timestamp;\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestSearchLogFindTid = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"\r",
											"        let optionsSearchLogFindTid = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptSearchLogFindTid,\r",
											"            body: httpRequestSearchLogFindTid\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsSearchLogFindTid);\r",
											"        let jsonDataSearchLogFindTid = await response.json();\r",
											"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
											"\r",
											"        // //200\r",
											"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"\r",
											"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
											"        console.log('hits',hits)\r",
											"  \r",
											"        // find tid\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            // let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"        \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            if(applicationNameValue == applicationName){\r",
											"                let tid = hits[i]._source.cauldron.tid;\r",
											"                pm.environment.set(\"tid\", tid);\r",
											"                break;\r",
											"           }\r",
											"        }\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"CheckLog = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCheckLog = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = pm.environment.get(\"tid\");\r",
											"\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestCheckLog = {\r",
											"            mode: 'raw',\r",
											"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"        let optionsCheckLog = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptCheckLog,\r",
											"            body: httpRequestCheckLog\r",
											"        }; \r",
											"        let response = await reqPromise(optionsCheckLog);\r",
											"        let jsonDataCheckLog = await response.json();\r",
											"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
											"        \r",
											"        // //200\r",
											"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });     \r",
											"        \r",
											"        let hits = jsonDataCheckLog.hits.hits\r",
											"        // console.log('hits',hits)\r",
											"  \r",
											"        // find logType\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            //  let logType = hits[i]._source.cauldron.logType\r",
											"            let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"           \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            \r",
											"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
											"            // console.log('resultDataLog',resultDataLog)\r",
											"\r",
											"            let tidControl = x_ais_OrderRef_UpdatePartner + current_timestamp;\r",
											"            // console.log(tidControl);\r",
											"            if(applicationNameValue == applicationName){\r",
											"                 \r",
											"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ProvisioningAPIs\r",
											"                     pm.test(\"Check Summary Log : UpdatePartner\" , function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Summary Log ( Expected = Actual) [UpdatePartner] ==================\");\r",
											"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
											"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
											"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeRoleInvalid);\r",
											"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionRoleInvalid);\r",
											"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
											"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                         // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
											"                        console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
											"\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
											"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
											"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeRoleInvalid); \r",
											"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionRoleInvalid); \r",
											"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
											"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
											"                        pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
											"\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"\r",
											"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ProvisioningAPIs\r",
											"\r",
											"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
											"                    // console.log('endPointNameValue ',endPointNameValue)\r",
											"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [UpdatePartner]\", function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Detail Log ( Expected = Actual) [UpdatePartner] ==================\");\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
											"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
											"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
											"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
											"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
											"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
											"\r",
											"                        if( endPointNameValue == endPointNameProvisioningAPIs){     //\"endPointName\":\"ProvisioningAPIs\"\r",
											"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs); \r",
											"                        \r",
											"                            // check requestObject\r",
											"                            // \"requestObject\":\"{ \\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Partner/UpdatePartner\\\", \\\"method\\\":\\\"PUT\\\", \\\"headers\\\":{ \\\"x-ais-username\\\":\\\"AisPartner\\\", \\\"x-ais-orderref\\\":\\\"UpdatePartner_202104271404273\\\", \\\"x-ais-orderdesc\\\":\\\"UpdatePartner\\\", \\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAGz3tsie+KV1ML04AJwxsO6ElXkKFtnnoFw3oHSFyFWX0IlAkkY2KW0\\\" }, \\\"body\\\":{ \\\"PartnerId\\\":\\\"6087c42ae14c9c0001380dee\\\", \\\"PartnerName\\\":\\\"QA_Partner0001[ Edit ]\\\", \\\"PartnerType\\\":[ \\\"Supplier\\\", \\\"Customer\\\" ], \\\"PartnerDetail\\\":{ \\\"MerchantContact\\\":\\\"QA_Partner01ud@ais.co.th\\\", \\\"CPID\\\":\\\"QA_Partner01@ais.co.th\\\" } } }\",\r",
											"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
											"                            // console.log('jsonParseRequestObject : : :',jsonParseRequestObject);\r",
											"\r",
											"                            let url = urlCheckLog + requestObjectUrlStaging;  \r",
											"                            let x_ais_orderref = x_ais_OrderRef_UpdatePartner + current_timestamp;\r",
											"                            let x_ais_orderdesc = x_ais_OrderDesc_UpdatePartner;\r",
											"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken2\");  \r",
											"                            let CustomerId = pm.environment.get(\"GetResponse_CustomerId\");\r",
											"                            let PartnerId = pm.environment.get(\"GetResponse_PartnerId\");\r",
											"                            let PartnerName = pm.environment.get(\"Value_UpdatePartner_PartnerName\");\r",
											"                            let PartnerType = pm.environment.get(\"Value_UpdatePartner_PartnerType\");\r",
											"                            let PartnerDetailMerchantContact = pm.environment.get(\"Value_UpdatePartner_PartnerDetail_MerchantContact\");\r",
											"                            let PartnerDetailCPID = pm.environment.get(\"Value_UpdatePartner_PartnerDetail_CPID\");\r",
											"\r",
											"\r",
											"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
											"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPut);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerId).to.eql(PartnerId);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerName).to.eql(PartnerName);\r",
											"                            pm.expect(JSON.stringify(jsonParseRequestObject.body.PartnerType)).to.eql(PartnerType);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerDetail.MerchantContact).to.eql(PartnerDetailMerchantContact);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerDetail.CPID).to.eql(PartnerDetailCPID);\r",
											"\r",
											"\r",
											"\r",
											"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
											"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPut);\r",
											"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
											"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
											"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
											"                            console.log(\"resquest.body.PartnerId : \" + jsonParseRequestObject.body.PartnerId + \" = \" + PartnerId);\r",
											"                            console.log(\"resquest.body.PartnerName : \" + jsonParseRequestObject.body.PartnerName + \" = \" + PartnerName);\r",
											"                            console.log(\"resquest.body.PartnerType : \" + JSON.stringify(jsonParseRequestObject.body.PartnerType) + \" = \" + PartnerType);\r",
											"                            console.log(\"resquest.body.MerchantContact : \" + jsonParseRequestObject.body.PartnerDetail.MerchantContact + \" = \" + PartnerDetailMerchantContact);\r",
											"                            console.log(\"resquest.body.CPID : \" + jsonParseRequestObject.body.PartnerDetail.CPID + \" = \" + PartnerDetailCPID);\r",
											"\r",
											"\r",
											"          \r",
											"                            // check responseObject\r",
											"                            //  \"responseObject\":\"{ \\\"partnerInfo\\\":{ \\\"CustomerId\\\":\\\"6087c42ae14c9c0001380ded\\\", \\\"PartnerId\\\":\\\"6087c42ae14c9c0001380dee\\\", \\\"PartnerName\\\":\\\"QA_Partner0001[ Edit ]\\\", \\\"PartnerType\\\":[ \\\"Supplier\\\", \\\"Customer\\\" ], \\\"PartnerDetail\\\":{ \\\"MerchantContact\\\":\\\"QA_Partner01ud@ais.co.th\\\", \\\"CPID\\\":\\\"QA_Partner01@ais.co.th\\\" }, \\\"AccountInfo\\\":[ ], \\\"Property\\\":{ \\\"RouteEngine\\\":false }, \\\"CreateDate\\\":\\\"2021-04-27T14:58:34.522+07:00\\\" }, \\\"OperationStatus\\\":{ \\\"Code\\\":\\\"20000\\\", \\\"Description\\\":\\\"UpdatePartner is Success\\\" }\r",
											"\r",
											"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
											"                            // console.log('jsonParseResponseObject : : :',jsonParseResponseObject);\r",
											"\r",
											"\r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeRoleInvalid);  \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionRoleInvalid);  \r",
											"\r",
											"\r",
											" \r",
											"                            console.log(\"response.partnerInfo.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeRoleInvalid);\r",
											"                            console.log(\"response.partnerInfo.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionRoleInvalid);\r",
											"\r",
											"\r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"setTimeout(function(){SearchLogFindTid();}, 40000); \r",
											"setTimeout(function(){CheckLog();}, 50000); \r",
											"setTimeout(function(){RemoveAccount();}, 70000);\r",
											"setTimeout(function(){RemovePartner();}, 80000); \r",
											"setTimeout(function(){\r",
											"pm.environment.unset(\"random_number\");\r",
											"pm.environment.unset(\"PartnerName\");\r",
											"pm.environment.unset(\"MerchantContact\");\r",
											"pm.environment.unset(\"CPID\");\r",
											"pm.environment.unset(\"sessionId\");\r",
											"pm.environment.unset(\"current_timestamp\");\r",
											"pm.environment.unset(\"AccessToken\");\r",
											"pm.environment.unset(\"GetResponse_PartnerId\");\r",
											"pm.environment.unset(\"GetResponse_CustomerId\");\r",
											"pm.environment.unset(\"Value_UpdatePartner_PartnerName\");\r",
											"pm.environment.unset(\"Value_UpdatePartner_PartnerType\");\r",
											"pm.environment.unset(\"Value_UpdatePartner_PartnerDetail_MerchantContact\");\r",
											"pm.environment.unset(\"Value_UpdatePartner_PartnerDetail_CPID\");\r",
											"pm.environment.unset(\"tid\");\r",
											"pm.environment.unset(\"AccessToken2\");\r",
											"pm.environment.unset(\"tid\");\r",
											"pm.environment.unset(\"AuthenInfo_Username\");\r",
											"pm.environment.unset(\"AuthenInfo_Password\");\r",
											"pm.environment.unset(\"random_number\");\r",
											"pm.environment.unset(\"PartnerName\");\r",
											"pm.environment.unset(\"MerchantContact\");\r",
											"pm.environment.unset(\"CPID\");\r",
											"pm.environment.unset(\"AccountName\");\r",
											"pm.environment.unset(\"GetResponse_AccountName\");\r",
											"pm.environment.unset(\"GetResponse_AccountId\");\r",
											"pm.environment.unset(\"GetResponse_SystemUserId\");\r",
											"pm.environment.unset(\"current_timestamp2\");\r",
											"\r",
											"}, 90000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-ais-UserName",
										"type": "text",
										"value": "{{x_ais_UserName_AisPartner}}"
									},
									{
										"key": "x-ais-OrderRef",
										"value": "{{x_ais_OrderRef_UpdatePartner}}{{current_timestamp}}"
									},
									{
										"key": "x-ais-OrderDesc",
										"type": "text",
										"value": "{{x_ais_OrderDesc_UpdatePartner}}"
									},
									{
										"key": "x-ais-AccessToken",
										"value": "{{Bearer}} {{AccessToken2}}"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"PartnerId\": \"{{GetResponse_PartnerId}}\",\r\n  \"PartnerName\": \"{{Value_UpdatePartner_PartnerName}}\",\r\n  \"PartnerType\": {{Value_UpdatePartner_PartnerType}},\r\n  \"PartnerDetail\": {\r\n    \"MerchantContact\": \"{{Value_UpdatePartner_PartnerDetail_MerchantContact}}\",\r\n    \"CPID\": \"{{Value_UpdatePartner_PartnerDetail_CPID}}\"\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{url}}{{provisioningapis}}/api/v1/Partner/UpdatePartner",
									"host": [
										"{{url}}{{provisioningapis}}"
									],
									"path": [
										"api",
										"v1",
										"Partner",
										"UpdatePartner"
									]
								},
								"description": "Type:Desire"
							},
							"response": []
						},
						{
							"name": "UpdatePartner_TST_F3_0_2_006_Error_CustomerAdminRoleInvalid",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var Username = pm.environment.get(\"Username\");\r",
											"var Password = pm.environment.get(\"Password\");\r",
											"var Username2 = pm.environment.get(\"Username_CustomerAdmin\");\r",
											"var Password2 = pm.environment.get(\"Password_CustomerAdmin\");\r",
											"\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"let UserRole = fieldDataValue.role.role_Customer;\r",
											"\r",
											"\r",
											"pm.environment.set(\"Value_UpdatePartner_PartnerName\",fieldDataValue.Provisioning.Partner.UpdatePartner.Value_UpdatePartner_PartnerName)\r",
											"pm.environment.set(\"Value_UpdatePartner_PartnerType\",JSON.stringify(fieldDataValue.Provisioning.Partner.UpdatePartner.Value_UpdatePartner_PartnerType))\r",
											"pm.environment.set(\"Value_UpdatePartner_PartnerDetail_MerchantContact\",fieldDataValue.Provisioning.Partner.UpdatePartner.Value_UpdatePartner_PartnerDetail_MerchantContact)\r",
											"pm.environment.set(\"Value_UpdatePartner_PartnerDetail_CPID\",fieldDataValue.Provisioning.Partner.UpdatePartner.Value_UpdatePartner_PartnerDetail_CPID)\r",
											"\r",
											"\r",
											"//format YYYYMMDDHHMMSSS\r",
											"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
											"var currentTmestamp2 = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
											"// console.log('currentTmestamp',currentTmestamp);\r",
											"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
											"pm.environment.set(\"current_timestamp2\", currentTmestamp2);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var current_timestamp2 = pm.environment.get(\"current_timestamp2\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- statusCodeList --------------//\r",
											"//set variable to statusCodeList JSON.parse\r",
											"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
											"//set global variable to statusCode 200\r",
											"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
											"//set global variable to statusCode 201\r",
											"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
											"//set global variable to statusCode 403\r",
											"pm.globals.set(\"statusCodeForbidden\", statusCodeList.statusCodeForbidden);\r",
											"\r",
											"//---------------- resultCodeList --------------//\r",
											"//set variable to resultCodeList JSON.parse\r",
											"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
											"//set global variable to resultCode \"20000\"\r",
											"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
											"//set global variable to resultCode \"20100\"\r",
											"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
											"//set global variable to resultCode \"40308\"\r",
											"pm.globals.set(\"resultCodeRoleInvalid\", resultCodeList.resultCodeRoleInvalid);\r",
											"\r",
											"//---------------- resultDescriptionSuccessList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
											"//set global variable to resultDescription \"SignInProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
											"//set global variable to resultDescription \"CreatePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
											"//set global variable to resultDescription \"RemovePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
											"//set global variable to resultDescription \"UpdatePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionUpdatePartner\", resultDescriptionSuccessList.resultDescriptionUpdatePartner);\r",
											"//set global variable to resultDescription \"InquiryPartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionInquiryPartner\", resultDescriptionSuccessList.resultDescriptionInquiryPartner);\r",
											"//set global variable to resultDescription \"RemoveSystemUser is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveSystemUser\", resultDescriptionSuccessList.resultDescriptionRemoveSystemUser);\r",
											"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
											"\r",
											"//---------------- resultDescriptionErrorList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
											"//set global variable to resultDescription \"Role Invalid\"\r",
											"pm.globals.set(\"resultDescriptionRoleInvalid\", resultDescriptionErrorList.resultDescriptionRoleInvalid);\r",
											"\r",
											"\r",
											"//---------------- HeaderList --------------//\r",
											"//set variable to HeaderList JSON.parse\r",
											"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
											"//---------------- set globals Other --------------//\r",
											"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
											"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
											"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
											"//set global variable to kbn-versio \"7.5.1\"\r",
											"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Signin_ --------------//\r",
											"//set global variable to x_ais_OrderRef \"Signin_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals CreatePartner --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
											"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
											"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
											"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
											"//set global variable to x_ais_OrderRef \"InquiryPartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_InquiryPartner\", HeaderList.Partner.x_ais_OrderRef_InquiryPartner);\r",
											"//set global variable to x_ais_OrderDesc \"InquiryPartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_InquiryPartner\", HeaderList.Partner.x_ais_OrderDesc_InquiryPartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set globals CreateAccount --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
											"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
											"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
											"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set globals SystemUser --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreateSystemUser_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreateSystemUser\", HeaderList.SystemUser.x_ais_OrderRef_CreateSystemUser);\r",
											"//set global variable to x_ais_OrderDesc \"CreateSystemUser\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreateSystemUser\", HeaderList.SystemUser.x_ais_OrderDesc_CreateSystemUser);\r",
											"//set global variable to x_ais_OrderRef \"RemoveSystemUser_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemoveSystemUser\", HeaderList.SystemUser.x_ais_OrderRef_RemoveSystemUser);\r",
											"//set global variable to x_ais_OrderDesc \"RemoveSystemUser\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemoveSystemUser\", HeaderList.SystemUser.x_ais_OrderDesc_RemoveSystemUser);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set globals Partner --------------//\r",
											"//set global variable to x_ais_OrderRef \"UpdatePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_UpdatePartner\", HeaderList.Partner.x_ais_OrderRef_UpdatePartner);\r",
											"//set global variable to x_ais_OrderRef \"UpdatePartnerfail_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_UpdatePartner_fail\", HeaderList.Partner.x_ais_OrderRef_UpdatePartner_fail);\r",
											"//set global variable to x_ais_OrderDesc \"UpdatePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UpdatePartner\", HeaderList.Partner.x_ais_OrderDesc_UpdatePartner);\r",
											"\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultCode \"20100\"\r",
											"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
											"//get global variable to resultDescription \"SignInProcess is Success\"\r",
											"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
											"//get global variable to resultDescription \"CreatePartner is Success\"\r",
											"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
											"//get global variable to resultDescription \"CreateAccount is Success\"\r",
											"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
											"//get global variable to resultDescription \"CreateSystemUser is Success\"\r",
											"var resultDescriptionCreateSystemUser = pm.globals.get(\"resultDescriptionCreateSystemUser\");\r",
											"\r",
											"\r",
											"//---------------- urlRouteList --------------//\r",
											"//set variable to urlRouteList JSON.parse\r",
											"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
											"//---------------- set url Create --------------//\r",
											"//set global variable to url \"/api/v1/auth/signin\"\r",
											"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
											"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
											"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
											"//set global variable to url \"/api/v1/SystemUser/CreateSystemUser\"\r",
											"pm.globals.set(\"urlSystemUserCreateSystemUser\", urlRouteList.SystemUser.urlSystemUserCreateSystemUser);\r",
											"\r",
											"//---------------- get url Create --------------//\r",
											"//get global variable to url \"/api/v1/auth/signin\"\r",
											"var urlSignin = pm.globals.get(\"urlSignin\");\r",
											"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
											"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
											"//get global variable to url \"/api/v1/SystemUser/CreateSystemUser\"\r",
											"var urlSystemUserCreateSystemUser = pm.globals.get(\"urlSystemUserCreateSystemUser\");\r",
											"\r",
											"//---------------- set url Remove --------------//\r",
											"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
											"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
											"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
											"//set global variable to url \"/api/v1/SystemUser/RemoveSystemUser\"\r",
											"pm.globals.set(\"urlSystemUserRemoveSystemUser\", urlRouteList.SystemUser.urlSystemUserRemoveSystemUser);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set url Inquiry --------------//\r",
											"//set global variable to url \"/api/v1/Partner/InquiryPartner\"\r",
											"pm.globals.set(\"urlPartnerInquiryPartner\", urlRouteList.Partner.urlPartnerInquiryPartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"Signin_\"\r",
											"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals SystemUser --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreateSystemUser_\"\r",
											"var x_ais_OrderRef_CreateSystemUser = pm.globals.get(\"x_ais_OrderRef_CreateSystemUser\");\r",
											"//get global variable to x_ais_OrderDesc \"CreateSystemUser\"\r",
											"var x_ais_OrderDesc_CreateSystemUser = pm.globals.get(\"x_ais_OrderDesc_CreateSystemUser\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"// Signin get token ROOT ADMIN\r",
											" Signin = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username,\r",
											"                password:Password\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"\r",
											"        //set random_number\r",
											"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
											"        //set PartnerName\r",
											"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
											"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
											"        //set MerchantContact\r",
											"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
											"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
											"        // set CPID\r",
											"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
											"        pm.environment.set(\"CPID\", CPIDValue)\r",
											"        \r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreatePartner ROOT ADMIN\r",
											" CreatePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreatePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreatePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
											"                \"PartnerType\": [\r",
											"                    \"Supplier\",\r",
											"                    \"Customer\"\r",
											"                ],\r",
											"                \"PartnerDetail\": {\r",
											"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
											"                    \"CPID\": pm.environment.get(\"CPID\")\r",
											"                },\r",
											"                \"Property\": {\r",
											"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
											"                }\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsCreatePartner = {\r",
											"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreatePartner,\r",
											"            body: httpRequestCreatePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsCreatePartner);\r",
											"        let jsonDataCreatePartner = await response.json();\r",
											"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
											"    \r",
											"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreatePartner is Success\r",
											"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
											"        });\r",
											"\r",
											"        console.log(\"jsonDataCreatePartner.PartnerInfo.PartnerId : :\", jsonDataCreatePartner.PartnerInfo.PartnerId)\r",
											"        //GetResponse_PartnerId\r",
											"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
											"\r",
											"        //GetResponse_CustomerId\r",
											"        pm.environment.set(\"GetResponse_CustomerId\", jsonDataCreatePartner.PartnerInfo.CustomerId);\r",
											"\r",
											"        //Accountname\r",
											"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
											"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
											"        \r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreateAccount ROOT ADMIN\r",
											" CreateAccount = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreateAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp2,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreateAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
											"                })\r",
											"        };\r",
											"        \r",
											"        let optionsCreateAccount = {\r",
											"            url: url + provisioningapis + urlAccountCreateAccount,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreateAccount,\r",
											"            body: httpRequestCreateAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request CreateAccount');\r",
											"        let response = await reqPromise(optionsCreateAccount);\r",
											"        let jsonDataCreateAccount = await response.json();\r",
											"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
											"    \r",
											"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreateAccount : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreateAccount is Success\r",
											"        pm.test('CreateAccount : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
											"        });\r",
											"        // GetResponse_AccountName\r",
											"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
											"        // GetResponse_AccountId\r",
											"        pm.environment.set(\"GetResponse_AccountId\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
											"       // random_number\r",
											"        pm.environment.set(\"random_number\",pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
											"\r",
											"        // for(let i=0;i<countData;i++){\r",
											"        //     // random_IM\r",
											"        //     pm.environment.set(\"random_IM\"+[i+1], _.random(10000000, 99999999)+\" \"+_.random(1000000, 9999999))\r",
											"        //     // random_ICCID\r",
											"        //     pm.environment.set(\"random_ICCID\"+[i+1], _.random(1000000, 9999999)+\" \"+_.random(100000, 999999))\r",
											"\r",
											"        //     //ThingName\r",
											"        //     let thingNameValue = fieldDataValue.Provisioning.Thing.ThingNameValue; // \"QAtestthing_T01\"\r",
											"        //     pm.environment.set(\"ThingName\"+[i+1],thingNameValue + [i+1] + pm.environment.get(\"random_number\"))\r",
											"        // }\r",
											"\r",
											"\r",
											"\r",
											"        // AuthenInfo_Username\r",
											"        let AuthenInfoUsernameValue = fieldDataValue.Provisioning.SystemUser.AuthenInfo_Username; // \"AuthenInfoUsername\"\r",
											"        pm.environment.set(\"AuthenInfo_Username\", AuthenInfoUsernameValue + pm.environment.get(\"random_number\"))\r",
											"        // AuthenInfo_Password\r",
											"        let AuthenInfoPasswordValue = fieldDataValue.Provisioning.SystemUser.AuthenInfo_Password; // \"bnZkZm5nZXJnbGtkanZlaWdqbmVvZGtsZA==\"\r",
											"        pm.environment.set(\"AuthenInfo_Password\",AuthenInfoPasswordValue)\r",
											"            \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// Signin get token\r",
											" Signin2 = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp2,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username2,\r",
											"                password:Password2\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken2\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"Signin();\r",
											"setTimeout(async function(){await CreatePartner();}, 8000); \r",
											"setTimeout(async function(){await CreateAccount();}, 9000); \r",
											"setTimeout(async function(){await Signin2();}, 20000); \r",
											"setTimeout(async function(){}, 25000);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get globals SystemUser --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemoveSystemUser_\"\r",
											"var x_ais_OrderRef_RemoveSystemUser = pm.globals.get(\"x_ais_OrderRef_RemoveSystemUser\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveSystemUser\"\r",
											"var x_ais_OrderDesc_RemoveSystemUser = pm.globals.get(\"x_ais_OrderDesc_RemoveSystemUser\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"InquiryPartner_\"\r",
											"var x_ais_OrderRef_InquiryPartner = pm.globals.get(\"x_ais_OrderRef_InquiryPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"InquiryPartner\"\r",
											"var x_ais_OrderDesc_InquiryPartner = pm.globals.get(\"x_ais_OrderDesc_InquiryPartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"UpdatePartner_\"\r",
											"var x_ais_OrderRef_UpdatePartner = pm.globals.get(\"x_ais_OrderRef_UpdatePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"UpdatePartner\"\r",
											"var x_ais_OrderDesc_UpdatePartner = pm.globals.get(\"x_ais_OrderDesc_UpdatePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Inquiry --------------//\r",
											"//get global variable to url \"/api/v1/Partner/InquiryPartner\"\r",
											"var urlPartnerInquiryPartner = pm.globals.get(\"urlPartnerInquiryPartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Remove --------------//\r",
											"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
											"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
											"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
											"//get global variable to url \"/api/v1/SystemUser/RemoveSystemUser\"\r",
											"var urlSystemUserRemoveSystemUser = pm.globals.get(\"urlSystemUserRemoveSystemUser\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultDescription \"RemovePartner is Success\"\r",
											"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
											"//get global variable to resultDescription \"UpdatePartner is Success\"\r",
											"var resultDescriptionRoleInvalid = pm.globals.get(\"resultDescriptionRoleInvalid\");\r",
											"//get global variable to resultDescription \"InquiryPartner is Success\"\r",
											"var resultDescriptionInquiryPartner = pm.globals.get(\"resultDescriptionInquiryPartner\");\r",
											"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
											"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
											"//get global variable to resultDescription \"RemoveSystemUser is Success\"\r",
											"var resultDescriptionRemoveSystemUser = pm.globals.get(\"resultDescriptionRemoveSystemUser\");\r",
											"\r",
											"//get global variable to statusCode 403\r",
											"var statusCodeForbidden = pm.globals.get(\"statusCodeForbidden\");\r",
											"//get global variable to resultCode \"40308\"\r",
											"var resultCodeRoleInvalid = pm.globals.get(\"resultCodeRoleInvalid\");\r",
											"//get global variable to resultDescription \"Role Invalid\"\r",
											"var resultDescriptionRoleInvalid = pm.globals.get(\"resultDescriptionRoleInvalid\");\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"UpdatePartner : Status code is \" + statusCodeForbidden, function () {\r",
											"    pm.response.to.have.status(statusCodeForbidden);\r",
											"});\r",
											"\r",
											"pm.test('UpdatePartner : operationStatus code is '+'\"'+ resultCodeRoleInvalid +'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeRoleInvalid);\r",
											"});\r",
											"\r",
											"pm.test('UpdatePartner : operationStatus description is '+'\"'+ resultDescriptionRoleInvalid+'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionRoleInvalid);\r",
											"});\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"// RemovePartner\r",
											" RemovePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemovePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemovePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsRemovePartner = {\r",
											"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemovePartner,\r",
											"            body: httpRequestRemovePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request RemovePartner');\r",
											"        let response = await reqPromise(optionsRemovePartner);\r",
											"        let jsonDataRemovePartner = await response.json();\r",
											"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
											"    \r",
											"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemovePartner is Success\r",
											"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// RemoveAccount ROOT ADMIN\r",
											" RemoveAccount = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemoveAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemoveAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsRemoveAccount = {\r",
											"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemoveAccount,\r",
											"            body: httpRequestRemoveAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request RemoveAccount');\r",
											"        let response = await reqPromise(optionsRemoveAccount);\r",
											"        let jsonDataRemoveAccount = await response.json();\r",
											"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
											"    \r",
											"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemoveAccount is Success\r",
											"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
											"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"//---------------- LogDefaultValue --------------//\r",
											"//set variable to LogDefaultValue JSON.parse\r",
											"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
											"// console.log('LogDefaultValue',LogDefaultValue);\r",
											"//---------------- set globals Other --------------//\r",
											"\r",
											"var SearchLog = LogDefaultValue.SearchLog;\r",
											"// console.log('SearchLog',SearchLog);\r",
											"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
											"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
											"var kbn_version = SearchLog.header.kbn_version;\r",
											"var authorization = SearchLog.header.Authorization;\r",
											"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
											"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
											"var namespace = LogDefaultValue.Other.namespace;\r",
											"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
											"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
											"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
											"var methodPut = LogDefaultValue.Other.methodPut;\r",
											"\r",
											"// Detail\r",
											"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
											"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
											"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
											"\r",
											"// Summary\r",
											"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
											"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
											"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
											"\r",
											"// ProvisioningAPIs [Partner]\r",
											"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
											"var cmdName = LogDefaultValue.Provisioning.Partner.cmdNameUpdatePartner;\r",
											"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
											"var containerId = LogDefaultValue.Provisioning.containerId;\r",
											"var requestObjectUrlStaging = LogDefaultValue.Provisioning.Partner.requestObjectUrlUpdatePartnerMgStaging;\r",
											"\r",
											"// Check CDR (Summary Log) and EDR (Detail Log)\r",
											"SearchLogFindTid = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSearchLogFindTid = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization' : authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = x_ais_OrderRef_UpdatePartner + current_timestamp;\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestSearchLogFindTid = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"\r",
											"        let optionsSearchLogFindTid = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptSearchLogFindTid,\r",
											"            body: httpRequestSearchLogFindTid\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsSearchLogFindTid);\r",
											"        let jsonDataSearchLogFindTid = await response.json();\r",
											"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
											"\r",
											"        // //200\r",
											"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"\r",
											"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
											"        console.log('hits',hits)\r",
											"  \r",
											"        // find tid\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            // let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"        \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            if(applicationNameValue == applicationName){\r",
											"                let tid = hits[i]._source.cauldron.tid;\r",
											"                pm.environment.set(\"tid\", tid);\r",
											"                break;\r",
											"           }\r",
											"        }\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"CheckLog = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCheckLog = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = pm.environment.get(\"tid\");\r",
											"\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestCheckLog = {\r",
											"            mode: 'raw',\r",
											"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"        let optionsCheckLog = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptCheckLog,\r",
											"            body: httpRequestCheckLog\r",
											"        }; \r",
											"        let response = await reqPromise(optionsCheckLog);\r",
											"        let jsonDataCheckLog = await response.json();\r",
											"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
											"        \r",
											"        // //200\r",
											"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });     \r",
											"        \r",
											"        let hits = jsonDataCheckLog.hits.hits\r",
											"        // console.log('hits',hits)\r",
											"  \r",
											"        // find logType\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            //  let logType = hits[i]._source.cauldron.logType\r",
											"            let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"           \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            \r",
											"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
											"            // console.log('resultDataLog',resultDataLog)\r",
											"\r",
											"            let tidControl = x_ais_OrderRef_UpdatePartner + current_timestamp;\r",
											"            // console.log(tidControl);\r",
											"            if(applicationNameValue == applicationName){\r",
											"                 \r",
											"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ProvisioningAPIs\r",
											"                     pm.test(\"Check Summary Log : UpdatePartner\" , function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Summary Log ( Expected = Actual) [UpdatePartner] ==================\");\r",
											"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
											"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
											"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeRoleInvalid);\r",
											"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionRoleInvalid);\r",
											"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
											"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                         // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
											"                        console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
											"\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
											"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
											"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeRoleInvalid); \r",
											"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionRoleInvalid); \r",
											"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
											"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
											"                        pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
											"\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"\r",
											"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ProvisioningAPIs\r",
											"\r",
											"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
											"                    // console.log('endPointNameValue ',endPointNameValue)\r",
											"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [UpdatePartner]\", function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Detail Log ( Expected = Actual) [UpdatePartner] ==================\");\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
											"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
											"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
											"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
											"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
											"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
											"\r",
											"                        if( endPointNameValue == endPointNameProvisioningAPIs){     //\"endPointName\":\"ProvisioningAPIs\"\r",
											"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs); \r",
											"                        \r",
											"                            // check requestObject\r",
											"                            // \"requestObject\":\"{ \\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Partner/UpdatePartner\\\", \\\"method\\\":\\\"PUT\\\", \\\"headers\\\":{ \\\"x-ais-username\\\":\\\"AisPartner\\\", \\\"x-ais-orderref\\\":\\\"UpdatePartner_202104271404273\\\", \\\"x-ais-orderdesc\\\":\\\"UpdatePartner\\\", \\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAGz3tsie+KV1ML04AJwxsO6ElXkKFtnnoFw3oHSFyFWX0IlAkkY2KW0\\\" }, \\\"body\\\":{ \\\"PartnerId\\\":\\\"6087c42ae14c9c0001380dee\\\", \\\"PartnerName\\\":\\\"QA_Partner0001[ Edit ]\\\", \\\"PartnerType\\\":[ \\\"Supplier\\\", \\\"Customer\\\" ], \\\"PartnerDetail\\\":{ \\\"MerchantContact\\\":\\\"QA_Partner01ud@ais.co.th\\\", \\\"CPID\\\":\\\"QA_Partner01@ais.co.th\\\" } } }\",\r",
											"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
											"                            // console.log('jsonParseRequestObject : : :',jsonParseRequestObject);\r",
											"\r",
											"                            let url = urlCheckLog + requestObjectUrlStaging;  \r",
											"                            let x_ais_orderref = x_ais_OrderRef_UpdatePartner + current_timestamp;\r",
											"                            let x_ais_orderdesc = x_ais_OrderDesc_UpdatePartner;\r",
											"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken2\");  \r",
											"                            let CustomerId = pm.environment.get(\"GetResponse_CustomerId\");\r",
											"                            let PartnerId = pm.environment.get(\"GetResponse_PartnerId\");\r",
											"                            let PartnerName = pm.environment.get(\"Value_UpdatePartner_PartnerName\");\r",
											"                            let PartnerType = pm.environment.get(\"Value_UpdatePartner_PartnerType\");\r",
											"                            let PartnerDetailMerchantContact = pm.environment.get(\"Value_UpdatePartner_PartnerDetail_MerchantContact\");\r",
											"                            let PartnerDetailCPID = pm.environment.get(\"Value_UpdatePartner_PartnerDetail_CPID\");\r",
											"\r",
											"\r",
											"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
											"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPut);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerId).to.eql(PartnerId);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerName).to.eql(PartnerName);\r",
											"                            pm.expect(JSON.stringify(jsonParseRequestObject.body.PartnerType)).to.eql(PartnerType);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerDetail.MerchantContact).to.eql(PartnerDetailMerchantContact);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerDetail.CPID).to.eql(PartnerDetailCPID);\r",
											"\r",
											"\r",
											"\r",
											"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
											"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPut);\r",
											"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
											"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
											"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
											"                            console.log(\"resquest.body.PartnerId : \" + jsonParseRequestObject.body.PartnerId + \" = \" + PartnerId);\r",
											"                            console.log(\"resquest.body.PartnerName : \" + jsonParseRequestObject.body.PartnerName + \" = \" + PartnerName);\r",
											"                            console.log(\"resquest.body.PartnerType : \" + JSON.stringify(jsonParseRequestObject.body.PartnerType) + \" = \" + PartnerType);\r",
											"                            console.log(\"resquest.body.MerchantContact : \" + jsonParseRequestObject.body.PartnerDetail.MerchantContact + \" = \" + PartnerDetailMerchantContact);\r",
											"                            console.log(\"resquest.body.CPID : \" + jsonParseRequestObject.body.PartnerDetail.CPID + \" = \" + PartnerDetailCPID);\r",
											"\r",
											"\r",
											"          \r",
											"                            // check responseObject\r",
											"                            //  \"responseObject\":\"{ \\\"partnerInfo\\\":{ \\\"CustomerId\\\":\\\"6087c42ae14c9c0001380ded\\\", \\\"PartnerId\\\":\\\"6087c42ae14c9c0001380dee\\\", \\\"PartnerName\\\":\\\"QA_Partner0001[ Edit ]\\\", \\\"PartnerType\\\":[ \\\"Supplier\\\", \\\"Customer\\\" ], \\\"PartnerDetail\\\":{ \\\"MerchantContact\\\":\\\"QA_Partner01ud@ais.co.th\\\", \\\"CPID\\\":\\\"QA_Partner01@ais.co.th\\\" }, \\\"AccountInfo\\\":[ ], \\\"Property\\\":{ \\\"RouteEngine\\\":false }, \\\"CreateDate\\\":\\\"2021-04-27T14:58:34.522+07:00\\\" }, \\\"OperationStatus\\\":{ \\\"Code\\\":\\\"20000\\\", \\\"Description\\\":\\\"UpdatePartner is Success\\\" }\r",
											"\r",
											"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
											"                            // console.log('jsonParseResponseObject : : :',jsonParseResponseObject);\r",
											"\r",
											"\r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeRoleInvalid);  \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionRoleInvalid);  \r",
											"\r",
											"\r",
											" \r",
											"                            console.log(\"response.partnerInfo.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeRoleInvalid);\r",
											"                            console.log(\"response.partnerInfo.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionRoleInvalid);\r",
											"\r",
											"\r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"setTimeout(function(){SearchLogFindTid();}, 40000); \r",
											"setTimeout(function(){CheckLog();}, 50000); \r",
											"setTimeout(function(){RemoveAccount();}, 70000);\r",
											"setTimeout(function(){RemovePartner();}, 80000); \r",
											"setTimeout(function(){\r",
											"pm.environment.unset(\"random_number\");\r",
											"pm.environment.unset(\"PartnerName\");\r",
											"pm.environment.unset(\"MerchantContact\");\r",
											"pm.environment.unset(\"CPID\");\r",
											"pm.environment.unset(\"sessionId\");\r",
											"pm.environment.unset(\"current_timestamp\");\r",
											"pm.environment.unset(\"AccessToken\");\r",
											"pm.environment.unset(\"GetResponse_PartnerId\");\r",
											"pm.environment.unset(\"GetResponse_CustomerId\");\r",
											"pm.environment.unset(\"Value_UpdatePartner_PartnerName\");\r",
											"pm.environment.unset(\"Value_UpdatePartner_PartnerType\");\r",
											"pm.environment.unset(\"Value_UpdatePartner_PartnerDetail_MerchantContact\");\r",
											"pm.environment.unset(\"Value_UpdatePartner_PartnerDetail_CPID\");\r",
											"pm.environment.unset(\"tid\");\r",
											"pm.environment.unset(\"AccessToken2\");\r",
											"pm.environment.unset(\"tid\");\r",
											"pm.environment.unset(\"AuthenInfo_Username\");\r",
											"pm.environment.unset(\"AuthenInfo_Password\");\r",
											"pm.environment.unset(\"random_number\");\r",
											"pm.environment.unset(\"PartnerName\");\r",
											"pm.environment.unset(\"MerchantContact\");\r",
											"pm.environment.unset(\"CPID\");\r",
											"pm.environment.unset(\"AccountName\");\r",
											"pm.environment.unset(\"GetResponse_AccountName\");\r",
											"pm.environment.unset(\"GetResponse_AccountId\");\r",
											"pm.environment.unset(\"GetResponse_SystemUserId\");\r",
											"pm.environment.unset(\"current_timestamp2\");\r",
											"\r",
											"}, 90000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-ais-UserName",
										"type": "text",
										"value": "{{x_ais_UserName_AisPartner}}"
									},
									{
										"key": "x-ais-OrderRef",
										"value": "{{x_ais_OrderRef_UpdatePartner}}{{current_timestamp}}"
									},
									{
										"key": "x-ais-OrderDesc",
										"type": "text",
										"value": "{{x_ais_OrderDesc_UpdatePartner}}"
									},
									{
										"key": "x-ais-AccessToken",
										"value": "{{Bearer}} {{AccessToken2}}"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"PartnerId\": \"{{GetResponse_PartnerId}}\",\r\n  \"PartnerName\": \"{{Value_UpdatePartner_PartnerName}}\",\r\n  \"PartnerType\": {{Value_UpdatePartner_PartnerType}},\r\n  \"PartnerDetail\": {\r\n    \"MerchantContact\": \"{{Value_UpdatePartner_PartnerDetail_MerchantContact}}\",\r\n    \"CPID\": \"{{Value_UpdatePartner_PartnerDetail_CPID}}\"\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{url}}{{provisioningapis}}/api/v1/Partner/UpdatePartner",
									"host": [
										"{{url}}{{provisioningapis}}"
									],
									"path": [
										"api",
										"v1",
										"Partner",
										"UpdatePartner"
									]
								},
								"description": "Type:Desire"
							},
							"response": []
						},
						{
							"name": "UpdatePartner_TST_F3_0_2_007_Error_SupplierRoleInvalid",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var Username = pm.environment.get(\"Username\");\r",
											"var Password = pm.environment.get(\"Password\");\r",
											"var Username2 = pm.environment.get(\"Username_Supplier\");\r",
											"var Password2 = pm.environment.get(\"Password_Supplier\");\r",
											"\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"let UserRole = fieldDataValue.role.role_Supplier;\r",
											"\r",
											"\r",
											"pm.environment.set(\"Value_UpdatePartner_PartnerName\",fieldDataValue.Provisioning.Partner.UpdatePartner.Value_UpdatePartner_PartnerName)\r",
											"pm.environment.set(\"Value_UpdatePartner_PartnerType\",JSON.stringify(fieldDataValue.Provisioning.Partner.UpdatePartner.Value_UpdatePartner_PartnerType))\r",
											"pm.environment.set(\"Value_UpdatePartner_PartnerDetail_MerchantContact\",fieldDataValue.Provisioning.Partner.UpdatePartner.Value_UpdatePartner_PartnerDetail_MerchantContact)\r",
											"pm.environment.set(\"Value_UpdatePartner_PartnerDetail_CPID\",fieldDataValue.Provisioning.Partner.UpdatePartner.Value_UpdatePartner_PartnerDetail_CPID)\r",
											"\r",
											"\r",
											"//format YYYYMMDDHHMMSSS\r",
											"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
											"var currentTmestamp2 = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
											"// console.log('currentTmestamp',currentTmestamp);\r",
											"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
											"pm.environment.set(\"current_timestamp2\", currentTmestamp2);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var current_timestamp2 = pm.environment.get(\"current_timestamp2\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- statusCodeList --------------//\r",
											"//set variable to statusCodeList JSON.parse\r",
											"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
											"//set global variable to statusCode 200\r",
											"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
											"//set global variable to statusCode 201\r",
											"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
											"//set global variable to statusCode 403\r",
											"pm.globals.set(\"statusCodeForbidden\", statusCodeList.statusCodeForbidden);\r",
											"\r",
											"//---------------- resultCodeList --------------//\r",
											"//set variable to resultCodeList JSON.parse\r",
											"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
											"//set global variable to resultCode \"20000\"\r",
											"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
											"//set global variable to resultCode \"20100\"\r",
											"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
											"//set global variable to resultCode \"40308\"\r",
											"pm.globals.set(\"resultCodeRoleInvalid\", resultCodeList.resultCodeRoleInvalid);\r",
											"\r",
											"//---------------- resultDescriptionSuccessList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
											"//set global variable to resultDescription \"SignInProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
											"//set global variable to resultDescription \"CreatePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
											"//set global variable to resultDescription \"RemovePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
											"//set global variable to resultDescription \"UpdatePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionUpdatePartner\", resultDescriptionSuccessList.resultDescriptionUpdatePartner);\r",
											"//set global variable to resultDescription \"InquiryPartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionInquiryPartner\", resultDescriptionSuccessList.resultDescriptionInquiryPartner);\r",
											"//set global variable to resultDescription \"RemoveSystemUser is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveSystemUser\", resultDescriptionSuccessList.resultDescriptionRemoveSystemUser);\r",
											"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
											"//set global variable to resultDescription CreateAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
											"//set global variable to resultDescription \"CreateSystemUser is Success\",\r",
											"pm.globals.set(\"resultDescriptionCreateSystemUser\", resultDescriptionSuccessList.resultDescriptionCreateSystemUser);\r",
											"\r",
											"//---------------- resultDescriptionErrorList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
											"//set global variable to resultDescription \"Role Invalid\"\r",
											"pm.globals.set(\"resultDescriptionRoleInvalid\", resultDescriptionErrorList.resultDescriptionRoleInvalid);\r",
											"\r",
											"\r",
											"//---------------- HeaderList --------------//\r",
											"//set variable to HeaderList JSON.parse\r",
											"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
											"//---------------- set globals Other --------------//\r",
											"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
											"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
											"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
											"//set global variable to kbn-versio \"7.5.1\"\r",
											"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Signin_ --------------//\r",
											"//set global variable to x_ais_OrderRef \"Signin_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals CreatePartner --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
											"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
											"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
											"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
											"//set global variable to x_ais_OrderRef \"InquiryPartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_InquiryPartner\", HeaderList.Partner.x_ais_OrderRef_InquiryPartner);\r",
											"//set global variable to x_ais_OrderDesc \"InquiryPartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_InquiryPartner\", HeaderList.Partner.x_ais_OrderDesc_InquiryPartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set globals CreateAccount --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
											"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
											"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
											"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set globals SystemUser --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreateSystemUser_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreateSystemUser\", HeaderList.SystemUser.x_ais_OrderRef_CreateSystemUser);\r",
											"//set global variable to x_ais_OrderDesc \"CreateSystemUser\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreateSystemUser\", HeaderList.SystemUser.x_ais_OrderDesc_CreateSystemUser);\r",
											"//set global variable to x_ais_OrderRef \"RemoveSystemUser_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemoveSystemUser\", HeaderList.SystemUser.x_ais_OrderRef_RemoveSystemUser);\r",
											"//set global variable to x_ais_OrderDesc \"RemoveSystemUser\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemoveSystemUser\", HeaderList.SystemUser.x_ais_OrderDesc_RemoveSystemUser);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set globals Partner --------------//\r",
											"//set global variable to x_ais_OrderRef \"UpdatePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_UpdatePartner\", HeaderList.Partner.x_ais_OrderRef_UpdatePartner);\r",
											"//set global variable to x_ais_OrderRef \"UpdatePartnerfail_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_UpdatePartner_fail\", HeaderList.Partner.x_ais_OrderRef_UpdatePartner_fail);\r",
											"//set global variable to x_ais_OrderDesc \"UpdatePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UpdatePartner\", HeaderList.Partner.x_ais_OrderDesc_UpdatePartner);\r",
											"\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultCode \"20100\"\r",
											"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
											"//get global variable to resultDescription \"SignInProcess is Success\"\r",
											"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
											"//get global variable to resultDescription \"CreatePartner is Success\"\r",
											"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
											"//get global variable to resultDescription \"CreateAccount is Success\"\r",
											"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
											"//get global variable to resultDescription \"CreateSystemUser is Success\"\r",
											"var resultDescriptionCreateSystemUser = pm.globals.get(\"resultDescriptionCreateSystemUser\");\r",
											"\r",
											"\r",
											"//---------------- urlRouteList --------------//\r",
											"//set variable to urlRouteList JSON.parse\r",
											"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
											"//---------------- set url Create --------------//\r",
											"//set global variable to url \"/api/v1/auth/signin\"\r",
											"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
											"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
											"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
											"//set global variable to url \"/api/v1/SystemUser/CreateSystemUser\"\r",
											"pm.globals.set(\"urlSystemUserCreateSystemUser\", urlRouteList.SystemUser.urlSystemUserCreateSystemUser);\r",
											"\r",
											"//---------------- get url Create --------------//\r",
											"//get global variable to url \"/api/v1/auth/signin\"\r",
											"var urlSignin = pm.globals.get(\"urlSignin\");\r",
											"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
											"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
											"//get global variable to url \"/api/v1/SystemUser/CreateSystemUser\"\r",
											"var urlSystemUserCreateSystemUser = pm.globals.get(\"urlSystemUserCreateSystemUser\");\r",
											"\r",
											"//---------------- set url Remove --------------//\r",
											"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
											"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
											"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
											"//set global variable to url \"/api/v1/SystemUser/RemoveSystemUser\"\r",
											"pm.globals.set(\"urlSystemUserRemoveSystemUser\", urlRouteList.SystemUser.urlSystemUserRemoveSystemUser);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set url Inquiry --------------//\r",
											"//set global variable to url \"/api/v1/Partner/InquiryPartner\"\r",
											"pm.globals.set(\"urlPartnerInquiryPartner\", urlRouteList.Partner.urlPartnerInquiryPartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"Signin_\"\r",
											"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals SystemUser --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreateSystemUser_\"\r",
											"var x_ais_OrderRef_CreateSystemUser = pm.globals.get(\"x_ais_OrderRef_CreateSystemUser\");\r",
											"//get global variable to x_ais_OrderDesc \"CreateSystemUser\"\r",
											"var x_ais_OrderDesc_CreateSystemUser = pm.globals.get(\"x_ais_OrderDesc_CreateSystemUser\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"// Signin get token ROOT ADMIN\r",
											" Signin = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username,\r",
											"                password:Password\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"\r",
											"        //set random_number\r",
											"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
											"        //set PartnerName\r",
											"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
											"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
											"        //set MerchantContact\r",
											"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
											"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
											"        // set CPID\r",
											"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
											"        pm.environment.set(\"CPID\", CPIDValue)\r",
											"        \r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreatePartner ROOT ADMIN\r",
											" CreatePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreatePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreatePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
											"                \"PartnerType\": [\r",
											"                    \"Supplier\",\r",
											"                    \"Customer\"\r",
											"                ],\r",
											"                \"PartnerDetail\": {\r",
											"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
											"                    \"CPID\": pm.environment.get(\"CPID\")\r",
											"                },\r",
											"                \"Property\": {\r",
											"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
											"                }\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsCreatePartner = {\r",
											"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreatePartner,\r",
											"            body: httpRequestCreatePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsCreatePartner);\r",
											"        let jsonDataCreatePartner = await response.json();\r",
											"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
											"    \r",
											"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreatePartner is Success\r",
											"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
											"        });\r",
											"\r",
											"        console.log(\"jsonDataCreatePartner.PartnerInfo.PartnerId : :\", jsonDataCreatePartner.PartnerInfo.PartnerId)\r",
											"        //GetResponse_PartnerId\r",
											"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
											"\r",
											"        //GetResponse_CustomerId\r",
											"        pm.environment.set(\"GetResponse_CustomerId\", jsonDataCreatePartner.PartnerInfo.CustomerId);\r",
											"\r",
											"        //Accountname\r",
											"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
											"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
											"        \r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreateAccount ROOT ADMIN\r",
											" CreateAccount = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreateAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp2,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreateAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
											"                })\r",
											"        };\r",
											"        \r",
											"        let optionsCreateAccount = {\r",
											"            url: url + provisioningapis + urlAccountCreateAccount,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreateAccount,\r",
											"            body: httpRequestCreateAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request CreateAccount');\r",
											"        let response = await reqPromise(optionsCreateAccount);\r",
											"        let jsonDataCreateAccount = await response.json();\r",
											"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
											"    \r",
											"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreateAccount : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreateAccount is Success\r",
											"        pm.test('CreateAccount : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
											"        });\r",
											"        // GetResponse_AccountName\r",
											"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
											"        // GetResponse_AccountId\r",
											"        pm.environment.set(\"GetResponse_AccountId\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
											"       // random_number\r",
											"        pm.environment.set(\"random_number\",pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
											"\r",
											"        // for(let i=0;i<countData;i++){\r",
											"        //     // random_IM\r",
											"        //     pm.environment.set(\"random_IM\"+[i+1], _.random(10000000, 99999999)+\" \"+_.random(1000000, 9999999))\r",
											"        //     // random_ICCID\r",
											"        //     pm.environment.set(\"random_ICCID\"+[i+1], _.random(1000000, 9999999)+\" \"+_.random(100000, 999999))\r",
											"\r",
											"        //     //ThingName\r",
											"        //     let thingNameValue = fieldDataValue.Provisioning.Thing.ThingNameValue; // \"QAtestthing_T01\"\r",
											"        //     pm.environment.set(\"ThingName\"+[i+1],thingNameValue + [i+1] + pm.environment.get(\"random_number\"))\r",
											"        // }\r",
											"\r",
											"\r",
											"\r",
											"        // AuthenInfo_Username\r",
											"        let AuthenInfoUsernameValue = fieldDataValue.Provisioning.SystemUser.AuthenInfo_Username; // \"AuthenInfoUsername\"\r",
											"        pm.environment.set(\"AuthenInfo_Username\", AuthenInfoUsernameValue + pm.environment.get(\"random_number\"))\r",
											"        // AuthenInfo_Password\r",
											"        let AuthenInfoPasswordValue = fieldDataValue.Provisioning.SystemUser.AuthenInfo_Password; // \"bnZkZm5nZXJnbGtkanZlaWdqbmVvZGtsZA==\"\r",
											"        pm.environment.set(\"AuthenInfo_Password\",AuthenInfoPasswordValue)\r",
											"            \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// Signin get token\r",
											" Signin2 = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp2,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"               // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username2,\r",
											"                password:Password2\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken2\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"Signin();\r",
											"setTimeout(async function(){await CreatePartner();}, 8000); \r",
											"setTimeout(async function(){await CreateAccount();}, 9000); \r",
											"setTimeout(async function(){await Signin2();}, 20000); \r",
											"setTimeout(async function(){}, 25000);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get globals SystemUser --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemoveSystemUser_\"\r",
											"var x_ais_OrderRef_RemoveSystemUser = pm.globals.get(\"x_ais_OrderRef_RemoveSystemUser\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveSystemUser\"\r",
											"var x_ais_OrderDesc_RemoveSystemUser = pm.globals.get(\"x_ais_OrderDesc_RemoveSystemUser\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"InquiryPartner_\"\r",
											"var x_ais_OrderRef_InquiryPartner = pm.globals.get(\"x_ais_OrderRef_InquiryPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"InquiryPartner\"\r",
											"var x_ais_OrderDesc_InquiryPartner = pm.globals.get(\"x_ais_OrderDesc_InquiryPartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"UpdatePartner_\"\r",
											"var x_ais_OrderRef_UpdatePartner = pm.globals.get(\"x_ais_OrderRef_UpdatePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"UpdatePartner\"\r",
											"var x_ais_OrderDesc_UpdatePartner = pm.globals.get(\"x_ais_OrderDesc_UpdatePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Inquiry --------------//\r",
											"//get global variable to url \"/api/v1/Partner/InquiryPartner\"\r",
											"var urlPartnerInquiryPartner = pm.globals.get(\"urlPartnerInquiryPartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Remove --------------//\r",
											"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
											"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
											"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
											"//get global variable to url \"/api/v1/SystemUser/RemoveSystemUser\"\r",
											"var urlSystemUserRemoveSystemUser = pm.globals.get(\"urlSystemUserRemoveSystemUser\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultDescription \"RemovePartner is Success\"\r",
											"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
											"//get global variable to resultDescription \"UpdatePartner is Success\"\r",
											"var resultDescriptionRoleInvalid = pm.globals.get(\"resultDescriptionRoleInvalid\");\r",
											"//get global variable to resultDescription \"InquiryPartner is Success\"\r",
											"var resultDescriptionInquiryPartner = pm.globals.get(\"resultDescriptionInquiryPartner\");\r",
											"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
											"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
											"//get global variable to resultDescription \"RemoveSystemUser is Success\"\r",
											"var resultDescriptionRemoveSystemUser = pm.globals.get(\"resultDescriptionRemoveSystemUser\");\r",
											"\r",
											"//get global variable to statusCode 403\r",
											"var statusCodeForbidden = pm.globals.get(\"statusCodeForbidden\");\r",
											"//get global variable to resultCode \"40308\"\r",
											"var resultCodeRoleInvalid = pm.globals.get(\"resultCodeRoleInvalid\");\r",
											"//get global variable to resultDescription \"Role Invalid\"\r",
											"var resultDescriptionRoleInvalid = pm.globals.get(\"resultDescriptionRoleInvalid\");\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"UpdatePartner : Status code is \" + statusCodeForbidden, function () {\r",
											"    pm.response.to.have.status(statusCodeForbidden);\r",
											"});\r",
											"\r",
											"pm.test('UpdatePartner : operationStatus code is '+'\"'+ resultCodeRoleInvalid +'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeRoleInvalid);\r",
											"});\r",
											"\r",
											"pm.test('UpdatePartner : operationStatus description is '+'\"'+ resultDescriptionRoleInvalid+'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionRoleInvalid);\r",
											"});\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"// RemovePartner\r",
											" RemovePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemovePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemovePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsRemovePartner = {\r",
											"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemovePartner,\r",
											"            body: httpRequestRemovePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request RemovePartner');\r",
											"        let response = await reqPromise(optionsRemovePartner);\r",
											"        let jsonDataRemovePartner = await response.json();\r",
											"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
											"    \r",
											"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemovePartner is Success\r",
											"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// RemoveAccount ROOT ADMIN\r",
											" RemoveAccount = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemoveAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemoveAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsRemoveAccount = {\r",
											"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemoveAccount,\r",
											"            body: httpRequestRemoveAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request RemoveAccount');\r",
											"        let response = await reqPromise(optionsRemoveAccount);\r",
											"        let jsonDataRemoveAccount = await response.json();\r",
											"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
											"    \r",
											"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemoveAccount is Success\r",
											"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
											"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"//---------------- LogDefaultValue --------------//\r",
											"//set variable to LogDefaultValue JSON.parse\r",
											"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
											"// console.log('LogDefaultValue',LogDefaultValue);\r",
											"//---------------- set globals Other --------------//\r",
											"\r",
											"var SearchLog = LogDefaultValue.SearchLog;\r",
											"// console.log('SearchLog',SearchLog);\r",
											"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
											"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
											"var kbn_version = SearchLog.header.kbn_version;\r",
											"var authorization = SearchLog.header.Authorization;\r",
											"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
											"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
											"var namespace = LogDefaultValue.Other.namespace;\r",
											"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
											"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
											"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
											"var methodPut = LogDefaultValue.Other.methodPut;\r",
											"\r",
											"// Detail\r",
											"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
											"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
											"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
											"\r",
											"// Summary\r",
											"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
											"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
											"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
											"\r",
											"// ProvisioningAPIs [Partner]\r",
											"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
											"var cmdName = LogDefaultValue.Provisioning.Partner.cmdNameUpdatePartner;\r",
											"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
											"var containerId = LogDefaultValue.Provisioning.containerId;\r",
											"var requestObjectUrlStaging = LogDefaultValue.Provisioning.Partner.requestObjectUrlUpdatePartnerMgStaging;\r",
											"\r",
											"// Check CDR (Summary Log) and EDR (Detail Log)\r",
											"SearchLogFindTid = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSearchLogFindTid = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization' : authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = x_ais_OrderRef_UpdatePartner + current_timestamp;\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestSearchLogFindTid = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"\r",
											"        let optionsSearchLogFindTid = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptSearchLogFindTid,\r",
											"            body: httpRequestSearchLogFindTid\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsSearchLogFindTid);\r",
											"        let jsonDataSearchLogFindTid = await response.json();\r",
											"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
											"\r",
											"        // //200\r",
											"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"\r",
											"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
											"        console.log('hits',hits)\r",
											"  \r",
											"        // find tid\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            // let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"        \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            if(applicationNameValue == applicationName){\r",
											"                let tid = hits[i]._source.cauldron.tid;\r",
											"                pm.environment.set(\"tid\", tid);\r",
											"                break;\r",
											"           }\r",
											"        }\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"CheckLog = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCheckLog = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = pm.environment.get(\"tid\");\r",
											"\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestCheckLog = {\r",
											"            mode: 'raw',\r",
											"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"        let optionsCheckLog = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptCheckLog,\r",
											"            body: httpRequestCheckLog\r",
											"        }; \r",
											"        let response = await reqPromise(optionsCheckLog);\r",
											"        let jsonDataCheckLog = await response.json();\r",
											"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
											"        \r",
											"        // //200\r",
											"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });     \r",
											"        \r",
											"        let hits = jsonDataCheckLog.hits.hits\r",
											"        // console.log('hits',hits)\r",
											"  \r",
											"        // find logType\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            //  let logType = hits[i]._source.cauldron.logType\r",
											"            let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"           \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            \r",
											"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
											"            // console.log('resultDataLog',resultDataLog)\r",
											"\r",
											"            let tidControl = x_ais_OrderRef_UpdatePartner + current_timestamp;\r",
											"            // console.log(tidControl);\r",
											"            if(applicationNameValue == applicationName){\r",
											"                 \r",
											"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ProvisioningAPIs\r",
											"                     pm.test(\"Check Summary Log : UpdatePartner\" , function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Summary Log ( Expected = Actual) [UpdatePartner] ==================\");\r",
											"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
											"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
											"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeRoleInvalid);\r",
											"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionRoleInvalid);\r",
											"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
											"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                         // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
											"                        console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
											"\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
											"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
											"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeRoleInvalid); \r",
											"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionRoleInvalid); \r",
											"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
											"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
											"                        pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
											"\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"\r",
											"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ProvisioningAPIs\r",
											"\r",
											"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
											"                    // console.log('endPointNameValue ',endPointNameValue)\r",
											"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [UpdatePartner]\", function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Detail Log ( Expected = Actual) [UpdatePartner] ==================\");\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
											"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
											"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
											"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
											"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
											"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
											"\r",
											"                        if( endPointNameValue == endPointNameProvisioningAPIs){     //\"endPointName\":\"ProvisioningAPIs\"\r",
											"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs); \r",
											"                        \r",
											"                            // check requestObject\r",
											"                            // \"requestObject\":\"{ \\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Partner/UpdatePartner\\\", \\\"method\\\":\\\"PUT\\\", \\\"headers\\\":{ \\\"x-ais-username\\\":\\\"AisPartner\\\", \\\"x-ais-orderref\\\":\\\"UpdatePartner_202104271404273\\\", \\\"x-ais-orderdesc\\\":\\\"UpdatePartner\\\", \\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAGz3tsie+KV1ML04AJwxsO6ElXkKFtnnoFw3oHSFyFWX0IlAkkY2KW0\\\" }, \\\"body\\\":{ \\\"PartnerId\\\":\\\"6087c42ae14c9c0001380dee\\\", \\\"PartnerName\\\":\\\"QA_Partner0001[ Edit ]\\\", \\\"PartnerType\\\":[ \\\"Supplier\\\", \\\"Customer\\\" ], \\\"PartnerDetail\\\":{ \\\"MerchantContact\\\":\\\"QA_Partner01ud@ais.co.th\\\", \\\"CPID\\\":\\\"QA_Partner01@ais.co.th\\\" } } }\",\r",
											"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
											"                            // console.log('jsonParseRequestObject : : :',jsonParseRequestObject);\r",
											"\r",
											"                            let url = urlCheckLog + requestObjectUrlStaging;  \r",
											"                            let x_ais_orderref = x_ais_OrderRef_UpdatePartner + current_timestamp;\r",
											"                            let x_ais_orderdesc = x_ais_OrderDesc_UpdatePartner;\r",
											"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken2\");  \r",
											"                            let CustomerId = pm.environment.get(\"GetResponse_CustomerId\");\r",
											"                            let PartnerId = pm.environment.get(\"GetResponse_PartnerId\");\r",
											"                            let PartnerName = pm.environment.get(\"Value_UpdatePartner_PartnerName\");\r",
											"                            let PartnerType = pm.environment.get(\"Value_UpdatePartner_PartnerType\");\r",
											"                            let PartnerDetailMerchantContact = pm.environment.get(\"Value_UpdatePartner_PartnerDetail_MerchantContact\");\r",
											"                            let PartnerDetailCPID = pm.environment.get(\"Value_UpdatePartner_PartnerDetail_CPID\");\r",
											"\r",
											"\r",
											"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
											"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPut);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerId).to.eql(PartnerId);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerName).to.eql(PartnerName);\r",
											"                            pm.expect(JSON.stringify(jsonParseRequestObject.body.PartnerType)).to.eql(PartnerType);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerDetail.MerchantContact).to.eql(PartnerDetailMerchantContact);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerDetail.CPID).to.eql(PartnerDetailCPID);\r",
											"\r",
											"\r",
											"\r",
											"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
											"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPut);\r",
											"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
											"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
											"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
											"                            console.log(\"resquest.body.PartnerId : \" + jsonParseRequestObject.body.PartnerId + \" = \" + PartnerId);\r",
											"                            console.log(\"resquest.body.PartnerName : \" + jsonParseRequestObject.body.PartnerName + \" = \" + PartnerName);\r",
											"                            console.log(\"resquest.body.PartnerType : \" + JSON.stringify(jsonParseRequestObject.body.PartnerType) + \" = \" + PartnerType);\r",
											"                            console.log(\"resquest.body.MerchantContact : \" + jsonParseRequestObject.body.PartnerDetail.MerchantContact + \" = \" + PartnerDetailMerchantContact);\r",
											"                            console.log(\"resquest.body.CPID : \" + jsonParseRequestObject.body.PartnerDetail.CPID + \" = \" + PartnerDetailCPID);\r",
											"\r",
											"\r",
											"          \r",
											"                            // check responseObject\r",
											"                            //  \"responseObject\":\"{ \\\"partnerInfo\\\":{ \\\"CustomerId\\\":\\\"6087c42ae14c9c0001380ded\\\", \\\"PartnerId\\\":\\\"6087c42ae14c9c0001380dee\\\", \\\"PartnerName\\\":\\\"QA_Partner0001[ Edit ]\\\", \\\"PartnerType\\\":[ \\\"Supplier\\\", \\\"Customer\\\" ], \\\"PartnerDetail\\\":{ \\\"MerchantContact\\\":\\\"QA_Partner01ud@ais.co.th\\\", \\\"CPID\\\":\\\"QA_Partner01@ais.co.th\\\" }, \\\"AccountInfo\\\":[ ], \\\"Property\\\":{ \\\"RouteEngine\\\":false }, \\\"CreateDate\\\":\\\"2021-04-27T14:58:34.522+07:00\\\" }, \\\"OperationStatus\\\":{ \\\"Code\\\":\\\"20000\\\", \\\"Description\\\":\\\"UpdatePartner is Success\\\" }\r",
											"\r",
											"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
											"                            // console.log('jsonParseResponseObject : : :',jsonParseResponseObject);\r",
											"\r",
											"\r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeRoleInvalid);  \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionRoleInvalid);  \r",
											"\r",
											"\r",
											" \r",
											"                            console.log(\"response.partnerInfo.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeRoleInvalid);\r",
											"                            console.log(\"response.partnerInfo.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionRoleInvalid);\r",
											"\r",
											"\r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"setTimeout(function(){SearchLogFindTid();}, 40000); \r",
											"setTimeout(function(){CheckLog();}, 50000); \r",
											"setTimeout(function(){RemoveAccount();}, 70000);\r",
											"setTimeout(function(){RemovePartner();}, 80000); \r",
											"setTimeout(function(){\r",
											"pm.environment.unset(\"random_number\");\r",
											"pm.environment.unset(\"PartnerName\");\r",
											"pm.environment.unset(\"MerchantContact\");\r",
											"pm.environment.unset(\"CPID\");\r",
											"pm.environment.unset(\"sessionId\");\r",
											"pm.environment.unset(\"current_timestamp\");\r",
											"pm.environment.unset(\"AccessToken\");\r",
											"pm.environment.unset(\"GetResponse_PartnerId\");\r",
											"pm.environment.unset(\"GetResponse_CustomerId\");\r",
											"pm.environment.unset(\"Value_UpdatePartner_PartnerName\");\r",
											"pm.environment.unset(\"Value_UpdatePartner_PartnerType\");\r",
											"pm.environment.unset(\"Value_UpdatePartner_PartnerDetail_MerchantContact\");\r",
											"pm.environment.unset(\"Value_UpdatePartner_PartnerDetail_CPID\");\r",
											"pm.environment.unset(\"tid\");\r",
											"pm.environment.unset(\"AccessToken2\");\r",
											"pm.environment.unset(\"AuthenInfo_Username\");\r",
											"pm.environment.unset(\"AuthenInfo_Password\");\r",
											"pm.environment.unset(\"random_number\");\r",
											"pm.environment.unset(\"PartnerName\");\r",
											"pm.environment.unset(\"MerchantContact\");\r",
											"pm.environment.unset(\"CPID\");\r",
											"pm.environment.unset(\"AccountName\");\r",
											"pm.environment.unset(\"GetResponse_AccountName\");\r",
											"pm.environment.unset(\"GetResponse_AccountId\");\r",
											"pm.environment.unset(\"GetResponse_SystemUserId\");\r",
											"pm.environment.unset(\"current_timestamp2\");\r",
											"\r",
											"}, 100000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-ais-UserName",
										"type": "text",
										"value": "{{x_ais_UserName_AisPartner}}"
									},
									{
										"key": "x-ais-OrderRef",
										"value": "{{x_ais_OrderRef_UpdatePartner}}{{current_timestamp}}"
									},
									{
										"key": "x-ais-OrderDesc",
										"type": "text",
										"value": "{{x_ais_OrderDesc_UpdatePartner}}"
									},
									{
										"key": "x-ais-AccessToken",
										"value": "{{Bearer}} {{AccessToken2}}"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"PartnerId\": \"{{GetResponse_PartnerId}}\",\r\n  \"PartnerName\": \"{{Value_UpdatePartner_PartnerName}}\",\r\n  \"PartnerType\": {{Value_UpdatePartner_PartnerType}},\r\n  \"PartnerDetail\": {\r\n    \"MerchantContact\": \"{{Value_UpdatePartner_PartnerDetail_MerchantContact}}\",\r\n    \"CPID\": \"{{Value_UpdatePartner_PartnerDetail_CPID}}\"\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{url}}{{provisioningapis}}/api/v1/Partner/UpdatePartner",
									"host": [
										"{{url}}{{provisioningapis}}"
									],
									"path": [
										"api",
										"v1",
										"Partner",
										"UpdatePartner"
									]
								},
								"description": "Type:Desire"
							},
							"response": []
						},
						{
							"name": "UpdatePartner_TST_F3_0_2_008_Error_CustomerRoleInvalid",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var Username = pm.environment.get(\"Username\");\r",
											"var Password = pm.environment.get(\"Password\");\r",
											"var Username2 = pm.environment.get(\"Username_Customer\");\r",
											"var Password2 = pm.environment.get(\"Password_Customer\");\r",
											"\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"let UserRole = fieldDataValue.role.role_Customer;\r",
											"\r",
											"\r",
											"pm.environment.set(\"Value_UpdatePartner_PartnerName\",fieldDataValue.Provisioning.Partner.UpdatePartner.Value_UpdatePartner_PartnerName)\r",
											"pm.environment.set(\"Value_UpdatePartner_PartnerType\",JSON.stringify(fieldDataValue.Provisioning.Partner.UpdatePartner.Value_UpdatePartner_PartnerType))\r",
											"pm.environment.set(\"Value_UpdatePartner_PartnerDetail_MerchantContact\",fieldDataValue.Provisioning.Partner.UpdatePartner.Value_UpdatePartner_PartnerDetail_MerchantContact)\r",
											"pm.environment.set(\"Value_UpdatePartner_PartnerDetail_CPID\",fieldDataValue.Provisioning.Partner.UpdatePartner.Value_UpdatePartner_PartnerDetail_CPID)\r",
											"\r",
											"\r",
											"//format YYYYMMDDHHMMSSS\r",
											"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
											"var currentTmestamp2 = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
											"// console.log('currentTmestamp',currentTmestamp);\r",
											"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
											"pm.environment.set(\"current_timestamp2\", currentTmestamp2);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var current_timestamp2 = pm.environment.get(\"current_timestamp2\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- statusCodeList --------------//\r",
											"//set variable to statusCodeList JSON.parse\r",
											"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
											"//set global variable to statusCode 200\r",
											"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
											"//set global variable to statusCode 201\r",
											"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
											"//set global variable to statusCode 403\r",
											"pm.globals.set(\"statusCodeForbidden\", statusCodeList.statusCodeForbidden);\r",
											"\r",
											"//---------------- resultCodeList --------------//\r",
											"//set variable to resultCodeList JSON.parse\r",
											"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
											"//set global variable to resultCode \"20000\"\r",
											"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
											"//set global variable to resultCode \"20100\"\r",
											"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
											"//set global variable to resultCode \"40308\"\r",
											"pm.globals.set(\"resultCodeRoleInvalid\", resultCodeList.resultCodeRoleInvalid);\r",
											"\r",
											"//---------------- resultDescriptionSuccessList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
											"//set global variable to resultDescription \"SignInProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
											"//set global variable to resultDescription \"CreatePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
											"//set global variable to resultDescription \"RemovePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
											"//set global variable to resultDescription \"UpdatePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionUpdatePartner\", resultDescriptionSuccessList.resultDescriptionUpdatePartner);\r",
											"//set global variable to resultDescription \"InquiryPartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionInquiryPartner\", resultDescriptionSuccessList.resultDescriptionInquiryPartner);\r",
											"//set global variable to resultDescription \"RemoveSystemUser is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveSystemUser\", resultDescriptionSuccessList.resultDescriptionRemoveSystemUser);\r",
											"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
											"\r",
											"//---------------- resultDescriptionErrorList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
											"//set global variable to resultDescription \"Role Invalid\"\r",
											"pm.globals.set(\"resultDescriptionRoleInvalid\", resultDescriptionErrorList.resultDescriptionRoleInvalid);\r",
											"\r",
											"\r",
											"//---------------- HeaderList --------------//\r",
											"//set variable to HeaderList JSON.parse\r",
											"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
											"//---------------- set globals Other --------------//\r",
											"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
											"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
											"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
											"//set global variable to kbn-versio \"7.5.1\"\r",
											"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Signin_ --------------//\r",
											"//set global variable to x_ais_OrderRef \"Signin_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals CreatePartner --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
											"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
											"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
											"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
											"//set global variable to x_ais_OrderRef \"InquiryPartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_InquiryPartner\", HeaderList.Partner.x_ais_OrderRef_InquiryPartner);\r",
											"//set global variable to x_ais_OrderDesc \"InquiryPartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_InquiryPartner\", HeaderList.Partner.x_ais_OrderDesc_InquiryPartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set globals CreateAccount --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
											"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
											"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
											"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set globals SystemUser --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreateSystemUser_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreateSystemUser\", HeaderList.SystemUser.x_ais_OrderRef_CreateSystemUser);\r",
											"//set global variable to x_ais_OrderDesc \"CreateSystemUser\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreateSystemUser\", HeaderList.SystemUser.x_ais_OrderDesc_CreateSystemUser);\r",
											"//set global variable to x_ais_OrderRef \"RemoveSystemUser_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemoveSystemUser\", HeaderList.SystemUser.x_ais_OrderRef_RemoveSystemUser);\r",
											"//set global variable to x_ais_OrderDesc \"RemoveSystemUser\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemoveSystemUser\", HeaderList.SystemUser.x_ais_OrderDesc_RemoveSystemUser);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set globals Partner --------------//\r",
											"//set global variable to x_ais_OrderRef \"UpdatePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_UpdatePartner\", HeaderList.Partner.x_ais_OrderRef_UpdatePartner);\r",
											"//set global variable to x_ais_OrderRef \"UpdatePartnerfail_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_UpdatePartner_fail\", HeaderList.Partner.x_ais_OrderRef_UpdatePartner_fail);\r",
											"//set global variable to x_ais_OrderDesc \"UpdatePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UpdatePartner\", HeaderList.Partner.x_ais_OrderDesc_UpdatePartner);\r",
											"\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultCode \"20100\"\r",
											"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
											"//get global variable to resultDescription \"SignInProcess is Success\"\r",
											"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
											"//get global variable to resultDescription \"CreatePartner is Success\"\r",
											"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
											"//get global variable to resultDescription \"CreateAccount is Success\"\r",
											"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
											"//get global variable to resultDescription \"CreateSystemUser is Success\"\r",
											"var resultDescriptionCreateSystemUser = pm.globals.get(\"resultDescriptionCreateSystemUser\");\r",
											"\r",
											"\r",
											"//---------------- urlRouteList --------------//\r",
											"//set variable to urlRouteList JSON.parse\r",
											"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
											"//---------------- set url Create --------------//\r",
											"//set global variable to url \"/api/v1/auth/signin\"\r",
											"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
											"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
											"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
											"//set global variable to url \"/api/v1/SystemUser/CreateSystemUser\"\r",
											"pm.globals.set(\"urlSystemUserCreateSystemUser\", urlRouteList.SystemUser.urlSystemUserCreateSystemUser);\r",
											"\r",
											"//---------------- get url Create --------------//\r",
											"//get global variable to url \"/api/v1/auth/signin\"\r",
											"var urlSignin = pm.globals.get(\"urlSignin\");\r",
											"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
											"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
											"//get global variable to url \"/api/v1/SystemUser/CreateSystemUser\"\r",
											"var urlSystemUserCreateSystemUser = pm.globals.get(\"urlSystemUserCreateSystemUser\");\r",
											"\r",
											"//---------------- set url Remove --------------//\r",
											"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
											"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
											"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
											"//set global variable to url \"/api/v1/SystemUser/RemoveSystemUser\"\r",
											"pm.globals.set(\"urlSystemUserRemoveSystemUser\", urlRouteList.SystemUser.urlSystemUserRemoveSystemUser);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set url Inquiry --------------//\r",
											"//set global variable to url \"/api/v1/Partner/InquiryPartner\"\r",
											"pm.globals.set(\"urlPartnerInquiryPartner\", urlRouteList.Partner.urlPartnerInquiryPartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"Signin_\"\r",
											"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals SystemUser --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreateSystemUser_\"\r",
											"var x_ais_OrderRef_CreateSystemUser = pm.globals.get(\"x_ais_OrderRef_CreateSystemUser\");\r",
											"//get global variable to x_ais_OrderDesc \"CreateSystemUser\"\r",
											"var x_ais_OrderDesc_CreateSystemUser = pm.globals.get(\"x_ais_OrderDesc_CreateSystemUser\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"// Signin get token ROOT ADMIN\r",
											" Signin = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username,\r",
											"                password:Password\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"\r",
											"        //set random_number\r",
											"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
											"        //set PartnerName\r",
											"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
											"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
											"        //set MerchantContact\r",
											"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
											"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
											"        // set CPID\r",
											"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
											"        pm.environment.set(\"CPID\", CPIDValue)\r",
											"        \r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreatePartner ROOT ADMIN\r",
											" CreatePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreatePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreatePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
											"                \"PartnerType\": [\r",
											"                    \"Supplier\",\r",
											"                    \"Customer\"\r",
											"                ],\r",
											"                \"PartnerDetail\": {\r",
											"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
											"                    \"CPID\": pm.environment.get(\"CPID\")\r",
											"                },\r",
											"                \"Property\": {\r",
											"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
											"                }\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsCreatePartner = {\r",
											"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreatePartner,\r",
											"            body: httpRequestCreatePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsCreatePartner);\r",
											"        let jsonDataCreatePartner = await response.json();\r",
											"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
											"    \r",
											"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreatePartner is Success\r",
											"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
											"        });\r",
											"\r",
											"        console.log(\"jsonDataCreatePartner.PartnerInfo.PartnerId : :\", jsonDataCreatePartner.PartnerInfo.PartnerId)\r",
											"        //GetResponse_PartnerId\r",
											"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
											"\r",
											"        //GetResponse_CustomerId\r",
											"        pm.environment.set(\"GetResponse_CustomerId\", jsonDataCreatePartner.PartnerInfo.CustomerId);\r",
											"\r",
											"        //Accountname\r",
											"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
											"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
											"        \r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreateAccount ROOT ADMIN\r",
											" CreateAccount = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreateAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp2,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreateAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
											"                })\r",
											"        };\r",
											"        \r",
											"        let optionsCreateAccount = {\r",
											"            url: url + provisioningapis + urlAccountCreateAccount,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreateAccount,\r",
											"            body: httpRequestCreateAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request CreateAccount');\r",
											"        let response = await reqPromise(optionsCreateAccount);\r",
											"        let jsonDataCreateAccount = await response.json();\r",
											"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
											"    \r",
											"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreateAccount : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreateAccount is Success\r",
											"        pm.test('CreateAccount : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
											"        });\r",
											"        // GetResponse_AccountName\r",
											"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
											"        // GetResponse_AccountId\r",
											"        pm.environment.set(\"GetResponse_AccountId\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
											"       // random_number\r",
											"        pm.environment.set(\"random_number\",pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
											"\r",
											"        // for(let i=0;i<countData;i++){\r",
											"        //     // random_IM\r",
											"        //     pm.environment.set(\"random_IM\"+[i+1], _.random(10000000, 99999999)+\" \"+_.random(1000000, 9999999))\r",
											"        //     // random_ICCID\r",
											"        //     pm.environment.set(\"random_ICCID\"+[i+1], _.random(1000000, 9999999)+\" \"+_.random(100000, 999999))\r",
											"\r",
											"        //     //ThingName\r",
											"        //     let thingNameValue = fieldDataValue.Provisioning.Thing.ThingNameValue; // \"QAtestthing_T01\"\r",
											"        //     pm.environment.set(\"ThingName\"+[i+1],thingNameValue + [i+1] + pm.environment.get(\"random_number\"))\r",
											"        // }\r",
											"\r",
											"\r",
											"\r",
											"        // AuthenInfo_Username\r",
											"        let AuthenInfoUsernameValue = fieldDataValue.Provisioning.SystemUser.AuthenInfo_Username; // \"AuthenInfoUsername\"\r",
											"        pm.environment.set(\"AuthenInfo_Username\", AuthenInfoUsernameValue + pm.environment.get(\"random_number\"))\r",
											"        // AuthenInfo_Password\r",
											"        let AuthenInfoPasswordValue = fieldDataValue.Provisioning.SystemUser.AuthenInfo_Password; // \"bnZkZm5nZXJnbGtkanZlaWdqbmVvZGtsZA==\"\r",
											"        pm.environment.set(\"AuthenInfo_Password\",AuthenInfoPasswordValue)\r",
											"            \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// Signin get token\r",
											" Signin2 = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp2,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username2,\r",
											"                password:Password2\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken2\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"Signin();\r",
											"setTimeout(async function(){await CreatePartner();}, 8000); \r",
											"setTimeout(async function(){await CreateAccount();}, 9000); \r",
											"setTimeout(async function(){await Signin2();}, 20000); \r",
											"setTimeout(async function(){}, 25000);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get globals SystemUser --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemoveSystemUser_\"\r",
											"var x_ais_OrderRef_RemoveSystemUser = pm.globals.get(\"x_ais_OrderRef_RemoveSystemUser\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveSystemUser\"\r",
											"var x_ais_OrderDesc_RemoveSystemUser = pm.globals.get(\"x_ais_OrderDesc_RemoveSystemUser\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"InquiryPartner_\"\r",
											"var x_ais_OrderRef_InquiryPartner = pm.globals.get(\"x_ais_OrderRef_InquiryPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"InquiryPartner\"\r",
											"var x_ais_OrderDesc_InquiryPartner = pm.globals.get(\"x_ais_OrderDesc_InquiryPartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"UpdatePartner_\"\r",
											"var x_ais_OrderRef_UpdatePartner = pm.globals.get(\"x_ais_OrderRef_UpdatePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"UpdatePartner\"\r",
											"var x_ais_OrderDesc_UpdatePartner = pm.globals.get(\"x_ais_OrderDesc_UpdatePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Inquiry --------------//\r",
											"//get global variable to url \"/api/v1/Partner/InquiryPartner\"\r",
											"var urlPartnerInquiryPartner = pm.globals.get(\"urlPartnerInquiryPartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Remove --------------//\r",
											"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
											"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
											"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
											"//get global variable to url \"/api/v1/SystemUser/RemoveSystemUser\"\r",
											"var urlSystemUserRemoveSystemUser = pm.globals.get(\"urlSystemUserRemoveSystemUser\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultDescription \"RemovePartner is Success\"\r",
											"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
											"//get global variable to resultDescription \"UpdatePartner is Success\"\r",
											"var resultDescriptionRoleInvalid = pm.globals.get(\"resultDescriptionRoleInvalid\");\r",
											"//get global variable to resultDescription \"InquiryPartner is Success\"\r",
											"var resultDescriptionInquiryPartner = pm.globals.get(\"resultDescriptionInquiryPartner\");\r",
											"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
											"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
											"//get global variable to resultDescription \"RemoveSystemUser is Success\"\r",
											"var resultDescriptionRemoveSystemUser = pm.globals.get(\"resultDescriptionRemoveSystemUser\");\r",
											"\r",
											"//get global variable to statusCode 403\r",
											"var statusCodeForbidden = pm.globals.get(\"statusCodeForbidden\");\r",
											"//get global variable to resultCode \"40308\"\r",
											"var resultCodeRoleInvalid = pm.globals.get(\"resultCodeRoleInvalid\");\r",
											"//get global variable to resultDescription \"Role Invalid\"\r",
											"var resultDescriptionRoleInvalid = pm.globals.get(\"resultDescriptionRoleInvalid\");\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"UpdatePartner : Status code is \" + statusCodeForbidden, function () {\r",
											"    pm.response.to.have.status(statusCodeForbidden);\r",
											"});\r",
											"\r",
											"pm.test('UpdatePartner : operationStatus code is '+'\"'+ resultCodeRoleInvalid +'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeRoleInvalid);\r",
											"});\r",
											"\r",
											"pm.test('UpdatePartner : operationStatus description is '+'\"'+ resultDescriptionRoleInvalid+'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionRoleInvalid);\r",
											"});\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"// RemovePartner\r",
											" RemovePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemovePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemovePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsRemovePartner = {\r",
											"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemovePartner,\r",
											"            body: httpRequestRemovePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request RemovePartner');\r",
											"        let response = await reqPromise(optionsRemovePartner);\r",
											"        let jsonDataRemovePartner = await response.json();\r",
											"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
											"    \r",
											"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemovePartner is Success\r",
											"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// RemoveAccount ROOT ADMIN\r",
											" RemoveAccount = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemoveAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemoveAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsRemoveAccount = {\r",
											"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemoveAccount,\r",
											"            body: httpRequestRemoveAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request RemoveAccount');\r",
											"        let response = await reqPromise(optionsRemoveAccount);\r",
											"        let jsonDataRemoveAccount = await response.json();\r",
											"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
											"    \r",
											"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemoveAccount is Success\r",
											"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
											"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"//---------------- LogDefaultValue --------------//\r",
											"//set variable to LogDefaultValue JSON.parse\r",
											"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
											"// console.log('LogDefaultValue',LogDefaultValue);\r",
											"//---------------- set globals Other --------------//\r",
											"\r",
											"var SearchLog = LogDefaultValue.SearchLog;\r",
											"// console.log('SearchLog',SearchLog);\r",
											"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
											"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
											"var kbn_version = SearchLog.header.kbn_version;\r",
											"var authorization = SearchLog.header.Authorization;\r",
											"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
											"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
											"var namespace = LogDefaultValue.Other.namespace;\r",
											"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
											"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
											"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
											"var methodPut = LogDefaultValue.Other.methodPut;\r",
											"\r",
											"// Detail\r",
											"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
											"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
											"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
											"\r",
											"// Summary\r",
											"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
											"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
											"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
											"\r",
											"// ProvisioningAPIs [Partner]\r",
											"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
											"var cmdName = LogDefaultValue.Provisioning.Partner.cmdNameUpdatePartner;\r",
											"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
											"var containerId = LogDefaultValue.Provisioning.containerId;\r",
											"var requestObjectUrlStaging = LogDefaultValue.Provisioning.Partner.requestObjectUrlUpdatePartnerMgStaging;\r",
											"\r",
											"// Check CDR (Summary Log) and EDR (Detail Log)\r",
											"SearchLogFindTid = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSearchLogFindTid = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization' : authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = x_ais_OrderRef_UpdatePartner + current_timestamp;\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestSearchLogFindTid = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"\r",
											"        let optionsSearchLogFindTid = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptSearchLogFindTid,\r",
											"            body: httpRequestSearchLogFindTid\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsSearchLogFindTid);\r",
											"        let jsonDataSearchLogFindTid = await response.json();\r",
											"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
											"\r",
											"        // //200\r",
											"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"\r",
											"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
											"        console.log('hits',hits)\r",
											"  \r",
											"        // find tid\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            // let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"        \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            if(applicationNameValue == applicationName){\r",
											"                let tid = hits[i]._source.cauldron.tid;\r",
											"                pm.environment.set(\"tid\", tid);\r",
											"                break;\r",
											"           }\r",
											"        }\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"CheckLog = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCheckLog = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = pm.environment.get(\"tid\");\r",
											"\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestCheckLog = {\r",
											"            mode: 'raw',\r",
											"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"        let optionsCheckLog = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptCheckLog,\r",
											"            body: httpRequestCheckLog\r",
											"        }; \r",
											"        let response = await reqPromise(optionsCheckLog);\r",
											"        let jsonDataCheckLog = await response.json();\r",
											"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
											"        \r",
											"        // //200\r",
											"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });     \r",
											"        \r",
											"        let hits = jsonDataCheckLog.hits.hits\r",
											"        // console.log('hits',hits)\r",
											"  \r",
											"        // find logType\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            //  let logType = hits[i]._source.cauldron.logType\r",
											"            let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"           \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            \r",
											"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
											"            // console.log('resultDataLog',resultDataLog)\r",
											"\r",
											"            let tidControl = x_ais_OrderRef_UpdatePartner + current_timestamp;\r",
											"            // console.log(tidControl);\r",
											"            if(applicationNameValue == applicationName){\r",
											"                 \r",
											"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ProvisioningAPIs\r",
											"                     pm.test(\"Check Summary Log : UpdatePartner\" , function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Summary Log ( Expected = Actual) [UpdatePartner] ==================\");\r",
											"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
											"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
											"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeRoleInvalid);\r",
											"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionRoleInvalid);\r",
											"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
											"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                         // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
											"                        console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
											"\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
											"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
											"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeRoleInvalid); \r",
											"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionRoleInvalid); \r",
											"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
											"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
											"                        pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
											"\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"\r",
											"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ProvisioningAPIs\r",
											"\r",
											"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
											"                    // console.log('endPointNameValue ',endPointNameValue)\r",
											"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [UpdatePartner]\", function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Detail Log ( Expected = Actual) [UpdatePartner] ==================\");\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
											"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
											"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
											"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
											"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
											"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
											"\r",
											"                        if( endPointNameValue == endPointNameProvisioningAPIs){     //\"endPointName\":\"ProvisioningAPIs\"\r",
											"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs); \r",
											"                        \r",
											"                            // check requestObject\r",
											"                            // \"requestObject\":\"{ \\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Partner/UpdatePartner\\\", \\\"method\\\":\\\"PUT\\\", \\\"headers\\\":{ \\\"x-ais-username\\\":\\\"AisPartner\\\", \\\"x-ais-orderref\\\":\\\"UpdatePartner_202104271404273\\\", \\\"x-ais-orderdesc\\\":\\\"UpdatePartner\\\", \\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAGz3tsie+KV1ML04AJwxsO6ElXkKFtnnoFw3oHSFyFWX0IlAkkY2KW0\\\" }, \\\"body\\\":{ \\\"PartnerId\\\":\\\"6087c42ae14c9c0001380dee\\\", \\\"PartnerName\\\":\\\"QA_Partner0001[ Edit ]\\\", \\\"PartnerType\\\":[ \\\"Supplier\\\", \\\"Customer\\\" ], \\\"PartnerDetail\\\":{ \\\"MerchantContact\\\":\\\"QA_Partner01ud@ais.co.th\\\", \\\"CPID\\\":\\\"QA_Partner01@ais.co.th\\\" } } }\",\r",
											"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
											"                            // console.log('jsonParseRequestObject : : :',jsonParseRequestObject);\r",
											"\r",
											"                            let url = urlCheckLog + requestObjectUrlStaging;  \r",
											"                            let x_ais_orderref = x_ais_OrderRef_UpdatePartner + current_timestamp;\r",
											"                            let x_ais_orderdesc = x_ais_OrderDesc_UpdatePartner;\r",
											"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken2\");  \r",
											"                            let CustomerId = pm.environment.get(\"GetResponse_CustomerId\");\r",
											"                            let PartnerId = pm.environment.get(\"GetResponse_PartnerId\");\r",
											"                            let PartnerName = pm.environment.get(\"Value_UpdatePartner_PartnerName\");\r",
											"                            let PartnerType = pm.environment.get(\"Value_UpdatePartner_PartnerType\");\r",
											"                            let PartnerDetailMerchantContact = pm.environment.get(\"Value_UpdatePartner_PartnerDetail_MerchantContact\");\r",
											"                            let PartnerDetailCPID = pm.environment.get(\"Value_UpdatePartner_PartnerDetail_CPID\");\r",
											"\r",
											"\r",
											"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
											"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPut);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerId).to.eql(PartnerId);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerName).to.eql(PartnerName);\r",
											"                            pm.expect(JSON.stringify(jsonParseRequestObject.body.PartnerType)).to.eql(PartnerType);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerDetail.MerchantContact).to.eql(PartnerDetailMerchantContact);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerDetail.CPID).to.eql(PartnerDetailCPID);\r",
											"\r",
											"\r",
											"\r",
											"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
											"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPut);\r",
											"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
											"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
											"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
											"                            console.log(\"resquest.body.PartnerId : \" + jsonParseRequestObject.body.PartnerId + \" = \" + PartnerId);\r",
											"                            console.log(\"resquest.body.PartnerName : \" + jsonParseRequestObject.body.PartnerName + \" = \" + PartnerName);\r",
											"                            console.log(\"resquest.body.PartnerType : \" + JSON.stringify(jsonParseRequestObject.body.PartnerType) + \" = \" + PartnerType);\r",
											"                            console.log(\"resquest.body.MerchantContact : \" + jsonParseRequestObject.body.PartnerDetail.MerchantContact + \" = \" + PartnerDetailMerchantContact);\r",
											"                            console.log(\"resquest.body.CPID : \" + jsonParseRequestObject.body.PartnerDetail.CPID + \" = \" + PartnerDetailCPID);\r",
											"\r",
											"\r",
											"          \r",
											"                            // check responseObject\r",
											"                            //  \"responseObject\":\"{ \\\"partnerInfo\\\":{ \\\"CustomerId\\\":\\\"6087c42ae14c9c0001380ded\\\", \\\"PartnerId\\\":\\\"6087c42ae14c9c0001380dee\\\", \\\"PartnerName\\\":\\\"QA_Partner0001[ Edit ]\\\", \\\"PartnerType\\\":[ \\\"Supplier\\\", \\\"Customer\\\" ], \\\"PartnerDetail\\\":{ \\\"MerchantContact\\\":\\\"QA_Partner01ud@ais.co.th\\\", \\\"CPID\\\":\\\"QA_Partner01@ais.co.th\\\" }, \\\"AccountInfo\\\":[ ], \\\"Property\\\":{ \\\"RouteEngine\\\":false }, \\\"CreateDate\\\":\\\"2021-04-27T14:58:34.522+07:00\\\" }, \\\"OperationStatus\\\":{ \\\"Code\\\":\\\"20000\\\", \\\"Description\\\":\\\"UpdatePartner is Success\\\" }\r",
											"\r",
											"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
											"                            // console.log('jsonParseResponseObject : : :',jsonParseResponseObject);\r",
											"\r",
											"\r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeRoleInvalid);  \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionRoleInvalid);  \r",
											"\r",
											"\r",
											" \r",
											"                            console.log(\"response.partnerInfo.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeRoleInvalid);\r",
											"                            console.log(\"response.partnerInfo.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionRoleInvalid);\r",
											"\r",
											"\r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"setTimeout(function(){SearchLogFindTid();}, 40000); \r",
											"setTimeout(function(){CheckLog();}, 50000); \r",
											"setTimeout(function(){RemoveAccount();}, 70000);\r",
											"setTimeout(function(){RemovePartner();}, 80000); \r",
											"setTimeout(function(){\r",
											"pm.environment.unset(\"random_number\");\r",
											"pm.environment.unset(\"PartnerName\");\r",
											"pm.environment.unset(\"MerchantContact\");\r",
											"pm.environment.unset(\"CPID\");\r",
											"pm.environment.unset(\"sessionId\");\r",
											"pm.environment.unset(\"current_timestamp\");\r",
											"pm.environment.unset(\"AccessToken\");\r",
											"pm.environment.unset(\"GetResponse_PartnerId\");\r",
											"pm.environment.unset(\"GetResponse_CustomerId\");\r",
											"pm.environment.unset(\"Value_UpdatePartner_PartnerName\");\r",
											"pm.environment.unset(\"Value_UpdatePartner_PartnerType\");\r",
											"pm.environment.unset(\"Value_UpdatePartner_PartnerDetail_MerchantContact\");\r",
											"pm.environment.unset(\"Value_UpdatePartner_PartnerDetail_CPID\");\r",
											"pm.environment.unset(\"tid\");\r",
											"pm.environment.unset(\"AccessToken2\");\r",
											"pm.environment.unset(\"tid\");\r",
											"pm.environment.unset(\"AuthenInfo_Username\");\r",
											"pm.environment.unset(\"AuthenInfo_Password\");\r",
											"pm.environment.unset(\"random_number\");\r",
											"pm.environment.unset(\"PartnerName\");\r",
											"pm.environment.unset(\"MerchantContact\");\r",
											"pm.environment.unset(\"CPID\");\r",
											"pm.environment.unset(\"AccountName\");\r",
											"pm.environment.unset(\"GetResponse_AccountName\");\r",
											"pm.environment.unset(\"GetResponse_AccountId\");\r",
											"pm.environment.unset(\"GetResponse_SystemUserId\");\r",
											"pm.environment.unset(\"current_timestamp2\");\r",
											"\r",
											"}, 90000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-ais-UserName",
										"type": "text",
										"value": "{{x_ais_UserName_AisPartner}}"
									},
									{
										"key": "x-ais-OrderRef",
										"value": "{{x_ais_OrderRef_UpdatePartner}}{{current_timestamp}}"
									},
									{
										"key": "x-ais-OrderDesc",
										"type": "text",
										"value": "{{x_ais_OrderDesc_UpdatePartner}}"
									},
									{
										"key": "x-ais-AccessToken",
										"value": "{{Bearer}} {{AccessToken2}}"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"PartnerId\": \"{{GetResponse_PartnerId}}\",\r\n  \"PartnerName\": \"{{Value_UpdatePartner_PartnerName}}\",\r\n  \"PartnerType\": {{Value_UpdatePartner_PartnerType}},\r\n  \"PartnerDetail\": {\r\n    \"MerchantContact\": \"{{Value_UpdatePartner_PartnerDetail_MerchantContact}}\",\r\n    \"CPID\": \"{{Value_UpdatePartner_PartnerDetail_CPID}}\"\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{url}}{{provisioningapis}}/api/v1/Partner/UpdatePartner",
									"host": [
										"{{url}}{{provisioningapis}}"
									],
									"path": [
										"api",
										"v1",
										"Partner",
										"UpdatePartner"
									]
								},
								"description": "Type:Desire"
							},
							"response": []
						}
					]
				},
				{
					"name": "InquiryPartner",
					"item": [
						{
							"name": "InquiryPartner_TST_F5_1_1_001_Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"InquiryPartner_\"\r",
											"var x_ais_OrderRef_InquiryPartner = pm.globals.get(\"x_ais_OrderRef_InquiryPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"InquiryPartner\"\r",
											"var x_ais_OrderDesc_InquiryPartner = pm.globals.get(\"x_ais_OrderDesc_InquiryPartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Remove --------------//\r",
											"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
											"\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultDescription \"RemovePartner is Success\"\r",
											"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"//get global variable to resultDescription \"InquiryPartner is Success\"\r",
											"var resultDescriptionInquiryPartner = pm.globals.get(\"resultDescriptionInquiryPartner\");\r",
											"\r",
											"pm.test(\"InquiryPartner : Status code is \" + statusCodeSuccess, function () {\r",
											"    pm.response.to.have.status(statusCodeSuccess);\r",
											"});\r",
											"\r",
											"pm.test('InquiryPartner : operationStatus code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeSuccess);\r",
											"});\r",
											"\r",
											"pm.test('InquiryPartner : operationStatus description is '+'\"'+ resultDescriptionInquiryPartner+'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionInquiryPartner);\r",
											"});\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"// RemovePartner\r",
											" RemovePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemovePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemovePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsRemovePartner = {\r",
											"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemovePartner,\r",
											"            body: httpRequestRemovePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request RemovePartner');\r",
											"        let response = await reqPromise(optionsRemovePartner);\r",
											"        let jsonDataRemovePartner = await response.json();\r",
											"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
											"    \r",
											"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemovePartner is Success\r",
											"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"//---------------- LogDefaultValue --------------//\r",
											"//set variable to LogDefaultValue JSON.parse\r",
											"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
											"// console.log('LogDefaultValue',LogDefaultValue);\r",
											"//---------------- set globals Other --------------//\r",
											"\r",
											"var SearchLog = LogDefaultValue.SearchLog;\r",
											"// console.log('SearchLog',SearchLog);\r",
											"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
											"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
											"var kbn_version = SearchLog.header.kbn_version;\r",
											"var authorization = SearchLog.header.Authorization;\r",
											"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
											"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
											"var namespace = LogDefaultValue.Other.namespace;\r",
											"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
											"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
											"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
											"var methodPost = LogDefaultValue.Other.methodPost;\r",
											"\r",
											"// Detail\r",
											"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
											"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
											"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
											"\r",
											"// Summary\r",
											"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
											"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
											"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
											"\r",
											"// ProvisioningAPIs [Partner]\r",
											"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
											"var cmdName = LogDefaultValue.Provisioning.Partner.cmdNameInquiryPartner;\r",
											"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
											"var containerId = LogDefaultValue.Provisioning.containerId;\r",
											"var requestObjectUrlStaging = LogDefaultValue.Provisioning.Partner.requestObjectUrlInquiryPartnerMgStaging;\r",
											"\r",
											"// Check CDR (Summary Log) and EDR (Detail Log)\r",
											"SearchLogFindTid = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSearchLogFindTid = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization' : authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = x_ais_OrderRef_InquiryPartner + current_timestamp;\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch : : 1\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestSearchLogFindTid = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"\r",
											"        let optionsSearchLogFindTid = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptSearchLogFindTid,\r",
											"            body: httpRequestSearchLogFindTid\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsSearchLogFindTid);\r",
											"        let jsonDataSearchLogFindTid = await response.json();\r",
											"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
											"\r",
											"        // //200\r",
											"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"\r",
											"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
											"        console.log('hits',hits)\r",
											"  \r",
											"        // find tid\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            // let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"        \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            if(applicationNameValue == applicationName){\r",
											"                let tid = hits[i]._source.cauldron.tid;\r",
											"                pm.environment.set(\"tid\", tid);\r",
											"                break;\r",
											"           }\r",
											"        }\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"CheckLog = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCheckLog = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = pm.environment.get(\"tid\");\r",
											"\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch : : : 2\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestCheckLog = {\r",
											"            mode: 'raw',\r",
											"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"        let optionsCheckLog = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptCheckLog,\r",
											"            body: httpRequestCheckLog\r",
											"        }; \r",
											"        let response = await reqPromise(optionsCheckLog);\r",
											"        let jsonDataCheckLog = await response.json();\r",
											"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
											"        \r",
											"        // //200\r",
											"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });     \r",
											"        \r",
											"        let hits = jsonDataCheckLog.hits.hits\r",
											"        console.log('hits',hits)\r",
											"  \r",
											"        // find logType\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            //  let logType = hits[i]._source.cauldron.logType\r",
											"            let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"           \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            \r",
											"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
											"            // console.log('resultDataLog',resultDataLog)\r",
											"\r",
											"            let tidControl = x_ais_OrderRef_InquiryPartner + current_timestamp;\r",
											"            // console.log(tidControl);\r",
											"            if(applicationNameValue == applicationName){\r",
											"                 \r",
											"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ProvisioningAPIs\r",
											"                     pm.test(\"Check Summary Log : InquiryPartner\" , function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Summary Log ( Expected = Actual) [InquiryPartner] ==================\");\r",
											"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
											"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
											"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeSuccess);\r",
											"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionInquiryPartner);\r",
											"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
											"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                         // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
											"                        //  console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
											"                    \r",
											"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp);\r",
											"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName);\r",
											"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeSuccess);\r",
											"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionInquiryPartner);\r",
											"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp);\r",
											"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary);\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);  \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace);\r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName);\r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId);\r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
											"                        // pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
											"\r",
											"                        // check custom\r",
											"                        // \"custom\":[ { \"no\":\"1\", \"endPointName\":\"db.TenantsCollection\", \"responseStatus\":\"Success:InquiryTenant was successfully.\", \"processTime\":0.1549 }, { \"no\":\"2\", \"endPointName\":\"db.AccountsCollection\", \"responseStatus\":\"Success:InquiryAccount was successfully.\", \"processTime\":2.0419 } ],\r",
											"\r",
											"                        let custom = resultDataLog.custom.endPointSummary;\r",
											"                        // console.log(\"custom : : :\",custom)\r",
											"                        let countCustom = custom.length;\r",
											"\r",
											"                        // [\"db.TenantsCollection\",\"db.AccountsCollection\"],\r",
											"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_InquiryPartner;\r",
											"                        // [\"Success:InquiryTenant was successfully.\",\"Success:InquiryAccount was successfully.\"]\r",
											"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_InquiryPartner;\r",
											"                        let countCustomStep = dataEndPointName.length;\r",
											"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
											"                        for(let i=0;i<countCustomStep;i++){\r",
											"                            let no = custom[i].no;\r",
											"                            let valueEndPointName = custom[i].endPointName;\r",
											"                            let valueResponseStatus = custom[i].responseStatus;\r",
											"                            // console.log(\"i\",i);\r",
											"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
											"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
											"                           \r",
											"                            console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep );\r",
											"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString() );\r",
											"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i] );\r",
											"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i] );\r",
											"                           \r",
											"                            pm.expect(no).to.eql((i+1).toString()); \r",
											"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
											"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]);  \r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"\r",
											"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ProvisioningAPIs\r",
											"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
											"                    // console.log('endPointNameValue ',endPointNameValue)\r",
											"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [InquiryPartner]\", function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Detail Log ( Expected = Actual) [InquiryPartner] ==================\");\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
											"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
											"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
											"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
											"\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
											"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
											"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
											"\r",
											"                        if( endPointNameValue == endPointNameProvisioningAPIs){     //\"endPointName\":\"ProvisioningAPIs\"\r",
											"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs); \r",
											"                        \r",
											"                            // check requestObject\r",
											"                            // \"requestObject\":\"{ \\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Partner/InquiryPartner\\\", \\\"method\\\":\\\"POST\\\", \\\"headers\\\":{ \\\"x-ais-username\\\":\\\"AisPartner\\\", \\\"x-ais-orderref\\\":\\\"InquiryPartner_202104271304448\\\", \\\"x-ais-orderdesc\\\":\\\"InquiryPartner\\\", \\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAGz3tsie+KV1KmIuQEH/h4geIWC9KzcyZbsXbdYpFNnXEIlAkkY2KW0\\\" }, \\\"body\\\":{ \\\"PartnerId\\\":\\\"6087af78e14c9c00013805d4\\\" }\r",
											"                            \r",
											"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
											"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
											"\r",
											"\r",
											"\r",
											"                            let url = urlCheckLog + requestObjectUrlStaging;  \r",
											"                            let x_ais_orderref = x_ais_OrderRef_InquiryPartner + current_timestamp;\r",
											"                            let x_ais_orderdesc = x_ais_OrderDesc_InquiryPartner;\r",
											"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken\");\r",
											"                            let PartnerId = pm.environment.get(\"GetResponse_PartnerId\");\r",
											"                            let CustomerId = pm.environment.get(\"GetResponse_CustomerId\");\r",
											"                            let PartnerName = pm.environment.get(\"PartnerName\");\r",
											"                            let PartnerType = pm.environment.get(\"PartnerTypeValue\");\r",
											"                            let PartnerDetailMerchantContact = pm.environment.get(\"MerchantContact\");\r",
											"                            let PartnerDetailCPID = pm.environment.get(\"CPID\");\r",
											"                            let PropertyRouteEngine = pm.environment.get(\"PropertyRouteEngineValue\");\r",
											"                            \r",
											"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
											"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerId).to.eql(PartnerId);\r",
											"\r",
											"\r",
											"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
											"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
											"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
											"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
											"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
											"                            console.log(\"resquest.body.PartnerId : \" + jsonParseRequestObject.body.PartnerId + \" = \" + PartnerId);\r",
											"\r",
											"\r",
											"                            // check responseObject\r",
											"                            // \"responseObject\":\"{ \\\"partnerInfo\\\":[ { \\\"CustomerId\\\":\\\"6087af78e14c9c00013805d3\\\", \\\"PartnerId\\\":\\\"6087af78e14c9c00013805d4\\\", \\\"PartnerName\\\":\\\"Jida_TestPartnerName542459\\\", \\\"PartnerType\\\":[ \\\"Supplier\\\", \\\"Customer\\\" ], \\\"PartnerDetail\\\":{ \\\"MerchantContact\\\":\\\"Jida_TestMerchantContact@ais.co.th\\\", \\\"CPID\\\":\\\"Jida_TesCPID@ais.co.th\\\" }, \\\"AccountInfo\\\":[ ], \\\"Property\\\":{ \\\"RouteEngine\\\":false }, \\\"CreateDate\\\":\\\"2021-04-27T13:30:16.742+07:00\\\" } ], \\\"_Metadata\\\":{ \\\"TotalCount\\\":1, \\\"Limit\\\":10000, \\\"OffSet\\\":0 }, \\\"OperationStatus\\\":{ \\\"Code\\\":\\\"20000\\\", \\\"Description\\\":\\\"InquiryPartner is Success\\\" }\r",
											"\r",
											"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);   \r",
											"                            // console.log(\"jsonParseResponseObject : : :\", jsonParseResponseObject)\r",
											"\r",
											"\r",
											"                            pm.expect(jsonParseResponseObject.partnerInfo[0].CustomerId).to.eql(CustomerId);  \r",
											"                            pm.expect(jsonParseResponseObject.partnerInfo[0].PartnerId).to.eql(PartnerId);\r",
											"                            pm.expect(jsonParseResponseObject.partnerInfo[0].PartnerName).to.eql(PartnerName);   \r",
											"                            pm.expect(jsonParseResponseObject.partnerInfo[0].PartnerType).to.eql(PartnerType);  \r",
											"                            pm.expect(jsonParseResponseObject.partnerInfo[0].PartnerDetail.MerchantContact).to.eql(PartnerDetailMerchantContact);  \r",
											"                            pm.expect(jsonParseResponseObject.partnerInfo[0].PartnerDetail.CPID).to.eql(PartnerDetailCPID);  \r",
											"                            pm.expect(jsonParseResponseObject.partnerInfo[0].Property.RouteEngine).to.eql(PropertyRouteEngine);\r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeSuccess);  \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionInquiryPartner);  \r",
											"\r",
											"                            \r",
											"                            console.log(\"response.PartnerInfo.CustomerId : \" + jsonParseResponseObject.partnerInfo[0].CustomerId + \" = \" + CustomerId);\r",
											"                            console.log(\"response.PartnerInfo.PartnerId : \" + jsonParseResponseObject.partnerInfo[0].PartnerId + \" = \" + PartnerId);\r",
											"                            console.log(\"response.PartnerInfo.PartnerName : \" + jsonParseResponseObject.partnerInfo[0].PartnerName + \" = \" + PartnerName);  \r",
											"                            console.log(\"response.PartnerInfo.PartnerType : \" + JSON.stringify(jsonParseResponseObject.partnerInfo[0].PartnerType) + \" = \" + PartnerType);                  \r",
											"                            console.log(\"response.PartnerInfo.MerchantContact : \" + jsonParseResponseObject.partnerInfo[0].PartnerDetail.MerchantContact + \" = \" + PartnerDetailMerchantContact); \r",
											"                            console.log(\"response.PartnerInfo.CPID : \" + jsonParseResponseObject.partnerInfo[0].PartnerDetail.CPID + \" = \" + PartnerDetailCPID);\r",
											"                            console.log(\"response.PartnerInfo.RouteEngine : \" + jsonParseResponseObject.partnerInfo[0].Property.RouteEngine + \" = \" + PropertyRouteEngine);\r",
											"                            console.log(\"response.PartnerInfo.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeSuccess);\r",
											"                            console.log(\"response.PartnerInfo.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionInquiryPartner);\r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"setTimeout(function(){SearchLogFindTid();}, 7000); \r",
											"setTimeout(function(){CheckLog();}, 20000); \r",
											"setTimeout(function(){RemovePartner();}, 30000); \r",
											"\r",
											"setTimeout(function(){\r",
											"pm.environment.unset(\"current_timestamp\");\r",
											"pm.environment.unset(\"AccessToken\");\r",
											"pm.environment.unset(\"random_number\");\r",
											"pm.environment.unset(\"PartnerName\");\r",
											"pm.environment.unset(\"MerchantContact\");\r",
											"pm.environment.unset(\"CPID\");\r",
											"pm.environment.unset(\"tid\");\r",
											"pm.environment.unset(\"GetResponse_PartnerId\");\r",
											"pm.environment.unset(\"GetResponse_CustomerId\");\r",
											"pm.environment.unset(\"PartnerTypeValue\");\r",
											"pm.environment.unset(\"PropertyRouteEngineValue\");\r",
											"}, 45000);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var Username = pm.environment.get(\"Username\");\r",
											"var Password = pm.environment.get(\"Password\");\r",
											"\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"\r",
											"pm.environment.set(\"PartnerTypeValue\",fieldDataValue.Partner.PartnerTypeValue)\r",
											"pm.environment.set(\"PropertyRouteEngineValue\",fieldDataValue.Partner.PropertyRouteEngineValue)\r",
											"\r",
											"\r",
											"//format YYYYMMDDHHMMSSS\r",
											"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
											"// console.log('currentTmestamp',currentTmestamp);\r",
											"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- statusCodeList --------------//\r",
											"//set variable to statusCodeList JSON.parse\r",
											"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
											"//set global variable to statusCode 200\r",
											"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
											"//set global variable to statusCode 201\r",
											"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
											"\r",
											"//---------------- resultCodeList --------------//\r",
											"//set variable to resultCodeList JSON.parse\r",
											"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
											"//set global variable to resultCode \"20000\"\r",
											"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
											"//set global variable to resultCode \"20100\"\r",
											"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
											"\r",
											"//---------------- resultDescriptionSuccessList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
											"//set global variable to resultDescription \"SignInProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
											"//set global variable to resultDescription \"CreatePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
											"//set global variable to resultDescription \"RemovePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
											"//set global variable to resultDescription \"InquiryPartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionInquiryPartner\", resultDescriptionSuccessList.resultDescriptionInquiryPartner);\r",
											"\r",
											"//---------------- HeaderList --------------//\r",
											"//set variable to HeaderList JSON.parse\r",
											"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
											"//---------------- set globals Other --------------//\r",
											"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
											"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
											"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
											"//set global variable to kbn-versio \"7.5.1\"\r",
											"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Signin_ --------------//\r",
											"//set global variable to x_ais_OrderRef \"Signin_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals CreatePartner --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
											"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
											"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
											"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set globals Purchase --------------//\r",
											"//set global variable to x_ais_OrderRef \"InquiryPartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_InquiryPartner\", HeaderList.Partner.x_ais_OrderRef_InquiryPartner);\r",
											"//set global variable to x_ais_OrderRef \"InquiryPartnerfail_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_InquiryPartner_fail\", HeaderList.Partner.x_ais_OrderRef_InquiryPartner_fail);\r",
											"//set global variable to x_ais_OrderDesc \"InquiryPurchase\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_InquiryPartner\", HeaderList.Partner.x_ais_OrderDesc_InquiryPartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultCode \"20100\"\r",
											"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
											"//get global variable to resultDescription \"SignInProcess is Success\"\r",
											"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
											"//get global variable to resultDescription \"CreatePartner is Success\"\r",
											"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
											"\r",
											"\r",
											"//---------------- urlRouteList --------------//\r",
											"//set variable to urlRouteList JSON.parse\r",
											"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
											"//---------------- set url Create --------------//\r",
											"//set global variable to url \"/api/v1/auth/signin\"\r",
											"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
											"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
											"\r",
											"//---------------- get url Create --------------//\r",
											"//get global variable to url \"/api/v1/auth/signin\"\r",
											"var urlSignin = pm.globals.get(\"urlSignin\");\r",
											"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
											"\r",
											"//---------------- set url Remove --------------//\r",
											"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"Signin_\"\r",
											"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
											"\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"// Signin get token\r",
											" Signin = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username,\r",
											"                password:Password\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"\r",
											"        //set random_number\r",
											"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
											"        //set PartnerName\r",
											"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
											"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
											"        //set MerchantContact\r",
											"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
											"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
											"        // set CPID\r",
											"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
											"        pm.environment.set(\"CPID\", CPIDValue)\r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreatePartner\r",
											" CreatePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreatePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreatePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
											"                \"PartnerType\": pm.environment.get(\"PartnerTypeValue\"),\r",
											"                \"PartnerDetail\": {\r",
											"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
											"                    \"CPID\": pm.environment.get(\"CPID\")\r",
											"                },\r",
											"                \"Property\": {\r",
											"                    \"RouteEngine\": pm.environment.get(\"PropertyRouteEngineValue\") //false\r",
											"                }\r",
											"            })\r",
											"        };\r",
											"\r",
											"        \r",
											"        \r",
											"        let optionsCreatePartner = {\r",
											"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreatePartner,\r",
											"            body: httpRequestCreatePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsCreatePartner);\r",
											"        let jsonDataCreatePartner = await response.json();\r",
											"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
											"    \r",
											"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreatePartner is Success\r",
											"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
											"        });\r",
											"\r",
											"        //GetResponse_PartnerId\r",
											"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
											"\r",
											"        //GetResponse_CustomerId\r",
											"        pm.environment.set(\"GetResponse_CustomerId\", jsonDataCreatePartner.PartnerInfo.CustomerId);\r",
											"        \r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"Signin();\r",
											"setTimeout(async function(){await CreatePartner();}, 5000);\r",
											"setTimeout(async function(){}, 6000); \r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-ais-UserName",
										"type": "text",
										"value": "{{x_ais_UserName_AisPartner}}"
									},
									{
										"key": "x-ais-OrderRef",
										"value": "{{x_ais_OrderRef_InquiryPartner}}{{current_timestamp}}"
									},
									{
										"key": "x-ais-OrderDesc",
										"type": "text",
										"value": "{{x_ais_OrderDesc_InquiryPartner}}"
									},
									{
										"key": "x-ais-AccessToken",
										"value": "{{Bearer}} {{AccessToken}}"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"PartnerId\": \"{{GetResponse_PartnerId}}\"\r\n}"
								},
								"url": {
									"raw": "{{url}}{{provisioningapis}}/api/v1/Partner/InquiryPartner",
									"host": [
										"{{url}}{{provisioningapis}}"
									],
									"path": [
										"api",
										"v1",
										"Partner",
										"InquiryPartner"
									]
								},
								"description": "Type:Desire"
							},
							"response": []
						},
						{
							"name": "InquiryPartner_TST_F5_0_2_002_Error_PartnerIdNotObjectId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"InquiryPartner_\"\r",
											"var x_ais_OrderRef_InquiryPartner = pm.globals.get(\"x_ais_OrderRef_InquiryPartner\");\r",
											"console.log(\"x_ais_OrderRef_InquiryPartner_fail : : : \", pm.globals.get(\"x_ais_OrderRef_InquiryPartner_fail\"))\r",
											"//get global variable to x_ais_OrderRef \"InquiryPartnerfail_\"\r",
											"var x_ais_OrderRef_InquiryPartner_fail = pm.globals.get(\"x_ais_OrderRef_InquiryPartner_fail\");\r",
											"console.log(\"x_ais_OrderRef_InquiryPartner_fail : :\", x_ais_OrderRef_InquiryPartner_fail)\r",
											"//get global variable to x_ais_OrderDesc \"InquiryPartner\"\r",
											"var x_ais_OrderDesc_InquiryPartner = pm.globals.get(\"x_ais_OrderDesc_InquiryPartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Remove --------------//\r",
											"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
											"\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultDescription \"RemovePartner is Success\"\r",
											"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"//get global variable to statusCode 403\r",
											"var statusCodeForbidden = pm.globals.get(\"statusCodeForbidden\");\r",
											"//get global variable to resultCode \"40300\"\r",
											"var resultCodeForbiddenMissingOrInvalidParameter = pm.globals.get(\"resultCodeForbiddenMissingOrInvalidParameter\");\r",
											"//get global variable to resultDescription \"The PartnerId Field Is Not ObjectId\"\r",
											"var resultDescriptionThePartnerIdFieldIsNotObjectId = pm.globals.get(\"resultDescriptionThePartnerIdFieldIsNotObjectId\");\r",
											"\r",
											"pm.test(\"InquiryPartner : Status code is \" + statusCodeForbidden, function () {\r",
											"    pm.response.to.have.status(statusCodeForbidden);\r",
											"});\r",
											"\r",
											"pm.test('InquiryPartner : operationStatus code is '+'\"'+ resultCodeForbiddenMissingOrInvalidParameter +'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeForbiddenMissingOrInvalidParameter);\r",
											"});\r",
											"\r",
											"pm.test('InquiryPartner : operationStatus description is '+'\"'+ resultDescriptionThePartnerIdFieldIsNotObjectId+'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionThePartnerIdFieldIsNotObjectId);\r",
											"});\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"// RemovePartner\r",
											" RemovePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemovePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemovePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsRemovePartner = {\r",
											"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemovePartner,\r",
											"            body: httpRequestRemovePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request RemovePartner');\r",
											"        let response = await reqPromise(optionsRemovePartner);\r",
											"        let jsonDataRemovePartner = await response.json();\r",
											"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
											"    \r",
											"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemovePartner is Success\r",
											"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"//---------------- LogDefaultValue --------------//\r",
											"//set variable to LogDefaultValue JSON.parse\r",
											"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
											"// console.log('LogDefaultValue',LogDefaultValue);\r",
											"//---------------- set globals Other --------------//\r",
											"\r",
											"var SearchLog = LogDefaultValue.SearchLog;\r",
											"// console.log('SearchLog',SearchLog);\r",
											"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
											"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
											"var kbn_version = SearchLog.header.kbn_version;\r",
											"var authorization = SearchLog.header.Authorization;\r",
											"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
											"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
											"var namespace = LogDefaultValue.Other.namespace;\r",
											"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
											"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
											"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
											"var methodPost = LogDefaultValue.Other.methodPost;\r",
											"\r",
											"// Detail\r",
											"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
											"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
											"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
											"\r",
											"// Summary\r",
											"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
											"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
											"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
											"\r",
											"// ProvisioningAPIs [Partner]\r",
											"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
											"var cmdName = LogDefaultValue.Provisioning.Partner.cmdNameInquiryPartner;\r",
											"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
											"var containerId = LogDefaultValue.Provisioning.containerId;\r",
											"var requestObjectUrlStaging = LogDefaultValue.Provisioning.Partner.requestObjectUrlInquiryPartnerMgStaging;\r",
											"\r",
											"// Check CDR (Summary Log) and EDR (Detail Log)\r",
											"SearchLogFindTid = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSearchLogFindTid = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization' : authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = x_ais_OrderRef_InquiryPartner_fail + current_timestamp;\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch : 1\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestSearchLogFindTid = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"\r",
											"        let optionsSearchLogFindTid = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptSearchLogFindTid,\r",
											"            body: httpRequestSearchLogFindTid\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsSearchLogFindTid);\r",
											"        let jsonDataSearchLogFindTid = await response.json();\r",
											"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
											"\r",
											"        // //200\r",
											"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"\r",
											"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
											"        console.log('hits',hits)\r",
											"  \r",
											"        // find tid\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            // let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"        \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            if(applicationNameValue == applicationName){\r",
											"                let tid = hits[i]._source.cauldron.tid;\r",
											"                pm.environment.set(\"tid\", tid);\r",
											"                break;\r",
											"           }\r",
											"        }\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"CheckLog = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCheckLog = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = pm.environment.get(\"tid\");\r",
											"\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch : 2\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestCheckLog = {\r",
											"            mode: 'raw',\r",
											"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"        let optionsCheckLog = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptCheckLog,\r",
											"            body: httpRequestCheckLog\r",
											"        }; \r",
											"        let response = await reqPromise(optionsCheckLog);\r",
											"        let jsonDataCheckLog = await response.json();\r",
											"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
											"        \r",
											"        // //200\r",
											"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });     \r",
											"        \r",
											"        let hits = jsonDataCheckLog.hits.hits\r",
											"        console.log('hits',hits)\r",
											"  \r",
											"        // find logType\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            //  let logType = hits[i]._source.cauldron.logType\r",
											"            let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"           \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            \r",
											"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
											"            // console.log('resultDataLog',resultDataLog)\r",
											"\r",
											"            let tidControl = x_ais_OrderRef_InquiryPartner_fail + current_timestamp;\r",
											"            // console.log(tidControl);\r",
											"            if(applicationNameValue == applicationName){\r",
											"                 \r",
											"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ProvisioningAPIs\r",
											"                    pm.test(\"Check Summary Log : InquiryPartner\" , function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Summary Log ( Expected = Actual) [InquiryPartner] ==================\");\r",
											"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
											"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
											"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeForbiddenMissingOrInvalidParameter);\r",
											"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionThePartnerIdFieldIsNotObjectId);\r",
											"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
											"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                         // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
											"                        console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
											"                    \r",
											"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp);\r",
											"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName);\r",
											"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeForbiddenMissingOrInvalidParameter);\r",
											"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionThePartnerIdFieldIsNotObjectId);\r",
											"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp);\r",
											"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary);\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);  \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace);\r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName);\r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId);\r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
											"                        pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
											"               \r",
											"\r",
											"                    }); \r",
											"                }\r",
											"\r",
											"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ProvisioningAPIs\r",
											"\r",
											"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
											"                    // console.log('endPointNameValue ',endPointNameValue)\r",
											"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [InquiryPartner]\", function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Detail Log ( Expected = Actual) [InquiryPartner] ==================\");\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
											"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
											"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
											"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
											"\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
											"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
											"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
											"\r",
											"                        if( endPointNameValue == endPointNameProvisioningAPIs){     //\"endPointName\":\"ProvisioningAPIs\"\r",
											"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs); \r",
											"                        \r",
											"                            // check requestObject\r",
											"                            // \"requestObject\":\"{ \\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Partner/InquiryPartner\\\", \\\"method\\\":\\\"POST\\\", \\\"headers\\\":{ \\\"x-ais-username\\\":\\\"AisPartner\\\", \\\"x-ais-orderref\\\":\\\"InquiryPartnerfail_202104271404468\\\", \\\"x-ais-orderdesc\\\":\\\"InquiryPartner\\\", \\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAGz3tsie+KV1En0G6zk5Y8GPoXDj+tHTehGJW8SXArxaUIlAkkY2KW0\\\" }, \\\"body\\\":{ \\\"PartnerId\\\":\\\"6087bfbbe14c9c0001380d17xx\\\" }\r",
											"                            \r",
											"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
											"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
											"\r",
											"\r",
											"                            let url = urlCheckLog + requestObjectUrlStaging; \r",
											"                            let x_ais_orderref = x_ais_OrderRef_InquiryPartner_fail + current_timestamp;\r",
											"                            let x_ais_orderdesc = x_ais_OrderDesc_InquiryPartner;\r",
											"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken\");\r",
											"                            let PartnerId = pm.environment.get(\"GetResponse_PartnerId\")+pm.environment.get(\"Value_UpdatePartner_TST_F5_0_2_002_PartnerId\"); \r",
											"\r",
											"                            \r",
											"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
											"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerId).to.eql(PartnerId);\r",
											"\r",
											"\r",
											"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
											"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
											"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
											"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
											"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
											"                            console.log(\"resquest.body.PartnerId : \" + jsonParseRequestObject.body.PartnerId + \" = \" + PartnerId);\r",
											"\r",
											"                            // check responseObject\r",
											"                            // \"responseObject\":\"{ \\\"OperationStatus\\\":{ \\\"Code\\\":\\\"40300\\\", \\\"Description\\\":\\\"The PartnerId field is not Object Id.\\\" }\r",
											"\r",
											"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeForbiddenMissingOrInvalidParameter);  \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionThePartnerIdFieldIsNotObjectId);  \r",
											"\r",
											"                            console.log(\"response.PartnerInfo.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeForbiddenMissingOrInvalidParameter);\r",
											"                            console.log(\"response.PartnerInfo.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionThePartnerIdFieldIsNotObjectId);\r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"setTimeout(function(){SearchLogFindTid();}, 7000); \r",
											"setTimeout(function(){CheckLog();}, 20000); \r",
											"setTimeout(function(){RemovePartner();}, 30000); \r",
											"setTimeout(function(){\r",
											"pm.environment.unset(\"current_timestamp\");\r",
											"pm.environment.unset(\"AccessToken\");\r",
											"pm.environment.unset(\"random_number\");\r",
											"pm.environment.unset(\"PartnerName\");\r",
											"pm.environment.unset(\"MerchantContact\");\r",
											"pm.environment.unset(\"CPID\");\r",
											"pm.environment.unset(\"tid\");\r",
											"pm.environment.unset(\"GetResponse_PartnerId\");\r",
											"pm.environment.unset(\"GetResponse_CustomerId\");\r",
											"pm.environment.unset(\"PartnerTypeValue\");\r",
											"pm.environment.unset(\"PropertyRouteEngineValue\");\r",
											"pm.environment.unset(\"Value_UpdatePartner_TST_F5_0_2_002_PartnerId\");\r",
											"\r",
											"}, 45000);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var Username = pm.environment.get(\"Username\");\r",
											"var Password = pm.environment.get(\"Password\");\r",
											"\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"\r",
											"pm.environment.set(\"PartnerTypeValue\",fieldDataValue.Partner.PartnerTypeValue)\r",
											"pm.environment.set(\"PropertyRouteEngineValue\",fieldDataValue.Partner.PropertyRouteEngineValue)\r",
											"pm.environment.set(\"Value_UpdatePartner_TST_F5_0_2_002_PartnerId\",fieldDataValue.Provisioning.Partner.InquiryPartner.Value_UpdatePartner_TST_F5_0_2_002_PartnerId)\r",
											"\r",
											"\r",
											"//format YYYYMMDDHHMMSSS\r",
											"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
											"// console.log('currentTmestamp',currentTmestamp);\r",
											"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- statusCodeList --------------//\r",
											"//set variable to statusCodeList JSON.parse\r",
											"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
											"//set global variable to statusCode 200\r",
											"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
											"//set global variable to statusCode 201\r",
											"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
											"//set global variable to statusCode 403\r",
											"pm.globals.set(\"statusCodeForbidden\", statusCodeList.statusCodeForbidden);\r",
											"\r",
											"//---------------- resultCodeList --------------//\r",
											"//set variable to resultCodeList JSON.parse\r",
											"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
											"//set global variable to resultCode \"20000\"\r",
											"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
											"//set global variable to resultCode \"20100\"\r",
											"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
											"//set global variable to resultCode \"40300\"\r",
											"pm.globals.set(\"resultCodeForbiddenMissingOrInvalidParameter\", resultCodeList.resultCodeForbiddenMissingOrInvalidParameter);\r",
											"\r",
											"//---------------- resultDescriptionSuccessList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
											"//set global variable to resultDescription \"SignInProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
											"//set global variable to resultDescription \"CreatePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
											"//set global variable to resultDescription \"RemovePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
											"\r",
											"\r",
											"\r",
											"//---------------- resultDescriptionErrorList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
											"//set global variable to resultDescription \"The PartnerId field is not Object Id.\"\r",
											"pm.globals.set(\"resultDescriptionThePartnerIdFieldIsNotObjectId\", resultDescriptionErrorList.resultDescriptionThePartnerIdFieldIsNotObjectId);\r",
											"\r",
											"//---------------- HeaderList --------------//\r",
											"//set variable to HeaderList JSON.parse\r",
											"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
											"//---------------- set globals Other --------------//\r",
											"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
											"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
											"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
											"//set global variable to kbn-versio \"7.5.1\"\r",
											"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Signin_ --------------//\r",
											"//set global variable to x_ais_OrderRef \"Signin_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals CreatePartner --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
											"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
											"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
											"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set globals Partner --------------//\r",
											"//set global variable to x_ais_OrderRef \"InquiryPartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_InquiryPartner\", HeaderList.Partner.x_ais_OrderRef_InquiryPartner);\r",
											"//set global variable to x_ais_OrderRef \"InquiryPartnerfail_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_InquiryPartner_fail\", HeaderList.Partner.x_ais_OrderRef_InquiryPartner_fail);\r",
											"//set global variable to x_ais_OrderDesc \"InquiryPartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_InquiryPartner\", HeaderList.Partner.x_ais_OrderDesc_InquiryPartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultCode \"20100\"\r",
											"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
											"//get global variable to resultDescription \"SignInProcess is Success\"\r",
											"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
											"//get global variable to resultDescription \"CreatePartner is Success\"\r",
											"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
											"\r",
											"\r",
											"//---------------- urlRouteList --------------//\r",
											"//set variable to urlRouteList JSON.parse\r",
											"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
											"//---------------- set url Create --------------//\r",
											"//set global variable to url \"/api/v1/auth/signin\"\r",
											"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
											"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
											"\r",
											"//---------------- get url Create --------------//\r",
											"//get global variable to url \"/api/v1/auth/signin\"\r",
											"var urlSignin = pm.globals.get(\"urlSignin\");\r",
											"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
											"\r",
											"//---------------- set url Remove --------------//\r",
											"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"Signin_\"\r",
											"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
											"\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"// Signin get token\r",
											" Signin = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username,\r",
											"                password:Password\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"\r",
											"        //set random_number\r",
											"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
											"        //set PartnerName\r",
											"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
											"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
											"        //set MerchantContact\r",
											"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
											"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
											"        // set CPID\r",
											"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
											"        pm.environment.set(\"CPID\", CPIDValue)\r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreatePartner\r",
											" CreatePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreatePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreatePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
											"                \"PartnerType\": pm.environment.get(\"PartnerTypeValue\"),\r",
											"                \"PartnerDetail\": {\r",
											"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
											"                    \"CPID\": pm.environment.get(\"CPID\")\r",
											"                },\r",
											"                \"Property\": {\r",
											"                    \"RouteEngine\": pm.environment.get(\"PropertyRouteEngineValue\") //false\r",
											"                }\r",
											"            })\r",
											"        };\r",
											"\r",
											"        console.log(\"httpRequestCreatePartner : :\",httpRequestCreatePartner)\r",
											"        \r",
											"        let optionsCreatePartner = {\r",
											"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreatePartner,\r",
											"            body: httpRequestCreatePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsCreatePartner);\r",
											"        let jsonDataCreatePartner = await response.json();\r",
											"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
											"    \r",
											"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreatePartner is Success\r",
											"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
											"        });\r",
											"\r",
											"        //GetResponse_PartnerId\r",
											"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
											"\r",
											"        //GetResponse_CustomerId\r",
											"        pm.environment.set(\"GetResponse_CustomerId\", jsonDataCreatePartner.PartnerInfo.CustomerId);\r",
											"        \r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"Signin();\r",
											"setTimeout(async function(){await CreatePartner();}, 5000);\r",
											"setTimeout(async function(){}, 6000); \r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-ais-UserName",
										"type": "text",
										"value": "{{x_ais_UserName_AisPartner}}"
									},
									{
										"key": "x-ais-OrderRef",
										"value": "{{x_ais_OrderRef_InquiryPartner_fail}}{{current_timestamp}}"
									},
									{
										"key": "x-ais-OrderDesc",
										"type": "text",
										"value": "{{x_ais_OrderDesc_InquiryPartner}}"
									},
									{
										"key": "x-ais-AccessToken",
										"value": "{{Bearer}} {{AccessToken}}"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"PartnerId\": \"{{GetResponse_PartnerId}}{{Value_UpdatePartner_TST_F5_0_2_002_PartnerId}}\"\r\n}"
								},
								"url": {
									"raw": "{{url}}{{provisioningapis}}/api/v1/Partner/InquiryPartner",
									"host": [
										"{{url}}{{provisioningapis}}"
									],
									"path": [
										"api",
										"v1",
										"Partner",
										"InquiryPartner"
									]
								},
								"description": "Type:Desire"
							},
							"response": []
						},
						{
							"name": "InquiryPartner_TST_F5_0_2_003_Error_SupplierAdminRoleInvalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"InquiryPartner_\"\r",
											"var x_ais_OrderRef_InquiryPartner = pm.globals.get(\"x_ais_OrderRef_InquiryPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"InquiryPartner\"\r",
											"var x_ais_OrderDesc_InquiryPartner = pm.globals.get(\"x_ais_OrderDesc_InquiryPartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Remove --------------//\r",
											"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
											"\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultDescription \"RemovePartner is Success\"\r",
											"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
											"\r",
											"//get global variable to statusCode 403\r",
											"var statusCodeForbidden = pm.globals.get(\"statusCodeForbidden\");\r",
											"//get global variable to resultCode \"40308\"\r",
											"var resultCodeRoleInvalid = pm.globals.get(\"resultCodeRoleInvalid\");\r",
											"//get global variable to resultDescription \"Role Invalid\"\r",
											"var resultDescriptionRoleInvalid = pm.globals.get(\"resultDescriptionRoleInvalid\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"//get global variable to resultDescription \"InquiryPartner is Success\"\r",
											"var resultDescriptionInquiryPartner = pm.globals.get(\"resultDescriptionInquiryPartner\");\r",
											"\r",
											"pm.test(\"InquiryPartner : Status code is \" + statusCodeForbidden, function () {\r",
											"    pm.response.to.have.status(statusCodeForbidden);\r",
											"});\r",
											"\r",
											"pm.test('InquiryPartner : operationStatus code is '+'\"'+ resultCodeRoleInvalid +'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeRoleInvalid);\r",
											"});\r",
											"\r",
											"pm.test('InquiryPartner : operationStatus description is '+'\"'+ resultDescriptionRoleInvalid+'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionRoleInvalid);\r",
											"});\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"// RemovePartner\r",
											" RemovePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemovePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemovePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsRemovePartner = {\r",
											"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemovePartner,\r",
											"            body: httpRequestRemovePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request RemovePartner');\r",
											"        let response = await reqPromise(optionsRemovePartner);\r",
											"        let jsonDataRemovePartner = await response.json();\r",
											"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
											"    \r",
											"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemovePartner is Success\r",
											"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"//---------------- LogDefaultValue --------------//\r",
											"//set variable to LogDefaultValue JSON.parse\r",
											"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
											"// console.log('LogDefaultValue',LogDefaultValue);\r",
											"//---------------- set globals Other --------------//\r",
											"\r",
											"var SearchLog = LogDefaultValue.SearchLog;\r",
											"// console.log('SearchLog',SearchLog);\r",
											"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
											"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
											"var kbn_version = SearchLog.header.kbn_version;\r",
											"var authorization = SearchLog.header.Authorization;\r",
											"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
											"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
											"var namespace = LogDefaultValue.Other.namespace;\r",
											"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
											"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
											"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
											"var methodPost = LogDefaultValue.Other.methodPost;\r",
											"\r",
											"// Detail\r",
											"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
											"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
											"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
											"\r",
											"// Summary\r",
											"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
											"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
											"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
											"\r",
											"// ProvisioningAPIs [Partner]\r",
											"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
											"var cmdName = LogDefaultValue.Provisioning.Partner.cmdNameInquiryPartner;\r",
											"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
											"var containerId = LogDefaultValue.Provisioning.containerId;\r",
											"var requestObjectUrlStaging = LogDefaultValue.Provisioning.Partner.requestObjectUrlInquiryPartnerMgStaging;\r",
											"\r",
											"// Check CDR (Summary Log) and EDR (Detail Log)\r",
											"SearchLogFindTid = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSearchLogFindTid = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization' : authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = x_ais_OrderRef_InquiryPartner + current_timestamp;\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch : : 1\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestSearchLogFindTid = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"\r",
											"        let optionsSearchLogFindTid = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptSearchLogFindTid,\r",
											"            body: httpRequestSearchLogFindTid\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsSearchLogFindTid);\r",
											"        let jsonDataSearchLogFindTid = await response.json();\r",
											"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
											"\r",
											"        // //200\r",
											"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"\r",
											"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
											"        console.log('hits',hits)\r",
											"  \r",
											"        // find tid\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            // let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"        \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            if(applicationNameValue == applicationName){\r",
											"                let tid = hits[i]._source.cauldron.tid;\r",
											"                pm.environment.set(\"tid\", tid);\r",
											"                break;\r",
											"           }\r",
											"        }\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"CheckLog = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCheckLog = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = pm.environment.get(\"tid\");\r",
											"\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch : : : 2\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestCheckLog = {\r",
											"            mode: 'raw',\r",
											"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"        let optionsCheckLog = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptCheckLog,\r",
											"            body: httpRequestCheckLog\r",
											"        }; \r",
											"        let response = await reqPromise(optionsCheckLog);\r",
											"        let jsonDataCheckLog = await response.json();\r",
											"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
											"        \r",
											"        // //200\r",
											"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });     \r",
											"        \r",
											"        let hits = jsonDataCheckLog.hits.hits\r",
											"        console.log('hits',hits)\r",
											"  \r",
											"        // find logType\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            //  let logType = hits[i]._source.cauldron.logType\r",
											"            let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"           \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            \r",
											"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
											"            // console.log('resultDataLog',resultDataLog)\r",
											"\r",
											"            let tidControl = x_ais_OrderRef_InquiryPartner + current_timestamp;\r",
											"            // console.log(tidControl);\r",
											"            if(applicationNameValue == applicationName){\r",
											"                 \r",
											"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ProvisioningAPIs\r",
											"                     pm.test(\"Check Summary Log : InquiryPartner\" , function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Summary Log ( Expected = Actual) [InquiryPartner] ==================\");\r",
											"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
											"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
											"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeRoleInvalid);\r",
											"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionRoleInvalid);\r",
											"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
											"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                         // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
											"                        // console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
											"                    \r",
											"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp);\r",
											"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName);\r",
											"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeRoleInvalid);\r",
											"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionRoleInvalid);\r",
											"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp);\r",
											"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary);\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);  \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace);\r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName);\r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId);\r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
											"                        // pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
											"\r",
											"                        // check custom\r",
											"                        // \"custom\":[ { \"no\":\"1\", \"endPointName\":\"db.TenantsCollection\", \"responseStatus\":\"Success:InquiryTenant was successfully.\", \"processTime\":0.1549 }, { \"no\":\"2\", \"endPointName\":\"db.AccountsCollection\", \"responseStatus\":\"Success:InquiryAccount was successfully.\", \"processTime\":2.0419 } ],\r",
											"\r",
											"                        let custom = resultDataLog.custom;\r",
											"                        console.log(\"custom : : :\",custom)\r",
											"                        // let countCustom = custom.length;\r",
											"\r",
											"                        // // [\"db.TenantsCollection\",\"db.AccountsCollection\"],\r",
											"                        // let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_InquiryPartner;\r",
											"                        // // [\"Success:InquiryTenant was successfully.\",\"Success:InquiryAccount was successfully.\"]\r",
											"                        // let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_InquiryPartner;\r",
											"                        // let countCustomStep = dataEndPointName.length;\r",
											"                        // pm.expect(countCustom).to.eql(countCustomStep); \r",
											"                        // for(let i=0;i<countCustomStep;i++){\r",
											"                        //     let no = custom[i].no;\r",
											"                        //     let valueEndPointName = custom[i].endPointName;\r",
											"                        //     let valueResponseStatus = custom[i].responseStatus;\r",
											"                        //     // console.log(\"i\",i);\r",
											"                        //     // console.log(\"valueEndPointName\",valueEndPointName);\r",
											"                        //     // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
											"                           \r",
											"                        //     console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep );\r",
											"                        //     console.log(\"custom.no : \" + no + \" = \" + (i+1).toString() );\r",
											"                        //     console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i] );\r",
											"                        //     console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i] );\r",
											"                           \r",
											"                        //     pm.expect(no).to.eql((i+1).toString()); \r",
											"                        //     pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
											"                        //     pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]);  \r",
											"                        // }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"\r",
											"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ProvisioningAPIs\r",
											"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
											"                    // console.log('endPointNameValue ',endPointNameValue)\r",
											"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [InquiryPartner]\", function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Detail Log ( Expected = Actual) [InquiryPartner] ==================\");\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
											"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
											"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
											"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
											"\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
											"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
											"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
											"\r",
											"                        if( endPointNameValue == endPointNameProvisioningAPIs){     //\"endPointName\":\"ProvisioningAPIs\"\r",
											"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs); \r",
											"                        \r",
											"                            // check requestObject\r",
											"                            // \"requestObject\":\"{ \\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Partner/InquiryPartner\\\", \\\"method\\\":\\\"POST\\\", \\\"headers\\\":{ \\\"x-ais-username\\\":\\\"AisPartner\\\", \\\"x-ais-orderref\\\":\\\"InquiryPartner_202104271304448\\\", \\\"x-ais-orderdesc\\\":\\\"InquiryPartner\\\", \\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAGz3tsie+KV1KmIuQEH/h4geIWC9KzcyZbsXbdYpFNnXEIlAkkY2KW0\\\" }, \\\"body\\\":{ \\\"PartnerId\\\":\\\"6087af78e14c9c00013805d4\\\" }\r",
											"                            \r",
											"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
											"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
											"\r",
											"\r",
											"\r",
											"                            let url = urlCheckLog + requestObjectUrlStaging;  \r",
											"                            let x_ais_orderref = x_ais_OrderRef_InquiryPartner + current_timestamp;\r",
											"                            let x_ais_orderdesc = x_ais_OrderDesc_InquiryPartner;\r",
											"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken2\");\r",
											"                            let PartnerId = pm.environment.get(\"GetResponse_PartnerId\");\r",
											"  \r",
											"                            \r",
											"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
											"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerId).to.eql(PartnerId);\r",
											"\r",
											"\r",
											"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
											"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
											"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
											"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
											"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
											"                            console.log(\"resquest.body.PartnerId : \" + jsonParseRequestObject.body.PartnerId + \" = \" + PartnerId);\r",
											"\r",
											"\r",
											"                            // check responseObject\r",
											"                            // \"responseObject\":\"{ \\\"partnerInfo\\\":[ { \\\"CustomerId\\\":\\\"6087af78e14c9c00013805d3\\\", \\\"PartnerId\\\":\\\"6087af78e14c9c00013805d4\\\", \\\"PartnerName\\\":\\\"Jida_TestPartnerName542459\\\", \\\"PartnerType\\\":[ \\\"Supplier\\\", \\\"Customer\\\" ], \\\"PartnerDetail\\\":{ \\\"MerchantContact\\\":\\\"Jida_TestMerchantContact@ais.co.th\\\", \\\"CPID\\\":\\\"Jida_TesCPID@ais.co.th\\\" }, \\\"AccountInfo\\\":[ ], \\\"Property\\\":{ \\\"RouteEngine\\\":false }, \\\"CreateDate\\\":\\\"2021-04-27T13:30:16.742+07:00\\\" } ], \\\"_Metadata\\\":{ \\\"TotalCount\\\":1, \\\"Limit\\\":10000, \\\"OffSet\\\":0 }, \\\"OperationStatus\\\":{ \\\"Code\\\":\\\"20000\\\", \\\"Description\\\":\\\"InquiryPartner is Success\\\" }\r",
											"\r",
											"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);   \r",
											"                            // console.log(\"jsonParseResponseObject : : :\", jsonParseResponseObject)\r",
											"\r",
											"           \r",
											"                            console.log(\"response.PartnerInfo.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeRoleInvalid);\r",
											"                            console.log(\"response.PartnerInfo.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionRoleInvalid);\r",
											"                               \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeRoleInvalid);  \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionRoleInvalid);  ;\r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"setTimeout(function(){SearchLogFindTid();}, 8000); \r",
											"setTimeout(function(){CheckLog();}, 20000); \r",
											"setTimeout(function(){RemovePartner();}, 30000); \r",
											"\r",
											"setTimeout(function(){\r",
											"pm.environment.unset(\"current_timestamp\");\r",
											"pm.environment.unset(\"AccessToken\");\r",
											"pm.environment.unset(\"random_number\");\r",
											"pm.environment.unset(\"PartnerName\");\r",
											"pm.environment.unset(\"MerchantContact\");\r",
											"pm.environment.unset(\"CPID\");\r",
											"pm.environment.unset(\"tid\");\r",
											"pm.environment.unset(\"GetResponse_PartnerId\");\r",
											"pm.environment.unset(\"GetResponse_CustomerId\");\r",
											"pm.environment.unset(\"PartnerTypeValue\");\r",
											"pm.environment.unset(\"PropertyRouteEngineValue\");\r",
											"}, 45000);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var Username = pm.environment.get(\"Username\");\r",
											"var Password = pm.environment.get(\"Password\");\r",
											"var Username2 = pm.environment.get(\"Username_SupplierAdmin\");\r",
											"var Password2 = pm.environment.get(\"Password_SupplierAdmin\");\r",
											"\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"\r",
											"pm.environment.set(\"PartnerTypeValue\",fieldDataValue.Partner.PartnerTypeValue)\r",
											"pm.environment.set(\"PropertyRouteEngineValue\",fieldDataValue.Partner.PropertyRouteEngineValue)\r",
											"\r",
											"\r",
											"//format YYYYMMDDHHMMSSS\r",
											"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
											"\r",
											"// console.log('currentTmestamp',currentTmestamp);\r",
											"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
											"\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- statusCodeList --------------//\r",
											"//set variable to statusCodeList JSON.parse\r",
											"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
											"//set global variable to statusCode 200\r",
											"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
											"//set global variable to statusCode 201\r",
											"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
											"//set global variable to statusCode 403\r",
											"pm.globals.set(\"statusCodeForbidden\", statusCodeList.statusCodeForbidden);\r",
											"\r",
											"//---------------- resultCodeList --------------//\r",
											"//set variable to resultCodeList JSON.parse\r",
											"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
											"//set global variable to resultCode \"20000\"\r",
											"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
											"//set global variable to resultCode \"20100\"\r",
											"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
											"//set global variable to resultCode \"40308\"\r",
											"pm.globals.set(\"resultCodeRoleInvalid\", resultCodeList.resultCodeRoleInvalid);\r",
											"\r",
											"//---------------- resultDescriptionSuccessList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
											"//set global variable to resultDescription \"SignInProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
											"//set global variable to resultDescription \"CreatePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
											"//set global variable to resultDescription \"RemovePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
											"//set global variable to resultDescription \"InquiryPartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionInquiryPartner\", resultDescriptionSuccessList.resultDescriptionInquiryPartner);\r",
											"\r",
											"//---------------- resultDescriptionErrorList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
											"//set global variable to resultDescription \"Role Invalid\"\r",
											"pm.globals.set(\"resultDescriptionRoleInvalid\", resultDescriptionErrorList.resultDescriptionRoleInvalid);\r",
											"\r",
											"//---------------- HeaderList --------------//\r",
											"//set variable to HeaderList JSON.parse\r",
											"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
											"//---------------- set globals Other --------------//\r",
											"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
											"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
											"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
											"//set global variable to kbn-versio \"7.5.1\"\r",
											"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Signin_ --------------//\r",
											"//set global variable to x_ais_OrderRef \"Signin_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals CreatePartner --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
											"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
											"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
											"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set globals Purchase --------------//\r",
											"//set global variable to x_ais_OrderRef \"InquiryPartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_InquiryPartner\", HeaderList.Partner.x_ais_OrderRef_InquiryPartner);\r",
											"//set global variable to x_ais_OrderRef \"InquiryPartnerfail_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_InquiryPartner_fail\", HeaderList.Partner.x_ais_OrderRef_InquiryPartner_fail);\r",
											"//set global variable to x_ais_OrderDesc \"InquiryPurchase\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_InquiryPartner\", HeaderList.Partner.x_ais_OrderDesc_InquiryPartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultCode \"20100\"\r",
											"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
											"//get global variable to resultDescription \"SignInProcess is Success\"\r",
											"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
											"//get global variable to resultDescription \"CreatePartner is Success\"\r",
											"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
											"\r",
											"\r",
											"//---------------- urlRouteList --------------//\r",
											"//set variable to urlRouteList JSON.parse\r",
											"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
											"//---------------- set url Create --------------//\r",
											"//set global variable to url \"/api/v1/auth/signin\"\r",
											"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
											"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
											"\r",
											"//---------------- get url Create --------------//\r",
											"//get global variable to url \"/api/v1/auth/signin\"\r",
											"var urlSignin = pm.globals.get(\"urlSignin\");\r",
											"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
											"\r",
											"//---------------- set url Remove --------------//\r",
											"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"Signin_\"\r",
											"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
											"\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"// Signin get token ROOT ADMIN\r",
											" Signin = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username,\r",
											"                password:Password\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"\r",
											"        //set random_number\r",
											"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
											"        //set PartnerName\r",
											"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
											"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
											"        //set MerchantContact\r",
											"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
											"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
											"        // set CPID\r",
											"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
											"        pm.environment.set(\"CPID\", CPIDValue)\r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreatePartner\r",
											" CreatePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreatePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreatePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
											"                \"PartnerType\": pm.environment.get(\"PartnerTypeValue\"),\r",
											"                \"PartnerDetail\": {\r",
											"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
											"                    \"CPID\": pm.environment.get(\"CPID\")\r",
											"                },\r",
											"                \"Property\": {\r",
											"                    \"RouteEngine\": pm.environment.get(\"PropertyRouteEngineValue\") //false\r",
											"                }\r",
											"            })\r",
											"        };\r",
											"\r",
											"        \r",
											"        \r",
											"        let optionsCreatePartner = {\r",
											"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreatePartner,\r",
											"            body: httpRequestCreatePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsCreatePartner);\r",
											"        let jsonDataCreatePartner = await response.json();\r",
											"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
											"    \r",
											"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreatePartner is Success\r",
											"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
											"        });\r",
											"\r",
											"        //GetResponse_PartnerId\r",
											"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
											"\r",
											"        //GetResponse_CustomerId\r",
											"        pm.environment.set(\"GetResponse_CustomerId\", jsonDataCreatePartner.PartnerInfo.CustomerId);\r",
											"        \r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// Signin get token\r",
											" Signin2 = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username2,\r",
											"                password:Password2\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken2\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"Signin();\r",
											"setTimeout(async function(){await CreatePartner();}, 5000);\r",
											"setTimeout(async function(){await Signin2();}, 6000);\r",
											"setTimeout(async function(){}, 7000); \r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-ais-UserName",
										"type": "text",
										"value": "{{x_ais_UserName_AisPartner}}"
									},
									{
										"key": "x-ais-OrderRef",
										"value": "{{x_ais_OrderRef_InquiryPartner}}{{current_timestamp}}"
									},
									{
										"key": "x-ais-OrderDesc",
										"type": "text",
										"value": "{{x_ais_OrderDesc_InquiryPartner}}"
									},
									{
										"key": "x-ais-AccessToken",
										"value": "{{Bearer}} {{AccessToken2}}"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"PartnerId\": \"{{GetResponse_PartnerId}}\"\r\n}"
								},
								"url": {
									"raw": "{{url}}{{provisioningapis}}/api/v1/Partner/InquiryPartner",
									"host": [
										"{{url}}{{provisioningapis}}"
									],
									"path": [
										"api",
										"v1",
										"Partner",
										"InquiryPartner"
									]
								},
								"description": "Type:Desire"
							},
							"response": []
						},
						{
							"name": "InquiryPartner_TST_F5_0_2_004_Error_CustomerAdminRoleInvalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"InquiryPartner_\"\r",
											"var x_ais_OrderRef_InquiryPartner = pm.globals.get(\"x_ais_OrderRef_InquiryPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"InquiryPartner\"\r",
											"var x_ais_OrderDesc_InquiryPartner = pm.globals.get(\"x_ais_OrderDesc_InquiryPartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Remove --------------//\r",
											"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
											"\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultDescription \"RemovePartner is Success\"\r",
											"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
											"\r",
											"//get global variable to statusCode 403\r",
											"var statusCodeForbidden = pm.globals.get(\"statusCodeForbidden\");\r",
											"//get global variable to resultCode \"40308\"\r",
											"var resultCodeRoleInvalid = pm.globals.get(\"resultCodeRoleInvalid\");\r",
											"//get global variable to resultDescription \"Role Invalid\"\r",
											"var resultDescriptionRoleInvalid = pm.globals.get(\"resultDescriptionRoleInvalid\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"//get global variable to resultDescription \"InquiryPartner is Success\"\r",
											"var resultDescriptionInquiryPartner = pm.globals.get(\"resultDescriptionInquiryPartner\");\r",
											"\r",
											"pm.test(\"InquiryPartner : Status code is \" + statusCodeForbidden, function () {\r",
											"    pm.response.to.have.status(statusCodeForbidden);\r",
											"});\r",
											"\r",
											"pm.test('InquiryPartner : operationStatus code is '+'\"'+ resultCodeRoleInvalid +'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeRoleInvalid);\r",
											"});\r",
											"\r",
											"pm.test('InquiryPartner : operationStatus description is '+'\"'+ resultDescriptionRoleInvalid+'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionRoleInvalid);\r",
											"});\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"// RemovePartner\r",
											" RemovePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemovePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemovePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsRemovePartner = {\r",
											"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemovePartner,\r",
											"            body: httpRequestRemovePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request RemovePartner');\r",
											"        let response = await reqPromise(optionsRemovePartner);\r",
											"        let jsonDataRemovePartner = await response.json();\r",
											"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
											"    \r",
											"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemovePartner is Success\r",
											"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"//---------------- LogDefaultValue --------------//\r",
											"//set variable to LogDefaultValue JSON.parse\r",
											"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
											"// console.log('LogDefaultValue',LogDefaultValue);\r",
											"//---------------- set globals Other --------------//\r",
											"\r",
											"var SearchLog = LogDefaultValue.SearchLog;\r",
											"// console.log('SearchLog',SearchLog);\r",
											"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
											"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
											"var kbn_version = SearchLog.header.kbn_version;\r",
											"var authorization = SearchLog.header.Authorization;\r",
											"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
											"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
											"var namespace = LogDefaultValue.Other.namespace;\r",
											"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
											"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
											"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
											"var methodPost = LogDefaultValue.Other.methodPost;\r",
											"\r",
											"// Detail\r",
											"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
											"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
											"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
											"\r",
											"// Summary\r",
											"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
											"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
											"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
											"\r",
											"// ProvisioningAPIs [Partner]\r",
											"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
											"var cmdName = LogDefaultValue.Provisioning.Partner.cmdNameInquiryPartner;\r",
											"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
											"var containerId = LogDefaultValue.Provisioning.containerId;\r",
											"var requestObjectUrlStaging = LogDefaultValue.Provisioning.Partner.requestObjectUrlInquiryPartnerMgStaging;\r",
											"\r",
											"// Check CDR (Summary Log) and EDR (Detail Log)\r",
											"SearchLogFindTid = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSearchLogFindTid = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization' : authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = x_ais_OrderRef_InquiryPartner + current_timestamp;\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch : : 1\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestSearchLogFindTid = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"\r",
											"        let optionsSearchLogFindTid = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptSearchLogFindTid,\r",
											"            body: httpRequestSearchLogFindTid\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsSearchLogFindTid);\r",
											"        let jsonDataSearchLogFindTid = await response.json();\r",
											"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
											"\r",
											"        // //200\r",
											"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"\r",
											"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
											"        console.log('hits',hits)\r",
											"  \r",
											"        // find tid\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            // let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"        \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            if(applicationNameValue == applicationName){\r",
											"                let tid = hits[i]._source.cauldron.tid;\r",
											"                pm.environment.set(\"tid\", tid);\r",
											"                break;\r",
											"           }\r",
											"        }\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"CheckLog = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCheckLog = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = pm.environment.get(\"tid\");\r",
											"\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch : : : 2\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestCheckLog = {\r",
											"            mode: 'raw',\r",
											"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"        let optionsCheckLog = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptCheckLog,\r",
											"            body: httpRequestCheckLog\r",
											"        }; \r",
											"        let response = await reqPromise(optionsCheckLog);\r",
											"        let jsonDataCheckLog = await response.json();\r",
											"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
											"        \r",
											"        // //200\r",
											"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });     \r",
											"        \r",
											"        let hits = jsonDataCheckLog.hits.hits\r",
											"        console.log('hits',hits)\r",
											"  \r",
											"        // find logType\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            //  let logType = hits[i]._source.cauldron.logType\r",
											"            let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"           \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            \r",
											"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
											"            // console.log('resultDataLog',resultDataLog)\r",
											"\r",
											"            let tidControl = x_ais_OrderRef_InquiryPartner + current_timestamp;\r",
											"            // console.log(tidControl);\r",
											"            if(applicationNameValue == applicationName){\r",
											"                 \r",
											"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ProvisioningAPIs\r",
											"                     pm.test(\"Check Summary Log : InquiryPartner\" , function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Summary Log ( Expected = Actual) [InquiryPartner] ==================\");\r",
											"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
											"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
											"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeRoleInvalid);\r",
											"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionRoleInvalid);\r",
											"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
											"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                         // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
											"                        // console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
											"                    \r",
											"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp);\r",
											"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName);\r",
											"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeRoleInvalid);\r",
											"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionRoleInvalid);\r",
											"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp);\r",
											"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary);\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);  \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace);\r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName);\r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId);\r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
											"                        // pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
											"\r",
											"                        // check custom\r",
											"                        // \"custom\":[ { \"no\":\"1\", \"endPointName\":\"db.TenantsCollection\", \"responseStatus\":\"Success:InquiryTenant was successfully.\", \"processTime\":0.1549 }, { \"no\":\"2\", \"endPointName\":\"db.AccountsCollection\", \"responseStatus\":\"Success:InquiryAccount was successfully.\", \"processTime\":2.0419 } ],\r",
											"\r",
											"                        let custom = resultDataLog.custom;\r",
											"                        console.log(\"custom : : :\",custom)\r",
											"                        // let countCustom = custom.length;\r",
											"\r",
											"                        // // [\"db.TenantsCollection\",\"db.AccountsCollection\"],\r",
											"                        // let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_InquiryPartner;\r",
											"                        // // [\"Success:InquiryTenant was successfully.\",\"Success:InquiryAccount was successfully.\"]\r",
											"                        // let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_InquiryPartner;\r",
											"                        // let countCustomStep = dataEndPointName.length;\r",
											"                        // pm.expect(countCustom).to.eql(countCustomStep); \r",
											"                        // for(let i=0;i<countCustomStep;i++){\r",
											"                        //     let no = custom[i].no;\r",
											"                        //     let valueEndPointName = custom[i].endPointName;\r",
											"                        //     let valueResponseStatus = custom[i].responseStatus;\r",
											"                        //     // console.log(\"i\",i);\r",
											"                        //     // console.log(\"valueEndPointName\",valueEndPointName);\r",
											"                        //     // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
											"                           \r",
											"                        //     console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep );\r",
											"                        //     console.log(\"custom.no : \" + no + \" = \" + (i+1).toString() );\r",
											"                        //     console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i] );\r",
											"                        //     console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i] );\r",
											"                           \r",
											"                        //     pm.expect(no).to.eql((i+1).toString()); \r",
											"                        //     pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
											"                        //     pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]);  \r",
											"                        // }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"\r",
											"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ProvisioningAPIs\r",
											"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
											"                    // console.log('endPointNameValue ',endPointNameValue)\r",
											"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [InquiryPartner]\", function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Detail Log ( Expected = Actual) [InquiryPartner] ==================\");\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
											"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
											"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
											"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
											"\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
											"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
											"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
											"\r",
											"                        if( endPointNameValue == endPointNameProvisioningAPIs){     //\"endPointName\":\"ProvisioningAPIs\"\r",
											"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs); \r",
											"                        \r",
											"                            // check requestObject\r",
											"                            // \"requestObject\":\"{ \\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Partner/InquiryPartner\\\", \\\"method\\\":\\\"POST\\\", \\\"headers\\\":{ \\\"x-ais-username\\\":\\\"AisPartner\\\", \\\"x-ais-orderref\\\":\\\"InquiryPartner_202104271304448\\\", \\\"x-ais-orderdesc\\\":\\\"InquiryPartner\\\", \\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAGz3tsie+KV1KmIuQEH/h4geIWC9KzcyZbsXbdYpFNnXEIlAkkY2KW0\\\" }, \\\"body\\\":{ \\\"PartnerId\\\":\\\"6087af78e14c9c00013805d4\\\" }\r",
											"                            \r",
											"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
											"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
											"\r",
											"\r",
											"\r",
											"                            let url = urlCheckLog + requestObjectUrlStaging;  \r",
											"                            let x_ais_orderref = x_ais_OrderRef_InquiryPartner + current_timestamp;\r",
											"                            let x_ais_orderdesc = x_ais_OrderDesc_InquiryPartner;\r",
											"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken2\");\r",
											"                            let PartnerId = pm.environment.get(\"GetResponse_PartnerId\");\r",
											"  \r",
											"                            \r",
											"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
											"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerId).to.eql(PartnerId);\r",
											"\r",
											"\r",
											"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
											"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
											"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
											"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
											"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
											"                            console.log(\"resquest.body.PartnerId : \" + jsonParseRequestObject.body.PartnerId + \" = \" + PartnerId);\r",
											"\r",
											"\r",
											"                            // check responseObject\r",
											"                            // \"responseObject\":\"{ \\\"partnerInfo\\\":[ { \\\"CustomerId\\\":\\\"6087af78e14c9c00013805d3\\\", \\\"PartnerId\\\":\\\"6087af78e14c9c00013805d4\\\", \\\"PartnerName\\\":\\\"Jida_TestPartnerName542459\\\", \\\"PartnerType\\\":[ \\\"Supplier\\\", \\\"Customer\\\" ], \\\"PartnerDetail\\\":{ \\\"MerchantContact\\\":\\\"Jida_TestMerchantContact@ais.co.th\\\", \\\"CPID\\\":\\\"Jida_TesCPID@ais.co.th\\\" }, \\\"AccountInfo\\\":[ ], \\\"Property\\\":{ \\\"RouteEngine\\\":false }, \\\"CreateDate\\\":\\\"2021-04-27T13:30:16.742+07:00\\\" } ], \\\"_Metadata\\\":{ \\\"TotalCount\\\":1, \\\"Limit\\\":10000, \\\"OffSet\\\":0 }, \\\"OperationStatus\\\":{ \\\"Code\\\":\\\"20000\\\", \\\"Description\\\":\\\"InquiryPartner is Success\\\" }\r",
											"\r",
											"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);   \r",
											"                            // console.log(\"jsonParseResponseObject : : :\", jsonParseResponseObject)\r",
											"\r",
											"           \r",
											"                            console.log(\"response.PartnerInfo.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeRoleInvalid);\r",
											"                            console.log(\"response.PartnerInfo.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionRoleInvalid);\r",
											"                               \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeRoleInvalid);  \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionRoleInvalid);  ;\r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"setTimeout(function(){SearchLogFindTid();}, 8000); \r",
											"setTimeout(function(){CheckLog();}, 20000); \r",
											"setTimeout(function(){RemovePartner();}, 30000); \r",
											"\r",
											"setTimeout(function(){\r",
											"pm.environment.unset(\"current_timestamp\");\r",
											"pm.environment.unset(\"AccessToken\");\r",
											"pm.environment.unset(\"random_number\");\r",
											"pm.environment.unset(\"PartnerName\");\r",
											"pm.environment.unset(\"MerchantContact\");\r",
											"pm.environment.unset(\"CPID\");\r",
											"pm.environment.unset(\"tid\");\r",
											"pm.environment.unset(\"GetResponse_PartnerId\");\r",
											"pm.environment.unset(\"GetResponse_CustomerId\");\r",
											"pm.environment.unset(\"PartnerTypeValue\");\r",
											"pm.environment.unset(\"PropertyRouteEngineValue\");\r",
											"}, 45000);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var Username = pm.environment.get(\"Username\");\r",
											"var Password = pm.environment.get(\"Password\");\r",
											"var Username2 = pm.environment.get(\"Username_CustomerAdmin\");\r",
											"var Password2 = pm.environment.get(\"Password_CustomerAdmin\");\r",
											"\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"\r",
											"pm.environment.set(\"PartnerTypeValue\",fieldDataValue.Partner.PartnerTypeValue)\r",
											"pm.environment.set(\"PropertyRouteEngineValue\",fieldDataValue.Partner.PropertyRouteEngineValue)\r",
											"\r",
											"\r",
											"//format YYYYMMDDHHMMSSS\r",
											"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
											"\r",
											"// console.log('currentTmestamp',currentTmestamp);\r",
											"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
											"\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var current_timestamp2 = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- statusCodeList --------------//\r",
											"//set variable to statusCodeList JSON.parse\r",
											"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
											"//set global variable to statusCode 200\r",
											"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
											"//set global variable to statusCode 201\r",
											"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
											"//set global variable to statusCode 403\r",
											"pm.globals.set(\"statusCodeForbidden\", statusCodeList.statusCodeForbidden);\r",
											"\r",
											"//---------------- resultCodeList --------------//\r",
											"//set variable to resultCodeList JSON.parse\r",
											"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
											"//set global variable to resultCode \"20000\"\r",
											"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
											"//set global variable to resultCode \"20100\"\r",
											"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
											"//set global variable to resultCode \"40308\"\r",
											"pm.globals.set(\"resultCodeRoleInvalid\", resultCodeList.resultCodeRoleInvalid);\r",
											"\r",
											"//---------------- resultDescriptionSuccessList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
											"//set global variable to resultDescription \"SignInProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
											"//set global variable to resultDescription \"CreatePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
											"//set global variable to resultDescription \"RemovePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
											"//set global variable to resultDescription \"InquiryPartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionInquiryPartner\", resultDescriptionSuccessList.resultDescriptionInquiryPartner);\r",
											"\r",
											"//---------------- resultDescriptionErrorList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
											"//set global variable to resultDescription \"Role Invalid\"\r",
											"pm.globals.set(\"resultDescriptionRoleInvalid\", resultDescriptionErrorList.resultDescriptionRoleInvalid);\r",
											"\r",
											"//---------------- HeaderList --------------//\r",
											"//set variable to HeaderList JSON.parse\r",
											"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
											"//---------------- set globals Other --------------//\r",
											"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
											"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
											"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
											"//set global variable to kbn-versio \"7.5.1\"\r",
											"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Signin_ --------------//\r",
											"//set global variable to x_ais_OrderRef \"Signin_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals CreatePartner --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
											"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
											"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
											"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set globals Purchase --------------//\r",
											"//set global variable to x_ais_OrderRef \"InquiryPartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_InquiryPartner\", HeaderList.Partner.x_ais_OrderRef_InquiryPartner);\r",
											"//set global variable to x_ais_OrderRef \"InquiryPartnerfail_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_InquiryPartner_fail\", HeaderList.Partner.x_ais_OrderRef_InquiryPartner_fail);\r",
											"//set global variable to x_ais_OrderDesc \"InquiryPurchase\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_InquiryPartner\", HeaderList.Partner.x_ais_OrderDesc_InquiryPartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultCode \"20100\"\r",
											"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
											"//get global variable to resultDescription \"SignInProcess is Success\"\r",
											"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
											"//get global variable to resultDescription \"CreatePartner is Success\"\r",
											"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
											"\r",
											"\r",
											"//---------------- urlRouteList --------------//\r",
											"//set variable to urlRouteList JSON.parse\r",
											"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
											"//---------------- set url Create --------------//\r",
											"//set global variable to url \"/api/v1/auth/signin\"\r",
											"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
											"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
											"\r",
											"//---------------- get url Create --------------//\r",
											"//get global variable to url \"/api/v1/auth/signin\"\r",
											"var urlSignin = pm.globals.get(\"urlSignin\");\r",
											"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
											"\r",
											"//---------------- set url Remove --------------//\r",
											"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"Signin_\"\r",
											"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
											"\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"// Signin get token ROOT ADMIN\r",
											" Signin = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username,\r",
											"                password:Password\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"\r",
											"        //set random_number\r",
											"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
											"        //set PartnerName\r",
											"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
											"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
											"        //set MerchantContact\r",
											"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
											"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
											"        // set CPID\r",
											"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
											"        pm.environment.set(\"CPID\", CPIDValue)\r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreatePartner\r",
											" CreatePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreatePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreatePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
											"                \"PartnerType\": pm.environment.get(\"PartnerTypeValue\"),\r",
											"                \"PartnerDetail\": {\r",
											"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
											"                    \"CPID\": pm.environment.get(\"CPID\")\r",
											"                },\r",
											"                \"Property\": {\r",
											"                    \"RouteEngine\": pm.environment.get(\"PropertyRouteEngineValue\") //false\r",
											"                }\r",
											"            })\r",
											"        };\r",
											"\r",
											"        \r",
											"        \r",
											"        let optionsCreatePartner = {\r",
											"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreatePartner,\r",
											"            body: httpRequestCreatePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsCreatePartner);\r",
											"        let jsonDataCreatePartner = await response.json();\r",
											"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
											"    \r",
											"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreatePartner is Success\r",
											"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
											"        });\r",
											"\r",
											"        //GetResponse_PartnerId\r",
											"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
											"\r",
											"        //GetResponse_CustomerId\r",
											"        pm.environment.set(\"GetResponse_CustomerId\", jsonDataCreatePartner.PartnerInfo.CustomerId);\r",
											"        \r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// Signin get token\r",
											" Signin2 = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp2,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username2,\r",
											"                password:Password2\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken2\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"Signin();\r",
											"setTimeout(async function(){await CreatePartner();}, 5000);\r",
											"setTimeout(async function(){await Signin2();}, 6000);\r",
											"setTimeout(async function(){}, 7000); \r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-ais-UserName",
										"type": "text",
										"value": "{{x_ais_UserName_AisPartner}}"
									},
									{
										"key": "x-ais-OrderRef",
										"value": "{{x_ais_OrderRef_InquiryPartner}}{{current_timestamp}}"
									},
									{
										"key": "x-ais-OrderDesc",
										"type": "text",
										"value": "{{x_ais_OrderDesc_InquiryPartner}}"
									},
									{
										"key": "x-ais-AccessToken",
										"value": "{{Bearer}} {{AccessToken2}}"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"PartnerId\": \"{{GetResponse_PartnerId}}\"\r\n}"
								},
								"url": {
									"raw": "{{url}}{{provisioningapis}}/api/v1/Partner/InquiryPartner",
									"host": [
										"{{url}}{{provisioningapis}}"
									],
									"path": [
										"api",
										"v1",
										"Partner",
										"InquiryPartner"
									]
								},
								"description": "Type:Desire"
							},
							"response": []
						},
						{
							"name": "InquiryPartner_TST_F5_0_2_005_Error_SupplierRoleInvalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"InquiryPartner_\"\r",
											"var x_ais_OrderRef_InquiryPartner = pm.globals.get(\"x_ais_OrderRef_InquiryPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"InquiryPartner\"\r",
											"var x_ais_OrderDesc_InquiryPartner = pm.globals.get(\"x_ais_OrderDesc_InquiryPartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Remove --------------//\r",
											"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
											"\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultDescription \"RemovePartner is Success\"\r",
											"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
											"\r",
											"//get global variable to statusCode 403\r",
											"var statusCodeForbidden = pm.globals.get(\"statusCodeForbidden\");\r",
											"//get global variable to resultCode \"40308\"\r",
											"var resultCodeRoleInvalid = pm.globals.get(\"resultCodeRoleInvalid\");\r",
											"//get global variable to resultDescription \"Role Invalid\"\r",
											"var resultDescriptionRoleInvalid = pm.globals.get(\"resultDescriptionRoleInvalid\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"//get global variable to resultDescription \"InquiryPartner is Success\"\r",
											"var resultDescriptionInquiryPartner = pm.globals.get(\"resultDescriptionInquiryPartner\");\r",
											"\r",
											"pm.test(\"InquiryPartner : Status code is \" + statusCodeForbidden, function () {\r",
											"    pm.response.to.have.status(statusCodeForbidden);\r",
											"});\r",
											"\r",
											"pm.test('InquiryPartner : operationStatus code is '+'\"'+ resultCodeRoleInvalid +'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeRoleInvalid);\r",
											"});\r",
											"\r",
											"pm.test('InquiryPartner : operationStatus description is '+'\"'+ resultDescriptionRoleInvalid+'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionRoleInvalid);\r",
											"});\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"// RemovePartner\r",
											" RemovePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemovePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemovePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsRemovePartner = {\r",
											"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemovePartner,\r",
											"            body: httpRequestRemovePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request RemovePartner');\r",
											"        let response = await reqPromise(optionsRemovePartner);\r",
											"        let jsonDataRemovePartner = await response.json();\r",
											"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
											"    \r",
											"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemovePartner is Success\r",
											"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"//---------------- LogDefaultValue --------------//\r",
											"//set variable to LogDefaultValue JSON.parse\r",
											"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
											"// console.log('LogDefaultValue',LogDefaultValue);\r",
											"//---------------- set globals Other --------------//\r",
											"\r",
											"var SearchLog = LogDefaultValue.SearchLog;\r",
											"// console.log('SearchLog',SearchLog);\r",
											"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
											"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
											"var kbn_version = SearchLog.header.kbn_version;\r",
											"var authorization = SearchLog.header.Authorization;\r",
											"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
											"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
											"var namespace = LogDefaultValue.Other.namespace;\r",
											"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
											"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
											"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
											"var methodPost = LogDefaultValue.Other.methodPost;\r",
											"\r",
											"// Detail\r",
											"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
											"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
											"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
											"\r",
											"// Summary\r",
											"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
											"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
											"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
											"\r",
											"// ProvisioningAPIs [Partner]\r",
											"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
											"var cmdName = LogDefaultValue.Provisioning.Partner.cmdNameInquiryPartner;\r",
											"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
											"var containerId = LogDefaultValue.Provisioning.containerId;\r",
											"var requestObjectUrlStaging = LogDefaultValue.Provisioning.Partner.requestObjectUrlInquiryPartnerMgStaging;\r",
											"\r",
											"// Check CDR (Summary Log) and EDR (Detail Log)\r",
											"SearchLogFindTid = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSearchLogFindTid = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization' : authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = x_ais_OrderRef_InquiryPartner + current_timestamp;\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch : : 1\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestSearchLogFindTid = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"\r",
											"        let optionsSearchLogFindTid = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptSearchLogFindTid,\r",
											"            body: httpRequestSearchLogFindTid\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsSearchLogFindTid);\r",
											"        let jsonDataSearchLogFindTid = await response.json();\r",
											"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
											"\r",
											"        // //200\r",
											"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"\r",
											"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
											"        console.log('hits',hits)\r",
											"  \r",
											"        // find tid\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            // let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"        \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            if(applicationNameValue == applicationName){\r",
											"                let tid = hits[i]._source.cauldron.tid;\r",
											"                pm.environment.set(\"tid\", tid);\r",
											"                break;\r",
											"           }\r",
											"        }\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"CheckLog = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCheckLog = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = pm.environment.get(\"tid\");\r",
											"\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch : : : 2\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestCheckLog = {\r",
											"            mode: 'raw',\r",
											"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"        let optionsCheckLog = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptCheckLog,\r",
											"            body: httpRequestCheckLog\r",
											"        }; \r",
											"        let response = await reqPromise(optionsCheckLog);\r",
											"        let jsonDataCheckLog = await response.json();\r",
											"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
											"        \r",
											"        // //200\r",
											"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });     \r",
											"        \r",
											"        let hits = jsonDataCheckLog.hits.hits\r",
											"        console.log('hits',hits)\r",
											"  \r",
											"        // find logType\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            //  let logType = hits[i]._source.cauldron.logType\r",
											"            let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"           \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            \r",
											"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
											"            // console.log('resultDataLog',resultDataLog)\r",
											"\r",
											"            let tidControl = x_ais_OrderRef_InquiryPartner + current_timestamp;\r",
											"            // console.log(tidControl);\r",
											"            if(applicationNameValue == applicationName){\r",
											"                 \r",
											"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ProvisioningAPIs\r",
											"                     pm.test(\"Check Summary Log : InquiryPartner\" , function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Summary Log ( Expected = Actual) [InquiryPartner] ==================\");\r",
											"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
											"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
											"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeRoleInvalid);\r",
											"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionRoleInvalid);\r",
											"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
											"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                         // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
											"                        // console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
											"                    \r",
											"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp);\r",
											"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName);\r",
											"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeRoleInvalid);\r",
											"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionRoleInvalid);\r",
											"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp);\r",
											"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary);\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);  \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace);\r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName);\r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId);\r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
											"                        // pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
											"\r",
											"                        // check custom\r",
											"                        // \"custom\":[ { \"no\":\"1\", \"endPointName\":\"db.TenantsCollection\", \"responseStatus\":\"Success:InquiryTenant was successfully.\", \"processTime\":0.1549 }, { \"no\":\"2\", \"endPointName\":\"db.AccountsCollection\", \"responseStatus\":\"Success:InquiryAccount was successfully.\", \"processTime\":2.0419 } ],\r",
											"\r",
											"                        let custom = resultDataLog.custom;\r",
											"                        console.log(\"custom : : :\",custom)\r",
											"                        // let countCustom = custom.length;\r",
											"\r",
											"                        // // [\"db.TenantsCollection\",\"db.AccountsCollection\"],\r",
											"                        // let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_InquiryPartner;\r",
											"                        // // [\"Success:InquiryTenant was successfully.\",\"Success:InquiryAccount was successfully.\"]\r",
											"                        // let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_InquiryPartner;\r",
											"                        // let countCustomStep = dataEndPointName.length;\r",
											"                        // pm.expect(countCustom).to.eql(countCustomStep); \r",
											"                        // for(let i=0;i<countCustomStep;i++){\r",
											"                        //     let no = custom[i].no;\r",
											"                        //     let valueEndPointName = custom[i].endPointName;\r",
											"                        //     let valueResponseStatus = custom[i].responseStatus;\r",
											"                        //     // console.log(\"i\",i);\r",
											"                        //     // console.log(\"valueEndPointName\",valueEndPointName);\r",
											"                        //     // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
											"                           \r",
											"                        //     console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep );\r",
											"                        //     console.log(\"custom.no : \" + no + \" = \" + (i+1).toString() );\r",
											"                        //     console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i] );\r",
											"                        //     console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i] );\r",
											"                           \r",
											"                        //     pm.expect(no).to.eql((i+1).toString()); \r",
											"                        //     pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
											"                        //     pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]);  \r",
											"                        // }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"\r",
											"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ProvisioningAPIs\r",
											"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
											"                    // console.log('endPointNameValue ',endPointNameValue)\r",
											"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [InquiryPartner]\", function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Detail Log ( Expected = Actual) [InquiryPartner] ==================\");\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
											"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
											"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
											"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
											"\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
											"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
											"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
											"\r",
											"                        if( endPointNameValue == endPointNameProvisioningAPIs){     //\"endPointName\":\"ProvisioningAPIs\"\r",
											"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs); \r",
											"                        \r",
											"                            // check requestObject\r",
											"                            // \"requestObject\":\"{ \\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Partner/InquiryPartner\\\", \\\"method\\\":\\\"POST\\\", \\\"headers\\\":{ \\\"x-ais-username\\\":\\\"AisPartner\\\", \\\"x-ais-orderref\\\":\\\"InquiryPartner_202104271304448\\\", \\\"x-ais-orderdesc\\\":\\\"InquiryPartner\\\", \\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAGz3tsie+KV1KmIuQEH/h4geIWC9KzcyZbsXbdYpFNnXEIlAkkY2KW0\\\" }, \\\"body\\\":{ \\\"PartnerId\\\":\\\"6087af78e14c9c00013805d4\\\" }\r",
											"                            \r",
											"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
											"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
											"\r",
											"\r",
											"\r",
											"                            let url = urlCheckLog + requestObjectUrlStaging;  \r",
											"                            let x_ais_orderref = x_ais_OrderRef_InquiryPartner + current_timestamp;\r",
											"                            let x_ais_orderdesc = x_ais_OrderDesc_InquiryPartner;\r",
											"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken2\");\r",
											"                            let PartnerId = pm.environment.get(\"GetResponse_PartnerId\");\r",
											"  \r",
											"                            \r",
											"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
											"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerId).to.eql(PartnerId);\r",
											"\r",
											"\r",
											"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
											"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
											"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
											"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
											"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
											"                            console.log(\"resquest.body.PartnerId : \" + jsonParseRequestObject.body.PartnerId + \" = \" + PartnerId);\r",
											"\r",
											"\r",
											"                            // check responseObject\r",
											"                            // \"responseObject\":\"{ \\\"partnerInfo\\\":[ { \\\"CustomerId\\\":\\\"6087af78e14c9c00013805d3\\\", \\\"PartnerId\\\":\\\"6087af78e14c9c00013805d4\\\", \\\"PartnerName\\\":\\\"Jida_TestPartnerName542459\\\", \\\"PartnerType\\\":[ \\\"Supplier\\\", \\\"Customer\\\" ], \\\"PartnerDetail\\\":{ \\\"MerchantContact\\\":\\\"Jida_TestMerchantContact@ais.co.th\\\", \\\"CPID\\\":\\\"Jida_TesCPID@ais.co.th\\\" }, \\\"AccountInfo\\\":[ ], \\\"Property\\\":{ \\\"RouteEngine\\\":false }, \\\"CreateDate\\\":\\\"2021-04-27T13:30:16.742+07:00\\\" } ], \\\"_Metadata\\\":{ \\\"TotalCount\\\":1, \\\"Limit\\\":10000, \\\"OffSet\\\":0 }, \\\"OperationStatus\\\":{ \\\"Code\\\":\\\"20000\\\", \\\"Description\\\":\\\"InquiryPartner is Success\\\" }\r",
											"\r",
											"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);   \r",
											"                            // console.log(\"jsonParseResponseObject : : :\", jsonParseResponseObject)\r",
											"\r",
											"           \r",
											"                            console.log(\"response.PartnerInfo.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeRoleInvalid);\r",
											"                            console.log(\"response.PartnerInfo.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionRoleInvalid);\r",
											"                               \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeRoleInvalid);  \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionRoleInvalid);  ;\r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"setTimeout(function(){SearchLogFindTid();}, 8000); \r",
											"setTimeout(function(){CheckLog();}, 20000); \r",
											"setTimeout(function(){RemovePartner();}, 30000); \r",
											"\r",
											"setTimeout(function(){\r",
											"pm.environment.unset(\"current_timestamp\");\r",
											"pm.environment.unset(\"AccessToken\");\r",
											"pm.environment.unset(\"random_number\");\r",
											"pm.environment.unset(\"PartnerName\");\r",
											"pm.environment.unset(\"MerchantContact\");\r",
											"pm.environment.unset(\"CPID\");\r",
											"pm.environment.unset(\"tid\");\r",
											"pm.environment.unset(\"GetResponse_PartnerId\");\r",
											"pm.environment.unset(\"GetResponse_CustomerId\");\r",
											"pm.environment.unset(\"PartnerTypeValue\");\r",
											"pm.environment.unset(\"PropertyRouteEngineValue\");\r",
											"}, 45000);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var Username = pm.environment.get(\"Username\");\r",
											"var Password = pm.environment.get(\"Password\");\r",
											"var Username2 = pm.environment.get(\"Username_Supplier\");\r",
											"var Password2 = pm.environment.get(\"Password_Supplier\");\r",
											"\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"\r",
											"pm.environment.set(\"PartnerTypeValue\",fieldDataValue.Partner.PartnerTypeValue)\r",
											"pm.environment.set(\"PropertyRouteEngineValue\",fieldDataValue.Partner.PropertyRouteEngineValue)\r",
											"\r",
											"\r",
											"//format YYYYMMDDHHMMSSS\r",
											"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
											"\r",
											"// console.log('currentTmestamp',currentTmestamp);\r",
											"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
											"\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var current_timestamp2 = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- statusCodeList --------------//\r",
											"//set variable to statusCodeList JSON.parse\r",
											"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
											"//set global variable to statusCode 200\r",
											"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
											"//set global variable to statusCode 201\r",
											"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
											"//set global variable to statusCode 403\r",
											"pm.globals.set(\"statusCodeForbidden\", statusCodeList.statusCodeForbidden);\r",
											"\r",
											"//---------------- resultCodeList --------------//\r",
											"//set variable to resultCodeList JSON.parse\r",
											"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
											"//set global variable to resultCode \"20000\"\r",
											"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
											"//set global variable to resultCode \"20100\"\r",
											"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
											"//set global variable to resultCode \"40308\"\r",
											"pm.globals.set(\"resultCodeRoleInvalid\", resultCodeList.resultCodeRoleInvalid);\r",
											"\r",
											"//---------------- resultDescriptionSuccessList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
											"//set global variable to resultDescription \"SignInProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
											"//set global variable to resultDescription \"CreatePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
											"//set global variable to resultDescription \"RemovePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
											"//set global variable to resultDescription \"InquiryPartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionInquiryPartner\", resultDescriptionSuccessList.resultDescriptionInquiryPartner);\r",
											"\r",
											"//---------------- resultDescriptionErrorList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
											"//set global variable to resultDescription \"Role Invalid\"\r",
											"pm.globals.set(\"resultDescriptionRoleInvalid\", resultDescriptionErrorList.resultDescriptionRoleInvalid);\r",
											"\r",
											"//---------------- HeaderList --------------//\r",
											"//set variable to HeaderList JSON.parse\r",
											"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
											"//---------------- set globals Other --------------//\r",
											"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
											"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
											"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
											"//set global variable to kbn-versio \"7.5.1\"\r",
											"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Signin_ --------------//\r",
											"//set global variable to x_ais_OrderRef \"Signin_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals CreatePartner --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
											"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
											"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
											"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set globals Purchase --------------//\r",
											"//set global variable to x_ais_OrderRef \"InquiryPartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_InquiryPartner\", HeaderList.Partner.x_ais_OrderRef_InquiryPartner);\r",
											"//set global variable to x_ais_OrderRef \"InquiryPartnerfail_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_InquiryPartner_fail\", HeaderList.Partner.x_ais_OrderRef_InquiryPartner_fail);\r",
											"//set global variable to x_ais_OrderDesc \"InquiryPurchase\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_InquiryPartner\", HeaderList.Partner.x_ais_OrderDesc_InquiryPartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultCode \"20100\"\r",
											"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
											"//get global variable to resultDescription \"SignInProcess is Success\"\r",
											"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
											"//get global variable to resultDescription \"CreatePartner is Success\"\r",
											"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
											"\r",
											"\r",
											"//---------------- urlRouteList --------------//\r",
											"//set variable to urlRouteList JSON.parse\r",
											"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
											"//---------------- set url Create --------------//\r",
											"//set global variable to url \"/api/v1/auth/signin\"\r",
											"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
											"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
											"\r",
											"//---------------- get url Create --------------//\r",
											"//get global variable to url \"/api/v1/auth/signin\"\r",
											"var urlSignin = pm.globals.get(\"urlSignin\");\r",
											"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
											"\r",
											"//---------------- set url Remove --------------//\r",
											"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"Signin_\"\r",
											"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
											"\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"// Signin get token ROOT ADMIN\r",
											" Signin = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username,\r",
											"                password:Password\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"\r",
											"        //set random_number\r",
											"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
											"        //set PartnerName\r",
											"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
											"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
											"        //set MerchantContact\r",
											"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
											"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
											"        // set CPID\r",
											"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
											"        pm.environment.set(\"CPID\", CPIDValue)\r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreatePartner\r",
											" CreatePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreatePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreatePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
											"                \"PartnerType\": pm.environment.get(\"PartnerTypeValue\"),\r",
											"                \"PartnerDetail\": {\r",
											"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
											"                    \"CPID\": pm.environment.get(\"CPID\")\r",
											"                },\r",
											"                \"Property\": {\r",
											"                    \"RouteEngine\": pm.environment.get(\"PropertyRouteEngineValue\") //false\r",
											"                }\r",
											"            })\r",
											"        };\r",
											"\r",
											"        \r",
											"        \r",
											"        let optionsCreatePartner = {\r",
											"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreatePartner,\r",
											"            body: httpRequestCreatePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsCreatePartner);\r",
											"        let jsonDataCreatePartner = await response.json();\r",
											"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
											"    \r",
											"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreatePartner is Success\r",
											"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
											"        });\r",
											"\r",
											"        //GetResponse_PartnerId\r",
											"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
											"\r",
											"        //GetResponse_CustomerId\r",
											"        pm.environment.set(\"GetResponse_CustomerId\", jsonDataCreatePartner.PartnerInfo.CustomerId);\r",
											"        \r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// Signin get token\r",
											" Signin2 = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp2,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username2,\r",
											"                password:Password2\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken2\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"Signin();\r",
											"setTimeout(async function(){await CreatePartner();}, 5000);\r",
											"setTimeout(async function(){await Signin2();}, 6000);\r",
											"setTimeout(async function(){}, 7000); \r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-ais-UserName",
										"type": "text",
										"value": "{{x_ais_UserName_AisPartner}}"
									},
									{
										"key": "x-ais-OrderRef",
										"value": "{{x_ais_OrderRef_InquiryPartner}}{{current_timestamp}}"
									},
									{
										"key": "x-ais-OrderDesc",
										"type": "text",
										"value": "{{x_ais_OrderDesc_InquiryPartner}}"
									},
									{
										"key": "x-ais-AccessToken",
										"value": "{{Bearer}} {{AccessToken2}}"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"PartnerId\": \"{{GetResponse_PartnerId}}\"\r\n}"
								},
								"url": {
									"raw": "{{url}}{{provisioningapis}}/api/v1/Partner/InquiryPartner",
									"host": [
										"{{url}}{{provisioningapis}}"
									],
									"path": [
										"api",
										"v1",
										"Partner",
										"InquiryPartner"
									]
								},
								"description": "Type:Desire"
							},
							"response": []
						},
						{
							"name": "InquiryPartner_TST_F5_0_2_006_Error_CustomerRoleInvalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"InquiryPartner_\"\r",
											"var x_ais_OrderRef_InquiryPartner = pm.globals.get(\"x_ais_OrderRef_InquiryPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"InquiryPartner\"\r",
											"var x_ais_OrderDesc_InquiryPartner = pm.globals.get(\"x_ais_OrderDesc_InquiryPartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Remove --------------//\r",
											"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
											"\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultDescription \"RemovePartner is Success\"\r",
											"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
											"\r",
											"//get global variable to statusCode 403\r",
											"var statusCodeForbidden = pm.globals.get(\"statusCodeForbidden\");\r",
											"//get global variable to resultCode \"40308\"\r",
											"var resultCodeRoleInvalid = pm.globals.get(\"resultCodeRoleInvalid\");\r",
											"//get global variable to resultDescription \"Role Invalid\"\r",
											"var resultDescriptionRoleInvalid = pm.globals.get(\"resultDescriptionRoleInvalid\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"//get global variable to resultDescription \"InquiryPartner is Success\"\r",
											"var resultDescriptionInquiryPartner = pm.globals.get(\"resultDescriptionInquiryPartner\");\r",
											"\r",
											"pm.test(\"InquiryPartner : Status code is \" + statusCodeForbidden, function () {\r",
											"    pm.response.to.have.status(statusCodeForbidden);\r",
											"});\r",
											"\r",
											"pm.test('InquiryPartner : operationStatus code is '+'\"'+ resultCodeRoleInvalid +'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeRoleInvalid);\r",
											"});\r",
											"\r",
											"pm.test('InquiryPartner : operationStatus description is '+'\"'+ resultDescriptionRoleInvalid+'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionRoleInvalid);\r",
											"});\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"// RemovePartner\r",
											" RemovePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemovePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemovePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsRemovePartner = {\r",
											"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemovePartner,\r",
											"            body: httpRequestRemovePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request RemovePartner');\r",
											"        let response = await reqPromise(optionsRemovePartner);\r",
											"        let jsonDataRemovePartner = await response.json();\r",
											"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
											"    \r",
											"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemovePartner is Success\r",
											"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"//---------------- LogDefaultValue --------------//\r",
											"//set variable to LogDefaultValue JSON.parse\r",
											"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
											"// console.log('LogDefaultValue',LogDefaultValue);\r",
											"//---------------- set globals Other --------------//\r",
											"\r",
											"var SearchLog = LogDefaultValue.SearchLog;\r",
											"// console.log('SearchLog',SearchLog);\r",
											"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
											"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
											"var kbn_version = SearchLog.header.kbn_version;\r",
											"var authorization = SearchLog.header.Authorization;\r",
											"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
											"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
											"var namespace = LogDefaultValue.Other.namespace;\r",
											"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
											"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
											"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
											"var methodPost = LogDefaultValue.Other.methodPost;\r",
											"\r",
											"// Detail\r",
											"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
											"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
											"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
											"\r",
											"// Summary\r",
											"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
											"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
											"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
											"\r",
											"// ProvisioningAPIs [Partner]\r",
											"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
											"var cmdName = LogDefaultValue.Provisioning.Partner.cmdNameInquiryPartner;\r",
											"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
											"var containerId = LogDefaultValue.Provisioning.containerId;\r",
											"var requestObjectUrlStaging = LogDefaultValue.Provisioning.Partner.requestObjectUrlInquiryPartnerMgStaging;\r",
											"\r",
											"// Check CDR (Summary Log) and EDR (Detail Log)\r",
											"SearchLogFindTid = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSearchLogFindTid = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization' : authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = x_ais_OrderRef_InquiryPartner + current_timestamp;\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch : : 1\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestSearchLogFindTid = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"\r",
											"        let optionsSearchLogFindTid = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptSearchLogFindTid,\r",
											"            body: httpRequestSearchLogFindTid\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsSearchLogFindTid);\r",
											"        let jsonDataSearchLogFindTid = await response.json();\r",
											"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
											"\r",
											"        // //200\r",
											"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"\r",
											"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
											"        console.log('hits',hits)\r",
											"  \r",
											"        // find tid\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            // let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"        \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            if(applicationNameValue == applicationName){\r",
											"                let tid = hits[i]._source.cauldron.tid;\r",
											"                pm.environment.set(\"tid\", tid);\r",
											"                break;\r",
											"           }\r",
											"        }\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"CheckLog = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCheckLog = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = pm.environment.get(\"tid\");\r",
											"\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch : : : 2\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestCheckLog = {\r",
											"            mode: 'raw',\r",
											"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"        let optionsCheckLog = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptCheckLog,\r",
											"            body: httpRequestCheckLog\r",
											"        }; \r",
											"        let response = await reqPromise(optionsCheckLog);\r",
											"        let jsonDataCheckLog = await response.json();\r",
											"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
											"        \r",
											"        // //200\r",
											"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });     \r",
											"        \r",
											"        let hits = jsonDataCheckLog.hits.hits\r",
											"        console.log('hits',hits)\r",
											"  \r",
											"        // find logType\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            //  let logType = hits[i]._source.cauldron.logType\r",
											"            let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"           \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            \r",
											"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
											"            // console.log('resultDataLog',resultDataLog)\r",
											"\r",
											"            let tidControl = x_ais_OrderRef_InquiryPartner + current_timestamp;\r",
											"            // console.log(tidControl);\r",
											"            if(applicationNameValue == applicationName){\r",
											"                 \r",
											"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ProvisioningAPIs\r",
											"                     pm.test(\"Check Summary Log : InquiryPartner\" , function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Summary Log ( Expected = Actual) [InquiryPartner] ==================\");\r",
											"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
											"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
											"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeRoleInvalid);\r",
											"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionRoleInvalid);\r",
											"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
											"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                         // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
											"                        // console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
											"                    \r",
											"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp);\r",
											"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName);\r",
											"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeRoleInvalid);\r",
											"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionRoleInvalid);\r",
											"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp);\r",
											"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary);\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);  \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace);\r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName);\r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId);\r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
											"                        // pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
											"\r",
											"                        // check custom\r",
											"                        // \"custom\":[ { \"no\":\"1\", \"endPointName\":\"db.TenantsCollection\", \"responseStatus\":\"Success:InquiryTenant was successfully.\", \"processTime\":0.1549 }, { \"no\":\"2\", \"endPointName\":\"db.AccountsCollection\", \"responseStatus\":\"Success:InquiryAccount was successfully.\", \"processTime\":2.0419 } ],\r",
											"\r",
											"                        let custom = resultDataLog.custom;\r",
											"                        console.log(\"custom : : :\",custom)\r",
											"                        // let countCustom = custom.length;\r",
											"\r",
											"                        // // [\"db.TenantsCollection\",\"db.AccountsCollection\"],\r",
											"                        // let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_InquiryPartner;\r",
											"                        // // [\"Success:InquiryTenant was successfully.\",\"Success:InquiryAccount was successfully.\"]\r",
											"                        // let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_InquiryPartner;\r",
											"                        // let countCustomStep = dataEndPointName.length;\r",
											"                        // pm.expect(countCustom).to.eql(countCustomStep); \r",
											"                        // for(let i=0;i<countCustomStep;i++){\r",
											"                        //     let no = custom[i].no;\r",
											"                        //     let valueEndPointName = custom[i].endPointName;\r",
											"                        //     let valueResponseStatus = custom[i].responseStatus;\r",
											"                        //     // console.log(\"i\",i);\r",
											"                        //     // console.log(\"valueEndPointName\",valueEndPointName);\r",
											"                        //     // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
											"                           \r",
											"                        //     console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep );\r",
											"                        //     console.log(\"custom.no : \" + no + \" = \" + (i+1).toString() );\r",
											"                        //     console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i] );\r",
											"                        //     console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i] );\r",
											"                           \r",
											"                        //     pm.expect(no).to.eql((i+1).toString()); \r",
											"                        //     pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
											"                        //     pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]);  \r",
											"                        // }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"\r",
											"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ProvisioningAPIs\r",
											"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
											"                    // console.log('endPointNameValue ',endPointNameValue)\r",
											"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [InquiryPartner]\", function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Detail Log ( Expected = Actual) [InquiryPartner] ==================\");\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
											"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
											"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
											"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
											"\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
											"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
											"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
											"\r",
											"                        if( endPointNameValue == endPointNameProvisioningAPIs){     //\"endPointName\":\"ProvisioningAPIs\"\r",
											"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs); \r",
											"                        \r",
											"                            // check requestObject\r",
											"                            // \"requestObject\":\"{ \\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Partner/InquiryPartner\\\", \\\"method\\\":\\\"POST\\\", \\\"headers\\\":{ \\\"x-ais-username\\\":\\\"AisPartner\\\", \\\"x-ais-orderref\\\":\\\"InquiryPartner_202104271304448\\\", \\\"x-ais-orderdesc\\\":\\\"InquiryPartner\\\", \\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAGz3tsie+KV1KmIuQEH/h4geIWC9KzcyZbsXbdYpFNnXEIlAkkY2KW0\\\" }, \\\"body\\\":{ \\\"PartnerId\\\":\\\"6087af78e14c9c00013805d4\\\" }\r",
											"                            \r",
											"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
											"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
											"\r",
											"\r",
											"\r",
											"                            let url = urlCheckLog + requestObjectUrlStaging;  \r",
											"                            let x_ais_orderref = x_ais_OrderRef_InquiryPartner + current_timestamp;\r",
											"                            let x_ais_orderdesc = x_ais_OrderDesc_InquiryPartner;\r",
											"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken2\");\r",
											"                            let PartnerId = pm.environment.get(\"GetResponse_PartnerId\");\r",
											"  \r",
											"                            \r",
											"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
											"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerId).to.eql(PartnerId);\r",
											"\r",
											"\r",
											"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
											"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
											"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
											"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
											"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
											"                            console.log(\"resquest.body.PartnerId : \" + jsonParseRequestObject.body.PartnerId + \" = \" + PartnerId);\r",
											"\r",
											"\r",
											"                            // check responseObject\r",
											"                            // \"responseObject\":\"{ \\\"partnerInfo\\\":[ { \\\"CustomerId\\\":\\\"6087af78e14c9c00013805d3\\\", \\\"PartnerId\\\":\\\"6087af78e14c9c00013805d4\\\", \\\"PartnerName\\\":\\\"Jida_TestPartnerName542459\\\", \\\"PartnerType\\\":[ \\\"Supplier\\\", \\\"Customer\\\" ], \\\"PartnerDetail\\\":{ \\\"MerchantContact\\\":\\\"Jida_TestMerchantContact@ais.co.th\\\", \\\"CPID\\\":\\\"Jida_TesCPID@ais.co.th\\\" }, \\\"AccountInfo\\\":[ ], \\\"Property\\\":{ \\\"RouteEngine\\\":false }, \\\"CreateDate\\\":\\\"2021-04-27T13:30:16.742+07:00\\\" } ], \\\"_Metadata\\\":{ \\\"TotalCount\\\":1, \\\"Limit\\\":10000, \\\"OffSet\\\":0 }, \\\"OperationStatus\\\":{ \\\"Code\\\":\\\"20000\\\", \\\"Description\\\":\\\"InquiryPartner is Success\\\" }\r",
											"\r",
											"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);   \r",
											"                            // console.log(\"jsonParseResponseObject : : :\", jsonParseResponseObject)\r",
											"\r",
											"           \r",
											"                            console.log(\"response.PartnerInfo.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeRoleInvalid);\r",
											"                            console.log(\"response.PartnerInfo.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionRoleInvalid);\r",
											"                               \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeRoleInvalid);  \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionRoleInvalid);  ;\r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"setTimeout(function(){SearchLogFindTid();}, 8000); \r",
											"setTimeout(function(){CheckLog();}, 20000); \r",
											"setTimeout(function(){RemovePartner();}, 30000); \r",
											"\r",
											"setTimeout(function(){\r",
											"pm.environment.unset(\"current_timestamp\");\r",
											"pm.environment.unset(\"AccessToken\");\r",
											"pm.environment.unset(\"random_number\");\r",
											"pm.environment.unset(\"PartnerName\");\r",
											"pm.environment.unset(\"MerchantContact\");\r",
											"pm.environment.unset(\"CPID\");\r",
											"pm.environment.unset(\"tid\");\r",
											"pm.environment.unset(\"GetResponse_PartnerId\");\r",
											"pm.environment.unset(\"GetResponse_CustomerId\");\r",
											"pm.environment.unset(\"PartnerTypeValue\");\r",
											"pm.environment.unset(\"PropertyRouteEngineValue\");\r",
											"}, 45000);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var Username = pm.environment.get(\"Username\");\r",
											"var Password = pm.environment.get(\"Password\");\r",
											"var Username2 = pm.environment.get(\"Username_Customer\");\r",
											"var Password2 = pm.environment.get(\"Password_Customer\");\r",
											"\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"\r",
											"pm.environment.set(\"PartnerTypeValue\",fieldDataValue.Partner.PartnerTypeValue)\r",
											"pm.environment.set(\"PropertyRouteEngineValue\",fieldDataValue.Partner.PropertyRouteEngineValue)\r",
											"\r",
											"\r",
											"//format YYYYMMDDHHMMSSS\r",
											"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
											"\r",
											"// console.log('currentTmestamp',currentTmestamp);\r",
											"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
											"\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var current_timestamp2 = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- statusCodeList --------------//\r",
											"//set variable to statusCodeList JSON.parse\r",
											"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
											"//set global variable to statusCode 200\r",
											"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
											"//set global variable to statusCode 201\r",
											"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
											"//set global variable to statusCode 403\r",
											"pm.globals.set(\"statusCodeForbidden\", statusCodeList.statusCodeForbidden);\r",
											"\r",
											"//---------------- resultCodeList --------------//\r",
											"//set variable to resultCodeList JSON.parse\r",
											"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
											"//set global variable to resultCode \"20000\"\r",
											"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
											"//set global variable to resultCode \"20100\"\r",
											"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
											"//set global variable to resultCode \"40308\"\r",
											"pm.globals.set(\"resultCodeRoleInvalid\", resultCodeList.resultCodeRoleInvalid);\r",
											"\r",
											"//---------------- resultDescriptionSuccessList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
											"//set global variable to resultDescription \"SignInProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
											"//set global variable to resultDescription \"CreatePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
											"//set global variable to resultDescription \"RemovePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
											"//set global variable to resultDescription \"InquiryPartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionInquiryPartner\", resultDescriptionSuccessList.resultDescriptionInquiryPartner);\r",
											"\r",
											"//---------------- resultDescriptionErrorList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
											"//set global variable to resultDescription \"Role Invalid\"\r",
											"pm.globals.set(\"resultDescriptionRoleInvalid\", resultDescriptionErrorList.resultDescriptionRoleInvalid);\r",
											"\r",
											"//---------------- HeaderList --------------//\r",
											"//set variable to HeaderList JSON.parse\r",
											"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
											"//---------------- set globals Other --------------//\r",
											"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
											"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
											"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
											"//set global variable to kbn-versio \"7.5.1\"\r",
											"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Signin_ --------------//\r",
											"//set global variable to x_ais_OrderRef \"Signin_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals CreatePartner --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
											"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
											"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
											"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set globals Purchase --------------//\r",
											"//set global variable to x_ais_OrderRef \"InquiryPartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_InquiryPartner\", HeaderList.Partner.x_ais_OrderRef_InquiryPartner);\r",
											"//set global variable to x_ais_OrderRef \"InquiryPartnerfail_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_InquiryPartner_fail\", HeaderList.Partner.x_ais_OrderRef_InquiryPartner_fail);\r",
											"//set global variable to x_ais_OrderDesc \"InquiryPurchase\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_InquiryPartner\", HeaderList.Partner.x_ais_OrderDesc_InquiryPartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultCode \"20100\"\r",
											"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
											"//get global variable to resultDescription \"SignInProcess is Success\"\r",
											"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
											"//get global variable to resultDescription \"CreatePartner is Success\"\r",
											"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
											"\r",
											"\r",
											"//---------------- urlRouteList --------------//\r",
											"//set variable to urlRouteList JSON.parse\r",
											"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
											"//---------------- set url Create --------------//\r",
											"//set global variable to url \"/api/v1/auth/signin\"\r",
											"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
											"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
											"\r",
											"//---------------- get url Create --------------//\r",
											"//get global variable to url \"/api/v1/auth/signin\"\r",
											"var urlSignin = pm.globals.get(\"urlSignin\");\r",
											"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
											"\r",
											"//---------------- set url Remove --------------//\r",
											"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"Signin_\"\r",
											"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
											"\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"// Signin get token ROOT ADMIN\r",
											" Signin = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username,\r",
											"                password:Password\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"\r",
											"        //set random_number\r",
											"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
											"        //set PartnerName\r",
											"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
											"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
											"        //set MerchantContact\r",
											"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
											"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
											"        // set CPID\r",
											"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
											"        pm.environment.set(\"CPID\", CPIDValue)\r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreatePartner\r",
											" CreatePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreatePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreatePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
											"                \"PartnerType\": pm.environment.get(\"PartnerTypeValue\"),\r",
											"                \"PartnerDetail\": {\r",
											"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
											"                    \"CPID\": pm.environment.get(\"CPID\")\r",
											"                },\r",
											"                \"Property\": {\r",
											"                    \"RouteEngine\": pm.environment.get(\"PropertyRouteEngineValue\") //false\r",
											"                }\r",
											"            })\r",
											"        };\r",
											"\r",
											"        \r",
											"        \r",
											"        let optionsCreatePartner = {\r",
											"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreatePartner,\r",
											"            body: httpRequestCreatePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsCreatePartner);\r",
											"        let jsonDataCreatePartner = await response.json();\r",
											"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
											"    \r",
											"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreatePartner is Success\r",
											"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
											"        });\r",
											"\r",
											"        //GetResponse_PartnerId\r",
											"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
											"\r",
											"        //GetResponse_CustomerId\r",
											"        pm.environment.set(\"GetResponse_CustomerId\", jsonDataCreatePartner.PartnerInfo.CustomerId);\r",
											"        \r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// Signin get token\r",
											" Signin2 = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp2,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username2,\r",
											"                password:Password2\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken2\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"Signin();\r",
											"setTimeout(async function(){await CreatePartner();}, 5000);\r",
											"setTimeout(async function(){await Signin2();}, 6000);\r",
											"setTimeout(async function(){}, 7000); \r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-ais-UserName",
										"type": "text",
										"value": "{{x_ais_UserName_AisPartner}}"
									},
									{
										"key": "x-ais-OrderRef",
										"value": "{{x_ais_OrderRef_InquiryPartner}}{{current_timestamp}}"
									},
									{
										"key": "x-ais-OrderDesc",
										"type": "text",
										"value": "{{x_ais_OrderDesc_InquiryPartner}}"
									},
									{
										"key": "x-ais-AccessToken",
										"value": "{{Bearer}} {{AccessToken2}}"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"PartnerId\": \"{{GetResponse_PartnerId}}\"\r\n}"
								},
								"url": {
									"raw": "{{url}}{{provisioningapis}}/api/v1/Partner/InquiryPartner",
									"host": [
										"{{url}}{{provisioningapis}}"
									],
									"path": [
										"api",
										"v1",
										"Partner",
										"InquiryPartner"
									]
								},
								"description": "Type:Desire"
							},
							"response": []
						}
					]
				},
				{
					"name": "RemovePartner",
					"item": [
						{
							"name": "RemovePartner_TST_F4_1_1_001_Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"InquiryPartner_\"\r",
											"var x_ais_OrderRef_InquiryPartner = pm.globals.get(\"x_ais_OrderRef_InquiryPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"InquiryPartner\"\r",
											"var x_ais_OrderDesc_InquiryPartner = pm.globals.get(\"x_ais_OrderDesc_InquiryPartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Inquiry --------------//\r",
											"//get global variable to url \"/api/v1/Partner/InquiryPartner\"\r",
											"var urlPartnerInquiryPartner = pm.globals.get(\"urlPartnerInquiryPartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultDescription \"RemovePartner is Success\"\r",
											"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
											"//get global variable to resultDescription \"InquiryPartner is Success\"\r",
											"var resultDescriptionInquiryPartner = pm.globals.get(\"resultDescriptionInquiryPartner\");\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
											"    pm.response.to.have.status(statusCodeSuccess);\r",
											"});\r",
											"\r",
											"pm.test('RemovePartner : operationStatus code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeSuccess);\r",
											"});\r",
											"\r",
											"pm.test('RemovePartner : operationStatus description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionRemovePartner);\r",
											"});\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"\r",
											"//---------------- LogDefaultValue --------------//\r",
											"//set variable to LogDefaultValue JSON.parse\r",
											"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
											"// console.log('LogDefaultValue',LogDefaultValue);\r",
											"//---------------- set globals Other --------------//\r",
											"\r",
											"var SearchLog = LogDefaultValue.SearchLog;\r",
											"// console.log('SearchLog',SearchLog);\r",
											"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
											"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
											"var kbn_version = SearchLog.header.kbn_version;\r",
											"var authorization = SearchLog.header.Authorization;\r",
											"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
											"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
											"var namespace = LogDefaultValue.Other.namespace;\r",
											"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
											"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
											"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
											"var methodDelete = LogDefaultValue.Other.methodDelete;\r",
											"\r",
											"// Detail\r",
											"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
											"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
											"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
											"\r",
											"// Summary\r",
											"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
											"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
											"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
											"\r",
											"// ProvisioningAPIs [Partner]\r",
											"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
											"var cmdName = LogDefaultValue.Provisioning.Partner.cmdNameRemovePartner;\r",
											"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
											"var containerId = LogDefaultValue.Provisioning.containerId;\r",
											"var requestObjectUrlStaging = LogDefaultValue.Provisioning.Partner.requestObjectUrlRemovePartnerMgStaging;\r",
											"\r",
											"// Check CDR (Summary Log) and EDR (Detail Log)\r",
											"SearchLogFindTid = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSearchLogFindTid = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization' : authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = x_ais_OrderRef_RemovePartner + current_timestamp;\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestSearchLogFindTid = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"\r",
											"        let optionsSearchLogFindTid = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptSearchLogFindTid,\r",
											"            body: httpRequestSearchLogFindTid\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsSearchLogFindTid);\r",
											"        let jsonDataSearchLogFindTid = await response.json();\r",
											"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
											"\r",
											"        // //200\r",
											"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"\r",
											"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
											"        console.log('hits',hits)\r",
											"  \r",
											"        // find tid\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            // let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"        \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            if(applicationNameValue == applicationName){\r",
											"                let tid = hits[i]._source.cauldron.tid;\r",
											"                pm.environment.set(\"tid\", tid);\r",
											"                break;\r",
											"           }\r",
											"        }\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"CheckLog = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCheckLog = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = pm.environment.get(\"tid\");\r",
											"\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestCheckLog = {\r",
											"            mode: 'raw',\r",
											"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"        let optionsCheckLog = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptCheckLog,\r",
											"            body: httpRequestCheckLog\r",
											"        }; \r",
											"        let response = await reqPromise(optionsCheckLog);\r",
											"        let jsonDataCheckLog = await response.json();\r",
											"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
											"        \r",
											"        // //200\r",
											"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });     \r",
											"        \r",
											"        let hits = jsonDataCheckLog.hits.hits\r",
											"        console.log('hits',hits)\r",
											"  \r",
											"        // find logType\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            //  let logType = hits[i]._source.cauldron.logType\r",
											"            let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"           \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            \r",
											"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
											"            console.log('resultDataLog',resultDataLog)\r",
											"\r",
											"            let tidControl = x_ais_OrderRef_RemovePartner + current_timestamp;\r",
											"            // console.log(tidControl);\r",
											"            if(applicationNameValue == applicationName){\r",
											"                 \r",
											"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ProvisioningAPIs\r",
											"                pm.test(\"Check Summary Log : RemovePartner\" , function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Summary Log ( Expected = Actual) [RemovePartner] ==================\");\r",
											"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
											"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
											"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeSuccess);\r",
											"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionRemovePartner);\r",
											"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
											"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                         // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
											"                        //  console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
											"\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
											"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
											"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeSuccess); \r",
											"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionRemovePartner); \r",
											"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
											"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
											"                        // pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
											"\r",
											"\r",
											"                        // check custom\r",
											"                        // \"custom\":{ \"endPointSummary\":[ { \"no\":\"1\", \"endPointName\":\"db.TenantsCollection\", \"responseStatus\":\"Success:InquiryTenant was successfully.\", \"processTime\":1.859 }, { \"no\":\"2\", \"endPointName\":\"db.TenantsCollection\", \"responseStatus\":\"Success:DeletePartner was successfully.\", \"processTime\":8.279 } ] },\r",
											"\r",
											"                        let custom = resultDataLog.custom.endPointSummary;\r",
											"                        // console.log(\"custom : : :\",custom)\r",
											"                        let countCustom = custom.length;\r",
											"\r",
											"                        // [\"db.TenantsCollection\",\"db.TenantsCollection\"],\r",
											"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_RemovePartner;\r",
											"                        // [\"Success:InquiryTenant was successfully.\",\"Success:DeletePartner was successfully.\"]\r",
											"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_RemovePartner;\r",
											"                        let countCustomStep = dataEndPointName.length;\r",
											"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
											"                        for(let i=0;i<countCustomStep;i++){\r",
											"                            let no = custom[i].no;\r",
											"                            let valueEndPointName = custom[i].endPointName;\r",
											"                            let valueResponseStatus = custom[i].responseStatus;\r",
											"                            // console.log(\"i\",i);\r",
											"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
											"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
											"                           \r",
											"                            console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep );\r",
											"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString() );\r",
											"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i] );\r",
											"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i] );\r",
											"                           \r",
											"                            pm.expect(no).to.eql((i+1).toString()); \r",
											"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
											"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]);  \r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"\r",
											"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ProvisioningAPIs\r",
											"\r",
											"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
											"                    // console.log('endPointNameValue ',endPointNameValue)\r",
											"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [RemovePartner]\", function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Detail Log ( Expected = Actual) [UpdatePartner] ==================\");\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
											"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
											"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
											"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
											"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
											"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
											"\r",
											"                        if( endPointNameValue == endPointNameProvisioningAPIs){     //\"endPointName\":\"ProvisioningAPIs\"\r",
											"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs); \r",
											"                        \r",
											"                            // check requestObject\r",
											"                            // \"requestObject\":\"{\\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Partner/RemovePartner\\\",\\\"method\\\":\\\"DELETE\\\",\\\"headers\\\":{\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"RemovePartner_202104191504121\\\",\\\"x-ais-orderdesc\\\":\\\"RemovePartner\\\",\\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAGFEbL+6SxXpwsuQ2AFXzxdP5ASliv7b/ivuC4tlIIbY0IlAkkY2KW0\\\"},\\\"body\\\":{\\\"PartnerId\\\":\\\"607d438763fa0e0001c335bf\\\"}}\",\r",
											"\r",
											"\r",
											"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
											"                            // console.log('jsonParseRequestObject : : :',jsonParseRequestObject);\r",
											"                            \r",
											"                            let url = urlCheckLog + requestObjectUrlStaging; \r",
											"                            let x_ais_orderref = x_ais_OrderRef_RemovePartner + current_timestamp;\r",
											"                            let x_ais_orderdesc = x_ais_OrderDesc_RemovePartner;\r",
											"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken\");                           \r",
											"                            let PartnerId = pm.environment.get(\"GetResponse_PartnerId\");\r",
											"\r",
											"\r",
											"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
											"                            pm.expect(jsonParseRequestObject.method).to.eql(methodDelete);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerId).to.eql(PartnerId);\r",
											"\r",
											"\r",
											"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
											"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodDelete);\r",
											"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
											"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
											"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
											"                            console.log(\"resquest.body.PartnerId : \" + jsonParseRequestObject.body.PartnerId + \" = \" + PartnerId);\r",
											"\r",
											"                                                  \r",
											"                            // check responseObject\r",
											"                            //  \"responseObject\":\"{\\\"OperationStatus\\\":{\\\"Code\\\":\\\"20000\\\",\\\"Description\\\":\\\"RemovePartner is Success\\\"}\r",
											"\r",
											"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
											"                            // console.log('jsonParseResponseObject : : : ',jsonParseResponseObject);              \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeSuccess);  \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionRemovePartner);  \r",
											"\r",
											"                            console.log(\"response.partnerInfo.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeSuccess);\r",
											"                            console.log(\"response.partnerInfo.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionRemovePartner); \r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"// InquiryPartner\r",
											"InquiryPartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptInquiryPartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_InquiryPartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_InquiryPartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestInquiryPartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsInquiryPartner = {\r",
											"            url: url + provisioningapis + urlPartnerInquiryPartner,\r",
											"            method: 'POST',\r",
											"            header: headersOptInquiryPartner,\r",
											"            body: httpRequestInquiryPartner\r",
											"        };\r",
											"\r",
											"        // console.log('request InquiryPartner');\r",
											"        let response = await reqPromise(optionsInquiryPartner);\r",
											"        let jsonDataInquiryPartner = await response.json();\r",
											"        // console.log('jsonDataInquiryPartner : : : ',jsonDataInquiryPartner)\r",
											"    \r",
											"        let operationStatusInquiryPartner = await jsonDataInquiryPartner.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"InquiryPartner : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('InquiryPartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusInquiryPartner).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //InquiryPartner is Success\r",
											"        pm.test('InquiryPartner : OperationStatus Description is '+'\"'+ resultDescriptionInquiryPartner+'\"', function () {\r",
											"            pm.expect(operationStatusInquiryPartner).to.have.property('Description', resultDescriptionInquiryPartner);\r",
											"        });\r",
											"\r",
											"        //Check Data\r",
											"        let partnerInfo = await jsonDataInquiryPartner.partnerInfo;\r",
											"        // console.log('PartnerInfo : : :',partnerInfo);\r",
											"\r",
											"            pm.test('Verify DB Check Data : RemovePartner' , function () {\r",
											"                console.log(\"===============================================================================================================\")    \r",
											"                console.log(\"======== Verify DB Check Data ( Expected = Actual) [RemovePartner] ==================\");\r",
											"                console.log(\"Code : \" + operationStatusInquiryPartner.Code + \" = \" + resultCodeSuccess);\r",
											"                console.log(\"Description : \" + operationStatusInquiryPartner.Description + \" = \" + resultDescriptionInquiryPartner);\r",
											"                console.log(\"partnerInfo : \" + partnerInfo + \" = \" + []);\r",
											"\r",
											"                pm.expect(operationStatusInquiryPartner.Code).to.eql(resultCodeSuccess);\r",
											"                pm.expect(operationStatusInquiryPartner.Description).to.eql(resultDescriptionInquiryPartner);\r",
											"                pm.expect(partnerInfo).to.eql([]); \r",
											"        });\r",
											"\r",
											"\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"setTimeout(function(){SearchLogFindTid();}, 7000); \r",
											"setTimeout(function(){CheckLog();}, 20000); \r",
											"setTimeout(function(){InquiryPartner();}, 30000); \r",
											"\r",
											"\r",
											"setTimeout(function(){\r",
											"pm.environment.unset(\"random_number\");\r",
											"pm.environment.unset(\"PartnerName\");\r",
											"pm.environment.unset(\"MerchantContact\");\r",
											"pm.environment.unset(\"CPID\");\r",
											"pm.environment.unset(\"sessionId\");\r",
											"pm.environment.unset(\"current_timestamp\");\r",
											"pm.environment.unset(\"AccessToken\");\r",
											"pm.environment.unset(\"GetResponse_PartnerId\");\r",
											"pm.environment.unset(\"GetResponse_CustomerId\");\r",
											"pm.environment.unset(\"tid\");\r",
											"}, 40000);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var Username = pm.environment.get(\"Username\");\r",
											"var Password = pm.environment.get(\"Password\");\r",
											"\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//format YYYYMMDDHHMMSSS\r",
											"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
											"// console.log('currentTmestamp',currentTmestamp);\r",
											"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- statusCodeList --------------//\r",
											"//set variable to statusCodeList JSON.parse\r",
											"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
											"//set global variable to statusCode 200\r",
											"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
											"//set global variable to statusCode 201\r",
											"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
											"\r",
											"//---------------- resultCodeList --------------//\r",
											"//set variable to resultCodeList JSON.parse\r",
											"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
											"//set global variable to resultCode \"20000\"\r",
											"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
											"//set global variable to resultCode \"20100\"\r",
											"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
											"\r",
											"//---------------- resultDescriptionSuccessList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
											"//set global variable to resultDescription \"SignInProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
											"//set global variable to resultDescription \"CreatePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
											"//set global variable to resultDescription \"RemovePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
											"//set global variable to resultDescription \"InquiryPartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionInquiryPartner\", resultDescriptionSuccessList.resultDescriptionInquiryPartner);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//---------------- HeaderList --------------//\r",
											"//set variable to HeaderList JSON.parse\r",
											"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
											"//---------------- set globals Other --------------//\r",
											"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
											"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
											"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
											"//set global variable to kbn-versio \"7.5.1\"\r",
											"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Signin_ --------------//\r",
											"//set global variable to x_ais_OrderRef \"Signin_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals CreatePartner --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
											"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
											"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
											"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
											"//set global variable to x_ais_OrderRef \"InquiryPartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_InquiryPartner\", HeaderList.Partner.x_ais_OrderRef_InquiryPartner);\r",
											"//set global variable to x_ais_OrderDesc \"InquiryPartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_InquiryPartner\", HeaderList.Partner.x_ais_OrderDesc_InquiryPartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultCode \"20100\"\r",
											"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
											"//get global variable to resultDescription \"SignInProcess is Success\"\r",
											"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
											"//get global variable to resultDescription \"CreatePartner is Success\"\r",
											"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
											"\r",
											"\r",
											"//---------------- urlRouteList --------------//\r",
											"//set variable to urlRouteList JSON.parse\r",
											"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
											"//---------------- set url Create --------------//\r",
											"//set global variable to url \"/api/v1/auth/signin\"\r",
											"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
											"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
											"\r",
											"//---------------- get url Create --------------//\r",
											"//get global variable to url \"/api/v1/auth/signin\"\r",
											"var urlSignin = pm.globals.get(\"urlSignin\");\r",
											"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
											"\r",
											"//---------------- set url Remove --------------//\r",
											"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set url Inquiry --------------//\r",
											"//set global variable to url \"/api/v1/Partner/InquiryPartner\"\r",
											"pm.globals.set(\"urlPartnerInquiryPartner\", urlRouteList.Partner.urlPartnerInquiryPartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"Signin_\"\r",
											"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"// Signin get token\r",
											" Signin = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username,\r",
											"                password:Password\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"\r",
											"        //set random_number\r",
											"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
											"        //set PartnerName\r",
											"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
											"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
											"        //set MerchantContact\r",
											"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
											"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
											"        // set CPID\r",
											"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
											"        pm.environment.set(\"CPID\", CPIDValue)\r",
											"        \r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreatePartner\r",
											" CreatePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreatePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreatePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
											"                \"PartnerType\": [\r",
											"                    \"Supplier\",\r",
											"                    \"Customer\"\r",
											"                ],\r",
											"                \"PartnerDetail\": {\r",
											"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
											"                    \"CPID\": pm.environment.get(\"CPID\")\r",
											"                },\r",
											"                \"Property\": {\r",
											"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
											"                }\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsCreatePartner = {\r",
											"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreatePartner,\r",
											"            body: httpRequestCreatePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsCreatePartner);\r",
											"        let jsonDataCreatePartner = await response.json();\r",
											"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
											"    \r",
											"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreatePartner is Success\r",
											"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
											"        });\r",
											"\r",
											"     \r",
											"        //GetResponse_PartnerId\r",
											"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
											"\r",
											"        //GetResponse_CustomerId\r",
											"        pm.environment.set(\"GetResponse_CustomerId\", jsonDataCreatePartner.PartnerInfo.CustomerId);\r",
											"        \r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"Signin();\r",
											"setTimeout(async function(){await CreatePartner();}, 5000); \r",
											"setTimeout(async function(){}, 6000);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-ais-UserName",
										"type": "text",
										"value": "{{x_ais_UserName_AisPartner}}"
									},
									{
										"key": "x-ais-OrderRef",
										"value": "{{x_ais_OrderRef_RemovePartner}}{{current_timestamp}}"
									},
									{
										"key": "x-ais-OrderDesc",
										"type": "text",
										"value": "{{x_ais_OrderDesc_RemovePartner}}"
									},
									{
										"key": "x-ais-AccessToken",
										"value": "{{Bearer}} {{AccessToken}}"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"PartnerId\": \"{{GetResponse_PartnerId}}\"\r\n}"
								},
								"url": {
									"raw": "{{url}}{{provisioningapis}}/api/v1/Partner/RemovePartner",
									"host": [
										"{{url}}{{provisioningapis}}"
									],
									"path": [
										"api",
										"v1",
										"Partner",
										"RemovePartner"
									]
								},
								"description": "Type:Desire"
							},
							"response": []
						},
						{
							"name": "RemovePartner_TST_F4_0_2_002_Error_PartnerIdNotObjectId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
											"//get global variable to x_ais_OrderRef \"RemovePartner_fail\"\r",
											"var x_ais_OrderRef_RemovePartner_fail = pm.globals.get(\"x_ais_OrderRef_RemovePartner_fail\");\r",
											"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"//get global variable to statusCode 403\r",
											"var statusCodeForbidden = pm.globals.get(\"statusCodeForbidden\");\r",
											"//get global variable to resultCode \"40300\"\r",
											"var resultCodeForbiddenMissingOrInvalidParameter = pm.globals.get(\"resultCodeForbiddenMissingOrInvalidParameter\");\r",
											"//get global variable to resultDescription \"The PartnerId field is not Object Id.\"\r",
											"var resultDescriptionThePartnerIdFieldIsNotObjectId = pm.globals.get(\"resultDescriptionThePartnerIdFieldIsNotObjectId\");\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"RemovePartner : Status code is \" + statusCodeForbidden, function () {\r",
											"    pm.response.to.have.status(statusCodeForbidden);\r",
											"});\r",
											"\r",
											"pm.test('RemovePartner : operationStatus code is '+'\"'+ resultCodeForbiddenMissingOrInvalidParameter +'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeForbiddenMissingOrInvalidParameter);\r",
											"});\r",
											"\r",
											"pm.test('RemovePartner : operationStatus description is '+'\"'+ resultDescriptionThePartnerIdFieldIsNotObjectId+'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionThePartnerIdFieldIsNotObjectId);\r",
											"});\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"\r",
											"//---------------- LogDefaultValue --------------//\r",
											"//set variable to LogDefaultValue JSON.parse\r",
											"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
											"// console.log('LogDefaultValue',LogDefaultValue);\r",
											"//---------------- set globals Other --------------//\r",
											"\r",
											"var SearchLog = LogDefaultValue.SearchLog;\r",
											"// console.log('SearchLog',SearchLog);\r",
											"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
											"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
											"var kbn_version = SearchLog.header.kbn_version;\r",
											"var authorization = SearchLog.header.Authorization;\r",
											"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
											"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
											"var namespace = LogDefaultValue.Other.namespace;\r",
											"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
											"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
											"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
											"var methodDelete = LogDefaultValue.Other.methodDelete;\r",
											"\r",
											"// Detail\r",
											"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
											"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
											"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
											"\r",
											"// Summary\r",
											"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
											"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
											"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
											"\r",
											"// ProvisioningAPIs [Partner]\r",
											"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
											"var cmdName = LogDefaultValue.Provisioning.Partner.cmdNameRemovePartner;\r",
											"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
											"var containerId = LogDefaultValue.Provisioning.containerId;\r",
											"var requestObjectUrlStaging = LogDefaultValue.Provisioning.Partner.requestObjectUrlRemovePartnerMgStaging;\r",
											"\r",
											"// Check CDR (Summary Log) and EDR (Detail Log)\r",
											"SearchLogFindTid = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSearchLogFindTid = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization' : authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = x_ais_OrderRef_RemovePartner_fail + current_timestamp;\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestSearchLogFindTid = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"\r",
											"        let optionsSearchLogFindTid = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptSearchLogFindTid,\r",
											"            body: httpRequestSearchLogFindTid\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsSearchLogFindTid);\r",
											"        let jsonDataSearchLogFindTid = await response.json();\r",
											"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
											"\r",
											"        // //200\r",
											"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"\r",
											"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
											"        console.log('hits',hits)\r",
											"  \r",
											"        // find tid\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            // let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"        \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            if(applicationNameValue == applicationName){\r",
											"                let tid = hits[i]._source.cauldron.tid;\r",
											"                pm.environment.set(\"tid\", tid);\r",
											"                break;\r",
											"           }\r",
											"        }\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"CheckLog = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCheckLog = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = pm.environment.get(\"tid\");\r",
											"\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestCheckLog = {\r",
											"            mode: 'raw',\r",
											"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"        let optionsCheckLog = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptCheckLog,\r",
											"            body: httpRequestCheckLog\r",
											"        }; \r",
											"        let response = await reqPromise(optionsCheckLog);\r",
											"        let jsonDataCheckLog = await response.json();\r",
											"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
											"        \r",
											"        // //200\r",
											"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });     \r",
											"        \r",
											"        let hits = jsonDataCheckLog.hits.hits\r",
											"        console.log('hits',hits)\r",
											"  \r",
											"        // find logType\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            //  let logType = hits[i]._source.cauldron.logType\r",
											"            let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"           \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            \r",
											"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
											"            // console.log('resultDataLog',resultDataLog)\r",
											"\r",
											"            let tidControl = x_ais_OrderRef_RemovePartner_fail + current_timestamp;\r",
											"            // console.log(tidControl);\r",
											"            if(applicationNameValue == applicationName){\r",
											"                 \r",
											"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ProvisioningAPIs\r",
											"                pm.test(\"Check Summary Log : RemovePartner\" , function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Summary Log ( Expected = Actual) [RemovePartner] ==================\");\r",
											"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
											"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
											"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeForbiddenMissingOrInvalidParameter);\r",
											"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionThePartnerIdFieldIsNotObjectId);\r",
											"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
											"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                         // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
											"                        console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
											"\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
											"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
											"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeForbiddenMissingOrInvalidParameter); \r",
											"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionThePartnerIdFieldIsNotObjectId); \r",
											"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
											"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
											"                        pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
											"\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"\r",
											"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ProvisioningAPIs\r",
											"\r",
											"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
											"                    // console.log('endPointNameValue ',endPointNameValue)\r",
											"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [RemovePartner]\", function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Detail Log ( Expected = Actual) [RemovePartner] ==================\");\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
											"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
											"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
											"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
											"\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
											"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
											"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
											"\r",
											"                        if( endPointNameValue == endPointNameProvisioningAPIs){     //\"endPointName\":\"ProvisioningAPIs\"\r",
											"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs); \r",
											"                        \r",
											"                            // check requestObject\r",
											"                            // \"requestObject\":\"{ \\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Partner/RemovePartner\\\", \\\"method\\\":\\\"DELETE\\\", \\\"headers\\\":{ \\\"x-ais-username\\\":\\\"AisPartner\\\", \\\"x-ais-orderref\\\":\\\"RemovePartnerfail_202104271704899\\\", \\\"x-ais-orderdesc\\\":\\\"RemovePartner\\\", \\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAGz3tsie+KV1PMLzA5lwIAfZ/jjaYne8e+vuC4tlIIbY0IlAkkY2KW0\\\" }, \\\"body\\\":{ \\\"PartnerId\\\":\\\"6087eb561b7f730001d14b0exx\\\" }\r",
											"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
											"                            // console.log('jsonParseRequestObject : : :',jsonParseRequestObject);\r",
											"\r",
											"\r",
											"                            let url = urlCheckLog + requestObjectUrlStaging; \r",
											"                            let x_ais_orderref = x_ais_OrderRef_RemovePartner_fail + current_timestamp;\r",
											"                            let x_ais_orderdesc = x_ais_OrderDesc_RemovePartner;\r",
											"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken\");                           \r",
											"                            let PartnerId = pm.environment.get(\"GetResponse_PartnerId\")+pm.environment.get(\"Value_DeletePartner_TST_F4_0_2_002_PartnerId\");\r",
											"\r",
											"\r",
											"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
											"                            pm.expect(jsonParseRequestObject.method).to.eql(methodDelete);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerId).to.eql(PartnerId);\r",
											"\r",
											"\r",
											"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
											"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodDelete);\r",
											"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
											"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
											"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
											"                            console.log(\"resquest.body.PartnerId : \" + jsonParseRequestObject.body.PartnerId + \" = \" + PartnerId);\r",
											"                         \r",
											"                            \r",
											"                            // check responseObject\r",
											"                            //  \"responseObject\":\"{\"OperationStatus\": {\"Code\": \"40300\",\"Description\": \"The PartnerId field is not Object Id.\"}\r",
											"\r",
											"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
											"                            // console.log('jsonParseResponseObject : : : ',jsonParseResponseObject);              \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeForbiddenMissingOrInvalidParameter);  \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionThePartnerIdFieldIsNotObjectId);  \r",
											"\r",
											"\r",
											"                            console.log(\"response.partnerInfo.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeForbiddenMissingOrInvalidParameter);\r",
											"                            console.log(\"response.partnerInfo.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionThePartnerIdFieldIsNotObjectId); \r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"setTimeout(function(){SearchLogFindTid();}, 7000); \r",
											"setTimeout(function(){CheckLog();}, 20000); \r",
											"setTimeout(function(){\r",
											"pm.environment.unset(\"random_number\");\r",
											"pm.environment.unset(\"PartnerName\");\r",
											"pm.environment.unset(\"MerchantContact\");\r",
											"pm.environment.unset(\"CPID\");\r",
											"pm.environment.unset(\"sessionId\");\r",
											"pm.environment.unset(\"current_timestamp\");\r",
											"pm.environment.unset(\"AccessToken\");\r",
											"pm.environment.unset(\"GetResponse_PartnerId\");\r",
											"pm.environment.unset(\"GetResponse_CustomerId\");\r",
											"pm.environment.unset(\"Value_DeletePartner_TST_F4_0_2_002_PartnerId\");\r",
											"pm.environment.unset(\"tid\");\r",
											"}, 30000);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var Username = pm.environment.get(\"Username\");\r",
											"var Password = pm.environment.get(\"Password\");\r",
											"\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"pm.environment.set(\"Value_DeletePartner_TST_F4_0_2_002_PartnerId\",fieldDataValue.Provisioning.Partner.RemovePartner.Value_DeletePartner_TST_F4_0_2_002_PartnerId)\r",
											"\r",
											"\r",
											"//format YYYYMMDDHHMMSSS\r",
											"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
											"// console.log('currentTmestamp',currentTmestamp);\r",
											"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- statusCodeList --------------//\r",
											"//set variable to statusCodeList JSON.parse\r",
											"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
											"//set global variable to statusCode 200\r",
											"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
											"//set global variable to statusCode 201\r",
											"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
											"\r",
											"//---------------- resultCodeList --------------//\r",
											"//set variable to resultCodeList JSON.parse\r",
											"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
											"//set global variable to resultCode \"20000\"\r",
											"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
											"//set global variable to resultCode \"20100\"\r",
											"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
											"\r",
											"//---------------- resultDescriptionSuccessList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
											"//set global variable to resultDescription \"SignInProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
											"//set global variable to resultDescription \"CreatePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
											"\r",
											"//---------------- resultDescriptionErrorList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
											"//set global variable to resultDescription \"The PartnerId field is not Object Id.\"\r",
											"pm.globals.set(\"resultDescriptionThePartnerIdFieldIsNotObjectId\", resultDescriptionErrorList.resultDescriptionThePartnerIdFieldIsNotObjectId);\r",
											"\r",
											"//---------------- HeaderList --------------//\r",
											"//set variable to HeaderList JSON.parse\r",
											"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
											"//---------------- set globals Other --------------//\r",
											"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
											"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
											"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
											"//set global variable to kbn-versio \"7.5.1\"\r",
											"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Signin_ --------------//\r",
											"//set global variable to x_ais_OrderRef \"Signin_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Partner --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
											"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
											"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
											"//set global variable to x_ais_OrderRef \"RemovePartner_fail\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemovePartner_fail\", HeaderList.Partner.x_ais_OrderRef_RemovePartner_fail);\r",
											"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultCode \"20100\"\r",
											"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
											"//get global variable to resultDescription \"SignInProcess is Success\"\r",
											"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
											"//get global variable to resultDescription \"CreatePartner is Success\"\r",
											"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
											"\r",
											"\r",
											"//---------------- urlRouteList --------------//\r",
											"//set variable to urlRouteList JSON.parse\r",
											"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
											"//---------------- set url Create --------------//\r",
											"//set global variable to url \"/api/v1/auth/signin\"\r",
											"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
											"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
											"\r",
											"//---------------- get url Create --------------//\r",
											"//get global variable to url \"/api/v1/auth/signin\"\r",
											"var urlSignin = pm.globals.get(\"urlSignin\");\r",
											"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
											"\r",
											"//---------------- set url Remove --------------//\r",
											"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
											"\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"Signin_\"\r",
											"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"// Signin get token\r",
											" Signin = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username,\r",
											"                password:Password\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"\r",
											"        //set random_number\r",
											"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
											"        //set PartnerName\r",
											"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
											"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
											"        //set MerchantContact\r",
											"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
											"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
											"        // set CPID\r",
											"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
											"        pm.environment.set(\"CPID\", CPIDValue)\r",
											"        \r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreatePartner\r",
											" CreatePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreatePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreatePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
											"                \"PartnerType\": [\r",
											"                    \"Supplier\",\r",
											"                    \"Customer\"\r",
											"                ],\r",
											"                \"PartnerDetail\": {\r",
											"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
											"                    \"CPID\": pm.environment.get(\"CPID\")\r",
											"                },\r",
											"                \"Property\": {\r",
											"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
											"                }\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsCreatePartner = {\r",
											"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreatePartner,\r",
											"            body: httpRequestCreatePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsCreatePartner);\r",
											"        let jsonDataCreatePartner = await response.json();\r",
											"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
											"    \r",
											"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreatePartner is Success\r",
											"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
											"        });\r",
											"\r",
											"     \r",
											"        //GetResponse_PartnerId\r",
											"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
											"\r",
											"        //GetResponse_CustomerId\r",
											"        pm.environment.set(\"GetResponse_CustomerId\", jsonDataCreatePartner.PartnerInfo.CustomerId);\r",
											"        \r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"Signin();\r",
											"setTimeout(async function(){await CreatePartner();}, 5000); \r",
											"setTimeout(async function(){}, 6000);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-ais-UserName",
										"type": "text",
										"value": "{{x_ais_UserName_AisPartner}}"
									},
									{
										"key": "x-ais-OrderRef",
										"value": "{{x_ais_OrderRef_RemovePartner_fail}}{{current_timestamp}}"
									},
									{
										"key": "x-ais-OrderDesc",
										"type": "text",
										"value": "{{x_ais_OrderDesc_RemovePartner}}"
									},
									{
										"key": "x-ais-AccessToken",
										"value": "{{Bearer}} {{AccessToken}}"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"PartnerId\": \"{{GetResponse_PartnerId}}{{Value_DeletePartner_TST_F4_0_2_002_PartnerId}}\"\r\n}"
								},
								"url": {
									"raw": "{{url}}{{provisioningapis}}/api/v1/Partner/RemovePartner",
									"host": [
										"{{url}}{{provisioningapis}}"
									],
									"path": [
										"api",
										"v1",
										"Partner",
										"RemovePartner"
									]
								},
								"description": "Type:Desire"
							},
							"response": []
						},
						{
							"name": "RemovePartner_TST_F4_0_2_004_Error_SupplierAdminRoleInvalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"InquiryPartner_\"\r",
											"var x_ais_OrderRef_InquiryPartner = pm.globals.get(\"x_ais_OrderRef_InquiryPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"InquiryPartner\"\r",
											"var x_ais_OrderDesc_InquiryPartner = pm.globals.get(\"x_ais_OrderDesc_InquiryPartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get globals SystemUser --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemoveSystemUser_\"\r",
											"var x_ais_OrderRef_RemoveSystemUser = pm.globals.get(\"x_ais_OrderRef_RemoveSystemUser\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveSystemUser\"\r",
											"var x_ais_OrderDesc_RemoveSystemUser = pm.globals.get(\"x_ais_OrderDesc_RemoveSystemUser\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Inquiry --------------//\r",
											"//get global variable to url \"/api/v1/Partner/InquiryPartner\"\r",
											"var urlPartnerInquiryPartner = pm.globals.get(\"urlPartnerInquiryPartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"//---------------- get url Remove --------------//\r",
											"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
											"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
											"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
											"//get global variable to url \"/api/v1/SystemUser/RemoveSystemUser\"\r",
											"var urlSystemUserRemoveSystemUser = pm.globals.get(\"urlSystemUserRemoveSystemUser\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultDescription \"RemovePartner is Success\"\r",
											"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
											"//get global variable to resultDescription \"InquiryPartner is Success\"\r",
											"var resultDescriptionInquiryPartner = pm.globals.get(\"resultDescriptionInquiryPartner\");\r",
											"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
											"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
											"//get global variable to resultDescription \"RemoveSystemUser is Success\"\r",
											"var resultDescriptionRemoveSystemUser = pm.globals.get(\"resultDescriptionRemoveSystemUser\");\r",
											"\r",
											"//get global variable to statusCode 403\r",
											"var statusCodeForbidden = pm.globals.get(\"statusCodeForbidden\");\r",
											"//get global variable to resultCode \"40308\"\r",
											"var resultCodeRoleInvalid = pm.globals.get(\"resultCodeRoleInvalid\");\r",
											"//get global variable to resultDescription \"Role Invalid\"\r",
											"var resultDescriptionRoleInvalid = pm.globals.get(\"resultDescriptionRoleInvalid\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"RemovePartner : Status code is \" + statusCodeForbidden, function () {\r",
											"    pm.response.to.have.status(statusCodeForbidden);\r",
											"});\r",
											"\r",
											"pm.test('RemovePartner : operationStatus code is '+'\"'+ resultCodeRoleInvalid +'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeRoleInvalid);\r",
											"});\r",
											"\r",
											"pm.test('RemovePartner : operationStatus description is '+'\"'+ resultDescriptionRoleInvalid+'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionRoleInvalid);\r",
											"});\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//---------------- LogDefaultValue --------------//\r",
											"//set variable to LogDefaultValue JSON.parse\r",
											"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
											"// console.log('LogDefaultValue',LogDefaultValue);\r",
											"//---------------- set globals Other --------------//\r",
											"\r",
											"var SearchLog = LogDefaultValue.SearchLog;\r",
											"// console.log('SearchLog',SearchLog);\r",
											"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
											"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
											"var kbn_version = SearchLog.header.kbn_version;\r",
											"var authorization = SearchLog.header.Authorization;\r",
											"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
											"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
											"var namespace = LogDefaultValue.Other.namespace;\r",
											"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
											"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
											"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
											"var methodDelete = LogDefaultValue.Other.methodDelete;\r",
											"\r",
											"// Detail\r",
											"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
											"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
											"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
											"\r",
											"// Summary\r",
											"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
											"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
											"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
											"\r",
											"// ProvisioningAPIs [Partner]\r",
											"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
											"var cmdName = LogDefaultValue.Provisioning.Partner.cmdNameRemovePartner;\r",
											"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
											"var containerId = LogDefaultValue.Provisioning.containerId;\r",
											"var requestObjectUrlStaging = LogDefaultValue.Provisioning.Partner.requestObjectUrlRemovePartnerMgStaging;\r",
											"\r",
											"// Check CDR (Summary Log) and EDR (Detail Log)\r",
											"SearchLogFindTid = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSearchLogFindTid = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization' : authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = x_ais_OrderRef_RemovePartner + current_timestamp;\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestSearchLogFindTid = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"\r",
											"        let optionsSearchLogFindTid = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptSearchLogFindTid,\r",
											"            body: httpRequestSearchLogFindTid\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsSearchLogFindTid);\r",
											"        let jsonDataSearchLogFindTid = await response.json();\r",
											"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
											"\r",
											"        // //200\r",
											"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"\r",
											"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
											"        console.log('hits',hits)\r",
											"  \r",
											"        // find tid\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            // let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"        \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            if(applicationNameValue == applicationName){\r",
											"                let tid = hits[i]._source.cauldron.tid;\r",
											"                pm.environment.set(\"tid\", tid);\r",
											"                break;\r",
											"           }\r",
											"        }\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"CheckLog = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCheckLog = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = pm.environment.get(\"tid\");\r",
											"\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestCheckLog = {\r",
											"            mode: 'raw',\r",
											"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"        let optionsCheckLog = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptCheckLog,\r",
											"            body: httpRequestCheckLog\r",
											"        }; \r",
											"        let response = await reqPromise(optionsCheckLog);\r",
											"        let jsonDataCheckLog = await response.json();\r",
											"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
											"        \r",
											"        // //200\r",
											"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });     \r",
											"        \r",
											"        let hits = jsonDataCheckLog.hits.hits\r",
											"        console.log('hits',hits)\r",
											"  \r",
											"        // find logType\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            //  let logType = hits[i]._source.cauldron.logType\r",
											"            let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"           \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            \r",
											"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
											"            console.log('resultDataLog',resultDataLog)\r",
											"\r",
											"            let tidControl = x_ais_OrderRef_RemovePartner + current_timestamp;\r",
											"            // console.log(tidControl);\r",
											"            if(applicationNameValue == applicationName){\r",
											"                 \r",
											"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ProvisioningAPIs\r",
											"                pm.test(\"Check Summary Log : RemovePartner\" , function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Summary Log ( Expected = Actual) [RemovePartner] ==================\");\r",
											"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
											"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
											"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeRoleInvalid);\r",
											"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionRoleInvalid);\r",
											"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
											"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                         // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
											"                        console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
											"\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
											"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
											"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeRoleInvalid); \r",
											"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionRoleInvalid); \r",
											"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
											"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
											"                        pm.expect(resultDataLog.custom).to.eql(customSummary);                    \r",
											"\r",
											"                    }); \r",
											"                }\r",
											"\r",
											"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ProvisioningAPIs\r",
											"\r",
											"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
											"                    // console.log('endPointNameValue ',endPointNameValue)\r",
											"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [RemovePartner]\", function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Detail Log ( Expected = Actual) [RemovePartner] ==================\");\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
											"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
											"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
											"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
											"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
											"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
											"\r",
											"                        if( endPointNameValue == endPointNameProvisioningAPIs){     //\"endPointName\":\"ProvisioningAPIs\"\r",
											"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs); \r",
											"                        \r",
											"                            // check requestObject\r",
											"                            // \"requestObject\":\"{\\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Partner/RemovePartner\\\",\\\"method\\\":\\\"DELETE\\\",\\\"headers\\\":{\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"RemovePartner_202104191504121\\\",\\\"x-ais-orderdesc\\\":\\\"RemovePartner\\\",\\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAGFEbL+6SxXpwsuQ2AFXzxdP5ASliv7b/ivuC4tlIIbY0IlAkkY2KW0\\\"},\\\"body\\\":{\\\"PartnerId\\\":\\\"607d438763fa0e0001c335bf\\\"}}\",\r",
											"\r",
											"\r",
											"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
											"                            // console.log('jsonParseRequestObject : : :',jsonParseRequestObject);\r",
											"                            \r",
											"                            let url = urlCheckLog + requestObjectUrlStaging; \r",
											"                            let x_ais_orderref = x_ais_OrderRef_RemovePartner + current_timestamp;\r",
											"                            let x_ais_orderdesc = x_ais_OrderDesc_RemovePartner;\r",
											"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken2\");                           \r",
											"                            let PartnerId = pm.environment.get(\"GetResponse_PartnerId\");\r",
											"\r",
											"\r",
											"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
											"                            pm.expect(jsonParseRequestObject.method).to.eql(methodDelete);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerId).to.eql(PartnerId);\r",
											"\r",
											"\r",
											"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
											"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodDelete);\r",
											"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
											"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
											"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
											"                            console.log(\"resquest.body.PartnerId : \" + jsonParseRequestObject.body.PartnerId + \" = \" + PartnerId);\r",
											"\r",
											"                                                  \r",
											"                            // check responseObject\r",
											"                            //  \"responseObject\":\"{\\\"OperationStatus\\\":{\\\"Code\\\":\\\"20000\\\",\\\"Description\\\":\\\"RemovePartner is Success\\\"}\r",
											"\r",
											"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
											"                            // console.log('jsonParseResponseObject : : : ',jsonParseResponseObject);              \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeRoleInvalid);  \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionRoleInvalid);  \r",
											"\r",
											"                            console.log(\"response.partnerInfo.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeRoleInvalid);\r",
											"                            console.log(\"response.partnerInfo.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionRoleInvalid); \r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"setTimeout(function(){SearchLogFindTid();}, 30000); \r",
											"setTimeout(function(){CheckLog();}, 40000); \r",
											"\r",
											"\r",
											"\r",
											"setTimeout(function(){\r",
											"pm.environment.unset(\"random_number\");\r",
											"pm.environment.unset(\"PartnerName\");\r",
											"pm.environment.unset(\"MerchantContact\");\r",
											"pm.environment.unset(\"CPID\");\r",
											"pm.environment.unset(\"sessionId\");\r",
											"pm.environment.unset(\"current_timestamp\");\r",
											"pm.environment.unset(\"AccessToken\");\r",
											"pm.environment.unset(\"GetResponse_PartnerId\");\r",
											"pm.environment.unset(\"GetResponse_CustomerId\");\r",
											"pm.environment.unset(\"tid\");\r",
											"pm.environment.unset(\"AccessToken2\");\r",
											"pm.environment.unset(\"tid\");\r",
											"pm.environment.unset(\"AccountName\");\r",
											"pm.environment.unset(\"GetResponse_AccountName\");\r",
											"pm.environment.unset(\"GetResponse_AccountId\");\r",
											"pm.environment.unset(\"GetResponse_SystemUserId\");\r",
											"\r",
											"}, 50000);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var Username = pm.environment.get(\"Username\");\r",
											"var Password = pm.environment.get(\"Password\");\r",
											"var Username2 = pm.environment.get(\"Username_SupplierAdmin\");\r",
											"var Password2 = pm.environment.get(\"Password_SupplierAdmin\");\r",
											"\r",
											"\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"\r",
											"let UserRole = fieldDataValue.role.role_SupplierAdmin;\r",
											"\r",
											"//format YYYYMMDDHHMMSSS\r",
											"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
											"\r",
											"// console.log('currentTmestamp',currentTmestamp);\r",
											"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
											"\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- statusCodeList --------------//\r",
											"//set variable to statusCodeList JSON.parse\r",
											"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
											"//set global variable to statusCode 200\r",
											"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
											"//set global variable to statusCode 201\r",
											"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
											"//set global variable to statusCode 403\r",
											"pm.globals.set(\"statusCodeForbidden\", statusCodeList.statusCodeForbidden);\r",
											"\r",
											"//---------------- resultCodeList --------------//\r",
											"//set variable to resultCodeList JSON.parse\r",
											"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
											"//set global variable to resultCode \"20000\"\r",
											"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
											"//set global variable to resultCode \"20100\"\r",
											"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
											"//set global variable to resultCode \"40308\"\r",
											"pm.globals.set(\"resultCodeRoleInvalid\", resultCodeList.resultCodeRoleInvalid);\r",
											"\r",
											"//---------------- resultDescriptionSuccessList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
											"//set global variable to resultDescription \"SignInProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
											"//set global variable to resultDescription \"CreatePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
											"//set global variable to resultDescription \"RemovePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
											"//set global variable to resultDescription \"InquiryPartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionInquiryPartner\", resultDescriptionSuccessList.resultDescriptionInquiryPartner);\r",
											"//set global variable to resultDescription \"RemoveSystemUser is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveSystemUser\", resultDescriptionSuccessList.resultDescriptionRemoveSystemUser);\r",
											"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
											"\r",
											"//---------------- resultDescriptionErrorList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
											"//set global variable to resultDescription \"Role Invalid\"\r",
											"pm.globals.set(\"resultDescriptionRoleInvalid\", resultDescriptionErrorList.resultDescriptionRoleInvalid);\r",
											"\r",
											"\r",
											"//---------------- HeaderList --------------//\r",
											"//set variable to HeaderList JSON.parse\r",
											"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
											"//---------------- set globals Other --------------//\r",
											"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
											"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
											"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
											"//set global variable to kbn-versio \"7.5.1\"\r",
											"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Signin_ --------------//\r",
											"//set global variable to x_ais_OrderRef \"Signin_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals CreatePartner --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
											"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
											"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
											"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
											"//set global variable to x_ais_OrderRef \"InquiryPartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_InquiryPartner\", HeaderList.Partner.x_ais_OrderRef_InquiryPartner);\r",
											"//set global variable to x_ais_OrderDesc \"InquiryPartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_InquiryPartner\", HeaderList.Partner.x_ais_OrderDesc_InquiryPartner);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals CreateAccount --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
											"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
											"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
											"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals SystemUser --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreateSystemUser_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreateSystemUser\", HeaderList.SystemUser.x_ais_OrderRef_CreateSystemUser);\r",
											"//set global variable to x_ais_OrderDesc \"CreateSystemUser\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreateSystemUser\", HeaderList.SystemUser.x_ais_OrderDesc_CreateSystemUser);\r",
											"//set global variable to x_ais_OrderRef \"RemoveSystemUser_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemoveSystemUser\", HeaderList.SystemUser.x_ais_OrderRef_RemoveSystemUser);\r",
											"//set global variable to x_ais_OrderDesc \"RemoveSystemUser\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemoveSystemUser\", HeaderList.SystemUser.x_ais_OrderDesc_RemoveSystemUser);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultCode \"20100\"\r",
											"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
											"//get global variable to resultDescription \"SignInProcess is Success\"\r",
											"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
											"//get global variable to resultDescription \"CreatePartner is Success\"\r",
											"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
											"//get global variable to resultDescription \"CreateAccount is Success\"\r",
											"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
											"//get global variable to resultDescription \"CreateSystemUser is Success\"\r",
											"var resultDescriptionCreateSystemUser = pm.globals.get(\"resultDescriptionCreateSystemUser\");\r",
											"\r",
											"\r",
											"//---------------- urlRouteList --------------//\r",
											"//set variable to urlRouteList JSON.parse\r",
											"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
											"//---------------- set url Create --------------//\r",
											"//set global variable to url \"/api/v1/auth/signin\"\r",
											"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
											"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
											"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
											"//set global variable to url \"/api/v1/SystemUser/CreateSystemUser\"\r",
											"pm.globals.set(\"urlSystemUserCreateSystemUser\", urlRouteList.SystemUser.urlSystemUserCreateSystemUser);\r",
											"\r",
											"//---------------- get url Create --------------//\r",
											"//get global variable to url \"/api/v1/auth/signin\"\r",
											"var urlSignin = pm.globals.get(\"urlSignin\");\r",
											"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
											"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
											"//get global variable to url \"/api/v1/SystemUser/CreateSystemUser\"\r",
											"var urlSystemUserCreateSystemUser = pm.globals.get(\"urlSystemUserCreateSystemUser\");\r",
											"\r",
											"//---------------- set url Remove --------------//\r",
											"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
											"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
											"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
											"//set global variable to url \"/api/v1/SystemUser/RemoveSystemUser\"\r",
											"pm.globals.set(\"urlSystemUserRemoveSystemUser\", urlRouteList.SystemUser.urlSystemUserRemoveSystemUser);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set url Inquiry --------------//\r",
											"//set global variable to url \"/api/v1/Partner/InquiryPartner\"\r",
											"pm.globals.set(\"urlPartnerInquiryPartner\", urlRouteList.Partner.urlPartnerInquiryPartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"Signin_\"\r",
											"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals SystemUser --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreateSystemUser_\"\r",
											"var x_ais_OrderRef_CreateSystemUser = pm.globals.get(\"x_ais_OrderRef_CreateSystemUser\");\r",
											"//get global variable to x_ais_OrderDesc \"CreateSystemUser\"\r",
											"var x_ais_OrderDesc_CreateSystemUser = pm.globals.get(\"x_ais_OrderDesc_CreateSystemUser\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"// Signin get token ROOT ADMIN\r",
											" Signin = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username,\r",
											"                password:Password\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"\r",
											"        //set random_number\r",
											"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
											"        //set PartnerName\r",
											"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
											"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
											"        //set MerchantContact\r",
											"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
											"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
											"        // set CPID\r",
											"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
											"        pm.environment.set(\"CPID\", CPIDValue)\r",
											"        \r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreatePartner\r",
											" CreatePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreatePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreatePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
											"                \"PartnerType\": [\r",
											"                    \"Supplier\",\r",
											"                    \"Customer\"\r",
											"                ],\r",
											"                \"PartnerDetail\": {\r",
											"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
											"                    \"CPID\": pm.environment.get(\"CPID\")\r",
											"                },\r",
											"                \"Property\": {\r",
											"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
											"                }\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsCreatePartner = {\r",
											"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreatePartner,\r",
											"            body: httpRequestCreatePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsCreatePartner);\r",
											"        let jsonDataCreatePartner = await response.json();\r",
											"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
											"    \r",
											"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreatePartner is Success\r",
											"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
											"        });\r",
											"\r",
											"     \r",
											"        //GetResponse_PartnerId\r",
											"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
											"\r",
											"        //GetResponse_CustomerId\r",
											"        pm.environment.set(\"GetResponse_CustomerId\", jsonDataCreatePartner.PartnerInfo.CustomerId);\r",
											"\r",
											"\r",
											"                //Accountname\r",
											"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
											"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
											"        \r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"// Signin get token\r",
											" Signin2 = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username2,\r",
											"                password:Password2\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken2\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"Signin();\r",
											"setTimeout(async function(){await CreatePartner();}, 8000); \r",
											"setTimeout(async function(){await Signin2();}, 10000); \r",
											"setTimeout(async function(){}, 15000); \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-ais-UserName",
										"type": "text",
										"value": "{{x_ais_UserName_AisPartner}}"
									},
									{
										"key": "x-ais-OrderRef",
										"value": "{{x_ais_OrderRef_RemovePartner}}{{current_timestamp}}"
									},
									{
										"key": "x-ais-OrderDesc",
										"type": "text",
										"value": "{{x_ais_OrderDesc_RemovePartner}}"
									},
									{
										"key": "x-ais-AccessToken",
										"value": "{{Bearer}} {{AccessToken2}}"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"PartnerId\": \"{{GetResponse_PartnerId}}\"\r\n}"
								},
								"url": {
									"raw": "{{url}}{{provisioningapis}}/api/v1/Partner/RemovePartner",
									"host": [
										"{{url}}{{provisioningapis}}"
									],
									"path": [
										"api",
										"v1",
										"Partner",
										"RemovePartner"
									]
								},
								"description": "Type:Desire"
							},
							"response": []
						},
						{
							"name": "RemovePartner_TST_F4_0_2_003_Error_PartnerIdNotFound",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"\r",
											"\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
											"//get global variable to x_ais_OrderRef \"RemovePartner_fail\"\r",
											"var x_ais_OrderRef_RemovePartner_fail = pm.globals.get(\"x_ais_OrderRef_RemovePartner_fail\");\r",
											"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"//get global variable to statusCode 404\r",
											"var statusCodeNotFound = pm.globals.get(\"statusCodeNotFound\");\r",
											"//get global variable to resultCode \"40400\"\r",
											"var resultCodeNotFound = pm.globals.get(\"resultCodeNotFound\");\r",
											"//get global variable to resultDescription \"The PartnerId field is not Object Id.\"\r",
											"var resultDescriptionThePartnerIdIsNotFound = pm.globals.get(\"resultDescriptionThePartnerIdIsNotFound\");\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"RemovePartner : Status code is \" + statusCodeNotFound, function () {\r",
											"    pm.response.to.have.status(statusCodeNotFound);\r",
											"});\r",
											"\r",
											"pm.test('RemovePartner : operationStatus code is '+'\"'+ resultCodeNotFound +'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeNotFound);\r",
											"});\r",
											"\r",
											"pm.test('RemovePartner : operationStatus description is '+'\"'+ resultDescriptionThePartnerIdIsNotFound+'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionThePartnerIdIsNotFound);\r",
											"});\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"\r",
											"//---------------- LogDefaultValue --------------//\r",
											"//set variable to LogDefaultValue JSON.parse\r",
											"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
											"// console.log('LogDefaultValue',LogDefaultValue);\r",
											"//---------------- set globals Other --------------//\r",
											"\r",
											"var SearchLog = LogDefaultValue.SearchLog;\r",
											"// console.log('SearchLog',SearchLog);\r",
											"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
											"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
											"var kbn_version = SearchLog.header.kbn_version;\r",
											"var authorization = SearchLog.header.Authorization;\r",
											"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
											"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
											"var namespace = LogDefaultValue.Other.namespace;\r",
											"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
											"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
											"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
											"var methodDelete = LogDefaultValue.Other.methodDelete;\r",
											"\r",
											"// Detail\r",
											"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
											"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
											"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
											"\r",
											"// Summary\r",
											"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
											"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
											"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
											"\r",
											"// ProvisioningAPIs [Partner]\r",
											"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
											"var cmdName = LogDefaultValue.Provisioning.Partner.cmdNameRemovePartner;\r",
											"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
											"var containerId = LogDefaultValue.Provisioning.containerId;\r",
											"var requestObjectUrlStaging = LogDefaultValue.Provisioning.Partner.requestObjectUrlRemovePartnerMgStaging;\r",
											"\r",
											"// Check CDR (Summary Log) and EDR (Detail Log)\r",
											"SearchLogFindTid = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSearchLogFindTid = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization' : authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = x_ais_OrderRef_RemovePartner_fail + current_timestamp;\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestSearchLogFindTid = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"\r",
											"        let optionsSearchLogFindTid = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptSearchLogFindTid,\r",
											"            body: httpRequestSearchLogFindTid\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsSearchLogFindTid);\r",
											"        let jsonDataSearchLogFindTid = await response.json();\r",
											"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
											"\r",
											"        // //200\r",
											"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"\r",
											"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
											"        console.log('hits',hits)\r",
											"  \r",
											"        // find tid\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            // let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"        \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            if(applicationNameValue == applicationName){\r",
											"                let tid = hits[i]._source.cauldron.tid;\r",
											"                pm.environment.set(\"tid\", tid);\r",
											"                break;\r",
											"           }\r",
											"        }\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"CheckLog = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCheckLog = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = pm.environment.get(\"tid\");\r",
											"\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestCheckLog = {\r",
											"            mode: 'raw',\r",
											"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"        let optionsCheckLog = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptCheckLog,\r",
											"            body: httpRequestCheckLog\r",
											"        }; \r",
											"        let response = await reqPromise(optionsCheckLog);\r",
											"        let jsonDataCheckLog = await response.json();\r",
											"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
											"        \r",
											"        // //200\r",
											"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });     \r",
											"        \r",
											"        let hits = jsonDataCheckLog.hits.hits\r",
											"        console.log('hits',hits)\r",
											"  \r",
											"        // find logType\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            //  let logType = hits[i]._source.cauldron.logType\r",
											"            let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"           \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            \r",
											"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
											"            // console.log('resultDataLog',resultDataLog)\r",
											"\r",
											"            let tidControl = x_ais_OrderRef_RemovePartner_fail + current_timestamp;\r",
											"            // console.log(tidControl);\r",
											"            if(applicationNameValue == applicationName){\r",
											"                 \r",
											"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ProvisioningAPIs\r",
											"                    pm.test(\"Check Summary Log : RemovePartner\" , function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Summary Log ( Expected = Actual) [RemovePartner] ==================\");\r",
											"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
											"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
											"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeNotFound);\r",
											"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionThePartnerIdIsNotFound);\r",
											"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
											"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                         // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
											"                        //  console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
											"\r",
											"                        \r",
											"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
											"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
											"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeNotFound); \r",
											"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionThePartnerIdIsNotFound); \r",
											"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
											"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
											"                        // pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
											"\r",
											"                        // check custom\r",
											"                        // \"custom\":[ { \"no\":\"1\", \"endPointName\":\"db.TenantsCollection\", \"responseStatus\":\"Success:InquiryTenant was successfully.\", \"processTime\":1.7072 } ],\r",
											"\r",
											"                        let custom = resultDataLog.custom.endPointSummary;\r",
											"                        // console.log(\"custom : : :\",custom)\r",
											"                        let countCustom = custom.length;\r",
											"\r",
											"                        // [\"db.TenantsCollection\"],\r",
											"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_RemovePartner_003;\r",
											"                        // [\"Success:InquiryTenant was successfully.\"]\r",
											"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_RemovePartner_003;\r",
											"                        let countCustomStep = dataEndPointName.length;\r",
											"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
											"                        for(let i=0;i<countCustomStep;i++){\r",
											"                            let no = custom[i].no;\r",
											"                            let valueEndPointName = custom[i].endPointName;\r",
											"                            let valueResponseStatus = custom[i].responseStatus;\r",
											"                            // console.log(\"i\",i);\r",
											"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
											"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
											"                           \r",
											"                            console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep );\r",
											"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString() );\r",
											"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i] );\r",
											"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i] );\r",
											"                           \r",
											"                            pm.expect(no).to.eql((i+1).toString()); \r",
											"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
											"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]);  \r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"\r",
											"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ProvisioningAPIs\r",
											"\r",
											"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
											"                    // console.log('endPointNameValue ',endPointNameValue)\r",
											"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [RemovePartner]\", function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Detail Log ( Expected = Actual) [RemovePartner] ==================\");\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
											"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
											"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
											"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
											"\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
											"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
											"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
											"\r",
											"                        if( endPointNameValue == endPointNameProvisioningAPIs){     //\"endPointName\":\"ProvisioningAPIs\"\r",
											"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs); \r",
											"                        \r",
											"                            // check requestObject\r",
											"                            // \"requestObject\":\"{\\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Partner/RemovePartner\\\",\\\"method\\\":\\\"DELETE\\\",\\\"headers\\\":{\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"RemovePartner_202104191504121\\\",\\\"x-ais-orderdesc\\\":\\\"RemovePartner\\\",\\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAGFEbL+6SxXpwsuQ2AFXzxdP5ASliv7b/ivuC4tlIIbY0IlAkkY2KW0\\\"},\\\"body\\\":{\\\"PartnerId\\\":\\\"607d438763fa0e0001c335bf\\\"}}\",\r",
											"                            \r",
											"                            let url = urlCheckLog + requestObjectUrlStaging; \r",
											"                            let x_ais_orderref = x_ais_OrderRef_RemovePartner_fail + current_timestamp;\r",
											"                            let x_ais_orderdesc = x_ais_OrderDesc_RemovePartner;\r",
											"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken\");                           \r",
											"                            let PartnerId = pm.environment.get(\"Value_DeletePartner_TST_F4_0_2_003_PartnerId\")\r",
											"\r",
											"\r",
											"\r",
											"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
											"                            // console.log('jsonParseRequestObject : : :',jsonParseRequestObject);\r",
											"\r",
											"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
											"                            pm.expect(jsonParseRequestObject.method).to.eql(methodDelete);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerId).to.eql(PartnerId);\r",
											"\r",
											"\r",
											"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
											"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodDelete);\r",
											"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
											"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
											"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
											"                            console.log(\"resquest.body.PartnerId : \" + jsonParseRequestObject.body.PartnerId + \" = \" + PartnerId);\r",
											"                         \r",
											"                            \r",
											"                            // check responseObject\r",
											"                            //  \"responseObject\":\"{\\\"OperationStatus\\\":{\\\"Code\\\":\\\"20000\\\",\\\"Description\\\":\\\"RemovePartner is Success\\\"}\r",
											"\r",
											"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
											"                            // console.log('jsonParseResponseObject : : : ',jsonParseResponseObject);              \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeNotFound);  \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionThePartnerIdIsNotFound);  \r",
											"\r",
											"                            console.log(\"response.partnerInfo.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeNotFound);\r",
											"                            console.log(\"response.partnerInfo.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionThePartnerIdIsNotFound); \r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"setTimeout(function(){SearchLogFindTid();}, 7000); \r",
											"setTimeout(function(){CheckLog();}, 20000); \r",
											"setTimeout(function(){\r",
											"pm.environment.unset(\"random_number\");\r",
											"pm.environment.unset(\"PartnerName\");\r",
											"pm.environment.unset(\"MerchantContact\");\r",
											"pm.environment.unset(\"CPID\");\r",
											"pm.environment.unset(\"sessionId\");\r",
											"pm.environment.unset(\"current_timestamp\");\r",
											"pm.environment.unset(\"AccessToken\");\r",
											"pm.environment.unset(\"GetResponse_PartnerId\");\r",
											"pm.environment.unset(\"GetResponse_CustomerId\");\r",
											"pm.environment.unset(\"Value_DeletePartner_TST_F4_0_2_003_PartnerId\");\r",
											"pm.environment.unset(\"tid\");\r",
											"}, 30000);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var Username = pm.environment.get(\"Username\");\r",
											"var Password = pm.environment.get(\"Password\");\r",
											"\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"pm.environment.set(\"Value_DeletePartner_TST_F4_0_2_003_PartnerId\",fieldDataValue.Provisioning.Partner.RemovePartner.Value_DeletePartner_TST_F4_0_2_003_PartnerId)\r",
											"\r",
											"\r",
											"//format YYYYMMDDHHMMSSS\r",
											"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
											"// console.log('currentTmestamp',currentTmestamp);\r",
											"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- statusCodeList --------------//\r",
											"//set variable to statusCodeList JSON.parse\r",
											"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
											"//set global variable to statusCode 200\r",
											"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
											"//set global variable to statusCode 201\r",
											"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
											"//set global variable to statusCode 404\r",
											"pm.globals.set(\"statusCodeNotFound\", statusCodeList.statusCodeNotFound);\r",
											"\r",
											"//---------------- resultCodeList --------------//\r",
											"//set variable to resultCodeList JSON.parse\r",
											"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
											"//set global variable to resultCode \"20000\"\r",
											"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
											"//set global variable to resultCode \"20100\"\r",
											"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
											"//set global variable to resultCode \"40400\"\r",
											"pm.globals.set(\"resultCodeNotFound\", resultCodeList.resultCodeNotFound);\r",
											"\r",
											"//---------------- resultDescriptionSuccessList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
											"//set global variable to resultDescription \"SignInProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
											"//set global variable to resultDescription \"CreatePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
											"\r",
											"//---------------- resultDescriptionErrorList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
											"//set global variable to resultDescription \"The PartnerId is Not Found\"\r",
											"pm.globals.set(\"resultDescriptionThePartnerIdIsNotFound\", resultDescriptionErrorList.resultDescriptionThePartnerIdIsNotFound);\r",
											"\r",
											"//---------------- HeaderList --------------//\r",
											"//set variable to HeaderList JSON.parse\r",
											"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
											"//---------------- set globals Other --------------//\r",
											"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
											"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
											"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
											"//set global variable to kbn-versio \"7.5.1\"\r",
											"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Signin_ --------------//\r",
											"//set global variable to x_ais_OrderRef \"Signin_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals CreatePartner --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
											"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
											"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
											"//set global variable to x_ais_OrderRef \"RemovePartner_fail\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemovePartner_fail\", HeaderList.Partner.x_ais_OrderRef_RemovePartner_fail);\r",
											"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultCode \"20100\"\r",
											"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
											"//get global variable to resultDescription \"SignInProcess is Success\"\r",
											"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
											"//get global variable to resultDescription \"CreatePartner is Success\"\r",
											"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
											"\r",
											"\r",
											"//---------------- urlRouteList --------------//\r",
											"//set variable to urlRouteList JSON.parse\r",
											"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
											"//---------------- set url Create --------------//\r",
											"//set global variable to url \"/api/v1/auth/signin\"\r",
											"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
											"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
											"\r",
											"//---------------- get url Create --------------//\r",
											"//get global variable to url \"/api/v1/auth/signin\"\r",
											"var urlSignin = pm.globals.get(\"urlSignin\");\r",
											"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
											"\r",
											"//---------------- set url Remove --------------//\r",
											"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
											"\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"Signin_\"\r",
											"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"// Signin get token\r",
											" Signin = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username,\r",
											"                password:Password\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"\r",
											"        //set random_number\r",
											"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
											"        //set PartnerName\r",
											"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
											"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
											"        //set MerchantContact\r",
											"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
											"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
											"        // set CPID\r",
											"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
											"        pm.environment.set(\"CPID\", CPIDValue)\r",
											"        \r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreatePartner\r",
											" CreatePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreatePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreatePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
											"                \"PartnerType\": [\r",
											"                    \"Supplier\",\r",
											"                    \"Customer\"\r",
											"                ],\r",
											"                \"PartnerDetail\": {\r",
											"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
											"                    \"CPID\": pm.environment.get(\"CPID\")\r",
											"                },\r",
											"                \"Property\": {\r",
											"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
											"                }\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsCreatePartner = {\r",
											"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreatePartner,\r",
											"            body: httpRequestCreatePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsCreatePartner);\r",
											"        let jsonDataCreatePartner = await response.json();\r",
											"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
											"    \r",
											"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreatePartner is Success\r",
											"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
											"        });\r",
											"\r",
											"     \r",
											"        //GetResponse_PartnerId\r",
											"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
											"\r",
											"        //GetResponse_CustomerId\r",
											"        pm.environment.set(\"GetResponse_CustomerId\", jsonDataCreatePartner.PartnerInfo.CustomerId);\r",
											"        \r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"Signin();\r",
											"setTimeout(async function(){await CreatePartner();}, 5000); \r",
											"setTimeout(async function(){}, 6000);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-ais-UserName",
										"type": "text",
										"value": "{{x_ais_UserName_AisPartner}}"
									},
									{
										"key": "x-ais-OrderRef",
										"value": "{{x_ais_OrderRef_RemovePartner_fail}}{{current_timestamp}}"
									},
									{
										"key": "x-ais-OrderDesc",
										"type": "text",
										"value": "{{x_ais_OrderDesc_RemovePartner}}"
									},
									{
										"key": "x-ais-AccessToken",
										"value": "{{Bearer}} {{AccessToken}}"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"PartnerId\": \"{{Value_DeletePartner_TST_F4_0_2_003_PartnerId}}\"\r\n}"
								},
								"url": {
									"raw": "{{url}}{{provisioningapis}}/api/v1/Partner/RemovePartner",
									"host": [
										"{{url}}{{provisioningapis}}"
									],
									"path": [
										"api",
										"v1",
										"Partner",
										"RemovePartner"
									]
								},
								"description": "Type:Desire"
							},
							"response": []
						},
						{
							"name": "RemovePartner_TST_F4_0_2_005_Error_CustomerAdminRoleInvalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"InquiryPartner_\"\r",
											"var x_ais_OrderRef_InquiryPartner = pm.globals.get(\"x_ais_OrderRef_InquiryPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"InquiryPartner\"\r",
											"var x_ais_OrderDesc_InquiryPartner = pm.globals.get(\"x_ais_OrderDesc_InquiryPartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get globals SystemUser --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemoveSystemUser_\"\r",
											"var x_ais_OrderRef_RemoveSystemUser = pm.globals.get(\"x_ais_OrderRef_RemoveSystemUser\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveSystemUser\"\r",
											"var x_ais_OrderDesc_RemoveSystemUser = pm.globals.get(\"x_ais_OrderDesc_RemoveSystemUser\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Inquiry --------------//\r",
											"//get global variable to url \"/api/v1/Partner/InquiryPartner\"\r",
											"var urlPartnerInquiryPartner = pm.globals.get(\"urlPartnerInquiryPartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"//---------------- get url Remove --------------//\r",
											"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
											"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
											"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
											"//get global variable to url \"/api/v1/SystemUser/RemoveSystemUser\"\r",
											"var urlSystemUserRemoveSystemUser = pm.globals.get(\"urlSystemUserRemoveSystemUser\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultDescription \"RemovePartner is Success\"\r",
											"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
											"//get global variable to resultDescription \"InquiryPartner is Success\"\r",
											"var resultDescriptionInquiryPartner = pm.globals.get(\"resultDescriptionInquiryPartner\");\r",
											"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
											"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
											"//get global variable to resultDescription \"RemoveSystemUser is Success\"\r",
											"var resultDescriptionRemoveSystemUser = pm.globals.get(\"resultDescriptionRemoveSystemUser\");\r",
											"\r",
											"//get global variable to statusCode 403\r",
											"var statusCodeForbidden = pm.globals.get(\"statusCodeForbidden\");\r",
											"//get global variable to resultCode \"40308\"\r",
											"var resultCodeRoleInvalid = pm.globals.get(\"resultCodeRoleInvalid\");\r",
											"//get global variable to resultDescription \"Role Invalid\"\r",
											"var resultDescriptionRoleInvalid = pm.globals.get(\"resultDescriptionRoleInvalid\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"RemovePartner : Status code is \" + statusCodeForbidden, function () {\r",
											"    pm.response.to.have.status(statusCodeForbidden);\r",
											"});\r",
											"\r",
											"pm.test('RemovePartner : operationStatus code is '+'\"'+ resultCodeRoleInvalid +'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeRoleInvalid);\r",
											"});\r",
											"\r",
											"pm.test('RemovePartner : operationStatus description is '+'\"'+ resultDescriptionRoleInvalid+'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionRoleInvalid);\r",
											"});\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//---------------- LogDefaultValue --------------//\r",
											"//set variable to LogDefaultValue JSON.parse\r",
											"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
											"// console.log('LogDefaultValue',LogDefaultValue);\r",
											"//---------------- set globals Other --------------//\r",
											"\r",
											"var SearchLog = LogDefaultValue.SearchLog;\r",
											"// console.log('SearchLog',SearchLog);\r",
											"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
											"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
											"var kbn_version = SearchLog.header.kbn_version;\r",
											"var authorization = SearchLog.header.Authorization;\r",
											"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
											"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
											"var namespace = LogDefaultValue.Other.namespace;\r",
											"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
											"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
											"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
											"var methodDelete = LogDefaultValue.Other.methodDelete;\r",
											"\r",
											"// Detail\r",
											"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
											"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
											"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
											"\r",
											"// Summary\r",
											"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
											"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
											"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
											"\r",
											"// ProvisioningAPIs [Partner]\r",
											"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
											"var cmdName = LogDefaultValue.Provisioning.Partner.cmdNameRemovePartner;\r",
											"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
											"var containerId = LogDefaultValue.Provisioning.containerId;\r",
											"var requestObjectUrlStaging = LogDefaultValue.Provisioning.Partner.requestObjectUrlRemovePartnerMgStaging;\r",
											"\r",
											"// Check CDR (Summary Log) and EDR (Detail Log)\r",
											"SearchLogFindTid = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSearchLogFindTid = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization' : authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = x_ais_OrderRef_RemovePartner + current_timestamp;\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestSearchLogFindTid = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"\r",
											"        let optionsSearchLogFindTid = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptSearchLogFindTid,\r",
											"            body: httpRequestSearchLogFindTid\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsSearchLogFindTid);\r",
											"        let jsonDataSearchLogFindTid = await response.json();\r",
											"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
											"\r",
											"        // //200\r",
											"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"\r",
											"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
											"        console.log('hits',hits)\r",
											"  \r",
											"        // find tid\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            // let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"        \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            if(applicationNameValue == applicationName){\r",
											"                let tid = hits[i]._source.cauldron.tid;\r",
											"                pm.environment.set(\"tid\", tid);\r",
											"                break;\r",
											"           }\r",
											"        }\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"CheckLog = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCheckLog = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = pm.environment.get(\"tid\");\r",
											"\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestCheckLog = {\r",
											"            mode: 'raw',\r",
											"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"        let optionsCheckLog = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptCheckLog,\r",
											"            body: httpRequestCheckLog\r",
											"        }; \r",
											"        let response = await reqPromise(optionsCheckLog);\r",
											"        let jsonDataCheckLog = await response.json();\r",
											"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
											"        \r",
											"        // //200\r",
											"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });     \r",
											"        \r",
											"        let hits = jsonDataCheckLog.hits.hits\r",
											"        console.log('hits',hits)\r",
											"  \r",
											"        // find logType\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            //  let logType = hits[i]._source.cauldron.logType\r",
											"            let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"           \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            \r",
											"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
											"            console.log('resultDataLog',resultDataLog)\r",
											"\r",
											"            let tidControl = x_ais_OrderRef_RemovePartner + current_timestamp;\r",
											"            // console.log(tidControl);\r",
											"            if(applicationNameValue == applicationName){\r",
											"                 \r",
											"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ProvisioningAPIs\r",
											"                pm.test(\"Check Summary Log : RemovePartner\" , function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Summary Log ( Expected = Actual) [RemovePartner] ==================\");\r",
											"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
											"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
											"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeRoleInvalid);\r",
											"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionRoleInvalid);\r",
											"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
											"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                         // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
											"                        console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
											"\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
											"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
											"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeRoleInvalid); \r",
											"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionRoleInvalid); \r",
											"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
											"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
											"                        pm.expect(resultDataLog.custom).to.eql(customSummary);                    \r",
											"\r",
											"                    }); \r",
											"                }\r",
											"\r",
											"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ProvisioningAPIs\r",
											"\r",
											"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
											"                    // console.log('endPointNameValue ',endPointNameValue)\r",
											"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [RemovePartner]\", function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Detail Log ( Expected = Actual) [RemovePartner] ==================\");\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
											"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
											"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
											"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
											"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
											"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
											"\r",
											"                        if( endPointNameValue == endPointNameProvisioningAPIs){     //\"endPointName\":\"ProvisioningAPIs\"\r",
											"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs); \r",
											"                        \r",
											"                            // check requestObject\r",
											"                            // \"requestObject\":\"{\\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Partner/RemovePartner\\\",\\\"method\\\":\\\"DELETE\\\",\\\"headers\\\":{\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"RemovePartner_202104191504121\\\",\\\"x-ais-orderdesc\\\":\\\"RemovePartner\\\",\\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAGFEbL+6SxXpwsuQ2AFXzxdP5ASliv7b/ivuC4tlIIbY0IlAkkY2KW0\\\"},\\\"body\\\":{\\\"PartnerId\\\":\\\"607d438763fa0e0001c335bf\\\"}}\",\r",
											"\r",
											"\r",
											"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
											"                            // console.log('jsonParseRequestObject : : :',jsonParseRequestObject);\r",
											"                            \r",
											"                            let url = urlCheckLog + requestObjectUrlStaging; \r",
											"                            let x_ais_orderref = x_ais_OrderRef_RemovePartner + current_timestamp;\r",
											"                            let x_ais_orderdesc = x_ais_OrderDesc_RemovePartner;\r",
											"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken2\");                           \r",
											"                            let PartnerId = pm.environment.get(\"GetResponse_PartnerId\");\r",
											"\r",
											"\r",
											"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
											"                            pm.expect(jsonParseRequestObject.method).to.eql(methodDelete);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerId).to.eql(PartnerId);\r",
											"\r",
											"\r",
											"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
											"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodDelete);\r",
											"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
											"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
											"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
											"                            console.log(\"resquest.body.PartnerId : \" + jsonParseRequestObject.body.PartnerId + \" = \" + PartnerId);\r",
											"\r",
											"                                                  \r",
											"                            // check responseObject\r",
											"                            //  \"responseObject\":\"{\\\"OperationStatus\\\":{\\\"Code\\\":\\\"20000\\\",\\\"Description\\\":\\\"RemovePartner is Success\\\"}\r",
											"\r",
											"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
											"                            // console.log('jsonParseResponseObject : : : ',jsonParseResponseObject);              \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeRoleInvalid);  \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionRoleInvalid);  \r",
											"\r",
											"                            console.log(\"response.partnerInfo.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeRoleInvalid);\r",
											"                            console.log(\"response.partnerInfo.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionRoleInvalid); \r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"setTimeout(function(){SearchLogFindTid();}, 30000); \r",
											"setTimeout(function(){CheckLog();}, 40000); \r",
											"\r",
											"\r",
											"\r",
											"setTimeout(function(){\r",
											"pm.environment.unset(\"random_number\");\r",
											"pm.environment.unset(\"PartnerName\");\r",
											"pm.environment.unset(\"MerchantContact\");\r",
											"pm.environment.unset(\"CPID\");\r",
											"pm.environment.unset(\"sessionId\");\r",
											"pm.environment.unset(\"current_timestamp\");\r",
											"pm.environment.unset(\"AccessToken\");\r",
											"pm.environment.unset(\"GetResponse_PartnerId\");\r",
											"pm.environment.unset(\"GetResponse_CustomerId\");\r",
											"pm.environment.unset(\"tid\");\r",
											"pm.environment.unset(\"AccessToken2\");\r",
											"pm.environment.unset(\"tid\");\r",
											"pm.environment.unset(\"AccountName\");\r",
											"pm.environment.unset(\"GetResponse_AccountName\");\r",
											"pm.environment.unset(\"GetResponse_AccountId\");\r",
											"pm.environment.unset(\"GetResponse_SystemUserId\");\r",
											"\r",
											"}, 50000);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var Username = pm.environment.get(\"Username\");\r",
											"var Password = pm.environment.get(\"Password\");\r",
											"var Username2 = pm.environment.get(\"Username_CustomerAdmin\");\r",
											"var Password2 = pm.environment.get(\"Password_CustomerAdmin\");\r",
											"\r",
											"\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"\r",
											"let UserRole = fieldDataValue.role.role_SupplierAdmin;\r",
											"\r",
											"//format YYYYMMDDHHMMSSS\r",
											"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
											"\r",
											"// console.log('currentTmestamp',currentTmestamp);\r",
											"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
											"\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- statusCodeList --------------//\r",
											"//set variable to statusCodeList JSON.parse\r",
											"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
											"//set global variable to statusCode 200\r",
											"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
											"//set global variable to statusCode 201\r",
											"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
											"//set global variable to statusCode 403\r",
											"pm.globals.set(\"statusCodeForbidden\", statusCodeList.statusCodeForbidden);\r",
											"\r",
											"//---------------- resultCodeList --------------//\r",
											"//set variable to resultCodeList JSON.parse\r",
											"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
											"//set global variable to resultCode \"20000\"\r",
											"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
											"//set global variable to resultCode \"20100\"\r",
											"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
											"//set global variable to resultCode \"40308\"\r",
											"pm.globals.set(\"resultCodeRoleInvalid\", resultCodeList.resultCodeRoleInvalid);\r",
											"\r",
											"//---------------- resultDescriptionSuccessList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
											"//set global variable to resultDescription \"SignInProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
											"//set global variable to resultDescription \"CreatePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
											"//set global variable to resultDescription \"RemovePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
											"//set global variable to resultDescription \"InquiryPartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionInquiryPartner\", resultDescriptionSuccessList.resultDescriptionInquiryPartner);\r",
											"//set global variable to resultDescription \"RemoveSystemUser is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveSystemUser\", resultDescriptionSuccessList.resultDescriptionRemoveSystemUser);\r",
											"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
											"\r",
											"//---------------- resultDescriptionErrorList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
											"//set global variable to resultDescription \"Role Invalid\"\r",
											"pm.globals.set(\"resultDescriptionRoleInvalid\", resultDescriptionErrorList.resultDescriptionRoleInvalid);\r",
											"\r",
											"\r",
											"//---------------- HeaderList --------------//\r",
											"//set variable to HeaderList JSON.parse\r",
											"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
											"//---------------- set globals Other --------------//\r",
											"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
											"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
											"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
											"//set global variable to kbn-versio \"7.5.1\"\r",
											"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Signin_ --------------//\r",
											"//set global variable to x_ais_OrderRef \"Signin_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals CreatePartner --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
											"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
											"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
											"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
											"//set global variable to x_ais_OrderRef \"InquiryPartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_InquiryPartner\", HeaderList.Partner.x_ais_OrderRef_InquiryPartner);\r",
											"//set global variable to x_ais_OrderDesc \"InquiryPartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_InquiryPartner\", HeaderList.Partner.x_ais_OrderDesc_InquiryPartner);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals CreateAccount --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
											"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
											"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
											"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals SystemUser --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreateSystemUser_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreateSystemUser\", HeaderList.SystemUser.x_ais_OrderRef_CreateSystemUser);\r",
											"//set global variable to x_ais_OrderDesc \"CreateSystemUser\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreateSystemUser\", HeaderList.SystemUser.x_ais_OrderDesc_CreateSystemUser);\r",
											"//set global variable to x_ais_OrderRef \"RemoveSystemUser_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemoveSystemUser\", HeaderList.SystemUser.x_ais_OrderRef_RemoveSystemUser);\r",
											"//set global variable to x_ais_OrderDesc \"RemoveSystemUser\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemoveSystemUser\", HeaderList.SystemUser.x_ais_OrderDesc_RemoveSystemUser);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultCode \"20100\"\r",
											"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
											"//get global variable to resultDescription \"SignInProcess is Success\"\r",
											"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
											"//get global variable to resultDescription \"CreatePartner is Success\"\r",
											"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
											"//get global variable to resultDescription \"CreateAccount is Success\"\r",
											"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
											"//get global variable to resultDescription \"CreateSystemUser is Success\"\r",
											"var resultDescriptionCreateSystemUser = pm.globals.get(\"resultDescriptionCreateSystemUser\");\r",
											"\r",
											"\r",
											"//---------------- urlRouteList --------------//\r",
											"//set variable to urlRouteList JSON.parse\r",
											"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
											"//---------------- set url Create --------------//\r",
											"//set global variable to url \"/api/v1/auth/signin\"\r",
											"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
											"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
											"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
											"//set global variable to url \"/api/v1/SystemUser/CreateSystemUser\"\r",
											"pm.globals.set(\"urlSystemUserCreateSystemUser\", urlRouteList.SystemUser.urlSystemUserCreateSystemUser);\r",
											"\r",
											"//---------------- get url Create --------------//\r",
											"//get global variable to url \"/api/v1/auth/signin\"\r",
											"var urlSignin = pm.globals.get(\"urlSignin\");\r",
											"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
											"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
											"//get global variable to url \"/api/v1/SystemUser/CreateSystemUser\"\r",
											"var urlSystemUserCreateSystemUser = pm.globals.get(\"urlSystemUserCreateSystemUser\");\r",
											"\r",
											"//---------------- set url Remove --------------//\r",
											"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
											"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
											"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
											"//set global variable to url \"/api/v1/SystemUser/RemoveSystemUser\"\r",
											"pm.globals.set(\"urlSystemUserRemoveSystemUser\", urlRouteList.SystemUser.urlSystemUserRemoveSystemUser);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set url Inquiry --------------//\r",
											"//set global variable to url \"/api/v1/Partner/InquiryPartner\"\r",
											"pm.globals.set(\"urlPartnerInquiryPartner\", urlRouteList.Partner.urlPartnerInquiryPartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"Signin_\"\r",
											"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals SystemUser --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreateSystemUser_\"\r",
											"var x_ais_OrderRef_CreateSystemUser = pm.globals.get(\"x_ais_OrderRef_CreateSystemUser\");\r",
											"//get global variable to x_ais_OrderDesc \"CreateSystemUser\"\r",
											"var x_ais_OrderDesc_CreateSystemUser = pm.globals.get(\"x_ais_OrderDesc_CreateSystemUser\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"// Signin get token ROOT ADMIN\r",
											" Signin = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username,\r",
											"                password:Password\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"\r",
											"        //set random_number\r",
											"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
											"        //set PartnerName\r",
											"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
											"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
											"        //set MerchantContact\r",
											"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
											"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
											"        // set CPID\r",
											"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
											"        pm.environment.set(\"CPID\", CPIDValue)\r",
											"        \r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreatePartner\r",
											" CreatePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreatePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreatePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
											"                \"PartnerType\": [\r",
											"                    \"Supplier\",\r",
											"                    \"Customer\"\r",
											"                ],\r",
											"                \"PartnerDetail\": {\r",
											"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
											"                    \"CPID\": pm.environment.get(\"CPID\")\r",
											"                },\r",
											"                \"Property\": {\r",
											"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
											"                }\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsCreatePartner = {\r",
											"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreatePartner,\r",
											"            body: httpRequestCreatePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsCreatePartner);\r",
											"        let jsonDataCreatePartner = await response.json();\r",
											"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
											"    \r",
											"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreatePartner is Success\r",
											"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
											"        });\r",
											"\r",
											"     \r",
											"        //GetResponse_PartnerId\r",
											"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
											"\r",
											"        //GetResponse_CustomerId\r",
											"        pm.environment.set(\"GetResponse_CustomerId\", jsonDataCreatePartner.PartnerInfo.CustomerId);\r",
											"\r",
											"\r",
											"                //Accountname\r",
											"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
											"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
											"        \r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"// Signin get token\r",
											" Signin2 = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username2,\r",
											"                password:Password2\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken2\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"Signin();\r",
											"setTimeout(async function(){await CreatePartner();}, 8000); \r",
											"setTimeout(async function(){await Signin2();}, 10000); \r",
											"setTimeout(async function(){}, 15000); \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-ais-UserName",
										"type": "text",
										"value": "{{x_ais_UserName_AisPartner}}"
									},
									{
										"key": "x-ais-OrderRef",
										"value": "{{x_ais_OrderRef_RemovePartner}}{{current_timestamp}}"
									},
									{
										"key": "x-ais-OrderDesc",
										"type": "text",
										"value": "{{x_ais_OrderDesc_RemovePartner}}"
									},
									{
										"key": "x-ais-AccessToken",
										"value": "{{Bearer}} {{AccessToken2}}"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"PartnerId\": \"{{GetResponse_PartnerId}}\"\r\n}"
								},
								"url": {
									"raw": "{{url}}{{provisioningapis}}/api/v1/Partner/RemovePartner",
									"host": [
										"{{url}}{{provisioningapis}}"
									],
									"path": [
										"api",
										"v1",
										"Partner",
										"RemovePartner"
									]
								},
								"description": "Type:Desire"
							},
							"response": []
						},
						{
							"name": "RemovePartner_TST_F4_0_2_006_Error_SupplierRoleInvalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"InquiryPartner_\"\r",
											"var x_ais_OrderRef_InquiryPartner = pm.globals.get(\"x_ais_OrderRef_InquiryPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"InquiryPartner\"\r",
											"var x_ais_OrderDesc_InquiryPartner = pm.globals.get(\"x_ais_OrderDesc_InquiryPartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get globals SystemUser --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemoveSystemUser_\"\r",
											"var x_ais_OrderRef_RemoveSystemUser = pm.globals.get(\"x_ais_OrderRef_RemoveSystemUser\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveSystemUser\"\r",
											"var x_ais_OrderDesc_RemoveSystemUser = pm.globals.get(\"x_ais_OrderDesc_RemoveSystemUser\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Inquiry --------------//\r",
											"//get global variable to url \"/api/v1/Partner/InquiryPartner\"\r",
											"var urlPartnerInquiryPartner = pm.globals.get(\"urlPartnerInquiryPartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"//---------------- get url Remove --------------//\r",
											"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
											"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
											"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
											"//get global variable to url \"/api/v1/SystemUser/RemoveSystemUser\"\r",
											"var urlSystemUserRemoveSystemUser = pm.globals.get(\"urlSystemUserRemoveSystemUser\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultDescription \"RemovePartner is Success\"\r",
											"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
											"//get global variable to resultDescription \"InquiryPartner is Success\"\r",
											"var resultDescriptionInquiryPartner = pm.globals.get(\"resultDescriptionInquiryPartner\");\r",
											"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
											"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
											"//get global variable to resultDescription \"RemoveSystemUser is Success\"\r",
											"var resultDescriptionRemoveSystemUser = pm.globals.get(\"resultDescriptionRemoveSystemUser\");\r",
											"\r",
											"//get global variable to statusCode 403\r",
											"var statusCodeForbidden = pm.globals.get(\"statusCodeForbidden\");\r",
											"//get global variable to resultCode \"40308\"\r",
											"var resultCodeRoleInvalid = pm.globals.get(\"resultCodeRoleInvalid\");\r",
											"//get global variable to resultDescription \"Role Invalid\"\r",
											"var resultDescriptionRoleInvalid = pm.globals.get(\"resultDescriptionRoleInvalid\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"RemovePartner : Status code is \" + statusCodeForbidden, function () {\r",
											"    pm.response.to.have.status(statusCodeForbidden);\r",
											"});\r",
											"\r",
											"pm.test('RemovePartner : operationStatus code is '+'\"'+ resultCodeRoleInvalid +'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeRoleInvalid);\r",
											"});\r",
											"\r",
											"pm.test('RemovePartner : operationStatus description is '+'\"'+ resultDescriptionRoleInvalid+'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionRoleInvalid);\r",
											"});\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//---------------- LogDefaultValue --------------//\r",
											"//set variable to LogDefaultValue JSON.parse\r",
											"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
											"// console.log('LogDefaultValue',LogDefaultValue);\r",
											"//---------------- set globals Other --------------//\r",
											"\r",
											"var SearchLog = LogDefaultValue.SearchLog;\r",
											"// console.log('SearchLog',SearchLog);\r",
											"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
											"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
											"var kbn_version = SearchLog.header.kbn_version;\r",
											"var authorization = SearchLog.header.Authorization;\r",
											"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
											"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
											"var namespace = LogDefaultValue.Other.namespace;\r",
											"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
											"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
											"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
											"var methodDelete = LogDefaultValue.Other.methodDelete;\r",
											"\r",
											"// Detail\r",
											"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
											"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
											"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
											"\r",
											"// Summary\r",
											"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
											"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
											"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
											"\r",
											"// ProvisioningAPIs [Partner]\r",
											"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
											"var cmdName = LogDefaultValue.Provisioning.Partner.cmdNameRemovePartner;\r",
											"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
											"var containerId = LogDefaultValue.Provisioning.containerId;\r",
											"var requestObjectUrlStaging = LogDefaultValue.Provisioning.Partner.requestObjectUrlRemovePartnerMgStaging;\r",
											"\r",
											"// Check CDR (Summary Log) and EDR (Detail Log)\r",
											"SearchLogFindTid = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSearchLogFindTid = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization' : authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = x_ais_OrderRef_RemovePartner + current_timestamp;\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestSearchLogFindTid = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"\r",
											"        let optionsSearchLogFindTid = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptSearchLogFindTid,\r",
											"            body: httpRequestSearchLogFindTid\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsSearchLogFindTid);\r",
											"        let jsonDataSearchLogFindTid = await response.json();\r",
											"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
											"\r",
											"        // //200\r",
											"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"\r",
											"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
											"        console.log('hits',hits)\r",
											"  \r",
											"        // find tid\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            // let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"        \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            if(applicationNameValue == applicationName){\r",
											"                let tid = hits[i]._source.cauldron.tid;\r",
											"                pm.environment.set(\"tid\", tid);\r",
											"                break;\r",
											"           }\r",
											"        }\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"CheckLog = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCheckLog = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = pm.environment.get(\"tid\");\r",
											"\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestCheckLog = {\r",
											"            mode: 'raw',\r",
											"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"        let optionsCheckLog = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptCheckLog,\r",
											"            body: httpRequestCheckLog\r",
											"        }; \r",
											"        let response = await reqPromise(optionsCheckLog);\r",
											"        let jsonDataCheckLog = await response.json();\r",
											"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
											"        \r",
											"        // //200\r",
											"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });     \r",
											"        \r",
											"        let hits = jsonDataCheckLog.hits.hits\r",
											"        console.log('hits',hits)\r",
											"  \r",
											"        // find logType\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            //  let logType = hits[i]._source.cauldron.logType\r",
											"            let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"           \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            \r",
											"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
											"            console.log('resultDataLog',resultDataLog)\r",
											"\r",
											"            let tidControl = x_ais_OrderRef_RemovePartner + current_timestamp;\r",
											"            // console.log(tidControl);\r",
											"            if(applicationNameValue == applicationName){\r",
											"                 \r",
											"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ProvisioningAPIs\r",
											"                pm.test(\"Check Summary Log : RemovePartner\" , function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Summary Log ( Expected = Actual) [RemovePartner] ==================\");\r",
											"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
											"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
											"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeRoleInvalid);\r",
											"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionRoleInvalid);\r",
											"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
											"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                         // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
											"                        console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
											"\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
											"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
											"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeRoleInvalid); \r",
											"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionRoleInvalid); \r",
											"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
											"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
											"                        pm.expect(resultDataLog.custom).to.eql(customSummary);                    \r",
											"\r",
											"                    }); \r",
											"                }\r",
											"\r",
											"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ProvisioningAPIs\r",
											"\r",
											"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
											"                    // console.log('endPointNameValue ',endPointNameValue)\r",
											"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [RemovePartner]\", function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Detail Log ( Expected = Actual) [RemovePartner] ==================\");\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
											"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
											"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
											"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
											"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
											"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
											"\r",
											"                        if( endPointNameValue == endPointNameProvisioningAPIs){     //\"endPointName\":\"ProvisioningAPIs\"\r",
											"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs); \r",
											"                        \r",
											"                            // check requestObject\r",
											"                            // \"requestObject\":\"{\\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Partner/RemovePartner\\\",\\\"method\\\":\\\"DELETE\\\",\\\"headers\\\":{\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"RemovePartner_202104191504121\\\",\\\"x-ais-orderdesc\\\":\\\"RemovePartner\\\",\\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAGFEbL+6SxXpwsuQ2AFXzxdP5ASliv7b/ivuC4tlIIbY0IlAkkY2KW0\\\"},\\\"body\\\":{\\\"PartnerId\\\":\\\"607d438763fa0e0001c335bf\\\"}}\",\r",
											"\r",
											"\r",
											"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
											"                            // console.log('jsonParseRequestObject : : :',jsonParseRequestObject);\r",
											"                            \r",
											"                            let url = urlCheckLog + requestObjectUrlStaging; \r",
											"                            let x_ais_orderref = x_ais_OrderRef_RemovePartner + current_timestamp;\r",
											"                            let x_ais_orderdesc = x_ais_OrderDesc_RemovePartner;\r",
											"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken2\");                           \r",
											"                            let PartnerId = pm.environment.get(\"GetResponse_PartnerId\");\r",
											"\r",
											"\r",
											"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
											"                            pm.expect(jsonParseRequestObject.method).to.eql(methodDelete);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerId).to.eql(PartnerId);\r",
											"\r",
											"\r",
											"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
											"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodDelete);\r",
											"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
											"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
											"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
											"                            console.log(\"resquest.body.PartnerId : \" + jsonParseRequestObject.body.PartnerId + \" = \" + PartnerId);\r",
											"\r",
											"                                                  \r",
											"                            // check responseObject\r",
											"                            //  \"responseObject\":\"{\\\"OperationStatus\\\":{\\\"Code\\\":\\\"20000\\\",\\\"Description\\\":\\\"RemovePartner is Success\\\"}\r",
											"\r",
											"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
											"                            // console.log('jsonParseResponseObject : : : ',jsonParseResponseObject);              \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeRoleInvalid);  \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionRoleInvalid);  \r",
											"\r",
											"                            console.log(\"response.partnerInfo.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeRoleInvalid);\r",
											"                            console.log(\"response.partnerInfo.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionRoleInvalid); \r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"setTimeout(function(){SearchLogFindTid();}, 30000); \r",
											"setTimeout(function(){CheckLog();}, 40000); \r",
											"\r",
											"\r",
											"\r",
											"setTimeout(function(){\r",
											"pm.environment.unset(\"random_number\");\r",
											"pm.environment.unset(\"PartnerName\");\r",
											"pm.environment.unset(\"MerchantContact\");\r",
											"pm.environment.unset(\"CPID\");\r",
											"pm.environment.unset(\"sessionId\");\r",
											"pm.environment.unset(\"current_timestamp\");\r",
											"pm.environment.unset(\"AccessToken\");\r",
											"pm.environment.unset(\"GetResponse_PartnerId\");\r",
											"pm.environment.unset(\"GetResponse_CustomerId\");\r",
											"pm.environment.unset(\"tid\");\r",
											"pm.environment.unset(\"AccessToken2\");\r",
											"pm.environment.unset(\"tid\");\r",
											"pm.environment.unset(\"AccountName\");\r",
											"pm.environment.unset(\"GetResponse_AccountName\");\r",
											"pm.environment.unset(\"GetResponse_AccountId\");\r",
											"pm.environment.unset(\"GetResponse_SystemUserId\");\r",
											"\r",
											"}, 50000);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var Username = pm.environment.get(\"Username\");\r",
											"var Password = pm.environment.get(\"Password\");\r",
											"var Username2 = pm.environment.get(\"Username_Supplier\");\r",
											"var Password2 = pm.environment.get(\"Password_Supplier\");\r",
											"\r",
											"\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"\r",
											"let UserRole = fieldDataValue.role.role_SupplierAdmin;\r",
											"\r",
											"//format YYYYMMDDHHMMSSS\r",
											"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
											"\r",
											"// console.log('currentTmestamp',currentTmestamp);\r",
											"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
											"\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- statusCodeList --------------//\r",
											"//set variable to statusCodeList JSON.parse\r",
											"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
											"//set global variable to statusCode 200\r",
											"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
											"//set global variable to statusCode 201\r",
											"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
											"//set global variable to statusCode 403\r",
											"pm.globals.set(\"statusCodeForbidden\", statusCodeList.statusCodeForbidden);\r",
											"\r",
											"//---------------- resultCodeList --------------//\r",
											"//set variable to resultCodeList JSON.parse\r",
											"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
											"//set global variable to resultCode \"20000\"\r",
											"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
											"//set global variable to resultCode \"20100\"\r",
											"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
											"//set global variable to resultCode \"40308\"\r",
											"pm.globals.set(\"resultCodeRoleInvalid\", resultCodeList.resultCodeRoleInvalid);\r",
											"\r",
											"//---------------- resultDescriptionSuccessList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
											"//set global variable to resultDescription \"SignInProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
											"//set global variable to resultDescription \"CreatePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
											"//set global variable to resultDescription \"RemovePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
											"//set global variable to resultDescription \"InquiryPartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionInquiryPartner\", resultDescriptionSuccessList.resultDescriptionInquiryPartner);\r",
											"//set global variable to resultDescription \"RemoveSystemUser is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveSystemUser\", resultDescriptionSuccessList.resultDescriptionRemoveSystemUser);\r",
											"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
											"\r",
											"//---------------- resultDescriptionErrorList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
											"//set global variable to resultDescription \"Role Invalid\"\r",
											"pm.globals.set(\"resultDescriptionRoleInvalid\", resultDescriptionErrorList.resultDescriptionRoleInvalid);\r",
											"\r",
											"\r",
											"//---------------- HeaderList --------------//\r",
											"//set variable to HeaderList JSON.parse\r",
											"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
											"//---------------- set globals Other --------------//\r",
											"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
											"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
											"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
											"//set global variable to kbn-versio \"7.5.1\"\r",
											"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Signin_ --------------//\r",
											"//set global variable to x_ais_OrderRef \"Signin_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals CreatePartner --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
											"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
											"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
											"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
											"//set global variable to x_ais_OrderRef \"InquiryPartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_InquiryPartner\", HeaderList.Partner.x_ais_OrderRef_InquiryPartner);\r",
											"//set global variable to x_ais_OrderDesc \"InquiryPartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_InquiryPartner\", HeaderList.Partner.x_ais_OrderDesc_InquiryPartner);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals CreateAccount --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
											"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
											"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
											"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals SystemUser --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreateSystemUser_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreateSystemUser\", HeaderList.SystemUser.x_ais_OrderRef_CreateSystemUser);\r",
											"//set global variable to x_ais_OrderDesc \"CreateSystemUser\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreateSystemUser\", HeaderList.SystemUser.x_ais_OrderDesc_CreateSystemUser);\r",
											"//set global variable to x_ais_OrderRef \"RemoveSystemUser_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemoveSystemUser\", HeaderList.SystemUser.x_ais_OrderRef_RemoveSystemUser);\r",
											"//set global variable to x_ais_OrderDesc \"RemoveSystemUser\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemoveSystemUser\", HeaderList.SystemUser.x_ais_OrderDesc_RemoveSystemUser);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultCode \"20100\"\r",
											"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
											"//get global variable to resultDescription \"SignInProcess is Success\"\r",
											"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
											"//get global variable to resultDescription \"CreatePartner is Success\"\r",
											"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
											"//get global variable to resultDescription \"CreateAccount is Success\"\r",
											"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
											"//get global variable to resultDescription \"CreateSystemUser is Success\"\r",
											"var resultDescriptionCreateSystemUser = pm.globals.get(\"resultDescriptionCreateSystemUser\");\r",
											"\r",
											"\r",
											"//---------------- urlRouteList --------------//\r",
											"//set variable to urlRouteList JSON.parse\r",
											"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
											"//---------------- set url Create --------------//\r",
											"//set global variable to url \"/api/v1/auth/signin\"\r",
											"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
											"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
											"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
											"//set global variable to url \"/api/v1/SystemUser/CreateSystemUser\"\r",
											"pm.globals.set(\"urlSystemUserCreateSystemUser\", urlRouteList.SystemUser.urlSystemUserCreateSystemUser);\r",
											"\r",
											"//---------------- get url Create --------------//\r",
											"//get global variable to url \"/api/v1/auth/signin\"\r",
											"var urlSignin = pm.globals.get(\"urlSignin\");\r",
											"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
											"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
											"//get global variable to url \"/api/v1/SystemUser/CreateSystemUser\"\r",
											"var urlSystemUserCreateSystemUser = pm.globals.get(\"urlSystemUserCreateSystemUser\");\r",
											"\r",
											"//---------------- set url Remove --------------//\r",
											"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
											"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
											"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
											"//set global variable to url \"/api/v1/SystemUser/RemoveSystemUser\"\r",
											"pm.globals.set(\"urlSystemUserRemoveSystemUser\", urlRouteList.SystemUser.urlSystemUserRemoveSystemUser);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set url Inquiry --------------//\r",
											"//set global variable to url \"/api/v1/Partner/InquiryPartner\"\r",
											"pm.globals.set(\"urlPartnerInquiryPartner\", urlRouteList.Partner.urlPartnerInquiryPartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"Signin_\"\r",
											"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals SystemUser --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreateSystemUser_\"\r",
											"var x_ais_OrderRef_CreateSystemUser = pm.globals.get(\"x_ais_OrderRef_CreateSystemUser\");\r",
											"//get global variable to x_ais_OrderDesc \"CreateSystemUser\"\r",
											"var x_ais_OrderDesc_CreateSystemUser = pm.globals.get(\"x_ais_OrderDesc_CreateSystemUser\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"// Signin get token ROOT ADMIN\r",
											" Signin = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username,\r",
											"                password:Password\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"\r",
											"        //set random_number\r",
											"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
											"        //set PartnerName\r",
											"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
											"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
											"        //set MerchantContact\r",
											"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
											"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
											"        // set CPID\r",
											"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
											"        pm.environment.set(\"CPID\", CPIDValue)\r",
											"        \r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreatePartner\r",
											" CreatePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreatePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreatePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
											"                \"PartnerType\": [\r",
											"                    \"Supplier\",\r",
											"                    \"Customer\"\r",
											"                ],\r",
											"                \"PartnerDetail\": {\r",
											"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
											"                    \"CPID\": pm.environment.get(\"CPID\")\r",
											"                },\r",
											"                \"Property\": {\r",
											"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
											"                }\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsCreatePartner = {\r",
											"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreatePartner,\r",
											"            body: httpRequestCreatePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsCreatePartner);\r",
											"        let jsonDataCreatePartner = await response.json();\r",
											"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
											"    \r",
											"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreatePartner is Success\r",
											"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
											"        });\r",
											"\r",
											"     \r",
											"        //GetResponse_PartnerId\r",
											"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
											"\r",
											"        //GetResponse_CustomerId\r",
											"        pm.environment.set(\"GetResponse_CustomerId\", jsonDataCreatePartner.PartnerInfo.CustomerId);\r",
											"\r",
											"\r",
											"                //Accountname\r",
											"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
											"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
											"        \r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"// Signin get token\r",
											" Signin2 = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username2,\r",
											"                password:Password2\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken2\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"Signin();\r",
											"setTimeout(async function(){await CreatePartner();}, 8000); \r",
											"setTimeout(async function(){await Signin2();}, 10000); \r",
											"setTimeout(async function(){}, 15000); \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-ais-UserName",
										"type": "text",
										"value": "{{x_ais_UserName_AisPartner}}"
									},
									{
										"key": "x-ais-OrderRef",
										"value": "{{x_ais_OrderRef_RemovePartner}}{{current_timestamp}}"
									},
									{
										"key": "x-ais-OrderDesc",
										"type": "text",
										"value": "{{x_ais_OrderDesc_RemovePartner}}"
									},
									{
										"key": "x-ais-AccessToken",
										"value": "{{Bearer}} {{AccessToken2}}"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"PartnerId\": \"{{GetResponse_PartnerId}}\"\r\n}"
								},
								"url": {
									"raw": "{{url}}{{provisioningapis}}/api/v1/Partner/RemovePartner",
									"host": [
										"{{url}}{{provisioningapis}}"
									],
									"path": [
										"api",
										"v1",
										"Partner",
										"RemovePartner"
									]
								},
								"description": "Type:Desire"
							},
							"response": []
						},
						{
							"name": "RemovePartner_TST_F4_0_2_007_Error_CustomerRoleInvalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"InquiryPartner_\"\r",
											"var x_ais_OrderRef_InquiryPartner = pm.globals.get(\"x_ais_OrderRef_InquiryPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"InquiryPartner\"\r",
											"var x_ais_OrderDesc_InquiryPartner = pm.globals.get(\"x_ais_OrderDesc_InquiryPartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get globals SystemUser --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemoveSystemUser_\"\r",
											"var x_ais_OrderRef_RemoveSystemUser = pm.globals.get(\"x_ais_OrderRef_RemoveSystemUser\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveSystemUser\"\r",
											"var x_ais_OrderDesc_RemoveSystemUser = pm.globals.get(\"x_ais_OrderDesc_RemoveSystemUser\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- get url Inquiry --------------//\r",
											"//get global variable to url \"/api/v1/Partner/InquiryPartner\"\r",
											"var urlPartnerInquiryPartner = pm.globals.get(\"urlPartnerInquiryPartner\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"//---------------- get url Remove --------------//\r",
											"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
											"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
											"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
											"//get global variable to url \"/api/v1/SystemUser/RemoveSystemUser\"\r",
											"var urlSystemUserRemoveSystemUser = pm.globals.get(\"urlSystemUserRemoveSystemUser\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultDescription \"RemovePartner is Success\"\r",
											"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
											"//get global variable to resultDescription \"InquiryPartner is Success\"\r",
											"var resultDescriptionInquiryPartner = pm.globals.get(\"resultDescriptionInquiryPartner\");\r",
											"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
											"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
											"//get global variable to resultDescription \"RemoveSystemUser is Success\"\r",
											"var resultDescriptionRemoveSystemUser = pm.globals.get(\"resultDescriptionRemoveSystemUser\");\r",
											"\r",
											"//get global variable to statusCode 403\r",
											"var statusCodeForbidden = pm.globals.get(\"statusCodeForbidden\");\r",
											"//get global variable to resultCode \"40308\"\r",
											"var resultCodeRoleInvalid = pm.globals.get(\"resultCodeRoleInvalid\");\r",
											"//get global variable to resultDescription \"Role Invalid\"\r",
											"var resultDescriptionRoleInvalid = pm.globals.get(\"resultDescriptionRoleInvalid\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"RemovePartner : Status code is \" + statusCodeForbidden, function () {\r",
											"    pm.response.to.have.status(statusCodeForbidden);\r",
											"});\r",
											"\r",
											"pm.test('RemovePartner : operationStatus code is '+'\"'+ resultCodeRoleInvalid +'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeRoleInvalid);\r",
											"});\r",
											"\r",
											"pm.test('RemovePartner : operationStatus description is '+'\"'+ resultDescriptionRoleInvalid+'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionRoleInvalid);\r",
											"});\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//---------------- LogDefaultValue --------------//\r",
											"//set variable to LogDefaultValue JSON.parse\r",
											"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
											"// console.log('LogDefaultValue',LogDefaultValue);\r",
											"//---------------- set globals Other --------------//\r",
											"\r",
											"var SearchLog = LogDefaultValue.SearchLog;\r",
											"// console.log('SearchLog',SearchLog);\r",
											"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
											"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
											"var kbn_version = SearchLog.header.kbn_version;\r",
											"var authorization = SearchLog.header.Authorization;\r",
											"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
											"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
											"var namespace = LogDefaultValue.Other.namespace;\r",
											"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
											"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
											"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
											"var methodDelete = LogDefaultValue.Other.methodDelete;\r",
											"\r",
											"// Detail\r",
											"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
											"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
											"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
											"\r",
											"// Summary\r",
											"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
											"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
											"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
											"\r",
											"// ProvisioningAPIs [Partner]\r",
											"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
											"var cmdName = LogDefaultValue.Provisioning.Partner.cmdNameRemovePartner;\r",
											"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
											"var containerId = LogDefaultValue.Provisioning.containerId;\r",
											"var requestObjectUrlStaging = LogDefaultValue.Provisioning.Partner.requestObjectUrlRemovePartnerMgStaging;\r",
											"\r",
											"// Check CDR (Summary Log) and EDR (Detail Log)\r",
											"SearchLogFindTid = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSearchLogFindTid = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization' : authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = x_ais_OrderRef_RemovePartner + current_timestamp;\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestSearchLogFindTid = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"\r",
											"        let optionsSearchLogFindTid = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptSearchLogFindTid,\r",
											"            body: httpRequestSearchLogFindTid\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsSearchLogFindTid);\r",
											"        let jsonDataSearchLogFindTid = await response.json();\r",
											"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
											"\r",
											"        // //200\r",
											"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"\r",
											"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
											"        console.log('hits',hits)\r",
											"  \r",
											"        // find tid\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            // let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"        \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            if(applicationNameValue == applicationName){\r",
											"                let tid = hits[i]._source.cauldron.tid;\r",
											"                pm.environment.set(\"tid\", tid);\r",
											"                break;\r",
											"           }\r",
											"        }\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"CheckLog = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCheckLog = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = pm.environment.get(\"tid\");\r",
											"\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestCheckLog = {\r",
											"            mode: 'raw',\r",
											"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"        let optionsCheckLog = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptCheckLog,\r",
											"            body: httpRequestCheckLog\r",
											"        }; \r",
											"        let response = await reqPromise(optionsCheckLog);\r",
											"        let jsonDataCheckLog = await response.json();\r",
											"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
											"        \r",
											"        // //200\r",
											"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });     \r",
											"        \r",
											"        let hits = jsonDataCheckLog.hits.hits\r",
											"        console.log('hits',hits)\r",
											"  \r",
											"        // find logType\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            //  let logType = hits[i]._source.cauldron.logType\r",
											"            let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"           \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            \r",
											"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
											"            console.log('resultDataLog',resultDataLog)\r",
											"\r",
											"            let tidControl = x_ais_OrderRef_RemovePartner + current_timestamp;\r",
											"            // console.log(tidControl);\r",
											"            if(applicationNameValue == applicationName){\r",
											"                 \r",
											"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ProvisioningAPIs\r",
											"                pm.test(\"Check Summary Log : RemovePartner\" , function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Summary Log ( Expected = Actual) [RemovePartner] ==================\");\r",
											"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
											"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
											"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeRoleInvalid);\r",
											"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionRoleInvalid);\r",
											"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
											"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                         // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
											"                        console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
											"\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
											"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
											"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeRoleInvalid); \r",
											"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionRoleInvalid); \r",
											"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
											"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
											"                        pm.expect(resultDataLog.custom).to.eql(customSummary);                    \r",
											"\r",
											"                    }); \r",
											"                }\r",
											"\r",
											"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ProvisioningAPIs\r",
											"\r",
											"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
											"                    // console.log('endPointNameValue ',endPointNameValue)\r",
											"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [RemovePartner]\", function () {\r",
											"                        console.log(\"===============================================================================================================\")\r",
											"                        console.log(\"======== Check Detail Log ( Expected = Actual) [RemovePartner] ==================\");\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
											"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
											"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
											"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
											"\r",
											"\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
											"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
											"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
											"\r",
											"                        if( endPointNameValue == endPointNameProvisioningAPIs){     //\"endPointName\":\"ProvisioningAPIs\"\r",
											"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs); \r",
											"                        \r",
											"                            // check requestObject\r",
											"                            // \"requestObject\":\"{\\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Partner/RemovePartner\\\",\\\"method\\\":\\\"DELETE\\\",\\\"headers\\\":{\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"RemovePartner_202104191504121\\\",\\\"x-ais-orderdesc\\\":\\\"RemovePartner\\\",\\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAGFEbL+6SxXpwsuQ2AFXzxdP5ASliv7b/ivuC4tlIIbY0IlAkkY2KW0\\\"},\\\"body\\\":{\\\"PartnerId\\\":\\\"607d438763fa0e0001c335bf\\\"}}\",\r",
											"\r",
											"\r",
											"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
											"                            // console.log('jsonParseRequestObject : : :',jsonParseRequestObject);\r",
											"                            \r",
											"                            let url = urlCheckLog + requestObjectUrlStaging; \r",
											"                            let x_ais_orderref = x_ais_OrderRef_RemovePartner + current_timestamp;\r",
											"                            let x_ais_orderdesc = x_ais_OrderDesc_RemovePartner;\r",
											"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken2\");                           \r",
											"                            let PartnerId = pm.environment.get(\"GetResponse_PartnerId\");\r",
											"\r",
											"\r",
											"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
											"                            pm.expect(jsonParseRequestObject.method).to.eql(methodDelete);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
											"                            pm.expect(jsonParseRequestObject.body.PartnerId).to.eql(PartnerId);\r",
											"\r",
											"\r",
											"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
											"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodDelete);\r",
											"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
											"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
											"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
											"                            console.log(\"resquest.body.PartnerId : \" + jsonParseRequestObject.body.PartnerId + \" = \" + PartnerId);\r",
											"\r",
											"                                                  \r",
											"                            // check responseObject\r",
											"                            //  \"responseObject\":\"{\\\"OperationStatus\\\":{\\\"Code\\\":\\\"20000\\\",\\\"Description\\\":\\\"RemovePartner is Success\\\"}\r",
											"\r",
											"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
											"                            // console.log('jsonParseResponseObject : : : ',jsonParseResponseObject);              \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeRoleInvalid);  \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionRoleInvalid);  \r",
											"\r",
											"                            console.log(\"response.partnerInfo.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeRoleInvalid);\r",
											"                            console.log(\"response.partnerInfo.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionRoleInvalid); \r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"setTimeout(function(){SearchLogFindTid();}, 30000); \r",
											"setTimeout(function(){CheckLog();}, 40000); \r",
											"\r",
											"\r",
											"\r",
											"setTimeout(function(){\r",
											"pm.environment.unset(\"random_number\");\r",
											"pm.environment.unset(\"PartnerName\");\r",
											"pm.environment.unset(\"MerchantContact\");\r",
											"pm.environment.unset(\"CPID\");\r",
											"pm.environment.unset(\"sessionId\");\r",
											"pm.environment.unset(\"current_timestamp\");\r",
											"pm.environment.unset(\"AccessToken\");\r",
											"pm.environment.unset(\"GetResponse_PartnerId\");\r",
											"pm.environment.unset(\"GetResponse_CustomerId\");\r",
											"pm.environment.unset(\"tid\");\r",
											"pm.environment.unset(\"AccessToken2\");\r",
											"pm.environment.unset(\"tid\");\r",
											"pm.environment.unset(\"AccountName\");\r",
											"pm.environment.unset(\"GetResponse_AccountName\");\r",
											"pm.environment.unset(\"GetResponse_AccountId\");\r",
											"pm.environment.unset(\"GetResponse_SystemUserId\");\r",
											"\r",
											"}, 50000);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var Username = pm.environment.get(\"Username\");\r",
											"var Password = pm.environment.get(\"Password\");\r",
											"var Username2 = pm.environment.get(\"Username_Customer\");\r",
											"var Password2 = pm.environment.get(\"Password_Customer\");\r",
											"\r",
											"\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"\r",
											"let UserRole = fieldDataValue.role.role_SupplierAdmin;\r",
											"\r",
											"//format YYYYMMDDHHMMSSS\r",
											"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
											"\r",
											"// console.log('currentTmestamp',currentTmestamp);\r",
											"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
											"\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"\r",
											"//---------------- statusCodeList --------------//\r",
											"//set variable to statusCodeList JSON.parse\r",
											"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
											"//set global variable to statusCode 200\r",
											"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
											"//set global variable to statusCode 201\r",
											"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
											"//set global variable to statusCode 403\r",
											"pm.globals.set(\"statusCodeForbidden\", statusCodeList.statusCodeForbidden);\r",
											"\r",
											"//---------------- resultCodeList --------------//\r",
											"//set variable to resultCodeList JSON.parse\r",
											"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
											"//set global variable to resultCode \"20000\"\r",
											"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
											"//set global variable to resultCode \"20100\"\r",
											"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
											"//set global variable to resultCode \"40308\"\r",
											"pm.globals.set(\"resultCodeRoleInvalid\", resultCodeList.resultCodeRoleInvalid);\r",
											"\r",
											"//---------------- resultDescriptionSuccessList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
											"//set global variable to resultDescription \"SignInProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
											"//set global variable to resultDescription \"CreatePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
											"//set global variable to resultDescription \"RemovePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
											"//set global variable to resultDescription \"InquiryPartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionInquiryPartner\", resultDescriptionSuccessList.resultDescriptionInquiryPartner);\r",
											"//set global variable to resultDescription \"RemoveSystemUser is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveSystemUser\", resultDescriptionSuccessList.resultDescriptionRemoveSystemUser);\r",
											"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
											"\r",
											"//---------------- resultDescriptionErrorList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
											"//set global variable to resultDescription \"Role Invalid\"\r",
											"pm.globals.set(\"resultDescriptionRoleInvalid\", resultDescriptionErrorList.resultDescriptionRoleInvalid);\r",
											"\r",
											"\r",
											"//---------------- HeaderList --------------//\r",
											"//set variable to HeaderList JSON.parse\r",
											"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
											"//---------------- set globals Other --------------//\r",
											"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
											"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
											"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
											"//set global variable to kbn-versio \"7.5.1\"\r",
											"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Signin_ --------------//\r",
											"//set global variable to x_ais_OrderRef \"Signin_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals CreatePartner --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
											"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
											"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
											"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
											"//set global variable to x_ais_OrderRef \"InquiryPartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_InquiryPartner\", HeaderList.Partner.x_ais_OrderRef_InquiryPartner);\r",
											"//set global variable to x_ais_OrderDesc \"InquiryPartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_InquiryPartner\", HeaderList.Partner.x_ais_OrderDesc_InquiryPartner);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals CreateAccount --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
											"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
											"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
											"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals SystemUser --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreateSystemUser_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreateSystemUser\", HeaderList.SystemUser.x_ais_OrderRef_CreateSystemUser);\r",
											"//set global variable to x_ais_OrderDesc \"CreateSystemUser\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreateSystemUser\", HeaderList.SystemUser.x_ais_OrderDesc_CreateSystemUser);\r",
											"//set global variable to x_ais_OrderRef \"RemoveSystemUser_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemoveSystemUser\", HeaderList.SystemUser.x_ais_OrderRef_RemoveSystemUser);\r",
											"//set global variable to x_ais_OrderDesc \"RemoveSystemUser\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemoveSystemUser\", HeaderList.SystemUser.x_ais_OrderDesc_RemoveSystemUser);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultCode \"20100\"\r",
											"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
											"//get global variable to resultDescription \"SignInProcess is Success\"\r",
											"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
											"//get global variable to resultDescription \"CreatePartner is Success\"\r",
											"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
											"//get global variable to resultDescription \"CreateAccount is Success\"\r",
											"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
											"//get global variable to resultDescription \"CreateSystemUser is Success\"\r",
											"var resultDescriptionCreateSystemUser = pm.globals.get(\"resultDescriptionCreateSystemUser\");\r",
											"\r",
											"\r",
											"//---------------- urlRouteList --------------//\r",
											"//set variable to urlRouteList JSON.parse\r",
											"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
											"//---------------- set url Create --------------//\r",
											"//set global variable to url \"/api/v1/auth/signin\"\r",
											"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
											"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
											"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
											"//set global variable to url \"/api/v1/SystemUser/CreateSystemUser\"\r",
											"pm.globals.set(\"urlSystemUserCreateSystemUser\", urlRouteList.SystemUser.urlSystemUserCreateSystemUser);\r",
											"\r",
											"//---------------- get url Create --------------//\r",
											"//get global variable to url \"/api/v1/auth/signin\"\r",
											"var urlSignin = pm.globals.get(\"urlSignin\");\r",
											"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
											"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
											"//get global variable to url \"/api/v1/SystemUser/CreateSystemUser\"\r",
											"var urlSystemUserCreateSystemUser = pm.globals.get(\"urlSystemUserCreateSystemUser\");\r",
											"\r",
											"//---------------- set url Remove --------------//\r",
											"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
											"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
											"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
											"//set global variable to url \"/api/v1/SystemUser/RemoveSystemUser\"\r",
											"pm.globals.set(\"urlSystemUserRemoveSystemUser\", urlRouteList.SystemUser.urlSystemUserRemoveSystemUser);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"//---------------- set url Inquiry --------------//\r",
											"//set global variable to url \"/api/v1/Partner/InquiryPartner\"\r",
											"pm.globals.set(\"urlPartnerInquiryPartner\", urlRouteList.Partner.urlPartnerInquiryPartner);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"Signin_\"\r",
											"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals SystemUser --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreateSystemUser_\"\r",
											"var x_ais_OrderRef_CreateSystemUser = pm.globals.get(\"x_ais_OrderRef_CreateSystemUser\");\r",
											"//get global variable to x_ais_OrderDesc \"CreateSystemUser\"\r",
											"var x_ais_OrderDesc_CreateSystemUser = pm.globals.get(\"x_ais_OrderDesc_CreateSystemUser\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"// Signin get token ROOT ADMIN\r",
											" Signin = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username,\r",
											"                password:Password\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"\r",
											"        //set random_number\r",
											"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
											"        //set PartnerName\r",
											"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
											"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
											"        //set MerchantContact\r",
											"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
											"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
											"        // set CPID\r",
											"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
											"        pm.environment.set(\"CPID\", CPIDValue)\r",
											"        \r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreatePartner\r",
											" CreatePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreatePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreatePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
											"                \"PartnerType\": [\r",
											"                    \"Supplier\",\r",
											"                    \"Customer\"\r",
											"                ],\r",
											"                \"PartnerDetail\": {\r",
											"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
											"                    \"CPID\": pm.environment.get(\"CPID\")\r",
											"                },\r",
											"                \"Property\": {\r",
											"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
											"                }\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsCreatePartner = {\r",
											"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreatePartner,\r",
											"            body: httpRequestCreatePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsCreatePartner);\r",
											"        let jsonDataCreatePartner = await response.json();\r",
											"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
											"    \r",
											"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreatePartner is Success\r",
											"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
											"        });\r",
											"\r",
											"     \r",
											"        //GetResponse_PartnerId\r",
											"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
											"\r",
											"        //GetResponse_CustomerId\r",
											"        pm.environment.set(\"GetResponse_CustomerId\", jsonDataCreatePartner.PartnerInfo.CustomerId);\r",
											"\r",
											"\r",
											"                //Accountname\r",
											"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
											"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
											"        \r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"// Signin get token\r",
											" Signin2 = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username2,\r",
											"                password:Password2\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken2\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"Signin();\r",
											"setTimeout(async function(){await CreatePartner();}, 8000); \r",
											"setTimeout(async function(){await Signin2();}, 10000); \r",
											"setTimeout(async function(){}, 15000); \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-ais-UserName",
										"type": "text",
										"value": "{{x_ais_UserName_AisPartner}}"
									},
									{
										"key": "x-ais-OrderRef",
										"value": "{{x_ais_OrderRef_RemovePartner}}{{current_timestamp}}"
									},
									{
										"key": "x-ais-OrderDesc",
										"type": "text",
										"value": "{{x_ais_OrderDesc_RemovePartner}}"
									},
									{
										"key": "x-ais-AccessToken",
										"value": "{{Bearer}} {{AccessToken2}}"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"PartnerId\": \"{{GetResponse_PartnerId}}\"\r\n}"
								},
								"url": {
									"raw": "{{url}}{{provisioningapis}}/api/v1/Partner/RemovePartner",
									"host": [
										"{{url}}{{provisioningapis}}"
									],
									"path": [
										"api",
										"v1",
										"Partner",
										"RemovePartner"
									]
								},
								"description": "Type:Desire"
							},
							"response": []
						}
					]
				}
			]
		}
	]
}