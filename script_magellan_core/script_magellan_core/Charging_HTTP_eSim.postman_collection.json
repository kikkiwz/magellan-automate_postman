{
	"info": {
		"_postman_id": "ac639c97-7a0f-4fae-bdca-3b46cc91d877",
		"name": "Charging _HTTP_eSim",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Report",
			"item": [
				{
					"name": "ChargingHTTPeSim_Report_TST_F2_1_1_001_Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"var controlapis = pm.environment.get(\"controlapis\");\r",
									"var httpapis = pm.environment.get(\"httpapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var Basic = pm.environment.get(\"Basic\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to xAisOrderRef \"RemoveThing_\"\r",
									"var x_ais_OrderRef_RemoveThing = pm.globals.get(\"x_ais_OrderRef_RemoveThing\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"var x_ais_OrderDesc_RemoveThing = pm.globals.get(\"x_ais_OrderDesc_RemoveThing\");\r",
									"//get global variable to xAisOrderRef \"InquiryThing_\"\r",
									"var x_ais_OrderRef_InquiryThing = pm.globals.get(\"x_ais_OrderRef_InquiryThing\");\r",
									"//get global variable to x_ais_OrderDesc \"InquiryThing\"\r",
									"var x_ais_OrderDesc_InquiryThing = pm.globals.get(\"x_ais_OrderDesc_InquiryThing\");\r",
									"//get global variable to xAisOrderRef \"RemoveThingStateInfo_\"\r",
									"var x_ais_OrderRef_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderRef_RemoveThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThingStateInfo\"\r",
									"var x_ais_OrderDesc_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_RemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals AsgardHTTP --------------//\r",
									"//get global variable to x_ais_OrderRef \"ReportHTTP_\"\r",
									"var x_ais_OrderRef_ReportHTTP = pm.globals.get(\"x_ais_OrderRef_ReportHTTP\");\r",
									"//get global variable to x_ais_OrderDesc \"Report Data to MG\"\r",
									"var x_ais_OrderDesc_ReportHTTP = pm.globals.get(\"x_ais_OrderDesc_ReportHTTP\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get url Remove --------------//\r",
									"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
									"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"var urlThingRemoveThing = pm.globals.get(\"urlThingRemoveThing\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"var urlThingRemoveThingStateInfo = pm.globals.get(\"urlThingRemoveThingStateInfo\");\r",
									"//---------------- get url Inquiry --------------//\r",
									"//get global variable to url \"/api/v1/Thing/InquiryThingr\"\r",
									"var urlThingInquiryThing = pm.globals.get(\"urlThingInquiryThing\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"RemovePartner is Success\"\r",
									"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
									"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
									"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
									"//get global variable to resultDescription \"RemoveThing is Success\"\r",
									"var resultDescriptionRemoveThing = pm.globals.get(\"resultDescriptionRemoveThing\");\r",
									"//get global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"var resultDescriptionRemoveThingStateInfo = pm.globals.get(\"resultDescriptionRemoveThingStateInfo\");\r",
									"//get global variable to resultDescription \"InquiryThing is Success\"\r",
									"var resultDescriptionInquiryThing = pm.globals.get(\"resultDescriptionInquiryThing\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to resultDescription \"ReportProcess is Success\"\r",
									"// var resultDescriptionReportProcessIsSuccess = pm.globals.get(\"resultDescriptionReportProcessIsSuccess\");\r",
									"//get global variable to resultDescription \"The requested operation was successfully.\"\r",
									"var resultDescriptionTheRequestedOperationWasSuccessfully = pm.globals.get(\"resultDescriptionTheRequestedOperationWasSuccessfully\");\r",
									"//------------------------------------------------------------//\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Asgard HTTP(eSim) Report : Status code is \" + statusCodeSuccess, function () {\r",
									"    pm.response.to.have.status(statusCodeSuccess);\r",
									"});\r",
									"\r",
									"pm.test('Asgard HTTP(eSim) Report : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeSuccess);\r",
									"});\r",
									"\r",
									"pm.test('Asgard HTTP(eSim) Report : OperationStatus DeveloperMessage is '+'\"'+ resultDescriptionTheRequestedOperationWasSuccessfully+'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"});\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"//---------------- LogDefaultValue --------------//\r",
									"//set variable to LogDefaultValue JSON.parse\r",
									"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
									"// console.log('LogDefaultValue',LogDefaultValue);\r",
									"//---------------- set globals Other --------------//\r",
									"var SearchLog = LogDefaultValue.SearchLog;\r",
									"// console.log('SearchLog',SearchLog);\r",
									"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
									"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
									"var kbn_version = SearchLog.header.kbn_version;\r",
									"var authorization = SearchLog.header.Authorization;\r",
									"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
									"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
									"var namespace = LogDefaultValue.Other.namespace;\r",
									"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
									"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
									"var header_x_ais_username = LogDefaultValue.Other.header_x_ais_username;\r",
									"var methodPost = LogDefaultValue.Other.methodPost;\r",
									"\r",
									"// Detail\r",
									"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
									"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
									"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
									"\r",
									"// Summary\r",
									"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
									"var identitySummary = \"\";\r",
									"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
									"\r",
									"// Asgard.Http.APIs\r",
									"var applicationName = LogDefaultValue.AsgardHTTP.applicationName;\r",
									"var cmdName = LogDefaultValue.AsgardHTTP.cmdNameReport;\r",
									"var endPointNameRabbitMQ = LogDefaultValue.AsgardHTTP.endPointNameRabbitMQ;\r",
									"var containerId = LogDefaultValue.AsgardHTTP.containerId;\r",
									"var requestObjectUrlStaging = LogDefaultValue.AsgardHTTP.requestObjectUrlReportMgStaging;\r",
									"var urlReport  = LogDefaultValue.AsgardHTTP.urlReport;\r",
									"\r",
									"// Insight.Charging.APIs\r",
									"var applicationNameCharging = LogDefaultValue.Charging.applicationName;\r",
									"var cmdNameCharging = LogDefaultValue.Charging.cmdName;\r",
									"var endPointNameRocsService = LogDefaultValue.Charging.endPointName;\r",
									"var containerIdCharging = LogDefaultValue.Charging.containerId;\r",
									"var urlCharging  = LogDefaultValue.Charging.urlCharging;\r",
									"\r",
									"// Check CDR (Summary Log) and EDR (Detail Log)\r",
									"SearchLogFindTid = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSearchLogFindTid = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = x_ais_OrderRef_ReportHTTP + current_timestamp; \r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestSearchLogFindTid = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"phrase\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"\r",
									"        let optionsSearchLogFindTid = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptSearchLogFindTid,\r",
									"            body: httpRequestSearchLogFindTid\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsSearchLogFindTid);\r",
									"        let jsonDataSearchLogFindTid = await response.json();\r",
									"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
									"        // console.log('hits',hits)\r",
									"  \r",
									"        // find tid\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            // let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"        \r",
									"            // console.log('logType',logType)\r",
									"             console.log('applicationNameValue',applicationNameValue)\r",
									"             console.log('applicationName',applicationName)\r",
									"            if(applicationNameValue == applicationName){\r",
									"                let tid = hits[i]._source.cauldron.tid;\r",
									"                pm.environment.set(\"tid\", tid);\r",
									"                let sessionId = hits[i]._source.cauldron.sessionId;\r",
									"                pm.environment.set(\"sessionId\", sessionId);\r",
									"                break;\r",
									"           }\r",
									"        }\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"CheckLog = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCheckLog = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = pm.environment.get(\"sessionId\");\r",
									"\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"         console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestCheckLog = {\r",
									"            mode: 'raw',\r",
									"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"phrase\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"        let optionsCheckLog = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptCheckLog,\r",
									"            body: httpRequestCheckLog\r",
									"        }; \r",
									"        let response = await reqPromise(optionsCheckLog);\r",
									"        let jsonDataCheckLog = await response.json();\r",
									"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
									"        \r",
									"        // //200\r",
									"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });     \r",
									"        \r",
									"        let hits = jsonDataCheckLog.hits.hits\r",
									"         console.log('hits',hits)\r",
									"  \r",
									"        // find logType\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            //  let logType = hits[i]._source.cauldron.logType\r",
									"            let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"           \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            \r",
									"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
									"            // console.log('resultDataLog',resultDataLog)\r",
									"\r",
									"            let tidControl = x_ais_OrderRef_ReportHTTP  + current_timestamp;\r",
									"            // console.log(tidControl);\r",
									"            if(applicationNameValue == applicationName){\r",
									"                 \r",
									"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and Asgard.Http.APIs\r",
									"                    pm.test(\"Check Summary Log : Asgard_HTTP(eSim) Report\" , function () {\r",
									"                        console.log(\"======== Check Summary Log ( Expected = Actual) [Asgard_HTTP(eSim) Report] ==================\");\r",
									"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
									"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
									"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeSuccess);\r",
									"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
									"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
									"                        // console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
									"\r",
									"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
									"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
									"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeSuccess); \r",
									"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionTheRequestedOperationWasSuccessfully); \r",
									"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
									"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"\r",
									"                        let thingId = pm.environment.get(\"GetResponse_ThingID\");\r",
									"                        let imei = (pm.environment.get(\"random_IM\")).replace(\" \", \"\");\r",
									"                        let imsi = (pm.environment.get(\"GetResponse_IMSI\")).replace(\" \", \"\");\r",
									"                        let customUrl= urlCheckLog + requestObjectUrlStaging;\r",
									"\r",
									"                        // check identity\r",
									"                        // \"identity\":\"{\\\"Imei\\\":\\\"496151103122639\\\",\\\"ThingId\\\":\\\"6013965896d0ed0001f5a46d\\\",\\\"Imsi\\\":\\\"496151103122639\\\"}\"\r",
									"                        let dataSummaryIdentity = JSON.parse(resultDataLog.identity);\r",
									"\r",
									"                        console.log(\"identity.ThingId : \" + dataSummaryIdentity.ThingId + \" = \" + thingId);\r",
									"                        console.log(\"identity.Imei : \" + dataSummaryIdentity.Imei + \" = \" + imei);\r",
									"                        console.log(\"identity.Imsi : \" + dataSummaryIdentity.Imsi + \" = \" + imsi);\r",
									"                        \r",
									"                        pm.expect(dataSummaryIdentity.ThingId).to.eql(thingId); \r",
									"                        pm.expect(dataSummaryIdentity.Imei).to.eql(imei); \r",
									"                        pm.expect(dataSummaryIdentity.Imsi).to.eql(imsi); \r",
									"\r",
									"                        // check custom\r",
									"                        // \"custom\":{\"Imsi\":[\"496151103122639\"],\"url\":\"mg-staging.sandais.com/api/report/sim/v1\",\"Imei\":[\"496151103122639\"],\"ThingID\":[\"6013965896d0ed0001f5a46d\"]}\r",
									"\r",
									"                        let customData = resultDataLog.custom.customData\r",
									"\r",
									"                        console.log(\"custom.url : \" + customData.url + \" = \" + customUrl);\r",
									"                        console.log(\"custom.Imei[0] : \" + customData.Imei[0] + \" = \" + imei);\r",
									"                        console.log(\"custom.Imsi[0] : \" + customData.Imsi[0] + \" = \" + imsi);\r",
									"                        console.log(\"custom.ThingID[0] : \" + customData.ThingID[0] + \" = \" + thingId);\r",
									"\r",
									"                        pm.expect(customData.url).to.eql(customUrl); \r",
									"                        pm.expect(customData.Imei[0]).to.eql(imei); \r",
									"                        pm.expect(customData.Imsi[0]).to.eql(imsi); \r",
									"                        pm.expect(customData.ThingID[0]).to.eql(thingId); \r",
									"                    }); \r",
									"                }\r",
									"\r",
									"                if(logType == logTypeDetail && (applicationNameValue == applicationName) ){ //'Detail' and Asgard.Http.APIs\r",
									"\r",
									"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
									"                    // console.log('endPointNameValue ',endPointNameValue)\r",
									"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [Asgard_HTTP(eSim) Report]\", function () {\r",
									"                        console.log(\"======== Check Detail Log ( Expected = Actual) [Asgard_HTTP(eSim) Report] ==================\");\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
									"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
									"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
									"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
									"\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
									"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
									"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
									"\r",
									"                        let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
									"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
									"                        let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
									"                            // console.log('jsonParseResponseObject',jsonParseResponseObject); \r",
									"                        let url = urlReport; \r",
									"                        let x_ais_orderref = x_ais_OrderRef_ReportHTTP + current_timestamp;\r",
									"                        let x_ais_orderdesc = x_ais_OrderDesc_ReportHTTP;\r",
									"                        let x_ais_userName = x_ais_UserName_AisPartner;\r",
									"                        let authorization = Basic + ' ' + pm.environment.get(\"encodedKeys_Authorization_Report\");\r",
									"                        let imei = (pm.environment.get(\"random_IM\")).replace(\" \", \"\");\r",
									"                        let imsi = (pm.environment.get(\"GetResponse_IMSI\")).replace(\" \", \"\");\r",
									"                        let thingId = pm.environment.get(\"GetResponse_ThingID\");\r",
									"                        let customUrl= urlCheckLog + requestObjectUrlStaging;\r",
									"                        let SensorKey = fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP;\r",
									"                        let sensor = pm.environment.get(\"random_Sensor_AsgardHTTP\");\r",
									"                        let timestamp = pm.environment.get(\"timestamp\");\r",
									"\r",
									"                        if( endPointNameValue == undefined){\r",
									"                            // check requestObject\r",
									"                            // \"requestObject\":\"{\\\"url\\\":\\\"/api/report/sim/v1\\\",\\\"method\\\":\\\"POST\\\",\\\"headers\\\":{\\\"Cache-Control\\\":\\\"no-cache\\\",\\\"Content-Type\\\":\\\"application/json\\\",\\\"Accept\\\":\\\"*/*\\\",\\\"Accept-Encoding\\\":\\\"gzip,deflate,br\\\",\\\"Authorization\\\":\\\"Basic NDk2MTUxMTAzMTIyNjM5OjEuMi4zLjQ=\\\",\\\"Host\\\":\\\"mg-staging.sandais.com\\\",\\\"User-Agent\\\":\\\"PostmanRuntime/7.26.8\\\",\\\"Content-Length\\\":\\\"2\\\",\\\"x-real-ip\\\":\\\"171.96.174.10\\\",\\\"x-forwarded-for\\\":\\\"171.96.174.10\\\",\\\"x-forwarded-proto\\\":\\\"https\\\",\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"ReportHTTP_202101291701676\\\",\\\"x-ais-orderdesc\\\":\\\"Report Data to MG\\\",\\\"postman-token\\\":\\\"83bc76b4-8538-4a10-94fc-8b9cc1143ec8\\\",\\\"x-request-id\\\":\\\"bbf6c560-8bea-4d53-87d8-28a3f3664d37\\\",\\\"x-b3-traceid\\\":\\\"eb252eaef48d4ec507b32acd0a8dc573\\\",\\\"x-b3-spanid\\\":\\\"07b32acd0a8dc573\\\",\\\"x-b3-sampled\\\":\\\"0\\\",\\\"x-ais-SessionId\\\":\\\"1611896410502\\\",\\\"identity\\\":\\\"{\\\\\\\"Imei\\\\\\\":\\\\\\\"496151103122639\\\\\\\",\\\\\\\"ThingID\\\\\\\":\\\\\\\"6013965896d0ed0001f5a46d\\\\\\\",\\\\\\\"Imsi\\\\\\\":\\\\\\\"496151103122639\\\\\\\"}\\\",\\\"custom\\\":\\\"{\\\\\\\"Imsi\\\\\\\":[\\\\\\\"496151103122639\\\\\\\"],\\\\\\\"url\\\\\\\":\\\\\\\"mg-staging.sandais.com/api/register/sim/v1\\\\\\\",\\\\\\\"Imei\\\\\\\":[\\\\\\\"496151103122639\\\\\\\"],\\\\\\\"ThingID\\\\\\\":[\\\\\\\"6013965896d0ed0001f5a46d\\\\\\\"]}\\\"},\\\"queryString\\\":{},\\\"routeParamteters\\\":{},\\\"body\\\":{\\\"Payload\\\":{\\\"Temp\\\":\\\"686\\\",\\\"Timestamp\\\":\\\"2020-12-31T03:03:18+07:00\\\"}}\"\r",
									"\r",
									"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
									"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
									"                            console.log(\"headers.x_ais_userName : \" + jsonParseRequestObject.headers[header_x_ais_username] + \" = \" + x_ais_userName);\r",
									"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
									"                            console.log(\"headers.Authorization : \" + jsonParseRequestObject.headers.Authorization + \" = \" + authorization);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
									"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_username]).to.eql(x_ais_userName);\r",
									"                            pm.expect(jsonParseRequestObject.headers.Authorization).to.eql(authorization);\r",
									"\r",
									"                            // check requestObject headers.identity\r",
									"                            let jsonParseRequestObjectHeadersIdentity = JSON.parse(jsonParseRequestObject.headers.identity);\r",
									"                            // console.log('jsonParseRequestObjectHeadersIdentity',jsonParseRequestObjectHeadersIdentity);\r",
									"\r",
									"                            console.log(\"headers.identity.Imei : \" + jsonParseRequestObjectHeadersIdentity.Imei + \" = \" + imei);\r",
									"                            console.log(\"headers.identity.Imsi : \" + jsonParseRequestObjectHeadersIdentity.Imsi + \" = \" + imsi);\r",
									"                            console.log(\"headers.identity.ThingId : \" + jsonParseRequestObjectHeadersIdentity.ThingId + \" = \" + thingId);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObjectHeadersIdentity.Imei).to.eql(imei);\r",
									"                            pm.expect(jsonParseRequestObjectHeadersIdentity.Imsi).to.eql(imsi);\r",
									"                            pm.expect(jsonParseRequestObjectHeadersIdentity.ThingId).to.eql(thingId);\r",
									"\r",
									"                            // check requestObject headers.custom\r",
									"                            let jsonParseRequestObjectHeadersCustom = JSON.parse(jsonParseRequestObject.headers.custom);\r",
									"                            // console.log('jsonParseRequestObjectHeadersCustom',jsonParseRequestObjectHeadersCustom);\r",
									"\r",
									"                            console.log(\"headers.custom.url : \" + jsonParseRequestObjectHeadersCustom.url + \" = \" + customUrl);\r",
									"                            console.log(\"headers.custom.Imei[0] : \" + jsonParseRequestObjectHeadersCustom.Imei[0] + \" = \" + imei);\r",
									"                            console.log(\"headers.custom.Imsi[0] : \" + jsonParseRequestObjectHeadersCustom.Imsi[0] + \" = \" + imsi);\r",
									"                            console.log(\"headers.custom.ThingID[0] : \" + jsonParseRequestObjectHeadersCustom.ThingID[0] + \" = \" + thingId);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObjectHeadersCustom.url).to.eql(customUrl);\r",
									"                            pm.expect(jsonParseRequestObjectHeadersCustom.Imei[0]).to.eql(imei);\r",
									"                            pm.expect(jsonParseRequestObjectHeadersCustom.Imsi[0]).to.eql(imsi);\r",
									"                            pm.expect(jsonParseRequestObjectHeadersCustom.ThingID[0]).to.eql(thingId);\r",
									"                            \r",
									"                            console.log(\"queryString : \" + JSON.stringify(jsonParseRequestObject.queryString) + \" = \" + JSON.stringify({}));\r",
									"                            console.log(\"routeParamteters : \" + JSON.stringify(jsonParseRequestObject.routeParamteters) + \" = \" + JSON.stringify({}));\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.queryString).to.eql({}); \r",
									"                            pm.expect(jsonParseRequestObject.routeParamteters).to.eql({}); \r",
									"\r",
									"                            console.log(\"resquest.body.Payload.\" + SensorKey +\" : \" + jsonParseRequestObject.body.Payload[SensorKey] + \" = \" + sensor.toString());\r",
									"                            pm.expect(jsonParseRequestObject.body.Payload[SensorKey]).to.eql(sensor.toString());\r",
									"                            // pm.expect(jsonParseRequestObject.body.Payload.Timestamp).to.eql(timestamp); \r",
									"                           \r",
									"                            // check responseObject\r",
									"                            // responseObject: \"{\"OperationStatus\":{\"Code\":\"20000\",\"DeveloperMessage\":\"The requested operation was successfully.\"}}\"\r",
									"\r",
									"                            console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeSuccess);\r",
									"                            console.log(\"response.OperationStatus.DeveloperMessage : \" + jsonParseResponseObject.OperationStatus.DeveloperMessage + \" = \" + resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"\r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeSuccess);  \r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheRequestedOperationWasSuccessfully);  \r",
									"                        }\r",
									"               \r",
									"                        if( endPointNameValue == endPointNameRabbitMQ){     //\"endPointName\":\"RabbitMQ\"\r",
									"                            console.log(\"custom1.endPointName : \" + resultDataLog.custom1.endPointName + \" = \" + endPointNameRabbitMQ);\r",
									"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameRabbitMQ); \r",
									"                        \r",
									"                            // check requestObject\r",
									"                            // \"requestObject\":\"{\\\"url\\\":\\\"internalreport.pub.v1.089320c4-3275-4d4d-98a9-1d598a3e70c1\\\",\\\"headers\\\":{\\\"x-ais-orderref\\\":\\\"ReportHTTP_202101291701676\\\",\\\"x-ais-sessionid\\\":\\\"1611916984472\\\",\\\"timestamp_in_ms\\\":\\\"1611916984473\\\"},\\\"body\\\":\\\"{\\\\\\\"AA\\\\\\\":\\\\\\\"686\\\\\\\",\\\\\\\"Timestamp\\\\\\\":\\\\\\\"2020-12-31T03:03:18+07:00\\\\\\\"}\\\"}\"\r",
									"\r",
									"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                            \r",
									"                            let jsonParseRequestObjectBody = JSON.parse(jsonParseRequestObject.body);\r",
									"\r",
									"                            console.log(\"resquest.body.\" + SensorKey +\" : \" + jsonParseRequestObjectBody[SensorKey] + \" = \" + sensor.toString());\r",
									"                            pm.expect(jsonParseRequestObjectBody[SensorKey]).to.eql(sensor.toString());\r",
									"                            \r",
									"                            // check responseObject\r",
									"                            //  \"responseObject\":\"\\\"\\\"\",\r",
									"\r",
									"                            console.log(\"response : \" + JSON.stringify(jsonParseResponseObject) + \" = \" + JSON.stringify(\"\"));\r",
									"                            pm.expect(jsonParseResponseObject).to.eql(\"\");  \r",
									"                        }\r",
									"                    }); \r",
									"                }\r",
									"\r",
									"            }\r",
									"\r",
									"            if(applicationNameValue == applicationNameCharging){\r",
									"                 \r",
									"                if(logType == logTypeSummary && applicationNameValue == applicationNameCharging){ // 'Summary' and Insight.Charging.APIs\r",
									"                    pm.test(\"Check Summary Log : Charging\" , function () {\r",
									"                        console.log(\"======== Check Summary Log ( Expected = Actual) [Charging] ==================\");\r",
									"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
									"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
									"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeSuccess);\r",
									"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
									"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
									"                        // console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
									"\r",
									"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
									"                        pm.expect(resultDataLog.cmdName).to.eql(cmdNameCharging); \r",
									"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeSuccess); \r",
									"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionTheRequestedOperationWasSuccessfully); \r",
									"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
									"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerIdCharging); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationNameCharging); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.identity).to.eql(identitySummary); \r",
									"                        pm.expect(resultDataLog.custom).to.eql(customSummary); \r",
									"                        \r",
									"                    }); \r",
									"                }\r",
									"\r",
									"                if(logType == logTypeDetail && (applicationNameValue == applicationNameCharging) ){ //'Detail' and Insight.Charging.APIs\r",
									"\r",
									"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
									"                    // console.log('endPointNameValue ',endPointNameValue)\r",
									"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [Charging]\", function () {\r",
									"                        console.log(\"======== Check Detail Log ( Expected = Actual) [Charging] ==================\");\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
									"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        if( endPointNameValue == undefined){\r",
									"                            console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        }\r",
									"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
									"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
									"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
									"\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
									"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationNameCharging); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerIdCharging); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                         if( endPointNameValue == undefined){\r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                         }\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
									"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
									"\r",
									"                        let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
									"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
									"                        let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
									"                            // console.log('jsonParseResponseObject',jsonParseResponseObject); \r",
									"                        let url = urlCharging + pm.environment.get(\"GetResponse_ThingID\"); \r",
									"                        let x_ais_orderref = x_ais_OrderRef_ReportHTTP + current_timestamp;\r",
									"                        let thingId = pm.environment.get(\"GetResponse_ThingID\");\r",
									"                        let SensorKey = fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP;\r",
									"                        let sensor = pm.environment.get(\"random_Sensor_AsgardHTTP\");\r",
									"                      \r",
									"                        if( endPointNameValue == undefined){\r",
									"                            \r",
									"                            // check requestObject\r",
									"                            // \"requestObject\":\"{\\\"url\\\":\\\"/api/v1/Charging/603605f824ef380001b9f108\\\",\\\"method\\\":\\\"POST\\\",\\\"headers\\\":{\\\"Content-Type\\\":\\\"application/json\\\",\\\"Host\\\":\\\"chargingapis.magellanstaging.svc.cluster.local\\\",\\\"Content-Length\\\":\\\"24\\\",\\\"x-ais-orderref\\\":\\\"ReportHTTP_202102241402448\\\",\\\"x-ais-sessionid\\\":\\\"1614153212381\\\",\\\"x-forwarded-proto\\\":\\\"http\\\",\\\"x-request-id\\\":\\\"a0841c07-c230-4f1c-8b48-71d83243564b\\\",\\\"x-b3-traceid\\\":\\\"d46d3e9a2b05b26895e83d80b50c8737\\\",\\\"x-b3-spanid\\\":\\\"01039a2b17e0a6cc\\\",\\\"x-b3-parentspanid\\\":\\\"95e83d80b50c8737\\\",\\\"x-b3-sampled\\\":\\\"0\\\"},\\\"queryString\\\":{ },\\\"routeParamteters\\\":{\\\"ThingId\\\":\\\"603605f824ef380001b9f108\\\"},\\\"body\\\":{\\\"Payload\\\":{\\\"AA\\\":\\\"903\\\"}}}\"\r",
									"\r",
									"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
									"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
									"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
									"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"\r",
									"                            console.log(\"queryString : \" + JSON.stringify(jsonParseRequestObject.queryString) + \" = \" + JSON.stringify({}));\r",
									"                            console.log(\"routeParamteters.ThingId : \" + JSON.stringify(jsonParseRequestObject.routeParamteters.ThingId) + \" = \" + thingId);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.queryString).to.eql({}); \r",
									"                            pm.expect(jsonParseRequestObject.routeParamteters.ThingId).to.eql(thingId); \r",
									"\r",
									"                            console.log(\"resquest.body.Payload.\" + SensorKey +\" : \" + jsonParseRequestObject.body.Payload[SensorKey] + \" = \" + sensor.toString());\r",
									"                            pm.expect(jsonParseRequestObject.body.Payload[SensorKey]).to.eql(sensor.toString());\r",
									"                           \r",
									"                            // check responseObject\r",
									"                            // responseObject: \"{\"OperationStatus\":{\"Code\":\"20000\",\"DeveloperMessage\":\"The requested operation was successfully.\"}}\"\r",
									"                            // pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeSuccess);  \r",
									"                            // pm.expect(jsonParseResponseObject.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheRequestedOperationWasSuccessfully);  \r",
									"                        }\r",
									"               \r",
									"                        // if( endPointNameValue == endPointNameRocsService){     //\"endPointName\":\"RocsService\"\r",
									"                        //     pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameRabbitMQ); \r",
									"                        \r",
									"                        //     // check requestObject\r",
									"                        //     // \"requestObject\":\"{\\\"url\\\":\\\"api/v3/rocs/metering-method\\\",\\\"method\\\":\\\"POST\\\",\\\"headers\\\":{\\\"x-tid\\\":\\\"MG20210224145332238101\\\",\\\"Authorization\\\":\\\"Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IllZNzczNkhkNTkifQ.eyJpc3MiOiJzcmYuYWlzLmNvLnRoL3NjZiIsInN1YiI6InRva2VuX2NsaWVudF9jcmVkZW50aWFscyIsImF1ZCI6ImlRZnRFMXdxckdLQlVEOElPeFlaUkRIeVNSWnBnTVhsNXhETVhMWHMxWkE9IiwiZXhwIjoxNjE0MjI1ODk0LCJpYXQiOjE2MTQxMzk0OTQsImp0aSI6IjM0aVhoU1NYNVFEMW9SMzlaM2tKU0YiLCJjbGllbnQiOiJNelV5TWpVc1RXRm5aV3hzWVc1OFFtRmphMlZ1Wkh3ekxqQXVNQT09Iiwic3NpZCI6ImlGUnBRVTU0dThMck9kSXhMNDFWVmwifQ.p1CMz1s4-TBkufYWu1eEdSueKWo87Yjsyiovyf1ppqRr8DoCuL5KM-BH0QpCJr3FyaiSNYKgLtPZMsvILA0Pc6kX7btBCDDTUq0hl0Lc9lQkWwj_icghFzIElhclw5EMNfnd-a_C1P2sNFXdiS-2RbskS1B9QknSyanEU7CCXwA\\\"},\\\"body\\\":{\\\"command\\\":\\\"usageMonitoring\\\",\\\"sessionId\\\":\\\"1614153212381\\\",\\\"tid\\\":\\\"MG20210224145332238101\\\",\\\"rtid\\\":\\\"MG20210224145332238101\\\",\\\"actualTime\\\":\\\"20210224145332\\\",\\\"app\\\":null,\\\"clientId\\\":null,\\\"userType\\\":\\\"MSISDN\\\",\\\"userValue\\\":\\\"9400631842\\\",\\\"resourceId\\\":null,\\\"resourceName\\\":\\\"Magellan Transaction P1\\\",\\\"requestUnit\\\":\\\"36\\\"}}\"\r",
									"                        //     pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                        //     let jsonParseRequestObjectBody = JSON.parse(jsonParseRequestObject.body);\r",
									"                        //     // pm.expect(jsonParseRequestObjectBody[SensorKey]).to.eql(sensor.toString());\r",
									"                            \r",
									"                        //     // check responseObject\r",
									"                        //     // \"responseObject\":\"\\\"{\\\\\\\"command\\\\\\\":\\\\\\\"usageMonitoring\\\\\\\",\\\\\\\"sessionId\\\\\\\":\\\\\\\"1614153212381\\\\\\\",\\\\\\\"tid\\\\\\\":\\\\\\\"MG20210224145332238101\\\\\\\",\\\\\\\"rtid\\\\\\\":\\\\\\\"MG20210224145332238101\\\\\\\",\\\\\\\"status\\\\\\\":\\\\\\\"200\\\\\\\",\\\\\\\"devMessage\\\\\\\":\\\\\\\"SUCCESS\\\\\\\"}\\\"\"\r",
									"                        //     // pm.expect(jsonParseResponseObject).to.eql(\"\");  \r",
									"                        // }\r",
									"                    }); \r",
									"                }\r",
									"\r",
									"            }\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// InquiryThing\r",
									"InquiryThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptInquiryThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_InquiryThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_InquiryThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestInquiryThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsInquiryThing = {\r",
									"            url: url + provisioningapis + urlThingInquiryThing,\r",
									"            method: 'POST',\r",
									"            header: headersOptInquiryThing,\r",
									"            body: httpRequestInquiryThing\r",
									"        };\r",
									"\r",
									"        // console.log('request InquiryThing');\r",
									"        let response = await reqPromise(optionsInquiryThing);\r",
									"        let jsonDataInquiryThing = await response.json();\r",
									"        // console.log('jsonDataInquiryThing',jsonDataInquiryThing)\r",
									"    \r",
									"        let operationStatusInquiryThing = await jsonDataInquiryThing.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"InquiryThing : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('InquiryThing : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusInquiryThing).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //InquiryThing is Success\r",
									"        pm.test('InquiryThing : OperationStatus Description is '+'\"'+ resultDescriptionInquiryThing+'\"', function () {\r",
									"            pm.expect(operationStatusInquiryThing).to.have.property('Description', resultDescriptionInquiryThing);\r",
									"        });\r",
									"\r",
									"        //Check Data\r",
									"        let thingInfo = await jsonDataInquiryThing.ThingInfo;\r",
									"        console.log('thingInfo',thingInfo);\r",
									"\r",
									"        for(let i=0;i<thingInfo.length;i++){\r",
									"            pm.test('Verify DB Check Data : Charging HTTP(eSim) Report :{ \"'+  pm.environment.get(\"SensorKey_AsgardHTTP\") + '\" : \"'+ pm.environment.get(\"random_Sensor_AsgardHTTP\") +'\" }' , function () {\r",
									"                console.log(\"======== Verify DB Check Data ( Expected = Actual) [Charging HTTP(eSim) Report] ==================\");\r",
									"                console.log(\"ThingInfo[\"+ i +\"]StateInfo.Report.\" + pm.environment.get(\"SensorKey_AsgardHTTP\") + \" : \" + thingInfo[i].StateInfo.Report[pm.environment.get(\"SensorKey_AsgardHTTP\")] + \" = \" + JSON.stringify(pm.environment.get(\"random_Sensor_AsgardHTTP\")));\r",
									"\r",
									"                pm.expect(thingInfo[i].StateInfo.Report).to.have.property(pm.environment.get(\"SensorKey_AsgardHTTP\"), JSON.stringify(pm.environment.get(\"random_Sensor_AsgardHTTP\")));\r",
									"            });\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"setTimeout(function(){SearchLogFindTid();}, 9000); \r",
									"setTimeout(function(){CheckLog();}, 20000); \r",
									"\r",
									"setTimeout(function(){InquiryThing();}, 30000); \r",
									"// setTimeout(function(){RemoveThingStateInfo();}, 25000); \r",
									"// setTimeout(function(){RemoveThing();}, 30000); \r",
									"// setTimeout(function(){RemoveAccount();}, 35000); \r",
									"// setTimeout(function(){RemovePartner();}, 40000); \r",
									"\r",
									"setTimeout(function(){\r",
									"pm.environment.unset(\"current_timestamp\");\r",
									"pm.environment.unset(\"AccessToken\");\r",
									"pm.environment.unset(\"random_number\");\r",
									"pm.environment.unset(\"PartnerName\");\r",
									"pm.environment.unset(\"MerchantContact\");\r",
									"pm.environment.unset(\"CPID\");\r",
									"pm.environment.unset(\"GetResponse_PartnerId\");\r",
									"pm.environment.unset(\"AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountId\");\r",
									"pm.environment.unset(\"random_IM\");\r",
									"pm.environment.unset(\"random_ICCID\");\r",
									"pm.environment.unset(\"ThingName\");\r",
									"pm.environment.unset(\"GetResponse_ThingID\");\r",
									"pm.environment.unset(\"GetResponse_IMSI\");\r",
									"pm.environment.unset(\"encodedKeys_Authorization_Register\");\r",
									"pm.environment.unset(\"encodedKeys_Authorization_Report\");\r",
									"pm.environment.unset(\"random_Sensor\");\r",
									"pm.environment.unset(\"GetResponse_ThingToken\");\r",
									"pm.environment.unset(\"tid\");\r",
									"pm.environment.unset(\"sessionId\");\r",
									"pm.environment.unset(\"SensorKey_AsgardHTTP\");\r",
									"pm.environment.unset(\"random_Sensor_AsgardHTTP\");\r",
									"pm.environment.unset(\"timestamp\");\r",
									"}, 35000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var Username = pm.environment.get(\"Username\");\r",
									"var Password = pm.environment.get(\"Password\");\r",
									"\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"var httpapis = pm.environment.get(\"httpapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"pm.environment.set(\"SensorKey_AsgardHTTP\",fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP)\r",
									"\r",
									"// Timestamp 2020-12-31T03:03:18+07:00\r",
									"var timestamp = fieldDataValue.AsgardHTTP.Value_AsgardHTTP_Report_Timestamp;\r",
									"// console.log('currentTmestamp',currentTmestamp);\r",
									"pm.environment.set(\"timestamp\", timestamp);\r",
									"\r",
									"//format YYYYMMDDHHMMSSS\r",
									"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
									"// console.log('currentTmestamp',currentTmestamp);\r",
									"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var Basic = pm.environment.get(\"Basic\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- statusCodeList --------------//\r",
									"//set variable to statusCodeList JSON.parse\r",
									"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
									"//set global variable to statusCode 200\r",
									"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
									"//set global variable to statusCode 201\r",
									"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultCodeList --------------//\r",
									"//set variable to resultCodeList JSON.parse\r",
									"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
									"//set global variable to resultCode \"20000\"\r",
									"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
									"//set global variable to resultCode \"20100\"\r",
									"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionSuccessList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
									"//set global variable to resultDescription \"SignInProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
									"//set global variable to resultDescription \"ValidateTokenProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionValidateToken\", resultDescriptionSuccessList.resultDescriptionValidateToken);\r",
									"//set global variable to resultDescription \"CreateThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThing\", resultDescriptionSuccessList.resultDescriptionCreateThing);\r",
									"//set global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThingStateInfo\", resultDescriptionSuccessList.resultDescriptionCreateThingStateInfo);\r",
									"//set global variable to resultDescription \"Register is Success\"\r",
									"pm.globals.set(\"resultDescriptionRegisterIsSuccess\", resultDescriptionSuccessList.resultDescriptionRegisterIsSuccess);\r",
									"//set global variable to resultDescription \"ReportProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionReportProcessIsSuccess\", resultDescriptionSuccessList.resultDescriptionReportProcessIsSuccess);\r",
									"//set global variable to resultDescription \"The requested operation was successfully.\"\r",
									"pm.globals.set(\"resultDescriptionTheRequestedOperationWasSuccessfully\", resultDescriptionSuccessList.resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"//set global variable to resultDescription \"InquiryThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionInquiryThing\", resultDescriptionSuccessList.resultDescriptionInquiryThing);\r",
									"//set global variable to resultDescription \"InquiryAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionInquiryAccount\", resultDescriptionSuccessList.resultDescriptionInquiryAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- HeaderList --------------//\r",
									"//set variable to HeaderList JSON.parse\r",
									"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
									"//---------------- set globals Other --------------//\r",
									"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
									"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
									"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
									"//set global variable to kbn-versio \"7.5.1\"\r",
									"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Signin_ --------------//\r",
									"//set global variable to x_ais_OrderRef \"Signin_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
									"//set global variable to x_ais_OrderRef \"ValidateToken\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ValidateToken\", HeaderList.Signin.x_ais_OrderRef_ValidateToken);\r",
									"//set global variable to x_ais_OrderDesc \"ValidateToken\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_ValidateToken\", HeaderList.Signin.x_ais_OrderDesc_ValidateToken);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Account --------------//\r",
									"//set global variable to x_ais_OrderRef \"InquiryAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_InquiryAccount\", HeaderList.Account.x_ais_OrderRef_InquiryAccount);\r",
									"//set global variable to x_ais_OrderDesc \"InquiryAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_InquiryAccount\", HeaderList.Account.x_ais_OrderDesc_InquiryAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Thing --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThing\", HeaderList.Thing.x_ais_OrderRef_CreateThing);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThing\", HeaderList.Thing.x_ais_OrderDesc_CreateThing);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThing\", HeaderList.Thing.x_ais_OrderRef_RemoveThing);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThing\", HeaderList.Thing.x_ais_OrderDesc_RemoveThing);\r",
									"//set global variable to x_ais_OrderRef \"InquiryThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_InquiryThing\", HeaderList.Thing.x_ais_OrderRef_InquiryThing);\r",
									"//set global variable to x_ais_OrderDesc \"InquiryThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_InquiryThing\", HeaderList.Thing.x_ais_OrderDesc_InquiryThing);\r",
									"//set global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_RemoveThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_RemoveThingStateInfo);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals AsgardHTTP --------------//\r",
									"//set global variable to x_ais_OrderRef \"RegisHTTP_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RegisHTTP\", HeaderList.AsgardHTTP.x_ais_OrderRef_RegisHTTP);\r",
									"//set global variable to x_ais_OrderDesc \"Register Thing in MG\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RegisHTTP\", HeaderList.AsgardHTTP.x_ais_OrderDesc_RegisHTTP);\r",
									"//set global variable to x_ais_OrderRef \"ReportHTTP_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ReportHTTP\", HeaderList.AsgardHTTP.x_ais_OrderRef_ReportHTTP);\r",
									"//set global variable to x_ais_OrderDesc \"Report Data to MG\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_ReportHTTP\", HeaderList.AsgardHTTP.x_ais_OrderDesc_ReportHTTP);\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"SignInProcess is Success\"\r",
									"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
									"//get global variable to resultDescription \"ValidateTokenProcess is Success\"\r",
									"var resultDescriptionValidateToken = pm.globals.get(\"resultDescriptionValidateToken\");\r",
									"//get global variable to resultDescription \"CreateThing is Success\"\r",
									"var resultDescriptionCreateThing = pm.globals.get(\"resultDescriptionCreateThing\");\r",
									"//get global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"var resultDescriptionCreateThingStateInfo = pm.globals.get(\"resultDescriptionCreateThingStateInfo\");\r",
									"//get global variable to resultDescription \"The requested operation was successfully.\"\r",
									"var resultDescriptionTheRequestedOperationWasSuccessfully = pm.globals.get(\"resultDescriptionTheRequestedOperationWasSuccessfully\");\r",
									"//get global variable to resultDescription \"InquiryAccount is Success\"\r",
									"var resultDescriptionInquiryAccount = pm.globals.get(\"resultDescriptionInquiryAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- urlRouteList --------------//\r",
									"//set variable to urlRouteList JSON.parse\r",
									"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
									"//---------------- set url Create --------------//\r",
									"//set global variable to url \"/api/v1/auth/signin\"\r",
									"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
									"//set global variable to url \"/api/v1/auth/ValidateToken\"\r",
									"pm.globals.set(\"urlValidateToken\", urlRouteList.Signin.urlValidateToken);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"pm.globals.set(\"urlThingCreateThing\", urlRouteList.Thing.urlThingCreateThing);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"pm.globals.set(\"urlThingCreateThingStateInfo\", urlRouteList.Thing.urlThingCreateThingStateInfo);\r",
									"//set global variable to url \"/api/register/sim/v1\"\r",
									"pm.globals.set(\"urlAsgardHTTPeSimRegister\", urlRouteList.AsgardHTTPeSim.urlAsgardHTTPeSimRegister);\r",
									"//set global variable to url \"/api/report/sim/v1\"\r",
									"pm.globals.set(\"urlAsgardHTTPeSimReport\", urlRouteList.AsgardHTTPeSim.urlAsgardHTTPeSimReport);\r",
									"//set global variable to url \"/api/v1/Account/InquiryAccount\"\r",
									"pm.globals.set(\"urlAccountInquiryAccount\", urlRouteList.Account.urlAccountInquiryAccount);\r",
									"//---------------- get url Create --------------//\r",
									"//get global variable to url \"/api/v1/auth/signin\"\r",
									"var urlSignin = pm.globals.get(\"urlSignin\");\r",
									"//get global variable to url \"/api/v1/auth/ValidateToken\"\r",
									"var urlValidateToken = pm.globals.get(\"urlValidateToken\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"var urlThingCreateThing = pm.globals.get(\"urlThingCreateThing\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"var urlThingCreateThingStateInfo = pm.globals.get(\"urlThingCreateThingStateInfo\");\r",
									"//get global variable to url \"/api/register/sim/v1\"\r",
									"var urlAsgardHTTPeSimRegister = pm.globals.get(\"urlAsgardHTTPeSimRegister\");\r",
									"//get global variable to url \"/api/report/sim/v1\"\r",
									"var urlAsgardHTTPeSimReport = pm.globals.get(\"urlAsgardHTTPeSimReport\");\r",
									"//---------------- set url Inquiry --------------//\r",
									"//get global variable to url \"/api/v1/Account/InquiryAccount\"\r",
									"var urlAccountInquiryAccount = pm.globals.get(\"urlAccountInquiryAccount\");\r",
									"//set global variable to url \"/api/v1/Thing/InquiryThing\"\r",
									"pm.globals.set(\"urlThingInquiryThing\", urlRouteList.Thing.urlThingInquiryThing);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Signin_ --------------//\r",
									"//get global variable to x_ais_OrderRef \"Signin_\"\r",
									"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
									"//get global variable to x_ais_OrderRef \"ValidateToken_\"\r",
									"var x_ais_OrderRef_ValidateToken = pm.globals.get(\"x_ais_OrderRef_ValidateToken\");\r",
									"//get global variable to x_ais_OrderDesc \"ValidateToken\"\r",
									"var x_ais_OrderDesc_ValidateToken = pm.globals.get(\"x_ais_OrderDesc_ValidateToken\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"InquiryAccount_\"\r",
									"var x_ais_OrderRef_InquiryAccount = pm.globals.get(\"x_ais_OrderRef_InquiryAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"InquiryAccount\"\r",
									"var x_ais_OrderDesc_InquiryAccount = pm.globals.get(\"x_ais_OrderDesc_InquiryAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"var x_ais_OrderRef_CreateThing = pm.globals.get(\"x_ais_OrderRef_CreateThing\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"var x_ais_OrderDesc_CreateThing = pm.globals.get(\"x_ais_OrderDesc_CreateThing\");\r",
									"//get global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"var x_ais_OrderRef_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderRef_CreateThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"var x_ais_OrderDesc_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_CreateThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals AsgardHTTP --------------//\r",
									"//get global variable to x_ais_OrderRef \"RegisHTTP_\"\r",
									"var x_ais_OrderRef_RegisHTTP = pm.globals.get(\"x_ais_OrderRef_RegisHTTP\");\r",
									"//get global variable to x_ais_OrderDesc \"Register Thing in MG\"\r",
									"var x_ais_OrderDesc_RegisHTTP = pm.globals.get(\"x_ais_OrderDesc_RegisHTTP\");\r",
									"//------------------------------------------------------------//\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// Signin get token\r",
									"Signin = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSignin = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_Signin + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_UserAuthentication,\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestSignin = {\r",
									"            mode: 'raw',\r",
									"            raw:\r",
									"                JSON.stringify({\r",
									"                    username: Username,\r",
									"                    password: Password\r",
									"                })\r",
									"        };\r",
									"\r",
									"        let optionsSignin = {\r",
									"            url: url + provisioningapis + urlSignin,\r",
									"            method: 'POST',\r",
									"            header: headersOptSignin,\r",
									"            body: httpRequestSignin\r",
									"        };\r",
									"        // console.log('request Signin');\r",
									"        let response = await reqPromise(optionsSignin);\r",
									"        let jsonDataSignin = await response.json();\r",
									"\r",
									"        // setAccessToken\r",
									"        await pm.environment.set(\"AccessToken\", jsonDataSignin.AccessToken);\r",
									"\r",
									"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('Signin : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // SignInProcess is Success\r",
									"        pm.test('Signin : OperationStatus Description is ' + '\"' + resultDescriptionSuccessSignIn + '\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
									"        });\r",
									"\r",
									"        //set random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //set PartnerName\r",
									"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
									"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
									"        //set MerchantContact\r",
									"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
									"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
									"        // set CPID\r",
									"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
									"        pm.environment.set(\"CPID\", CPIDValue)\r",
									"\r",
									"        //Accountname\r",
									"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
									"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// ValidateToken\r",
									" ValidateToken = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptValidateToken = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_ValidateToken + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_ValidateToken,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestValidateToken = {\r",
									"            mode: 'raw',\r",
									"            raw: \r",
									"            JSON.stringify({\r",
									"                \"AccessToken\": pm.environment.get(\"AccessToken\")\r",
									"            })\r",
									"        };  \r",
									"        \r",
									"        let optionsValidateToken = {\r",
									"            url: url + provisioningapis + urlValidateToken,\r",
									"            method: 'POST',\r",
									"            header: headersOptValidateToken,\r",
									"            body: httpRequestValidateToken\r",
									"        };\r",
									"        // console.log('request ValidateToken');\r",
									"        let response = await reqPromise(optionsValidateToken);\r",
									"        let jsonDataValidateToken = await response.json();\r",
									"        let operationStatusValidateToken = await jsonDataValidateToken.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"ValidateToken : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('ValidateToken : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusValidateToken).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // ValidateTokenProcess is Success\r",
									"        pm.test('ValidateToken : OperationStatus Description is '+'\"'+ resultDescriptionValidateToken+'\"', function () {\r",
									"            pm.expect(operationStatusValidateToken).to.have.property('Description', resultDescriptionValidateToken);\r",
									"        });\r",
									" \r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// InquiryAccount\r",
									"InquiryAccount = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptInquiryAccount = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_InquiryAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_InquiryAccount,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestInquiryAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"AccountName\": \"9400631842\"\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsInquiryAccount = {\r",
									"            url: url + provisioningapis + urlAccountInquiryAccount,\r",
									"            method: 'POST',\r",
									"            header: headersOptInquiryAccount,\r",
									"            body: httpRequestInquiryAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request InquiryAccount');\r",
									"        let response = await reqPromise(optionsInquiryAccount);\r",
									"        let jsonDataInquiryAccount = await response.json();\r",
									"        // console.log('jsonDataInquiryAccount',jsonDataInquiryAccount)\r",
									"\r",
									"        let operationStatusInquiryAccount = await jsonDataInquiryAccount.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"InquiryAccount : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('InquiryAccount : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusInquiryAccount).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //InquiryAccount is Success\r",
									"        pm.test('CreateAccount : OperationStatus Description is ' + '\"' + resultDescriptionInquiryAccount + '\"', function () {\r",
									"            pm.expect(operationStatusInquiryAccount).to.have.property('Description', resultDescriptionInquiryAccount);\r",
									"        });\r",
									"        \r",
									"        // GetResponse_AccountName\r",
									"        pm.environment.set(\"GetResponse_AccountName\", jsonDataInquiryAccount.PartnerInfo[0].AccountInfo[0].AccountName)\r",
									"        // GetResponse_AccountId\r",
									"        pm.environment.set(\"GetResponse_AccountId\", jsonDataInquiryAccount.PartnerInfo[0].AccountInfo[0].AccountId)\r",
									"        // random_IM\r",
									"        pm.environment.set(\"random_IM\", _.random(10000000, 99999999) + \" \" + _.random(1000000, 9999999))\r",
									"        // random_ICCID\r",
									"        pm.environment.set(\"random_ICCID\", _.random(1000000, 9999999) + \" \" + _.random(100000, 999999))\r",
									"        // random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //ThingName\r",
									"        let thingNameValue = fieldDataValue.Thing.ThingNameValue; // \"Sensor_TestThingName\"\r",
									"        pm.environment.set(\"ThingName\", thingNameValue + pm.environment.get(\"random_number\"))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThing\r",
									"CreateThing = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThing = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateThing + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateThing,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey': pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreateThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingName\": pm.environment.get(\"ThingName\"),\r",
									"                \"IMEI\": pm.environment.get(\"random_IM\"),\r",
									"                \"IMSI\": pm.environment.get(\"random_IM\"),\r",
									"                \"ICCID\": pm.environment.get(\"random_ICCID\"),\r",
									"                \"RouteUrl\": fieldDataValue.Thing.RouteUrlValue , //[\"http://10.12.3.4:2019/api/information/AddInformation\"]\r",
									"                \"RouteInfo\": {\r",
									"                    \"MIMO_ID\": fieldDataValue.Thing.RouteInfoMIMOIDValue , //\"606edada\"\r",
									"                    \"MIMO_SerialNo\": fieldDataValue.Thing.RouteInfoMIMOSerialNoValue //5466758878\r",
									"                },\r",
									"                \"RouteFlag\": {\r",
									"                    \"ThingName\": fieldDataValue.Thing.RouteFlagThingNameValue , //true\r",
									"                    \"ThingToken\": fieldDataValue.Thing.RouteFlagThingTokenValue, //true\r",
									"                    \"IMEI\": fieldDataValue.Thing.RouteFlagIMEIValue, //true\r",
									"                    \"ICCID\": fieldDataValue.Thing.RouteFlagICCIDValue, //true\r",
									"                    \"RouteInfo\": fieldDataValue.Thing.RouteFlagRouteInfoValue //true\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateThing = {\r",
									"            url: url + provisioningapis + urlThingCreateThing,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThing,\r",
									"            body: httpRequestCreateThing\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThing');\r",
									"        let response = await reqPromise(optionsCreateThing);\r",
									"        let jsonDataCreateThing = await response.json();\r",
									"        // console.log('jsonDataCreateThing',jsonDataCreateThing)\r",
									"\r",
									"        let operationStatusCreateThing = await jsonDataCreateThing.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateThing : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateThing : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateThing is Success\r",
									"        pm.test('CreateThing : OperationStatus Description is ' + '\"' + resultDescriptionCreateThing + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Description', resultDescriptionCreateThing);\r",
									"        });\r",
									"\r",
									"        pm.environment.set(\"GetResponse_ThingID\", jsonDataCreateThing.ThingInfo.ThingId)\r",
									"        pm.environment.set(\"GetResponse_IMSI\", jsonDataCreateThing.ThingInfo.IMSI)\r",
									"        \r",
									"        let keys = pm.environment.get(\"GetResponse_IMSI\") + \":\" + pm.environment.get(\"IpAddress\");\r",
									"        // console.log(\"keys\", keys);\r",
									"        let encodedKeys = CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(keys));\r",
									"        pm.environment.set(\"encodedKeys_Authorization_Register\", encodedKeys);\r",
									"\r",
									"        //Get Random Sensor \r",
									"        pm.environment.set(\"random_Sensor\", _.random(100, 999))\r",
									"\r",
									"        //Get Random Sensor AsgardHTTP\r",
									"        pm.environment.set(\"random_Sensor_AsgardHTTP\", _.random(100, 999))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThingStateInfo\r",
									"CreateThingStateInfo = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThingStateInfo = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateThingStateInfo,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey': pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        // {\"AA\" : pm.environment.get(\"random_Sensor\")}\r",
									"        let sensorValue = {};\r",
									"        sensorValue[fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP] = pm.environment.get(\"random_Sensor\");\r",
									"        // console.log('sensorValue',sensorValue);\r",
									"        \r",
									"        let httpRequestCreateThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": [\r",
									"                    pm.environment.get(\"GetResponse_ThingID\")\r",
									"                ],\r",
									"                \"Type\": fieldDataValue.CreateThingStateInfo.Type_Report,\r",
									"                \"Sensor\": sensorValue\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingCreateThingStateInfo,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThingStateInfo,\r",
									"            body: httpRequestCreateThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThingStateInfo');\r",
									"        let response = await reqPromise(optionsCreateThingStateInfo);\r",
									"        let jsonDataCreateThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataCreateThingStateInfo',jsonDataCreateThingStateInfo)\r",
									"\r",
									"        let operationStatusCreateThingStateInfo = await jsonDataCreateThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"CreateThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //CreateThingStateInfo is Success\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Description is ' + '\"' + resultDescriptionCreateThingStateInfo + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Description', resultDescriptionCreateThingStateInfo);\r",
									"        });\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// AsgardHTTPeSimRegister\r",
									"AsgardHTTPeSimRegister = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptAsgardHTTPeSimRegister = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_RegisHTTP + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_RegisHTTP,\r",
									"            'Authorization': Basic + ' ' + pm.environment.get(\"encodedKeys_Authorization_Register\")\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestAsgardHTTPeSimRegister = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({})\r",
									"        };\r",
									"\r",
									"        let optionsAsgardHTTPeSimRegister = {\r",
									"            url: url + httpapis + urlAsgardHTTPeSimRegister,\r",
									"            method: 'POST',\r",
									"            header: headersOptAsgardHTTPeSimRegister,\r",
									"            body: httpRequestAsgardHTTPeSimRegister\r",
									"        };\r",
									"\r",
									"        // console.log('request AsgardHTTPEsimRegister');\r",
									"        let response = await reqPromise(optionsAsgardHTTPeSimRegister);\r",
									"        let jsonDataAsgardHTTPeSimRegister = await response.json();\r",
									"        // console.log('jsonDataCreateThingStateInfo',jsonDataAsgardHTTPeSimRegister)\r",
									"        let operationStatusAsgardHTTPeSimRegister = await jsonDataAsgardHTTPeSimRegister.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"Asgard HTTP(eSim) Register : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('Asgard HTTP(eSim) Register : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusAsgardHTTPeSimRegister).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"\r",
									"        // The requested operation was successfully.\r",
									"        pm.test('Asgard HTTP(eSim) Register : OperationStatus DeveloperMessage is ' + '\"' + resultDescriptionTheRequestedOperationWasSuccessfully + '\"', function () {\r",
									"            pm.expect(operationStatusAsgardHTTPeSimRegister).to.have.property('DeveloperMessage', resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"        });\r",
									"\r",
									"        await pm.environment.set(\"GetResponse_ThingToken\", jsonDataAsgardHTTPeSimRegister.ThingToken)\r",
									"        let keys2 = await pm.environment.get(\"GetResponse_ThingToken\") + \":\" + pm.environment.get(\"IpAddress\");        \r",
									"        let encodedKeys2 = await CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(keys2));\r",
									"        pm.environment.set(\"encodedKeys_Authorization_Report\", encodedKeys2)\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"Signin();\r",
									"setTimeout(async function(){await ValidateToken();}, 2000);\r",
									"setTimeout(async function(){await InquiryAccount();}, 3000); \r",
									"setTimeout(async function(){await CreateThing();}, 6000); \r",
									"setTimeout(async function(){await CreateThingStateInfo();}, 7000); \r",
									"setTimeout(async function () { await AsgardHTTPeSimRegister(); }, 8000); \r",
									"setTimeout(async function () { }, 8500); //for wait value encodedKeys_Authorization_Report"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-ais-UserName",
								"type": "text",
								"value": "{{x_ais_UserName_AisPartner}}"
							},
							{
								"key": "x-ais-OrderRef",
								"value": "{{x_ais_OrderRef_ReportHTTP}}{{current_timestamp}}"
							},
							{
								"key": "x-ais-OrderDesc",
								"type": "text",
								"value": "{{x_ais_OrderDesc_ReportHTTP}}"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{Basic}} {{encodedKeys_Authorization_Report}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Payload\": {\r\n        \"{{SensorKey_AsgardHTTP}}\" : \"{{random_Sensor_AsgardHTTP}}\"\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{url}}{{httpapis}}/api/report/sim/v1",
							"host": [
								"{{url}}{{httpapis}}"
							],
							"path": [
								"api",
								"report",
								"sim",
								"v1"
							]
						},
						"description": "Type:Desire"
					},
					"response": []
				},
				{
					"name": "ChargingHTTPeSim_Report_TST_F2_1_1_002_Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"var controlapis = pm.environment.get(\"controlapis\");\r",
									"var httpapis = pm.environment.get(\"httpapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var Basic = pm.environment.get(\"Basic\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to xAisOrderRef \"RemoveThing_\"\r",
									"var x_ais_OrderRef_RemoveThing = pm.globals.get(\"x_ais_OrderRef_RemoveThing\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"var x_ais_OrderDesc_RemoveThing = pm.globals.get(\"x_ais_OrderDesc_RemoveThing\");\r",
									"//get global variable to xAisOrderRef \"InquiryThing_\"\r",
									"var x_ais_OrderRef_InquiryThing = pm.globals.get(\"x_ais_OrderRef_InquiryThing\");\r",
									"//get global variable to x_ais_OrderDesc \"InquiryThing\"\r",
									"var x_ais_OrderDesc_InquiryThing = pm.globals.get(\"x_ais_OrderDesc_InquiryThing\");\r",
									"//get global variable to xAisOrderRef \"RemoveThingStateInfo_\"\r",
									"var x_ais_OrderRef_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderRef_RemoveThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThingStateInfo\"\r",
									"var x_ais_OrderDesc_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_RemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals AsgardHTTP --------------//\r",
									"//get global variable to x_ais_OrderRef \"ReportHTTP_\"\r",
									"var x_ais_OrderRef_ReportHTTP = pm.globals.get(\"x_ais_OrderRef_ReportHTTP\");\r",
									"//get global variable to x_ais_OrderDesc \"Report Data to MG\"\r",
									"var x_ais_OrderDesc_ReportHTTP = pm.globals.get(\"x_ais_OrderDesc_ReportHTTP\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get url Remove --------------//\r",
									"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
									"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"var urlThingRemoveThing = pm.globals.get(\"urlThingRemoveThing\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"var urlThingRemoveThingStateInfo = pm.globals.get(\"urlThingRemoveThingStateInfo\");\r",
									"//---------------- get url Inquiry --------------//\r",
									"//get global variable to url \"/api/v1/Thing/InquiryThingr\"\r",
									"var urlThingInquiryThing = pm.globals.get(\"urlThingInquiryThing\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"RemovePartner is Success\"\r",
									"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
									"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
									"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
									"//get global variable to resultDescription \"RemoveThing is Success\"\r",
									"var resultDescriptionRemoveThing = pm.globals.get(\"resultDescriptionRemoveThing\");\r",
									"//get global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"var resultDescriptionRemoveThingStateInfo = pm.globals.get(\"resultDescriptionRemoveThingStateInfo\");\r",
									"//get global variable to resultDescription \"InquiryThing is Success\"\r",
									"var resultDescriptionInquiryThing = pm.globals.get(\"resultDescriptionInquiryThing\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to resultDescription \"ReportProcess is Success\"\r",
									"// var resultDescriptionReportProcessIsSuccess = pm.globals.get(\"resultDescriptionReportProcessIsSuccess\");\r",
									"//get global variable to resultDescription \"The requested operation was successfully.\"\r",
									"var resultDescriptionTheRequestedOperationWasSuccessfully = pm.globals.get(\"resultDescriptionTheRequestedOperationWasSuccessfully\");\r",
									"//------------------------------------------------------------//\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Asgard HTTP(eSim) Report : Status code is \" + statusCodeSuccess, function () {\r",
									"    pm.response.to.have.status(statusCodeSuccess);\r",
									"});\r",
									"\r",
									"pm.test('Asgard HTTP(eSim) Report : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeSuccess);\r",
									"});\r",
									"\r",
									"// pm.test('Asgard HTTP(eSim) Report : OperationStatus Description is '+'\"'+ resultDescriptionReportProcessIsSuccess+'\"', function () {\r",
									"//     pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionReportProcessIsSuccess);\r",
									"// });\r",
									"\r",
									"pm.test('Asgard HTTP(eSim) Report : OperationStatus DeveloperMessage is '+'\"'+ resultDescriptionTheRequestedOperationWasSuccessfully+'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"});\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"//---------------- LogDefaultValue --------------//\r",
									"//set variable to LogDefaultValue JSON.parse\r",
									"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
									"// console.log('LogDefaultValue',LogDefaultValue);\r",
									"//---------------- set globals Other --------------//\r",
									"\r",
									"var SearchLog = LogDefaultValue.SearchLog;\r",
									"// console.log('SearchLog',SearchLog);\r",
									"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
									"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
									"var kbn_version = SearchLog.header.kbn_version;\r",
									"var authorization = SearchLog.header.Authorization;\r",
									"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
									"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
									"var namespace = LogDefaultValue.Other.namespace;\r",
									"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
									"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
									"var header_x_ais_username = LogDefaultValue.Other.header_x_ais_username;\r",
									"var methodPost = LogDefaultValue.Other.methodPost;\r",
									"\r",
									"// Detail\r",
									"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
									"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
									"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
									"\r",
									"// Summary\r",
									"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
									"var identitySummary = \"\";\r",
									"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
									"\r",
									"// Asgard.Http.APIs\r",
									"var applicationName = LogDefaultValue.AsgardHTTP.applicationName;\r",
									"var cmdName = LogDefaultValue.AsgardHTTP.cmdNameReport;\r",
									"var endPointNameRabbitMQ = LogDefaultValue.AsgardHTTP.endPointNameRabbitMQ;\r",
									"var containerId = LogDefaultValue.AsgardHTTP.containerId;\r",
									"var requestObjectUrlStaging = LogDefaultValue.AsgardHTTP.requestObjectUrlReportMgStaging;\r",
									"var urlReport  = LogDefaultValue.AsgardHTTP.urlReport;\r",
									"\r",
									"// Insight.Charging.APIs\r",
									"var applicationNameCharging = LogDefaultValue.Charging.applicationName;\r",
									"var cmdNameCharging = LogDefaultValue.Charging.cmdName;\r",
									"var endPointNameRocsService = LogDefaultValue.Charging.endPointName;\r",
									"var containerIdCharging = LogDefaultValue.Charging.containerId;\r",
									"var urlCharging  = LogDefaultValue.Charging.urlCharging;\r",
									"\r",
									"// Check CDR (Summary Log) and EDR (Detail Log)\r",
									"SearchLogFindTid = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSearchLogFindTid = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = x_ais_OrderRef_ReportHTTP + current_timestamp; \r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestSearchLogFindTid = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"phrase\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"\r",
									"        let optionsSearchLogFindTid = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptSearchLogFindTid,\r",
									"            body: httpRequestSearchLogFindTid\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsSearchLogFindTid);\r",
									"        let jsonDataSearchLogFindTid = await response.json();\r",
									"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
									"        // console.log('hits',hits)\r",
									"  \r",
									"        // find tid\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            // let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"        \r",
									"            // console.log('logType',logType)\r",
									"             console.log('applicationNameValue',applicationNameValue)\r",
									"             console.log('applicationName',applicationName)\r",
									"            if(applicationNameValue == applicationName){\r",
									"                let tid = hits[i]._source.cauldron.tid;\r",
									"                pm.environment.set(\"tid\", tid);\r",
									"                let sessionId = hits[i]._source.cauldron.sessionId;\r",
									"                pm.environment.set(\"sessionId\", sessionId);\r",
									"                break;\r",
									"           }\r",
									"        }\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"CheckLog = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCheckLog = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = pm.environment.get(\"sessionId\");\r",
									"\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"         console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestCheckLog = {\r",
									"            mode: 'raw',\r",
									"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"phrase\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"        let optionsCheckLog = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptCheckLog,\r",
									"            body: httpRequestCheckLog\r",
									"        }; \r",
									"        let response = await reqPromise(optionsCheckLog);\r",
									"        let jsonDataCheckLog = await response.json();\r",
									"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
									"        \r",
									"        // //200\r",
									"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });     \r",
									"        \r",
									"        let hits = jsonDataCheckLog.hits.hits\r",
									"         console.log('hits',hits)\r",
									"  \r",
									"        // find logType\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            //  let logType = hits[i]._source.cauldron.logType\r",
									"            let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"           \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            \r",
									"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
									"            // console.log('resultDataLog',resultDataLog)\r",
									"\r",
									"            let tidControl = x_ais_OrderRef_ReportHTTP  + current_timestamp;\r",
									"            // console.log(tidControl);\r",
									"            if(applicationNameValue == applicationName){\r",
									"                 \r",
									"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and Asgard.Http.APIs\r",
									"                    pm.test(\"Check Summary Log : Asgard_HTTP(eSim) Report\" , function () {\r",
									"                        console.log(\"======== Check Summary Log ( Expected = Actual) [Asgard_HTTP(eSim) Report] ==================\");\r",
									"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
									"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
									"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeSuccess);\r",
									"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
									"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
									"                        // console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
									"\r",
									"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
									"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
									"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeSuccess); \r",
									"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionTheRequestedOperationWasSuccessfully); \r",
									"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
									"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"\r",
									"                        let thingId = pm.environment.get(\"GetResponse_ThingID\");\r",
									"                        let imei = (pm.environment.get(\"random_IM\")).replace(\" \", \"\");\r",
									"                        let imsi = (pm.environment.get(\"GetResponse_IMSI\")).replace(\" \", \"\");\r",
									"                        let customUrl= urlCheckLog + requestObjectUrlStaging;\r",
									"\r",
									"                        // check identity\r",
									"                        // \"identity\":\"{\\\"Imei\\\":\\\"496151103122639\\\",\\\"ThingId\\\":\\\"6013965896d0ed0001f5a46d\\\",\\\"Imsi\\\":\\\"496151103122639\\\"}\"\r",
									"                        let dataSummaryIdentity = JSON.parse(resultDataLog.identity);\r",
									"\r",
									"                        console.log(\"identity.ThingId : \" + dataSummaryIdentity.ThingId + \" = \" + thingId);\r",
									"                        console.log(\"identity.Imei : \" + dataSummaryIdentity.Imei + \" = \" + imei);\r",
									"                        console.log(\"identity.Imsi : \" + dataSummaryIdentity.Imsi + \" = \" + imsi);\r",
									"                        \r",
									"                        pm.expect(dataSummaryIdentity.ThingId).to.eql(thingId); \r",
									"                        pm.expect(dataSummaryIdentity.Imei).to.eql(imei); \r",
									"                        pm.expect(dataSummaryIdentity.Imsi).to.eql(imsi); \r",
									"\r",
									"                        // check custom\r",
									"                        // \"custom\":{\"Imsi\":[\"496151103122639\"],\"url\":\"mg-staging.sandais.com/api/report/sim/v1\",\"Imei\":[\"496151103122639\"],\"ThingID\":[\"6013965896d0ed0001f5a46d\"]}\r",
									"                        \r",
									"                        let customData = resultDataLog.custom.customData\r",
									"\r",
									"                        console.log(\"custom.url : \" + customData.url + \" = \" + customUrl);\r",
									"                        console.log(\"custom.Imei[0] : \" + customData.Imei[0] + \" = \" + imei);\r",
									"                        console.log(\"custom.Imsi[0] : \" + customData.Imsi[0] + \" = \" + imsi);\r",
									"                        console.log(\"custom.ThingID[0] : \" + customData.ThingID[0] + \" = \" + thingId);\r",
									"\r",
									"                        pm.expect(customData.url).to.eql(customUrl); \r",
									"                        pm.expect(customData.Imei[0]).to.eql(imei); \r",
									"                        pm.expect(customData.Imsi[0]).to.eql(imsi); \r",
									"                        pm.expect(customData.ThingID[0]).to.eql(thingId); \r",
									"                    }); \r",
									"                }\r",
									"\r",
									"                if(logType == logTypeDetail && (applicationNameValue == applicationName) ){ //'Detail' and Asgard.Http.APIs\r",
									"\r",
									"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
									"                    // console.log('endPointNameValue ',endPointNameValue)\r",
									"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [Asgard_HTTP(eSim) Report]\", function () {\r",
									"                        console.log(\"======== Check Detail Log ( Expected = Actual) [Asgard_HTTP(eSim) Report] ==================\");\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
									"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
									"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
									"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
									"\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
									"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
									"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
									"\r",
									"                        let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
									"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
									"                        let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
									"                            // console.log('jsonParseResponseObject',jsonParseResponseObject); \r",
									"                        let url = urlReport; \r",
									"                        let x_ais_orderref = x_ais_OrderRef_ReportHTTP + current_timestamp;\r",
									"                        let x_ais_orderdesc = x_ais_OrderDesc_ReportHTTP;\r",
									"                        let x_ais_userName = x_ais_UserName_AisPartner;\r",
									"                        let authorization = Basic + ' ' + pm.environment.get(\"encodedKeys_Authorization_Report\");\r",
									"                        let imei = (pm.environment.get(\"random_IM\")).replace(\" \", \"\");\r",
									"                        let imsi = (pm.environment.get(\"GetResponse_IMSI\")).replace(\" \", \"\");\r",
									"                        let thingId = pm.environment.get(\"GetResponse_ThingID\");\r",
									"                        let customUrl= urlCheckLog + requestObjectUrlStaging;\r",
									"                        let SensorKey = fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP;\r",
									"                        let sensor = pm.environment.get(\"Value_Charging_TST_F2_1_1_002_Sensor\");\r",
									"                        let timestamp = pm.environment.get(\"timestamp\");\r",
									"\r",
									"                        if( endPointNameValue == undefined){\r",
									"                            // check requestObject\r",
									"                            // \"requestObject\":\"{\\\"url\\\":\\\"/api/report/sim/v1\\\",\\\"method\\\":\\\"POST\\\",\\\"headers\\\":{\\\"Cache-Control\\\":\\\"no-cache\\\",\\\"Content-Type\\\":\\\"application/json\\\",\\\"Accept\\\":\\\"*/*\\\",\\\"Accept-Encoding\\\":\\\"gzip,deflate,br\\\",\\\"Authorization\\\":\\\"Basic NDk2MTUxMTAzMTIyNjM5OjEuMi4zLjQ=\\\",\\\"Host\\\":\\\"mg-staging.sandais.com\\\",\\\"User-Agent\\\":\\\"PostmanRuntime/7.26.8\\\",\\\"Content-Length\\\":\\\"2\\\",\\\"x-real-ip\\\":\\\"171.96.174.10\\\",\\\"x-forwarded-for\\\":\\\"171.96.174.10\\\",\\\"x-forwarded-proto\\\":\\\"https\\\",\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"ReportHTTP_202101291701676\\\",\\\"x-ais-orderdesc\\\":\\\"Report Data to MG\\\",\\\"postman-token\\\":\\\"83bc76b4-8538-4a10-94fc-8b9cc1143ec8\\\",\\\"x-request-id\\\":\\\"bbf6c560-8bea-4d53-87d8-28a3f3664d37\\\",\\\"x-b3-traceid\\\":\\\"eb252eaef48d4ec507b32acd0a8dc573\\\",\\\"x-b3-spanid\\\":\\\"07b32acd0a8dc573\\\",\\\"x-b3-sampled\\\":\\\"0\\\",\\\"x-ais-SessionId\\\":\\\"1611896410502\\\",\\\"identity\\\":\\\"{\\\\\\\"Imei\\\\\\\":\\\\\\\"496151103122639\\\\\\\",\\\\\\\"ThingID\\\\\\\":\\\\\\\"6013965896d0ed0001f5a46d\\\\\\\",\\\\\\\"Imsi\\\\\\\":\\\\\\\"496151103122639\\\\\\\"}\\\",\\\"custom\\\":\\\"{\\\\\\\"Imsi\\\\\\\":[\\\\\\\"496151103122639\\\\\\\"],\\\\\\\"url\\\\\\\":\\\\\\\"mg-staging.sandais.com/api/register/sim/v1\\\\\\\",\\\\\\\"Imei\\\\\\\":[\\\\\\\"496151103122639\\\\\\\"],\\\\\\\"ThingID\\\\\\\":[\\\\\\\"6013965896d0ed0001f5a46d\\\\\\\"]}\\\"},\\\"queryString\\\":{},\\\"routeParamteters\\\":{},\\\"body\\\":{\\\"Payload\\\":{\\\"Temp\\\":\\\"686\\\",\\\"Timestamp\\\":\\\"2020-12-31T03:03:18+07:00\\\"}}\"\r",
									"\r",
									"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
									"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
									"                            console.log(\"headers.x_ais_userName : \" + jsonParseRequestObject.headers[header_x_ais_username] + \" = \" + x_ais_userName);\r",
									"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
									"                            console.log(\"headers.Authorization : \" + jsonParseRequestObject.headers.Authorization + \" = \" + authorization);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
									"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_username]).to.eql(x_ais_userName);\r",
									"                            pm.expect(jsonParseRequestObject.headers.Authorization).to.eql(authorization);\r",
									"\r",
									"                            // check requestObject headers.identity\r",
									"                            let jsonParseRequestObjectHeadersIdentity = JSON.parse(jsonParseRequestObject.headers.identity);\r",
									"                            // console.log('jsonParseRequestObjectHeadersIdentity',jsonParseRequestObjectHeadersIdentity);\r",
									"\r",
									"                            console.log(\"headers.identity.Imei : \" + jsonParseRequestObjectHeadersIdentity.Imei + \" = \" + imei);\r",
									"                            console.log(\"headers.identity.Imsi : \" + jsonParseRequestObjectHeadersIdentity.Imsi + \" = \" + imsi);\r",
									"                            console.log(\"headers.identity.ThingId : \" + jsonParseRequestObjectHeadersIdentity.ThingId + \" = \" + thingId);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObjectHeadersIdentity.Imei).to.eql(imei);\r",
									"                            pm.expect(jsonParseRequestObjectHeadersIdentity.Imsi).to.eql(imsi);\r",
									"                            pm.expect(jsonParseRequestObjectHeadersIdentity.ThingId).to.eql(thingId);\r",
									"\r",
									"                            // check requestObject headers.custom\r",
									"                            let jsonParseRequestObjectHeadersCustom = JSON.parse(jsonParseRequestObject.headers.custom);\r",
									"                            // console.log('jsonParseRequestObjectHeadersCustom',jsonParseRequestObjectHeadersCustom);\r",
									"\r",
									"                            console.log(\"headers.custom.url : \" + jsonParseRequestObjectHeadersCustom.url + \" = \" + customUrl);\r",
									"                            console.log(\"headers.custom.Imei[0] : \" + jsonParseRequestObjectHeadersCustom.Imei[0] + \" = \" + imei);\r",
									"                            console.log(\"headers.custom.Imsi[0] : \" + jsonParseRequestObjectHeadersCustom.Imsi[0] + \" = \" + imsi);\r",
									"                            console.log(\"headers.custom.ThingID[0] : \" + jsonParseRequestObjectHeadersCustom.ThingID[0] + \" = \" + thingId);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObjectHeadersCustom.url).to.eql(customUrl);\r",
									"                            pm.expect(jsonParseRequestObjectHeadersCustom.Imei[0]).to.eql(imei);\r",
									"                            pm.expect(jsonParseRequestObjectHeadersCustom.Imsi[0]).to.eql(imsi);\r",
									"                            pm.expect(jsonParseRequestObjectHeadersCustom.ThingID[0]).to.eql(thingId);\r",
									"\r",
									"                            console.log(\"queryString : \" + JSON.stringify(jsonParseRequestObject.queryString) + \" = \" + JSON.stringify({}));\r",
									"                            console.log(\"routeParamteters : \" + JSON.stringify(jsonParseRequestObject.routeParamteters) + \" = \" + JSON.stringify({}));\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.queryString).to.eql({}); \r",
									"                            pm.expect(jsonParseRequestObject.routeParamteters).to.eql({}); \r",
									"\r",
									"                            console.log(\"resquest.body.Payload.\" + SensorKey +\" : \" + jsonParseRequestObject.body.Payload[SensorKey] + \" = \" + sensor.toString());\r",
									"                            pm.expect(jsonParseRequestObject.body.Payload[SensorKey]).to.eql(sensor.toString());\r",
									"                            // pm.expect(jsonParseRequestObject.body.Payload.Timestamp).to.eql(timestamp); \r",
									"                           \r",
									"                            // check responseObject\r",
									"                            // responseObject: \"{\"OperationStatus\":{\"Code\":\"20000\",\"DeveloperMessage\":\"The requested operation was successfully.\"}}\"\r",
									"\r",
									"                            console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeSuccess);\r",
									"                            console.log(\"response.OperationStatus.DeveloperMessage : \" + jsonParseResponseObject.OperationStatus.DeveloperMessage + \" = \" + resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"\r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeSuccess);  \r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheRequestedOperationWasSuccessfully);  \r",
									"                        }\r",
									"               \r",
									"                        if( endPointNameValue == endPointNameRabbitMQ){     //\"endPointName\":\"RabbitMQ\"\r",
									"                            console.log(\"custom1.endPointName : \" + resultDataLog.custom1.endPointName + \" = \" + endPointNameRabbitMQ);\r",
									"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameRabbitMQ); \r",
									"                        \r",
									"                            // check requestObject\r",
									"                            // \"requestObject\":\"{\\\"url\\\":\\\"internalreport.pub.v1.089320c4-3275-4d4d-98a9-1d598a3e70c1\\\",\\\"headers\\\":{\\\"x-ais-orderref\\\":\\\"ReportHTTP_202101291701676\\\",\\\"x-ais-sessionid\\\":\\\"1611916984472\\\",\\\"timestamp_in_ms\\\":\\\"1611916984473\\\"},\\\"body\\\":\\\"{\\\\\\\"AA\\\\\\\":\\\\\\\"686\\\\\\\",\\\\\\\"Timestamp\\\\\\\":\\\\\\\"2020-12-31T03:03:18+07:00\\\\\\\"}\\\"}\"\r",
									"\r",
									"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                            \r",
									"                            let jsonParseRequestObjectBody = JSON.parse(jsonParseRequestObject.body);\r",
									"\r",
									"                            console.log(\"resquest.body.\" + SensorKey +\" : \" + jsonParseRequestObjectBody[SensorKey] + \" = \" + sensor.toString());\r",
									"                            pm.expect(jsonParseRequestObjectBody[SensorKey]).to.eql(sensor.toString());\r",
									"                            \r",
									"                            // check responseObject\r",
									"                            //  \"responseObject\":\"\\\"\\\"\",\r",
									"\r",
									"                            console.log(\"response : \" + JSON.stringify(jsonParseResponseObject) + \" = \" + JSON.stringify(\"\"));\r",
									"                            pm.expect(jsonParseResponseObject).to.eql(\"\");  \r",
									"                        }\r",
									"                    }); \r",
									"                }\r",
									"\r",
									"            }\r",
									"\r",
									"            if(applicationNameValue == applicationNameCharging){\r",
									"                 \r",
									"                if(logType == logTypeSummary && applicationNameValue == applicationNameCharging){ // 'Summary' and Insight.Charging.APIs\r",
									"                    pm.test(\"Check Summary Log : Charging\" , function () {\r",
									"                        console.log(\"======== Check Summary Log ( Expected = Actual) [Charging] ==================\");\r",
									"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
									"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
									"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeSuccess);\r",
									"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
									"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
									"                        // console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
									"\r",
									"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
									"                        pm.expect(resultDataLog.cmdName).to.eql(cmdNameCharging); \r",
									"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeSuccess); \r",
									"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionTheRequestedOperationWasSuccessfully); \r",
									"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
									"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerIdCharging); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationNameCharging); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.identity).to.eql(identitySummary); \r",
									"                        pm.expect(resultDataLog.custom).to.eql(customSummary); \r",
									"                        \r",
									"                    }); \r",
									"                }\r",
									"\r",
									"                if(logType == logTypeDetail && (applicationNameValue == applicationNameCharging) ){ //'Detail' and Insight.Charging.APIs\r",
									"\r",
									"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
									"                    // console.log('endPointNameValue ',endPointNameValue)\r",
									"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [Charging]\", function () {\r",
									"                        console.log(\"======== Check Detail Log ( Expected = Actual) [Charging] ==================\");\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
									"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        if( endPointNameValue == undefined){\r",
									"                            console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        }\r",
									"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
									"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
									"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
									"\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
									"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationNameCharging); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerIdCharging); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                         if( endPointNameValue == undefined){\r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                         }\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
									"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
									"\r",
									"                        let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
									"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
									"                        let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
									"                            // console.log('jsonParseResponseObject',jsonParseResponseObject); \r",
									"                        let url = urlCharging + pm.environment.get(\"GetResponse_ThingID\"); \r",
									"                        let x_ais_orderref = x_ais_OrderRef_ReportHTTP + current_timestamp;\r",
									"                        let thingId = pm.environment.get(\"GetResponse_ThingID\");\r",
									"                        let SensorKey = fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP;\r",
									"                        let sensor = pm.environment.get(\"Value_Charging_TST_F2_1_1_002_Sensor\");\r",
									"                      \r",
									"                        if( endPointNameValue == undefined){\r",
									"                            \r",
									"                            // check requestObject\r",
									"                            // \"requestObject\":\"{\\\"url\\\":\\\"/api/v1/Charging/603605f824ef380001b9f108\\\",\\\"method\\\":\\\"POST\\\",\\\"headers\\\":{\\\"Content-Type\\\":\\\"application/json\\\",\\\"Host\\\":\\\"chargingapis.magellanstaging.svc.cluster.local\\\",\\\"Content-Length\\\":\\\"24\\\",\\\"x-ais-orderref\\\":\\\"ReportHTTP_202102241402448\\\",\\\"x-ais-sessionid\\\":\\\"1614153212381\\\",\\\"x-forwarded-proto\\\":\\\"http\\\",\\\"x-request-id\\\":\\\"a0841c07-c230-4f1c-8b48-71d83243564b\\\",\\\"x-b3-traceid\\\":\\\"d46d3e9a2b05b26895e83d80b50c8737\\\",\\\"x-b3-spanid\\\":\\\"01039a2b17e0a6cc\\\",\\\"x-b3-parentspanid\\\":\\\"95e83d80b50c8737\\\",\\\"x-b3-sampled\\\":\\\"0\\\"},\\\"queryString\\\":{ },\\\"routeParamteters\\\":{\\\"ThingId\\\":\\\"603605f824ef380001b9f108\\\"},\\\"body\\\":{\\\"Payload\\\":{\\\"AA\\\":\\\"903\\\"}}}\"\r",
									"\r",
									"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
									"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
									"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
									"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"\r",
									"                            console.log(\"queryString : \" + JSON.stringify(jsonParseRequestObject.queryString) + \" = \" + JSON.stringify({}));\r",
									"                            console.log(\"routeParamteters.ThingId : \" + JSON.stringify(jsonParseRequestObject.routeParamteters.ThingId) + \" = \" + thingId);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.queryString).to.eql({}); \r",
									"                            pm.expect(jsonParseRequestObject.routeParamteters.ThingId).to.eql(thingId); \r",
									"\r",
									"                            console.log(\"resquest.body.Payload.\" + SensorKey +\" : \" + jsonParseRequestObject.body.Payload[SensorKey] + \" = \" + sensor.toString());\r",
									"                            pm.expect(jsonParseRequestObject.body.Payload[SensorKey]).to.eql(sensor.toString());\r",
									"                           \r",
									"                            // check responseObject\r",
									"                            // responseObject: \"{\"OperationStatus\":{\"Code\":\"20000\",\"DeveloperMessage\":\"The requested operation was successfully.\"}}\"\r",
									"                            // pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeSuccess);  \r",
									"                            // pm.expect(jsonParseResponseObject.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheRequestedOperationWasSuccessfully);  \r",
									"                        }\r",
									"               \r",
									"                        // if( endPointNameValue == endPointNameRocsService){     //\"endPointName\":\"RocsService\"\r",
									"                        //     pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameRabbitMQ); \r",
									"                        \r",
									"                        //     // check requestObject\r",
									"                        //     // \"requestObject\":\"{\\\"url\\\":\\\"api/v3/rocs/metering-method\\\",\\\"method\\\":\\\"POST\\\",\\\"headers\\\":{\\\"x-tid\\\":\\\"MG20210224145332238101\\\",\\\"Authorization\\\":\\\"Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IllZNzczNkhkNTkifQ.eyJpc3MiOiJzcmYuYWlzLmNvLnRoL3NjZiIsInN1YiI6InRva2VuX2NsaWVudF9jcmVkZW50aWFscyIsImF1ZCI6ImlRZnRFMXdxckdLQlVEOElPeFlaUkRIeVNSWnBnTVhsNXhETVhMWHMxWkE9IiwiZXhwIjoxNjE0MjI1ODk0LCJpYXQiOjE2MTQxMzk0OTQsImp0aSI6IjM0aVhoU1NYNVFEMW9SMzlaM2tKU0YiLCJjbGllbnQiOiJNelV5TWpVc1RXRm5aV3hzWVc1OFFtRmphMlZ1Wkh3ekxqQXVNQT09Iiwic3NpZCI6ImlGUnBRVTU0dThMck9kSXhMNDFWVmwifQ.p1CMz1s4-TBkufYWu1eEdSueKWo87Yjsyiovyf1ppqRr8DoCuL5KM-BH0QpCJr3FyaiSNYKgLtPZMsvILA0Pc6kX7btBCDDTUq0hl0Lc9lQkWwj_icghFzIElhclw5EMNfnd-a_C1P2sNFXdiS-2RbskS1B9QknSyanEU7CCXwA\\\"},\\\"body\\\":{\\\"command\\\":\\\"usageMonitoring\\\",\\\"sessionId\\\":\\\"1614153212381\\\",\\\"tid\\\":\\\"MG20210224145332238101\\\",\\\"rtid\\\":\\\"MG20210224145332238101\\\",\\\"actualTime\\\":\\\"20210224145332\\\",\\\"app\\\":null,\\\"clientId\\\":null,\\\"userType\\\":\\\"MSISDN\\\",\\\"userValue\\\":\\\"9400631842\\\",\\\"resourceId\\\":null,\\\"resourceName\\\":\\\"Magellan Transaction P1\\\",\\\"requestUnit\\\":\\\"36\\\"}}\"\r",
									"                        //     pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                        //     let jsonParseRequestObjectBody = JSON.parse(jsonParseRequestObject.body);\r",
									"                        //     // pm.expect(jsonParseRequestObjectBody[SensorKey]).to.eql(sensor.toString());\r",
									"                            \r",
									"                        //     // check responseObject\r",
									"                        //     // \"responseObject\":\"\\\"{\\\\\\\"command\\\\\\\":\\\\\\\"usageMonitoring\\\\\\\",\\\\\\\"sessionId\\\\\\\":\\\\\\\"1614153212381\\\\\\\",\\\\\\\"tid\\\\\\\":\\\\\\\"MG20210224145332238101\\\\\\\",\\\\\\\"rtid\\\\\\\":\\\\\\\"MG20210224145332238101\\\\\\\",\\\\\\\"status\\\\\\\":\\\\\\\"200\\\\\\\",\\\\\\\"devMessage\\\\\\\":\\\\\\\"SUCCESS\\\\\\\"}\\\"\"\r",
									"                        //     // pm.expect(jsonParseResponseObject).to.eql(\"\");  \r",
									"                        // }\r",
									"                    }); \r",
									"                }\r",
									"\r",
									"            }\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// InquiryThing\r",
									"InquiryThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptInquiryThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_InquiryThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_InquiryThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestInquiryThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsInquiryThing = {\r",
									"            url: url + provisioningapis + urlThingInquiryThing,\r",
									"            method: 'POST',\r",
									"            header: headersOptInquiryThing,\r",
									"            body: httpRequestInquiryThing\r",
									"        };\r",
									"\r",
									"        // console.log('request InquiryThing');\r",
									"        let response = await reqPromise(optionsInquiryThing);\r",
									"        let jsonDataInquiryThing = await response.json();\r",
									"        // console.log('jsonDataInquiryThing',jsonDataInquiryThing)\r",
									"    \r",
									"        let operationStatusInquiryThing = await jsonDataInquiryThing.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"InquiryThing : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('InquiryThing : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusInquiryThing).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //InquiryThing is Success\r",
									"        pm.test('InquiryThing : OperationStatus Description is '+'\"'+ resultDescriptionInquiryThing+'\"', function () {\r",
									"            pm.expect(operationStatusInquiryThing).to.have.property('Description', resultDescriptionInquiryThing);\r",
									"        });\r",
									"\r",
									"        //Check Data\r",
									"        let thingInfo = await jsonDataInquiryThing.ThingInfo;\r",
									"        console.log('thingInfo',thingInfo);\r",
									"\r",
									"        for(let i=0;i<thingInfo.length;i++){\r",
									"            pm.test('Verify DB Check Data : Charging HTTP(eSim) Report :{ \"'+  pm.environment.get(\"SensorKey_AsgardHTTP\") + '\" : \"'+ pm.environment.get(\"Value_Charging_TST_F2_1_1_002_Sensor\") +'\" }' , function () {\r",
									"                console.log(\"======== Verify DB Check Data ( Expected = Actual) [Charging HTTP(eSim) Report] ==================\");\r",
									"                console.log(\"ThingInfo[\"+ i +\"]StateInfo.Report.\" + pm.environment.get(\"SensorKey_AsgardHTTP\") + \" : \" + thingInfo[i].StateInfo.Report[pm.environment.get(\"SensorKey_AsgardHTTP\")] + \" = \" + JSON.stringify(pm.environment.get(\"Value_Charging_TST_F2_1_1_002_Sensor\")));\r",
									"\r",
									"                pm.expect(thingInfo[i].StateInfo.Report).to.have.property(pm.environment.get(\"SensorKey_AsgardHTTP\"), pm.environment.get(\"Value_Charging_TST_F2_1_1_002_Sensor\"));\r",
									"            });\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"setTimeout(function(){SearchLogFindTid();}, 7000); \r",
									"setTimeout(function(){CheckLog();}, 12000); \r",
									"setTimeout(function(){InquiryThing();}, 20000); \r",
									"// setTimeout(function(){RemoveThingStateInfo();}, 25000); \r",
									"// setTimeout(function(){RemoveThing();}, 30000); \r",
									"// setTimeout(function(){RemoveAccount();}, 35000); \r",
									"// setTimeout(function(){RemovePartner();}, 40000); \r",
									"\r",
									"setTimeout(function(){\r",
									"pm.environment.unset(\"current_timestamp\");\r",
									"pm.environment.unset(\"AccessToken\");\r",
									"pm.environment.unset(\"random_number\");\r",
									"pm.environment.unset(\"PartnerName\");\r",
									"pm.environment.unset(\"MerchantContact\");\r",
									"pm.environment.unset(\"CPID\");\r",
									"pm.environment.unset(\"GetResponse_PartnerId\");\r",
									"pm.environment.unset(\"AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountId\");\r",
									"pm.environment.unset(\"random_IM\");\r",
									"pm.environment.unset(\"random_ICCID\");\r",
									"pm.environment.unset(\"ThingName\");\r",
									"pm.environment.unset(\"GetResponse_ThingID\");\r",
									"pm.environment.unset(\"GetResponse_IMSI\");\r",
									"pm.environment.unset(\"encodedKeys_Authorization_Register\");\r",
									"pm.environment.unset(\"encodedKeys_Authorization_Report\");\r",
									"pm.environment.unset(\"random_Sensor\");\r",
									"pm.environment.unset(\"GetResponse_ThingToken\");\r",
									"pm.environment.unset(\"tid\");\r",
									"pm.environment.unset(\"sessionId\");\r",
									"pm.environment.unset(\"SensorKey_AsgardHTTP\");\r",
									"pm.environment.unset(\"random_Sensor_AsgardHTTP\");\r",
									"pm.environment.unset(\"timestamp\");\r",
									"pm.environment.unset(\"Value_Charging_TST_F2_1_1_002_Sensor\");\r",
									"}, 45000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var Username = pm.environment.get(\"Username\");\r",
									"var Password = pm.environment.get(\"Password\");\r",
									"\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"var controlapis = pm.environment.get(\"controlapis\");\r",
									"var httpapis = pm.environment.get(\"httpapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"pm.environment.set(\"SensorKey_AsgardHTTP\",fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP)\r",
									"pm.environment.set(\"Value_Charging_TST_F2_1_1_002_Sensor\",fieldDataValue.Charging.Value_Charging_TST_F2_1_1_002_Sensor)\r",
									"\r",
									"// Timestamp 2020-12-31T03:03:18+07:00\r",
									"var timestamp = fieldDataValue.AsgardHTTP.Value_AsgardHTTP_Report_Timestamp;\r",
									"// console.log('currentTmestamp',currentTmestamp);\r",
									"pm.environment.set(\"timestamp\", timestamp);\r",
									"\r",
									"//format YYYYMMDDHHMMSSS\r",
									"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
									"// console.log('currentTmestamp',currentTmestamp);\r",
									"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var Basic = pm.environment.get(\"Basic\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- statusCodeList --------------//\r",
									"//set variable to statusCodeList JSON.parse\r",
									"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
									"//set global variable to statusCode 200\r",
									"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
									"//set global variable to statusCode 201\r",
									"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultCodeList --------------//\r",
									"//set variable to resultCodeList JSON.parse\r",
									"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
									"//set global variable to resultCode \"20000\"\r",
									"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
									"//set global variable to resultCode \"20100\"\r",
									"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionSuccessList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
									"//set global variable to resultDescription \"SignInProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
									"//set global variable to resultDescription \"ValidateTokenProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionValidateToken\", resultDescriptionSuccessList.resultDescriptionValidateToken);\r",
									"//set global variable to resultDescription \"CreateThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThing\", resultDescriptionSuccessList.resultDescriptionCreateThing);\r",
									"//set global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThingStateInfo\", resultDescriptionSuccessList.resultDescriptionCreateThingStateInfo);\r",
									"//set global variable to resultDescription \"Register is Success\"\r",
									"pm.globals.set(\"resultDescriptionRegisterIsSuccess\", resultDescriptionSuccessList.resultDescriptionRegisterIsSuccess);\r",
									"//set global variable to resultDescription \"ReportProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionReportProcessIsSuccess\", resultDescriptionSuccessList.resultDescriptionReportProcessIsSuccess);\r",
									"//set global variable to resultDescription \"The requested operation was successfully.\"\r",
									"pm.globals.set(\"resultDescriptionTheRequestedOperationWasSuccessfully\", resultDescriptionSuccessList.resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"//set global variable to resultDescription \"InquiryThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionInquiryThing\", resultDescriptionSuccessList.resultDescriptionInquiryThing);\r",
									"//set global variable to resultDescription \"InquiryAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionInquiryAccount\", resultDescriptionSuccessList.resultDescriptionInquiryAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- HeaderList --------------//\r",
									"//set variable to HeaderList JSON.parse\r",
									"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
									"//---------------- set globals Other --------------//\r",
									"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
									"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
									"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
									"//set global variable to kbn-versio \"7.5.1\"\r",
									"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Signin_ --------------//\r",
									"//set global variable to x_ais_OrderRef \"Signin_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
									"//set global variable to x_ais_OrderRef \"ValidateToken\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ValidateToken\", HeaderList.Signin.x_ais_OrderRef_ValidateToken);\r",
									"//set global variable to x_ais_OrderDesc \"ValidateToken\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_ValidateToken\", HeaderList.Signin.x_ais_OrderDesc_ValidateToken);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Account --------------//\r",
									"//set global variable to x_ais_OrderRef \"InquiryAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_InquiryAccount\", HeaderList.Account.x_ais_OrderRef_InquiryAccount);\r",
									"//set global variable to x_ais_OrderDesc \"InquiryAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_InquiryAccount\", HeaderList.Account.x_ais_OrderDesc_InquiryAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Thing --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThing\", HeaderList.Thing.x_ais_OrderRef_CreateThing);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThing\", HeaderList.Thing.x_ais_OrderDesc_CreateThing);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThing\", HeaderList.Thing.x_ais_OrderRef_RemoveThing);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThing\", HeaderList.Thing.x_ais_OrderDesc_RemoveThing);\r",
									"//set global variable to x_ais_OrderRef \"InquiryThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_InquiryThing\", HeaderList.Thing.x_ais_OrderRef_InquiryThing);\r",
									"//set global variable to x_ais_OrderDesc \"InquiryThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_InquiryThing\", HeaderList.Thing.x_ais_OrderDesc_InquiryThing);\r",
									"//set global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_RemoveThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_RemoveThingStateInfo);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals AsgardHTTP --------------//\r",
									"//set global variable to x_ais_OrderRef \"RegisHTTP_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RegisHTTP\", HeaderList.AsgardHTTP.x_ais_OrderRef_RegisHTTP);\r",
									"//set global variable to x_ais_OrderDesc \"Register Thing in MG\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RegisHTTP\", HeaderList.AsgardHTTP.x_ais_OrderDesc_RegisHTTP);\r",
									"//set global variable to x_ais_OrderRef \"ReportHTTP_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ReportHTTP\", HeaderList.AsgardHTTP.x_ais_OrderRef_ReportHTTP);\r",
									"//set global variable to x_ais_OrderDesc \"Report Data to MG\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_ReportHTTP\", HeaderList.AsgardHTTP.x_ais_OrderDesc_ReportHTTP);\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"SignInProcess is Success\"\r",
									"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
									"//get global variable to resultDescription \"ValidateTokenProcess is Success\"\r",
									"var resultDescriptionValidateToken = pm.globals.get(\"resultDescriptionValidateToken\");\r",
									"//get global variable to resultDescription \"CreateThing is Success\"\r",
									"var resultDescriptionCreateThing = pm.globals.get(\"resultDescriptionCreateThing\");\r",
									"//get global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"var resultDescriptionCreateThingStateInfo = pm.globals.get(\"resultDescriptionCreateThingStateInfo\");\r",
									"//get global variable to resultDescription \"The requested operation was successfully.\"\r",
									"var resultDescriptionTheRequestedOperationWasSuccessfully = pm.globals.get(\"resultDescriptionTheRequestedOperationWasSuccessfully\");\r",
									"//get global variable to resultDescription \"InquiryAccount is Success\"\r",
									"var resultDescriptionInquiryAccount = pm.globals.get(\"resultDescriptionInquiryAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- urlRouteList --------------//\r",
									"//set variable to urlRouteList JSON.parse\r",
									"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
									"//---------------- set url Create --------------//\r",
									"//set global variable to url \"/api/v1/auth/signin\"\r",
									"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
									"//set global variable to url \"/api/v1/auth/ValidateToken\"\r",
									"pm.globals.set(\"urlValidateToken\", urlRouteList.Signin.urlValidateToken);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"pm.globals.set(\"urlThingCreateThing\", urlRouteList.Thing.urlThingCreateThing);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"pm.globals.set(\"urlThingCreateThingStateInfo\", urlRouteList.Thing.urlThingCreateThingStateInfo);\r",
									"//set global variable to url \"/api/register/sim/v1\"\r",
									"pm.globals.set(\"urlAsgardHTTPeSimRegister\", urlRouteList.AsgardHTTPeSim.urlAsgardHTTPeSimRegister);\r",
									"//set global variable to url \"/api/report/sim/v1\"\r",
									"pm.globals.set(\"urlAsgardHTTPeSimReport\", urlRouteList.AsgardHTTPeSim.urlAsgardHTTPeSimReport);\r",
									"//set global variable to url \"/api/v1/Account/InquiryAccount\"\r",
									"pm.globals.set(\"urlAccountInquiryAccount\", urlRouteList.Account.urlAccountInquiryAccount);\r",
									"//---------------- get url Create --------------//\r",
									"//get global variable to url \"/api/v1/auth/signin\"\r",
									"var urlSignin = pm.globals.get(\"urlSignin\");\r",
									"//get global variable to url \"/api/v1/auth/ValidateToken\"\r",
									"var urlValidateToken = pm.globals.get(\"urlValidateToken\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"var urlThingCreateThing = pm.globals.get(\"urlThingCreateThing\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"var urlThingCreateThingStateInfo = pm.globals.get(\"urlThingCreateThingStateInfo\");\r",
									"//get global variable to url \"/api/register/sim/v1\"\r",
									"var urlAsgardHTTPeSimRegister = pm.globals.get(\"urlAsgardHTTPeSimRegister\");\r",
									"//get global variable to url \"/api/report/sim/v1\"\r",
									"var urlAsgardHTTPeSimReport = pm.globals.get(\"urlAsgardHTTPeSimReport\");\r",
									"//---------------- set url Inquiry --------------//\r",
									"//get global variable to url \"/api/v1/Account/InquiryAccount\"\r",
									"var urlAccountInquiryAccount = pm.globals.get(\"urlAccountInquiryAccount\");\r",
									"//set global variable to url \"/api/v1/Thing/InquiryThing\"\r",
									"pm.globals.set(\"urlThingInquiryThing\", urlRouteList.Thing.urlThingInquiryThing);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Signin_ --------------//\r",
									"//get global variable to x_ais_OrderRef \"Signin_\"\r",
									"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
									"//get global variable to x_ais_OrderRef \"ValidateToken_\"\r",
									"var x_ais_OrderRef_ValidateToken = pm.globals.get(\"x_ais_OrderRef_ValidateToken\");\r",
									"//get global variable to x_ais_OrderDesc \"ValidateToken\"\r",
									"var x_ais_OrderDesc_ValidateToken = pm.globals.get(\"x_ais_OrderDesc_ValidateToken\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"InquiryAccount_\"\r",
									"var x_ais_OrderRef_InquiryAccount = pm.globals.get(\"x_ais_OrderRef_InquiryAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"InquiryAccount\"\r",
									"var x_ais_OrderDesc_InquiryAccount = pm.globals.get(\"x_ais_OrderDesc_InquiryAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"var x_ais_OrderRef_CreateThing = pm.globals.get(\"x_ais_OrderRef_CreateThing\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"var x_ais_OrderDesc_CreateThing = pm.globals.get(\"x_ais_OrderDesc_CreateThing\");\r",
									"//get global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"var x_ais_OrderRef_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderRef_CreateThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"var x_ais_OrderDesc_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_CreateThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals AsgardHTTP --------------//\r",
									"//get global variable to x_ais_OrderRef \"RegisHTTP_\"\r",
									"var x_ais_OrderRef_RegisHTTP = pm.globals.get(\"x_ais_OrderRef_RegisHTTP\");\r",
									"//get global variable to x_ais_OrderDesc \"Register Thing in MG\"\r",
									"var x_ais_OrderDesc_RegisHTTP = pm.globals.get(\"x_ais_OrderDesc_RegisHTTP\");\r",
									"//------------------------------------------------------------//\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// Signin get token\r",
									"Signin = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSignin = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_Signin + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_UserAuthentication,\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestSignin = {\r",
									"            mode: 'raw',\r",
									"            raw:\r",
									"                JSON.stringify({\r",
									"                    username: Username,\r",
									"                    password: Password\r",
									"                })\r",
									"        };\r",
									"\r",
									"        let optionsSignin = {\r",
									"            url: url + provisioningapis + urlSignin,\r",
									"            method: 'POST',\r",
									"            header: headersOptSignin,\r",
									"            body: httpRequestSignin\r",
									"        };\r",
									"        // console.log('request Signin');\r",
									"        let response = await reqPromise(optionsSignin);\r",
									"        let jsonDataSignin = await response.json();\r",
									"\r",
									"        // setAccessToken\r",
									"        await pm.environment.set(\"AccessToken\", jsonDataSignin.AccessToken);\r",
									"\r",
									"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('Signin : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // SignInProcess is Success\r",
									"        pm.test('Signin : OperationStatus Description is ' + '\"' + resultDescriptionSuccessSignIn + '\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
									"        });\r",
									"\r",
									"        //set random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //set PartnerName\r",
									"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
									"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
									"        //set MerchantContact\r",
									"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
									"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
									"        // set CPID\r",
									"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
									"        pm.environment.set(\"CPID\", CPIDValue)\r",
									"\r",
									"        //Accountname\r",
									"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
									"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// ValidateToken\r",
									" ValidateToken = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptValidateToken = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_ValidateToken + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_ValidateToken,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestValidateToken = {\r",
									"            mode: 'raw',\r",
									"            raw: \r",
									"            JSON.stringify({\r",
									"                \"AccessToken\": pm.environment.get(\"AccessToken\")\r",
									"            })\r",
									"        };  \r",
									"        \r",
									"        let optionsValidateToken = {\r",
									"            url: url + provisioningapis + urlValidateToken,\r",
									"            method: 'POST',\r",
									"            header: headersOptValidateToken,\r",
									"            body: httpRequestValidateToken\r",
									"        };\r",
									"        // console.log('request ValidateToken');\r",
									"        let response = await reqPromise(optionsValidateToken);\r",
									"        let jsonDataValidateToken = await response.json();\r",
									"        let operationStatusValidateToken = await jsonDataValidateToken.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"ValidateToken : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('ValidateToken : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusValidateToken).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // ValidateTokenProcess is Success\r",
									"        pm.test('ValidateToken : OperationStatus Description is '+'\"'+ resultDescriptionValidateToken+'\"', function () {\r",
									"            pm.expect(operationStatusValidateToken).to.have.property('Description', resultDescriptionValidateToken);\r",
									"        });\r",
									" \r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// InquiryAccount\r",
									"InquiryAccount = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptInquiryAccount = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_InquiryAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_InquiryAccount,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestInquiryAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"AccountName\": \"9400631842\"\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsInquiryAccount = {\r",
									"            url: url + provisioningapis + urlAccountInquiryAccount,\r",
									"            method: 'POST',\r",
									"            header: headersOptInquiryAccount,\r",
									"            body: httpRequestInquiryAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request InquiryAccount');\r",
									"        let response = await reqPromise(optionsInquiryAccount);\r",
									"        let jsonDataInquiryAccount = await response.json();\r",
									"        // console.log('jsonDataInquiryAccount',jsonDataInquiryAccount)\r",
									"\r",
									"        let operationStatusInquiryAccount = await jsonDataInquiryAccount.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"InquiryAccount : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('InquiryAccount : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusInquiryAccount).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //InquiryAccount is Success\r",
									"        pm.test('CreateAccount : OperationStatus Description is ' + '\"' + resultDescriptionInquiryAccount + '\"', function () {\r",
									"            pm.expect(operationStatusInquiryAccount).to.have.property('Description', resultDescriptionInquiryAccount);\r",
									"        });\r",
									"        \r",
									"        // GetResponse_AccountName\r",
									"        pm.environment.set(\"GetResponse_AccountName\", jsonDataInquiryAccount.PartnerInfo[0].AccountInfo[0].AccountName)\r",
									"        // GetResponse_AccountId\r",
									"        pm.environment.set(\"GetResponse_AccountId\", jsonDataInquiryAccount.PartnerInfo[0].AccountInfo[0].AccountId)\r",
									"        // random_IM\r",
									"        pm.environment.set(\"random_IM\", _.random(10000000, 99999999) + \" \" + _.random(1000000, 9999999))\r",
									"        // random_ICCID\r",
									"        pm.environment.set(\"random_ICCID\", _.random(1000000, 9999999) + \" \" + _.random(100000, 999999))\r",
									"        // random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //ThingName\r",
									"        let thingNameValue = fieldDataValue.Thing.ThingNameValue; // \"Sensor_TestThingName\"\r",
									"        pm.environment.set(\"ThingName\", thingNameValue + pm.environment.get(\"random_number\"))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThing\r",
									"CreateThing = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThing = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateThing + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateThing,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey': pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreateThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingName\": pm.environment.get(\"ThingName\"),\r",
									"                \"IMEI\": pm.environment.get(\"random_IM\"),\r",
									"                \"IMSI\": pm.environment.get(\"random_IM\"),\r",
									"                \"ICCID\": pm.environment.get(\"random_ICCID\"),\r",
									"                \"RouteUrl\": fieldDataValue.Thing.RouteUrlValue , //[\"http://10.12.3.4:2019/api/information/AddInformation\"]\r",
									"                \"RouteInfo\": {\r",
									"                    \"MIMO_ID\": fieldDataValue.Thing.RouteInfoMIMOIDValue , //\"606edada\"\r",
									"                    \"MIMO_SerialNo\": fieldDataValue.Thing.RouteInfoMIMOSerialNoValue //5466758878\r",
									"                },\r",
									"                \"RouteFlag\": {\r",
									"                    \"ThingName\": fieldDataValue.Thing.RouteFlagThingNameValue , //true\r",
									"                    \"ThingToken\": fieldDataValue.Thing.RouteFlagThingTokenValue, //true\r",
									"                    \"IMEI\": fieldDataValue.Thing.RouteFlagIMEIValue, //true\r",
									"                    \"ICCID\": fieldDataValue.Thing.RouteFlagICCIDValue, //true\r",
									"                    \"RouteInfo\": fieldDataValue.Thing.RouteFlagRouteInfoValue //true\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateThing = {\r",
									"            url: url + provisioningapis + urlThingCreateThing,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThing,\r",
									"            body: httpRequestCreateThing\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThing');\r",
									"        let response = await reqPromise(optionsCreateThing);\r",
									"        let jsonDataCreateThing = await response.json();\r",
									"        // console.log('jsonDataCreateThing',jsonDataCreateThing)\r",
									"\r",
									"        let operationStatusCreateThing = await jsonDataCreateThing.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateThing : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateThing : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateThing is Success\r",
									"        pm.test('CreateThing : OperationStatus Description is ' + '\"' + resultDescriptionCreateThing + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Description', resultDescriptionCreateThing);\r",
									"        });\r",
									"\r",
									"        pm.environment.set(\"GetResponse_ThingID\", jsonDataCreateThing.ThingInfo.ThingId)\r",
									"        pm.environment.set(\"GetResponse_IMSI\", jsonDataCreateThing.ThingInfo.IMSI)\r",
									"        \r",
									"        let keys = pm.environment.get(\"GetResponse_IMSI\") + \":\" + pm.environment.get(\"IpAddress\");\r",
									"        // console.log(\"keys\", keys);\r",
									"        let encodedKeys = CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(keys));\r",
									"        pm.environment.set(\"encodedKeys_Authorization_Register\", encodedKeys);\r",
									"\r",
									"        //Get Random Sensor \r",
									"        pm.environment.set(\"random_Sensor\", _.random(100, 999))\r",
									"\r",
									"        //Get Random Sensor AsgardHTTP\r",
									"        pm.environment.set(\"random_Sensor_AsgardHTTP\", _.random(100, 999))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThingStateInfo\r",
									"CreateThingStateInfo = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThingStateInfo = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateThingStateInfo,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey': pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        // {\"AA\" : pm.environment.get(\"random_Sensor\")}\r",
									"        let sensorValue = {};\r",
									"        sensorValue[fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP] = pm.environment.get(\"random_Sensor\");\r",
									"        // console.log('sensorValue',sensorValue);\r",
									"        \r",
									"        let httpRequestCreateThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": [\r",
									"                    pm.environment.get(\"GetResponse_ThingID\")\r",
									"                ],\r",
									"                \"Type\": fieldDataValue.CreateThingStateInfo.Type_Report,\r",
									"                \"Sensor\": sensorValue\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingCreateThingStateInfo,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThingStateInfo,\r",
									"            body: httpRequestCreateThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThingStateInfo');\r",
									"        let response = await reqPromise(optionsCreateThingStateInfo);\r",
									"        let jsonDataCreateThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataCreateThingStateInfo',jsonDataCreateThingStateInfo)\r",
									"\r",
									"        let operationStatusCreateThingStateInfo = await jsonDataCreateThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"CreateThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //CreateThingStateInfo is Success\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Description is ' + '\"' + resultDescriptionCreateThingStateInfo + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Description', resultDescriptionCreateThingStateInfo);\r",
									"        });\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// AsgardHTTPeSimRegister\r",
									"AsgardHTTPeSimRegister = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptAsgardHTTPeSimRegister = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_RegisHTTP + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_RegisHTTP,\r",
									"            'Authorization': Basic + ' ' + pm.environment.get(\"encodedKeys_Authorization_Register\")\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestAsgardHTTPeSimRegister = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({})\r",
									"        };\r",
									"\r",
									"        let optionsAsgardHTTPeSimRegister = {\r",
									"            url: url + httpapis + urlAsgardHTTPeSimRegister,\r",
									"            method: 'POST',\r",
									"            header: headersOptAsgardHTTPeSimRegister,\r",
									"            body: httpRequestAsgardHTTPeSimRegister\r",
									"        };\r",
									"\r",
									"        // console.log('request AsgardHTTPEsimRegister');\r",
									"        let response = await reqPromise(optionsAsgardHTTPeSimRegister);\r",
									"        let jsonDataAsgardHTTPeSimRegister = await response.json();\r",
									"        // console.log('jsonDataCreateThingStateInfo',jsonDataAsgardHTTPeSimRegister)\r",
									"        let operationStatusAsgardHTTPeSimRegister = await jsonDataAsgardHTTPeSimRegister.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"Asgard HTTP(eSim) Register : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('Asgard HTTP(eSim) Register : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusAsgardHTTPeSimRegister).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"\r",
									"        // The requested operation was successfully.\r",
									"        pm.test('Asgard HTTP(eSim) Register : OperationStatus DeveloperMessage is ' + '\"' + resultDescriptionTheRequestedOperationWasSuccessfully + '\"', function () {\r",
									"            pm.expect(operationStatusAsgardHTTPeSimRegister).to.have.property('DeveloperMessage', resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"        });\r",
									"\r",
									"        await pm.environment.set(\"GetResponse_ThingToken\", jsonDataAsgardHTTPeSimRegister.ThingToken)\r",
									"        let keys2 = await pm.environment.get(\"GetResponse_ThingToken\") + \":\" + pm.environment.get(\"IpAddress\");        \r",
									"        let encodedKeys2 = await CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(keys2));\r",
									"        pm.environment.set(\"encodedKeys_Authorization_Report\", encodedKeys2)\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"Signin();\r",
									"setTimeout(async function(){await ValidateToken();}, 2000);\r",
									"setTimeout(async function(){await InquiryAccount();}, 3000); \r",
									"setTimeout(async function(){await CreateThing();}, 4000); \r",
									"setTimeout(async function(){await CreateThingStateInfo();}, 5000); \r",
									"setTimeout(async function () { await AsgardHTTPeSimRegister(); }, 7000); \r",
									"setTimeout(async function () { }, 7500); //for wait value encodedKeys_Authorization_Report"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-ais-UserName",
								"type": "text",
								"value": "{{x_ais_UserName_AisPartner}}"
							},
							{
								"key": "x-ais-OrderRef",
								"value": "{{x_ais_OrderRef_ReportHTTP}}{{current_timestamp}}"
							},
							{
								"key": "x-ais-OrderDesc",
								"type": "text",
								"value": "{{x_ais_OrderDesc_ReportHTTP}}"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{Basic}} {{encodedKeys_Authorization_Report}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Payload\": {\r\n        \"{{SensorKey_AsgardHTTP}}\" : \"{{Value_Charging_TST_F2_1_1_002_Sensor}}\"\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{url}}{{httpapis}}/api/report/sim/v1",
							"host": [
								"{{url}}{{httpapis}}"
							],
							"path": [
								"api",
								"report",
								"sim",
								"v1"
							]
						},
						"description": "Type:Desire"
					},
					"response": []
				},
				{
					"name": "ChargingHTTPeSim_Report_TST_F2_1_1_003_Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"var controlapis = pm.environment.get(\"controlapis\");\r",
									"var httpapis = pm.environment.get(\"httpapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var Basic = pm.environment.get(\"Basic\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to xAisOrderRef \"RemoveThing_\"\r",
									"var x_ais_OrderRef_RemoveThing = pm.globals.get(\"x_ais_OrderRef_RemoveThing\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"var x_ais_OrderDesc_RemoveThing = pm.globals.get(\"x_ais_OrderDesc_RemoveThing\");\r",
									"//get global variable to xAisOrderRef \"InquiryThing_\"\r",
									"var x_ais_OrderRef_InquiryThing = pm.globals.get(\"x_ais_OrderRef_InquiryThing\");\r",
									"//get global variable to x_ais_OrderDesc \"InquiryThing\"\r",
									"var x_ais_OrderDesc_InquiryThing = pm.globals.get(\"x_ais_OrderDesc_InquiryThing\");\r",
									"//get global variable to xAisOrderRef \"RemoveThingStateInfo_\"\r",
									"var x_ais_OrderRef_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderRef_RemoveThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThingStateInfo\"\r",
									"var x_ais_OrderDesc_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_RemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals AsgardHTTP --------------//\r",
									"//get global variable to x_ais_OrderRef \"ReportHTTP_\"\r",
									"var x_ais_OrderRef_ReportHTTP = pm.globals.get(\"x_ais_OrderRef_ReportHTTP\");\r",
									"//get global variable to x_ais_OrderDesc \"Report Data to MG\"\r",
									"var x_ais_OrderDesc_ReportHTTP = pm.globals.get(\"x_ais_OrderDesc_ReportHTTP\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get url Remove --------------//\r",
									"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
									"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"var urlThingRemoveThing = pm.globals.get(\"urlThingRemoveThing\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"var urlThingRemoveThingStateInfo = pm.globals.get(\"urlThingRemoveThingStateInfo\");\r",
									"//---------------- get url Inquiry --------------//\r",
									"//get global variable to url \"/api/v1/Thing/InquiryThingr\"\r",
									"var urlThingInquiryThing = pm.globals.get(\"urlThingInquiryThing\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"RemovePartner is Success\"\r",
									"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
									"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
									"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
									"//get global variable to resultDescription \"RemoveThing is Success\"\r",
									"var resultDescriptionRemoveThing = pm.globals.get(\"resultDescriptionRemoveThing\");\r",
									"//get global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"var resultDescriptionRemoveThingStateInfo = pm.globals.get(\"resultDescriptionRemoveThingStateInfo\");\r",
									"//get global variable to resultDescription \"InquiryThing is Success\"\r",
									"var resultDescriptionInquiryThing = pm.globals.get(\"resultDescriptionInquiryThing\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to resultDescription \"ReportProcess is Success\"\r",
									"// var resultDescriptionReportProcessIsSuccess = pm.globals.get(\"resultDescriptionReportProcessIsSuccess\");\r",
									"//get global variable to resultDescription \"The requested operation was successfully.\"\r",
									"var resultDescriptionTheRequestedOperationWasSuccessfully = pm.globals.get(\"resultDescriptionTheRequestedOperationWasSuccessfully\");\r",
									"//------------------------------------------------------------//\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Asgard HTTP(eSim) Report : Status code is \" + statusCodeSuccess, function () {\r",
									"    pm.response.to.have.status(statusCodeSuccess);\r",
									"});\r",
									"\r",
									"pm.test('Asgard HTTP(eSim) Report : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeSuccess);\r",
									"});\r",
									"\r",
									"// pm.test('Asgard HTTP(eSim) Report : OperationStatus Description is '+'\"'+ resultDescriptionReportProcessIsSuccess+'\"', function () {\r",
									"//     pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionReportProcessIsSuccess);\r",
									"// });\r",
									"\r",
									"pm.test('Asgard HTTP(eSim) Report : OperationStatus DeveloperMessage is '+'\"'+ resultDescriptionTheRequestedOperationWasSuccessfully+'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"});\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"//---------------- LogDefaultValue --------------//\r",
									"//set variable to LogDefaultValue JSON.parse\r",
									"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
									"// console.log('LogDefaultValue',LogDefaultValue);\r",
									"//---------------- set globals Other --------------//\r",
									"var SearchLog = LogDefaultValue.SearchLog;\r",
									"// console.log('SearchLog',SearchLog);\r",
									"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
									"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
									"var kbn_version = SearchLog.header.kbn_version;\r",
									"var authorization = SearchLog.header.Authorization;\r",
									"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
									"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
									"var namespace = LogDefaultValue.Other.namespace;\r",
									"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
									"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
									"var header_x_ais_username = LogDefaultValue.Other.header_x_ais_username;\r",
									"var methodPost = LogDefaultValue.Other.methodPost;\r",
									"\r",
									"// Detail\r",
									"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
									"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
									"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
									"\r",
									"// Summary\r",
									"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
									"var identitySummary = \"\";\r",
									"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
									"\r",
									"// Asgard.Http.APIs\r",
									"var applicationName = LogDefaultValue.AsgardHTTP.applicationName;\r",
									"var cmdName = LogDefaultValue.AsgardHTTP.cmdNameReport;\r",
									"var endPointNameRabbitMQ = LogDefaultValue.AsgardHTTP.endPointNameRabbitMQ;\r",
									"var containerId = LogDefaultValue.AsgardHTTP.containerId;\r",
									"var requestObjectUrlStaging = LogDefaultValue.AsgardHTTP.requestObjectUrlReportMgStaging;\r",
									"var urlReport  = LogDefaultValue.AsgardHTTP.urlReport;\r",
									"\r",
									"// Insight.Charging.APIs\r",
									"var applicationNameCharging = LogDefaultValue.Charging.applicationName;\r",
									"var cmdNameCharging = LogDefaultValue.Charging.cmdName;\r",
									"var endPointNameRocsService = LogDefaultValue.Charging.endPointName;\r",
									"var containerIdCharging = LogDefaultValue.Charging.containerId;\r",
									"var urlCharging  = LogDefaultValue.Charging.urlCharging;\r",
									"\r",
									"// Check CDR (Summary Log) and EDR (Detail Log)\r",
									"SearchLogFindTid = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSearchLogFindTid = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = x_ais_OrderRef_ReportHTTP + current_timestamp; \r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestSearchLogFindTid = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"phrase\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"\r",
									"        let optionsSearchLogFindTid = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptSearchLogFindTid,\r",
									"            body: httpRequestSearchLogFindTid\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsSearchLogFindTid);\r",
									"        let jsonDataSearchLogFindTid = await response.json();\r",
									"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
									"        // console.log('hits',hits)\r",
									"  \r",
									"        // find tid\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            // let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"        \r",
									"            // console.log('logType',logType)\r",
									"             console.log('applicationNameValue',applicationNameValue)\r",
									"             console.log('applicationName',applicationName)\r",
									"            if(applicationNameValue == applicationName){\r",
									"                let tid = hits[i]._source.cauldron.tid;\r",
									"                pm.environment.set(\"tid\", tid);\r",
									"                let sessionId = hits[i]._source.cauldron.sessionId;\r",
									"                pm.environment.set(\"sessionId\", sessionId);\r",
									"                break;\r",
									"           }\r",
									"        }\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"CheckLog = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCheckLog = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = pm.environment.get(\"sessionId\");\r",
									"\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"         console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestCheckLog = {\r",
									"            mode: 'raw',\r",
									"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"phrase\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"        let optionsCheckLog = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptCheckLog,\r",
									"            body: httpRequestCheckLog\r",
									"        }; \r",
									"        let response = await reqPromise(optionsCheckLog);\r",
									"        let jsonDataCheckLog = await response.json();\r",
									"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
									"        \r",
									"        // //200\r",
									"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });     \r",
									"        \r",
									"        let hits = jsonDataCheckLog.hits.hits\r",
									"         console.log('hits',hits)\r",
									"  \r",
									"        // find logType\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            //  let logType = hits[i]._source.cauldron.logType\r",
									"            let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"           \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            \r",
									"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
									"            // console.log('resultDataLog',resultDataLog)\r",
									"\r",
									"            let tidControl = x_ais_OrderRef_ReportHTTP  + current_timestamp;\r",
									"            // console.log(tidControl);\r",
									"            if(applicationNameValue == applicationName){\r",
									"                 \r",
									"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and Asgard.Http.APIs\r",
									"                    pm.test(\"Check Summary Log : Asgard_HTTP(eSim) Report\" , function () {\r",
									"                        console.log(\"======== Check Summary Log ( Expected = Actual) [Asgard_HTTP(eSim) Report] ==================\");\r",
									"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
									"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
									"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeSuccess);\r",
									"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
									"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
									"                        // console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
									"\r",
									"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
									"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
									"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeSuccess); \r",
									"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionTheRequestedOperationWasSuccessfully); \r",
									"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
									"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"\r",
									"                        let thingId = pm.environment.get(\"GetResponse_ThingID\");\r",
									"                        let imei = (pm.environment.get(\"random_IM\")).replace(\" \", \"\");\r",
									"                        let imsi = (pm.environment.get(\"GetResponse_IMSI\")).replace(\" \", \"\");\r",
									"                        let customUrl= urlCheckLog + requestObjectUrlStaging;\r",
									"\r",
									"                        // check identity\r",
									"                        // \"identity\":\"{\\\"Imei\\\":\\\"496151103122639\\\",\\\"ThingId\\\":\\\"6013965896d0ed0001f5a46d\\\",\\\"Imsi\\\":\\\"496151103122639\\\"}\"\r",
									"                        let dataSummaryIdentity = JSON.parse(resultDataLog.identity);\r",
									"\r",
									"                        console.log(\"identity.ThingId : \" + dataSummaryIdentity.ThingId + \" = \" + thingId);\r",
									"                        console.log(\"identity.Imei : \" + dataSummaryIdentity.Imei + \" = \" + imei);\r",
									"                        console.log(\"identity.Imsi : \" + dataSummaryIdentity.Imsi + \" = \" + imsi);\r",
									"\r",
									"                        pm.expect(dataSummaryIdentity.ThingId).to.eql(thingId); \r",
									"                        pm.expect(dataSummaryIdentity.Imei).to.eql(imei); \r",
									"                        pm.expect(dataSummaryIdentity.Imsi).to.eql(imsi); \r",
									"\r",
									"                        // check custom\r",
									"                        // \"custom\":{\"Imsi\":[\"496151103122639\"],\"url\":\"mg-staging.sandais.com/api/report/sim/v1\",\"Imei\":[\"496151103122639\"],\"ThingID\":[\"6013965896d0ed0001f5a46d\"]}\r",
									"                        \r",
									"                        let customData = resultDataLog.custom.customData\r",
									"\r",
									"                        console.log(\"custom.url : \" + customData.url + \" = \" + customUrl);\r",
									"                        console.log(\"custom.Imei[0] : \" + customData.Imei[0] + \" = \" + imei);\r",
									"                        console.log(\"custom.Imsi[0] : \" + customData.Imsi[0] + \" = \" + imsi);\r",
									"                        console.log(\"custom.ThingID[0] : \" + customData.ThingID[0] + \" = \" + thingId);\r",
									"\r",
									"                        pm.expect(customData.url).to.eql(customUrl); \r",
									"                        pm.expect(customData.Imei[0]).to.eql(imei); \r",
									"                        pm.expect(customData.Imsi[0]).to.eql(imsi); \r",
									"                        pm.expect(customData.ThingID[0]).to.eql(thingId); \r",
									"                    }); \r",
									"                }\r",
									"\r",
									"                if(logType == logTypeDetail && (applicationNameValue == applicationName) ){ //'Detail' and Asgard.Http.APIs\r",
									"\r",
									"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
									"                    // console.log('endPointNameValue ',endPointNameValue)\r",
									"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [Asgard_HTTP(eSim) Report]\", function () {\r",
									"                        console.log(\"======== Check Detail Log ( Expected = Actual) [Asgard_HTTP(eSim) Report] ==================\");\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
									"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
									"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
									"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
									"\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
									"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
									"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
									"\r",
									"                        let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
									"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
									"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
									"                            // console.log('jsonParseResponseObject',jsonParseResponseObject); \r",
									"                        let url = urlReport; \r",
									"                        let x_ais_orderref = x_ais_OrderRef_ReportHTTP + current_timestamp;\r",
									"                        let x_ais_orderdesc = x_ais_OrderDesc_ReportHTTP;\r",
									"                        let x_ais_userName = x_ais_UserName_AisPartner;\r",
									"                        let authorization = Basic + ' ' + pm.environment.get(\"encodedKeys_Authorization_Report\");\r",
									"                        let imei = (pm.environment.get(\"random_IM\")).replace(\" \", \"\");\r",
									"                        let imsi = (pm.environment.get(\"GetResponse_IMSI\")).replace(\" \", \"\");\r",
									"                        let thingId = pm.environment.get(\"GetResponse_ThingID\");\r",
									"                        let customUrl= urlCheckLog + requestObjectUrlStaging;\r",
									"                        let SensorKey = fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP;\r",
									"                        let sensor = pm.environment.get(\"Value_Charging_TST_F2_1_1_003_Sensor\");\r",
									"                        let timestamp = pm.environment.get(\"timestamp\");\r",
									"\r",
									"                        if( endPointNameValue == undefined){\r",
									"                            // check requestObject\r",
									"                            // \"requestObject\":\"{\\\"url\\\":\\\"/api/report/sim/v1\\\",\\\"method\\\":\\\"POST\\\",\\\"headers\\\":{\\\"Cache-Control\\\":\\\"no-cache\\\",\\\"Content-Type\\\":\\\"application/json\\\",\\\"Accept\\\":\\\"*/*\\\",\\\"Accept-Encoding\\\":\\\"gzip,deflate,br\\\",\\\"Authorization\\\":\\\"Basic NDk2MTUxMTAzMTIyNjM5OjEuMi4zLjQ=\\\",\\\"Host\\\":\\\"mg-staging.sandais.com\\\",\\\"User-Agent\\\":\\\"PostmanRuntime/7.26.8\\\",\\\"Content-Length\\\":\\\"2\\\",\\\"x-real-ip\\\":\\\"171.96.174.10\\\",\\\"x-forwarded-for\\\":\\\"171.96.174.10\\\",\\\"x-forwarded-proto\\\":\\\"https\\\",\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"ReportHTTP_202101291701676\\\",\\\"x-ais-orderdesc\\\":\\\"Report Data to MG\\\",\\\"postman-token\\\":\\\"83bc76b4-8538-4a10-94fc-8b9cc1143ec8\\\",\\\"x-request-id\\\":\\\"bbf6c560-8bea-4d53-87d8-28a3f3664d37\\\",\\\"x-b3-traceid\\\":\\\"eb252eaef48d4ec507b32acd0a8dc573\\\",\\\"x-b3-spanid\\\":\\\"07b32acd0a8dc573\\\",\\\"x-b3-sampled\\\":\\\"0\\\",\\\"x-ais-SessionId\\\":\\\"1611896410502\\\",\\\"identity\\\":\\\"{\\\\\\\"Imei\\\\\\\":\\\\\\\"496151103122639\\\\\\\",\\\\\\\"ThingID\\\\\\\":\\\\\\\"6013965896d0ed0001f5a46d\\\\\\\",\\\\\\\"Imsi\\\\\\\":\\\\\\\"496151103122639\\\\\\\"}\\\",\\\"custom\\\":\\\"{\\\\\\\"Imsi\\\\\\\":[\\\\\\\"496151103122639\\\\\\\"],\\\\\\\"url\\\\\\\":\\\\\\\"mg-staging.sandais.com/api/register/sim/v1\\\\\\\",\\\\\\\"Imei\\\\\\\":[\\\\\\\"496151103122639\\\\\\\"],\\\\\\\"ThingID\\\\\\\":[\\\\\\\"6013965896d0ed0001f5a46d\\\\\\\"]}\\\"},\\\"queryString\\\":{},\\\"routeParamteters\\\":{},\\\"body\\\":{\\\"Payload\\\":{\\\"Temp\\\":\\\"686\\\",\\\"Timestamp\\\":\\\"2020-12-31T03:03:18+07:00\\\"}}\"\r",
									"\r",
									"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
									"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
									"                            console.log(\"headers.x_ais_userName : \" + jsonParseRequestObject.headers[header_x_ais_username] + \" = \" + x_ais_userName);\r",
									"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
									"                            console.log(\"headers.Authorization : \" + jsonParseRequestObject.headers.Authorization + \" = \" + authorization);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
									"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_username]).to.eql(x_ais_userName);\r",
									"                            pm.expect(jsonParseRequestObject.headers.Authorization).to.eql(authorization);\r",
									"\r",
									"                            // check requestObject headers.identity\r",
									"                            let jsonParseRequestObjectHeadersIdentity = JSON.parse(jsonParseRequestObject.headers.identity);\r",
									"                            // console.log('jsonParseRequestObjectHeadersIdentity',jsonParseRequestObjectHeadersIdentity);\r",
									"\r",
									"                            console.log(\"headers.identity.Imei : \" + jsonParseRequestObjectHeadersIdentity.Imei + \" = \" + imei);\r",
									"                            console.log(\"headers.identity.Imsi : \" + jsonParseRequestObjectHeadersIdentity.Imsi + \" = \" + imsi);\r",
									"                            console.log(\"headers.identity.ThingId : \" + jsonParseRequestObjectHeadersIdentity.ThingId + \" = \" + thingId);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObjectHeadersIdentity.Imei).to.eql(imei);\r",
									"                            pm.expect(jsonParseRequestObjectHeadersIdentity.Imsi).to.eql(imsi);\r",
									"                            pm.expect(jsonParseRequestObjectHeadersIdentity.ThingId).to.eql(thingId);\r",
									"\r",
									"                            // check requestObject headers.custom\r",
									"                            let jsonParseRequestObjectHeadersCustom = JSON.parse(jsonParseRequestObject.headers.custom);\r",
									"                            // console.log('jsonParseRequestObjectHeadersCustom',jsonParseRequestObjectHeadersCustom);\r",
									"\r",
									"                            console.log(\"headers.custom.url : \" + jsonParseRequestObjectHeadersCustom.url + \" = \" + customUrl);\r",
									"                            console.log(\"headers.custom.Imei[0] : \" + jsonParseRequestObjectHeadersCustom.Imei[0] + \" = \" + imei);\r",
									"                            console.log(\"headers.custom.Imsi[0] : \" + jsonParseRequestObjectHeadersCustom.Imsi[0] + \" = \" + imsi);\r",
									"                            console.log(\"headers.custom.ThingID[0] : \" + jsonParseRequestObjectHeadersCustom.ThingID[0] + \" = \" + thingId);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObjectHeadersCustom.url).to.eql(customUrl);\r",
									"                            pm.expect(jsonParseRequestObjectHeadersCustom.Imei[0]).to.eql(imei);\r",
									"                            pm.expect(jsonParseRequestObjectHeadersCustom.Imsi[0]).to.eql(imsi);\r",
									"                            pm.expect(jsonParseRequestObjectHeadersCustom.ThingID[0]).to.eql(thingId);\r",
									"\r",
									"                            console.log(\"queryString : \" + JSON.stringify(jsonParseRequestObject.queryString) + \" = \" + JSON.stringify({}));\r",
									"                            console.log(\"routeParamteters : \" + JSON.stringify(jsonParseRequestObject.routeParamteters) + \" = \" + JSON.stringify({}));\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.queryString).to.eql({}); \r",
									"                            pm.expect(jsonParseRequestObject.routeParamteters).to.eql({}); \r",
									"\r",
									"                            console.log(\"resquest.body.Payload.\" + SensorKey +\" : \" + jsonParseRequestObject.body.Payload[SensorKey] + \" = \" + sensor.toString());\r",
									"                            pm.expect(jsonParseRequestObject.body.Payload[SensorKey]).to.eql(sensor.toString());\r",
									"                            // pm.expect(jsonParseRequestObject.body.Payload.Timestamp).to.eql(timestamp); \r",
									"                           \r",
									"                            // check responseObject\r",
									"                            // responseObject: \"{\"OperationStatus\":{\"Code\":\"20000\",\"DeveloperMessage\":\"The requested operation was successfully.\"}}\"\r",
									"\r",
									"                            console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeSuccess);\r",
									"                            console.log(\"response.OperationStatus.DeveloperMessage : \" + jsonParseResponseObject.OperationStatus.DeveloperMessage + \" = \" + resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"\r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeSuccess);  \r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheRequestedOperationWasSuccessfully);  \r",
									"                        }\r",
									"               \r",
									"                        if( endPointNameValue == endPointNameRabbitMQ){     //\"endPointName\":\"RabbitMQ\"\r",
									"                            console.log(\"custom1.endPointName : \" + resultDataLog.custom1.endPointName + \" = \" + endPointNameRabbitMQ);\r",
									"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameRabbitMQ); \r",
									"                        \r",
									"                            // check requestObject\r",
									"                            // \"requestObject\":\"{\\\"url\\\":\\\"internalreport.pub.v1.089320c4-3275-4d4d-98a9-1d598a3e70c1\\\",\\\"headers\\\":{\\\"x-ais-orderref\\\":\\\"ReportHTTP_202101291701676\\\",\\\"x-ais-sessionid\\\":\\\"1611916984472\\\",\\\"timestamp_in_ms\\\":\\\"1611916984473\\\"},\\\"body\\\":\\\"{\\\\\\\"AA\\\\\\\":\\\\\\\"686\\\\\\\",\\\\\\\"Timestamp\\\\\\\":\\\\\\\"2020-12-31T03:03:18+07:00\\\\\\\"}\\\"}\"\r",
									"\r",
									"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                            \r",
									"                            let jsonParseRequestObjectBody = JSON.parse(jsonParseRequestObject.body);\r",
									"\r",
									"                            console.log(\"resquest.body.\" + SensorKey +\" : \" + jsonParseRequestObjectBody[SensorKey] + \" = \" + sensor.toString());\r",
									"                            pm.expect(jsonParseRequestObjectBody[SensorKey]).to.eql(sensor.toString());\r",
									"                            \r",
									"                            // check responseObject\r",
									"                            //  \"responseObject\":\"\\\"\\\"\",\r",
									"\r",
									"                            console.log(\"response : \" + JSON.stringify(jsonParseResponseObject) + \" = \" + JSON.stringify(\"\"));\r",
									"                            pm.expect(jsonParseResponseObject).to.eql(\"\");  \r",
									"                        }\r",
									"                    }); \r",
									"                }\r",
									"\r",
									"            }\r",
									"\r",
									"            if(applicationNameValue == applicationNameCharging){\r",
									"                 \r",
									"                if(logType == logTypeSummary && applicationNameValue == applicationNameCharging){ // 'Summary' and Insight.Charging.APIs\r",
									"                    pm.test(\"Check Summary Log : Charging\" , function () {\r",
									"                        console.log(\"======== Check Summary Log ( Expected = Actual) [Charging] ==================\");\r",
									"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
									"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
									"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeSuccess);\r",
									"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
									"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
									"                        // console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
									"\r",
									"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
									"                        pm.expect(resultDataLog.cmdName).to.eql(cmdNameCharging); \r",
									"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeSuccess); \r",
									"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionTheRequestedOperationWasSuccessfully); \r",
									"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
									"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerIdCharging); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationNameCharging); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.identity).to.eql(identitySummary); \r",
									"                        pm.expect(resultDataLog.custom).to.eql(customSummary); \r",
									"                        \r",
									"                    }); \r",
									"                }\r",
									"\r",
									"                if(logType == logTypeDetail && (applicationNameValue == applicationNameCharging) ){ //'Detail' and Insight.Charging.APIs\r",
									"\r",
									"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
									"                    // console.log('endPointNameValue ',endPointNameValue)\r",
									"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [Charging]\", function () {\r",
									"                        console.log(\"======== Check Detail Log ( Expected = Actual) [Charging] ==================\");\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
									"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        if( endPointNameValue == undefined){\r",
									"                            console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        }\r",
									"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
									"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
									"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
									"\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
									"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationNameCharging); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerIdCharging); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                         if( endPointNameValue == undefined){\r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                         }\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
									"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
									"\r",
									"                        let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
									"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
									"                        let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
									"                            // console.log('jsonParseResponseObject',jsonParseResponseObject); \r",
									"                        let url = urlCharging + pm.environment.get(\"GetResponse_ThingID\"); \r",
									"                        let x_ais_orderref = x_ais_OrderRef_ReportHTTP + current_timestamp;\r",
									"                        let thingId = pm.environment.get(\"GetResponse_ThingID\");\r",
									"                        let SensorKey = fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP;\r",
									"                        let sensor = pm.environment.get(\"Value_Charging_TST_F2_1_1_003_Sensor\");\r",
									"                      \r",
									"                        if( endPointNameValue == undefined){\r",
									"                            \r",
									"                            // check requestObject\r",
									"                            // \"requestObject\":\"{\\\"url\\\":\\\"/api/v1/Charging/603605f824ef380001b9f108\\\",\\\"method\\\":\\\"POST\\\",\\\"headers\\\":{\\\"Content-Type\\\":\\\"application/json\\\",\\\"Host\\\":\\\"chargingapis.magellanstaging.svc.cluster.local\\\",\\\"Content-Length\\\":\\\"24\\\",\\\"x-ais-orderref\\\":\\\"ReportHTTP_202102241402448\\\",\\\"x-ais-sessionid\\\":\\\"1614153212381\\\",\\\"x-forwarded-proto\\\":\\\"http\\\",\\\"x-request-id\\\":\\\"a0841c07-c230-4f1c-8b48-71d83243564b\\\",\\\"x-b3-traceid\\\":\\\"d46d3e9a2b05b26895e83d80b50c8737\\\",\\\"x-b3-spanid\\\":\\\"01039a2b17e0a6cc\\\",\\\"x-b3-parentspanid\\\":\\\"95e83d80b50c8737\\\",\\\"x-b3-sampled\\\":\\\"0\\\"},\\\"queryString\\\":{ },\\\"routeParamteters\\\":{\\\"ThingId\\\":\\\"603605f824ef380001b9f108\\\"},\\\"body\\\":{\\\"Payload\\\":{\\\"AA\\\":\\\"903\\\"}}}\"\r",
									"\r",
									"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
									"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
									"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
									"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"\r",
									"                            console.log(\"queryString : \" + JSON.stringify(jsonParseRequestObject.queryString) + \" = \" + JSON.stringify({}));\r",
									"                            console.log(\"routeParamteters.ThingId : \" + JSON.stringify(jsonParseRequestObject.routeParamteters.ThingId) + \" = \" + thingId);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.queryString).to.eql({}); \r",
									"                            pm.expect(jsonParseRequestObject.routeParamteters.ThingId).to.eql(thingId); \r",
									"\r",
									"                            console.log(\"resquest.body.Payload.\" + SensorKey +\" : \" + jsonParseRequestObject.body.Payload[SensorKey] + \" = \" + sensor.toString());\r",
									"                            pm.expect(jsonParseRequestObject.body.Payload[SensorKey]).to.eql(sensor.toString());\r",
									"                           \r",
									"                            // check responseObject\r",
									"                            // responseObject: \"{\"OperationStatus\":{\"Code\":\"20000\",\"DeveloperMessage\":\"The requested operation was successfully.\"}}\"\r",
									"                            // pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeSuccess);  \r",
									"                            // pm.expect(jsonParseResponseObject.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheRequestedOperationWasSuccessfully);  \r",
									"                        }\r",
									"               \r",
									"                        // if( endPointNameValue == endPointNameRocsService){     //\"endPointName\":\"RocsService\"\r",
									"                        //     pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameRabbitMQ); \r",
									"                        \r",
									"                        //     // check requestObject\r",
									"                        //     // \"requestObject\":\"{\\\"url\\\":\\\"api/v3/rocs/metering-method\\\",\\\"method\\\":\\\"POST\\\",\\\"headers\\\":{\\\"x-tid\\\":\\\"MG20210224145332238101\\\",\\\"Authorization\\\":\\\"Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IllZNzczNkhkNTkifQ.eyJpc3MiOiJzcmYuYWlzLmNvLnRoL3NjZiIsInN1YiI6InRva2VuX2NsaWVudF9jcmVkZW50aWFscyIsImF1ZCI6ImlRZnRFMXdxckdLQlVEOElPeFlaUkRIeVNSWnBnTVhsNXhETVhMWHMxWkE9IiwiZXhwIjoxNjE0MjI1ODk0LCJpYXQiOjE2MTQxMzk0OTQsImp0aSI6IjM0aVhoU1NYNVFEMW9SMzlaM2tKU0YiLCJjbGllbnQiOiJNelV5TWpVc1RXRm5aV3hzWVc1OFFtRmphMlZ1Wkh3ekxqQXVNQT09Iiwic3NpZCI6ImlGUnBRVTU0dThMck9kSXhMNDFWVmwifQ.p1CMz1s4-TBkufYWu1eEdSueKWo87Yjsyiovyf1ppqRr8DoCuL5KM-BH0QpCJr3FyaiSNYKgLtPZMsvILA0Pc6kX7btBCDDTUq0hl0Lc9lQkWwj_icghFzIElhclw5EMNfnd-a_C1P2sNFXdiS-2RbskS1B9QknSyanEU7CCXwA\\\"},\\\"body\\\":{\\\"command\\\":\\\"usageMonitoring\\\",\\\"sessionId\\\":\\\"1614153212381\\\",\\\"tid\\\":\\\"MG20210224145332238101\\\",\\\"rtid\\\":\\\"MG20210224145332238101\\\",\\\"actualTime\\\":\\\"20210224145332\\\",\\\"app\\\":null,\\\"clientId\\\":null,\\\"userType\\\":\\\"MSISDN\\\",\\\"userValue\\\":\\\"9400631842\\\",\\\"resourceId\\\":null,\\\"resourceName\\\":\\\"Magellan Transaction P1\\\",\\\"requestUnit\\\":\\\"36\\\"}}\"\r",
									"                        //     pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                        //     let jsonParseRequestObjectBody = JSON.parse(jsonParseRequestObject.body);\r",
									"                        //     // pm.expect(jsonParseRequestObjectBody[SensorKey]).to.eql(sensor.toString());\r",
									"                            \r",
									"                        //     // check responseObject\r",
									"                        //     // \"responseObject\":\"\\\"{\\\\\\\"command\\\\\\\":\\\\\\\"usageMonitoring\\\\\\\",\\\\\\\"sessionId\\\\\\\":\\\\\\\"1614153212381\\\\\\\",\\\\\\\"tid\\\\\\\":\\\\\\\"MG20210224145332238101\\\\\\\",\\\\\\\"rtid\\\\\\\":\\\\\\\"MG20210224145332238101\\\\\\\",\\\\\\\"status\\\\\\\":\\\\\\\"200\\\\\\\",\\\\\\\"devMessage\\\\\\\":\\\\\\\"SUCCESS\\\\\\\"}\\\"\"\r",
									"                        //     // pm.expect(jsonParseResponseObject).to.eql(\"\");  \r",
									"                        // }\r",
									"                    }); \r",
									"                }\r",
									"\r",
									"            }\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// InquiryThing\r",
									"InquiryThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptInquiryThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_InquiryThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_InquiryThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestInquiryThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsInquiryThing = {\r",
									"            url: url + provisioningapis + urlThingInquiryThing,\r",
									"            method: 'POST',\r",
									"            header: headersOptInquiryThing,\r",
									"            body: httpRequestInquiryThing\r",
									"        };\r",
									"\r",
									"        // console.log('request InquiryThing');\r",
									"        let response = await reqPromise(optionsInquiryThing);\r",
									"        let jsonDataInquiryThing = await response.json();\r",
									"        // console.log('jsonDataInquiryThing',jsonDataInquiryThing)\r",
									"    \r",
									"        let operationStatusInquiryThing = await jsonDataInquiryThing.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"InquiryThing : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('InquiryThing : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusInquiryThing).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //InquiryThing is Success\r",
									"        pm.test('InquiryThing : OperationStatus Description is '+'\"'+ resultDescriptionInquiryThing+'\"', function () {\r",
									"            pm.expect(operationStatusInquiryThing).to.have.property('Description', resultDescriptionInquiryThing);\r",
									"        });\r",
									"\r",
									"        //Check Data\r",
									"        let thingInfo = await jsonDataInquiryThing.ThingInfo;\r",
									"        console.log('thingInfo',thingInfo);\r",
									"\r",
									"        for(let i=0;i<thingInfo.length;i++){\r",
									"            pm.test('Verify DB Check Data : Charging HTTP(eSim) Report :{ \"'+  pm.environment.get(\"SensorKey_AsgardHTTP\") + '\" : \"'+ pm.environment.get(\"Value_Charging_TST_F2_1_1_003_Sensor\") +'\" }' , function () {\r",
									"                console.log(\"======== Verify DB Check Data ( Expected = Actual) [Charging HTTP(eSim) Report] ==================\");\r",
									"                console.log(\"ThingInfo[\"+ i +\"]StateInfo.Report.\" + pm.environment.get(\"SensorKey_AsgardHTTP\") + \" : \" + thingInfo[i].StateInfo.Report[pm.environment.get(\"SensorKey_AsgardHTTP\")] + \" = \" + JSON.stringify(pm.environment.get(\"Value_Charging_TST_F2_1_1_003_Sensor\")));\r",
									"\r",
									"                pm.expect(thingInfo[i].StateInfo.Report).to.have.property(pm.environment.get(\"SensorKey_AsgardHTTP\"), pm.environment.get(\"Value_Charging_TST_F2_1_1_003_Sensor\"));\r",
									"            });\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"setTimeout(function(){SearchLogFindTid();}, 7000); \r",
									"setTimeout(function(){CheckLog();}, 12000); \r",
									"setTimeout(function(){InquiryThing();}, 20000); \r",
									"// setTimeout(function(){RemoveThingStateInfo();}, 25000); \r",
									"// setTimeout(function(){RemoveThing();}, 30000); \r",
									"// setTimeout(function(){RemoveAccount();}, 35000); \r",
									"// setTimeout(function(){RemovePartner();}, 40000); \r",
									"\r",
									"setTimeout(function(){\r",
									"pm.environment.unset(\"current_timestamp\");\r",
									"pm.environment.unset(\"AccessToken\");\r",
									"pm.environment.unset(\"random_number\");\r",
									"pm.environment.unset(\"PartnerName\");\r",
									"pm.environment.unset(\"MerchantContact\");\r",
									"pm.environment.unset(\"CPID\");\r",
									"pm.environment.unset(\"GetResponse_PartnerId\");\r",
									"pm.environment.unset(\"AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountId\");\r",
									"pm.environment.unset(\"random_IM\");\r",
									"pm.environment.unset(\"random_ICCID\");\r",
									"pm.environment.unset(\"ThingName\");\r",
									"pm.environment.unset(\"GetResponse_ThingID\");\r",
									"pm.environment.unset(\"GetResponse_IMSI\");\r",
									"pm.environment.unset(\"encodedKeys_Authorization_Register\");\r",
									"pm.environment.unset(\"encodedKeys_Authorization_Report\");\r",
									"pm.environment.unset(\"random_Sensor\");\r",
									"pm.environment.unset(\"GetResponse_ThingToken\");\r",
									"pm.environment.unset(\"tid\");\r",
									"pm.environment.unset(\"sessionId\");\r",
									"pm.environment.unset(\"SensorKey_AsgardHTTP\");\r",
									"pm.environment.unset(\"random_Sensor_AsgardHTTP\");\r",
									"pm.environment.unset(\"timestamp\");\r",
									"pm.environment.unset(\"Value_Charging_TST_F2_1_1_003_Sensor\");\r",
									"}, 45000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var Username = pm.environment.get(\"Username\");\r",
									"var Password = pm.environment.get(\"Password\");\r",
									"\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"var controlapis = pm.environment.get(\"controlapis\");\r",
									"var httpapis = pm.environment.get(\"httpapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"pm.environment.set(\"SensorKey_AsgardHTTP\",fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP)\r",
									"pm.environment.set(\"Value_Charging_TST_F2_1_1_003_Sensor\",fieldDataValue.Charging.Value_Charging_TST_F2_1_1_003_Sensor)\r",
									"\r",
									"// Timestamp 2020-12-31T03:03:18+07:00\r",
									"var timestamp = fieldDataValue.AsgardHTTP.Value_AsgardHTTP_Report_Timestamp;\r",
									"// console.log('currentTmestamp',currentTmestamp);\r",
									"pm.environment.set(\"timestamp\", timestamp);\r",
									"\r",
									"//format YYYYMMDDHHMMSSS\r",
									"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
									"// console.log('currentTmestamp',currentTmestamp);\r",
									"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var Basic = pm.environment.get(\"Basic\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- statusCodeList --------------//\r",
									"//set variable to statusCodeList JSON.parse\r",
									"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
									"//set global variable to statusCode 200\r",
									"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
									"//set global variable to statusCode 201\r",
									"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultCodeList --------------//\r",
									"//set variable to resultCodeList JSON.parse\r",
									"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
									"//set global variable to resultCode \"20000\"\r",
									"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
									"//set global variable to resultCode \"20100\"\r",
									"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionSuccessList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
									"//set global variable to resultDescription \"SignInProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
									"//set global variable to resultDescription \"ValidateTokenProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionValidateToken\", resultDescriptionSuccessList.resultDescriptionValidateToken);\r",
									"//set global variable to resultDescription \"CreateThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThing\", resultDescriptionSuccessList.resultDescriptionCreateThing);\r",
									"//set global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThingStateInfo\", resultDescriptionSuccessList.resultDescriptionCreateThingStateInfo);\r",
									"//set global variable to resultDescription \"Register is Success\"\r",
									"pm.globals.set(\"resultDescriptionRegisterIsSuccess\", resultDescriptionSuccessList.resultDescriptionRegisterIsSuccess);\r",
									"//set global variable to resultDescription \"ReportProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionReportProcessIsSuccess\", resultDescriptionSuccessList.resultDescriptionReportProcessIsSuccess);\r",
									"//set global variable to resultDescription \"The requested operation was successfully.\"\r",
									"pm.globals.set(\"resultDescriptionTheRequestedOperationWasSuccessfully\", resultDescriptionSuccessList.resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"//set global variable to resultDescription \"InquiryThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionInquiryThing\", resultDescriptionSuccessList.resultDescriptionInquiryThing);\r",
									"//set global variable to resultDescription \"InquiryAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionInquiryAccount\", resultDescriptionSuccessList.resultDescriptionInquiryAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- HeaderList --------------//\r",
									"//set variable to HeaderList JSON.parse\r",
									"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
									"//---------------- set globals Other --------------//\r",
									"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
									"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
									"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
									"//set global variable to kbn-versio \"7.5.1\"\r",
									"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Signin_ --------------//\r",
									"//set global variable to x_ais_OrderRef \"Signin_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
									"//set global variable to x_ais_OrderRef \"ValidateToken\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ValidateToken\", HeaderList.Signin.x_ais_OrderRef_ValidateToken);\r",
									"//set global variable to x_ais_OrderDesc \"ValidateToken\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_ValidateToken\", HeaderList.Signin.x_ais_OrderDesc_ValidateToken);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Account --------------//\r",
									"//set global variable to x_ais_OrderRef \"InquiryAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_InquiryAccount\", HeaderList.Account.x_ais_OrderRef_InquiryAccount);\r",
									"//set global variable to x_ais_OrderDesc \"InquiryAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_InquiryAccount\", HeaderList.Account.x_ais_OrderDesc_InquiryAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Thing --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThing\", HeaderList.Thing.x_ais_OrderRef_CreateThing);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThing\", HeaderList.Thing.x_ais_OrderDesc_CreateThing);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThing\", HeaderList.Thing.x_ais_OrderRef_RemoveThing);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThing\", HeaderList.Thing.x_ais_OrderDesc_RemoveThing);\r",
									"//set global variable to x_ais_OrderRef \"InquiryThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_InquiryThing\", HeaderList.Thing.x_ais_OrderRef_InquiryThing);\r",
									"//set global variable to x_ais_OrderDesc \"InquiryThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_InquiryThing\", HeaderList.Thing.x_ais_OrderDesc_InquiryThing);\r",
									"//set global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_RemoveThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_RemoveThingStateInfo);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals AsgardHTTP --------------//\r",
									"//set global variable to x_ais_OrderRef \"RegisHTTP_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RegisHTTP\", HeaderList.AsgardHTTP.x_ais_OrderRef_RegisHTTP);\r",
									"//set global variable to x_ais_OrderDesc \"Register Thing in MG\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RegisHTTP\", HeaderList.AsgardHTTP.x_ais_OrderDesc_RegisHTTP);\r",
									"//set global variable to x_ais_OrderRef \"ReportHTTP_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ReportHTTP\", HeaderList.AsgardHTTP.x_ais_OrderRef_ReportHTTP);\r",
									"//set global variable to x_ais_OrderDesc \"Report Data to MG\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_ReportHTTP\", HeaderList.AsgardHTTP.x_ais_OrderDesc_ReportHTTP);\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"SignInProcess is Success\"\r",
									"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
									"//get global variable to resultDescription \"ValidateTokenProcess is Success\"\r",
									"var resultDescriptionValidateToken = pm.globals.get(\"resultDescriptionValidateToken\");\r",
									"//get global variable to resultDescription \"CreateThing is Success\"\r",
									"var resultDescriptionCreateThing = pm.globals.get(\"resultDescriptionCreateThing\");\r",
									"//get global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"var resultDescriptionCreateThingStateInfo = pm.globals.get(\"resultDescriptionCreateThingStateInfo\");\r",
									"//get global variable to resultDescription \"The requested operation was successfully.\"\r",
									"var resultDescriptionTheRequestedOperationWasSuccessfully = pm.globals.get(\"resultDescriptionTheRequestedOperationWasSuccessfully\");\r",
									"//get global variable to resultDescription \"InquiryAccount is Success\"\r",
									"var resultDescriptionInquiryAccount = pm.globals.get(\"resultDescriptionInquiryAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- urlRouteList --------------//\r",
									"//set variable to urlRouteList JSON.parse\r",
									"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
									"//---------------- set url Create --------------//\r",
									"//set global variable to url \"/api/v1/auth/signin\"\r",
									"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
									"//set global variable to url \"/api/v1/auth/ValidateToken\"\r",
									"pm.globals.set(\"urlValidateToken\", urlRouteList.Signin.urlValidateToken);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"pm.globals.set(\"urlThingCreateThing\", urlRouteList.Thing.urlThingCreateThing);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"pm.globals.set(\"urlThingCreateThingStateInfo\", urlRouteList.Thing.urlThingCreateThingStateInfo);\r",
									"//set global variable to url \"/api/register/sim/v1\"\r",
									"pm.globals.set(\"urlAsgardHTTPeSimRegister\", urlRouteList.AsgardHTTPeSim.urlAsgardHTTPeSimRegister);\r",
									"//set global variable to url \"/api/report/sim/v1\"\r",
									"pm.globals.set(\"urlAsgardHTTPeSimReport\", urlRouteList.AsgardHTTPeSim.urlAsgardHTTPeSimReport);\r",
									"//set global variable to url \"/api/v1/Account/InquiryAccount\"\r",
									"pm.globals.set(\"urlAccountInquiryAccount\", urlRouteList.Account.urlAccountInquiryAccount);\r",
									"//---------------- get url Create --------------//\r",
									"//get global variable to url \"/api/v1/auth/signin\"\r",
									"var urlSignin = pm.globals.get(\"urlSignin\");\r",
									"//get global variable to url \"/api/v1/auth/ValidateToken\"\r",
									"var urlValidateToken = pm.globals.get(\"urlValidateToken\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"var urlThingCreateThing = pm.globals.get(\"urlThingCreateThing\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"var urlThingCreateThingStateInfo = pm.globals.get(\"urlThingCreateThingStateInfo\");\r",
									"//get global variable to url \"/api/register/sim/v1\"\r",
									"var urlAsgardHTTPeSimRegister = pm.globals.get(\"urlAsgardHTTPeSimRegister\");\r",
									"//get global variable to url \"/api/report/sim/v1\"\r",
									"var urlAsgardHTTPeSimReport = pm.globals.get(\"urlAsgardHTTPeSimReport\");\r",
									"//---------------- set url Inquiry --------------//\r",
									"//get global variable to url \"/api/v1/Account/InquiryAccount\"\r",
									"var urlAccountInquiryAccount = pm.globals.get(\"urlAccountInquiryAccount\");\r",
									"//set global variable to url \"/api/v1/Thing/InquiryThing\"\r",
									"pm.globals.set(\"urlThingInquiryThing\", urlRouteList.Thing.urlThingInquiryThing);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Signin_ --------------//\r",
									"//get global variable to x_ais_OrderRef \"Signin_\"\r",
									"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
									"//get global variable to x_ais_OrderRef \"ValidateToken_\"\r",
									"var x_ais_OrderRef_ValidateToken = pm.globals.get(\"x_ais_OrderRef_ValidateToken\");\r",
									"//get global variable to x_ais_OrderDesc \"ValidateToken\"\r",
									"var x_ais_OrderDesc_ValidateToken = pm.globals.get(\"x_ais_OrderDesc_ValidateToken\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"InquiryAccount_\"\r",
									"var x_ais_OrderRef_InquiryAccount = pm.globals.get(\"x_ais_OrderRef_InquiryAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"InquiryAccount\"\r",
									"var x_ais_OrderDesc_InquiryAccount = pm.globals.get(\"x_ais_OrderDesc_InquiryAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"var x_ais_OrderRef_CreateThing = pm.globals.get(\"x_ais_OrderRef_CreateThing\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"var x_ais_OrderDesc_CreateThing = pm.globals.get(\"x_ais_OrderDesc_CreateThing\");\r",
									"//get global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"var x_ais_OrderRef_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderRef_CreateThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"var x_ais_OrderDesc_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_CreateThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals AsgardHTTP --------------//\r",
									"//get global variable to x_ais_OrderRef \"RegisHTTP_\"\r",
									"var x_ais_OrderRef_RegisHTTP = pm.globals.get(\"x_ais_OrderRef_RegisHTTP\");\r",
									"//get global variable to x_ais_OrderDesc \"Register Thing in MG\"\r",
									"var x_ais_OrderDesc_RegisHTTP = pm.globals.get(\"x_ais_OrderDesc_RegisHTTP\");\r",
									"//------------------------------------------------------------//\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// Signin get token\r",
									"Signin = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSignin = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_Signin + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_UserAuthentication,\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestSignin = {\r",
									"            mode: 'raw',\r",
									"            raw:\r",
									"                JSON.stringify({\r",
									"                    username: Username,\r",
									"                    password: Password\r",
									"                })\r",
									"        };\r",
									"\r",
									"        let optionsSignin = {\r",
									"            url: url + provisioningapis + urlSignin,\r",
									"            method: 'POST',\r",
									"            header: headersOptSignin,\r",
									"            body: httpRequestSignin\r",
									"        };\r",
									"        // console.log('request Signin');\r",
									"        let response = await reqPromise(optionsSignin);\r",
									"        let jsonDataSignin = await response.json();\r",
									"\r",
									"        // setAccessToken\r",
									"        await pm.environment.set(\"AccessToken\", jsonDataSignin.AccessToken);\r",
									"\r",
									"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('Signin : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // SignInProcess is Success\r",
									"        pm.test('Signin : OperationStatus Description is ' + '\"' + resultDescriptionSuccessSignIn + '\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
									"        });\r",
									"\r",
									"        //set random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //set PartnerName\r",
									"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
									"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
									"        //set MerchantContact\r",
									"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
									"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
									"        // set CPID\r",
									"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
									"        pm.environment.set(\"CPID\", CPIDValue)\r",
									"\r",
									"        //Accountname\r",
									"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
									"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// ValidateToken\r",
									" ValidateToken = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptValidateToken = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_ValidateToken + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_ValidateToken,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestValidateToken = {\r",
									"            mode: 'raw',\r",
									"            raw: \r",
									"            JSON.stringify({\r",
									"                \"AccessToken\": pm.environment.get(\"AccessToken\")\r",
									"            })\r",
									"        };  \r",
									"        \r",
									"        let optionsValidateToken = {\r",
									"            url: url + provisioningapis + urlValidateToken,\r",
									"            method: 'POST',\r",
									"            header: headersOptValidateToken,\r",
									"            body: httpRequestValidateToken\r",
									"        };\r",
									"        // console.log('request ValidateToken');\r",
									"        let response = await reqPromise(optionsValidateToken);\r",
									"        let jsonDataValidateToken = await response.json();\r",
									"        let operationStatusValidateToken = await jsonDataValidateToken.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"ValidateToken : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('ValidateToken : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusValidateToken).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // ValidateTokenProcess is Success\r",
									"        pm.test('ValidateToken : OperationStatus Description is '+'\"'+ resultDescriptionValidateToken+'\"', function () {\r",
									"            pm.expect(operationStatusValidateToken).to.have.property('Description', resultDescriptionValidateToken);\r",
									"        });\r",
									" \r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// InquiryAccount\r",
									"InquiryAccount = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptInquiryAccount = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_InquiryAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_InquiryAccount,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestInquiryAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"AccountName\": \"9400631842\"\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsInquiryAccount = {\r",
									"            url: url + provisioningapis + urlAccountInquiryAccount,\r",
									"            method: 'POST',\r",
									"            header: headersOptInquiryAccount,\r",
									"            body: httpRequestInquiryAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request InquiryAccount');\r",
									"        let response = await reqPromise(optionsInquiryAccount);\r",
									"        let jsonDataInquiryAccount = await response.json();\r",
									"        // console.log('jsonDataInquiryAccount',jsonDataInquiryAccount)\r",
									"\r",
									"        let operationStatusInquiryAccount = await jsonDataInquiryAccount.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"InquiryAccount : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('InquiryAccount : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusInquiryAccount).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //InquiryAccount is Success\r",
									"        pm.test('CreateAccount : OperationStatus Description is ' + '\"' + resultDescriptionInquiryAccount + '\"', function () {\r",
									"            pm.expect(operationStatusInquiryAccount).to.have.property('Description', resultDescriptionInquiryAccount);\r",
									"        });\r",
									"        \r",
									"        // GetResponse_AccountName\r",
									"        pm.environment.set(\"GetResponse_AccountName\", jsonDataInquiryAccount.PartnerInfo[0].AccountInfo[0].AccountName)\r",
									"        // GetResponse_AccountId\r",
									"        pm.environment.set(\"GetResponse_AccountId\", jsonDataInquiryAccount.PartnerInfo[0].AccountInfo[0].AccountId)\r",
									"        // random_IM\r",
									"        pm.environment.set(\"random_IM\", _.random(10000000, 99999999) + \" \" + _.random(1000000, 9999999))\r",
									"        // random_ICCID\r",
									"        pm.environment.set(\"random_ICCID\", _.random(1000000, 9999999) + \" \" + _.random(100000, 999999))\r",
									"        // random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //ThingName\r",
									"        let thingNameValue = fieldDataValue.Thing.ThingNameValue; // \"Sensor_TestThingName\"\r",
									"        pm.environment.set(\"ThingName\", thingNameValue + pm.environment.get(\"random_number\"))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThing\r",
									"CreateThing = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThing = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateThing + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateThing,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey': pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreateThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingName\": pm.environment.get(\"ThingName\"),\r",
									"                \"IMEI\": pm.environment.get(\"random_IM\"),\r",
									"                \"IMSI\": pm.environment.get(\"random_IM\"),\r",
									"                \"ICCID\": pm.environment.get(\"random_ICCID\"),\r",
									"                \"RouteUrl\": fieldDataValue.Thing.RouteUrlValue , //[\"http://10.12.3.4:2019/api/information/AddInformation\"]\r",
									"                \"RouteInfo\": {\r",
									"                    \"MIMO_ID\": fieldDataValue.Thing.RouteInfoMIMOIDValue , //\"606edada\"\r",
									"                    \"MIMO_SerialNo\": fieldDataValue.Thing.RouteInfoMIMOSerialNoValue //5466758878\r",
									"                },\r",
									"                \"RouteFlag\": {\r",
									"                    \"ThingName\": fieldDataValue.Thing.RouteFlagThingNameValue , //true\r",
									"                    \"ThingToken\": fieldDataValue.Thing.RouteFlagThingTokenValue, //true\r",
									"                    \"IMEI\": fieldDataValue.Thing.RouteFlagIMEIValue, //true\r",
									"                    \"ICCID\": fieldDataValue.Thing.RouteFlagICCIDValue, //true\r",
									"                    \"RouteInfo\": fieldDataValue.Thing.RouteFlagRouteInfoValue //true\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateThing = {\r",
									"            url: url + provisioningapis + urlThingCreateThing,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThing,\r",
									"            body: httpRequestCreateThing\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThing');\r",
									"        let response = await reqPromise(optionsCreateThing);\r",
									"        let jsonDataCreateThing = await response.json();\r",
									"        // console.log('jsonDataCreateThing',jsonDataCreateThing)\r",
									"\r",
									"        let operationStatusCreateThing = await jsonDataCreateThing.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateThing : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateThing : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateThing is Success\r",
									"        pm.test('CreateThing : OperationStatus Description is ' + '\"' + resultDescriptionCreateThing + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Description', resultDescriptionCreateThing);\r",
									"        });\r",
									"\r",
									"        pm.environment.set(\"GetResponse_ThingID\", jsonDataCreateThing.ThingInfo.ThingId)\r",
									"        pm.environment.set(\"GetResponse_IMSI\", jsonDataCreateThing.ThingInfo.IMSI)\r",
									"        \r",
									"        let keys = pm.environment.get(\"GetResponse_IMSI\") + \":\" + pm.environment.get(\"IpAddress\");\r",
									"        // console.log(\"keys\", keys);\r",
									"        let encodedKeys = CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(keys));\r",
									"        pm.environment.set(\"encodedKeys_Authorization_Register\", encodedKeys);\r",
									"\r",
									"        //Get Random Sensor \r",
									"        pm.environment.set(\"random_Sensor\", _.random(100, 999))\r",
									"\r",
									"        //Get Random Sensor AsgardHTTP\r",
									"        pm.environment.set(\"random_Sensor_AsgardHTTP\", _.random(100, 999))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThingStateInfo\r",
									"CreateThingStateInfo = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThingStateInfo = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateThingStateInfo,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey': pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        // {\"AA\" : pm.environment.get(\"random_Sensor\")}\r",
									"        let sensorValue = {};\r",
									"        sensorValue[fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP] = pm.environment.get(\"random_Sensor\");\r",
									"        // console.log('sensorValue',sensorValue);\r",
									"        \r",
									"        let httpRequestCreateThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": [\r",
									"                    pm.environment.get(\"GetResponse_ThingID\")\r",
									"                ],\r",
									"                \"Type\": fieldDataValue.CreateThingStateInfo.Type_Report,\r",
									"                \"Sensor\": sensorValue\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingCreateThingStateInfo,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThingStateInfo,\r",
									"            body: httpRequestCreateThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThingStateInfo');\r",
									"        let response = await reqPromise(optionsCreateThingStateInfo);\r",
									"        let jsonDataCreateThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataCreateThingStateInfo',jsonDataCreateThingStateInfo)\r",
									"\r",
									"        let operationStatusCreateThingStateInfo = await jsonDataCreateThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"CreateThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //CreateThingStateInfo is Success\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Description is ' + '\"' + resultDescriptionCreateThingStateInfo + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Description', resultDescriptionCreateThingStateInfo);\r",
									"        });\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// AsgardHTTPeSimRegister\r",
									"AsgardHTTPeSimRegister = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptAsgardHTTPeSimRegister = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_RegisHTTP + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_RegisHTTP,\r",
									"            'Authorization': Basic + ' ' + pm.environment.get(\"encodedKeys_Authorization_Register\")\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestAsgardHTTPeSimRegister = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({})\r",
									"        };\r",
									"\r",
									"        let optionsAsgardHTTPeSimRegister = {\r",
									"            url: url + httpapis + urlAsgardHTTPeSimRegister,\r",
									"            method: 'POST',\r",
									"            header: headersOptAsgardHTTPeSimRegister,\r",
									"            body: httpRequestAsgardHTTPeSimRegister\r",
									"        };\r",
									"\r",
									"        // console.log('request AsgardHTTPEsimRegister');\r",
									"        let response = await reqPromise(optionsAsgardHTTPeSimRegister);\r",
									"        let jsonDataAsgardHTTPeSimRegister = await response.json();\r",
									"        // console.log('jsonDataCreateThingStateInfo',jsonDataAsgardHTTPeSimRegister)\r",
									"        let operationStatusAsgardHTTPeSimRegister = await jsonDataAsgardHTTPeSimRegister.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"Asgard HTTP(eSim) Register : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('Asgard HTTP(eSim) Register : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusAsgardHTTPeSimRegister).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"\r",
									"        // The requested operation was successfully.\r",
									"        pm.test('Asgard HTTP(eSim) Register : OperationStatus DeveloperMessage is ' + '\"' + resultDescriptionTheRequestedOperationWasSuccessfully + '\"', function () {\r",
									"            pm.expect(operationStatusAsgardHTTPeSimRegister).to.have.property('DeveloperMessage', resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"        });\r",
									"\r",
									"        await pm.environment.set(\"GetResponse_ThingToken\", jsonDataAsgardHTTPeSimRegister.ThingToken)\r",
									"        let keys2 = await pm.environment.get(\"GetResponse_ThingToken\") + \":\" + pm.environment.get(\"IpAddress\");        \r",
									"        let encodedKeys2 = await CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(keys2));\r",
									"        pm.environment.set(\"encodedKeys_Authorization_Report\", encodedKeys2)\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"Signin();\r",
									"setTimeout(async function(){await ValidateToken();}, 2000);\r",
									"setTimeout(async function(){await InquiryAccount();}, 3000); \r",
									"setTimeout(async function(){await CreateThing();}, 4000); \r",
									"setTimeout(async function(){await CreateThingStateInfo();}, 5000); \r",
									"setTimeout(async function () { await AsgardHTTPeSimRegister(); }, 7000); \r",
									"setTimeout(async function () { }, 7500); //for wait value encodedKeys_Authorization_Report"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-ais-UserName",
								"type": "text",
								"value": "{{x_ais_UserName_AisPartner}}"
							},
							{
								"key": "x-ais-OrderRef",
								"value": "{{x_ais_OrderRef_ReportHTTP}}{{current_timestamp}}"
							},
							{
								"key": "x-ais-OrderDesc",
								"type": "text",
								"value": "{{x_ais_OrderDesc_ReportHTTP}}"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{Basic}} {{encodedKeys_Authorization_Report}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Payload\": {\r\n        \"{{SensorKey_AsgardHTTP}}\" : \"{{Value_Charging_TST_F2_1_1_003_Sensor}}\"\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{url}}{{httpapis}}/api/report/sim/v1",
							"host": [
								"{{url}}{{httpapis}}"
							],
							"path": [
								"api",
								"report",
								"sim",
								"v1"
							]
						},
						"description": "Type:Desire"
					},
					"response": []
				},
				{
					"name": "ChargingHTTPeSim_Report_TST_F2_1_1_004_Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"var controlapis = pm.environment.get(\"controlapis\");\r",
									"var httpapis = pm.environment.get(\"httpapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var Basic = pm.environment.get(\"Basic\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to xAisOrderRef \"RemoveThing_\"\r",
									"var x_ais_OrderRef_RemoveThing = pm.globals.get(\"x_ais_OrderRef_RemoveThing\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"var x_ais_OrderDesc_RemoveThing = pm.globals.get(\"x_ais_OrderDesc_RemoveThing\");\r",
									"//get global variable to xAisOrderRef \"InquiryThing_\"\r",
									"var x_ais_OrderRef_InquiryThing = pm.globals.get(\"x_ais_OrderRef_InquiryThing\");\r",
									"//get global variable to x_ais_OrderDesc \"InquiryThing\"\r",
									"var x_ais_OrderDesc_InquiryThing = pm.globals.get(\"x_ais_OrderDesc_InquiryThing\");\r",
									"//get global variable to xAisOrderRef \"RemoveThingStateInfo_\"\r",
									"var x_ais_OrderRef_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderRef_RemoveThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThingStateInfo\"\r",
									"var x_ais_OrderDesc_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_RemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals AsgardHTTP --------------//\r",
									"//get global variable to x_ais_OrderRef \"ReportHTTP_\"\r",
									"var x_ais_OrderRef_ReportHTTP = pm.globals.get(\"x_ais_OrderRef_ReportHTTP\");\r",
									"//get global variable to x_ais_OrderDesc \"Report Data to MG\"\r",
									"var x_ais_OrderDesc_ReportHTTP = pm.globals.get(\"x_ais_OrderDesc_ReportHTTP\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get url Remove --------------//\r",
									"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
									"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"var urlThingRemoveThing = pm.globals.get(\"urlThingRemoveThing\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"var urlThingRemoveThingStateInfo = pm.globals.get(\"urlThingRemoveThingStateInfo\");\r",
									"//---------------- get url Inquiry --------------//\r",
									"//get global variable to url \"/api/v1/Thing/InquiryThingr\"\r",
									"var urlThingInquiryThing = pm.globals.get(\"urlThingInquiryThing\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"RemovePartner is Success\"\r",
									"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
									"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
									"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
									"//get global variable to resultDescription \"RemoveThing is Success\"\r",
									"var resultDescriptionRemoveThing = pm.globals.get(\"resultDescriptionRemoveThing\");\r",
									"//get global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"var resultDescriptionRemoveThingStateInfo = pm.globals.get(\"resultDescriptionRemoveThingStateInfo\");\r",
									"//get global variable to resultDescription \"InquiryThing is Success\"\r",
									"var resultDescriptionInquiryThing = pm.globals.get(\"resultDescriptionInquiryThing\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to resultDescription \"ReportProcess is Success\"\r",
									"// var resultDescriptionReportProcessIsSuccess = pm.globals.get(\"resultDescriptionReportProcessIsSuccess\");\r",
									"//get global variable to resultDescription \"The requested operation was successfully.\"\r",
									"var resultDescriptionTheRequestedOperationWasSuccessfully = pm.globals.get(\"resultDescriptionTheRequestedOperationWasSuccessfully\");\r",
									"//------------------------------------------------------------//\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Asgard HTTP(eSim) Report : Status code is \" + statusCodeSuccess, function () {\r",
									"    pm.response.to.have.status(statusCodeSuccess);\r",
									"});\r",
									"\r",
									"pm.test('Asgard HTTP(eSim) Report : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeSuccess);\r",
									"});\r",
									"\r",
									"// pm.test('Asgard HTTP(eSim) Report : OperationStatus Description is '+'\"'+ resultDescriptionReportProcessIsSuccess+'\"', function () {\r",
									"//     pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionReportProcessIsSuccess);\r",
									"// });\r",
									"\r",
									"pm.test('Asgard HTTP(eSim) Report : OperationStatus DeveloperMessage is '+'\"'+ resultDescriptionTheRequestedOperationWasSuccessfully+'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"});\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"//---------------- LogDefaultValue --------------//\r",
									"//set variable to LogDefaultValue JSON.parse\r",
									"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
									"// console.log('LogDefaultValue',LogDefaultValue);\r",
									"//---------------- set globals Other --------------//\r",
									"\r",
									"var SearchLog = LogDefaultValue.SearchLog;\r",
									"// console.log('SearchLog',SearchLog);\r",
									"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
									"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
									"var kbn_version = SearchLog.header.kbn_version;\r",
									"var authorization = SearchLog.header.Authorization;\r",
									"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
									"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
									"var namespace = LogDefaultValue.Other.namespace;\r",
									"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
									"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
									"var header_x_ais_username = LogDefaultValue.Other.header_x_ais_username;\r",
									"var methodPost = LogDefaultValue.Other.methodPost;\r",
									"\r",
									"// Detail\r",
									"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
									"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
									"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
									"\r",
									"// Summary\r",
									"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
									"var identitySummary = \"\";\r",
									"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
									"\r",
									"// Asgard.Http.APIs\r",
									"var applicationName = LogDefaultValue.AsgardHTTP.applicationName;\r",
									"var cmdName = LogDefaultValue.AsgardHTTP.cmdNameReport;\r",
									"var endPointNameRabbitMQ = LogDefaultValue.AsgardHTTP.endPointNameRabbitMQ;\r",
									"var containerId = LogDefaultValue.AsgardHTTP.containerId;\r",
									"var requestObjectUrlStaging = LogDefaultValue.AsgardHTTP.requestObjectUrlReportMgStaging;\r",
									"var urlReport  = LogDefaultValue.AsgardHTTP.urlReport;\r",
									"\r",
									"// Insight.Charging.APIs\r",
									"var applicationNameCharging = LogDefaultValue.Charging.applicationName;\r",
									"var cmdNameCharging = LogDefaultValue.Charging.cmdName;\r",
									"var endPointNameRocsService = LogDefaultValue.Charging.endPointName;\r",
									"var containerIdCharging = LogDefaultValue.Charging.containerId;\r",
									"var urlCharging  = LogDefaultValue.Charging.urlCharging;\r",
									"\r",
									"// Check CDR (Summary Log) and EDR (Detail Log)\r",
									"SearchLogFindTid = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSearchLogFindTid = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = x_ais_OrderRef_ReportHTTP + current_timestamp; \r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestSearchLogFindTid = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"phrase\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"\r",
									"        let optionsSearchLogFindTid = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptSearchLogFindTid,\r",
									"            body: httpRequestSearchLogFindTid\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsSearchLogFindTid);\r",
									"        let jsonDataSearchLogFindTid = await response.json();\r",
									"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
									"        // console.log('hits',hits)\r",
									"  \r",
									"        // find tid\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            // let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"        \r",
									"            // console.log('logType',logType)\r",
									"             console.log('applicationNameValue',applicationNameValue)\r",
									"             console.log('applicationName',applicationName)\r",
									"            if(applicationNameValue == applicationName){\r",
									"                let tid = hits[i]._source.cauldron.tid;\r",
									"                pm.environment.set(\"tid\", tid);\r",
									"                let sessionId = hits[i]._source.cauldron.sessionId;\r",
									"                pm.environment.set(\"sessionId\", sessionId);\r",
									"                break;\r",
									"           }\r",
									"        }\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"CheckLog = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCheckLog = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = pm.environment.get(\"sessionId\");\r",
									"\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"         console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestCheckLog = {\r",
									"            mode: 'raw',\r",
									"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"phrase\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"        let optionsCheckLog = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptCheckLog,\r",
									"            body: httpRequestCheckLog\r",
									"        }; \r",
									"        let response = await reqPromise(optionsCheckLog);\r",
									"        let jsonDataCheckLog = await response.json();\r",
									"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
									"        \r",
									"        // //200\r",
									"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });     \r",
									"        \r",
									"        let hits = jsonDataCheckLog.hits.hits\r",
									"         console.log('hits',hits)\r",
									"  \r",
									"        // find logType\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            //  let logType = hits[i]._source.cauldron.logType\r",
									"            let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"           \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            \r",
									"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
									"            // console.log('resultDataLog',resultDataLog)\r",
									"\r",
									"            let tidControl = x_ais_OrderRef_ReportHTTP  + current_timestamp;\r",
									"            // console.log(tidControl);\r",
									"            if(applicationNameValue == applicationName){\r",
									"                 \r",
									"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and Asgard.Http.APIs\r",
									"                    pm.test(\"Check Summary Log : Asgard_HTTP(eSim) Report\" , function () {\r",
									"                        console.log(\"======== Check Summary Log ( Expected = Actual) [Asgard_HTTP(eSim) Report] ==================\");\r",
									"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
									"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
									"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeSuccess);\r",
									"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
									"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
									"                        // console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
									"\r",
									"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
									"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
									"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeSuccess); \r",
									"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionTheRequestedOperationWasSuccessfully); \r",
									"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
									"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"\r",
									"                        let thingId = pm.environment.get(\"GetResponse_ThingID\");\r",
									"                        let imei = (pm.environment.get(\"random_IM\")).replace(\" \", \"\");\r",
									"                        let imsi = (pm.environment.get(\"GetResponse_IMSI\")).replace(\" \", \"\");\r",
									"                        let customUrl= urlCheckLog + requestObjectUrlStaging;\r",
									"\r",
									"                        // check identity\r",
									"                        // \"identity\":\"{\\\"Imei\\\":\\\"496151103122639\\\",\\\"ThingId\\\":\\\"6013965896d0ed0001f5a46d\\\",\\\"Imsi\\\":\\\"496151103122639\\\"}\"\r",
									"                        let dataSummaryIdentity = JSON.parse(resultDataLog.identity);\r",
									"\r",
									"                        console.log(\"identity.ThingId : \" + dataSummaryIdentity.ThingId + \" = \" + thingId);\r",
									"                        console.log(\"identity.Imei : \" + dataSummaryIdentity.Imei + \" = \" + imei);\r",
									"                        console.log(\"identity.Imsi : \" + dataSummaryIdentity.Imsi + \" = \" + imsi);\r",
									"\r",
									"                        pm.expect(dataSummaryIdentity.ThingId).to.eql(thingId); \r",
									"                        pm.expect(dataSummaryIdentity.Imei).to.eql(imei); \r",
									"                        pm.expect(dataSummaryIdentity.Imsi).to.eql(imsi); \r",
									"\r",
									"                        // check custom\r",
									"                        // \"custom\":{\"Imsi\":[\"496151103122639\"],\"url\":\"mg-staging.sandais.com/api/report/sim/v1\",\"Imei\":[\"496151103122639\"],\"ThingID\":[\"6013965896d0ed0001f5a46d\"]}\r",
									"                        \r",
									"                        let customData = resultDataLog.custom.customData\r",
									"\r",
									"                        console.log(\"custom.url : \" + customData.url + \" = \" + customUrl);\r",
									"                        console.log(\"custom.Imei[0] : \" + customData.Imei[0] + \" = \" + imei);\r",
									"                        console.log(\"custom.Imsi[0] : \" + customData.Imsi[0] + \" = \" + imsi);\r",
									"                        console.log(\"custom.ThingID[0] : \" + customData.ThingID[0] + \" = \" + thingId);\r",
									"\r",
									"                        pm.expect(customData.url).to.eql(customUrl); \r",
									"                        pm.expect(customData.Imei[0]).to.eql(imei); \r",
									"                        pm.expect(customData.Imsi[0]).to.eql(imsi); \r",
									"                        pm.expect(customData.ThingID[0]).to.eql(thingId); \r",
									"                    }); \r",
									"                }\r",
									"\r",
									"                if(logType == logTypeDetail && (applicationNameValue == applicationName) ){ //'Detail' and Asgard.Http.APIs\r",
									"\r",
									"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
									"                    // console.log('endPointNameValue ',endPointNameValue)\r",
									"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [Charging HTTP(eSim) Report]\", function () {\r",
									"                        console.log(\"======== Check Detail Log ( Expected = Actual) [Charging HTTP(eSim) Report] ==================\");\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
									"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
									"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
									"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
									"\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
									"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
									"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
									"\r",
									"                        let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
									"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
									"                        let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
									"                            // console.log('jsonParseResponseObject',jsonParseResponseObject); \r",
									"                        let url = urlReport; \r",
									"                        let x_ais_orderref = x_ais_OrderRef_ReportHTTP + current_timestamp;\r",
									"                        let x_ais_orderdesc = x_ais_OrderDesc_ReportHTTP;\r",
									"                        let x_ais_username = x_ais_UserName_AisPartner;\r",
									"                        let authorization = Basic + ' ' + pm.environment.get(\"encodedKeys_Authorization_Report\");\r",
									"                        let imei = (pm.environment.get(\"random_IM\")).replace(\" \", \"\");\r",
									"                        let imsi = (pm.environment.get(\"GetResponse_IMSI\")).replace(\" \", \"\");\r",
									"                        let thingId = pm.environment.get(\"GetResponse_ThingID\");\r",
									"                        let customUrl= urlCheckLog + requestObjectUrlStaging;\r",
									"                        let SensorKey = fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP;\r",
									"                        let sensor = pm.environment.get(\"Value_Charging_TST_F2_1_1_004_Sensor\");\r",
									"                        let timestamp = pm.environment.get(\"timestamp\");\r",
									"\r",
									"                        if( endPointNameValue == undefined){\r",
									"                            // check requestObject\r",
									"                            // \"requestObject\":\"{\\\"url\\\":\\\"/api/report/sim/v1\\\",\\\"method\\\":\\\"POST\\\",\\\"headers\\\":{\\\"Cache-Control\\\":\\\"no-cache\\\",\\\"Content-Type\\\":\\\"application/json\\\",\\\"Accept\\\":\\\"*/*\\\",\\\"Accept-Encoding\\\":\\\"gzip,deflate,br\\\",\\\"Authorization\\\":\\\"Basic NDk2MTUxMTAzMTIyNjM5OjEuMi4zLjQ=\\\",\\\"Host\\\":\\\"mg-staging.sandais.com\\\",\\\"User-Agent\\\":\\\"PostmanRuntime/7.26.8\\\",\\\"Content-Length\\\":\\\"2\\\",\\\"x-real-ip\\\":\\\"171.96.174.10\\\",\\\"x-forwarded-for\\\":\\\"171.96.174.10\\\",\\\"x-forwarded-proto\\\":\\\"https\\\",\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"ReportHTTP_202101291701676\\\",\\\"x-ais-orderdesc\\\":\\\"Report Data to MG\\\",\\\"postman-token\\\":\\\"83bc76b4-8538-4a10-94fc-8b9cc1143ec8\\\",\\\"x-request-id\\\":\\\"bbf6c560-8bea-4d53-87d8-28a3f3664d37\\\",\\\"x-b3-traceid\\\":\\\"eb252eaef48d4ec507b32acd0a8dc573\\\",\\\"x-b3-spanid\\\":\\\"07b32acd0a8dc573\\\",\\\"x-b3-sampled\\\":\\\"0\\\",\\\"x-ais-SessionId\\\":\\\"1611896410502\\\",\\\"identity\\\":\\\"{\\\\\\\"Imei\\\\\\\":\\\\\\\"496151103122639\\\\\\\",\\\\\\\"ThingID\\\\\\\":\\\\\\\"6013965896d0ed0001f5a46d\\\\\\\",\\\\\\\"Imsi\\\\\\\":\\\\\\\"496151103122639\\\\\\\"}\\\",\\\"custom\\\":\\\"{\\\\\\\"Imsi\\\\\\\":[\\\\\\\"496151103122639\\\\\\\"],\\\\\\\"url\\\\\\\":\\\\\\\"mg-staging.sandais.com/api/register/sim/v1\\\\\\\",\\\\\\\"Imei\\\\\\\":[\\\\\\\"496151103122639\\\\\\\"],\\\\\\\"ThingID\\\\\\\":[\\\\\\\"6013965896d0ed0001f5a46d\\\\\\\"]}\\\"},\\\"queryString\\\":{},\\\"routeParamteters\\\":{},\\\"body\\\":{\\\"Payload\\\":{\\\"Temp\\\":\\\"686\\\",\\\"Timestamp\\\":\\\"2020-12-31T03:03:18+07:00\\\"}}\"\r",
									"\r",
									"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
									"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
									"                            console.log(\"headers.x_ais_userName : \" + jsonParseRequestObject.headers[header_x_ais_username] + \" = \" + x_ais_userName);\r",
									"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
									"                            console.log(\"headers.Authorization : \" + jsonParseRequestObject.headers.Authorization + \" = \" + authorization);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
									"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_username]).to.eql(x_ais_username);\r",
									"                            pm.expect(jsonParseRequestObject.headers.Authorization).to.eql(authorization);\r",
									"\r",
									"                            // check requestObject headers.identity\r",
									"                            let jsonParseRequestObjectHeadersIdentity = JSON.parse(jsonParseRequestObject.headers.identity);\r",
									"                            // console.log('jsonParseRequestObjectHeadersIdentity',jsonParseRequestObjectHeadersIdentity);\r",
									"\r",
									"                            console.log(\"headers.identity.Imei : \" + jsonParseRequestObjectHeadersIdentity.Imei + \" = \" + imei);\r",
									"                            console.log(\"headers.identity.Imsi : \" + jsonParseRequestObjectHeadersIdentity.Imsi + \" = \" + imsi);\r",
									"                            console.log(\"headers.identity.ThingId : \" + jsonParseRequestObjectHeadersIdentity.ThingId + \" = \" + thingId);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObjectHeadersIdentity.Imei).to.eql(imei);\r",
									"                            pm.expect(jsonParseRequestObjectHeadersIdentity.Imsi).to.eql(imsi);\r",
									"                            pm.expect(jsonParseRequestObjectHeadersIdentity.ThingId).to.eql(thingId);\r",
									"\r",
									"                            // check requestObject headers.custom\r",
									"                            let jsonParseRequestObjectHeadersCustom = JSON.parse(jsonParseRequestObject.headers.custom);\r",
									"                            // console.log('jsonParseRequestObjectHeadersCustom',jsonParseRequestObjectHeadersCustom);\r",
									"\r",
									"                            console.log(\"headers.custom.url : \" + jsonParseRequestObjectHeadersCustom.url + \" = \" + customUrl);\r",
									"                            console.log(\"headers.custom.Imei[0] : \" + jsonParseRequestObjectHeadersCustom.Imei[0] + \" = \" + imei);\r",
									"                            console.log(\"headers.custom.Imsi[0] : \" + jsonParseRequestObjectHeadersCustom.Imsi[0] + \" = \" + imsi);\r",
									"                            console.log(\"headers.custom.ThingID[0] : \" + jsonParseRequestObjectHeadersCustom.ThingID[0] + \" = \" + thingId);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObjectHeadersCustom.url).to.eql(customUrl);\r",
									"                            pm.expect(jsonParseRequestObjectHeadersCustom.Imei[0]).to.eql(imei);\r",
									"                            pm.expect(jsonParseRequestObjectHeadersCustom.Imsi[0]).to.eql(imsi);\r",
									"                            pm.expect(jsonParseRequestObjectHeadersCustom.ThingID[0]).to.eql(thingId);\r",
									"\r",
									"                            console.log(\"queryString : \" + JSON.stringify(jsonParseRequestObject.queryString) + \" = \" + JSON.stringify({}));\r",
									"                            console.log(\"routeParamteters : \" + JSON.stringify(jsonParseRequestObject.routeParamteters) + \" = \" + JSON.stringify({}));\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.queryString).to.eql({}); \r",
									"                            pm.expect(jsonParseRequestObject.routeParamteters).to.eql({}); \r",
									"\r",
									"                            console.log(\"resquest.body.Payload.\" + SensorKey +\" : \" + jsonParseRequestObject.body.Payload[SensorKey] + \" = \" + sensor.toString());\r",
									"                            pm.expect(jsonParseRequestObject.body.Payload[SensorKey]).to.eql(sensor.toString());\r",
									"                            // pm.expect(jsonParseRequestObject.body.Payload.Timestamp).to.eql(timestamp); \r",
									"                           \r",
									"                            // check responseObject\r",
									"                            // responseObject: \"{\"OperationStatus\":{\"Code\":\"20000\",\"DeveloperMessage\":\"The requested operation was successfully.\"}}\"\r",
									"\r",
									"                            console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeSuccess);\r",
									"                            console.log(\"response.OperationStatus.DeveloperMessage : \" + jsonParseResponseObject.OperationStatus.DeveloperMessage + \" = \" + resultDescriptionTheRequestedOperationWasSuccessfully); \r",
									"\r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeSuccess);  \r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheRequestedOperationWasSuccessfully);  \r",
									"                        }\r",
									"               \r",
									"                        if( endPointNameValue == endPointNameRabbitMQ){     //\"endPointName\":\"RabbitMQ\"\r",
									"\r",
									"                            console.log(\"custom1.endPointName : \" + resultDataLog.custom1.endPointName + \" = \" + endPointNameRabbitMQ);\r",
									"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameRabbitMQ); \r",
									"                        \r",
									"                            // check requestObject\r",
									"                            // \"requestObject\":\"{\\\"url\\\":\\\"internalreport.pub.v1.089320c4-3275-4d4d-98a9-1d598a3e70c1\\\",\\\"headers\\\":{\\\"x-ais-orderref\\\":\\\"ReportHTTP_202101291701676\\\",\\\"x-ais-sessionid\\\":\\\"1611916984472\\\",\\\"timestamp_in_ms\\\":\\\"1611916984473\\\"},\\\"body\\\":\\\"{\\\\\\\"AA\\\\\\\":\\\\\\\"686\\\\\\\",\\\\\\\"Timestamp\\\\\\\":\\\\\\\"2020-12-31T03:03:18+07:00\\\\\\\"}\\\"}\"\r",
									"\r",
									"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"\r",
									"                            let jsonParseRequestObjectBody = JSON.parse(jsonParseRequestObject.body);\r",
									"\r",
									"                            console.log(\"resquest.body.\" + SensorKey +\" : \" + jsonParseRequestObjectBody[SensorKey] + \" = \" + sensor.toString());\r",
									"                            pm.expect(jsonParseRequestObjectBody[SensorKey]).to.eql(sensor.toString());\r",
									"                            \r",
									"                            // check responseObject\r",
									"                            //  \"responseObject\":\"\\\"\\\"\",\r",
									"\r",
									"                            console.log(\"response : \" + JSON.stringify(jsonParseResponseObject) + \" = \" + JSON.stringify(\"\"));\r",
									"                            pm.expect(jsonParseResponseObject).to.eql(\"\");  \r",
									"                        }\r",
									"                    }); \r",
									"                }\r",
									"            }\r",
									"\r",
									"            if(applicationNameValue == applicationNameCharging){\r",
									"                 \r",
									"                if(logType == logTypeSummary && applicationNameValue == applicationNameCharging){ // 'Summary' and Insight.Charging.APIs\r",
									"                    pm.test(\"Check Summary Log : Charging\" , function () {\r",
									"                        console.log(\"======== Check Summary Log ( Expected = Actual) [Charging] ==================\");\r",
									"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
									"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
									"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeSuccess);\r",
									"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
									"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
									"                        // console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
									"\r",
									"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
									"                        pm.expect(resultDataLog.cmdName).to.eql(cmdNameCharging); \r",
									"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeSuccess); \r",
									"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionTheRequestedOperationWasSuccessfully); \r",
									"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
									"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerIdCharging); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationNameCharging); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.identity).to.eql(identitySummary); \r",
									"                        pm.expect(resultDataLog.custom).to.eql(customSummary); \r",
									"                    }); \r",
									"                }\r",
									"\r",
									"                if(logType == logTypeDetail && (applicationNameValue == applicationNameCharging) ){ //'Detail' and Insight.Charging.APIs\r",
									"\r",
									"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
									"                    // console.log('endPointNameValue ',endPointNameValue)\r",
									"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [Charging]\", function () {\r",
									"                        console.log(\"======== Check Detail Log ( Expected = Actual) [Charging] ==================\");\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
									"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        if( endPointNameValue == undefined){\r",
									"                            console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        }\r",
									"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
									"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
									"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
									"\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
									"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationNameCharging); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerIdCharging); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        if( endPointNameValue == undefined){\r",
									"                            pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        }\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
									"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
									"\r",
									"                        let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
									"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
									"                        let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
									"                            // console.log('jsonParseResponseObject',jsonParseResponseObject); \r",
									"                        let url = urlCharging + pm.environment.get(\"GetResponse_ThingID\"); \r",
									"                        let x_ais_orderref = x_ais_OrderRef_ReportHTTP + current_timestamp;\r",
									"                        let x_ais_orderdesc = x_ais_OrderDesc_ReportHTTP;\r",
									"                        let x_ais_userName = x_ais_UserName_AisPartner;\r",
									"                        let authorization = Basic + ' ' + pm.environment.get(\"encodedKeys_Authorization_Report\");\r",
									"                        let thingId = pm.environment.get(\"GetResponse_ThingID\");\r",
									"                        let SensorKey = fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP;\r",
									"                        let sensor = pm.environment.get(\"Value_Charging_TST_F2_1_1_004_Sensor\");\r",
									"                      \r",
									"                        if( endPointNameValue == undefined){\r",
									"                            \r",
									"                            // check requestObject\r",
									"                            // \"requestObject\":\"{\\\"url\\\":\\\"/api/v1/Charging/603605f824ef380001b9f108\\\",\\\"method\\\":\\\"POST\\\",\\\"headers\\\":{\\\"Content-Type\\\":\\\"application/json\\\",\\\"Host\\\":\\\"chargingapis.magellanstaging.svc.cluster.local\\\",\\\"Content-Length\\\":\\\"24\\\",\\\"x-ais-orderref\\\":\\\"ReportHTTP_202102241402448\\\",\\\"x-ais-sessionid\\\":\\\"1614153212381\\\",\\\"x-forwarded-proto\\\":\\\"http\\\",\\\"x-request-id\\\":\\\"a0841c07-c230-4f1c-8b48-71d83243564b\\\",\\\"x-b3-traceid\\\":\\\"d46d3e9a2b05b26895e83d80b50c8737\\\",\\\"x-b3-spanid\\\":\\\"01039a2b17e0a6cc\\\",\\\"x-b3-parentspanid\\\":\\\"95e83d80b50c8737\\\",\\\"x-b3-sampled\\\":\\\"0\\\"},\\\"queryString\\\":{ },\\\"routeParamteters\\\":{\\\"ThingId\\\":\\\"603605f824ef380001b9f108\\\"},\\\"body\\\":{\\\"Payload\\\":{\\\"AA\\\":\\\"903\\\"}}}\"\r",
									"\r",
									"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
									"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
									"                            console.log(\"headers.x_ais_userName : \" + jsonParseRequestObject.headers[header_x_ais_username] + \" = \" + x_ais_userName);\r",
									"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
									"                            console.log(\"headers.Authorization : \" + jsonParseRequestObject.headers.Authorization + \" = \" + authorization);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
									"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_username]).to.eql(x_ais_userName);\r",
									"                            pm.expect(jsonParseRequestObject.headers.Authorization).to.eql(authorization);\r",
									"\r",
									"                            console.log(\"queryString : \" + JSON.stringify(jsonParseRequestObject.queryString) + \" = \" + JSON.stringify({}));\r",
									"                            console.log(\"routeParamteters.ThingId : \" + JSON.stringify(jsonParseRequestObject.routeParamteters.ThingId) + \" = \" + thingId);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.queryString).to.eql({}); \r",
									"                            pm.expect(jsonParseRequestObject.routeParamteters.ThingId).to.eql(thingId); \r",
									"\r",
									"                            console.log(\"resquest.body.Payload.\" + SensorKey +\" : \" + jsonParseRequestObject.body.Payload[SensorKey] + \" = \" + sensor.toString());\r",
									"                            pm.expect(jsonParseRequestObject.body.Payload[SensorKey]).to.eql(sensor.toString());\r",
									"                           \r",
									"                            // check responseObject\r",
									"                            // responseObject: \"{\"OperationStatus\":{\"Code\":\"20000\",\"DeveloperMessage\":\"The requested operation was successfully.\"}}\"\r",
									"                            // pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeSuccess);  \r",
									"                            // pm.expect(jsonParseResponseObject.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheRequestedOperationWasSuccessfully);  \r",
									"                        }\r",
									"               \r",
									"                        // if( endPointNameValue == endPointNameRocsService){     //\"endPointName\":\"RocsService\"\r",
									"                        //     pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameRabbitMQ); \r",
									"                        \r",
									"                        //     // check requestObject\r",
									"                        //     // \"requestObject\":\"{\\\"url\\\":\\\"api/v3/rocs/metering-method\\\",\\\"method\\\":\\\"POST\\\",\\\"headers\\\":{\\\"x-tid\\\":\\\"MG20210224145332238101\\\",\\\"Authorization\\\":\\\"Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IllZNzczNkhkNTkifQ.eyJpc3MiOiJzcmYuYWlzLmNvLnRoL3NjZiIsInN1YiI6InRva2VuX2NsaWVudF9jcmVkZW50aWFscyIsImF1ZCI6ImlRZnRFMXdxckdLQlVEOElPeFlaUkRIeVNSWnBnTVhsNXhETVhMWHMxWkE9IiwiZXhwIjoxNjE0MjI1ODk0LCJpYXQiOjE2MTQxMzk0OTQsImp0aSI6IjM0aVhoU1NYNVFEMW9SMzlaM2tKU0YiLCJjbGllbnQiOiJNelV5TWpVc1RXRm5aV3hzWVc1OFFtRmphMlZ1Wkh3ekxqQXVNQT09Iiwic3NpZCI6ImlGUnBRVTU0dThMck9kSXhMNDFWVmwifQ.p1CMz1s4-TBkufYWu1eEdSueKWo87Yjsyiovyf1ppqRr8DoCuL5KM-BH0QpCJr3FyaiSNYKgLtPZMsvILA0Pc6kX7btBCDDTUq0hl0Lc9lQkWwj_icghFzIElhclw5EMNfnd-a_C1P2sNFXdiS-2RbskS1B9QknSyanEU7CCXwA\\\"},\\\"body\\\":{\\\"command\\\":\\\"usageMonitoring\\\",\\\"sessionId\\\":\\\"1614153212381\\\",\\\"tid\\\":\\\"MG20210224145332238101\\\",\\\"rtid\\\":\\\"MG20210224145332238101\\\",\\\"actualTime\\\":\\\"20210224145332\\\",\\\"app\\\":null,\\\"clientId\\\":null,\\\"userType\\\":\\\"MSISDN\\\",\\\"userValue\\\":\\\"9400631842\\\",\\\"resourceId\\\":null,\\\"resourceName\\\":\\\"Magellan Transaction P1\\\",\\\"requestUnit\\\":\\\"36\\\"}}\"\r",
									"                        //     pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                        //     let jsonParseRequestObjectBody = JSON.parse(jsonParseRequestObject.body);\r",
									"                        //     // pm.expect(jsonParseRequestObjectBody[SensorKey]).to.eql(sensor.toString());\r",
									"                            \r",
									"                        //     // check responseObject\r",
									"                        //     // \"responseObject\":\"\\\"{\\\\\\\"command\\\\\\\":\\\\\\\"usageMonitoring\\\\\\\",\\\\\\\"sessionId\\\\\\\":\\\\\\\"1614153212381\\\\\\\",\\\\\\\"tid\\\\\\\":\\\\\\\"MG20210224145332238101\\\\\\\",\\\\\\\"rtid\\\\\\\":\\\\\\\"MG20210224145332238101\\\\\\\",\\\\\\\"status\\\\\\\":\\\\\\\"200\\\\\\\",\\\\\\\"devMessage\\\\\\\":\\\\\\\"SUCCESS\\\\\\\"}\\\"\"\r",
									"                        //     // pm.expect(jsonParseResponseObject).to.eql(\"\");  \r",
									"                        // }\r",
									"                    }); \r",
									"                }\r",
									"\r",
									"            }\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// InquiryThing\r",
									"InquiryThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptInquiryThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_InquiryThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_InquiryThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestInquiryThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsInquiryThing = {\r",
									"            url: url + provisioningapis + urlThingInquiryThing,\r",
									"            method: 'POST',\r",
									"            header: headersOptInquiryThing,\r",
									"            body: httpRequestInquiryThing\r",
									"        };\r",
									"\r",
									"        // console.log('request InquiryThing');\r",
									"        let response = await reqPromise(optionsInquiryThing);\r",
									"        let jsonDataInquiryThing = await response.json();\r",
									"        // console.log('jsonDataInquiryThing',jsonDataInquiryThing)\r",
									"    \r",
									"        let operationStatusInquiryThing = await jsonDataInquiryThing.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"InquiryThing : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('InquiryThing : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusInquiryThing).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //InquiryThing is Success\r",
									"        pm.test('InquiryThing : OperationStatus Description is '+'\"'+ resultDescriptionInquiryThing+'\"', function () {\r",
									"            pm.expect(operationStatusInquiryThing).to.have.property('Description', resultDescriptionInquiryThing);\r",
									"        });\r",
									"\r",
									"        //Check Data\r",
									"        let thingInfo = await jsonDataInquiryThing.ThingInfo;\r",
									"        console.log('thingInfo',thingInfo);\r",
									"\r",
									"        for(let i=0;i<thingInfo.length;i++){\r",
									"            pm.test('Verify DB Check Data : Charging HTTP(eSim) Report :{ \"'+  pm.environment.get(\"SensorKey_AsgardHTTP\") + '\" : \"'+ pm.environment.get(\"Value_Charging_TST_F2_1_1_004_Sensor\") +'\" }' , function () {\r",
									"                console.log(\"======== Verify DB Check Data ( Expected = Actual) [Charging HTTP(eSim) Report] ==================\");\r",
									"                console.log(\"ThingInfo[\"+ i +\"]StateInfo.Report.\" + pm.environment.get(\"SensorKey_AsgardHTTP\") + \" : \" + thingInfo[i].StateInfo.Report[pm.environment.get(\"SensorKey_AsgardHTTP\")] + \" = \" + JSON.stringify(pm.environment.get(\"Value_Charging_TST_F2_1_1_004_Sensor\")));\r",
									"                pm.expect(thingInfo[i].StateInfo.Report).to.have.property(pm.environment.get(\"SensorKey_AsgardHTTP\"), pm.environment.get(\"Value_Charging_TST_F2_1_1_004_Sensor\"));\r",
									"            });\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"setTimeout(function(){SearchLogFindTid();}, 7000); \r",
									"setTimeout(function(){CheckLog();}, 12000); \r",
									"setTimeout(function(){InquiryThing();}, 20000); \r",
									"// setTimeout(function(){RemoveThingStateInfo();}, 25000); \r",
									"// setTimeout(function(){RemoveThing();}, 30000); \r",
									"// setTimeout(function(){RemoveAccount();}, 35000); \r",
									"// setTimeout(function(){RemovePartner();}, 40000); \r",
									"\r",
									"setTimeout(function(){\r",
									"pm.environment.unset(\"current_timestamp\");\r",
									"pm.environment.unset(\"AccessToken\");\r",
									"pm.environment.unset(\"random_number\");\r",
									"pm.environment.unset(\"PartnerName\");\r",
									"pm.environment.unset(\"MerchantContact\");\r",
									"pm.environment.unset(\"CPID\");\r",
									"pm.environment.unset(\"GetResponse_PartnerId\");\r",
									"pm.environment.unset(\"AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountId\");\r",
									"pm.environment.unset(\"random_IM\");\r",
									"pm.environment.unset(\"random_ICCID\");\r",
									"pm.environment.unset(\"ThingName\");\r",
									"pm.environment.unset(\"GetResponse_ThingID\");\r",
									"pm.environment.unset(\"GetResponse_IMSI\");\r",
									"pm.environment.unset(\"encodedKeys_Authorization_Register\");\r",
									"pm.environment.unset(\"encodedKeys_Authorization_Report\");\r",
									"pm.environment.unset(\"random_Sensor\");\r",
									"pm.environment.unset(\"GetResponse_ThingToken\");\r",
									"pm.environment.unset(\"tid\");\r",
									"pm.environment.unset(\"sessionId\");\r",
									"pm.environment.unset(\"SensorKey_AsgardHTTP\");\r",
									"pm.environment.unset(\"random_Sensor_AsgardHTTP\");\r",
									"pm.environment.unset(\"timestamp\");\r",
									"pm.environment.unset(\"Value_Charging_TST_F2_1_1_004_Sensor\");\r",
									"}, 45000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var Username = pm.environment.get(\"Username\");\r",
									"var Password = pm.environment.get(\"Password\");\r",
									"\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"var controlapis = pm.environment.get(\"controlapis\");\r",
									"var httpapis = pm.environment.get(\"httpapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"pm.environment.set(\"SensorKey_AsgardHTTP\",fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP)\r",
									"pm.environment.set(\"Value_Charging_TST_F2_1_1_004_Sensor\",fieldDataValue.Charging.Value_Charging_TST_F2_1_1_004_Sensor)\r",
									"\r",
									"// Timestamp 2020-12-31T03:03:18+07:00\r",
									"var timestamp = fieldDataValue.AsgardHTTP.Value_AsgardHTTP_Report_Timestamp;\r",
									"// console.log('currentTmestamp',currentTmestamp);\r",
									"pm.environment.set(\"timestamp\", timestamp);\r",
									"\r",
									"//format YYYYMMDDHHMMSSS\r",
									"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
									"// console.log('currentTmestamp',currentTmestamp);\r",
									"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var Basic = pm.environment.get(\"Basic\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- statusCodeList --------------//\r",
									"//set variable to statusCodeList JSON.parse\r",
									"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
									"//set global variable to statusCode 200\r",
									"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
									"//set global variable to statusCode 201\r",
									"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultCodeList --------------//\r",
									"//set variable to resultCodeList JSON.parse\r",
									"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
									"//set global variable to resultCode \"20000\"\r",
									"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
									"//set global variable to resultCode \"20100\"\r",
									"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionSuccessList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
									"//set global variable to resultDescription \"SignInProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
									"//set global variable to resultDescription \"ValidateTokenProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionValidateToken\", resultDescriptionSuccessList.resultDescriptionValidateToken);\r",
									"//set global variable to resultDescription \"CreateThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThing\", resultDescriptionSuccessList.resultDescriptionCreateThing);\r",
									"//set global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThingStateInfo\", resultDescriptionSuccessList.resultDescriptionCreateThingStateInfo);\r",
									"//set global variable to resultDescription \"Register is Success\"\r",
									"pm.globals.set(\"resultDescriptionRegisterIsSuccess\", resultDescriptionSuccessList.resultDescriptionRegisterIsSuccess);\r",
									"//set global variable to resultDescription \"ReportProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionReportProcessIsSuccess\", resultDescriptionSuccessList.resultDescriptionReportProcessIsSuccess);\r",
									"//set global variable to resultDescription \"The requested operation was successfully.\"\r",
									"pm.globals.set(\"resultDescriptionTheRequestedOperationWasSuccessfully\", resultDescriptionSuccessList.resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"//set global variable to resultDescription \"InquiryThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionInquiryThing\", resultDescriptionSuccessList.resultDescriptionInquiryThing);\r",
									"//set global variable to resultDescription \"InquiryAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionInquiryAccount\", resultDescriptionSuccessList.resultDescriptionInquiryAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- HeaderList --------------//\r",
									"//set variable to HeaderList JSON.parse\r",
									"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
									"//---------------- set globals Other --------------//\r",
									"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
									"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
									"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
									"//set global variable to kbn-versio \"7.5.1\"\r",
									"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Signin_ --------------//\r",
									"//set global variable to x_ais_OrderRef \"Signin_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
									"//set global variable to x_ais_OrderRef \"ValidateToken\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ValidateToken\", HeaderList.Signin.x_ais_OrderRef_ValidateToken);\r",
									"//set global variable to x_ais_OrderDesc \"ValidateToken\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_ValidateToken\", HeaderList.Signin.x_ais_OrderDesc_ValidateToken);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Account --------------//\r",
									"//set global variable to x_ais_OrderRef \"InquiryAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_InquiryAccount\", HeaderList.Account.x_ais_OrderRef_InquiryAccount);\r",
									"//set global variable to x_ais_OrderDesc \"InquiryAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_InquiryAccount\", HeaderList.Account.x_ais_OrderDesc_InquiryAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Thing --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThing\", HeaderList.Thing.x_ais_OrderRef_CreateThing);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThing\", HeaderList.Thing.x_ais_OrderDesc_CreateThing);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThing\", HeaderList.Thing.x_ais_OrderRef_RemoveThing);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThing\", HeaderList.Thing.x_ais_OrderDesc_RemoveThing);\r",
									"//set global variable to x_ais_OrderRef \"InquiryThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_InquiryThing\", HeaderList.Thing.x_ais_OrderRef_InquiryThing);\r",
									"//set global variable to x_ais_OrderDesc \"InquiryThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_InquiryThing\", HeaderList.Thing.x_ais_OrderDesc_InquiryThing);\r",
									"//set global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_RemoveThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_RemoveThingStateInfo);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals AsgardHTTP --------------//\r",
									"//set global variable to x_ais_OrderRef \"RegisHTTP_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RegisHTTP\", HeaderList.AsgardHTTP.x_ais_OrderRef_RegisHTTP);\r",
									"//set global variable to x_ais_OrderDesc \"Register Thing in MG\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RegisHTTP\", HeaderList.AsgardHTTP.x_ais_OrderDesc_RegisHTTP);\r",
									"//set global variable to x_ais_OrderRef \"ReportHTTP_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ReportHTTP\", HeaderList.AsgardHTTP.x_ais_OrderRef_ReportHTTP);\r",
									"//set global variable to x_ais_OrderDesc \"Report Data to MG\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_ReportHTTP\", HeaderList.AsgardHTTP.x_ais_OrderDesc_ReportHTTP);\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"SignInProcess is Success\"\r",
									"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
									"//get global variable to resultDescription \"ValidateTokenProcess is Success\"\r",
									"var resultDescriptionValidateToken = pm.globals.get(\"resultDescriptionValidateToken\");\r",
									"//get global variable to resultDescription \"CreateThing is Success\"\r",
									"var resultDescriptionCreateThing = pm.globals.get(\"resultDescriptionCreateThing\");\r",
									"//get global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"var resultDescriptionCreateThingStateInfo = pm.globals.get(\"resultDescriptionCreateThingStateInfo\");\r",
									"//get global variable to resultDescription \"The requested operation was successfully.\"\r",
									"var resultDescriptionTheRequestedOperationWasSuccessfully = pm.globals.get(\"resultDescriptionTheRequestedOperationWasSuccessfully\");\r",
									"//get global variable to resultDescription \"InquiryAccount is Success\"\r",
									"var resultDescriptionInquiryAccount = pm.globals.get(\"resultDescriptionInquiryAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- urlRouteList --------------//\r",
									"//set variable to urlRouteList JSON.parse\r",
									"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
									"//---------------- set url Create --------------//\r",
									"//set global variable to url \"/api/v1/auth/signin\"\r",
									"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
									"//set global variable to url \"/api/v1/auth/ValidateToken\"\r",
									"pm.globals.set(\"urlValidateToken\", urlRouteList.Signin.urlValidateToken);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"pm.globals.set(\"urlThingCreateThing\", urlRouteList.Thing.urlThingCreateThing);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"pm.globals.set(\"urlThingCreateThingStateInfo\", urlRouteList.Thing.urlThingCreateThingStateInfo);\r",
									"//set global variable to url \"/api/register/sim/v1\"\r",
									"pm.globals.set(\"urlAsgardHTTPeSimRegister\", urlRouteList.AsgardHTTPeSim.urlAsgardHTTPeSimRegister);\r",
									"//set global variable to url \"/api/report/sim/v1\"\r",
									"pm.globals.set(\"urlAsgardHTTPeSimReport\", urlRouteList.AsgardHTTPeSim.urlAsgardHTTPeSimReport);\r",
									"//set global variable to url \"/api/v1/Account/InquiryAccount\"\r",
									"pm.globals.set(\"urlAccountInquiryAccount\", urlRouteList.Account.urlAccountInquiryAccount);\r",
									"//---------------- get url Create --------------//\r",
									"//get global variable to url \"/api/v1/auth/signin\"\r",
									"var urlSignin = pm.globals.get(\"urlSignin\");\r",
									"//get global variable to url \"/api/v1/auth/ValidateToken\"\r",
									"var urlValidateToken = pm.globals.get(\"urlValidateToken\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"var urlThingCreateThing = pm.globals.get(\"urlThingCreateThing\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"var urlThingCreateThingStateInfo = pm.globals.get(\"urlThingCreateThingStateInfo\");\r",
									"//get global variable to url \"/api/register/sim/v1\"\r",
									"var urlAsgardHTTPeSimRegister = pm.globals.get(\"urlAsgardHTTPeSimRegister\");\r",
									"//get global variable to url \"/api/report/sim/v1\"\r",
									"var urlAsgardHTTPeSimReport = pm.globals.get(\"urlAsgardHTTPeSimReport\");\r",
									"//---------------- set url Inquiry --------------//\r",
									"//get global variable to url \"/api/v1/Account/InquiryAccount\"\r",
									"var urlAccountInquiryAccount = pm.globals.get(\"urlAccountInquiryAccount\");\r",
									"//set global variable to url \"/api/v1/Thing/InquiryThing\"\r",
									"pm.globals.set(\"urlThingInquiryThing\", urlRouteList.Thing.urlThingInquiryThing);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Signin_ --------------//\r",
									"//get global variable to x_ais_OrderRef \"Signin_\"\r",
									"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
									"//get global variable to x_ais_OrderRef \"ValidateToken_\"\r",
									"var x_ais_OrderRef_ValidateToken = pm.globals.get(\"x_ais_OrderRef_ValidateToken\");\r",
									"//get global variable to x_ais_OrderDesc \"ValidateToken\"\r",
									"var x_ais_OrderDesc_ValidateToken = pm.globals.get(\"x_ais_OrderDesc_ValidateToken\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"InquiryAccount_\"\r",
									"var x_ais_OrderRef_InquiryAccount = pm.globals.get(\"x_ais_OrderRef_InquiryAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"InquiryAccount\"\r",
									"var x_ais_OrderDesc_InquiryAccount = pm.globals.get(\"x_ais_OrderDesc_InquiryAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"var x_ais_OrderRef_CreateThing = pm.globals.get(\"x_ais_OrderRef_CreateThing\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"var x_ais_OrderDesc_CreateThing = pm.globals.get(\"x_ais_OrderDesc_CreateThing\");\r",
									"//get global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"var x_ais_OrderRef_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderRef_CreateThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"var x_ais_OrderDesc_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_CreateThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals AsgardHTTP --------------//\r",
									"//get global variable to x_ais_OrderRef \"RegisHTTP_\"\r",
									"var x_ais_OrderRef_RegisHTTP = pm.globals.get(\"x_ais_OrderRef_RegisHTTP\");\r",
									"//get global variable to x_ais_OrderDesc \"Register Thing in MG\"\r",
									"var x_ais_OrderDesc_RegisHTTP = pm.globals.get(\"x_ais_OrderDesc_RegisHTTP\");\r",
									"//------------------------------------------------------------//\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// Signin get token\r",
									"Signin = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSignin = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_Signin + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_UserAuthentication,\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestSignin = {\r",
									"            mode: 'raw',\r",
									"            raw:\r",
									"                JSON.stringify({\r",
									"                    username: Username,\r",
									"                    password: Password\r",
									"                })\r",
									"        };\r",
									"\r",
									"        let optionsSignin = {\r",
									"            url: url + provisioningapis + urlSignin,\r",
									"            method: 'POST',\r",
									"            header: headersOptSignin,\r",
									"            body: httpRequestSignin\r",
									"        };\r",
									"        // console.log('request Signin');\r",
									"        let response = await reqPromise(optionsSignin);\r",
									"        let jsonDataSignin = await response.json();\r",
									"\r",
									"        // setAccessToken\r",
									"        await pm.environment.set(\"AccessToken\", jsonDataSignin.AccessToken);\r",
									"\r",
									"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('Signin : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // SignInProcess is Success\r",
									"        pm.test('Signin : OperationStatus Description is ' + '\"' + resultDescriptionSuccessSignIn + '\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
									"        });\r",
									"\r",
									"        //set random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //set PartnerName\r",
									"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
									"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
									"        //set MerchantContact\r",
									"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
									"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
									"        // set CPID\r",
									"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
									"        pm.environment.set(\"CPID\", CPIDValue)\r",
									"\r",
									"        //Accountname\r",
									"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
									"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// ValidateToken\r",
									" ValidateToken = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptValidateToken = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_ValidateToken + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_ValidateToken,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestValidateToken = {\r",
									"            mode: 'raw',\r",
									"            raw: \r",
									"            JSON.stringify({\r",
									"                \"AccessToken\": pm.environment.get(\"AccessToken\")\r",
									"            })\r",
									"        };  \r",
									"        \r",
									"        let optionsValidateToken = {\r",
									"            url: url + provisioningapis + urlValidateToken,\r",
									"            method: 'POST',\r",
									"            header: headersOptValidateToken,\r",
									"            body: httpRequestValidateToken\r",
									"        };\r",
									"        // console.log('request ValidateToken');\r",
									"        let response = await reqPromise(optionsValidateToken);\r",
									"        let jsonDataValidateToken = await response.json();\r",
									"        let operationStatusValidateToken = await jsonDataValidateToken.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"ValidateToken : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('ValidateToken : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusValidateToken).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // ValidateTokenProcess is Success\r",
									"        pm.test('ValidateToken : OperationStatus Description is '+'\"'+ resultDescriptionValidateToken+'\"', function () {\r",
									"            pm.expect(operationStatusValidateToken).to.have.property('Description', resultDescriptionValidateToken);\r",
									"        });\r",
									" \r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// InquiryAccount\r",
									"InquiryAccount = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptInquiryAccount = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_InquiryAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_InquiryAccount,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestInquiryAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"AccountName\": \"9400631842\"\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsInquiryAccount = {\r",
									"            url: url + provisioningapis + urlAccountInquiryAccount,\r",
									"            method: 'POST',\r",
									"            header: headersOptInquiryAccount,\r",
									"            body: httpRequestInquiryAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request InquiryAccount');\r",
									"        let response = await reqPromise(optionsInquiryAccount);\r",
									"        let jsonDataInquiryAccount = await response.json();\r",
									"        // console.log('jsonDataInquiryAccount',jsonDataInquiryAccount)\r",
									"\r",
									"        let operationStatusInquiryAccount = await jsonDataInquiryAccount.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"InquiryAccount : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('InquiryAccount : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusInquiryAccount).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //InquiryAccount is Success\r",
									"        pm.test('CreateAccount : OperationStatus Description is ' + '\"' + resultDescriptionInquiryAccount + '\"', function () {\r",
									"            pm.expect(operationStatusInquiryAccount).to.have.property('Description', resultDescriptionInquiryAccount);\r",
									"        });\r",
									"        \r",
									"        // GetResponse_AccountName\r",
									"        pm.environment.set(\"GetResponse_AccountName\", jsonDataInquiryAccount.PartnerInfo[0].AccountInfo[0].AccountName)\r",
									"        // GetResponse_AccountId\r",
									"        pm.environment.set(\"GetResponse_AccountId\", jsonDataInquiryAccount.PartnerInfo[0].AccountInfo[0].AccountId)\r",
									"        // random_IM\r",
									"        pm.environment.set(\"random_IM\", _.random(10000000, 99999999) + \" \" + _.random(1000000, 9999999))\r",
									"        // random_ICCID\r",
									"        pm.environment.set(\"random_ICCID\", _.random(1000000, 9999999) + \" \" + _.random(100000, 999999))\r",
									"        // random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //ThingName\r",
									"        let thingNameValue = fieldDataValue.Thing.ThingNameValue; // \"Sensor_TestThingName\"\r",
									"        pm.environment.set(\"ThingName\", thingNameValue + pm.environment.get(\"random_number\"))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThing\r",
									"CreateThing = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThing = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateThing + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateThing,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey': pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreateThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingName\": pm.environment.get(\"ThingName\"),\r",
									"                \"IMEI\": pm.environment.get(\"random_IM\"),\r",
									"                \"IMSI\": pm.environment.get(\"random_IM\"),\r",
									"                \"ICCID\": pm.environment.get(\"random_ICCID\"),\r",
									"                \"RouteUrl\": fieldDataValue.Thing.RouteUrlValue , //[\"http://10.12.3.4:2019/api/information/AddInformation\"]\r",
									"                \"RouteInfo\": {\r",
									"                    \"MIMO_ID\": fieldDataValue.Thing.RouteInfoMIMOIDValue , //\"606edada\"\r",
									"                    \"MIMO_SerialNo\": fieldDataValue.Thing.RouteInfoMIMOSerialNoValue //5466758878\r",
									"                },\r",
									"                \"RouteFlag\": {\r",
									"                    \"ThingName\": fieldDataValue.Thing.RouteFlagThingNameValue , //true\r",
									"                    \"ThingToken\": fieldDataValue.Thing.RouteFlagThingTokenValue, //true\r",
									"                    \"IMEI\": fieldDataValue.Thing.RouteFlagIMEIValue, //true\r",
									"                    \"ICCID\": fieldDataValue.Thing.RouteFlagICCIDValue, //true\r",
									"                    \"RouteInfo\": fieldDataValue.Thing.RouteFlagRouteInfoValue //true\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateThing = {\r",
									"            url: url + provisioningapis + urlThingCreateThing,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThing,\r",
									"            body: httpRequestCreateThing\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThing');\r",
									"        let response = await reqPromise(optionsCreateThing);\r",
									"        let jsonDataCreateThing = await response.json();\r",
									"        // console.log('jsonDataCreateThing',jsonDataCreateThing)\r",
									"\r",
									"        let operationStatusCreateThing = await jsonDataCreateThing.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateThing : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateThing : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateThing is Success\r",
									"        pm.test('CreateThing : OperationStatus Description is ' + '\"' + resultDescriptionCreateThing + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Description', resultDescriptionCreateThing);\r",
									"        });\r",
									"\r",
									"        pm.environment.set(\"GetResponse_ThingID\", jsonDataCreateThing.ThingInfo.ThingId)\r",
									"        pm.environment.set(\"GetResponse_IMSI\", jsonDataCreateThing.ThingInfo.IMSI)\r",
									"        \r",
									"        let keys = pm.environment.get(\"GetResponse_IMSI\") + \":\" + pm.environment.get(\"IpAddress\");\r",
									"        // console.log(\"keys\", keys);\r",
									"        let encodedKeys = CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(keys));\r",
									"        pm.environment.set(\"encodedKeys_Authorization_Register\", encodedKeys);\r",
									"\r",
									"        //Get Random Sensor \r",
									"        pm.environment.set(\"random_Sensor\", _.random(100, 999))\r",
									"\r",
									"        //Get Random Sensor AsgardHTTP\r",
									"        pm.environment.set(\"random_Sensor_AsgardHTTP\", _.random(100, 999))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThingStateInfo\r",
									"CreateThingStateInfo = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThingStateInfo = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateThingStateInfo,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey': pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        // {\"AA\" : pm.environment.get(\"random_Sensor\")}\r",
									"        let sensorValue = {};\r",
									"        sensorValue[fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP] = pm.environment.get(\"random_Sensor\");\r",
									"        // console.log('sensorValue',sensorValue);\r",
									"        \r",
									"        let httpRequestCreateThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": [\r",
									"                    pm.environment.get(\"GetResponse_ThingID\")\r",
									"                ],\r",
									"                \"Type\": fieldDataValue.CreateThingStateInfo.Type_Report,\r",
									"                \"Sensor\": sensorValue\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingCreateThingStateInfo,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThingStateInfo,\r",
									"            body: httpRequestCreateThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThingStateInfo');\r",
									"        let response = await reqPromise(optionsCreateThingStateInfo);\r",
									"        let jsonDataCreateThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataCreateThingStateInfo',jsonDataCreateThingStateInfo)\r",
									"\r",
									"        let operationStatusCreateThingStateInfo = await jsonDataCreateThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"CreateThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //CreateThingStateInfo is Success\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Description is ' + '\"' + resultDescriptionCreateThingStateInfo + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Description', resultDescriptionCreateThingStateInfo);\r",
									"        });\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// AsgardHTTPeSimRegister\r",
									"AsgardHTTPeSimRegister = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptAsgardHTTPeSimRegister = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_RegisHTTP + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_RegisHTTP,\r",
									"            'Authorization': Basic + ' ' + pm.environment.get(\"encodedKeys_Authorization_Register\")\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestAsgardHTTPeSimRegister = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({})\r",
									"        };\r",
									"\r",
									"        let optionsAsgardHTTPeSimRegister = {\r",
									"            url: url + httpapis + urlAsgardHTTPeSimRegister,\r",
									"            method: 'POST',\r",
									"            header: headersOptAsgardHTTPeSimRegister,\r",
									"            body: httpRequestAsgardHTTPeSimRegister\r",
									"        };\r",
									"\r",
									"        // console.log('request AsgardHTTPEsimRegister');\r",
									"        let response = await reqPromise(optionsAsgardHTTPeSimRegister);\r",
									"        let jsonDataAsgardHTTPeSimRegister = await response.json();\r",
									"        // console.log('jsonDataCreateThingStateInfo',jsonDataAsgardHTTPeSimRegister)\r",
									"        let operationStatusAsgardHTTPeSimRegister = await jsonDataAsgardHTTPeSimRegister.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"Asgard HTTP(eSim) Register : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('Asgard HTTP(eSim) Register : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusAsgardHTTPeSimRegister).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"\r",
									"        // The requested operation was successfully.\r",
									"        pm.test('Asgard HTTP(eSim) Register : OperationStatus DeveloperMessage is ' + '\"' + resultDescriptionTheRequestedOperationWasSuccessfully + '\"', function () {\r",
									"            pm.expect(operationStatusAsgardHTTPeSimRegister).to.have.property('DeveloperMessage', resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"        });\r",
									"\r",
									"        await pm.environment.set(\"GetResponse_ThingToken\", jsonDataAsgardHTTPeSimRegister.ThingToken)\r",
									"        let keys2 = await pm.environment.get(\"GetResponse_ThingToken\") + \":\" + pm.environment.get(\"IpAddress\");        \r",
									"        let encodedKeys2 = await CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(keys2));\r",
									"        pm.environment.set(\"encodedKeys_Authorization_Report\", encodedKeys2)\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"Signin();\r",
									"setTimeout(async function(){await ValidateToken();}, 2000);\r",
									"setTimeout(async function(){await InquiryAccount();}, 3000); \r",
									"setTimeout(async function(){await CreateThing();}, 4000); \r",
									"setTimeout(async function(){await CreateThingStateInfo();}, 5000); \r",
									"setTimeout(async function () { await AsgardHTTPeSimRegister(); }, 7000); \r",
									"setTimeout(async function () { }, 7500); //for wait value encodedKeys_Authorization_Report"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-ais-UserName",
								"type": "text",
								"value": "{{x_ais_UserName_AisPartner}}"
							},
							{
								"key": "x-ais-OrderRef",
								"value": "{{x_ais_OrderRef_ReportHTTP}}{{current_timestamp}}"
							},
							{
								"key": "x-ais-OrderDesc",
								"type": "text",
								"value": "{{x_ais_OrderDesc_ReportHTTP}}"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{Basic}} {{encodedKeys_Authorization_Report}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Payload\": {\r\n        \"{{SensorKey_AsgardHTTP}}\" : \"{{Value_Charging_TST_F2_1_1_004_Sensor}}\"\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{url}}{{httpapis}}/api/report/sim/v1",
							"host": [
								"{{url}}{{httpapis}}"
							],
							"path": [
								"api",
								"report",
								"sim",
								"v1"
							]
						},
						"description": "Type:Desire"
					},
					"response": []
				}
			]
		}
	]
}