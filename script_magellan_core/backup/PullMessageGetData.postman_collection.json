{
	"info": {
		"_postman_id": "5d281dab-5e60-4887-8ed5-a3a04315d3b5",
		"name": "PullMessageGetData",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "PullMessageGetData",
			"item": [
				{
					"name": "PullMessageGetData_TST_F1_1_1_001_Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"var pullmessageapis = pm.environment.get(\"pullmessageapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to xAisOrderRef \"RemoveThing_\"\r",
									"var x_ais_OrderRef_RemoveThing = pm.globals.get(\"x_ais_OrderRef_RemoveThing\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"var x_ais_OrderDesc_RemoveThing = pm.globals.get(\"x_ais_OrderDesc_RemoveThing\");\r",
									"//get global variable to xAisOrderRef \"InquiryThing_\"\r",
									"var x_ais_OrderRef_InquiryThing = pm.globals.get(\"x_ais_OrderRef_InquiryThing\");\r",
									"//get global variable to x_ais_OrderDesc \"InquiryThing\"\r",
									"var x_ais_OrderDesc_InquiryThing = pm.globals.get(\"x_ais_OrderDesc_InquiryThing\");\r",
									"//get global variable to xAisOrderRef \"RemoveThingStateInfo_\"\r",
									"var x_ais_OrderRef_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderRef_RemoveThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThingStateInfo\"\r",
									"var x_ais_OrderDesc_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_RemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals PullMessage --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemovePullMessage_\"\r",
									"const x_ais_OrderRef_RemovePullMessage = pm.globals.get(\"x_ais_OrderRef_RemovePullMessage\");\r",
									"//get global variable to x_ais_OrderDesc \"RemovePullMessage\"\r",
									"const x_ais_OrderDesc_RemovePullMessage = pm.globals.get(\"x_ais_OrderDesc_RemovePullMessage\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get url Remove --------------//\r",
									"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
									"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"var urlThingRemoveThing = pm.globals.get(\"urlThingRemoveThing\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"var urlThingRemoveThingStateInfo = pm.globals.get(\"urlThingRemoveThingStateInfo\");\r",
									"//get global variable to url \"/api/v1/PullMessage/RemovePullMessage\"\r",
									"var urlPullMessageRemovePullMessage = pm.globals.get(\"urlPullMessageRemovePullMessage\");\r",
									"//---------------- get url Inquiry --------------//\r",
									"//get global variable to url \"/api/v1/Thing/InquiryThingr\"\r",
									"var urlThingInquiryThing = pm.globals.get(\"urlThingInquiryThing\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"RemovePartner is Success\"\r",
									"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
									"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
									"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
									"//get global variable to resultDescription \"RemoveThing is Success\"\r",
									"var resultDescriptionRemoveThing = pm.globals.get(\"resultDescriptionRemoveThing\");\r",
									"//get global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"var resultDescriptionRemoveThingStateInfo = pm.globals.get(\"resultDescriptionRemoveThingStateInfo\");\r",
									"//get global variable to resultDescription \"RemovePullMessage is Success\"\r",
									"var resultDescriptionRemovePullMessage = pm.globals.get(\"resultDescriptionRemovePullMessage\");\r",
									"//get global variable to resultDescription \"InquiryThing is Success\"\r",
									"var resultDescriptionInquiryThing = pm.globals.get(\"resultDescriptionInquiryThing\");\r",
									"//------------------------------------------------------------//\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"// ThingName\r",
									"pm.environment.set(\"GetResponse_PullMessage_ThingName\", jsonData.ThingName)\r",
									"// IMEI\r",
									"pm.environment.set(\"GetResponse_PullMessage_IMEI\", jsonData.IMEI)\r",
									"// IMSI\r",
									"pm.environment.set(\"GetResponse_PullMessage_IMSI\", jsonData.IMSI)\r",
									"// ICCID\r",
									"pm.environment.set(\"GetResponse_PullMessage_ICCID\", jsonData.ICCID)\r",
									"// Sensor\r",
									"pm.environment.set(\"GetResponse_PullMessage_Sensor\", jsonData.Sensor[fieldDataValue.CreateThingStateInfo.SensorKey])\r",
									"\r",
									"//get global variable to resultDescription \" is Success\"\r",
									"// var resultDescriptionIsSuccess = pm.globals.get(\"resultDescriptionIsSuccess\");\r",
									"\r",
									"pm.test(\"PullMessage : Status code is \" + statusCodeSuccess, function () {\r",
									"    pm.response.to.have.status(statusCodeSuccess);\r",
									"});\r",
									"\r",
									"// pm.test('PullMessage : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"//     pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeSuccess);\r",
									"// });\r",
									"\r",
									"// pm.test('PullMessage : OperationStatus Description is '+'\"'+ resultDescriptionIsSuccess+'\"', function () {\r",
									"//     pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionIsSuccess);\r",
									"// });\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// RemovePartner\r",
									" RemovePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemovePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemovePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemovePartner = {\r",
									"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemovePartner,\r",
									"            body: httpRequestRemovePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request RemovePartner');\r",
									"        let response = await reqPromise(optionsRemovePartner);\r",
									"        let jsonDataRemovePartner = await response.json();\r",
									"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
									"    \r",
									"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemovePartner is Success\r",
									"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveAccount\r",
									" RemoveAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemoveAccount = {\r",
									"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveAccount,\r",
									"            body: httpRequestRemoveAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveAccount');\r",
									"        let response = await reqPromise(optionsRemoveAccount);\r",
									"        let jsonDataRemoveAccount = await response.json();\r",
									"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
									"    \r",
									"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveAccount is Success\r",
									"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThing\r",
									" RemoveThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThing = {\r",
									"            url: url + provisioningapis + urlThingRemoveThing,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThing,\r",
									"            body: httpRequestRemoveThing\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveThing');\r",
									"        let response = await reqPromise(optionsRemoveThing);\r",
									"        let jsonDataRemoveThing = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThing)\r",
									"    \r",
									"        let operationStatusRemoveThing = await jsonDataRemoveThing.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThing : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThing : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThing is Success\r",
									"        pm.test('RemoveThing : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThing+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Description', resultDescriptionRemoveThing);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThingStateInfo\r",
									" RemoveThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\"),\r",
									"                \"stateType\": fieldDataValue.CreateThingStateInfo.Type, //Report\r",
									"                \"stateKey\": fieldDataValue.CreateThingStateInfo.SensorKey //Temp\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingRemoveThingStateInfo,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThingStateInfo,\r",
									"            body: httpRequestRemoveThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('response RemoveThingStateInfo');\r",
									"        let response = await reqPromise(optionsRemoveThingStateInfo);\r",
									"        let jsonDataRemoveThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThingStateInfo)\r",
									"    \r",
									"        let operationStatusRemoveThingStateInfo = await jsonDataRemoveThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThingStateInfo is Success\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThingStateInfo+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Description', resultDescriptionRemoveThingStateInfo);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemovePullMessage\r",
									"RemovePullMessage = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemovePullMessage = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemovePullMessage + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePullMessage,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemovePullMessage = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PullMessageId\": pm.environment.get(\"GetResponse_PullMessageId\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemovePullMessage = {\r",
									"            url: url + provisioningapis + urlPullMessageRemovePullMessage,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemovePullMessage,\r",
									"            body: httpRequestRemovePullMessage\r",
									"        };\r",
									"\r",
									"        // console.log('response RemovePullMessage');\r",
									"        let response = await reqPromise(optionsRemovePullMessage);\r",
									"        let jsonDataRemovePullMessage = await response.json();\r",
									"        // console.log('jsonDataRemovePullMessage',jsonDataRemovePullMessage)\r",
									"    \r",
									"        let operationStatusRemovePullMessage = await jsonDataRemovePullMessage.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemovePullMessage : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemovePullMessage : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemovePullMessage).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemovePullMessage is Success\r",
									"        pm.test('RemovePullMessage : OperationStatus Description is '+'\"'+ resultDescriptionRemovePullMessage+'\"', function () {\r",
									"            pm.expect(operationStatusRemovePullMessage).to.have.property('Description', resultDescriptionRemovePullMessage);\r",
									"        });\r",
									" \r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"//---------------- LogDefaultValue --------------//\r",
									"//set variable to LogDefaultValue JSON.parse\r",
									"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
									"// console.log('LogDefaultValue',LogDefaultValue);\r",
									"//---------------- set globals Other --------------//\r",
									"\r",
									"var SearchLog = LogDefaultValue.SearchLog;\r",
									"// console.log('SearchLog',SearchLog);\r",
									"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
									"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
									"var kbn_version = SearchLog.header.kbn_version;\r",
									"var authorization = SearchLog.header.Authorization;\r",
									"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
									"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
									"var namespace = LogDefaultValue.Other.namespace;\r",
									"\r",
									"// Detail\r",
									"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
									"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
									"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
									"\r",
									"// Summary\r",
									"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
									"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
									"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
									"// PullMessageAPIs\r",
									"var applicationName = LogDefaultValue.PullMessage.applicationName;\r",
									"var cmdName = LogDefaultValue.PullMessage.cmdName;\r",
									"var resultDescSuccess = LogDefaultValue.PullMessage.resultDesc_success;\r",
									"var endPointName = LogDefaultValue.PullMessage.endPointName;\r",
									"var containerId = LogDefaultValue.PullMessage.containerId;\r",
									"var requestObjectUrlStaging = LogDefaultValue.PullMessage.requestObjectUrlStaging;\r",
									"var iccidNumberFront = LogDefaultValue.PullMessage.iccidNumberFront;\r",
									"\r",
									"// Check CDR (Summary Log) and EDR (Detail Log)\r",
									"SearchLogFindTid = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSearchLogFindTid = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = pm.environment.get(\"GetResponse_IMSI\");\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestSearchLogFindTid = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"\r",
									"        let optionsSearchLogFindTid = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptSearchLogFindTid,\r",
									"            body: httpRequestSearchLogFindTid\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsSearchLogFindTid);\r",
									"        let jsonDataSearchLogFindTid = await response.json();\r",
									"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataSearchLogFindTid.hits.hits;\r",
									"        // console.log('hits',hits)\r",
									"  \r",
									"        // find tid\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            //  let logType = hits[i]._source.cauldron.logType\r",
									"            let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"        \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            // console.log('applicationNamePullMessage',applicationNamePullMessage)\r",
									"            if(applicationNameValue == applicationName){\r",
									"                let tid = hits[i]._source.cauldron.tid;\r",
									"                pm.environment.set(\"tid\", tid);\r",
									"                break;\r",
									"           }\r",
									"\r",
									"        }\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"CheckLog = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCheckLog = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = pm.environment.get(\"tid\");\r",
									"\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"tid\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestCheckLog = {\r",
									"            mode: 'raw',\r",
									"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"        let optionsCheckLog = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptCheckLog,\r",
									"            body: httpRequestCheckLog\r",
									"        }; \r",
									"        let response = await reqPromise(optionsCheckLog);\r",
									"        let jsonDataCheckLog = await response.json();\r",
									"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
									"        \r",
									"        // //200\r",
									"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });     \r",
									"        \r",
									"        let hits = jsonDataCheckLog.hits.hits;\r",
									"        console.log('hits',hits)\r",
									"  \r",
									"        // find logType\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            //  let logType = hits[i]._source.cauldron.logType\r",
									"            let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"            \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"\r",
									"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
									"            // console.log('resultDataLog',resultDataLog)\r",
									"\r",
									"            let tidControl = pm.environment.get(\"tid\");\r",
									"            // console.log(tidControl);\r",
									"            \r",
									"            if(applicationNameValue == applicationName){\r",
									"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and PullMessageAPIs\r",
									"                    pm.test(\"Check Summary Log : PullMessage\" , function () {\r",
									"                        console.log(\"======== Check Summary Log ( Expected = Actual) [PullMessage] ==================\");\r",
									"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
									"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
									"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeSuccess);\r",
									"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescSuccess);\r",
									"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
									"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
									"                        console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
									"\r",
									"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
									"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
									"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeSuccess); \r",
									"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescSuccess); \r",
									"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
									"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(tidControl); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.identity).to.eql(identitySummary); \r",
									"                        pm.expect(resultDataLog.custom).to.eql(customSummary); \r",
									"                    }); \r",
									"                }\r",
									"                \r",
									"                if(logType == logTypeDetail && applicationNameValue == applicationName){ //'Detail' and PullMessageAPIs\r",
									"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
									"                    // console.log('endPointNameValue',endPointNameValue)\r",
									"                \r",
									"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [PullMessage]\", function () {\r",
									"                        console.log(\"======== Check Detail Log ( Expected = Actual) [PullMessage] ==================\");\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
									"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"custom1.endPointName : \" + resultDataLog.custom1.endPointName + \" = \" + endPointName);\r",
									"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
									"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
									"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
									"\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
									"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(tidControl); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointName); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
									"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
									"\r",
									"                        // \"requestObject\":\"{\\\"url\\\":\\\"mg-staging.sandais.com/api/listen/thing/0BEB9C70803C4947B016F1EE210045E4\\\",\\\"routeParamteters\\\":{\\\"Key\\\":\\\"0BEB9C70803C4947B016F1EE210045E4\\\"}}\"\r",
									"                        \r",
									"                        // check requestObject\r",
									"                        let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
									"                        // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
									"                        let url = urlCheckLog + requestObjectUrlStaging + pm.environment.get(\"GeneratePullMessage_Key\"); \r",
									"\r",
									"                        console.log(\"resquest.url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
									"                        console.log(\"resquest.routeParamteters.Key : \" + jsonParseRequestObject.routeParamteters.Key + \" = \" + pm.environment.get(\"GeneratePullMessage_Key\"));\r",
									"\r",
									"                        pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
									"                        pm.expect(jsonParseRequestObject.routeParamteters.Key).to.eql(pm.environment.get(\"GeneratePullMessage_Key\"));\r",
									"                        \r",
									"                        // \"responseObject\":\"{\\\"ThingName\\\":\\\"Sensor_TestThingName168558\\\",\\\"IMEI\\\":\\\"150179933182663\\\",\\\"IMSI\\\":\\\"150179933182663\\\",\\\"ICCID\\\":\\\"8966036930417859542\\\",\\\"Sensor\\\":{\\\"Temp\\\":468},\\\"OperationStatus\\\":null}\"\r",
									"                        // check responseObject\r",
									"                        let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
									"                        // console.log('jsonParseResponseObject',jsonParseResponseObject);\r",
									"\r",
									"                        let imei = (pm.environment.get(\"random_IM\")).replace(\" \", \"\");\r",
									"                        let imsi = (pm.environment.get(\"GetResponse_IMSI\")).replace(\" \", \"\");\r",
									"                        let iccid = (iccidNumberFront + pm.environment.get(\"random_ICCID\")).replace(\" \", \"\");\r",
									"                        let SensorKey = fieldDataValue.CreateThingStateInfo.SensorKey;\r",
									"                        let sensor = pm.environment.get(\"random_Sensor\");\r",
									"                        let operationStatus = null\r",
									"\r",
									"                        console.log(\"response.ThingName : \" + jsonParseResponseObject.ThingName + \" = \" + jsonParseResponseObject.ThingName);\r",
									"                        console.log(\"response.IMEI : \" + jsonParseResponseObject.IMEI + \" = \" + imei);\r",
									"                        console.log(\"response.IMSI : \" + jsonParseResponseObject.IMSI + \" = \" + imsi);\r",
									"                        console.log(\"response.ICCID : \" + jsonParseResponseObject.ICCID + \" = \" + iccid);\r",
									"                        console.log(\"response.Sensor.\" + SensorKey +\" : \" + jsonParseResponseObject.Sensor[SensorKey] + \" = \" + sensor);\r",
									"                        console.log(\"response.OperationStatus : \" + jsonParseResponseObject.OperationStatus + \" = \" + operationStatus);\r",
									"\r",
									"                        pm.expect(jsonParseResponseObject.ThingName).to.eql(jsonParseResponseObject.ThingName);  \r",
									"                        pm.expect(jsonParseResponseObject.IMEI).to.eql(imei);  \r",
									"                        pm.expect(jsonParseResponseObject.IMSI).to.eql(imsi);  \r",
									"                        pm.expect(jsonParseResponseObject.ICCID).to.eql(iccid);  \r",
									"                        pm.expect(jsonParseResponseObject.Sensor[SensorKey]).to.eql(sensor);  \r",
									"                        pm.expect(jsonParseResponseObject.OperationStatus).to.eql(operationStatus);  \r",
									"                    }); \r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// InquiryThing\r",
									"InquiryThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptInquiryThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_InquiryThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_InquiryThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestInquiryThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsInquiryThing = {\r",
									"            url: url + provisioningapis + urlThingInquiryThing,\r",
									"            method: 'POST',\r",
									"            header: headersOptInquiryThing,\r",
									"            body: httpRequestInquiryThing\r",
									"        };\r",
									"\r",
									"        // console.log('request InquiryThing');\r",
									"        let response = await reqPromise(optionsInquiryThing);\r",
									"        let jsonDataInquiryThing = await response.json();\r",
									"        // console.log('jsonDataInquiryThing',jsonDataInquiryThing)\r",
									"    \r",
									"        let operationStatusInquiryThing = await jsonDataInquiryThing.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"InquiryThing : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('InquiryThing : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusInquiryThing).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //InquiryThing is Success\r",
									"        pm.test('InquiryThing : OperationStatus Description is '+'\"'+ resultDescriptionInquiryThing+'\"', function () {\r",
									"            pm.expect(operationStatusInquiryThing).to.have.property('Description', resultDescriptionInquiryThing);\r",
									"        });\r",
									"\r",
									"        //Check Data\r",
									"        let thingInfo = await jsonDataInquiryThing.ThingInfo;\r",
									"        console.log('thingInfo',thingInfo);\r",
									"        // ThingName\r",
									"\r",
									"        for(let i=0;i<thingInfo.length;i++){\r",
									"            pm.test('Verify DB Check Data : PullMessage' , function () {\r",
									"                console.log(\"======== Verify DB Check Data ( Expected = Actual) [PullMessage] ==================\");\r",
									"                console.log(\"ThingName : \" + thingInfo[i].ThingName + \" = \" + pm.environment.get(\"GetResponse_PullMessage_ThingName\"));\r",
									"                console.log(\"IMEI : \" + thingInfo[i].IMEI + \" = \" + pm.environment.get(\"GetResponse_PullMessage_IMEI\"));\r",
									"                console.log(\"IMSI : \" + thingInfo[i].IMSI + \" = \" + pm.environment.get(\"GetResponse_PullMessage_IMSI\"));\r",
									"                console.log(\"ICCID : \" + thingInfo[i].ICCID + \" = \" + pm.environment.get(\"GetResponse_PullMessage_ICCID\"));\r",
									"                console.log(\"StateInfo.Report : \" + thingInfo[i].StateInfo.Report[fieldDataValue.CreateThingStateInfo.SensorKey] + \" = \" + pm.environment.get(\"GetResponse_PullMessage_Sensor\"));\r",
									"\r",
									"                pm.expect(thingInfo[i]).to.have.property('ThingName', pm.environment.get(\"GetResponse_PullMessage_ThingName\"));\r",
									"                pm.expect(thingInfo[i]).to.have.property('IMEI', pm.environment.get(\"GetResponse_PullMessage_IMEI\"));\r",
									"                pm.expect(thingInfo[i]).to.have.property('IMSI', pm.environment.get(\"GetResponse_PullMessage_IMSI\"));\r",
									"                pm.expect(thingInfo[i]).to.have.property('ICCID', pm.environment.get(\"GetResponse_PullMessage_ICCID\"));\r",
									"                pm.expect(thingInfo[i].StateInfo.Report).to.have.property(fieldDataValue.CreateThingStateInfo.SensorKey , pm.environment.get(\"GetResponse_PullMessage_Sensor\"));\r",
									"            });\r",
									"        }\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"setTimeout(function(){SearchLogFindTid();}, 8000); \r",
									"setTimeout(function(){CheckLog();}, 20000); \r",
									"setTimeout(function(){InquiryThing();}, 30000);\r",
									"\r",
									"setTimeout(function(){RemovePullMessage();}, 40000); \r",
									"setTimeout(function(){RemoveThingStateInfo();}, 50000); \r",
									"setTimeout(function(){RemoveThing();}, 60000); \r",
									"setTimeout(function(){RemoveAccount();}, 70000); \r",
									"setTimeout(function(){RemovePartner();}, 80000); \r",
									"\r",
									"setTimeout(function(){\r",
									"pm.environment.unset(\"current_timestamp\");\r",
									"pm.environment.unset(\"AccessToken\");\r",
									"pm.environment.unset(\"random_number\");\r",
									"pm.environment.unset(\"PartnerName\");\r",
									"pm.environment.unset(\"MerchantContact\");\r",
									"pm.environment.unset(\"CPID\");\r",
									"pm.environment.unset(\"GetResponse_PartnerId\");\r",
									"pm.environment.unset(\"AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountId\");\r",
									"pm.environment.unset(\"random_IM\");\r",
									"pm.environment.unset(\"random_ICCID\");\r",
									"pm.environment.unset(\"ThingName\");\r",
									"pm.environment.unset(\"GetResponse_ThingID\");\r",
									"pm.environment.unset(\"GetResponse_IMSI\");\r",
									"pm.environment.unset(\"encodedKeys_Authorization_Register\");\r",
									"pm.environment.unset(\"GeneratePullMessage_Key\");\r",
									"pm.environment.unset(\"random_Sensor\");\r",
									"pm.environment.unset(\"Future_Date\");\r",
									"pm.environment.unset(\"PullMessageName\");\r",
									"pm.environment.unset(\"GeneratePullMessage_Key\");\r",
									"pm.environment.unset(\"GetResponse_PullMessageId\");\r",
									"pm.environment.unset(\"tid\");\r",
									"pm.environment.unset(\"GetResponse_PullMessage_ThingName\");\r",
									"pm.environment.unset(\"GetResponse_PullMessage_IMEI\");\r",
									"pm.environment.unset(\"GetResponse_PullMessage_IMSI\");\r",
									"pm.environment.unset(\"GetResponse_PullMessage_ICCID\");\r",
									"pm.environment.unset(\"GetResponse_PullMessage_Sensor\");\r",
									"}, 90000); "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var Username = pm.environment.get(\"Username\");\r",
									"var Password = pm.environment.get(\"Password\");\r",
									"\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"//format YYYYMMDDHHMMSSS\r",
									"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
									"// console.log('currentTmestamp',currentTmestamp);\r",
									"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- statusCodeList --------------//\r",
									"//set variable to statusCodeList JSON.parse\r",
									"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
									"//set global variable to statusCode 200\r",
									"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
									"//set global variable to statusCode 201\r",
									"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultCodeList --------------//\r",
									"//set variable to resultCodeList JSON.parse\r",
									"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
									"//set global variable to resultCode \"20000\"\r",
									"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
									"//set global variable to resultCode \"20100\"\r",
									"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionSuccessList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
									"//set global variable to resultDescription \"SignInProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
									"//set global variable to resultDescription \"CreatePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
									"//set global variable to resultDescription \"CreateAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
									"//set global variable to resultDescription \"CreateThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThing\", resultDescriptionSuccessList.resultDescriptionCreateThing);\r",
									"//set global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThingStateInfo\", resultDescriptionSuccessList.resultDescriptionCreateThingStateInfo);\r",
									"//set global variable to resultDescription \"RemovePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
									"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
									"//set global variable to resultDescription \"RemoveThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThing\", resultDescriptionSuccessList.resultDescriptionRemoveThing);\r",
									"//set global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThingStateInfo\", resultDescriptionSuccessList.resultDescriptionRemoveThingStateInfo);\r",
									"//set global variable to resultDescription \"GeneratePullMessage is Success\"\r",
									"pm.globals.set(\"resultDescriptionGeneratePullMessage\", resultDescriptionSuccessList.resultDescriptionGeneratePullMessage);\r",
									"//set global variable to resultDescription \"RemovePullMessage is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemovePullMessage\", resultDescriptionSuccessList.resultDescriptionRemovePullMessage);\r",
									"//set global variable to resultDescription \"InquiryThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionInquiryThing\", resultDescriptionSuccessList.resultDescriptionInquiryThing);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- HeaderList --------------//\r",
									"//set variable to HeaderList JSON.parse\r",
									"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
									"//---------------- set globals Other --------------//\r",
									"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
									"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
									"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
									"//set global variable to kbn-versio \"7.5.1\"\r",
									"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Signin_ --------------//\r",
									"//set global variable to x_ais_OrderRef \"Signin_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreatePartner --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
									"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
									"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
									"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreateAccount --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
									"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
									"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Thing --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThing\", HeaderList.Thing.x_ais_OrderRef_CreateThing);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThing\", HeaderList.Thing.x_ais_OrderDesc_CreateThing);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThing\", HeaderList.Thing.x_ais_OrderRef_RemoveThing);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThing\", HeaderList.Thing.x_ais_OrderDesc_RemoveThing);\r",
									"//set global variable to x_ais_OrderRef \"InquiryThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_InquiryThing\", HeaderList.Thing.x_ais_OrderRef_InquiryThing);\r",
									"//set global variable to x_ais_OrderDesc \"InquiryThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_InquiryThing\", HeaderList.Thing.x_ais_OrderDesc_InquiryThing);\r",
									"//set global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_RemoveThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_RemoveThingStateInfo);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals PullMessage --------------//\r",
									"//set global variable to x_ais_OrderRef \"GeneratePullMessage_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_GeneratePullMessage\", HeaderList.PullMessage.x_ais_OrderRef_GeneratePullMessage);\r",
									"//set global variable to x_ais_OrderDesc \"GeneratePullMessage\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_GeneratePullMessage\", HeaderList.PullMessage.x_ais_OrderDesc_GeneratePullMessage);\r",
									"//set global variable to x_ais_OrderRef \"RemovePullMessage_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemovePullMessage\", HeaderList.PullMessage.x_ais_OrderRef_RemovePullMessage);\r",
									"//set global variable to x_ais_OrderDesc \"RemovePullMessage\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemovePullMessage\", HeaderList.PullMessage.x_ais_OrderDesc_RemovePullMessage);\r",
									"//------------------------------------------------------------//\r",
									"\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"SignInProcess is Success\"\r",
									"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
									"//get global variable to resultDescription \"CreatePartner is Success\"\r",
									"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
									"//get global variable to resultDescription \"CreateAccount is Success\"\r",
									"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
									"//get global variable to resultDescription \"CreateThing is Success\"\r",
									"var resultDescriptionCreateThing = pm.globals.get(\"resultDescriptionCreateThing\");\r",
									"//get global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"var resultDescriptionCreateThingStateInfo = pm.globals.get(\"resultDescriptionCreateThingStateInfo\");\r",
									"//get global variable to resultDescription \"GeneratePullMessage is Success\"\r",
									"var resultDescriptionGeneratePullMessage = pm.globals.get(\"resultDescriptionGeneratePullMessage\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- urlRouteList --------------//\r",
									"//set variable to urlRouteList JSON.parse\r",
									"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
									"//---------------- set url Create --------------//\r",
									"//set global variable to url \"/api/v1/auth/signin\"\r",
									"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
									"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
									"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"pm.globals.set(\"urlThingCreateThing\", urlRouteList.Thing.urlThingCreateThing);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"pm.globals.set(\"urlThingCreateThingStateInfo\", urlRouteList.Thing.urlThingCreateThingStateInfo);\r",
									"//set global variable to url \"/api/v1/PullMessage/GeneratePullMessage\"\r",
									"pm.globals.set(\"urlPullMessageGeneratePullMessage\", urlRouteList.PullMessage.urlPullMessageGeneratePullMessage);\r",
									"//---------------- get url Create --------------//\r",
									"//get global variable to url \"/api/v1/auth/signin\"\r",
									"var urlSignin = pm.globals.get(\"urlSignin\");\r",
									"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
									"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"var urlThingCreateThing = pm.globals.get(\"urlThingCreateThing\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"var urlThingCreateThingStateInfo = pm.globals.get(\"urlThingCreateThingStateInfo\");\r",
									"//get global variable to url \"/api/v1/PullMessage/GeneratePullMessage\"\r",
									"var urlPullMessageGeneratePullMessage = pm.globals.get(\"urlPullMessageGeneratePullMessage\");\r",
									"//---------------- set url Remove --------------//\r",
									"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
									"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"pm.globals.set(\"urlThingRemoveThing\", urlRouteList.Thing.urlThingRemoveThing);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"pm.globals.set(\"urlThingRemoveThingStateInfo\", urlRouteList.Thing.urlThingRemoveThingStateInfo);\r",
									"//set global variable to url \"/api/v1/PullMessage/RemovePullMessage\"\r",
									"pm.globals.set(\"urlPullMessageRemovePullMessage\", urlRouteList.PullMessage.urlPullMessageRemovePullMessage);\r",
									"//---------------- set url Inquiry --------------//\r",
									"//set global variable to url \"/api/v1/Thing/InquiryThing\"\r",
									"pm.globals.set(\"urlThingInquiryThing\", urlRouteList.Thing.urlThingInquiryThing);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Signin_ --------------//\r",
									"//get global variable to x_ais_OrderRef \"Signin_\"\r",
									"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"var x_ais_OrderRef_CreateThing = pm.globals.get(\"x_ais_OrderRef_CreateThing\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"var x_ais_OrderDesc_CreateThing = pm.globals.get(\"x_ais_OrderDesc_CreateThing\");\r",
									"//get global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"var x_ais_OrderRef_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderRef_CreateThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"var x_ais_OrderDesc_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_CreateThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals PullMessage --------------//\r",
									"//get global variable to x_ais_OrderRef \"GeneratePullMessage_\"\r",
									"const x_ais_OrderRef_GeneratePullMessage = pm.globals.get(\"x_ais_OrderRef_GeneratePullMessage\");\r",
									"//get global variable to x_ais_OrderDesc \"GeneratePullMessage\"\r",
									"const x_ais_OrderDesc_GeneratePullMessage = pm.globals.get(\"x_ais_OrderDesc_GeneratePullMessage\");\r",
									"//------------------------------------------------------------//\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// Signin get token\r",
									"Signin = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSignin = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_Signin + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_UserAuthentication,\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestSignin = {\r",
									"            mode: 'raw',\r",
									"            raw:\r",
									"                JSON.stringify({\r",
									"                    username: Username,\r",
									"                    password: Password\r",
									"                })\r",
									"        };\r",
									"\r",
									"        let optionsSignin = {\r",
									"            url: url + provisioningapis + urlSignin,\r",
									"            method: 'POST',\r",
									"            header: headersOptSignin,\r",
									"            body: httpRequestSignin\r",
									"        };\r",
									"        // console.log('request Signin');\r",
									"        let response = await reqPromise(optionsSignin);\r",
									"        let jsonDataSignin = await response.json();\r",
									"\r",
									"        // setAccessToken\r",
									"        await pm.environment.set(\"AccessToken\", jsonDataSignin.AccessToken);\r",
									"\r",
									"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('Signin : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // SignInProcess is Success\r",
									"        pm.test('Signin : OperationStatus Description is ' + '\"' + resultDescriptionSuccessSignIn + '\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
									"        });\r",
									"\r",
									"        //set random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //set PartnerName\r",
									"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
									"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
									"        //set MerchantContact\r",
									"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
									"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
									"        // set CPID\r",
									"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
									"        pm.environment.set(\"CPID\", CPIDValue)\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreatePartner\r",
									"CreatePartner = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreatePartner = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreatePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreatePartner,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreatePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
									"                \"PartnerType\": fieldDataValue.Partner.PartnerTypeValue, // [\"Supplier\",\"Customer\"]\r",
									"                \"PartnerDetail\": {\r",
									"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
									"                    \"CPID\": pm.environment.get(\"CPID\")\r",
									"                },\r",
									"                \"Property\": {\r",
									"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreatePartner = {\r",
									"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreatePartner,\r",
									"            body: httpRequestCreatePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsCreatePartner);\r",
									"        let jsonDataCreatePartner = await response.json();\r",
									"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
									"\r",
									"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreatePartner : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreatePartner is Success\r",
									"        pm.test('CreatePartner : OperationStatus Description is ' + '\"' + resultDescriptionCreatePartner + '\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
									"        });\r",
									"\r",
									"        //GetResponse_PartnerId\r",
									"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
									"\r",
									"        //Accountname\r",
									"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
									"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateAccount\r",
									"CreateAccount = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateAccount = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateAccount,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreateAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateAccount = {\r",
									"            url: url + provisioningapis + urlAccountCreateAccount,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateAccount,\r",
									"            body: httpRequestCreateAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateAccount');\r",
									"        let response = await reqPromise(optionsCreateAccount);\r",
									"        let jsonDataCreateAccount = await response.json();\r",
									"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
									"\r",
									"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateAccount : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateAccount is Success\r",
									"        pm.test('CreateAccount : OperationStatus Description is ' + '\"' + resultDescriptionCreateAccount + '\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
									"        });\r",
									"        // GetResponse_AccountName\r",
									"        pm.environment.set(\"GetResponse_AccountName\", jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
									"        // GetResponse_AccountId\r",
									"        pm.environment.set(\"GetResponse_AccountId\", jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
									"        // random_IM\r",
									"        pm.environment.set(\"random_IM\", _.random(10000000, 99999999) + \" \" + _.random(1000000, 9999999))\r",
									"        // random_ICCID\r",
									"        pm.environment.set(\"random_ICCID\", _.random(1000000, 9999999) + \" \" + _.random(100000, 999999))\r",
									"        // random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //ThingName\r",
									"        let thingNameValue = fieldDataValue.Thing.ThingNameValue; // \"Sensor_TestThingName\"\r",
									"        pm.environment.set(\"ThingName\", thingNameValue + pm.environment.get(\"random_number\"))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThing\r",
									"CreateThing = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThing = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateThing + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateThing,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey': pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreateThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingName\": pm.environment.get(\"ThingName\"),\r",
									"                \"IMEI\": pm.environment.get(\"random_IM\"),\r",
									"                \"IMSI\": pm.environment.get(\"random_IM\"),\r",
									"                \"ICCID\": pm.environment.get(\"random_ICCID\"),\r",
									"                \"RouteUrl\": fieldDataValue.Thing.RouteUrlValue , //[\"http://10.12.3.4:2019/api/information/AddInformation\"]\r",
									"                \"RouteInfo\": {\r",
									"                    \"MIMO_ID\": fieldDataValue.Thing.RouteInfoMIMOIDValue , //\"606edada\"\r",
									"                    \"MIMO_SerialNo\": fieldDataValue.Thing.RouteInfoMIMOSerialNoValue //5466758878\r",
									"                },\r",
									"                \"RouteFlag\": {\r",
									"                    \"ThingName\": fieldDataValue.Thing.RouteFlagThingNameValue , //true\r",
									"                    \"ThingToken\": fieldDataValue.Thing.RouteFlagThingTokenValue, //true\r",
									"                    \"IMEI\": fieldDataValue.Thing.RouteFlagIMEIValue, //true\r",
									"                    \"ICCID\": fieldDataValue.Thing.RouteFlagICCIDValue, //true\r",
									"                    \"RouteInfo\": fieldDataValue.Thing.RouteFlagRouteInfoValue //true\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateThing = {\r",
									"            url: url + provisioningapis + urlThingCreateThing,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThing,\r",
									"            body: httpRequestCreateThing\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThing');\r",
									"        let response = await reqPromise(optionsCreateThing);\r",
									"        let jsonDataCreateThing = await response.json();\r",
									"        // console.log('jsonDataCreateThing',jsonDataCreateThing)\r",
									"\r",
									"        let operationStatusCreateThing = await jsonDataCreateThing.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateThing : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateThing : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateThing is Success\r",
									"        pm.test('CreateThing : OperationStatus Description is ' + '\"' + resultDescriptionCreateThing + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Description', resultDescriptionCreateThing);\r",
									"        });\r",
									"\r",
									"        pm.environment.set(\"GetResponse_ThingID\", jsonDataCreateThing.ThingInfo.ThingId)\r",
									"        pm.environment.set(\"GetResponse_IMSI\", jsonDataCreateThing.ThingInfo.IMSI)\r",
									"        \r",
									"        let keys = pm.environment.get(\"GetResponse_IMSI\") + \":\" + pm.environment.get(\"IpAddress\");\r",
									"        // console.log(\"keys\", keys);\r",
									"        let encodedKeys = CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(keys));\r",
									"        pm.environment.set(\"encodedKeys_Authorization_Register\", encodedKeys);\r",
									"\r",
									"        //Get Random Sensor \r",
									"        pm.environment.set(\"random_Sensor\", _.random(100, 999))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"pm.sendRequest(\"https://postman-echo.com/get\", function (err, response) {\r",
									"    console.log(response.json());\r",
									"});\r",
									"\r",
									"// CreateThingStateInfo\r",
									"CreateThingStateInfo = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThingStateInfo = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateThingStateInfo,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey': pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        // {\"Temp\" : pm.environment.get(\"random_Sensor\")}\r",
									"        let sensorValue = {};\r",
									"        sensorValue[fieldDataValue.CreateThingStateInfo.SensorKey] = pm.environment.get(\"random_Sensor\");\r",
									"        // console.log('sensorValue',sensorValue);\r",
									"        \r",
									"        let httpRequestCreateThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": [\r",
									"                    pm.environment.get(\"GetResponse_ThingID\")\r",
									"                ],\r",
									"                \"Type\": fieldDataValue.CreateThingStateInfo.Type_Report,\r",
									"                \"Sensor\": sensorValue\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingCreateThingStateInfo,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThingStateInfo,\r",
									"            body: httpRequestCreateThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThingStateInfo');\r",
									"        let response = await reqPromise(optionsCreateThingStateInfo);\r",
									"        let jsonDataCreateThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataCreateThingStateInfo',jsonDataCreateThingStateInfo)\r",
									"\r",
									"        let operationStatusCreateThingStateInfo = await jsonDataCreateThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"CreateThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //CreateThingStateInfo is Success\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Description is ' + '\"' + resultDescriptionCreateThingStateInfo + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Description', resultDescriptionCreateThingStateInfo);\r",
									"        });\r",
									"\r",
									"       \r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// GeneratePullMessage\r",
									"GeneratePullMessage = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptGeneratePullMessage = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_GeneratePullMessage + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_GeneratePullMessage,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey': pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"        // 2021-01-27T02:41:10.996Z\r",
									"        var futureDate = moment().add(pm.environment.get(\"numberFutureDatePullMessage\"), 'day').toJSON();\r",
									"        pm.environment.set(\"Future_Date\", futureDate);\r",
									"        // console.log('futureDate',futureDate);\r",
									"        pm.environment.set(\"random_number\",pm.variables.replaceIn('{{$randomInt}}'))\r",
									"        pm.environment.set(\"PullMessageName\",\"TestPullMessageName\"+pm.environment.get(\"random_number\"))\r",
									"        \r",
									"        // body\r",
									"        let httpRequestGeneratePullMessage = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\"),\r",
									"                \"PullMessageName\": pm.environment.get(\"PullMessageName\"),\r",
									"                \"Sensors\": [fieldDataValue.CreateThingStateInfo.SensorKey], //\"Temp\"\r",
									"                \"Type\": fieldDataValue.PullMessage.TypeValue, //\"All\"\r",
									"                \"ExpireDate\": pm.environment.get(\"Future_Date\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"\r",
									"        let optionsGeneratePullMessage = {\r",
									"            url: url + provisioningapis + urlPullMessageGeneratePullMessage,\r",
									"            method: 'POST',\r",
									"            header: headersOptGeneratePullMessage,\r",
									"            body: httpRequestGeneratePullMessage\r",
									"        };\r",
									"\r",
									"        // console.log('response GeneratePullMessage');\r",
									"        let response = await reqPromise(optionsGeneratePullMessage);\r",
									"        let jsonDataGeneratePullMessage = await response.json();\r",
									"        // console.log('jsonDataGeneratePullMessage',jsonDataGeneratePullMessage)\r",
									"    \r",
									"        let operationStatusGeneratePullMessage = await jsonDataGeneratePullMessage.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"GeneratePullMessage : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('GeneratePullMessage : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusGeneratePullMessage).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //GeneratePullMessage  is Success\r",
									"        pm.test('GeneratePullMessage : OperationStatus description is '+'\"'+ resultDescriptionGeneratePullMessage+'\"', function () {\r",
									"            pm.expect(operationStatusGeneratePullMessage).to.have.property('Description', resultDescriptionGeneratePullMessage);\r",
									"        });\r",
									"        // GeneratePullMessage_Key\r",
									"        pm.environment.set(\"GeneratePullMessage_Key\",jsonDataGeneratePullMessage.BackupDataInfo.PullMessageKey)\r",
									"        // GetResponse_PullMessageId\r",
									"        pm.environment.set(\"GetResponse_PullMessageId\",jsonDataGeneratePullMessage.BackupDataInfo.PullMessageId)\r",
									"\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"Signin();\r",
									"setTimeout(async function () { await CreatePartner(); }, 1000);\r",
									"setTimeout(async function () { await CreateAccount(); }, 3000);\r",
									"setTimeout(async function () { await CreateThing(); }, 4000);\r",
									"setTimeout(async function () { await CreateThingStateInfo(); }, 5000); \r",
									"setTimeout(async function () { await GeneratePullMessage(); }, 6000);\r",
									"setTimeout(async function () { }, 7000); "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}{{pullmessageapis}}/api/listen/thing/{{GeneratePullMessage_Key}}",
							"host": [
								"{{url}}{{pullmessageapis}}"
							],
							"path": [
								"api",
								"listen",
								"thing",
								"{{GeneratePullMessage_Key}}"
							]
						},
						"description": "Type:Desire"
					},
					"response": []
				},
				{
					"name": "PullMessageGetData_TST_F1_0_2_003_Error_ValidateKeyNotFound",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to xAisOrderRef \"RemoveThing_\"\r",
									"var x_ais_OrderRef_RemoveThing = pm.globals.get(\"x_ais_OrderRef_RemoveThing\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"var x_ais_OrderDesc_RemoveThing = pm.globals.get(\"x_ais_OrderDesc_RemoveThing\");\r",
									"//get global variable to xAisOrderRef \"RemoveThingStateInfo_\"\r",
									"var x_ais_OrderRef_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderRef_RemoveThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThingStateInfo\"\r",
									"var x_ais_OrderDesc_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_RemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get url Remove --------------//\r",
									"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
									"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"var urlThingRemoveThing = pm.globals.get(\"urlThingRemoveThing\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"var urlThingRemoveThingStateInfo = pm.globals.get(\"urlThingRemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"RemovePartner is Success\"\r",
									"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
									"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
									"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
									"//get global variable to resultDescription \"RemoveThing is Success\"\r",
									"var resultDescriptionRemoveThing = pm.globals.get(\"resultDescriptionRemoveThing\");\r",
									"//get global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"var resultDescriptionRemoveThingStateInfo = pm.globals.get(\"resultDescriptionRemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 404\r",
									"var statusCodeNotFound = pm.globals.get(\"statusCodeNotFound\");\r",
									"//get global variable to resultCode \"40400\"\r",
									"var resultCodeNotFound = pm.globals.get(\"resultCodeNotFound\");\r",
									"//get global variable to resultDescription \"The Pull message key is Not Found\"\r",
									"var resultDescriptionThePullmessageKeyIsNotFound = pm.globals.get(\"resultDescriptionThePullmessageKeyIsNotFound\");\r",
									"//------------------------------------------------------------//\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"PullMessage : Status code is \" + statusCodeNotFound, function () {\r",
									"    pm.response.to.have.status(statusCodeNotFound);\r",
									"});\r",
									"\r",
									"pm.test('PullMessage : operationStatus code is '+'\"'+ resultCodeNotFound +'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeNotFound);\r",
									"});\r",
									"\r",
									"pm.test('PullMessage : operationStatus description is '+'\"'+ resultDescriptionThePullmessageKeyIsNotFound+'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionThePullmessageKeyIsNotFound);\r",
									"});\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// RemovePartner\r",
									" RemovePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemovePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemovePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemovePartner = {\r",
									"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemovePartner,\r",
									"            body: httpRequestRemovePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request RemovePartner');\r",
									"        let response = await reqPromise(optionsRemovePartner);\r",
									"        let jsonDataRemovePartner = await response.json();\r",
									"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
									"    \r",
									"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemovePartner is Success\r",
									"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveAccount\r",
									" RemoveAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemoveAccount = {\r",
									"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveAccount,\r",
									"            body: httpRequestRemoveAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveAccount');\r",
									"        let response = await reqPromise(optionsRemoveAccount);\r",
									"        let jsonDataRemoveAccount = await response.json();\r",
									"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
									"    \r",
									"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveAccount is Success\r",
									"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThing\r",
									" RemoveThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThing = {\r",
									"            url: url + provisioningapis + urlThingRemoveThing,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThing,\r",
									"            body: httpRequestRemoveThing\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveThing');\r",
									"        let response = await reqPromise(optionsRemoveThing);\r",
									"        let jsonDataRemoveThing = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThing)\r",
									"    \r",
									"        let operationStatusRemoveThing = await jsonDataRemoveThing.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThing : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThing : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThing is Success\r",
									"        pm.test('RemoveThing : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThing+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Description', resultDescriptionRemoveThing);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThingStateInfo\r",
									" RemoveThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\"),\r",
									"                \"stateType\": fieldDataValue.CreateThingStateInfo.Type, //Report\r",
									"                \"stateKey\": fieldDataValue.CreateThingStateInfo.SensorKey //Temp\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingRemoveThingStateInfo,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThingStateInfo,\r",
									"            body: httpRequestRemoveThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('response RemoveThingStateInfo');\r",
									"        let response = await reqPromise(optionsRemoveThingStateInfo);\r",
									"        let jsonDataRemoveThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThingStateInfo)\r",
									"    \r",
									"        let operationStatusRemoveThingStateInfo = await jsonDataRemoveThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThingStateInfo is Success\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThingStateInfo+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Description', resultDescriptionRemoveThingStateInfo);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"//---------------- LogDefaultValue --------------//\r",
									"//set variable to LogDefaultValue JSON.parse\r",
									"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
									"// console.log('LogDefaultValue',LogDefaultValue);\r",
									"//---------------- set globals Other --------------//\r",
									"\r",
									"var SearchLog = LogDefaultValue.SearchLog;\r",
									"// console.log('SearchLog',SearchLog);\r",
									"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
									"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
									"var kbn_version = SearchLog.header.kbn_version;\r",
									"var authorization = SearchLog.header.Authorization;\r",
									"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
									"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
									"var namespace = LogDefaultValue.Other.namespace;\r",
									"\r",
									"// Detail\r",
									"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
									"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
									"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
									"\r",
									"// Summary\r",
									"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
									"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
									"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
									"// PullMessageAPIs\r",
									"var applicationName = LogDefaultValue.PullMessage.applicationName;\r",
									"var cmdName = LogDefaultValue.PullMessage.cmdName;\r",
									"var endPointName = LogDefaultValue.PullMessage.endPointName;\r",
									"var containerId = LogDefaultValue.PullMessage.containerId;\r",
									"var requestObjectUrlStaging = LogDefaultValue.PullMessage.requestObjectUrlStaging;\r",
									"\r",
									"// Check CDR (Summary Log) and EDR (Detail Log)\r",
									"SearchLogFindTid = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSearchLogFindTid = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = pm.environment.get(\"GeneratePullMessage_Key_003\");\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        // console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestSearchLogFindTid = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"\r",
									"        let optionsSearchLogFindTid = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptSearchLogFindTid,\r",
									"            body: httpRequestSearchLogFindTid\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsSearchLogFindTid);\r",
									"        let jsonDataSearchLogFindTid = await response.json();\r",
									"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataSearchLogFindTid.hits.hits;\r",
									"        // console.log('hits',hits)\r",
									"  \r",
									"        // find tid\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            // let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"        \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            if(applicationNameValue == applicationName){\r",
									"                let tid = hits[i]._source.cauldron.tid;\r",
									"                pm.environment.set(\"tid\", tid);\r",
									"                break;\r",
									"           }\r",
									"\r",
									"        }\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"CheckLog = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCheckLog = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = pm.environment.get(\"tid\");\r",
									"\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        // console.log(\"tid\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestCheckLog = {\r",
									"            mode: 'raw',\r",
									"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"        let optionsCheckLog = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptCheckLog,\r",
									"            body: httpRequestCheckLog\r",
									"        }; \r",
									"        let response = await reqPromise(optionsCheckLog);\r",
									"        let jsonDataCheckLog = await response.json();\r",
									"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
									"        \r",
									"        // //200\r",
									"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });     \r",
									"        \r",
									"        let hits = jsonDataCheckLog.hits.hits;\r",
									"        // console.log('hits',hits)\r",
									"  \r",
									"        // find logType\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            //  let logType = hits[i]._source.cauldron.logType\r",
									"            let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"        \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"\r",
									"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
									"            // console.log('resultDataLog',resultDataLog)\r",
									"\r",
									"            let tidControl = pm.environment.get(\"tid\");\r",
									"            // console.log(tidControl);\r",
									"\r",
									"            if(applicationNameValue == applicationName){\r",
									"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and PullMessageAPIs\r",
									"                    pm.test(\"Check Summary Log : PullMessage\" , function () {\r",
									"                        console.log(\"======== Check Summary Log ( Expected = Actual) [PullMessage] ==================\");\r",
									"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
									"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
									"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeNotFound);\r",
									"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionThePullmessageKeyIsNotFound);\r",
									"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
									"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
									"                        console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
									"\r",
									"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
									"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
									"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeNotFound); \r",
									"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionThePullmessageKeyIsNotFound); \r",
									"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
									"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(tidControl); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.identity).to.eql(identitySummary); \r",
									"                        pm.expect(resultDataLog.custom).to.eql(customSummary); \r",
									"                    }); \r",
									"                }\r",
									"                \r",
									"                if(logType == logTypeDetail && applicationNameValue == applicationName){ //'Detail' and PullMessageAPIs\r",
									"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
									"                    // console.log('endPointNameValue',endPointNameValue)\r",
									"\r",
									"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [PullMessage]\", function () {\r",
									"                        console.log(\"======== Check Detail Log ( Expected = Actual) [PullMessage] ==================\");\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
									"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"custom1.endPointName : \" + resultDataLog.custom1.endPointName + \" = \" + endPointName);\r",
									"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
									"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
									"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
									"\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
									"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(tidControl); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointName); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
									"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
									"\r",
									"                        // \"requestObject\":\"{\\\"url\\\":\\\"mg-staging.sandais.com/api/listen/thing/0BEB9C70803C4947B016F1EE210045E4\\\",\\\"routeParamteters\\\":{\\\"Key\\\":\\\"0BEB9C70803C4947B016F1EE210045E4\\\"}}\"\r",
									"\r",
									"                        // check requestObject\r",
									"                        let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
									"                        // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
									"                        let url = urlCheckLog + requestObjectUrlStaging + pm.environment.get(\"GeneratePullMessage_Key_003\"); \r",
									"\r",
									"                        console.log(\"resquest.url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
									"                        console.log(\"resquest.routeParamteters.Key : \" + jsonParseRequestObject.routeParamteters.Key + \" = \" + pm.environment.get(\"GeneratePullMessage_Key_003\"));\r",
									"\r",
									"                        pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
									"                        pm.expect(jsonParseRequestObject.routeParamteters.Key).to.eql(pm.environment.get(\"GeneratePullMessage_Key_003\"));\r",
									"                        \r",
									"                        // \"responseObject\":\"{\\\"ThingName\\\":null,\\\"IMEI\\\":null,\\\"IMSI\\\":null,\\\"ICCID\\\":null,\\\"Sensor\\\":null,\\\"OperationStatus\\\":{\\\"Code\\\":\\\"40304\\\",\\\"Description\\\":\\\"The Pull message key has Expired or must not be yet valid\\\"}}\"\r",
									"                        // check responseObject\r",
									"                        let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
									"                        // console.log('jsonParseResponseObject',jsonParseResponseObject);\r",
									"                        let imei = null\r",
									"                        let imsi = null\r",
									"                        let iccid = null\r",
									"                        // let SensorKey = fieldDataValue.CreateThingStateInfo.SensorKey;\r",
									"                        let sensor = null\r",
									"                        let operationStatusCode = resultCodeNotFound;\r",
									"                        let operationStatusDescription = resultDescriptionThePullmessageKeyIsNotFound;\r",
									"\r",
									"                        console.log(\"response.ThingName : \" + jsonParseResponseObject.ThingName + \" = \" + jsonParseResponseObject.ThingName);\r",
									"                        console.log(\"response.IMEI : \" + jsonParseResponseObject.IMEI + \" = \" + imei);\r",
									"                        console.log(\"response.IMSI : \" + jsonParseResponseObject.IMSI + \" = \" + imsi);\r",
									"                        console.log(\"response.ICCID : \" + jsonParseResponseObject.ICCID + \" = \" + iccid);\r",
									"                        console.log(\"response.Sensor : \" + jsonParseResponseObject.Sensor + \" = \" + sensor);\r",
									"\r",
									"                        pm.expect(jsonParseResponseObject.ThingName).to.eql(jsonParseResponseObject.ThingName);  \r",
									"                        pm.expect(jsonParseResponseObject.IMEI).to.eql(imei);  \r",
									"                        pm.expect(jsonParseResponseObject.IMSI).to.eql(imsi);  \r",
									"                        pm.expect(jsonParseResponseObject.ICCID).to.eql(iccid);  \r",
									"                        pm.expect(jsonParseResponseObject.Sensor).to.eql(sensor);  \r",
									"\r",
									"                        console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + operationStatusCode);\r",
									"                        console.log(\"response.OperationStatus.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + operationStatusDescription);\r",
									"\r",
									"                        pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(operationStatusCode);  \r",
									"                        pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(operationStatusDescription);  \r",
									"                    }); \r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"setTimeout(function(){SearchLogFindTid();}, 8000); \r",
									"setTimeout(function(){CheckLog();}, 11000);  \r",
									"setTimeout(function(){RemoveThingStateInfo();}, 30000); \r",
									"setTimeout(function(){RemoveThing();}, 35000); \r",
									"setTimeout(function(){RemoveAccount();}, 36000); \r",
									"setTimeout(function(){RemovePartner();}, 37000);\r",
									"\r",
									"setTimeout(function(){\r",
									"pm.environment.unset(\"current_timestamp\");\r",
									"pm.environment.unset(\"AccessToken\");\r",
									"pm.environment.unset(\"random_number\");\r",
									"pm.environment.unset(\"PartnerName\");\r",
									"pm.environment.unset(\"MerchantContact\");\r",
									"pm.environment.unset(\"CPID\");\r",
									"pm.environment.unset(\"GetResponse_PartnerId\");\r",
									"pm.environment.unset(\"AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountId\");\r",
									"pm.environment.unset(\"random_IM\");\r",
									"pm.environment.unset(\"random_ICCID\");\r",
									"pm.environment.unset(\"ThingName\");\r",
									"pm.environment.unset(\"GetResponse_ThingID\");\r",
									"pm.environment.unset(\"GetResponse_IMSI\");\r",
									"pm.environment.unset(\"encodedKeys_Authorization_Register\");\r",
									"pm.environment.unset(\"random_Sensor\");\r",
									"pm.environment.unset(\"Future_Date\");\r",
									"pm.environment.unset(\"PullMessageName\");\r",
									"pm.environment.unset(\"GeneratePullMessage_Key\");\r",
									"pm.environment.unset(\"GetResponse_PullMessageId\");\r",
									"pm.environment.unset(\"tid\");\r",
									"pm.environment.unset(\"GeneratePullMessage_Key_003\");\r",
									"}, 90000); "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var Username = pm.environment.get(\"Username\");\r",
									"var Password = pm.environment.get(\"Password\");\r",
									"\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"pm.environment.set(\"GeneratePullMessage_Key_003\",fieldDataValue.PullMessage.GeneratePullMessage_Key_003)\r",
									"\r",
									"//format YYYYMMDDHHMMSSS\r",
									"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
									"// console.log('currentTmestamp',currentTmestamp);\r",
									"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- statusCodeList --------------//\r",
									"//set variable to statusCodeList JSON.parse\r",
									"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
									"//set global variable to statusCode 200\r",
									"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
									"//set global variable to statusCode 201\r",
									"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
									"//set global variable to statusCode 404\r",
									"pm.globals.set(\"statusCodeNotFound\", statusCodeList.statusCodeNotFound);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultCodeList --------------//\r",
									"//set variable to resultCodeList JSON.parse\r",
									"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
									"//set global variable to resultCode \"20000\"\r",
									"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
									"//set global variable to resultCode \"20100\"\r",
									"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
									"//set global variable to resultCode \"40400\"\r",
									"pm.globals.set(\"resultCodeNotFound\", resultCodeList.resultCodeNotFound);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionSuccessList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
									"//set global variable to resultDescription \"SignInProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
									"//set global variable to resultDescription \"CreatePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
									"//set global variable to resultDescription \"CreateAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
									"//set global variable to resultDescription \"CreateThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThing\", resultDescriptionSuccessList.resultDescriptionCreateThing);\r",
									"//set global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThingStateInfo\", resultDescriptionSuccessList.resultDescriptionCreateThingStateInfo);\r",
									"//set global variable to resultDescription \"RemovePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
									"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
									"//set global variable to resultDescription \"RemoveThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThing\", resultDescriptionSuccessList.resultDescriptionRemoveThing);\r",
									"//set global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThingStateInfo\", resultDescriptionSuccessList.resultDescriptionRemoveThingStateInfo);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionErrorList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
									"//set global variable to resultDescription \"The Pull message key is Not Found\"\r",
									"pm.globals.set(\"resultDescriptionThePullmessageKeyIsNotFound\", resultDescriptionErrorList.resultDescriptionThePullmessageKeyIsNotFound);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- HeaderList --------------//\r",
									"//set variable to HeaderList JSON.parse\r",
									"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
									"//---------------- set globals Other --------------//\r",
									"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
									"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
									"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
									"//set global variable to kbn-versio \"7.5.1\"\r",
									"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Signin_ --------------//\r",
									"//set global variable to x_ais_OrderRef \"Signin_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreatePartner --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
									"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
									"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
									"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreateAccount --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
									"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
									"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Thing --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThing\", HeaderList.Thing.x_ais_OrderRef_CreateThing);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThing\", HeaderList.Thing.x_ais_OrderDesc_CreateThing);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThing\", HeaderList.Thing.x_ais_OrderRef_RemoveThing);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThing\", HeaderList.Thing.x_ais_OrderDesc_RemoveThing);\r",
									"//set global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_RemoveThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_RemoveThingStateInfo);\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"SignInProcess is Success\"\r",
									"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
									"//get global variable to resultDescription \"CreatePartner is Success\"\r",
									"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
									"//get global variable to resultDescription \"CreateAccount is Success\"\r",
									"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
									"//get global variable to resultDescription \"CreateThing is Success\"\r",
									"var resultDescriptionCreateThing = pm.globals.get(\"resultDescriptionCreateThing\");\r",
									"//get global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"var resultDescriptionCreateThingStateInfo = pm.globals.get(\"resultDescriptionCreateThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- urlRouteList --------------//\r",
									"//set variable to urlRouteList JSON.parse\r",
									"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
									"//---------------- set url Create --------------//\r",
									"//set global variable to url \"/api/v1/auth/signin\"\r",
									"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
									"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
									"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"pm.globals.set(\"urlThingCreateThing\", urlRouteList.Thing.urlThingCreateThing);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"pm.globals.set(\"urlThingCreateThingStateInfo\", urlRouteList.Thing.urlThingCreateThingStateInfo);\r",
									"//set global variable to url \"/api/v1/PullMessage/GeneratePullMessage\"\r",
									"pm.globals.set(\"urlPullMessageGeneratePullMessage\", urlRouteList.PullMessage.urlPullMessageGeneratePullMessage);\r",
									"//---------------- get url Create --------------//\r",
									"//get global variable to url \"/api/v1/auth/signin\"\r",
									"var urlSignin = pm.globals.get(\"urlSignin\");\r",
									"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
									"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"var urlThingCreateThing = pm.globals.get(\"urlThingCreateThing\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"var urlThingCreateThingStateInfo = pm.globals.get(\"urlThingCreateThingStateInfo\");\r",
									"//---------------- set url Remove --------------//\r",
									"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
									"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"pm.globals.set(\"urlThingRemoveThing\", urlRouteList.Thing.urlThingRemoveThing);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"pm.globals.set(\"urlThingRemoveThingStateInfo\", urlRouteList.Thing.urlThingRemoveThingStateInfo);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Signin_ --------------//\r",
									"//get global variable to x_ais_OrderRef \"Signin_\"\r",
									"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"var x_ais_OrderRef_CreateThing = pm.globals.get(\"x_ais_OrderRef_CreateThing\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"var x_ais_OrderDesc_CreateThing = pm.globals.get(\"x_ais_OrderDesc_CreateThing\");\r",
									"//get global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"var x_ais_OrderRef_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderRef_CreateThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"var x_ais_OrderDesc_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_CreateThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// Signin get token\r",
									"Signin = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSignin = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_Signin + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_UserAuthentication,\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestSignin = {\r",
									"            mode: 'raw',\r",
									"            raw:\r",
									"                JSON.stringify({\r",
									"                    username: Username,\r",
									"                    password: Password\r",
									"                })\r",
									"        };\r",
									"\r",
									"        let optionsSignin = {\r",
									"            url: url + provisioningapis + urlSignin,\r",
									"            method: 'POST',\r",
									"            header: headersOptSignin,\r",
									"            body: httpRequestSignin\r",
									"        };\r",
									"        // console.log('request Signin');\r",
									"        let response = await reqPromise(optionsSignin);\r",
									"        let jsonDataSignin = await response.json();\r",
									"\r",
									"        // setAccessToken\r",
									"        await pm.environment.set(\"AccessToken\", jsonDataSignin.AccessToken);\r",
									"\r",
									"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('Signin : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // SignInProcess is Success\r",
									"        pm.test('Signin : OperationStatus Description is ' + '\"' + resultDescriptionSuccessSignIn + '\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
									"        });\r",
									"\r",
									"        //set random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //set PartnerName\r",
									"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
									"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
									"        //set MerchantContact\r",
									"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
									"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
									"        // set CPID\r",
									"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
									"        pm.environment.set(\"CPID\", CPIDValue)\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreatePartner\r",
									"CreatePartner = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreatePartner = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreatePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreatePartner,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreatePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
									"                \"PartnerType\": [\r",
									"                    \"Supplier\",\r",
									"                    \"Customer\"\r",
									"                ],\r",
									"                \"PartnerDetail\": {\r",
									"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
									"                    \"CPID\": pm.environment.get(\"CPID\")\r",
									"                },\r",
									"                \"Property\": {\r",
									"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreatePartner = {\r",
									"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreatePartner,\r",
									"            body: httpRequestCreatePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsCreatePartner);\r",
									"        let jsonDataCreatePartner = await response.json();\r",
									"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
									"\r",
									"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreatePartner : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreatePartner is Success\r",
									"        pm.test('CreatePartner : OperationStatus Description is ' + '\"' + resultDescriptionCreatePartner + '\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
									"        });\r",
									"\r",
									"        //GetResponse_PartnerId\r",
									"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
									"\r",
									"        //Accountname\r",
									"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
									"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateAccount\r",
									"CreateAccount = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateAccount = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateAccount,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreateAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateAccount = {\r",
									"            url: url + provisioningapis + urlAccountCreateAccount,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateAccount,\r",
									"            body: httpRequestCreateAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateAccount');\r",
									"        let response = await reqPromise(optionsCreateAccount);\r",
									"        let jsonDataCreateAccount = await response.json();\r",
									"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
									"\r",
									"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateAccount : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateAccount is Success\r",
									"        pm.test('CreateAccount : OperationStatus Description is ' + '\"' + resultDescriptionCreateAccount + '\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
									"        });\r",
									"        // GetResponse_AccountName\r",
									"        pm.environment.set(\"GetResponse_AccountName\", jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
									"        // GetResponse_AccountId\r",
									"        pm.environment.set(\"GetResponse_AccountId\", jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
									"        // random_IM\r",
									"        pm.environment.set(\"random_IM\", _.random(10000000, 99999999) + \" \" + _.random(1000000, 9999999))\r",
									"        // random_ICCID\r",
									"        pm.environment.set(\"random_ICCID\", _.random(1000000, 9999999) + \" \" + _.random(100000, 999999))\r",
									"        // random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //ThingName\r",
									"        let thingNameValue = fieldDataValue.Thing.ThingNameValue; // \"Sensor_TestThingName\"\r",
									"        pm.environment.set(\"ThingName\", thingNameValue + pm.environment.get(\"random_number\"))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThing\r",
									"CreateThing = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThing = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateThing + pm.environment.get(\"current_timestamp\"),\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateThing,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey': pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreateThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingName\": pm.environment.get(\"ThingName\"),\r",
									"                \"IMEI\": pm.environment.get(\"random_IM\"),\r",
									"                \"IMSI\": pm.environment.get(\"random_IM\"),\r",
									"                \"ICCID\": pm.environment.get(\"random_ICCID\"),\r",
									"                \"RouteUrl\": fieldDataValue.Thing.RouteUrlValue , //[\"http://10.12.3.4:2019/api/information/AddInformation\"]\r",
									"                \"RouteInfo\": {\r",
									"                    \"MIMO_ID\": fieldDataValue.Thing.RouteInfoMIMOIDValue , //\"606edada\"\r",
									"                    \"MIMO_SerialNo\": fieldDataValue.Thing.RouteInfoMIMOSerialNoValue //5466758878\r",
									"                },\r",
									"                \"RouteFlag\": {\r",
									"                    \"ThingName\": fieldDataValue.Thing.RouteFlagThingNameValue , //true\r",
									"                    \"ThingToken\": fieldDataValue.Thing.RouteFlagThingTokenValue, //true\r",
									"                    \"IMEI\": fieldDataValue.Thing.RouteFlagIMEIValue, //true\r",
									"                    \"ICCID\": fieldDataValue.Thing.RouteFlagICCIDValue, //true\r",
									"                    \"RouteInfo\": fieldDataValue.Thing.RouteFlagRouteInfoValue //true\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateThing = {\r",
									"            url: url + provisioningapis + urlThingCreateThing,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThing,\r",
									"            body: httpRequestCreateThing\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThing');\r",
									"        let response = await reqPromise(optionsCreateThing);\r",
									"        let jsonDataCreateThing = await response.json();\r",
									"        // console.log('jsonDataCreateThing',jsonDataCreateThing)\r",
									"\r",
									"        let operationStatusCreateThing = await jsonDataCreateThing.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateThing : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateThing : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateThing is Success\r",
									"        pm.test('CreateThing : OperationStatus Description is ' + '\"' + resultDescriptionCreateThing + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Description', resultDescriptionCreateThing);\r",
									"        });\r",
									"\r",
									"        pm.environment.set(\"GetResponse_ThingID\", jsonDataCreateThing.ThingInfo.ThingId)\r",
									"        pm.environment.set(\"GetResponse_IMSI\", jsonDataCreateThing.ThingInfo.IMSI)\r",
									"        \r",
									"        let keys = pm.environment.get(\"GetResponse_IMSI\") + \":\" + pm.environment.get(\"IpAddress\");\r",
									"        // console.log(\"keys\", keys);\r",
									"        let encodedKeys = CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(keys));\r",
									"        pm.environment.set(\"encodedKeys_Authorization_Register\", encodedKeys);\r",
									"\r",
									"        //Get Random Sensor \r",
									"        pm.environment.set(\"random_Sensor\", _.random(100, 999))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThingStateInfo\r",
									"CreateThingStateInfo = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThingStateInfo = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateThingStateInfo + pm.environment.get(\"current_timestamp\"),\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateThingStateInfo,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey': pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        // {\"Temp\" : pm.environment.get(\"random_Sensor\")}\r",
									"        let sensorValue = {};\r",
									"        sensorValue[fieldDataValue.CreateThingStateInfo.SensorKey] = pm.environment.get(\"random_Sensor\");\r",
									"        // console.log('sensorValue',sensorValue);\r",
									"        \r",
									"        let httpRequestCreateThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": [\r",
									"                    pm.environment.get(\"GetResponse_ThingID\")\r",
									"                ],\r",
									"                \"Type\": fieldDataValue.CreateThingStateInfo.Type_Report,\r",
									"                \"Sensor\": sensorValue\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingCreateThingStateInfo,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThingStateInfo,\r",
									"            body: httpRequestCreateThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThingStateInfo');\r",
									"        let response = await reqPromise(optionsCreateThingStateInfo);\r",
									"        let jsonDataCreateThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataCreateThingStateInfo',jsonDataCreateThingStateInfo)\r",
									"\r",
									"        let operationStatusCreateThingStateInfo = await jsonDataCreateThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"CreateThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //CreateThingStateInfo is Success\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Description is ' + '\"' + resultDescriptionCreateThingStateInfo + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Description', resultDescriptionCreateThingStateInfo);\r",
									"        });\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"Signin();\r",
									"setTimeout(async function () { await CreatePartner(); }, 1000);\r",
									"setTimeout(async function () { await CreateAccount(); }, 2500);\r",
									"setTimeout(async function () { await CreateThing(); }, 3000);\r",
									"setTimeout(async function () { await CreateThingStateInfo(); }, 4500); \r",
									"setTimeout(async function () { }, 7000); \r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}{{pullmessageapis}}/api/listen/thing/{{GeneratePullMessage_Key_003}}",
							"host": [
								"{{url}}{{pullmessageapis}}"
							],
							"path": [
								"api",
								"listen",
								"thing",
								"{{GeneratePullMessage_Key_003}}"
							]
						},
						"description": "Type:Desire"
					},
					"response": []
				}
			]
		}
	]
}