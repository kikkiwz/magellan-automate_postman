{
	"info": {
		"_postman_id": "5466ee8d-2d34-4989-80a4-5a899029debc",
		"name": "Provisioning_Customer",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Customer",
			"item": [
				{
					"name": "DeleteCustomer",
					"item": [
						{
							"name": "DeleteCustomer_TST_F73_1_1_001_Success_RootAdmin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals DeleteCustomer --------------//\r",
											"//get global variable to x_ais_OrderRef \"DeleteCustomer_\"\r",
											"var x_ais_OrderRef_DeleteCustomer = pm.globals.get(\"x_ais_OrderRef_DeleteCustomer\");\r",
											"//get global variable to x_ais_OrderDesc \"DeleteCustomer\"\r",
											"var x_ais_OrderDesc_DeleteCustomer = pm.globals.get(\"x_ais_OrderDesc_DeleteCustomer\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Purchase --------------//\r",
											"//get global variable to xAisOrderRef \"InquiryPurchase_\"\r",
											"var x_ais_OrderRef_InquiryPurchase = pm.globals.get(\"x_ais_OrderRef_InquiryPurchase\");\r",
											"//get global variable to x_ais_OrderDesc \"InquiryPurchase\"\r",
											"var x_ais_OrderDesc_InquiryPurchase = pm.globals.get(\"x_ais_OrderDesc_InquiryPurchase\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get url Inquiry --------------//\r",
											"//get global variable to url \"/api/v1/Purchase/InquiryPurchase\"\r",
											"var urlInquiryPurchase = pm.globals.get(\"urlInquiryPurchase\");\r",
											"//------------------------------------------------------------//\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultCode \"20100\"\r",
											"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
											"//get global variable to resultDescription \"InquiryPurchase is Success\"\r",
											"var resultDescriptionInquiryPurchase = pm.globals.get(\"resultDescriptionInquiryPurchase\");\r",
											"//------------------------------------------------------------//\r",
											"//get global variable to resultDescription \"removeCustomer is Success\"\r",
											"var resultDescriptionRemoveCustomer = pm.globals.get(\"resultDescriptionRemoveCustomer\");\r",
											"//------------------------------------------------------------//\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"DeleteCustomer : Status code is \" + statusCodeSuccess, function () {\r",
											"    pm.response.to.have.status(statusCodeSuccess);\r",
											"});\r",
											"\r",
											"pm.test('DeleteCustomer : operationStatus code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeSuccess);\r",
											"});\r",
											"\r",
											"pm.test('DeleteCustomer : operationStatus description is '+'\"'+ resultDescriptionRemoveCustomer+'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionRemoveCustomer);\r",
											"});\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"//---------------- LogDefaultValue --------------//\r",
											"//set variable to LogDefaultValue JSON.parse\r",
											"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
											"// console.log('LogDefaultValue',LogDefaultValue);\r",
											"//---------------- set globals Other --------------//\r",
											"\r",
											"var SearchLog = LogDefaultValue.SearchLog;\r",
											"// console.log('SearchLog',SearchLog);\r",
											"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
											"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
											"var kbn_version = SearchLog.header.kbn_version;\r",
											"var authorization = SearchLog.header.Authorization;\r",
											"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
											"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
											"var namespace = LogDefaultValue.Other.namespace;\r",
											"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
											"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
											"var header_x_ais_username = LogDefaultValue.Other.header_x_ais_username;\r",
											"var header_x_ais_accountkey = LogDefaultValue.Other.header_x_ais_accountkey;\r",
											"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
											"var methodDelete = LogDefaultValue.Other.methodDelete;\r",
											"\r",
											"// Detail\r",
											"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
											"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
											"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
											"\r",
											"// Summary\r",
											"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
											"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
											"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
											"\r",
											"// ProvisioningAPIs [Purchase]\r",
											"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
											"var cmdName = LogDefaultValue.Provisioning.DeleteCustomer.cmdNameRemoveCustomer;\r",
											"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
											"var containerId = LogDefaultValue.Provisioning.containerId;\r",
											"var requestObjectUrlStaging = LogDefaultValue.Provisioning.DeleteCustomer.requestObjectUrlDeleteCustomerMgStaging;\r",
											"\r",
											"// Check CDR (Summary Log) and EDR (Detail Log)\r",
											"SearchLogFindTid = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSearchLogFindTid = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = x_ais_OrderRef_DeleteCustomer + current_timestamp;\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestSearchLogFindTid = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"\r",
											"        let optionsSearchLogFindTid = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptSearchLogFindTid,\r",
											"            body: httpRequestSearchLogFindTid\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsSearchLogFindTid);\r",
											"        let jsonDataSearchLogFindTid = await response.json();\r",
											"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
											"\r",
											"        // //200\r",
											"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"\r",
											"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
											"        console.log('hits',hits)\r",
											"  \r",
											"        // find tid\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            // let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"        \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            if(applicationNameValue == applicationName){\r",
											"                let sessionId = hits[i]._source.cauldron.sessionId;\r",
											"                pm.environment.set(\"sessionId\", sessionId);\r",
											"                break;\r",
											"           }\r",
											"        }\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"CheckLog = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCheckLog = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = pm.environment.get(\"sessionId\");\r",
											"\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestCheckLog = {\r",
											"            mode: 'raw',\r",
											"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"        let optionsCheckLog = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptCheckLog,\r",
											"            body: httpRequestCheckLog\r",
											"        }; \r",
											"        let response = await reqPromise(optionsCheckLog);\r",
											"        let jsonDataCheckLog = await response.json();\r",
											"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
											"        \r",
											"        // //200\r",
											"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });     \r",
											"        \r",
											"        let hits = jsonDataCheckLog.hits.hits\r",
											"        console.log('hits',hits)\r",
											"  \r",
											"        // find logType\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            //  let logType = hits[i]._source.cauldron.logType\r",
											"            let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"           \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            \r",
											"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
											"            // console.log('resultDataLog',resultDataLog)\r",
											"\r",
											"            let tidControl = x_ais_OrderRef_DeleteCustomer + current_timestamp;\r",
											"            // console.log(tidControl);\r",
											"            if(applicationNameValue == applicationName){\r",
											"                 \r",
											"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ProvisioningAPIs\r",
											"                    pm.test(\"Check Summary Log : DeleteCustomer\" , function () {\r",
											"                        console.log(\"======== Check Summary Log ( Expected = Actual) [DeleteCustomer] ==================\");\r",
											"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
											"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
											"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeSuccess);\r",
											"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionRemoveCustomer);\r",
											"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
											"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
											"                        // console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
											"\r",
											"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
											"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
											"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeSuccess); \r",
											"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionRemoveCustomer); \r",
											"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
											"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
											"                        // pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
											"\r",
											"                        // check custom\r",
											"                        // \\\"custom\\\":{ \\\"endPointSummary\\\":[ { \\\"no\\\":\\\"1\\\", \\\"endPointName\\\":\\\"db.CustomersCollection\\\", \\\"responseStatus\\\":\\\"Success:InquiryCustomer was successfully.\\\", \\\"processTime\\\":1.3331 }, { \\\"no\\\":\\\"2\\\", \\\"endPointName\\\":\\\"db.CustomersCollection\\\", \\\"responseStatus\\\":\\\"Success:DeleteCustomer was successfully.\\\", \\\"processTime\\\":31.1975 } ] }\r",
											"                        let custom = resultDataLog.custom.endPointSummary;\r",
											"                        let countCustom = custom.length;\r",
											"                       \r",
											"                        // [\"db.CustomersCollection\",\"db.CustomersCollection\"]\r",
											"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_DeleteCustomer;\r",
											"                        // [\"Success:InquiryCustomer was successfully.\",\"Success:DeleteCustomer was successfully.\"]\r",
											"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_DeleteCustomer;\r",
											"                        let countCustomStep = dataEndPointName.length;\r",
											"\r",
											"                        console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep);\r",
											"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
											"                        \r",
											"                        for(let i=0;i<countCustomStep;i++){\r",
											"                            let no = custom[i].no;\r",
											"                            let valueEndPointName = custom[i].endPointName;\r",
											"                            let valueResponseStatus = custom[i].responseStatus;\r",
											"                            // console.log(\"i\",i);\r",
											"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
											"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
											"\r",
											"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString());\r",
											"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i]);\r",
											"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i]);\r",
											"\r",
											"                            pm.expect(no).to.eql((i+1).toString()); \r",
											"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
											"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]); \r",
											"                        }\r",
											"                    }); \r",
											"                }\r",
											"\r",
											"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ProvisioningAPIs\r",
											"\r",
											"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
											"                    // console.log('endPointNameValue ',endPointNameValue)\r",
											"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [DeleteCustomer]\", function () {\r",
											"                        console.log(\"======== Check Detail Log ( Expected = Actual) [DeleteCustomer] ==================\");\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
											"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
											"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
											"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
											"\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
											"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
											"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
											"\r",
											"                        if( endPointNameValue == endPointNameProvisioningAPIs){     //\"endPointName\":\"ProvisioningAPIs\"\r",
											"                            console.log(\"custom1.endPointName : \" + resultDataLog.custom1.endPointName + \" = \" + endPointNameProvisioningAPIs);\r",
											"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs); \r",
											"                        \r",
											"                            // check requestObject\r",
											"                            // \"requestObject\":\"{\\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Customer/DeleteCustomer\\\",\\\"method\\\":\\\"DELETE\\\",\\\"headers\\\":{\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"DeleteCustomer_202102172002434\\\",\\\"x-ais-orderdesc\\\":\\\"DeleteCustomer\\\",\\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAGJjc8t2ZfqZcNNvBKwuLmPMV/NLO2GPEwLJG3c2Ik+TEIlAkkY2KW0\\\"},\\\"body\\\":{\\\"customerId\\\":\\\"602d106dd441170001999928\\\"}}\"\r",
											"                            \r",
											"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
											"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
											"                            let url = urlCheckLog + requestObjectUrlStaging;\r",
											"                            let x_ais_orderref = x_ais_OrderRef_DeleteCustomer + current_timestamp;\r",
											"                            let x_ais_orderdesc = x_ais_OrderDesc_DeleteCustomer;\r",
											"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken\");\r",
											"                            let x_ais_userName = x_ais_UserName_AisPartner;\r",
											"                            \r",
											"                            let customerId = pm.environment.get(\"GetResponse_CustomerId\");\r",
											"                            \r",
											"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
											"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodDelete);\r",
											"                            console.log(\"headers.x_ais_userName : \" + jsonParseRequestObject.headers[header_x_ais_username] + \" = \" + x_ais_userName);\r",
											"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
											"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
											"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
											"                                                                                                                                                             \r",
											"                            pm.expect(jsonParseRequestObject.url).to.eql(url);\r",
											"                            pm.expect(jsonParseRequestObject.method).to.eql(methodDelete);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_username]).to.eql(x_ais_userName);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
											"\r",
											"                            console.log(\"resquest.body.customerId : \" + jsonParseRequestObject.body.customerId + \" = \" + customerId);\r",
											"\r",
											"                            pm.expect(jsonParseRequestObject.body.customerId).to.eql(customerId);\r",
											"\r",
											"                            // check responseObject\r",
											"                            // \"responseObject\":\"{\\\"OperationStatus\\\":{\\\"Code\\\":\\\"20000\\\",\\\"Description\\\":\\\"removeCustomer is Success\\\"}}\"\r",
											"\r",
											"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
											"                            // console.log('jsonParseResponseObject',jsonParseResponseObject);\r",
											"\r",
											"                            console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeSuccess);\r",
											"                            console.log(\"response.OperationStatus.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionRemoveCustomer);\r",
											"\r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeSuccess);  \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionRemoveCustomer);  \r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// InquiryPurchase\r",
											"InquiryPurchase = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptInquiryPurchase = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_InquiryPurchase + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_InquiryPurchase,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestInquiryPurchase = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"customerId\": pm.environment.get(\"GetResponse_CustomerId\")\r",
											"            })\r",
											"        };\r",
											"\r",
											"        let optionsInquiryPurchase = {\r",
											"            url: url + provisioningapis + urlInquiryPurchase,\r",
											"            method: 'POST',\r",
											"            header: headersOptInquiryPurchase,\r",
											"            body: httpRequestInquiryPurchase\r",
											"        };\r",
											"\r",
											"        // console.log('request InquiryPurchase');\r",
											"        let response = await reqPromise(optionsInquiryPurchase);\r",
											"        let jsonDataInquiryPurchase = await response.json();\r",
											"        // console.log('jsonDataInquiryPurchase',jsonDataInquiryPurchase)\r",
											"    \r",
											"        let operationStatusInquiryPurchase = await jsonDataInquiryPurchase.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"InquiryPurchase : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('InquiryPurchase : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusInquiryPurchase).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //InquiryPurchase is Success\r",
											"        pm.test('InquiryPurchase : OperationStatus Description is '+'\"'+ resultDescriptionInquiryPurchase+'\"', function () {\r",
											"            pm.expect(operationStatusInquiryPurchase).to.have.property('Description', resultDescriptionInquiryPurchase);\r",
											"        });\r",
											"\r",
											"        //Check Data\r",
											"        let PurchaseInfo = await jsonDataInquiryPurchase.PurchaseInfo;\r",
											"        console.log('PurchaseInfo',PurchaseInfo);\r",
											"\r",
											"        pm.test('Verify DB Check Data : DeleteCustomer' , function () {\r",
											"            console.log(\"======== Verify DB Check Data ( Expected = Actual) [DeleteCustomer] ==================\");\r",
											"            console.log(\"PurchaseInfo : \" + JSON.stringify(PurchaseInfo) + \" = \" + JSON.stringify([]));\r",
											"\r",
											"            pm.expect(PurchaseInfo).to.eql([]);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"setTimeout(function(){SearchLogFindTid();}, 9000); \r",
											"setTimeout(function(){CheckLog();}, 20000); \r",
											"setTimeout(function(){InquiryPurchase();}, 30000); \r",
											"\r",
											"setTimeout(function(){\r",
											"pm.environment.unset(\"current_timestamp\");\r",
											"pm.environment.unset(\"AccessToken\");\r",
											"pm.environment.unset(\"random_number\");\r",
											"pm.environment.unset(\"PartnerName\");\r",
											"pm.environment.unset(\"MerchantContact\");\r",
											"pm.environment.unset(\"CPID\");\r",
											"pm.environment.unset(\"GetResponse_PartnerId\");\r",
											"pm.environment.unset(\"AccountName\");\r",
											"pm.environment.unset(\"GetResponse_AccountName\");\r",
											"pm.environment.unset(\"GetResponse_AccountId\");\r",
											"pm.environment.unset(\"random_IM\");\r",
											"pm.environment.unset(\"random_ICCID\");\r",
											"pm.environment.unset(\"ThingName\");\r",
											"pm.environment.unset(\"GetResponse_ThingID\");\r",
											"pm.environment.unset(\"random_Sensor\");\r",
											"pm.environment.unset(\"sessionId\");\r",
											"pm.environment.unset(\"GetResponse_CustomerId\");\r",
											"pm.environment.unset(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseKey\");\r",
											"pm.environment.unset(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseValue\");\r",
											"pm.environment.unset(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseName\");\r",
											"pm.environment.unset(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseType\");\r",
											"pm.environment.unset(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseState\");\r",
											"pm.environment.unset(\"Value_DeleteCustomer_Create_ChargingStatus\");\r",
											"}, 35000);\r",
											"setTimeout(function(){}, 40000); "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var Username = pm.environment.get(\"Username\");\r",
											"var Password = pm.environment.get(\"Password\");\r",
											"\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"pm.environment.set(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseKey\",fieldDataValue.Provisioning.DeleteCustomer.Value_DeleteCustomer_Create_PurchaseInfo_PurchaseKey)\r",
											"pm.environment.set(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseValue\",fieldDataValue.Provisioning.DeleteCustomer.Value_DeleteCustomer_Create_PurchaseInfo_PurchaseValue)\r",
											"pm.environment.set(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseName\",fieldDataValue.Provisioning.DeleteCustomer.Value_DeleteCustomer_Create_PurchaseInfo_PurchaseName)\r",
											"pm.environment.set(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseType\",fieldDataValue.Provisioning.DeleteCustomer.Value_DeleteCustomer_Create_PurchaseInfo_PurchaseType)\r",
											"pm.environment.set(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseState\",fieldDataValue.Provisioning.DeleteCustomer.Value_DeleteCustomer_Create_PurchaseInfo_PurchaseState)\r",
											"pm.environment.set(\"Value_DeleteCustomer_Create_ChargingStatus\",fieldDataValue.Provisioning.DeleteCustomer.Value_DeleteCustomer_Create_ChargingStatus)\r",
											"\r",
											"//format YYYYMMDDHHMMSSS\r",
											"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
											"// console.log('currentTmestamp',currentTmestamp);\r",
											"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- statusCodeList --------------//\r",
											"//set variable to statusCodeList JSON.parse\r",
											"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
											"//set global variable to statusCode 200\r",
											"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
											"//set global variable to statusCode 201\r",
											"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- resultCodeList --------------//\r",
											"//set variable to resultCodeList JSON.parse\r",
											"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
											"//set global variable to resultCode \"20000\"\r",
											"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
											"//set global variable to resultCode \"20100\"\r",
											"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- resultDescriptionSuccessList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
											"//set global variable to resultDescription \"SignInProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
											"//set global variable to resultDescription \"ValidateTokenProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionValidateToken\", resultDescriptionSuccessList.resultDescriptionValidateToken);\r",
											"//set global variable to resultDescription \"CreatePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
											"//set global variable to resultDescription \"CreateAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
											"//set global variable to resultDescription \"CreateThing is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreateThing\", resultDescriptionSuccessList.resultDescriptionCreateThing);\r",
											"//set global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreateThingStateInfo\", resultDescriptionSuccessList.resultDescriptionCreateThingStateInfo);\r",
											"//set global variable to resultDescription \"CreatePurchase is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreatePurchase\", resultDescriptionSuccessList.resultDescriptionCreatePurchase);\r",
											"//set global variable to resultDescription \"removeCustomer is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveCustomer\", resultDescriptionSuccessList.resultDescriptionRemoveCustomer);\r",
											"//set global variable to resultDescription \"InquiryPurchase is Success\"\r",
											"pm.globals.set(\"resultDescriptionInquiryPurchase\", resultDescriptionSuccessList.resultDescriptionInquiryPurchase);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- HeaderList --------------//\r",
											"//set variable to HeaderList JSON.parse\r",
											"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
											"//---------------- set globals Other --------------//\r",
											"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
											"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
											"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
											"//set global variable to kbn-versio \"7.5.1\"\r",
											"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Signin_ --------------//\r",
											"//set global variable to x_ais_OrderRef \"Signin_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
											"//set global variable to x_ais_OrderRef \"ValidateToken\"\r",
											"pm.globals.set(\"x_ais_OrderRef_ValidateToken\", HeaderList.Signin.x_ais_OrderRef_ValidateToken);\r",
											"//set global variable to x_ais_OrderDesc \"ValidateToken\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_ValidateToken\", HeaderList.Signin.x_ais_OrderDesc_ValidateToken);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals CreatePartner --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
											"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals CreateAccount --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
											"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Thing --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreateThing_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreateThing\", HeaderList.Thing.x_ais_OrderRef_CreateThing);\r",
											"//set global variable to x_ais_OrderDesc \"CreateThing\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreateThing\", HeaderList.Thing.x_ais_OrderDesc_CreateThing);\r",
											"//set global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_CreateThingStateInfo);\r",
											"//set global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_CreateThingStateInfo);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Purchase --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreatePurchase_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreatePurchase\", HeaderList.Purchase.x_ais_OrderRef_CreatePurchase);\r",
											"//set global variable to x_ais_OrderDesc \"CreatePurchase\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreatePurchase\", HeaderList.Purchase.x_ais_OrderDesc_CreatePurchase);\r",
											"//set global variable to x_ais_OrderRef \"InquiryPurchase_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_InquiryPurchase\", HeaderList.Thing.x_ais_OrderRef_InquiryPurchase);\r",
											"//set global variable to x_ais_OrderDesc \"InquiryPurchase\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_InquiryPurchase\", HeaderList.Thing.x_ais_OrderDesc_InquiryPurchase);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals DeleteCustomer --------------//\r",
											"//set global variable to x_ais_OrderRef \"DeleteCustomer_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_DeleteCustomer\", HeaderList.Customer.x_ais_OrderRef_DeleteCustomer);\r",
											"//set global variable to x_ais_OrderRef \"DeleteCustomerfail_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_DeleteCustomer_fail\", HeaderList.Customer.x_ais_OrderRef_DeleteCustomer_fail);\r",
											"//set global variable to x_ais_OrderDesc \"DeleteCustomer\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_DeleteCustomer\", HeaderList.Customer.x_ais_OrderDesc_DeleteCustomer);\r",
											"//------------------------------------------------------------//\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultCode \"20100\"\r",
											"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
											"//get global variable to resultDescription \"SignInProcess is Success\"\r",
											"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
											"//get global variable to resultDescription \"ValidateTokenProcess is Success\"\r",
											"var resultDescriptionValidateToken = pm.globals.get(\"resultDescriptionValidateToken\");\r",
											"//get global variable to resultDescription \"CreatePartner is Success\"\r",
											"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
											"//get global variable to resultDescription \"CreateAccount is Success\"\r",
											"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
											"//get global variable to resultDescription \"CreateThing is Success\"\r",
											"var resultDescriptionCreateThing = pm.globals.get(\"resultDescriptionCreateThing\");\r",
											"//get global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
											"var resultDescriptionCreateThingStateInfo = pm.globals.get(\"resultDescriptionCreateThingStateInfo\");\r",
											"//get global variable to resultDescription \"CreatePurchase is Success\"\r",
											"var resultDescriptionCreatePurchase = pm.globals.get(\"resultDescriptionCreatePurchase\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- urlRouteList --------------//\r",
											"//set variable to urlRouteList JSON.parse\r",
											"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
											"//---------------- set url Create --------------//\r",
											"//set global variable to url \"/api/v1/auth/signin\"\r",
											"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
											"//set global variable to url \"/api/v1/auth/ValidateToken\"\r",
											"pm.globals.set(\"urlValidateToken\", urlRouteList.Signin.urlValidateToken);\r",
											"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
											"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
											"//set global variable to url \"/api/v1/Thing/CreateThing\"\r",
											"pm.globals.set(\"urlThingCreateThing\", urlRouteList.Thing.urlThingCreateThing);\r",
											"//set global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
											"pm.globals.set(\"urlThingCreateThingStateInfo\", urlRouteList.Thing.urlThingCreateThingStateInfo);\r",
											"//set global variable to url \"/api/v1/Purchase/CreatePurchase\"\r",
											"pm.globals.set(\"urlCreatePurchase\", urlRouteList.Purchase.urlCreatePurchase);\r",
											"//---------------- get url Create --------------//\r",
											"//get global variable to url \"/api/v1/auth/signin\"\r",
											"var urlSignin = pm.globals.get(\"urlSignin\");\r",
											"//get global variable to url \"/api/v1/auth/ValidateToken\"\r",
											"var urlValidateToken = pm.globals.get(\"urlValidateToken\");\r",
											"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
											"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
											"//get global variable to url \"/api/v1/Thing/CreateThing\"\r",
											"var urlThingCreateThing = pm.globals.get(\"urlThingCreateThing\");\r",
											"//get global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
											"var urlThingCreateThingStateInfo = pm.globals.get(\"urlThingCreateThingStateInfo\");\r",
											"//get global variable to url \"/api/v1/Purchase/CreatePurchase\"\r",
											"var urlCreatePurchase = pm.globals.get(\"urlCreatePurchase\");\r",
											"//---------------- set url Inquiry --------------//\r",
											"//set global variable to url \"/api/v1/Purchase/InquiryPurchase\"\r",
											"pm.globals.set(\"urlInquiryPurchase\", urlRouteList.Purchase.urlInquiryPurchase);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"Signin_\"\r",
											"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
											"//get global variable to x_ais_OrderRef \"ValidateToken_\"\r",
											"var x_ais_OrderRef_ValidateToken = pm.globals.get(\"x_ais_OrderRef_ValidateToken\");\r",
											"//get global variable to x_ais_OrderDesc \"ValidateToken\"\r",
											"var x_ais_OrderDesc_ValidateToken = pm.globals.get(\"x_ais_OrderDesc_ValidateToken\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Thing --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreateThing_\"\r",
											"var x_ais_OrderRef_CreateThing = pm.globals.get(\"x_ais_OrderRef_CreateThing\");\r",
											"//get global variable to x_ais_OrderDesc \"CreateThing\"\r",
											"var x_ais_OrderDesc_CreateThing = pm.globals.get(\"x_ais_OrderDesc_CreateThing\");\r",
											"//get global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
											"var x_ais_OrderRef_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderRef_CreateThingStateInfo\");\r",
											"//get global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
											"var x_ais_OrderDesc_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_CreateThingStateInfo\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Purchase --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreatePurchase_\"\r",
											"var x_ais_OrderRef_CreatePurchase = pm.globals.get(\"x_ais_OrderRef_CreatePurchase\");\r",
											"//get global variable to x_ais_OrderDesc \"CreatePurchase\"\r",
											"var x_ais_OrderDesc_CreatePurchase = pm.globals.get(\"x_ais_OrderDesc_CreatePurchase\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"// Signin get token\r",
											" Signin = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username,\r",
											"                password:Password\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"\r",
											"        //set random_number\r",
											"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
											"        //set PartnerName\r",
											"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
											"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
											"        //set MerchantContact\r",
											"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
											"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
											"        // set CPID\r",
											"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
											"        pm.environment.set(\"CPID\", CPIDValue)\r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// ValidateToken\r",
											" ValidateToken = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptValidateToken = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_ValidateToken + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_ValidateToken,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestValidateToken = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                \"AccessToken\": pm.environment.get(\"AccessToken\")\r",
											"            })\r",
											"        };  \r",
											"        \r",
											"        let optionsValidateToken = {\r",
											"            url: url + provisioningapis + urlValidateToken,\r",
											"            method: 'POST',\r",
											"            header: headersOptValidateToken,\r",
											"            body: httpRequestValidateToken\r",
											"        };\r",
											"        // console.log('request ValidateToken');\r",
											"        let response = await reqPromise(optionsValidateToken);\r",
											"        let jsonDataValidateToken = await response.json();\r",
											"        let operationStatusValidateToken = await jsonDataValidateToken.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"ValidateToken : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('ValidateToken : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusValidateToken).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // ValidateTokenProcess is Success\r",
											"        pm.test('ValidateToken : OperationStatus Description is '+'\"'+ resultDescriptionValidateToken+'\"', function () {\r",
											"            pm.expect(operationStatusValidateToken).to.have.property('Description', resultDescriptionValidateToken);\r",
											"        });\r",
											" \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreatePartner\r",
											" CreatePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreatePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreatePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
											"                \"PartnerType\": [\r",
											"                    \"Supplier\",\r",
											"                    \"Customer\"\r",
											"                ],\r",
											"                \"PartnerDetail\": {\r",
											"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
											"                    \"CPID\": pm.environment.get(\"CPID\")\r",
											"                },\r",
											"                \"Property\": {\r",
											"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
											"                }\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsCreatePartner = {\r",
											"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreatePartner,\r",
											"            body: httpRequestCreatePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsCreatePartner);\r",
											"        let jsonDataCreatePartner = await response.json();\r",
											"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
											"    \r",
											"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreatePartner is Success\r",
											"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
											"        });\r",
											"\r",
											"        //GetResponse_PartnerId\r",
											"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
											"\r",
											"        //GetResponse_CustomerId\r",
											"        pm.environment.set(\"GetResponse_CustomerId\", jsonDataCreatePartner.PartnerInfo.CustomerId);\r",
											"        \r",
											"        //Accountname\r",
											"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
											"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreateAccount\r",
											" CreateAccount = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreateAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreateAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
											"                })\r",
											"        };\r",
											"        \r",
											"        let optionsCreateAccount = {\r",
											"            url: url + provisioningapis + urlAccountCreateAccount,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreateAccount,\r",
											"            body: httpRequestCreateAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request CreateAccount');\r",
											"        let response = await reqPromise(optionsCreateAccount);\r",
											"        let jsonDataCreateAccount = await response.json();\r",
											"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
											"    \r",
											"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreateAccount : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreateAccount is Success\r",
											"        pm.test('CreateAccount : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
											"        });\r",
											"        // GetResponse_AccountName\r",
											"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
											"        // GetResponse_AccountId\r",
											"        pm.environment.set(\"GetResponse_AccountId\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
											"        // random_IM\r",
											"        pm.environment.set(\"random_IM\", _.random(10000000, 99999999)+\" \"+_.random(1000000, 9999999))\r",
											"        // random_ICCID\r",
											"        pm.environment.set(\"random_ICCID\", _.random(1000000, 9999999)+\" \"+_.random(100000, 999999))\r",
											"        // random_number\r",
											"        pm.environment.set(\"random_number\",pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
											"        //ThingName\r",
											"        let thingNameValue = fieldDataValue.Provisioning.Thing.ThingNameValue; // \"QAtestthing_T01\"\r",
											"        pm.environment.set(\"ThingName\", thingNameValue + pm.environment.get(\"random_number\"))\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreateThing\r",
											" CreateThing = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreateThing = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreateThing+ current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateThing,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreateThing = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"ThingName\": pm.environment.get(\"ThingName\"),\r",
											"                \"IMEI\": pm.environment.get(\"random_IM\"),\r",
											"                \"IMSI\": pm.environment.get(\"random_IM\"),\r",
											"                \"ICCID\": pm.environment.get(\"random_ICCID\"),\r",
											"                \"RouteUrl\": fieldDataValue.Provisioning.Thing.CreateThing.RouteUrlValue , //[\"http://10.12.3.4:2019/api/information/AddInformation\"]\r",
											"                \"RouteInfo\": {\r",
											"                    \"MIMO_ID\": fieldDataValue.Provisioning.Thing.CreateThing.RouteInfoMIMOIDValue , //\"606edada\"\r",
											"                    \"MIMO_SerialNo\": fieldDataValue.Provisioning.Thing.CreateThing.RouteInfoMIMOSerialNoValue //5466758878\r",
											"                },\r",
											"                \"RouteFlag\": {\r",
											"                    \"ThingName\": fieldDataValue.Provisioning.Thing.CreateThing.RouteFlagThingNameValue , //true\r",
											"                    \"ThingToken\": fieldDataValue.Provisioning.Thing.CreateThing.RouteFlagThingTokenValue, //true\r",
											"                    \"IMEI\": fieldDataValue.Provisioning.Thing.CreateThing.RouteFlagIMEIValue, //true\r",
											"                    \"ICCID\": fieldDataValue.Provisioning.Thing.CreateThing.RouteFlagICCIDValue, //true\r",
											"                    \"RouteInfo\": fieldDataValue.Provisioning.Thing.CreateThing.RouteFlagRouteInfoValue //true\r",
											"                }\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsCreateThing = {\r",
											"            url: url + provisioningapis + urlThingCreateThing,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreateThing,\r",
											"            body: httpRequestCreateThing\r",
											"        };\r",
											"\r",
											"        // console.log('request CreateThing');\r",
											"        let response = await reqPromise(optionsCreateThing);\r",
											"        let jsonDataCreateThing = await response.json();\r",
											"        // console.log('jsonDataCreateThing',jsonDataCreateThing)\r",
											"    \r",
											"        let operationStatusCreateThing = await jsonDataCreateThing.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreateThing : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreateThing : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreateThing).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreateThing is Success\r",
											"        pm.test('CreateThing : OperationStatus Description is '+'\"'+ resultDescriptionCreateThing+'\"', function () {\r",
											"            pm.expect(operationStatusCreateThing).to.have.property('Description', resultDescriptionCreateThing);\r",
											"        });\r",
											"\r",
											"        pm.environment.set(\"GetResponse_ThingID\",jsonDataCreateThing.ThingInfo.ThingId)\r",
											"\r",
											"        //Get Random Sensor \r",
											"        pm.environment.set(\"random_Sensor\", _.random(100, 999))\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreateThingStateInfo\r",
											" CreateThingStateInfo = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreateThingStateInfo = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreateThingStateInfo+ current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateThingStateInfo,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        // {\"Temp\" : pm.environment.get(\"random_Sensor\")}\r",
											"        let sensorValue = {};\r",
											"        sensorValue[fieldDataValue.CreateThingStateInfo.SensorKey] = pm.environment.get(\"random_Sensor\");\r",
											"        // console.log('sensorValue',sensorValue);\r",
											"        \r",
											"        let httpRequestCreateThingStateInfo = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"ThingId\": [\r",
											"                    pm.environment.get(\"GetResponse_ThingID\")\r",
											"                ],\r",
											"                \"Type\": fieldDataValue.CreateThingStateInfo.Type_Report,\r",
											"                \"Sensor\": sensorValue\r",
											"            })\r",
											"        };\r",
											"    \r",
											"        let optionsCreateThingStateInfo = {\r",
											"            url: url + provisioningapis + urlThingCreateThingStateInfo,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreateThingStateInfo,\r",
											"            body: httpRequestCreateThingStateInfo\r",
											"        };\r",
											"\r",
											"        // console.log('request CreateThingStateInfo');\r",
											"        let response = await reqPromise(optionsCreateThingStateInfo);\r",
											"        let jsonDataCreateThingStateInfo = await response.json();\r",
											"        // console.log('jsonDataCreateThingStateInfo',jsonDataCreateThingStateInfo)\r",
											"    \r",
											"        let operationStatusCreateThingStateInfo = await jsonDataCreateThingStateInfo.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"CreateThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('CreateThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //CreateThingStateInfo is Success\r",
											"        pm.test('CreateThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionCreateThingStateInfo+'\"', function () {\r",
											"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Description', resultDescriptionCreateThingStateInfo);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreatePurchase\r",
											"CreatePurchase = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreatePurchase = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreatePurchase+ current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePurchase,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'Accept':Accept\r",
											"        };\r",
											"                \r",
											"        let httpRequestCreatePurchase = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"customerId\": pm.environment.get(\"GetResponse_CustomerId\"),\r",
											"                \"PurchaseInfo\": {\r",
											"                    \"PurchaseKey\": pm.environment.get(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseKey\"),\r",
											"                    \"PurchaseValue\": pm.environment.get(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseValue\"),\r",
											"                    \"PurchaseName\": pm.environment.get(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseName\"),\r",
											"                    \"PurchaseType\": pm.environment.get(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseType\"), //Volume\r",
											"                    \"PurchaseState\": pm.environment.get(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseState\") //Active\r",
											"                },\r",
											"                \"ChargingStatus\": pm.environment.get(\"Value_DeleteCustomer_Create_ChargingStatus\") //Enable\r",
											"            })\r",
											"        };\r",
											"    \r",
											"        let optionsCreatePurchase = {\r",
											"            url: url + provisioningapis + urlCreatePurchase,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreatePurchase,\r",
											"            body: httpRequestCreatePurchase\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePurchase');\r",
											"        let response = await reqPromise(optionsCreatePurchase);\r",
											"        let jsonDataCreatePurchase = await response.json();\r",
											"        // console.log('jsonDataCreatePurchase',jsonDataCreatePurchase)\r",
											"    \r",
											"        let operationStatusCreatePurchase = await jsonDataCreatePurchase.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"CreatePurchase : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('CreatePurchase : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreatePurchase).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //CreatePurchase is Success\r",
											"        pm.test('CreatePurchase : OperationStatus Description is '+'\"'+ resultDescriptionCreatePurchase+'\"', function () {\r",
											"            pm.expect(operationStatusCreatePurchase).to.have.property('Description', resultDescriptionCreatePurchase);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"Signin();\r",
											"setTimeout(async function(){await ValidateToken();}, 1000);\r",
											"setTimeout(async function(){await CreatePartner();}, 2000); \r",
											"setTimeout(async function(){await CreateAccount();}, 3000); \r",
											"setTimeout(async function(){await CreateThing();}, 5000); \r",
											"setTimeout(async function(){await CreateThingStateInfo();}, 7000); \r",
											"setTimeout(async function(){await CreatePurchase();}, 8000); \r",
											"setTimeout(async function(){}, 8500); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-ais-UserName",
										"type": "text",
										"value": "{{x_ais_UserName_AisPartner}}"
									},
									{
										"key": "x-ais-OrderRef",
										"value": "{{x_ais_OrderRef_DeleteCustomer}}{{current_timestamp}}"
									},
									{
										"key": "x-ais-OrderDesc",
										"type": "text",
										"value": "{{x_ais_OrderDesc_DeleteCustomer}}"
									},
									{
										"key": "x-ais-AccessToken",
										"value": "{{Bearer}} {{AccessToken}}"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"customerId\": \"{{GetResponse_CustomerId}}\"\r\n}"
								},
								"url": {
									"raw": "{{url}}{{provisioningapis}}/api/v1/Customer/DeleteCustomer",
									"host": [
										"{{url}}{{provisioningapis}}"
									],
									"path": [
										"api",
										"v1",
										"Customer",
										"DeleteCustomer"
									]
								},
								"description": "Type:Desire"
							},
							"response": []
						},
						{
							"name": "DeleteCustomer_TST_F73_1_1_002_Error_customerIdNotFound",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Thing --------------//\r",
											"//get global variable to xAisOrderRef \"RemoveThing_\"\r",
											"var x_ais_OrderRef_RemoveThing = pm.globals.get(\"x_ais_OrderRef_RemoveThing\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveThing\"\r",
											"var x_ais_OrderDesc_RemoveThing = pm.globals.get(\"x_ais_OrderDesc_RemoveThing\");\r",
											"//get global variable to x_ais_OrderRef \"RemoveThingStateInfo_\" \r",
											"var x_ais_OrderDesc_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_RemoveThingStateInfo\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveThingStateInfo\"\r",
											"var x_ais_OrderRef_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderRef_RemoveThingStateInfo\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Purchase --------------//\r",
											"//get global variable to x_ais_OrderRef \"DeleteCustomer_\"\r",
											"var x_ais_OrderRef_DeleteCustomer = pm.globals.get(\"x_ais_OrderRef_DeleteCustomer\");\r",
											"//get global variable to x_ais_OrderDesc \"DeleteCustomer\"\r",
											"var x_ais_OrderDesc_DeleteCustomer = pm.globals.get(\"x_ais_OrderDesc_DeleteCustomer\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get url Remove --------------//\r",
											"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
											"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
											"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
											"//get global variable to url \"/api/v1/Thing/RemoveThing\"\r",
											"var urlThingRemoveThing = pm.globals.get(\"urlThingRemoveThing\");\r",
											"//get global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
											"var urlThingRemoveThingStateInfo = pm.globals.get(\"urlThingRemoveThingStateInfo\");\r",
											"//------------------------------------------------------------//\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultCode \"20100\"\r",
											"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
											"//get global variable to resultDescription \"RemovePartner is Success\"\r",
											"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
											"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
											"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
											"//get global variable to resultDescription \"RemoveThing is Success\"\r",
											"var resultDescriptionRemoveThing = pm.globals.get(\"resultDescriptionRemoveThing\");\r",
											"//get global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
											"var resultDescriptionRemoveThingStateInfo = pm.globals.get(\"resultDescriptionRemoveThingStateInfo\");\r",
											"//------------------------------------------------------------//\r",
											"//get global variable to statusCode 404\r",
											"var statusCodeNotFound = pm.globals.get(\"statusCodeNotFound\");\r",
											"//get global variable to resultCode \"40400\"\r",
											"var resultCodeNotFound = pm.globals.get(\"resultCodeNotFound\");\r",
											"//get global variable to resultDescription \"The customerId is Not Found\"\r",
											"var resultDescriptionTheCustomerIdIsNotFoundDeleteCustomer = pm.globals.get(\"resultDescriptionTheCustomerIdIsNotFoundDeleteCustomer\");\r",
											"//------------------------------------------------------------//\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"DeleteCustomer : Status code is \" + statusCodeNotFound, function () {\r",
											"    pm.response.to.have.status(statusCodeNotFound);\r",
											"});\r",
											"\r",
											"pm.test('DeleteCustomer : operationStatus code is '+'\"'+ resultCodeNotFound +'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeNotFound);\r",
											"});\r",
											"\r",
											"pm.test('DeleteCustomer : operationStatus Description is '+'\"'+ resultDescriptionTheCustomerIdIsNotFoundDeleteCustomer+'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionTheCustomerIdIsNotFoundDeleteCustomer);\r",
											"});\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"// RemovePartner\r",
											" RemovePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemovePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemovePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsRemovePartner = {\r",
											"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemovePartner,\r",
											"            body: httpRequestRemovePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request RemovePartner');\r",
											"        let response = await reqPromise(optionsRemovePartner);\r",
											"        let jsonDataRemovePartner = await response.json();\r",
											"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
											"    \r",
											"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemovePartner is Success\r",
											"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// RemoveAccount\r",
											" RemoveAccount = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemoveAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemoveAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsRemoveAccount = {\r",
											"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemoveAccount,\r",
											"            body: httpRequestRemoveAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request RemoveAccount');\r",
											"        let response = await reqPromise(optionsRemoveAccount);\r",
											"        let jsonDataRemoveAccount = await response.json();\r",
											"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
											"    \r",
											"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemoveAccount is Success\r",
											"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
											"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// RemoveThing\r",
											" RemoveThing = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemoveThing = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThing + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThing,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemoveThing = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\")\r",
											"            })\r",
											"        };\r",
											"\r",
											"        let optionsRemoveThing = {\r",
											"            url: url + provisioningapis + urlThingRemoveThing,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemoveThing,\r",
											"            body: httpRequestRemoveThing\r",
											"        };\r",
											"\r",
											"        // console.log('request RemoveThing');\r",
											"        let response = await reqPromise(optionsRemoveThing);\r",
											"        let jsonDataRemoveThing = await response.json();\r",
											"        // console.log('jsonDataRemoveThing',jsonDataRemoveThing)\r",
											"    \r",
											"        let operationStatusRemoveThing = await jsonDataRemoveThing.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemoveThing : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemoveThing : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemoveThing).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemoveThing is Success\r",
											"        pm.test('RemoveThing : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThing+'\"', function () {\r",
											"            pm.expect(operationStatusRemoveThing).to.have.property('Description', resultDescriptionRemoveThing);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// RemoveThingStateInfo\r",
											" RemoveThingStateInfo = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemoveThingStateInfo = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThingStateInfo + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThingStateInfo,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
											"            'Accept':Accept\r",
											"            \r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemoveThingStateInfo = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\"),\r",
											"                \"stateType\": fieldDataValue.CreateThingStateInfo.Type_Report, //Report\r",
											"                \"stateKey\": fieldDataValue.CreateThingStateInfo.SensorKey //Temp\r",
											"            })\r",
											"        };\r",
											"\r",
											"        let optionsRemoveThingStateInfo = {\r",
											"            url: url + provisioningapis + urlThingRemoveThingStateInfo,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemoveThingStateInfo,\r",
											"            body: httpRequestRemoveThingStateInfo\r",
											"        };\r",
											"\r",
											"        // console.log('response RemoveThingStateInfo');\r",
											"        let response = await reqPromise(optionsRemoveThingStateInfo);\r",
											"        let jsonDataRemoveThingStateInfo = await response.json();\r",
											"        // console.log('jsonDataRemoveThing',jsonDataRemoveThingStateInfo)\r",
											"    \r",
											"        let operationStatusRemoveThingStateInfo = await jsonDataRemoveThingStateInfo.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemoveThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemoveThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemoveThingStateInfo is Success\r",
											"        pm.test('RemoveThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThingStateInfo+'\"', function () {\r",
											"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Description', resultDescriptionRemoveThingStateInfo);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"//---------------- LogDefaultValue --------------//\r",
											"//set variable to LogDefaultValue JSON.parse\r",
											"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
											"// console.log('LogDefaultValue',LogDefaultValue);\r",
											"//---------------- set globals Other --------------//\r",
											"\r",
											"var SearchLog = LogDefaultValue.SearchLog;\r",
											"// console.log('SearchLog',SearchLog);\r",
											"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
											"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
											"var kbn_version = SearchLog.header.kbn_version;\r",
											"var authorization = SearchLog.header.Authorization;\r",
											"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
											"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
											"var namespace = LogDefaultValue.Other.namespace;\r",
											"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
											"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
											"var header_x_ais_username = LogDefaultValue.Other.header_x_ais_username;\r",
											"var header_x_ais_accountkey = LogDefaultValue.Other.header_x_ais_accountkey;\r",
											"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
											"var methodDelete = LogDefaultValue.Other.methodDelete;\r",
											"\r",
											"// Detail\r",
											"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
											"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
											"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
											"\r",
											"// Summary\r",
											"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
											"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
											"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
											"\r",
											"// ProvisioningAPIs [Purchase]\r",
											"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
											"var cmdName = LogDefaultValue.Provisioning.DeleteCustomer.cmdNameRemoveCustomer;\r",
											"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
											"var containerId = LogDefaultValue.Provisioning.containerId;\r",
											"var requestObjectUrlStaging = LogDefaultValue.Provisioning.DeleteCustomer.requestObjectUrlDeleteCustomerMgStaging;\r",
											"\r",
											"// Check CDR (Summary Log) and EDR (Detail Log)\r",
											"SearchLogFindTid = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSearchLogFindTid = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = x_ais_OrderRef_DeleteCustomer + current_timestamp;\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestSearchLogFindTid = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"\r",
											"        let optionsSearchLogFindTid = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptSearchLogFindTid,\r",
											"            body: httpRequestSearchLogFindTid\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsSearchLogFindTid);\r",
											"        let jsonDataSearchLogFindTid = await response.json();\r",
											"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
											"\r",
											"        // //200\r",
											"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"\r",
											"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
											"        console.log('hits',hits)\r",
											"  \r",
											"        // find tid\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            // let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"        \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            if(applicationNameValue == applicationName){\r",
											"                let sessionId = hits[i]._source.cauldron.sessionId;\r",
											"                pm.environment.set(\"sessionId\", sessionId);\r",
											"                break;\r",
											"           }\r",
											"        }\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"CheckLog = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCheckLog = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = pm.environment.get(\"sessionId\");\r",
											"\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestCheckLog = {\r",
											"            mode: 'raw',\r",
											"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"        let optionsCheckLog = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptCheckLog,\r",
											"            body: httpRequestCheckLog\r",
											"        }; \r",
											"        let response = await reqPromise(optionsCheckLog);\r",
											"        let jsonDataCheckLog = await response.json();\r",
											"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
											"        \r",
											"        // //200\r",
											"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });     \r",
											"        \r",
											"        let hits = jsonDataCheckLog.hits.hits\r",
											"        console.log('hits',hits)\r",
											"  \r",
											"        // find logType\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            //  let logType = hits[i]._source.cauldron.logType\r",
											"            let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"           \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            \r",
											"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
											"            // console.log('resultDataLog',resultDataLog)\r",
											"\r",
											"            let tidControl = x_ais_OrderRef_DeleteCustomer + current_timestamp;\r",
											"            // console.log(tidControl);\r",
											"            if(applicationNameValue == applicationName){\r",
											"                 \r",
											"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ProvisioningAPIs\r",
											"                    pm.test(\"Check Summary Log : DeleteCustomer\" , function () {\r",
											"                        console.log(\"======== Check Summary Log ( Expected = Actual) [DeleteCustomer] ==================\");\r",
											"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
											"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
											"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeNotFound);\r",
											"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionTheCustomerIdIsNotFoundDeleteCustomer);\r",
											"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
											"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
											"                        // console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
											"\r",
											"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
											"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
											"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeNotFound); \r",
											"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionTheCustomerIdIsNotFoundDeleteCustomer); \r",
											"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
											"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
											"                        // pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
											"\r",
											"                        // check custom\r",
											"                        // \\\"custom\\\":{ \\\"endPointSummary\\\":[ { \\\"no\\\":\\\"1\\\", \\\"endPointName\\\":\\\"db.CustomersCollection\\\", \\\"responseStatus\\\":\\\"Success:InquiryCustomer was successfully.\\\", \\\"processTime\\\":1.3574 } ] }\r",
											"                        let custom = resultDataLog.custom.endPointSummary;\r",
											"                        let countCustom = custom.length;\r",
											"                       \r",
											"                        // [\"db.CustomersCollection\"]\r",
											"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_DeleteCustomer_002;\r",
											"                        // [\"Success:InquiryCustomer was successfully.\"]\r",
											"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_DeleteCustomer_002;\r",
											"                        let countCustomStep = dataEndPointName.length;\r",
											"\r",
											"                        console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep);\r",
											"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
											"                        \r",
											"                        for(let i=0;i<countCustomStep;i++){\r",
											"                            let no = custom[i].no;\r",
											"                            let valueEndPointName = custom[i].endPointName;\r",
											"                            let valueResponseStatus = custom[i].responseStatus;\r",
											"                            // console.log(\"i\",i);\r",
											"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
											"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
											"\r",
											"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString());\r",
											"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i]);\r",
											"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i]);\r",
											"\r",
											"                            pm.expect(no).to.eql((i+1).toString()); \r",
											"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
											"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]); \r",
											"                        }\r",
											"                    }); \r",
											"                }\r",
											"\r",
											"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ProvisioningAPIs\r",
											"\r",
											"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
											"                    // console.log('endPointNameValue ',endPointNameValue)\r",
											"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [DeleteCustomer]\", function () {\r",
											"                        console.log(\"======== Check Detail Log ( Expected = Actual) [DeleteCustomer] ==================\");\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
											"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
											"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
											"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
											"\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
											"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
											"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
											"\r",
											"                        if( endPointNameValue == endPointNameProvisioningAPIs){     //\"endPointName\":\"ProvisioningAPIs\"\r",
											"                            console.log(\"custom1.endPointName : \" + resultDataLog.custom1.endPointName + \" = \" + endPointNameProvisioningAPIs);\r",
											"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs); \r",
											"                        \r",
											"                            // check requestObject\r",
											"                            // \"requestObject\":\"{\\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Customer/DeleteCustomer\\\",\\\"method\\\":\\\"DELETE\\\",\\\"headers\\\":{\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"DeleteCustomer_202102172002434\\\",\\\"x-ais-orderdesc\\\":\\\"DeleteCustomer\\\",\\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAGJjc8t2ZfqZcNNvBKwuLmPMV/NLO2GPEwLJG3c2Ik+TEIlAkkY2KW0\\\"},\\\"body\\\":{\\\"customerId\\\":\\\"601b978e53777200011124ca\\\"}}\"\r",
											"                            \r",
											"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
											"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
											"                            let url = urlCheckLog + requestObjectUrlStaging;\r",
											"                            let x_ais_orderref = x_ais_OrderRef_DeleteCustomer + current_timestamp;\r",
											"                            let x_ais_orderdesc = x_ais_OrderDesc_DeleteCustomer;\r",
											"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken\");\r",
											"                            let x_ais_userName = x_ais_UserName_AisPartner;\r",
											"                            \r",
											"                            let customerId = pm.environment.get(\"Value_CreatePurchase_TST_F73_0_2_002_PurchaseInfo_CustomerId\");\r",
											"                            \r",
											"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
											"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodDelete);\r",
											"                            console.log(\"headers.x_ais_userName : \" + jsonParseRequestObject.headers[header_x_ais_username] + \" = \" + x_ais_userName);\r",
											"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
											"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
											"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
											"                                                                                                                                                             \r",
											"                            pm.expect(jsonParseRequestObject.url).to.eql(url);\r",
											"                            pm.expect(jsonParseRequestObject.method).to.eql(methodDelete);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_username]).to.eql(x_ais_userName);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
											"\r",
											"                            console.log(\"resquest.body.customerId : \" + jsonParseRequestObject.body.customerId + \" = \" + customerId);\r",
											"\r",
											"                            pm.expect(jsonParseRequestObject.body.customerId).to.eql(customerId);\r",
											"\r",
											"                            // check responseObject\r",
											"                            // \"responseObject\":\"{\\\"OperationStatus\\\":{\\\"Code\\\":\\\"40400\\\",\\\"Description\\\":\\\"The customerId is Not Found\\\"}}\"\r",
											"\r",
											"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
											"                            // console.log('jsonParseResponseObject',jsonParseResponseObject);\r",
											"\r",
											"                            console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeNotFound);\r",
											"                            console.log(\"response.OperationStatus.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionTheCustomerIdIsNotFoundDeleteCustomer);\r",
											"\r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeNotFound);  \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionTheCustomerIdIsNotFoundDeleteCustomer);  \r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"setTimeout(function(){SearchLogFindTid();}, 9000); \r",
											"setTimeout(function(){CheckLog();}, 20000); \r",
											"\r",
											"setTimeout(function(){RemoveThingStateInfo();}, 30000); \r",
											"setTimeout(function(){RemoveThing();}, 40000); \r",
											"setTimeout(function(){RemoveAccount();}, 50000); \r",
											"setTimeout(function(){RemovePartner();}, 60000); \r",
											"\r",
											"setTimeout(function(){\r",
											"pm.environment.unset(\"current_timestamp\");\r",
											"pm.environment.unset(\"AccessToken\");\r",
											"pm.environment.unset(\"random_number\");\r",
											"pm.environment.unset(\"PartnerName\");\r",
											"pm.environment.unset(\"MerchantContact\");\r",
											"pm.environment.unset(\"CPID\");\r",
											"pm.environment.unset(\"GetResponse_PartnerId\");\r",
											"pm.environment.unset(\"AccountName\");\r",
											"pm.environment.unset(\"GetResponse_AccountName\");\r",
											"pm.environment.unset(\"GetResponse_AccountId\");\r",
											"pm.environment.unset(\"random_IM\");\r",
											"pm.environment.unset(\"random_ICCID\");\r",
											"pm.environment.unset(\"ThingName\");\r",
											"pm.environment.unset(\"GetResponse_ThingID\");\r",
											"pm.environment.unset(\"random_Sensor\");\r",
											"pm.environment.unset(\"sessionId\");\r",
											"pm.environment.unset(\"GetResponse_CustomerId\");\r",
											"pm.environment.unset(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseKey\");\r",
											"pm.environment.unset(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseValue\");\r",
											"pm.environment.unset(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseName\");\r",
											"pm.environment.unset(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseType\");\r",
											"pm.environment.unset(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseState\");\r",
											"pm.environment.unset(\"Value_DeleteCustomer_Create_ChargingStatus\");\r",
											"pm.environment.unset(\"Value_CreatePurchase_TST_F73_0_2_002_PurchaseInfo_CustomerId\");\r",
											"}, 65000);\r",
											"setTimeout(function(){}, 70000); "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var Username = pm.environment.get(\"Username\");\r",
											"var Password = pm.environment.get(\"Password\");\r",
											"\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"pm.environment.set(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseKey\",fieldDataValue.Provisioning.DeleteCustomer.Value_DeleteCustomer_Create_PurchaseInfo_PurchaseKey)\r",
											"pm.environment.set(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseValue\",fieldDataValue.Provisioning.DeleteCustomer.Value_DeleteCustomer_Create_PurchaseInfo_PurchaseValue)\r",
											"pm.environment.set(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseName\",fieldDataValue.Provisioning.DeleteCustomer.Value_DeleteCustomer_Create_PurchaseInfo_PurchaseName)\r",
											"pm.environment.set(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseType\",fieldDataValue.Provisioning.DeleteCustomer.Value_DeleteCustomer_Create_PurchaseInfo_PurchaseType)\r",
											"pm.environment.set(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseState\",fieldDataValue.Provisioning.DeleteCustomer.Value_DeleteCustomer_Create_PurchaseInfo_PurchaseState)\r",
											"pm.environment.set(\"Value_DeleteCustomer_Create_ChargingStatus\",fieldDataValue.Provisioning.DeleteCustomer.Value_DeleteCustomer_Create_ChargingStatus)\r",
											"\r",
											"pm.environment.set(\"Value_CreatePurchase_TST_F73_0_2_002_PurchaseInfo_CustomerId\",fieldDataValue.Provisioning.DeleteCustomer.Value_CreatePurchase_TST_F73_0_2_002_PurchaseInfo_CustomerId)\r",
											"\r",
											"//format YYYYMMDDHHMMSSS\r",
											"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
											"// console.log('currentTmestamp',currentTmestamp);\r",
											"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- statusCodeList --------------//\r",
											"//set variable to statusCodeList JSON.parse\r",
											"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
											"//set global variable to statusCode 200\r",
											"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
											"//set global variable to statusCode 201\r",
											"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
											"//set global variable to statusCode 404\r",
											"pm.globals.set(\"statusCodeNotFound\", statusCodeList.statusCodeNotFound);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- resultCodeList --------------//\r",
											"//set variable to resultCodeList JSON.parse\r",
											"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
											"//set global variable to resultCode \"20000\"\r",
											"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
											"//set global variable to resultCode \"20100\"\r",
											"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
											"//set global variable to resultCode \"40400\"\r",
											"pm.globals.set(\"resultCodeNotFound\", resultCodeList.resultCodeNotFound);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- resultDescriptionSuccessList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
											"//set global variable to resultDescription \"SignInProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
											"//set global variable to resultDescription \"ValidateTokenProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionValidateToken\", resultDescriptionSuccessList.resultDescriptionValidateToken);\r",
											"//set global variable to resultDescription \"CreatePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
											"//set global variable to resultDescription \"CreateAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
											"//set global variable to resultDescription \"CreateThing is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreateThing\", resultDescriptionSuccessList.resultDescriptionCreateThing);\r",
											"//set global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreateThingStateInfo\", resultDescriptionSuccessList.resultDescriptionCreateThingStateInfo);\r",
											"//set global variable to resultDescription \"RemovePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
											"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
											"//set global variable to resultDescription \"RemoveThing is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveThing\", resultDescriptionSuccessList.resultDescriptionRemoveThing);\r",
											"//set global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveThingStateInfo\", resultDescriptionSuccessList.resultDescriptionRemoveThingStateInfo);\r",
											"//set global variable to resultDescription \"CreatePurchase is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreatePurchase\", resultDescriptionSuccessList.resultDescriptionCreatePurchase);\r",
											"//set global variable to resultDescription \"removeCustomer is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveCustomer\", resultDescriptionSuccessList.resultDescriptionRemoveCustomer);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- resultDescriptionErrorList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
											"//set global variable to resultDescription \"The customerId is Not Found\"\r",
											"pm.globals.set(\"resultDescriptionTheCustomerIdIsNotFoundDeleteCustomer\", resultDescriptionErrorList.resultDescriptionTheCustomerIdIsNotFoundDeleteCustomer);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- HeaderList --------------//\r",
											"//set variable to HeaderList JSON.parse\r",
											"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
											"//---------------- set globals Other --------------//\r",
											"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
											"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
											"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
											"//set global variable to kbn-versio \"7.5.1\"\r",
											"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Signin_ --------------//\r",
											"//set global variable to x_ais_OrderRef \"Signin_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
											"//set global variable to x_ais_OrderRef \"ValidateToken\"\r",
											"pm.globals.set(\"x_ais_OrderRef_ValidateToken\", HeaderList.Signin.x_ais_OrderRef_ValidateToken);\r",
											"//set global variable to x_ais_OrderDesc \"ValidateToken\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_ValidateToken\", HeaderList.Signin.x_ais_OrderDesc_ValidateToken);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals CreatePartner --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
											"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
											"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
											"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals CreateAccount --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
											"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
											"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
											"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Thing --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreateThing_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreateThing\", HeaderList.Thing.x_ais_OrderRef_CreateThing);\r",
											"//set global variable to x_ais_OrderDesc \"CreateThing\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreateThing\", HeaderList.Thing.x_ais_OrderDesc_CreateThing);\r",
											"//set global variable to x_ais_OrderRef \"RemoveThing_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemoveThing\", HeaderList.Thing.x_ais_OrderRef_RemoveThing);\r",
											"//set global variable to x_ais_OrderDesc \"RemoveThing\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemoveThing\", HeaderList.Thing.x_ais_OrderDesc_RemoveThing);\r",
											"//set global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_CreateThingStateInfo);\r",
											"//set global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_CreateThingStateInfo);\r",
											"//set global variable to x_ais_OrderRef \"RemoveThingStateInfo\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_RemoveThingStateInfo);\r",
											"//set global variable to x_ais_OrderDesc \"RemoveThingStateInfo_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_RemoveThingStateInfo);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Purchase --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreatePurchase_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreatePurchase\", HeaderList.Purchase.x_ais_OrderRef_CreatePurchase);\r",
											"//set global variable to x_ais_OrderDesc \"CreatePurchase\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreatePurchase\", HeaderList.Purchase.x_ais_OrderDesc_CreatePurchase);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals DeleteCustomer --------------//\r",
											"//set global variable to x_ais_OrderRef \"DeleteCustomer_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_DeleteCustomer\", HeaderList.Customer.x_ais_OrderRef_DeleteCustomer);\r",
											"//set global variable to x_ais_OrderRef \"DeleteCustomerfail_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_DeleteCustomer_fail\", HeaderList.Customer.x_ais_OrderRef_DeleteCustomer_fail);\r",
											"//set global variable to x_ais_OrderDesc \"DeleteCustomer\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_DeleteCustomer\", HeaderList.Customer.x_ais_OrderDesc_DeleteCustomer);\r",
											"//------------------------------------------------------------//\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultCode \"20100\"\r",
											"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
											"//get global variable to resultDescription \"SignInProcess is Success\"\r",
											"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
											"//get global variable to resultDescription \"ValidateTokenProcess is Success\"\r",
											"var resultDescriptionValidateToken = pm.globals.get(\"resultDescriptionValidateToken\");\r",
											"//get global variable to resultDescription \"CreatePartner is Success\"\r",
											"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
											"//get global variable to resultDescription \"CreateAccount is Success\"\r",
											"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
											"//get global variable to resultDescription \"CreateThing is Success\"\r",
											"var resultDescriptionCreateThing = pm.globals.get(\"resultDescriptionCreateThing\");\r",
											"//get global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
											"var resultDescriptionCreateThingStateInfo = pm.globals.get(\"resultDescriptionCreateThingStateInfo\");\r",
											"//get global variable to resultDescription \"CreatePurchase is Success\"\r",
											"var resultDescriptionCreatePurchase = pm.globals.get(\"resultDescriptionCreatePurchase\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- urlRouteList --------------//\r",
											"//set variable to urlRouteList JSON.parse\r",
											"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
											"//---------------- set url Create --------------//\r",
											"//set global variable to url \"/api/v1/auth/signin\"\r",
											"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
											"//set global variable to url \"/api/v1/auth/ValidateToken\"\r",
											"pm.globals.set(\"urlValidateToken\", urlRouteList.Signin.urlValidateToken);\r",
											"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
											"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
											"//set global variable to url \"/api/v1/Thing/CreateThing\"\r",
											"pm.globals.set(\"urlThingCreateThing\", urlRouteList.Thing.urlThingCreateThing);\r",
											"//set global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
											"pm.globals.set(\"urlThingCreateThingStateInfo\", urlRouteList.Thing.urlThingCreateThingStateInfo);\r",
											"//set global variable to url \"/api/v1/Purchase/CreatePurchase\"\r",
											"pm.globals.set(\"urlCreatePurchase\", urlRouteList.Purchase.urlCreatePurchase);\r",
											"//---------------- get url Create --------------//\r",
											"//get global variable to url \"/api/v1/auth/signin\"\r",
											"var urlSignin = pm.globals.get(\"urlSignin\");\r",
											"//get global variable to url \"/api/v1/auth/ValidateToken\"\r",
											"var urlValidateToken = pm.globals.get(\"urlValidateToken\");\r",
											"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
											"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
											"//get global variable to url \"/api/v1/Thing/CreateThing\"\r",
											"var urlThingCreateThing = pm.globals.get(\"urlThingCreateThing\");\r",
											"//get global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
											"var urlThingCreateThingStateInfo = pm.globals.get(\"urlThingCreateThingStateInfo\");\r",
											"//get global variable to url \"/api/v1/Purchase/CreatePurchase\"\r",
											"var urlCreatePurchase = pm.globals.get(\"urlCreatePurchase\");\r",
											"//---------------- set url Remove --------------//\r",
											"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
											"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
											"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
											"//set global variable to url \"/api/v1/Thing/RemoveThing\"\r",
											"pm.globals.set(\"urlThingRemoveThing\", urlRouteList.Thing.urlThingRemoveThing);\r",
											"//set global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
											"pm.globals.set(\"urlThingRemoveThingStateInfo\", urlRouteList.Thing.urlThingRemoveThingStateInfo);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"Signin_\"\r",
											"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
											"//get global variable to x_ais_OrderRef \"ValidateToken_\"\r",
											"var x_ais_OrderRef_ValidateToken = pm.globals.get(\"x_ais_OrderRef_ValidateToken\");\r",
											"//get global variable to x_ais_OrderDesc \"ValidateToken\"\r",
											"var x_ais_OrderDesc_ValidateToken = pm.globals.get(\"x_ais_OrderDesc_ValidateToken\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Thing --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreateThing_\"\r",
											"var x_ais_OrderRef_CreateThing = pm.globals.get(\"x_ais_OrderRef_CreateThing\");\r",
											"//get global variable to x_ais_OrderDesc \"CreateThing\"\r",
											"var x_ais_OrderDesc_CreateThing = pm.globals.get(\"x_ais_OrderDesc_CreateThing\");\r",
											"//get global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
											"var x_ais_OrderRef_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderRef_CreateThingStateInfo\");\r",
											"//get global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
											"var x_ais_OrderDesc_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_CreateThingStateInfo\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Purchase --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreatePurchase_\"\r",
											"var x_ais_OrderRef_CreatePurchase = pm.globals.get(\"x_ais_OrderRef_CreatePurchase\");\r",
											"//get global variable to x_ais_OrderDesc \"CreatePurchase\"\r",
											"var x_ais_OrderDesc_CreatePurchase = pm.globals.get(\"x_ais_OrderDesc_CreatePurchase\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"// Signin get token\r",
											" Signin = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username,\r",
											"                password:Password\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"\r",
											"        //set random_number\r",
											"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
											"        //set PartnerName\r",
											"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
											"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
											"        //set MerchantContact\r",
											"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
											"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
											"        // set CPID\r",
											"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
											"        pm.environment.set(\"CPID\", CPIDValue)\r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// ValidateToken\r",
											" ValidateToken = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptValidateToken = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_ValidateToken + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_ValidateToken,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestValidateToken = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                \"AccessToken\": pm.environment.get(\"AccessToken\")\r",
											"            })\r",
											"        };  \r",
											"        \r",
											"        let optionsValidateToken = {\r",
											"            url: url + provisioningapis + urlValidateToken,\r",
											"            method: 'POST',\r",
											"            header: headersOptValidateToken,\r",
											"            body: httpRequestValidateToken\r",
											"        };\r",
											"        // console.log('request ValidateToken');\r",
											"        let response = await reqPromise(optionsValidateToken);\r",
											"        let jsonDataValidateToken = await response.json();\r",
											"        let operationStatusValidateToken = await jsonDataValidateToken.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"ValidateToken : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('ValidateToken : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusValidateToken).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // ValidateTokenProcess is Success\r",
											"        pm.test('ValidateToken : OperationStatus Description is '+'\"'+ resultDescriptionValidateToken+'\"', function () {\r",
											"            pm.expect(operationStatusValidateToken).to.have.property('Description', resultDescriptionValidateToken);\r",
											"        });\r",
											" \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreatePartner\r",
											" CreatePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreatePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreatePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
											"                \"PartnerType\": [\r",
											"                    \"Supplier\",\r",
											"                    \"Customer\"\r",
											"                ],\r",
											"                \"PartnerDetail\": {\r",
											"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
											"                    \"CPID\": pm.environment.get(\"CPID\")\r",
											"                },\r",
											"                \"Property\": {\r",
											"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
											"                }\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsCreatePartner = {\r",
											"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreatePartner,\r",
											"            body: httpRequestCreatePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsCreatePartner);\r",
											"        let jsonDataCreatePartner = await response.json();\r",
											"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
											"    \r",
											"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreatePartner is Success\r",
											"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
											"        });\r",
											"\r",
											"        //GetResponse_PartnerId\r",
											"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
											"\r",
											"        //GetResponse_CustomerId\r",
											"        pm.environment.set(\"GetResponse_CustomerId\", jsonDataCreatePartner.PartnerInfo.CustomerId);\r",
											"        \r",
											"        //Accountname\r",
											"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
											"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreateAccount\r",
											" CreateAccount = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreateAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreateAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
											"                })\r",
											"        };\r",
											"        \r",
											"        let optionsCreateAccount = {\r",
											"            url: url + provisioningapis + urlAccountCreateAccount,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreateAccount,\r",
											"            body: httpRequestCreateAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request CreateAccount');\r",
											"        let response = await reqPromise(optionsCreateAccount);\r",
											"        let jsonDataCreateAccount = await response.json();\r",
											"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
											"    \r",
											"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreateAccount : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreateAccount is Success\r",
											"        pm.test('CreateAccount : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
											"        });\r",
											"        // GetResponse_AccountName\r",
											"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
											"        // GetResponse_AccountId\r",
											"        pm.environment.set(\"GetResponse_AccountId\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
											"        // random_IM\r",
											"        pm.environment.set(\"random_IM\", _.random(10000000, 99999999)+\" \"+_.random(1000000, 9999999))\r",
											"        // random_ICCID\r",
											"        pm.environment.set(\"random_ICCID\", _.random(1000000, 9999999)+\" \"+_.random(100000, 999999))\r",
											"        // random_number\r",
											"        pm.environment.set(\"random_number\",pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
											"        //ThingName\r",
											"        let thingNameValue = fieldDataValue.Provisioning.Thing.ThingNameValue; // \"QAtestthing_T01\"\r",
											"        pm.environment.set(\"ThingName\", thingNameValue + pm.environment.get(\"random_number\"))\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreateThing\r",
											" CreateThing = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreateThing = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreateThing+ current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateThing,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreateThing = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"ThingName\": pm.environment.get(\"ThingName\"),\r",
											"                \"IMEI\": pm.environment.get(\"random_IM\"),\r",
											"                \"IMSI\": pm.environment.get(\"random_IM\"),\r",
											"                \"ICCID\": pm.environment.get(\"random_ICCID\"),\r",
											"                \"RouteUrl\": fieldDataValue.Provisioning.Thing.CreateThing.RouteUrlValue , //[\"http://10.12.3.4:2019/api/information/AddInformation\"]\r",
											"                \"RouteInfo\": {\r",
											"                    \"MIMO_ID\": fieldDataValue.Provisioning.Thing.CreateThing.RouteInfoMIMOIDValue , //\"606edada\"\r",
											"                    \"MIMO_SerialNo\": fieldDataValue.Provisioning.Thing.CreateThing.RouteInfoMIMOSerialNoValue //5466758878\r",
											"                },\r",
											"                \"RouteFlag\": {\r",
											"                    \"ThingName\": fieldDataValue.Provisioning.Thing.CreateThing.RouteFlagThingNameValue , //true\r",
											"                    \"ThingToken\": fieldDataValue.Provisioning.Thing.CreateThing.RouteFlagThingTokenValue, //true\r",
											"                    \"IMEI\": fieldDataValue.Provisioning.Thing.CreateThing.RouteFlagIMEIValue, //true\r",
											"                    \"ICCID\": fieldDataValue.Provisioning.Thing.CreateThing.RouteFlagICCIDValue, //true\r",
											"                    \"RouteInfo\": fieldDataValue.Provisioning.Thing.CreateThing.RouteFlagRouteInfoValue //true\r",
											"                }\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsCreateThing = {\r",
											"            url: url + provisioningapis + urlThingCreateThing,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreateThing,\r",
											"            body: httpRequestCreateThing\r",
											"        };\r",
											"\r",
											"        // console.log('request CreateThing');\r",
											"        let response = await reqPromise(optionsCreateThing);\r",
											"        let jsonDataCreateThing = await response.json();\r",
											"        // console.log('jsonDataCreateThing',jsonDataCreateThing)\r",
											"    \r",
											"        let operationStatusCreateThing = await jsonDataCreateThing.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreateThing : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreateThing : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreateThing).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreateThing is Success\r",
											"        pm.test('CreateThing : OperationStatus Description is '+'\"'+ resultDescriptionCreateThing+'\"', function () {\r",
											"            pm.expect(operationStatusCreateThing).to.have.property('Description', resultDescriptionCreateThing);\r",
											"        });\r",
											"\r",
											"        pm.environment.set(\"GetResponse_ThingID\",jsonDataCreateThing.ThingInfo.ThingId)\r",
											"\r",
											"        //Get Random Sensor \r",
											"        pm.environment.set(\"random_Sensor\", _.random(100, 999))\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreateThingStateInfo\r",
											" CreateThingStateInfo = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreateThingStateInfo = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreateThingStateInfo+ current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateThingStateInfo,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        // {\"Temp\" : pm.environment.get(\"random_Sensor\")}\r",
											"        let sensorValue = {};\r",
											"        sensorValue[fieldDataValue.CreateThingStateInfo.SensorKey] = pm.environment.get(\"random_Sensor\");\r",
											"        // console.log('sensorValue',sensorValue);\r",
											"        \r",
											"        let httpRequestCreateThingStateInfo = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"ThingId\": [\r",
											"                    pm.environment.get(\"GetResponse_ThingID\")\r",
											"                ],\r",
											"                \"Type\": fieldDataValue.CreateThingStateInfo.Type_Report,\r",
											"                \"Sensor\": sensorValue\r",
											"            })\r",
											"        };\r",
											"    \r",
											"        let optionsCreateThingStateInfo = {\r",
											"            url: url + provisioningapis + urlThingCreateThingStateInfo,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreateThingStateInfo,\r",
											"            body: httpRequestCreateThingStateInfo\r",
											"        };\r",
											"\r",
											"        // console.log('request CreateThingStateInfo');\r",
											"        let response = await reqPromise(optionsCreateThingStateInfo);\r",
											"        let jsonDataCreateThingStateInfo = await response.json();\r",
											"        // console.log('jsonDataCreateThingStateInfo',jsonDataCreateThingStateInfo)\r",
											"    \r",
											"        let operationStatusCreateThingStateInfo = await jsonDataCreateThingStateInfo.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"CreateThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('CreateThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //CreateThingStateInfo is Success\r",
											"        pm.test('CreateThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionCreateThingStateInfo+'\"', function () {\r",
											"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Description', resultDescriptionCreateThingStateInfo);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreatePurchase\r",
											"CreatePurchase = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreatePurchase = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreatePurchase+ current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePurchase,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'Accept':Accept\r",
											"        };\r",
											"                \r",
											"        let httpRequestCreatePurchase = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"customerId\": pm.environment.get(\"GetResponse_CustomerId\"),\r",
											"                \"PurchaseInfo\": {\r",
											"                    \"PurchaseKey\": pm.environment.get(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseKey\"),\r",
											"                    \"PurchaseValue\": pm.environment.get(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseValue\"),\r",
											"                    \"PurchaseName\": pm.environment.get(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseName\"),\r",
											"                    \"PurchaseType\": pm.environment.get(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseType\"), //Volume\r",
											"                    \"PurchaseState\": pm.environment.get(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseState\") //Active\r",
											"                },\r",
											"                \"ChargingStatus\": pm.environment.get(\"Value_DeleteCustomer_Create_ChargingStatus\") //Enable\r",
											"            })\r",
											"        };\r",
											"    \r",
											"        let optionsCreatePurchase = {\r",
											"            url: url + provisioningapis + urlCreatePurchase,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreatePurchase,\r",
											"            body: httpRequestCreatePurchase\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePurchase');\r",
											"        let response = await reqPromise(optionsCreatePurchase);\r",
											"        let jsonDataCreatePurchase = await response.json();\r",
											"        // console.log('jsonDataCreatePurchase',jsonDataCreatePurchase)\r",
											"    \r",
											"        let operationStatusCreatePurchase = await jsonDataCreatePurchase.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"CreatePurchase : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('CreatePurchase : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreatePurchase).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //CreatePurchase is Success\r",
											"        pm.test('CreatePurchase : OperationStatus Description is '+'\"'+ resultDescriptionCreatePurchase+'\"', function () {\r",
											"            pm.expect(operationStatusCreatePurchase).to.have.property('Description', resultDescriptionCreatePurchase);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"Signin();\r",
											"setTimeout(async function(){await ValidateToken();}, 1000);\r",
											"setTimeout(async function(){await CreatePartner();}, 2000); \r",
											"setTimeout(async function(){await CreateAccount();}, 3000); \r",
											"setTimeout(async function(){await CreateThing();}, 4000); \r",
											"setTimeout(async function(){await CreateThingStateInfo();}, 6000); \r",
											"setTimeout(async function(){await CreatePurchase();}, 7000); \r",
											"setTimeout(async function(){}, 8000); \r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-ais-UserName",
										"type": "text",
										"value": "{{x_ais_UserName_AisPartner}}"
									},
									{
										"key": "x-ais-OrderRef",
										"value": "{{x_ais_OrderRef_DeleteCustomer}}{{current_timestamp}}"
									},
									{
										"key": "x-ais-OrderDesc",
										"type": "text",
										"value": "{{x_ais_OrderDesc_DeleteCustomer}}"
									},
									{
										"key": "x-ais-AccessToken",
										"value": "{{Bearer}} {{AccessToken}}"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"customerId\": \"{{Value_CreatePurchase_TST_F73_0_2_002_PurchaseInfo_CustomerId}}\"\r\n}"
								},
								"url": {
									"raw": "{{url}}{{provisioningapis}}/api/v1/Customer/DeleteCustomer",
									"host": [
										"{{url}}{{provisioningapis}}"
									],
									"path": [
										"api",
										"v1",
										"Customer",
										"DeleteCustomer"
									]
								},
								"description": "Type:Desire"
							},
							"response": []
						},
						{
							"name": "DeleteCustomer_TST_F73_1_1_003_Error_customerIdMissing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Thing --------------//\r",
											"//get global variable to xAisOrderRef \"RemoveThing_\"\r",
											"var x_ais_OrderRef_RemoveThing = pm.globals.get(\"x_ais_OrderRef_RemoveThing\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveThing\"\r",
											"var x_ais_OrderDesc_RemoveThing = pm.globals.get(\"x_ais_OrderDesc_RemoveThing\");\r",
											"//get global variable to x_ais_OrderRef \"RemoveThingStateInfo_\" \r",
											"var x_ais_OrderDesc_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_RemoveThingStateInfo\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveThingStateInfo\"\r",
											"var x_ais_OrderRef_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderRef_RemoveThingStateInfo\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Purchase --------------//\r",
											"//get global variable to x_ais_OrderRef \"DeleteCustomer_\"\r",
											"var x_ais_OrderRef_DeleteCustomer = pm.globals.get(\"x_ais_OrderRef_DeleteCustomer\");\r",
											"//get global variable to x_ais_OrderDesc \"DeleteCustomer\"\r",
											"var x_ais_OrderDesc_DeleteCustomer = pm.globals.get(\"x_ais_OrderDesc_DeleteCustomer\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get url Remove --------------//\r",
											"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
											"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
											"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
											"//get global variable to url \"/api/v1/Thing/RemoveThing\"\r",
											"var urlThingRemoveThing = pm.globals.get(\"urlThingRemoveThing\");\r",
											"//get global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
											"var urlThingRemoveThingStateInfo = pm.globals.get(\"urlThingRemoveThingStateInfo\");\r",
											"//------------------------------------------------------------//\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultCode \"20100\"\r",
											"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
											"//get global variable to resultDescription \"RemovePartner is Success\"\r",
											"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
											"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
											"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
											"//get global variable to resultDescription \"RemoveThing is Success\"\r",
											"var resultDescriptionRemoveThing = pm.globals.get(\"resultDescriptionRemoveThing\");\r",
											"//get global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
											"var resultDescriptionRemoveThingStateInfo = pm.globals.get(\"resultDescriptionRemoveThingStateInfo\");\r",
											"//------------------------------------------------------------//\r",
											"//get global variable to statusCode 403\r",
											"var statusCodeForbidden = pm.globals.get(\"statusCodeForbidden\");\r",
											"//get global variable to resultCode \"40300\"\r",
											"var resultCodeForbiddenMissingOrInvalidParameter = pm.globals.get(\"resultCodeForbiddenMissingOrInvalidParameter\");\r",
											"//get global variable to resultDescription \"The customerId field is not Object Id.\"\r",
											"var resultDescriptionTheCustomerIdFieldIsRequired = pm.globals.get(\"resultDescriptionTheCustomerIdFieldIsRequired\");\r",
											"//------------------------------------------------------------//\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"DeleteCustomer : Status code is \" + statusCodeForbidden, function () {\r",
											"    pm.response.to.have.status(statusCodeForbidden);\r",
											"});\r",
											"\r",
											"pm.test('DeleteCustomer : operationStatus code is '+'\"'+ resultCodeForbiddenMissingOrInvalidParameter +'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeForbiddenMissingOrInvalidParameter);\r",
											"});\r",
											"\r",
											"pm.test('DeleteCustomer : operationStatus Description is '+'\"'+ resultDescriptionTheCustomerIdFieldIsRequired+'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionTheCustomerIdFieldIsRequired);\r",
											"});\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"// RemovePartner\r",
											" RemovePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemovePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemovePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsRemovePartner = {\r",
											"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemovePartner,\r",
											"            body: httpRequestRemovePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request RemovePartner');\r",
											"        let response = await reqPromise(optionsRemovePartner);\r",
											"        let jsonDataRemovePartner = await response.json();\r",
											"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
											"    \r",
											"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemovePartner is Success\r",
											"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// RemoveAccount\r",
											" RemoveAccount = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemoveAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemoveAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsRemoveAccount = {\r",
											"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemoveAccount,\r",
											"            body: httpRequestRemoveAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request RemoveAccount');\r",
											"        let response = await reqPromise(optionsRemoveAccount);\r",
											"        let jsonDataRemoveAccount = await response.json();\r",
											"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
											"    \r",
											"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemoveAccount is Success\r",
											"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
											"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// RemoveThing\r",
											" RemoveThing = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemoveThing = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThing + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThing,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemoveThing = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\")\r",
											"            })\r",
											"        };\r",
											"\r",
											"        let optionsRemoveThing = {\r",
											"            url: url + provisioningapis + urlThingRemoveThing,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemoveThing,\r",
											"            body: httpRequestRemoveThing\r",
											"        };\r",
											"\r",
											"        // console.log('request RemoveThing');\r",
											"        let response = await reqPromise(optionsRemoveThing);\r",
											"        let jsonDataRemoveThing = await response.json();\r",
											"        // console.log('jsonDataRemoveThing',jsonDataRemoveThing)\r",
											"    \r",
											"        let operationStatusRemoveThing = await jsonDataRemoveThing.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemoveThing : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemoveThing : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemoveThing).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemoveThing is Success\r",
											"        pm.test('RemoveThing : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThing+'\"', function () {\r",
											"            pm.expect(operationStatusRemoveThing).to.have.property('Description', resultDescriptionRemoveThing);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// RemoveThingStateInfo\r",
											" RemoveThingStateInfo = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemoveThingStateInfo = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThingStateInfo + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThingStateInfo,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
											"            'Accept':Accept\r",
											"            \r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemoveThingStateInfo = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\"),\r",
											"                \"stateType\": fieldDataValue.CreateThingStateInfo.Type_Report, //Report\r",
											"                \"stateKey\": fieldDataValue.CreateThingStateInfo.SensorKey //Temp\r",
											"            })\r",
											"        };\r",
											"\r",
											"        let optionsRemoveThingStateInfo = {\r",
											"            url: url + provisioningapis + urlThingRemoveThingStateInfo,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemoveThingStateInfo,\r",
											"            body: httpRequestRemoveThingStateInfo\r",
											"        };\r",
											"\r",
											"        // console.log('response RemoveThingStateInfo');\r",
											"        let response = await reqPromise(optionsRemoveThingStateInfo);\r",
											"        let jsonDataRemoveThingStateInfo = await response.json();\r",
											"        // console.log('jsonDataRemoveThing',jsonDataRemoveThingStateInfo)\r",
											"    \r",
											"        let operationStatusRemoveThingStateInfo = await jsonDataRemoveThingStateInfo.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemoveThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemoveThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemoveThingStateInfo is Success\r",
											"        pm.test('RemoveThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThingStateInfo+'\"', function () {\r",
											"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Description', resultDescriptionRemoveThingStateInfo);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"//---------------- LogDefaultValue --------------//\r",
											"//set variable to LogDefaultValue JSON.parse\r",
											"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
											"// console.log('LogDefaultValue',LogDefaultValue);\r",
											"//---------------- set globals Other --------------//\r",
											"\r",
											"var SearchLog = LogDefaultValue.SearchLog;\r",
											"// console.log('SearchLog',SearchLog);\r",
											"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
											"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
											"var kbn_version = SearchLog.header.kbn_version;\r",
											"var authorization = SearchLog.header.Authorization;\r",
											"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
											"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
											"var namespace = LogDefaultValue.Other.namespace;\r",
											"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
											"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
											"var header_x_ais_username = LogDefaultValue.Other.header_x_ais_username;\r",
											"var header_x_ais_accountkey = LogDefaultValue.Other.header_x_ais_accountkey;\r",
											"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
											"var methodDelete = LogDefaultValue.Other.methodDelete;\r",
											"\r",
											"// Detail\r",
											"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
											"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
											"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
											"\r",
											"// Summary\r",
											"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
											"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
											"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
											"\r",
											"// ProvisioningAPIs [Purchase]\r",
											"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
											"var cmdName = LogDefaultValue.Provisioning.DeleteCustomer.cmdNameDeleteCustomer;\r",
											"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
											"var containerId = LogDefaultValue.Provisioning.containerId;\r",
											"var requestObjectUrlStaging = LogDefaultValue.Provisioning.DeleteCustomer.requestObjectUrlDeleteCustomerMgStaging;\r",
											"\r",
											"// Check CDR (Summary Log) and EDR (Detail Log)\r",
											"SearchLogFindTid = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSearchLogFindTid = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = x_ais_OrderRef_DeleteCustomer + current_timestamp;\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestSearchLogFindTid = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"\r",
											"        let optionsSearchLogFindTid = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptSearchLogFindTid,\r",
											"            body: httpRequestSearchLogFindTid\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsSearchLogFindTid);\r",
											"        let jsonDataSearchLogFindTid = await response.json();\r",
											"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
											"\r",
											"        // //200\r",
											"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"\r",
											"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
											"        console.log('hits',hits)\r",
											"  \r",
											"        // find tid\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            // let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"        \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            if(applicationNameValue == applicationName){\r",
											"                let sessionId = hits[i]._source.cauldron.sessionId;\r",
											"                pm.environment.set(\"sessionId\", sessionId);\r",
											"                break;\r",
											"           }\r",
											"        }\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"CheckLog = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCheckLog = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = pm.environment.get(\"sessionId\");\r",
											"\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestCheckLog = {\r",
											"            mode: 'raw',\r",
											"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"        let optionsCheckLog = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptCheckLog,\r",
											"            body: httpRequestCheckLog\r",
											"        }; \r",
											"        let response = await reqPromise(optionsCheckLog);\r",
											"        let jsonDataCheckLog = await response.json();\r",
											"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
											"        \r",
											"        // //200\r",
											"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });     \r",
											"        \r",
											"        let hits = jsonDataCheckLog.hits.hits\r",
											"        console.log('hits',hits)\r",
											"  \r",
											"        // find logType\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            //  let logType = hits[i]._source.cauldron.logType\r",
											"            let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"           \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            \r",
											"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
											"            // console.log('resultDataLog',resultDataLog)\r",
											"\r",
											"            let tidControl = x_ais_OrderRef_DeleteCustomer + current_timestamp;\r",
											"            // console.log(tidControl);\r",
											"            if(applicationNameValue == applicationName){\r",
											"                 \r",
											"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ProvisioningAPIs\r",
											"                    pm.test(\"Check Summary Log : DeleteCustomer\" , function () {\r",
											"                        console.log(\"======== Check Summary Log ( Expected = Actual) [DeleteCustomer] ==================\");\r",
											"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
											"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
											"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeForbiddenMissingOrInvalidParameter);\r",
											"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionTheCustomerIdFieldIsRequired);\r",
											"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
											"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
											"                        console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
											"\r",
											"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
											"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
											"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeForbiddenMissingOrInvalidParameter); \r",
											"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionTheCustomerIdFieldIsRequired); \r",
											"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
											"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
											"                        pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
											"                    }); \r",
											"                }\r",
											"\r",
											"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ProvisioningAPIs\r",
											"\r",
											"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
											"                    // console.log('endPointNameValue ',endPointNameValue)\r",
											"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [DeleteCustomer]\", function () {\r",
											"                        console.log(\"======== Check Detail Log ( Expected = Actual) [DeleteCustomer] ==================\");\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
											"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
											"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
											"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
											"\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
											"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
											"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
											"\r",
											"                        if( endPointNameValue == endPointNameProvisioningAPIs){     //\"endPointName\":\"ProvisioningAPIs\"\r",
											"                            console.log(\"custom1.endPointName : \" + resultDataLog.custom1.endPointName + \" = \" + endPointNameProvisioningAPIs);\r",
											"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs); \r",
											"                        \r",
											"                            // check requestObject\r",
											"                            // \"requestObject\":\"{\\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Customer/DeleteCustomer\\\",\\\"method\\\":\\\"DELETE\\\",\\\"headers\\\":{\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"DeleteCustomer_202102172002683\\\",\\\"x-ais-orderdesc\\\":\\\"DeleteCustomer\\\",\\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAGJjc8t2ZfqZcNNvBKwuLmPMV/NLO2GPEwLJG3c2Ik+TEIlAkkY2KW0\\\"},\\\"body\\\":{}}\"\r",
											"                            \r",
											"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
											"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
											"                            let url = urlCheckLog + requestObjectUrlStaging;\r",
											"                            let x_ais_orderref = x_ais_OrderRef_DeleteCustomer + current_timestamp;\r",
											"                            let x_ais_orderdesc = x_ais_OrderDesc_DeleteCustomer;\r",
											"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken\");\r",
											"                            let x_ais_userName = x_ais_UserName_AisPartner;\r",
											"                            \r",
											"                            // let customerId = pm.environment.get(\"GetResponse_CustomerId\");\r",
											"                            \r",
											"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
											"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodDelete);\r",
											"                            console.log(\"headers.x_ais_userName : \" + jsonParseRequestObject.headers[header_x_ais_username] + \" = \" + x_ais_userName);\r",
											"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
											"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
											"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
											"                                                                                                                                                             \r",
											"                            pm.expect(jsonParseRequestObject.url).to.eql(url);\r",
											"                            pm.expect(jsonParseRequestObject.method).to.eql(methodDelete);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_username]).to.eql(x_ais_userName);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
											"\r",
											"                            console.log(\"resquest.body.customerId : \" + JSON.stringify(jsonParseRequestObject.body) + \" = \" + JSON.stringify({}));\r",
											"\r",
											"                            pm.expect(jsonParseRequestObject.body).to.eql({});\r",
											"\r",
											"                            // check responseObject\r",
											"                            // \"responseObject\":\"{\\\"OperationStatus\\\":{\\\"Code\\\":\\\"40300\\\",\\\"Description\\\":\\\"The customerId field is required.\\\"}}\"\r",
											"\r",
											"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
											"                            // console.log('jsonParseResponseObject',jsonParseResponseObject);\r",
											"\r",
											"                            console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeForbiddenMissingOrInvalidParameter);\r",
											"                            console.log(\"response.OperationStatus.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionTheCustomerIdFieldIsRequired);\r",
											"\r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeForbiddenMissingOrInvalidParameter);  \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionTheCustomerIdFieldIsRequired);  \r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"setTimeout(function(){SearchLogFindTid();}, 9000); \r",
											"setTimeout(function(){CheckLog();}, 20000); \r",
											"\r",
											"setTimeout(function(){RemoveThingStateInfo();}, 30000); \r",
											"setTimeout(function(){RemoveThing();}, 40000); \r",
											"setTimeout(function(){RemoveAccount();}, 50000); \r",
											"setTimeout(function(){RemovePartner();}, 60000); \r",
											"\r",
											"setTimeout(function(){\r",
											"pm.environment.unset(\"current_timestamp\");\r",
											"pm.environment.unset(\"AccessToken\");\r",
											"pm.environment.unset(\"random_number\");\r",
											"pm.environment.unset(\"PartnerName\");\r",
											"pm.environment.unset(\"MerchantContact\");\r",
											"pm.environment.unset(\"CPID\");\r",
											"pm.environment.unset(\"GetResponse_PartnerId\");\r",
											"pm.environment.unset(\"AccountName\");\r",
											"pm.environment.unset(\"GetResponse_AccountName\");\r",
											"pm.environment.unset(\"GetResponse_AccountId\");\r",
											"pm.environment.unset(\"random_IM\");\r",
											"pm.environment.unset(\"random_ICCID\");\r",
											"pm.environment.unset(\"ThingName\");\r",
											"pm.environment.unset(\"GetResponse_ThingID\");\r",
											"pm.environment.unset(\"random_Sensor\");\r",
											"pm.environment.unset(\"sessionId\");\r",
											"pm.environment.unset(\"GetResponse_CustomerId\");\r",
											"pm.environment.unset(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseKey\");\r",
											"pm.environment.unset(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseValue\");\r",
											"pm.environment.unset(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseName\");\r",
											"pm.environment.unset(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseType\");\r",
											"pm.environment.unset(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseState\");\r",
											"pm.environment.unset(\"Value_DeleteCustomer_Create_ChargingStatus\");\r",
											"}, 65000);\r",
											"setTimeout(function(){}, 70000); "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var Username = pm.environment.get(\"Username\");\r",
											"var Password = pm.environment.get(\"Password\");\r",
											"\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"pm.environment.set(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseKey\",fieldDataValue.Provisioning.DeleteCustomer.Value_DeleteCustomer_Create_PurchaseInfo_PurchaseKey)\r",
											"pm.environment.set(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseValue\",fieldDataValue.Provisioning.DeleteCustomer.Value_DeleteCustomer_Create_PurchaseInfo_PurchaseValue)\r",
											"pm.environment.set(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseName\",fieldDataValue.Provisioning.DeleteCustomer.Value_DeleteCustomer_Create_PurchaseInfo_PurchaseName)\r",
											"pm.environment.set(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseType\",fieldDataValue.Provisioning.DeleteCustomer.Value_DeleteCustomer_Create_PurchaseInfo_PurchaseType)\r",
											"pm.environment.set(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseState\",fieldDataValue.Provisioning.DeleteCustomer.Value_DeleteCustomer_Create_PurchaseInfo_PurchaseState)\r",
											"pm.environment.set(\"Value_DeleteCustomer_Create_ChargingStatus\",fieldDataValue.Provisioning.DeleteCustomer.Value_DeleteCustomer_Create_ChargingStatus)\r",
											"\r",
											"//format YYYYMMDDHHMMSSS\r",
											"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
											"// console.log('currentTmestamp',currentTmestamp);\r",
											"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- statusCodeList --------------//\r",
											"//set variable to statusCodeList JSON.parse\r",
											"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
											"//set global variable to statusCode 200\r",
											"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
											"//set global variable to statusCode 201\r",
											"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
											"//set global variable to statusCode 403\r",
											"pm.globals.set(\"statusCodeForbidden\", statusCodeList.statusCodeForbidden);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- resultCodeList --------------//\r",
											"//set variable to resultCodeList JSON.parse\r",
											"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
											"//set global variable to resultCode \"20000\"\r",
											"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
											"//set global variable to resultCode \"20100\"\r",
											"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
											"//set global variable to resultCode \"40300\"\r",
											"pm.globals.set(\"resultCodeForbiddenMissingOrInvalidParameter\", resultCodeList.resultCodeForbiddenMissingOrInvalidParameter);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- resultDescriptionSuccessList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
											"//set global variable to resultDescription \"SignInProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
											"//set global variable to resultDescription \"ValidateTokenProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionValidateToken\", resultDescriptionSuccessList.resultDescriptionValidateToken);\r",
											"//set global variable to resultDescription \"CreatePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
											"//set global variable to resultDescription \"CreateAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
											"//set global variable to resultDescription \"CreateThing is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreateThing\", resultDescriptionSuccessList.resultDescriptionCreateThing);\r",
											"//set global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreateThingStateInfo\", resultDescriptionSuccessList.resultDescriptionCreateThingStateInfo);\r",
											"//set global variable to resultDescription \"RemovePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
											"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
											"//set global variable to resultDescription \"RemoveThing is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveThing\", resultDescriptionSuccessList.resultDescriptionRemoveThing);\r",
											"//set global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveThingStateInfo\", resultDescriptionSuccessList.resultDescriptionRemoveThingStateInfo);\r",
											"//set global variable to resultDescription \"CreatePurchase is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreatePurchase\", resultDescriptionSuccessList.resultDescriptionCreatePurchase);\r",
											"//set global variable to resultDescription \"removeCustomer is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveCustomer\", resultDescriptionSuccessList.resultDescriptionRemoveCustomer);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- resultDescriptionErrorList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
											"//set global variable to resultDescription \"The customerId field is required.\"\r",
											"pm.globals.set(\"resultDescriptionTheCustomerIdFieldIsRequired\", resultDescriptionErrorList.resultDescriptionTheCustomerIdFieldIsRequired);\r",
											"\r",
											"//---------------- HeaderList --------------//\r",
											"//set variable to HeaderList JSON.parse\r",
											"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
											"//---------------- set globals Other --------------//\r",
											"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
											"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
											"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
											"//set global variable to kbn-versio \"7.5.1\"\r",
											"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Signin_ --------------//\r",
											"//set global variable to x_ais_OrderRef \"Signin_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
											"//set global variable to x_ais_OrderRef \"ValidateToken\"\r",
											"pm.globals.set(\"x_ais_OrderRef_ValidateToken\", HeaderList.Signin.x_ais_OrderRef_ValidateToken);\r",
											"//set global variable to x_ais_OrderDesc \"ValidateToken\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_ValidateToken\", HeaderList.Signin.x_ais_OrderDesc_ValidateToken);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals CreatePartner --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
											"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
											"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
											"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals CreateAccount --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
											"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
											"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
											"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Thing --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreateThing_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreateThing\", HeaderList.Thing.x_ais_OrderRef_CreateThing);\r",
											"//set global variable to x_ais_OrderDesc \"CreateThing\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreateThing\", HeaderList.Thing.x_ais_OrderDesc_CreateThing);\r",
											"//set global variable to x_ais_OrderRef \"RemoveThing_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemoveThing\", HeaderList.Thing.x_ais_OrderRef_RemoveThing);\r",
											"//set global variable to x_ais_OrderDesc \"RemoveThing\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemoveThing\", HeaderList.Thing.x_ais_OrderDesc_RemoveThing);\r",
											"//set global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_CreateThingStateInfo);\r",
											"//set global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_CreateThingStateInfo);\r",
											"//set global variable to x_ais_OrderRef \"RemoveThingStateInfo\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_RemoveThingStateInfo);\r",
											"//set global variable to x_ais_OrderDesc \"RemoveThingStateInfo_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_RemoveThingStateInfo);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Purchase --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreatePurchase_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreatePurchase\", HeaderList.Purchase.x_ais_OrderRef_CreatePurchase);\r",
											"//set global variable to x_ais_OrderDesc \"CreatePurchase\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreatePurchase\", HeaderList.Purchase.x_ais_OrderDesc_CreatePurchase);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals DeleteCustomer --------------//\r",
											"//set global variable to x_ais_OrderRef \"DeleteCustomer_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_DeleteCustomer\", HeaderList.Customer.x_ais_OrderRef_DeleteCustomer);\r",
											"//set global variable to x_ais_OrderRef \"DeleteCustomerfail_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_DeleteCustomer_fail\", HeaderList.Customer.x_ais_OrderRef_DeleteCustomer_fail);\r",
											"//set global variable to x_ais_OrderDesc \"DeleteCustomer\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_DeleteCustomer\", HeaderList.Customer.x_ais_OrderDesc_DeleteCustomer);\r",
											"//------------------------------------------------------------//\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultCode \"20100\"\r",
											"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
											"//get global variable to resultDescription \"SignInProcess is Success\"\r",
											"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
											"//get global variable to resultDescription \"ValidateTokenProcess is Success\"\r",
											"var resultDescriptionValidateToken = pm.globals.get(\"resultDescriptionValidateToken\");\r",
											"//get global variable to resultDescription \"CreatePartner is Success\"\r",
											"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
											"//get global variable to resultDescription \"CreateAccount is Success\"\r",
											"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
											"//get global variable to resultDescription \"CreateThing is Success\"\r",
											"var resultDescriptionCreateThing = pm.globals.get(\"resultDescriptionCreateThing\");\r",
											"//get global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
											"var resultDescriptionCreateThingStateInfo = pm.globals.get(\"resultDescriptionCreateThingStateInfo\");\r",
											"//get global variable to resultDescription \"CreatePurchase is Success\"\r",
											"var resultDescriptionCreatePurchase = pm.globals.get(\"resultDescriptionCreatePurchase\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- urlRouteList --------------//\r",
											"//set variable to urlRouteList JSON.parse\r",
											"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
											"//---------------- set url Create --------------//\r",
											"//set global variable to url \"/api/v1/auth/signin\"\r",
											"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
											"//set global variable to url \"/api/v1/auth/ValidateToken\"\r",
											"pm.globals.set(\"urlValidateToken\", urlRouteList.Signin.urlValidateToken);\r",
											"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
											"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
											"//set global variable to url \"/api/v1/Thing/CreateThing\"\r",
											"pm.globals.set(\"urlThingCreateThing\", urlRouteList.Thing.urlThingCreateThing);\r",
											"//set global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
											"pm.globals.set(\"urlThingCreateThingStateInfo\", urlRouteList.Thing.urlThingCreateThingStateInfo);\r",
											"//set global variable to url \"/api/v1/Purchase/CreatePurchase\"\r",
											"pm.globals.set(\"urlCreatePurchase\", urlRouteList.Purchase.urlCreatePurchase);\r",
											"//---------------- get url Create --------------//\r",
											"//get global variable to url \"/api/v1/auth/signin\"\r",
											"var urlSignin = pm.globals.get(\"urlSignin\");\r",
											"//get global variable to url \"/api/v1/auth/ValidateToken\"\r",
											"var urlValidateToken = pm.globals.get(\"urlValidateToken\");\r",
											"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
											"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
											"//get global variable to url \"/api/v1/Thing/CreateThing\"\r",
											"var urlThingCreateThing = pm.globals.get(\"urlThingCreateThing\");\r",
											"//get global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
											"var urlThingCreateThingStateInfo = pm.globals.get(\"urlThingCreateThingStateInfo\");\r",
											"//get global variable to url \"/api/v1/Purchase/CreatePurchase\"\r",
											"var urlCreatePurchase = pm.globals.get(\"urlCreatePurchase\");\r",
											"//---------------- set url Remove --------------//\r",
											"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
											"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
											"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
											"//set global variable to url \"/api/v1/Thing/RemoveThing\"\r",
											"pm.globals.set(\"urlThingRemoveThing\", urlRouteList.Thing.urlThingRemoveThing);\r",
											"//set global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
											"pm.globals.set(\"urlThingRemoveThingStateInfo\", urlRouteList.Thing.urlThingRemoveThingStateInfo);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"Signin_\"\r",
											"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
											"//get global variable to x_ais_OrderRef \"ValidateToken_\"\r",
											"var x_ais_OrderRef_ValidateToken = pm.globals.get(\"x_ais_OrderRef_ValidateToken\");\r",
											"//get global variable to x_ais_OrderDesc \"ValidateToken\"\r",
											"var x_ais_OrderDesc_ValidateToken = pm.globals.get(\"x_ais_OrderDesc_ValidateToken\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Thing --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreateThing_\"\r",
											"var x_ais_OrderRef_CreateThing = pm.globals.get(\"x_ais_OrderRef_CreateThing\");\r",
											"//get global variable to x_ais_OrderDesc \"CreateThing\"\r",
											"var x_ais_OrderDesc_CreateThing = pm.globals.get(\"x_ais_OrderDesc_CreateThing\");\r",
											"//get global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
											"var x_ais_OrderRef_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderRef_CreateThingStateInfo\");\r",
											"//get global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
											"var x_ais_OrderDesc_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_CreateThingStateInfo\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Purchase --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreatePurchase_\"\r",
											"var x_ais_OrderRef_CreatePurchase = pm.globals.get(\"x_ais_OrderRef_CreatePurchase\");\r",
											"//get global variable to x_ais_OrderDesc \"CreatePurchase\"\r",
											"var x_ais_OrderDesc_CreatePurchase = pm.globals.get(\"x_ais_OrderDesc_CreatePurchase\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"// Signin get token\r",
											" Signin = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username,\r",
											"                password:Password\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"\r",
											"        //set random_number\r",
											"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
											"        //set PartnerName\r",
											"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
											"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
											"        //set MerchantContact\r",
											"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
											"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
											"        // set CPID\r",
											"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
											"        pm.environment.set(\"CPID\", CPIDValue)\r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// ValidateToken\r",
											" ValidateToken = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptValidateToken = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_ValidateToken + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_ValidateToken,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestValidateToken = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                \"AccessToken\": pm.environment.get(\"AccessToken\")\r",
											"            })\r",
											"        };  \r",
											"        \r",
											"        let optionsValidateToken = {\r",
											"            url: url + provisioningapis + urlValidateToken,\r",
											"            method: 'POST',\r",
											"            header: headersOptValidateToken,\r",
											"            body: httpRequestValidateToken\r",
											"        };\r",
											"        // console.log('request ValidateToken');\r",
											"        let response = await reqPromise(optionsValidateToken);\r",
											"        let jsonDataValidateToken = await response.json();\r",
											"        let operationStatusValidateToken = await jsonDataValidateToken.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"ValidateToken : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('ValidateToken : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusValidateToken).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // ValidateTokenProcess is Success\r",
											"        pm.test('ValidateToken : OperationStatus Description is '+'\"'+ resultDescriptionValidateToken+'\"', function () {\r",
											"            pm.expect(operationStatusValidateToken).to.have.property('Description', resultDescriptionValidateToken);\r",
											"        });\r",
											" \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreatePartner\r",
											" CreatePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreatePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreatePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
											"                \"PartnerType\": [\r",
											"                    \"Supplier\",\r",
											"                    \"Customer\"\r",
											"                ],\r",
											"                \"PartnerDetail\": {\r",
											"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
											"                    \"CPID\": pm.environment.get(\"CPID\")\r",
											"                },\r",
											"                \"Property\": {\r",
											"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
											"                }\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsCreatePartner = {\r",
											"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreatePartner,\r",
											"            body: httpRequestCreatePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsCreatePartner);\r",
											"        let jsonDataCreatePartner = await response.json();\r",
											"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
											"    \r",
											"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreatePartner is Success\r",
											"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
											"        });\r",
											"\r",
											"        //GetResponse_PartnerId\r",
											"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
											"\r",
											"        //GetResponse_CustomerId\r",
											"        pm.environment.set(\"GetResponse_CustomerId\", jsonDataCreatePartner.PartnerInfo.CustomerId);\r",
											"        \r",
											"        //Accountname\r",
											"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
											"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreateAccount\r",
											" CreateAccount = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreateAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreateAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
											"                })\r",
											"        };\r",
											"        \r",
											"        let optionsCreateAccount = {\r",
											"            url: url + provisioningapis + urlAccountCreateAccount,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreateAccount,\r",
											"            body: httpRequestCreateAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request CreateAccount');\r",
											"        let response = await reqPromise(optionsCreateAccount);\r",
											"        let jsonDataCreateAccount = await response.json();\r",
											"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
											"    \r",
											"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreateAccount : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreateAccount is Success\r",
											"        pm.test('CreateAccount : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
											"        });\r",
											"        // GetResponse_AccountName\r",
											"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
											"        // GetResponse_AccountId\r",
											"        pm.environment.set(\"GetResponse_AccountId\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
											"        // random_IM\r",
											"        pm.environment.set(\"random_IM\", _.random(10000000, 99999999)+\" \"+_.random(1000000, 9999999))\r",
											"        // random_ICCID\r",
											"        pm.environment.set(\"random_ICCID\", _.random(1000000, 9999999)+\" \"+_.random(100000, 999999))\r",
											"        // random_number\r",
											"        pm.environment.set(\"random_number\",pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
											"        //ThingName\r",
											"        let thingNameValue = fieldDataValue.Provisioning.Thing.ThingNameValue; // \"QAtestthing_T01\"\r",
											"        pm.environment.set(\"ThingName\", thingNameValue + pm.environment.get(\"random_number\"))\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreateThing\r",
											" CreateThing = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreateThing = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreateThing+ current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateThing,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreateThing = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"ThingName\": pm.environment.get(\"ThingName\"),\r",
											"                \"IMEI\": pm.environment.get(\"random_IM\"),\r",
											"                \"IMSI\": pm.environment.get(\"random_IM\"),\r",
											"                \"ICCID\": pm.environment.get(\"random_ICCID\"),\r",
											"                \"RouteUrl\": fieldDataValue.Provisioning.Thing.CreateThing.RouteUrlValue , //[\"http://10.12.3.4:2019/api/information/AddInformation\"]\r",
											"                \"RouteInfo\": {\r",
											"                    \"MIMO_ID\": fieldDataValue.Provisioning.Thing.CreateThing.RouteInfoMIMOIDValue , //\"606edada\"\r",
											"                    \"MIMO_SerialNo\": fieldDataValue.Provisioning.Thing.CreateThing.RouteInfoMIMOSerialNoValue //5466758878\r",
											"                },\r",
											"                \"RouteFlag\": {\r",
											"                    \"ThingName\": fieldDataValue.Provisioning.Thing.CreateThing.RouteFlagThingNameValue , //true\r",
											"                    \"ThingToken\": fieldDataValue.Provisioning.Thing.CreateThing.RouteFlagThingTokenValue, //true\r",
											"                    \"IMEI\": fieldDataValue.Provisioning.Thing.CreateThing.RouteFlagIMEIValue, //true\r",
											"                    \"ICCID\": fieldDataValue.Provisioning.Thing.CreateThing.RouteFlagICCIDValue, //true\r",
											"                    \"RouteInfo\": fieldDataValue.Provisioning.Thing.CreateThing.RouteFlagRouteInfoValue //true\r",
											"                }\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsCreateThing = {\r",
											"            url: url + provisioningapis + urlThingCreateThing,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreateThing,\r",
											"            body: httpRequestCreateThing\r",
											"        };\r",
											"\r",
											"        // console.log('request CreateThing');\r",
											"        let response = await reqPromise(optionsCreateThing);\r",
											"        let jsonDataCreateThing = await response.json();\r",
											"        // console.log('jsonDataCreateThing',jsonDataCreateThing)\r",
											"    \r",
											"        let operationStatusCreateThing = await jsonDataCreateThing.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreateThing : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreateThing : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreateThing).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreateThing is Success\r",
											"        pm.test('CreateThing : OperationStatus Description is '+'\"'+ resultDescriptionCreateThing+'\"', function () {\r",
											"            pm.expect(operationStatusCreateThing).to.have.property('Description', resultDescriptionCreateThing);\r",
											"        });\r",
											"\r",
											"        pm.environment.set(\"GetResponse_ThingID\",jsonDataCreateThing.ThingInfo.ThingId)\r",
											"\r",
											"        //Get Random Sensor \r",
											"        pm.environment.set(\"random_Sensor\", _.random(100, 999))\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreateThingStateInfo\r",
											" CreateThingStateInfo = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreateThingStateInfo = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreateThingStateInfo+ current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateThingStateInfo,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        // {\"Temp\" : pm.environment.get(\"random_Sensor\")}\r",
											"        let sensorValue = {};\r",
											"        sensorValue[fieldDataValue.CreateThingStateInfo.SensorKey] = pm.environment.get(\"random_Sensor\");\r",
											"        // console.log('sensorValue',sensorValue);\r",
											"        \r",
											"        let httpRequestCreateThingStateInfo = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"ThingId\": [\r",
											"                    pm.environment.get(\"GetResponse_ThingID\")\r",
											"                ],\r",
											"                \"Type\": fieldDataValue.CreateThingStateInfo.Type_Report,\r",
											"                \"Sensor\": sensorValue\r",
											"            })\r",
											"        };\r",
											"    \r",
											"        let optionsCreateThingStateInfo = {\r",
											"            url: url + provisioningapis + urlThingCreateThingStateInfo,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreateThingStateInfo,\r",
											"            body: httpRequestCreateThingStateInfo\r",
											"        };\r",
											"\r",
											"        // console.log('request CreateThingStateInfo');\r",
											"        let response = await reqPromise(optionsCreateThingStateInfo);\r",
											"        let jsonDataCreateThingStateInfo = await response.json();\r",
											"        // console.log('jsonDataCreateThingStateInfo',jsonDataCreateThingStateInfo)\r",
											"    \r",
											"        let operationStatusCreateThingStateInfo = await jsonDataCreateThingStateInfo.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"CreateThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('CreateThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //CreateThingStateInfo is Success\r",
											"        pm.test('CreateThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionCreateThingStateInfo+'\"', function () {\r",
											"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Description', resultDescriptionCreateThingStateInfo);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreatePurchase\r",
											"CreatePurchase = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreatePurchase = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreatePurchase+ current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePurchase,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'Accept':Accept\r",
											"        };\r",
											"                \r",
											"        let httpRequestCreatePurchase = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"customerId\": pm.environment.get(\"GetResponse_CustomerId\"),\r",
											"                \"PurchaseInfo\": {\r",
											"                    \"PurchaseKey\": pm.environment.get(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseKey\"),\r",
											"                    \"PurchaseValue\": pm.environment.get(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseValue\"),\r",
											"                    \"PurchaseName\": pm.environment.get(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseName\"),\r",
											"                    \"PurchaseType\": pm.environment.get(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseType\"), //Volume\r",
											"                    \"PurchaseState\": pm.environment.get(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseState\") //Active\r",
											"                },\r",
											"                \"ChargingStatus\": pm.environment.get(\"Value_DeleteCustomer_Create_ChargingStatus\") //Enable\r",
											"            })\r",
											"        };\r",
											"    \r",
											"        let optionsCreatePurchase = {\r",
											"            url: url + provisioningapis + urlCreatePurchase,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreatePurchase,\r",
											"            body: httpRequestCreatePurchase\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePurchase');\r",
											"        let response = await reqPromise(optionsCreatePurchase);\r",
											"        let jsonDataCreatePurchase = await response.json();\r",
											"        // console.log('jsonDataCreatePurchase',jsonDataCreatePurchase)\r",
											"    \r",
											"        let operationStatusCreatePurchase = await jsonDataCreatePurchase.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"CreatePurchase : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('CreatePurchase : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreatePurchase).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //CreatePurchase is Success\r",
											"        pm.test('CreatePurchase : OperationStatus Description is '+'\"'+ resultDescriptionCreatePurchase+'\"', function () {\r",
											"            pm.expect(operationStatusCreatePurchase).to.have.property('Description', resultDescriptionCreatePurchase);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"Signin();\r",
											"setTimeout(async function(){await ValidateToken();}, 1000);\r",
											"setTimeout(async function(){await CreatePartner();}, 2000); \r",
											"setTimeout(async function(){await CreateAccount();}, 3000); \r",
											"setTimeout(async function(){await CreateThing();}, 4000); \r",
											"setTimeout(async function(){await CreateThingStateInfo();}, 6000); \r",
											"setTimeout(async function(){await CreatePurchase();}, 7000); \r",
											"setTimeout(async function(){}, 8000); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-ais-UserName",
										"type": "text",
										"value": "{{x_ais_UserName_AisPartner}}"
									},
									{
										"key": "x-ais-OrderRef",
										"value": "{{x_ais_OrderRef_DeleteCustomer}}{{current_timestamp}}"
									},
									{
										"key": "x-ais-OrderDesc",
										"type": "text",
										"value": "{{x_ais_OrderDesc_DeleteCustomer}}"
									},
									{
										"key": "x-ais-AccessToken",
										"value": "{{Bearer}} {{AccessToken}}"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}{{provisioningapis}}/api/v1/Customer/DeleteCustomer",
									"host": [
										"{{url}}{{provisioningapis}}"
									],
									"path": [
										"api",
										"v1",
										"Customer",
										"DeleteCustomer"
									]
								},
								"description": "Type:Desire"
							},
							"response": []
						},
						{
							"name": "DeleteCustomer_TST_F73_1_1_004_Error_customerIdInvalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Thing --------------//\r",
											"//get global variable to xAisOrderRef \"RemoveThing_\"\r",
											"var x_ais_OrderRef_RemoveThing = pm.globals.get(\"x_ais_OrderRef_RemoveThing\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveThing\"\r",
											"var x_ais_OrderDesc_RemoveThing = pm.globals.get(\"x_ais_OrderDesc_RemoveThing\");\r",
											"//get global variable to x_ais_OrderRef \"RemoveThingStateInfo_\" \r",
											"var x_ais_OrderDesc_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_RemoveThingStateInfo\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveThingStateInfo\"\r",
											"var x_ais_OrderRef_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderRef_RemoveThingStateInfo\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Purchase --------------//\r",
											"//get global variable to x_ais_OrderRef \"DeleteCustomer_\"\r",
											"var x_ais_OrderRef_DeleteCustomer = pm.globals.get(\"x_ais_OrderRef_DeleteCustomer\");\r",
											"//get global variable to x_ais_OrderDesc \"DeleteCustomer\"\r",
											"var x_ais_OrderDesc_DeleteCustomer = pm.globals.get(\"x_ais_OrderDesc_DeleteCustomer\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get url Remove --------------//\r",
											"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
											"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
											"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
											"//get global variable to url \"/api/v1/Thing/RemoveThing\"\r",
											"var urlThingRemoveThing = pm.globals.get(\"urlThingRemoveThing\");\r",
											"//get global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
											"var urlThingRemoveThingStateInfo = pm.globals.get(\"urlThingRemoveThingStateInfo\");\r",
											"//------------------------------------------------------------//\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultCode \"20100\"\r",
											"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
											"//get global variable to resultDescription \"RemovePartner is Success\"\r",
											"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
											"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
											"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
											"//get global variable to resultDescription \"RemoveThing is Success\"\r",
											"var resultDescriptionRemoveThing = pm.globals.get(\"resultDescriptionRemoveThing\");\r",
											"//get global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
											"var resultDescriptionRemoveThingStateInfo = pm.globals.get(\"resultDescriptionRemoveThingStateInfo\");\r",
											"//------------------------------------------------------------//\r",
											"//get global variable to statusCode 403\r",
											"var statusCodeForbidden = pm.globals.get(\"statusCodeForbidden\");\r",
											"//get global variable to resultCode \"40300\"\r",
											"var resultCodeForbiddenMissingOrInvalidParameter = pm.globals.get(\"resultCodeForbiddenMissingOrInvalidParameter\");\r",
											"//get global variable to resultDescription \"The customerId field is not Object Id.\"\r",
											"var resultDescriptionTheCustomerIdFieldIsNotObjectId = pm.globals.get(\"resultDescriptionTheCustomerIdFieldIsNotObjectId\");\r",
											"//------------------------------------------------------------//\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"DeleteCustomer : Status code is \" + statusCodeForbidden, function () {\r",
											"    pm.response.to.have.status(statusCodeForbidden);\r",
											"});\r",
											"\r",
											"pm.test('DeleteCustomer : operationStatus code is '+'\"'+ resultCodeForbiddenMissingOrInvalidParameter +'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeForbiddenMissingOrInvalidParameter);\r",
											"});\r",
											"\r",
											"pm.test('DeleteCustomer : operationStatus Description is '+'\"'+ resultDescriptionTheCustomerIdFieldIsNotObjectId+'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionTheCustomerIdFieldIsNotObjectId);\r",
											"});\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"// RemovePartner\r",
											" RemovePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemovePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemovePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsRemovePartner = {\r",
											"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemovePartner,\r",
											"            body: httpRequestRemovePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request RemovePartner');\r",
											"        let response = await reqPromise(optionsRemovePartner);\r",
											"        let jsonDataRemovePartner = await response.json();\r",
											"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
											"    \r",
											"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemovePartner is Success\r",
											"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// RemoveAccount\r",
											" RemoveAccount = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemoveAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemoveAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsRemoveAccount = {\r",
											"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemoveAccount,\r",
											"            body: httpRequestRemoveAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request RemoveAccount');\r",
											"        let response = await reqPromise(optionsRemoveAccount);\r",
											"        let jsonDataRemoveAccount = await response.json();\r",
											"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
											"    \r",
											"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemoveAccount is Success\r",
											"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
											"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// RemoveThing\r",
											" RemoveThing = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemoveThing = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThing + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThing,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemoveThing = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\")\r",
											"            })\r",
											"        };\r",
											"\r",
											"        let optionsRemoveThing = {\r",
											"            url: url + provisioningapis + urlThingRemoveThing,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemoveThing,\r",
											"            body: httpRequestRemoveThing\r",
											"        };\r",
											"\r",
											"        // console.log('request RemoveThing');\r",
											"        let response = await reqPromise(optionsRemoveThing);\r",
											"        let jsonDataRemoveThing = await response.json();\r",
											"        // console.log('jsonDataRemoveThing',jsonDataRemoveThing)\r",
											"    \r",
											"        let operationStatusRemoveThing = await jsonDataRemoveThing.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemoveThing : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemoveThing : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemoveThing).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemoveThing is Success\r",
											"        pm.test('RemoveThing : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThing+'\"', function () {\r",
											"            pm.expect(operationStatusRemoveThing).to.have.property('Description', resultDescriptionRemoveThing);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// RemoveThingStateInfo\r",
											" RemoveThingStateInfo = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemoveThingStateInfo = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThingStateInfo + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThingStateInfo,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
											"            'Accept':Accept\r",
											"            \r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemoveThingStateInfo = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\"),\r",
											"                \"stateType\": fieldDataValue.CreateThingStateInfo.Type_Report, //Report\r",
											"                \"stateKey\": fieldDataValue.CreateThingStateInfo.SensorKey //Temp\r",
											"            })\r",
											"        };\r",
											"\r",
											"        let optionsRemoveThingStateInfo = {\r",
											"            url: url + provisioningapis + urlThingRemoveThingStateInfo,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemoveThingStateInfo,\r",
											"            body: httpRequestRemoveThingStateInfo\r",
											"        };\r",
											"\r",
											"        // console.log('response RemoveThingStateInfo');\r",
											"        let response = await reqPromise(optionsRemoveThingStateInfo);\r",
											"        let jsonDataRemoveThingStateInfo = await response.json();\r",
											"        // console.log('jsonDataRemoveThing',jsonDataRemoveThingStateInfo)\r",
											"    \r",
											"        let operationStatusRemoveThingStateInfo = await jsonDataRemoveThingStateInfo.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemoveThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemoveThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemoveThingStateInfo is Success\r",
											"        pm.test('RemoveThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThingStateInfo+'\"', function () {\r",
											"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Description', resultDescriptionRemoveThingStateInfo);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"//---------------- LogDefaultValue --------------//\r",
											"//set variable to LogDefaultValue JSON.parse\r",
											"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
											"// console.log('LogDefaultValue',LogDefaultValue);\r",
											"//---------------- set globals Other --------------//\r",
											"\r",
											"var SearchLog = LogDefaultValue.SearchLog;\r",
											"// console.log('SearchLog',SearchLog);\r",
											"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
											"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
											"var kbn_version = SearchLog.header.kbn_version;\r",
											"var authorization = SearchLog.header.Authorization;\r",
											"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
											"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
											"var namespace = LogDefaultValue.Other.namespace;\r",
											"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
											"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
											"var header_x_ais_username = LogDefaultValue.Other.header_x_ais_username;\r",
											"var header_x_ais_accountkey = LogDefaultValue.Other.header_x_ais_accountkey;\r",
											"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
											"var methodDelete = LogDefaultValue.Other.methodDelete;\r",
											"\r",
											"// Detail\r",
											"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
											"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
											"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
											"\r",
											"// Summary\r",
											"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
											"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
											"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
											"\r",
											"// ProvisioningAPIs [Purchase]\r",
											"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
											"var cmdName = LogDefaultValue.Provisioning.DeleteCustomer.cmdNameDeleteCustomer;\r",
											"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
											"var containerId = LogDefaultValue.Provisioning.containerId;\r",
											"var requestObjectUrlStaging = LogDefaultValue.Provisioning.DeleteCustomer.requestObjectUrlDeleteCustomerMgStaging;\r",
											"\r",
											"// Check CDR (Summary Log) and EDR (Detail Log)\r",
											"SearchLogFindTid = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSearchLogFindTid = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = x_ais_OrderRef_DeleteCustomer + current_timestamp;\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestSearchLogFindTid = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"\r",
											"        let optionsSearchLogFindTid = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptSearchLogFindTid,\r",
											"            body: httpRequestSearchLogFindTid\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsSearchLogFindTid);\r",
											"        let jsonDataSearchLogFindTid = await response.json();\r",
											"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
											"\r",
											"        // //200\r",
											"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"\r",
											"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
											"        console.log('hits',hits)\r",
											"  \r",
											"        // find tid\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            // let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"        \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            if(applicationNameValue == applicationName){\r",
											"                let sessionId = hits[i]._source.cauldron.sessionId;\r",
											"                pm.environment.set(\"sessionId\", sessionId);\r",
											"                break;\r",
											"           }\r",
											"        }\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"CheckLog = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCheckLog = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = pm.environment.get(\"sessionId\");\r",
											"\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestCheckLog = {\r",
											"            mode: 'raw',\r",
											"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"        let optionsCheckLog = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptCheckLog,\r",
											"            body: httpRequestCheckLog\r",
											"        }; \r",
											"        let response = await reqPromise(optionsCheckLog);\r",
											"        let jsonDataCheckLog = await response.json();\r",
											"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
											"        \r",
											"        // //200\r",
											"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });     \r",
											"        \r",
											"        let hits = jsonDataCheckLog.hits.hits\r",
											"        console.log('hits',hits)\r",
											"  \r",
											"        // find logType\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            //  let logType = hits[i]._source.cauldron.logType\r",
											"            let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"           \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            \r",
											"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
											"            // console.log('resultDataLog',resultDataLog)\r",
											"\r",
											"            let tidControl = x_ais_OrderRef_DeleteCustomer + current_timestamp;\r",
											"            // console.log(tidControl);\r",
											"            if(applicationNameValue == applicationName){\r",
											"                 \r",
											"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ProvisioningAPIs\r",
											"                    pm.test(\"Check Summary Log : DeleteCustomer\" , function () {\r",
											"                        console.log(\"======== Check Summary Log ( Expected = Actual) [DeleteCustomer] ==================\");\r",
											"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
											"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
											"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeForbiddenMissingOrInvalidParameter);\r",
											"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionTheCustomerIdFieldIsNotObjectId);\r",
											"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
											"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
											"                        console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
											"\r",
											"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
											"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
											"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeForbiddenMissingOrInvalidParameter); \r",
											"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionTheCustomerIdFieldIsNotObjectId); \r",
											"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
											"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
											"                        pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
											"                    }); \r",
											"                }\r",
											"\r",
											"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ProvisioningAPIs\r",
											"\r",
											"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
											"                    // console.log('endPointNameValue ',endPointNameValue)\r",
											"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [DeleteCustomer]\", function () {\r",
											"                        console.log(\"======== Check Detail Log ( Expected = Actual) [DeleteCustomer] ==================\");\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
											"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
											"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
											"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
											"\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
											"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
											"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
											"\r",
											"                        if( endPointNameValue == endPointNameProvisioningAPIs){     //\"endPointName\":\"ProvisioningAPIs\"\r",
											"                            console.log(\"custom1.endPointName : \" + resultDataLog.custom1.endPointName + \" = \" + endPointNameProvisioningAPIs);\r",
											"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs); \r",
											"                        \r",
											"                            // check requestObject\r",
											"                            // \"requestObject\":\"{\\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Customer/DeleteCustomer\\\",\\\"method\\\":\\\"DELETE\\\",\\\"headers\\\":{\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"DeleteCustomer_202102172002683\\\",\\\"x-ais-orderdesc\\\":\\\"DeleteCustomer\\\",\\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAGJjc8t2ZfqZcNNvBKwuLmPMV/NLO2GPEwLJG3c2Ik+TEIlAkkY2KW0\\\"},\\\"body\\\":{\\\"customerId\\\":\\\"602d1a0bd441170001999d6fxx\\\"}}}\"\r",
											"                            \r",
											"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
											"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
											"                            let url = urlCheckLog + requestObjectUrlStaging; \r",
											"                            let x_ais_orderref = x_ais_OrderRef_DeleteCustomer + current_timestamp;\r",
											"                            let x_ais_orderdesc = x_ais_OrderDesc_DeleteCustomer;\r",
											"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken\");\r",
											"                            let x_ais_userName = x_ais_UserName_AisPartner;\r",
											"                            \r",
											"                            let customerId = pm.environment.get(\"GetResponse_CustomerId\") + pm.environment.get(\"Value_CreatePurchase_TST_F73_0_2_004_PurchaseInfo_CustomerId_Valid\");\r",
											"                            \r",
											"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
											"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodDelete);\r",
											"                            console.log(\"headers.x_ais_userName : \" + jsonParseRequestObject.headers[header_x_ais_username] + \" = \" + x_ais_userName);\r",
											"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
											"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
											"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
											"                                                                                                                                                             \r",
											"                            pm.expect(jsonParseRequestObject.url).to.eql(url);\r",
											"                            pm.expect(jsonParseRequestObject.method).to.eql(methodDelete);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_username]).to.eql(x_ais_userName);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
											"\r",
											"                            console.log(\"resquest.body.customerId : \" + jsonParseRequestObject.body.customerId + \" = \" + customerId);\r",
											"\r",
											"                            pm.expect(jsonParseRequestObject.body.customerId).to.eql(customerId);\r",
											"\r",
											"                            // check responseObject\r",
											"                            // \"responseObject\":\"{\\\"OperationStatus\\\":{\\\"Code\\\":\\\"40300\\\",\\\"Description\\\":\\\"The customerId field is not Object Id.\\\"}}\"\r",
											"\r",
											"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
											"                            // console.log('jsonParseResponseObject',jsonParseResponseObject);\r",
											"\r",
											"                            console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeForbiddenMissingOrInvalidParameter);\r",
											"                            console.log(\"response.OperationStatus.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionTheCustomerIdFieldIsNotObjectId);\r",
											"\r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeForbiddenMissingOrInvalidParameter);  \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionTheCustomerIdFieldIsNotObjectId);  \r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"setTimeout(function(){SearchLogFindTid();}, 9000); \r",
											"setTimeout(function(){CheckLog();}, 20000); \r",
											"\r",
											"setTimeout(function(){RemoveThingStateInfo();}, 30000); \r",
											"setTimeout(function(){RemoveThing();}, 40000); \r",
											"setTimeout(function(){RemoveAccount();}, 50000); \r",
											"setTimeout(function(){RemovePartner();}, 60000); \r",
											"\r",
											"setTimeout(function(){\r",
											"pm.environment.unset(\"current_timestamp\");\r",
											"pm.environment.unset(\"AccessToken\");\r",
											"pm.environment.unset(\"random_number\");\r",
											"pm.environment.unset(\"PartnerName\");\r",
											"pm.environment.unset(\"MerchantContact\");\r",
											"pm.environment.unset(\"CPID\");\r",
											"pm.environment.unset(\"GetResponse_PartnerId\");\r",
											"pm.environment.unset(\"AccountName\");\r",
											"pm.environment.unset(\"GetResponse_AccountName\");\r",
											"pm.environment.unset(\"GetResponse_AccountId\");\r",
											"pm.environment.unset(\"random_IM\");\r",
											"pm.environment.unset(\"random_ICCID\");\r",
											"pm.environment.unset(\"ThingName\");\r",
											"pm.environment.unset(\"GetResponse_ThingID\");\r",
											"pm.environment.unset(\"random_Sensor\");\r",
											"pm.environment.unset(\"sessionId\");\r",
											"pm.environment.unset(\"GetResponse_CustomerId\");\r",
											"pm.environment.unset(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseKey\");\r",
											"pm.environment.unset(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseValue\");\r",
											"pm.environment.unset(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseName\");\r",
											"pm.environment.unset(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseType\");\r",
											"pm.environment.unset(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseState\");\r",
											"pm.environment.unset(\"Value_DeleteCustomer_Create_ChargingStatus\");\r",
											"pm.environment.unset(\"Value_CreatePurchase_TST_F73_0_2_004_PurchaseInfo_CustomerId_Valid\");\r",
											"}, 65000);\r",
											"setTimeout(function(){}, 70000); "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var Username = pm.environment.get(\"Username\");\r",
											"var Password = pm.environment.get(\"Password\");\r",
											"\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"pm.environment.set(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseKey\",fieldDataValue.Provisioning.DeleteCustomer.Value_DeleteCustomer_Create_PurchaseInfo_PurchaseKey)\r",
											"pm.environment.set(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseValue\",fieldDataValue.Provisioning.DeleteCustomer.Value_DeleteCustomer_Create_PurchaseInfo_PurchaseValue)\r",
											"pm.environment.set(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseName\",fieldDataValue.Provisioning.DeleteCustomer.Value_DeleteCustomer_Create_PurchaseInfo_PurchaseName)\r",
											"pm.environment.set(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseType\",fieldDataValue.Provisioning.DeleteCustomer.Value_DeleteCustomer_Create_PurchaseInfo_PurchaseType)\r",
											"pm.environment.set(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseState\",fieldDataValue.Provisioning.DeleteCustomer.Value_DeleteCustomer_Create_PurchaseInfo_PurchaseState)\r",
											"pm.environment.set(\"Value_DeleteCustomer_Create_ChargingStatus\",fieldDataValue.Provisioning.DeleteCustomer.Value_DeleteCustomer_Create_ChargingStatus)\r",
											"\r",
											"pm.environment.set(\"Value_CreatePurchase_TST_F73_0_2_004_PurchaseInfo_CustomerId_Valid\",fieldDataValue.Provisioning.DeleteCustomer.Value_CreatePurchase_TST_F73_0_2_004_PurchaseInfo_CustomerId_Valid)\r",
											"\r",
											"//format YYYYMMDDHHMMSSS\r",
											"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
											"// console.log('currentTmestamp',currentTmestamp);\r",
											"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- statusCodeList --------------//\r",
											"//set variable to statusCodeList JSON.parse\r",
											"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
											"//set global variable to statusCode 200\r",
											"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
											"//set global variable to statusCode 201\r",
											"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
											"//set global variable to statusCode 403\r",
											"pm.globals.set(\"statusCodeForbidden\", statusCodeList.statusCodeForbidden);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- resultCodeList --------------//\r",
											"//set variable to resultCodeList JSON.parse\r",
											"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
											"//set global variable to resultCode \"20000\"\r",
											"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
											"//set global variable to resultCode \"20100\"\r",
											"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
											"//set global variable to resultCode \"40300\"\r",
											"pm.globals.set(\"resultCodeForbiddenMissingOrInvalidParameter\", resultCodeList.resultCodeForbiddenMissingOrInvalidParameter);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- resultDescriptionSuccessList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
											"//set global variable to resultDescription \"SignInProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
											"//set global variable to resultDescription \"ValidateTokenProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionValidateToken\", resultDescriptionSuccessList.resultDescriptionValidateToken);\r",
											"//set global variable to resultDescription \"CreatePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
											"//set global variable to resultDescription \"CreateAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
											"//set global variable to resultDescription \"CreateThing is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreateThing\", resultDescriptionSuccessList.resultDescriptionCreateThing);\r",
											"//set global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreateThingStateInfo\", resultDescriptionSuccessList.resultDescriptionCreateThingStateInfo);\r",
											"//set global variable to resultDescription \"RemovePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
											"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
											"//set global variable to resultDescription \"RemoveThing is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveThing\", resultDescriptionSuccessList.resultDescriptionRemoveThing);\r",
											"//set global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveThingStateInfo\", resultDescriptionSuccessList.resultDescriptionRemoveThingStateInfo);\r",
											"//set global variable to resultDescription \"CreatePurchase is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreatePurchase\", resultDescriptionSuccessList.resultDescriptionCreatePurchase);\r",
											"//set global variable to resultDescription \"removeCustomer is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveCustomer\", resultDescriptionSuccessList.resultDescriptionRemoveCustomer);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- resultDescriptionErrorList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
											"//set global variable to resultDescription \"The customerId field is not Object Id.\"\r",
											"pm.globals.set(\"resultDescriptionTheCustomerIdFieldIsNotObjectId\", resultDescriptionErrorList.resultDescriptionTheCustomerIdFieldIsNotObjectId);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- HeaderList --------------//\r",
											"//set variable to HeaderList JSON.parse\r",
											"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
											"//---------------- set globals Other --------------//\r",
											"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
											"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
											"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
											"//set global variable to kbn-versio \"7.5.1\"\r",
											"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Signin_ --------------//\r",
											"//set global variable to x_ais_OrderRef \"Signin_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
											"//set global variable to x_ais_OrderRef \"ValidateToken\"\r",
											"pm.globals.set(\"x_ais_OrderRef_ValidateToken\", HeaderList.Signin.x_ais_OrderRef_ValidateToken);\r",
											"//set global variable to x_ais_OrderDesc \"ValidateToken\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_ValidateToken\", HeaderList.Signin.x_ais_OrderDesc_ValidateToken);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals CreatePartner --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
											"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
											"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
											"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals CreateAccount --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
											"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
											"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
											"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Thing --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreateThing_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreateThing\", HeaderList.Thing.x_ais_OrderRef_CreateThing);\r",
											"//set global variable to x_ais_OrderDesc \"CreateThing\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreateThing\", HeaderList.Thing.x_ais_OrderDesc_CreateThing);\r",
											"//set global variable to x_ais_OrderRef \"RemoveThing_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemoveThing\", HeaderList.Thing.x_ais_OrderRef_RemoveThing);\r",
											"//set global variable to x_ais_OrderDesc \"RemoveThing\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemoveThing\", HeaderList.Thing.x_ais_OrderDesc_RemoveThing);\r",
											"//set global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_CreateThingStateInfo);\r",
											"//set global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_CreateThingStateInfo);\r",
											"//set global variable to x_ais_OrderRef \"RemoveThingStateInfo\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_RemoveThingStateInfo);\r",
											"//set global variable to x_ais_OrderDesc \"RemoveThingStateInfo_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_RemoveThingStateInfo);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Purchase --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreatePurchase_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreatePurchase\", HeaderList.Purchase.x_ais_OrderRef_CreatePurchase);\r",
											"//set global variable to x_ais_OrderDesc \"CreatePurchase\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreatePurchase\", HeaderList.Purchase.x_ais_OrderDesc_CreatePurchase);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals DeleteCustomer --------------//\r",
											"//set global variable to x_ais_OrderRef \"DeleteCustomer_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_DeleteCustomer\", HeaderList.Customer.x_ais_OrderRef_DeleteCustomer);\r",
											"//set global variable to x_ais_OrderRef \"DeleteCustomerfail_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_DeleteCustomer_fail\", HeaderList.Customer.x_ais_OrderRef_DeleteCustomer_fail);\r",
											"//set global variable to x_ais_OrderDesc \"DeleteCustomer\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_DeleteCustomer\", HeaderList.Customer.x_ais_OrderDesc_DeleteCustomer);\r",
											"//------------------------------------------------------------//\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultCode \"20100\"\r",
											"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
											"//get global variable to resultDescription \"SignInProcess is Success\"\r",
											"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
											"//get global variable to resultDescription \"ValidateTokenProcess is Success\"\r",
											"var resultDescriptionValidateToken = pm.globals.get(\"resultDescriptionValidateToken\");\r",
											"//get global variable to resultDescription \"CreatePartner is Success\"\r",
											"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
											"//get global variable to resultDescription \"CreateAccount is Success\"\r",
											"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
											"//get global variable to resultDescription \"CreateThing is Success\"\r",
											"var resultDescriptionCreateThing = pm.globals.get(\"resultDescriptionCreateThing\");\r",
											"//get global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
											"var resultDescriptionCreateThingStateInfo = pm.globals.get(\"resultDescriptionCreateThingStateInfo\");\r",
											"//get global variable to resultDescription \"CreatePurchase is Success\"\r",
											"var resultDescriptionCreatePurchase = pm.globals.get(\"resultDescriptionCreatePurchase\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- urlRouteList --------------//\r",
											"//set variable to urlRouteList JSON.parse\r",
											"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
											"//---------------- set url Create --------------//\r",
											"//set global variable to url \"/api/v1/auth/signin\"\r",
											"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
											"//set global variable to url \"/api/v1/auth/ValidateToken\"\r",
											"pm.globals.set(\"urlValidateToken\", urlRouteList.Signin.urlValidateToken);\r",
											"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
											"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
											"//set global variable to url \"/api/v1/Thing/CreateThing\"\r",
											"pm.globals.set(\"urlThingCreateThing\", urlRouteList.Thing.urlThingCreateThing);\r",
											"//set global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
											"pm.globals.set(\"urlThingCreateThingStateInfo\", urlRouteList.Thing.urlThingCreateThingStateInfo);\r",
											"//set global variable to url \"/api/v1/Purchase/CreatePurchase\"\r",
											"pm.globals.set(\"urlCreatePurchase\", urlRouteList.Purchase.urlCreatePurchase);\r",
											"//---------------- get url Create --------------//\r",
											"//get global variable to url \"/api/v1/auth/signin\"\r",
											"var urlSignin = pm.globals.get(\"urlSignin\");\r",
											"//get global variable to url \"/api/v1/auth/ValidateToken\"\r",
											"var urlValidateToken = pm.globals.get(\"urlValidateToken\");\r",
											"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
											"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
											"//get global variable to url \"/api/v1/Thing/CreateThing\"\r",
											"var urlThingCreateThing = pm.globals.get(\"urlThingCreateThing\");\r",
											"//get global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
											"var urlThingCreateThingStateInfo = pm.globals.get(\"urlThingCreateThingStateInfo\");\r",
											"//get global variable to url \"/api/v1/Purchase/CreatePurchase\"\r",
											"var urlCreatePurchase = pm.globals.get(\"urlCreatePurchase\");\r",
											"//---------------- set url Remove --------------//\r",
											"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
											"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
											"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
											"//set global variable to url \"/api/v1/Thing/RemoveThing\"\r",
											"pm.globals.set(\"urlThingRemoveThing\", urlRouteList.Thing.urlThingRemoveThing);\r",
											"//set global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
											"pm.globals.set(\"urlThingRemoveThingStateInfo\", urlRouteList.Thing.urlThingRemoveThingStateInfo);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"Signin_\"\r",
											"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
											"//get global variable to x_ais_OrderRef \"ValidateToken_\"\r",
											"var x_ais_OrderRef_ValidateToken = pm.globals.get(\"x_ais_OrderRef_ValidateToken\");\r",
											"//get global variable to x_ais_OrderDesc \"ValidateToken\"\r",
											"var x_ais_OrderDesc_ValidateToken = pm.globals.get(\"x_ais_OrderDesc_ValidateToken\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Thing --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreateThing_\"\r",
											"var x_ais_OrderRef_CreateThing = pm.globals.get(\"x_ais_OrderRef_CreateThing\");\r",
											"//get global variable to x_ais_OrderDesc \"CreateThing\"\r",
											"var x_ais_OrderDesc_CreateThing = pm.globals.get(\"x_ais_OrderDesc_CreateThing\");\r",
											"//get global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
											"var x_ais_OrderRef_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderRef_CreateThingStateInfo\");\r",
											"//get global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
											"var x_ais_OrderDesc_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_CreateThingStateInfo\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Purchase --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreatePurchase_\"\r",
											"var x_ais_OrderRef_CreatePurchase = pm.globals.get(\"x_ais_OrderRef_CreatePurchase\");\r",
											"//get global variable to x_ais_OrderDesc \"CreatePurchase\"\r",
											"var x_ais_OrderDesc_CreatePurchase = pm.globals.get(\"x_ais_OrderDesc_CreatePurchase\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"// Signin get token\r",
											" Signin = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username,\r",
											"                password:Password\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"\r",
											"        //set random_number\r",
											"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
											"        //set PartnerName\r",
											"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
											"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
											"        //set MerchantContact\r",
											"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
											"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
											"        // set CPID\r",
											"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
											"        pm.environment.set(\"CPID\", CPIDValue)\r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// ValidateToken\r",
											" ValidateToken = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptValidateToken = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_ValidateToken + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_ValidateToken,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestValidateToken = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                \"AccessToken\": pm.environment.get(\"AccessToken\")\r",
											"            })\r",
											"        };  \r",
											"        \r",
											"        let optionsValidateToken = {\r",
											"            url: url + provisioningapis + urlValidateToken,\r",
											"            method: 'POST',\r",
											"            header: headersOptValidateToken,\r",
											"            body: httpRequestValidateToken\r",
											"        };\r",
											"        // console.log('request ValidateToken');\r",
											"        let response = await reqPromise(optionsValidateToken);\r",
											"        let jsonDataValidateToken = await response.json();\r",
											"        let operationStatusValidateToken = await jsonDataValidateToken.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"ValidateToken : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('ValidateToken : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusValidateToken).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // ValidateTokenProcess is Success\r",
											"        pm.test('ValidateToken : OperationStatus Description is '+'\"'+ resultDescriptionValidateToken+'\"', function () {\r",
											"            pm.expect(operationStatusValidateToken).to.have.property('Description', resultDescriptionValidateToken);\r",
											"        });\r",
											" \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreatePartner\r",
											" CreatePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreatePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreatePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
											"                \"PartnerType\": [\r",
											"                    \"Supplier\",\r",
											"                    \"Customer\"\r",
											"                ],\r",
											"                \"PartnerDetail\": {\r",
											"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
											"                    \"CPID\": pm.environment.get(\"CPID\")\r",
											"                },\r",
											"                \"Property\": {\r",
											"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
											"                }\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsCreatePartner = {\r",
											"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreatePartner,\r",
											"            body: httpRequestCreatePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsCreatePartner);\r",
											"        let jsonDataCreatePartner = await response.json();\r",
											"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
											"    \r",
											"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreatePartner is Success\r",
											"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
											"        });\r",
											"\r",
											"        //GetResponse_PartnerId\r",
											"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
											"\r",
											"        //GetResponse_CustomerId\r",
											"        pm.environment.set(\"GetResponse_CustomerId\", jsonDataCreatePartner.PartnerInfo.CustomerId);\r",
											"        \r",
											"        //Accountname\r",
											"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
											"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreateAccount\r",
											" CreateAccount = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreateAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreateAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
											"                })\r",
											"        };\r",
											"        \r",
											"        let optionsCreateAccount = {\r",
											"            url: url + provisioningapis + urlAccountCreateAccount,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreateAccount,\r",
											"            body: httpRequestCreateAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request CreateAccount');\r",
											"        let response = await reqPromise(optionsCreateAccount);\r",
											"        let jsonDataCreateAccount = await response.json();\r",
											"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
											"    \r",
											"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreateAccount : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreateAccount is Success\r",
											"        pm.test('CreateAccount : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
											"        });\r",
											"        // GetResponse_AccountName\r",
											"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
											"        // GetResponse_AccountId\r",
											"        pm.environment.set(\"GetResponse_AccountId\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
											"        // random_IM\r",
											"        pm.environment.set(\"random_IM\", _.random(10000000, 99999999)+\" \"+_.random(1000000, 9999999))\r",
											"        // random_ICCID\r",
											"        pm.environment.set(\"random_ICCID\", _.random(1000000, 9999999)+\" \"+_.random(100000, 999999))\r",
											"        // random_number\r",
											"        pm.environment.set(\"random_number\",pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
											"        //ThingName\r",
											"        let thingNameValue = fieldDataValue.Provisioning.Thing.ThingNameValue; // \"QAtestthing_T01\"\r",
											"        pm.environment.set(\"ThingName\", thingNameValue + pm.environment.get(\"random_number\"))\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreateThing\r",
											" CreateThing = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreateThing = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreateThing+ current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateThing,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreateThing = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"ThingName\": pm.environment.get(\"ThingName\"),\r",
											"                \"IMEI\": pm.environment.get(\"random_IM\"),\r",
											"                \"IMSI\": pm.environment.get(\"random_IM\"),\r",
											"                \"ICCID\": pm.environment.get(\"random_ICCID\"),\r",
											"                \"RouteUrl\": fieldDataValue.Provisioning.Thing.CreateThing.RouteUrlValue , //[\"http://10.12.3.4:2019/api/information/AddInformation\"]\r",
											"                \"RouteInfo\": {\r",
											"                    \"MIMO_ID\": fieldDataValue.Provisioning.Thing.CreateThing.RouteInfoMIMOIDValue , //\"606edada\"\r",
											"                    \"MIMO_SerialNo\": fieldDataValue.Provisioning.Thing.CreateThing.RouteInfoMIMOSerialNoValue //5466758878\r",
											"                },\r",
											"                \"RouteFlag\": {\r",
											"                    \"ThingName\": fieldDataValue.Provisioning.Thing.CreateThing.RouteFlagThingNameValue , //true\r",
											"                    \"ThingToken\": fieldDataValue.Provisioning.Thing.CreateThing.RouteFlagThingTokenValue, //true\r",
											"                    \"IMEI\": fieldDataValue.Provisioning.Thing.CreateThing.RouteFlagIMEIValue, //true\r",
											"                    \"ICCID\": fieldDataValue.Provisioning.Thing.CreateThing.RouteFlagICCIDValue, //true\r",
											"                    \"RouteInfo\": fieldDataValue.Provisioning.Thing.CreateThing.RouteFlagRouteInfoValue //true\r",
											"                }\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsCreateThing = {\r",
											"            url: url + provisioningapis + urlThingCreateThing,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreateThing,\r",
											"            body: httpRequestCreateThing\r",
											"        };\r",
											"\r",
											"        // console.log('request CreateThing');\r",
											"        let response = await reqPromise(optionsCreateThing);\r",
											"        let jsonDataCreateThing = await response.json();\r",
											"        // console.log('jsonDataCreateThing',jsonDataCreateThing)\r",
											"    \r",
											"        let operationStatusCreateThing = await jsonDataCreateThing.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreateThing : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreateThing : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreateThing).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreateThing is Success\r",
											"        pm.test('CreateThing : OperationStatus Description is '+'\"'+ resultDescriptionCreateThing+'\"', function () {\r",
											"            pm.expect(operationStatusCreateThing).to.have.property('Description', resultDescriptionCreateThing);\r",
											"        });\r",
											"\r",
											"        pm.environment.set(\"GetResponse_ThingID\",jsonDataCreateThing.ThingInfo.ThingId)\r",
											"\r",
											"        //Get Random Sensor \r",
											"        pm.environment.set(\"random_Sensor\", _.random(100, 999))\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreateThingStateInfo\r",
											" CreateThingStateInfo = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreateThingStateInfo = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreateThingStateInfo+ current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateThingStateInfo,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        // {\"Temp\" : pm.environment.get(\"random_Sensor\")}\r",
											"        let sensorValue = {};\r",
											"        sensorValue[fieldDataValue.CreateThingStateInfo.SensorKey] = pm.environment.get(\"random_Sensor\");\r",
											"        // console.log('sensorValue',sensorValue);\r",
											"        \r",
											"        let httpRequestCreateThingStateInfo = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"ThingId\": [\r",
											"                    pm.environment.get(\"GetResponse_ThingID\")\r",
											"                ],\r",
											"                \"Type\": fieldDataValue.CreateThingStateInfo.Type_Report,\r",
											"                \"Sensor\": sensorValue\r",
											"            })\r",
											"        };\r",
											"    \r",
											"        let optionsCreateThingStateInfo = {\r",
											"            url: url + provisioningapis + urlThingCreateThingStateInfo,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreateThingStateInfo,\r",
											"            body: httpRequestCreateThingStateInfo\r",
											"        };\r",
											"\r",
											"        // console.log('request CreateThingStateInfo');\r",
											"        let response = await reqPromise(optionsCreateThingStateInfo);\r",
											"        let jsonDataCreateThingStateInfo = await response.json();\r",
											"        // console.log('jsonDataCreateThingStateInfo',jsonDataCreateThingStateInfo)\r",
											"    \r",
											"        let operationStatusCreateThingStateInfo = await jsonDataCreateThingStateInfo.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"CreateThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('CreateThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //CreateThingStateInfo is Success\r",
											"        pm.test('CreateThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionCreateThingStateInfo+'\"', function () {\r",
											"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Description', resultDescriptionCreateThingStateInfo);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreatePurchase\r",
											"CreatePurchase = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreatePurchase = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreatePurchase+ current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePurchase,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'Accept':Accept\r",
											"        };\r",
											"                \r",
											"        let httpRequestCreatePurchase = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"customerId\": pm.environment.get(\"GetResponse_CustomerId\"),\r",
											"                \"PurchaseInfo\": {\r",
											"                    \"PurchaseKey\": pm.environment.get(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseKey\"),\r",
											"                    \"PurchaseValue\": pm.environment.get(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseValue\"),\r",
											"                    \"PurchaseName\": pm.environment.get(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseName\"),\r",
											"                    \"PurchaseType\": pm.environment.get(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseType\"), //Volume\r",
											"                    \"PurchaseState\": pm.environment.get(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseState\") //Active\r",
											"                },\r",
											"                \"ChargingStatus\": pm.environment.get(\"Value_DeleteCustomer_Create_ChargingStatus\") //Enable\r",
											"            })\r",
											"        };\r",
											"    \r",
											"        let optionsCreatePurchase = {\r",
											"            url: url + provisioningapis + urlCreatePurchase,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreatePurchase,\r",
											"            body: httpRequestCreatePurchase\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePurchase');\r",
											"        let response = await reqPromise(optionsCreatePurchase);\r",
											"        let jsonDataCreatePurchase = await response.json();\r",
											"        // console.log('jsonDataCreatePurchase',jsonDataCreatePurchase)\r",
											"    \r",
											"        let operationStatusCreatePurchase = await jsonDataCreatePurchase.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"CreatePurchase : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('CreatePurchase : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreatePurchase).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //CreatePurchase is Success\r",
											"        pm.test('CreatePurchase : OperationStatus Description is '+'\"'+ resultDescriptionCreatePurchase+'\"', function () {\r",
											"            pm.expect(operationStatusCreatePurchase).to.have.property('Description', resultDescriptionCreatePurchase);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"Signin();\r",
											"setTimeout(async function(){await ValidateToken();}, 1000);\r",
											"setTimeout(async function(){await CreatePartner();}, 2000); \r",
											"setTimeout(async function(){await CreateAccount();}, 3000); \r",
											"setTimeout(async function(){await CreateThing();}, 4000); \r",
											"setTimeout(async function(){await CreateThingStateInfo();}, 6000); \r",
											"setTimeout(async function(){await CreatePurchase();}, 7000); \r",
											"setTimeout(async function(){}, 8000);  "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-ais-UserName",
										"type": "text",
										"value": "{{x_ais_UserName_AisPartner}}"
									},
									{
										"key": "x-ais-OrderRef",
										"value": "{{x_ais_OrderRef_DeleteCustomer}}{{current_timestamp}}"
									},
									{
										"key": "x-ais-OrderDesc",
										"type": "text",
										"value": "{{x_ais_OrderDesc_DeleteCustomer}}"
									},
									{
										"key": "x-ais-AccessToken",
										"value": "{{Bearer}} {{AccessToken}}"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"customerId\": \"{{GetResponse_CustomerId}}{{Value_CreatePurchase_TST_F73_0_2_004_PurchaseInfo_CustomerId_Valid}}\"\r\n}"
								},
								"url": {
									"raw": "{{url}}{{provisioningapis}}/api/v1/Customer/DeleteCustomer",
									"host": [
										"{{url}}{{provisioningapis}}"
									],
									"path": [
										"api",
										"v1",
										"Customer",
										"DeleteCustomer"
									]
								},
								"description": "Type:Desire"
							},
							"response": []
						},
						{
							"name": "DeleteCustomer_TST_F73_1_1_005_Error_SupplierAdmin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Thing --------------//\r",
											"//get global variable to xAisOrderRef \"RemoveThing_\"\r",
											"var x_ais_OrderRef_RemoveThing = pm.globals.get(\"x_ais_OrderRef_RemoveThing\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveThing\"\r",
											"var x_ais_OrderDesc_RemoveThing = pm.globals.get(\"x_ais_OrderDesc_RemoveThing\");\r",
											"//get global variable to x_ais_OrderRef \"RemoveThingStateInfo_\" \r",
											"var x_ais_OrderDesc_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_RemoveThingStateInfo\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveThingStateInfo\"\r",
											"var x_ais_OrderRef_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderRef_RemoveThingStateInfo\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Purchase --------------//\r",
											"//get global variable to x_ais_OrderRef \"DeleteCustomer_\"\r",
											"var x_ais_OrderRef_DeleteCustomer = pm.globals.get(\"x_ais_OrderRef_DeleteCustomer\");\r",
											"//get global variable to x_ais_OrderDesc \"DeleteCustomer\"\r",
											"var x_ais_OrderDesc_DeleteCustomer = pm.globals.get(\"x_ais_OrderDesc_DeleteCustomer\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get url Remove --------------//\r",
											"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
											"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
											"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
											"//get global variable to url \"/api/v1/Thing/RemoveThing\"\r",
											"var urlThingRemoveThing = pm.globals.get(\"urlThingRemoveThing\");\r",
											"//get global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
											"var urlThingRemoveThingStateInfo = pm.globals.get(\"urlThingRemoveThingStateInfo\");\r",
											"//------------------------------------------------------------//\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultCode \"20100\"\r",
											"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
											"//get global variable to resultDescription \"RemovePartner is Success\"\r",
											"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
											"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
											"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
											"//get global variable to resultDescription \"RemoveThing is Success\"\r",
											"var resultDescriptionRemoveThing = pm.globals.get(\"resultDescriptionRemoveThing\");\r",
											"//get global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
											"var resultDescriptionRemoveThingStateInfo = pm.globals.get(\"resultDescriptionRemoveThingStateInfo\");\r",
											"//------------------------------------------------------------//\r",
											"//get global variable to statusCode 403\r",
											"var statusCodeForbidden = pm.globals.get(\"statusCodeForbidden\");\r",
											"//get global variable to resultCode \"40308\"\r",
											"var resultCodeRoleInvalid = pm.globals.get(\"resultCodeRoleInvalid\");\r",
											"//get global variable to resultDescription \"Role Invalid\"\r",
											"var resultDescriptionRoleInvalid = pm.globals.get(\"resultDescriptionRoleInvalid\");\r",
											"//------------------------------------------------------------//\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"DeleteCustomer : Status code is \" + statusCodeForbidden, function () {\r",
											"    pm.response.to.have.status(statusCodeForbidden);\r",
											"});\r",
											"\r",
											"pm.test('DeleteCustomer : operationStatus code is '+'\"'+ resultCodeRoleInvalid +'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeRoleInvalid);\r",
											"});\r",
											"\r",
											"pm.test('DeleteCustomer : operationStatus Description is '+'\"'+ resultDescriptionRoleInvalid+'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionRoleInvalid);\r",
											"});\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"// RemovePartner\r",
											" RemovePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemovePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemovePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsRemovePartner = {\r",
											"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemovePartner,\r",
											"            body: httpRequestRemovePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request RemovePartner');\r",
											"        let response = await reqPromise(optionsRemovePartner);\r",
											"        let jsonDataRemovePartner = await response.json();\r",
											"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
											"    \r",
											"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemovePartner is Success\r",
											"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// RemoveAccount\r",
											" RemoveAccount = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemoveAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemoveAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsRemoveAccount = {\r",
											"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemoveAccount,\r",
											"            body: httpRequestRemoveAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request RemoveAccount');\r",
											"        let response = await reqPromise(optionsRemoveAccount);\r",
											"        let jsonDataRemoveAccount = await response.json();\r",
											"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
											"    \r",
											"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemoveAccount is Success\r",
											"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
											"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// RemoveThing\r",
											" RemoveThing = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemoveThing = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThing + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThing,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemoveThing = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\")\r",
											"            })\r",
											"        };\r",
											"\r",
											"        let optionsRemoveThing = {\r",
											"            url: url + provisioningapis + urlThingRemoveThing,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemoveThing,\r",
											"            body: httpRequestRemoveThing\r",
											"        };\r",
											"\r",
											"        // console.log('request RemoveThing');\r",
											"        let response = await reqPromise(optionsRemoveThing);\r",
											"        let jsonDataRemoveThing = await response.json();\r",
											"        // console.log('jsonDataRemoveThing',jsonDataRemoveThing)\r",
											"    \r",
											"        let operationStatusRemoveThing = await jsonDataRemoveThing.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemoveThing : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemoveThing : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemoveThing).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemoveThing is Success\r",
											"        pm.test('RemoveThing : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThing+'\"', function () {\r",
											"            pm.expect(operationStatusRemoveThing).to.have.property('Description', resultDescriptionRemoveThing);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// RemoveThingStateInfo\r",
											" RemoveThingStateInfo = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemoveThingStateInfo = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThingStateInfo + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThingStateInfo,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
											"            'Accept':Accept\r",
											"            \r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemoveThingStateInfo = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\"),\r",
											"                \"stateType\": fieldDataValue.CreateThingStateInfo.Type_Report, //Report\r",
											"                \"stateKey\": fieldDataValue.CreateThingStateInfo.SensorKey //Temp\r",
											"            })\r",
											"        };\r",
											"\r",
											"        let optionsRemoveThingStateInfo = {\r",
											"            url: url + provisioningapis + urlThingRemoveThingStateInfo,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemoveThingStateInfo,\r",
											"            body: httpRequestRemoveThingStateInfo\r",
											"        };\r",
											"\r",
											"        // console.log('response RemoveThingStateInfo');\r",
											"        let response = await reqPromise(optionsRemoveThingStateInfo);\r",
											"        let jsonDataRemoveThingStateInfo = await response.json();\r",
											"        // console.log('jsonDataRemoveThing',jsonDataRemoveThingStateInfo)\r",
											"    \r",
											"        let operationStatusRemoveThingStateInfo = await jsonDataRemoveThingStateInfo.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemoveThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemoveThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemoveThingStateInfo is Success\r",
											"        pm.test('RemoveThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThingStateInfo+'\"', function () {\r",
											"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Description', resultDescriptionRemoveThingStateInfo);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"//---------------- LogDefaultValue --------------//\r",
											"//set variable to LogDefaultValue JSON.parse\r",
											"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
											"// console.log('LogDefaultValue',LogDefaultValue);\r",
											"//---------------- set globals Other --------------//\r",
											"\r",
											"var SearchLog = LogDefaultValue.SearchLog;\r",
											"// console.log('SearchLog',SearchLog);\r",
											"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
											"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
											"var kbn_version = SearchLog.header.kbn_version;\r",
											"var authorization = SearchLog.header.Authorization;\r",
											"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
											"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
											"var namespace = LogDefaultValue.Other.namespace;\r",
											"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
											"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
											"var header_x_ais_username = LogDefaultValue.Other.header_x_ais_username;\r",
											"var header_x_ais_accountkey = LogDefaultValue.Other.header_x_ais_accountkey;\r",
											"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
											"var methodDelete = LogDefaultValue.Other.methodDelete;\r",
											"\r",
											"// Detail\r",
											"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
											"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
											"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
											"\r",
											"// Summary\r",
											"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
											"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
											"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
											"\r",
											"// ProvisioningAPIs [Purchase]\r",
											"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
											"var cmdName = LogDefaultValue.Provisioning.DeleteCustomer.cmdNameDeleteCustomer;\r",
											"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
											"var containerId = LogDefaultValue.Provisioning.containerId;\r",
											"var requestObjectUrlStaging = LogDefaultValue.Provisioning.DeleteCustomer.requestObjectUrlDeleteCustomerMgStaging;\r",
											"\r",
											"// Check CDR (Summary Log) and EDR (Detail Log)\r",
											"SearchLogFindTid = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSearchLogFindTid = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = x_ais_OrderRef_DeleteCustomer + current_timestamp;\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestSearchLogFindTid = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"\r",
											"        let optionsSearchLogFindTid = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptSearchLogFindTid,\r",
											"            body: httpRequestSearchLogFindTid\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsSearchLogFindTid);\r",
											"        let jsonDataSearchLogFindTid = await response.json();\r",
											"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
											"\r",
											"        // //200\r",
											"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"\r",
											"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
											"        console.log('hits',hits)\r",
											"  \r",
											"        // find tid\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            // let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"        \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            if(applicationNameValue == applicationName){\r",
											"                let sessionId = hits[i]._source.cauldron.sessionId;\r",
											"                pm.environment.set(\"sessionId\", sessionId);\r",
											"                break;\r",
											"           }\r",
											"        }\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"CheckLog = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCheckLog = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = pm.environment.get(\"sessionId\");\r",
											"\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestCheckLog = {\r",
											"            mode: 'raw',\r",
											"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"        let optionsCheckLog = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptCheckLog,\r",
											"            body: httpRequestCheckLog\r",
											"        }; \r",
											"        let response = await reqPromise(optionsCheckLog);\r",
											"        let jsonDataCheckLog = await response.json();\r",
											"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
											"        \r",
											"        // //200\r",
											"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });     \r",
											"        \r",
											"        let hits = jsonDataCheckLog.hits.hits\r",
											"        console.log('hits',hits)\r",
											"  \r",
											"        // find logType\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            //  let logType = hits[i]._source.cauldron.logType\r",
											"            let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"           \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            \r",
											"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
											"            // console.log('resultDataLog',resultDataLog)\r",
											"\r",
											"            let tidControl = x_ais_OrderRef_DeleteCustomer + current_timestamp;\r",
											"            // console.log(tidControl);\r",
											"            if(applicationNameValue == applicationName){\r",
											"                 \r",
											"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ProvisioningAPIs\r",
											"                    pm.test(\"Check Summary Log : DeleteCustomer\" , function () {\r",
											"                        console.log(\"======== Check Summary Log ( Expected = Actual) [DeleteCustomer] ==================\");\r",
											"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
											"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
											"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeRoleInvalid);\r",
											"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionRoleInvalid);\r",
											"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
											"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
											"                        console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
											"\r",
											"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
											"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
											"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeRoleInvalid); \r",
											"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionRoleInvalid); \r",
											"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
											"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
											"                        pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
											"                    }); \r",
											"                }\r",
											"\r",
											"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ProvisioningAPIs\r",
											"\r",
											"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
											"                    // console.log('endPointNameValue ',endPointNameValue)\r",
											"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [DeleteCustomer]\", function () {\r",
											"                        console.log(\"======== Check Detail Log ( Expected = Actual) [DeleteCustomer] ==================\");\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
											"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
											"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
											"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
											"\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
											"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
											"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
											"\r",
											"                        if( endPointNameValue == endPointNameProvisioningAPIs){     //\"endPointName\":\"ProvisioningAPIs\"\r",
											"                            console.log(\"custom1.endPointName : \" + resultDataLog.custom1.endPointName + \" = \" + endPointNameProvisioningAPIs);\r",
											"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs); \r",
											"                        \r",
											"                            // check requestObject\r",
											"                            // \"requestObject\":\"{\\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Customer/DeleteCustomer\\\",\\\"method\\\":\\\"DELETE\\\",\\\"headers\\\":{\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"DeleteCustomer_202102172002683\\\",\\\"x-ais-orderdesc\\\":\\\"DeleteCustomer\\\",\\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAGJjc8t2ZfqZcNNvBKwuLmPMV/NLO2GPEwLJG3c2Ik+TEIlAkkY2KW0\\\"},\\\"body\\\":{\\\"customerId\\\":\\\"602d1a0bd441170001999d6fxx\\\"}}}\"\r",
											"                            \r",
											"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
											"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
											"                            let url = urlCheckLog + requestObjectUrlStaging; \r",
											"                            let x_ais_orderref = x_ais_OrderRef_DeleteCustomer + current_timestamp;\r",
											"                            let x_ais_orderdesc = x_ais_OrderDesc_DeleteCustomer;\r",
											"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken2\");\r",
											"                            let x_ais_userName = x_ais_UserName_AisPartner;\r",
											"                            \r",
											"                            let customerId = pm.environment.get(\"GetResponse_CustomerId\");\r",
											"                            \r",
											"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
											"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodDelete);\r",
											"                            console.log(\"headers.x_ais_userName : \" + jsonParseRequestObject.headers[header_x_ais_username] + \" = \" + x_ais_userName);\r",
											"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
											"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
											"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
											"                                                                                                                                                             \r",
											"                            pm.expect(jsonParseRequestObject.url).to.eql(url);\r",
											"                            pm.expect(jsonParseRequestObject.method).to.eql(methodDelete);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_username]).to.eql(x_ais_userName);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
											"\r",
											"                            console.log(\"resquest.body.customerId : \" + jsonParseRequestObject.body.customerId + \" = \" + customerId);\r",
											"\r",
											"                            pm.expect(jsonParseRequestObject.body.customerId).to.eql(customerId);\r",
											"\r",
											"                            // check responseObject\r",
											"                            // \"responseObject\":\"{\\\"OperationStatus\\\":{\\\"Code\\\":\\\"40308\\\",\\\"Description\\\":\\\"Role Invalid\\\"}}\"\r",
											"\r",
											"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
											"                            // console.log('jsonParseResponseObject',jsonParseResponseObject);\r",
											"\r",
											"                            console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeRoleInvalid);\r",
											"                            console.log(\"response.OperationStatus.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionRoleInvalid);\r",
											"\r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeRoleInvalid);  \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionRoleInvalid);  \r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"setTimeout(function(){SearchLogFindTid();}, 10000); \r",
											"setTimeout(function(){CheckLog();}, 30000); \r",
											"\r",
											"setTimeout(function(){RemoveThingStateInfo();}, 40000); \r",
											"setTimeout(function(){RemoveThing();}, 50000); \r",
											"setTimeout(function(){RemoveAccount();}, 60000); \r",
											"setTimeout(function(){RemovePartner();}, 70000); \r",
											"\r",
											"setTimeout(function(){\r",
											"pm.environment.unset(\"current_timestamp\");\r",
											"pm.environment.unset(\"AccessToken\");\r",
											"pm.environment.unset(\"AccessToken2\");\r",
											"pm.environment.unset(\"random_number\");\r",
											"pm.environment.unset(\"PartnerName\");\r",
											"pm.environment.unset(\"MerchantContact\");\r",
											"pm.environment.unset(\"CPID\");\r",
											"pm.environment.unset(\"GetResponse_PartnerId\");\r",
											"pm.environment.unset(\"AccountName\");\r",
											"pm.environment.unset(\"GetResponse_AccountName\");\r",
											"pm.environment.unset(\"GetResponse_AccountId\");\r",
											"pm.environment.unset(\"random_IM\");\r",
											"pm.environment.unset(\"random_ICCID\");\r",
											"pm.environment.unset(\"ThingName\");\r",
											"pm.environment.unset(\"GetResponse_ThingID\");\r",
											"pm.environment.unset(\"random_Sensor\");\r",
											"pm.environment.unset(\"sessionId\");\r",
											"pm.environment.unset(\"GetResponse_CustomerId\");\r",
											"pm.environment.unset(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseKey\");\r",
											"pm.environment.unset(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseValue\");\r",
											"pm.environment.unset(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseName\");\r",
											"pm.environment.unset(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseType\");\r",
											"pm.environment.unset(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseState\");\r",
											"pm.environment.unset(\"Value_DeleteCustomer_Create_ChargingStatus\");\r",
											"}, 75000);\r",
											"setTimeout(function(){}, 80000); "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var Username = pm.environment.get(\"Username\");\r",
											"var Password = pm.environment.get(\"Password\");\r",
											"var Username_SupplierAdmin = pm.environment.get(\"Username_SupplierAdmin\");\r",
											"var Password_SupplierAdmin = pm.environment.get(\"Password_SupplierAdmin\");\r",
											"\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"pm.environment.set(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseKey\",fieldDataValue.Provisioning.DeleteCustomer.Value_DeleteCustomer_Create_PurchaseInfo_PurchaseKey)\r",
											"pm.environment.set(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseValue\",fieldDataValue.Provisioning.DeleteCustomer.Value_DeleteCustomer_Create_PurchaseInfo_PurchaseValue)\r",
											"pm.environment.set(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseName\",fieldDataValue.Provisioning.DeleteCustomer.Value_DeleteCustomer_Create_PurchaseInfo_PurchaseName)\r",
											"pm.environment.set(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseType\",fieldDataValue.Provisioning.DeleteCustomer.Value_DeleteCustomer_Create_PurchaseInfo_PurchaseType)\r",
											"pm.environment.set(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseState\",fieldDataValue.Provisioning.DeleteCustomer.Value_DeleteCustomer_Create_PurchaseInfo_PurchaseState)\r",
											"pm.environment.set(\"Value_DeleteCustomer_Create_ChargingStatus\",fieldDataValue.Provisioning.DeleteCustomer.Value_DeleteCustomer_Create_ChargingStatus)\r",
											"\r",
											"//format YYYYMMDDHHMMSSS\r",
											"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
											"// console.log('currentTmestamp',currentTmestamp);\r",
											"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- statusCodeList --------------//\r",
											"//set variable to statusCodeList JSON.parse\r",
											"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
											"//set global variable to statusCode 200\r",
											"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
											"//set global variable to statusCode 201\r",
											"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
											"//set global variable to statusCode 403\r",
											"pm.globals.set(\"statusCodeForbidden\", statusCodeList.statusCodeForbidden);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- resultCodeList --------------//\r",
											"//set variable to resultCodeList JSON.parse\r",
											"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
											"//set global variable to resultCode \"20000\"\r",
											"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
											"//set global variable to resultCode \"20100\"\r",
											"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
											"//set global variable to resultCode \"40308\"\r",
											"pm.globals.set(\"resultCodeRoleInvalid\", resultCodeList.resultCodeRoleInvalid);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- resultDescriptionSuccessList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
											"//set global variable to resultDescription \"SignInProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
											"//set global variable to resultDescription \"ValidateTokenProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionValidateToken\", resultDescriptionSuccessList.resultDescriptionValidateToken);\r",
											"//set global variable to resultDescription \"CreatePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
											"//set global variable to resultDescription \"CreateAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
											"//set global variable to resultDescription \"CreateThing is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreateThing\", resultDescriptionSuccessList.resultDescriptionCreateThing);\r",
											"//set global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreateThingStateInfo\", resultDescriptionSuccessList.resultDescriptionCreateThingStateInfo);\r",
											"//set global variable to resultDescription \"RemovePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
											"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
											"//set global variable to resultDescription \"RemoveThing is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveThing\", resultDescriptionSuccessList.resultDescriptionRemoveThing);\r",
											"//set global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveThingStateInfo\", resultDescriptionSuccessList.resultDescriptionRemoveThingStateInfo);\r",
											"//set global variable to resultDescription \"CreatePurchase is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreatePurchase\", resultDescriptionSuccessList.resultDescriptionCreatePurchase);\r",
											"//set global variable to resultDescription \"removeCustomer is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveCustomer\", resultDescriptionSuccessList.resultDescriptionRemoveCustomer);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- resultDescriptionErrorList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
											"//set global variable to resultDescription \"Role Invalid\"\r",
											"pm.globals.set(\"resultDescriptionRoleInvalid\", resultDescriptionErrorList.resultDescriptionRoleInvalid);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- HeaderList --------------//\r",
											"//set variable to HeaderList JSON.parse\r",
											"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
											"//---------------- set globals Other --------------//\r",
											"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
											"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
											"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
											"//set global variable to kbn-versio \"7.5.1\"\r",
											"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Signin_ --------------//\r",
											"//set global variable to x_ais_OrderRef \"Signin_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
											"//set global variable to x_ais_OrderRef \"ValidateToken\"\r",
											"pm.globals.set(\"x_ais_OrderRef_ValidateToken\", HeaderList.Signin.x_ais_OrderRef_ValidateToken);\r",
											"//set global variable to x_ais_OrderDesc \"ValidateToken\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_ValidateToken\", HeaderList.Signin.x_ais_OrderDesc_ValidateToken);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals CreatePartner --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
											"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
											"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
											"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals CreateAccount --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
											"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
											"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
											"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Thing --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreateThing_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreateThing\", HeaderList.Thing.x_ais_OrderRef_CreateThing);\r",
											"//set global variable to x_ais_OrderDesc \"CreateThing\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreateThing\", HeaderList.Thing.x_ais_OrderDesc_CreateThing);\r",
											"//set global variable to x_ais_OrderRef \"RemoveThing_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemoveThing\", HeaderList.Thing.x_ais_OrderRef_RemoveThing);\r",
											"//set global variable to x_ais_OrderDesc \"RemoveThing\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemoveThing\", HeaderList.Thing.x_ais_OrderDesc_RemoveThing);\r",
											"//set global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_CreateThingStateInfo);\r",
											"//set global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_CreateThingStateInfo);\r",
											"//set global variable to x_ais_OrderRef \"RemoveThingStateInfo\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_RemoveThingStateInfo);\r",
											"//set global variable to x_ais_OrderDesc \"RemoveThingStateInfo_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_RemoveThingStateInfo);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Purchase --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreatePurchase_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreatePurchase\", HeaderList.Purchase.x_ais_OrderRef_CreatePurchase);\r",
											"//set global variable to x_ais_OrderDesc \"CreatePurchase\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreatePurchase\", HeaderList.Purchase.x_ais_OrderDesc_CreatePurchase);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals DeleteCustomer --------------//\r",
											"//set global variable to x_ais_OrderRef \"DeleteCustomer_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_DeleteCustomer\", HeaderList.Customer.x_ais_OrderRef_DeleteCustomer);\r",
											"//set global variable to x_ais_OrderRef \"DeleteCustomerfail_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_DeleteCustomer_fail\", HeaderList.Customer.x_ais_OrderRef_DeleteCustomer_fail);\r",
											"//set global variable to x_ais_OrderDesc \"DeleteCustomer\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_DeleteCustomer\", HeaderList.Customer.x_ais_OrderDesc_DeleteCustomer);\r",
											"//------------------------------------------------------------//\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultCode \"20100\"\r",
											"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
											"//get global variable to resultDescription \"SignInProcess is Success\"\r",
											"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
											"//get global variable to resultDescription \"ValidateTokenProcess is Success\"\r",
											"var resultDescriptionValidateToken = pm.globals.get(\"resultDescriptionValidateToken\");\r",
											"//get global variable to resultDescription \"CreatePartner is Success\"\r",
											"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
											"//get global variable to resultDescription \"CreateAccount is Success\"\r",
											"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
											"//get global variable to resultDescription \"CreateThing is Success\"\r",
											"var resultDescriptionCreateThing = pm.globals.get(\"resultDescriptionCreateThing\");\r",
											"//get global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
											"var resultDescriptionCreateThingStateInfo = pm.globals.get(\"resultDescriptionCreateThingStateInfo\");\r",
											"//get global variable to resultDescription \"CreatePurchase is Success\"\r",
											"var resultDescriptionCreatePurchase = pm.globals.get(\"resultDescriptionCreatePurchase\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- urlRouteList --------------//\r",
											"//set variable to urlRouteList JSON.parse\r",
											"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
											"//---------------- set url Create --------------//\r",
											"//set global variable to url \"/api/v1/auth/signin\"\r",
											"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
											"//set global variable to url \"/api/v1/auth/ValidateToken\"\r",
											"pm.globals.set(\"urlValidateToken\", urlRouteList.Signin.urlValidateToken);\r",
											"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
											"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
											"//set global variable to url \"/api/v1/Thing/CreateThing\"\r",
											"pm.globals.set(\"urlThingCreateThing\", urlRouteList.Thing.urlThingCreateThing);\r",
											"//set global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
											"pm.globals.set(\"urlThingCreateThingStateInfo\", urlRouteList.Thing.urlThingCreateThingStateInfo);\r",
											"//set global variable to url \"/api/v1/Purchase/CreatePurchase\"\r",
											"pm.globals.set(\"urlCreatePurchase\", urlRouteList.Purchase.urlCreatePurchase);\r",
											"//---------------- get url Create --------------//\r",
											"//get global variable to url \"/api/v1/auth/signin\"\r",
											"var urlSignin = pm.globals.get(\"urlSignin\");\r",
											"//get global variable to url \"/api/v1/auth/ValidateToken\"\r",
											"var urlValidateToken = pm.globals.get(\"urlValidateToken\");\r",
											"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
											"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
											"//get global variable to url \"/api/v1/Thing/CreateThing\"\r",
											"var urlThingCreateThing = pm.globals.get(\"urlThingCreateThing\");\r",
											"//get global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
											"var urlThingCreateThingStateInfo = pm.globals.get(\"urlThingCreateThingStateInfo\");\r",
											"//get global variable to url \"/api/v1/Purchase/CreatePurchase\"\r",
											"var urlCreatePurchase = pm.globals.get(\"urlCreatePurchase\");\r",
											"//---------------- set url Remove --------------//\r",
											"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
											"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
											"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
											"//set global variable to url \"/api/v1/Thing/RemoveThing\"\r",
											"pm.globals.set(\"urlThingRemoveThing\", urlRouteList.Thing.urlThingRemoveThing);\r",
											"//set global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
											"pm.globals.set(\"urlThingRemoveThingStateInfo\", urlRouteList.Thing.urlThingRemoveThingStateInfo);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"Signin_\"\r",
											"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
											"//get global variable to x_ais_OrderRef \"ValidateToken_\"\r",
											"var x_ais_OrderRef_ValidateToken = pm.globals.get(\"x_ais_OrderRef_ValidateToken\");\r",
											"//get global variable to x_ais_OrderDesc \"ValidateToken\"\r",
											"var x_ais_OrderDesc_ValidateToken = pm.globals.get(\"x_ais_OrderDesc_ValidateToken\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Thing --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreateThing_\"\r",
											"var x_ais_OrderRef_CreateThing = pm.globals.get(\"x_ais_OrderRef_CreateThing\");\r",
											"//get global variable to x_ais_OrderDesc \"CreateThing\"\r",
											"var x_ais_OrderDesc_CreateThing = pm.globals.get(\"x_ais_OrderDesc_CreateThing\");\r",
											"//get global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
											"var x_ais_OrderRef_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderRef_CreateThingStateInfo\");\r",
											"//get global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
											"var x_ais_OrderDesc_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_CreateThingStateInfo\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Purchase --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreatePurchase_\"\r",
											"var x_ais_OrderRef_CreatePurchase = pm.globals.get(\"x_ais_OrderRef_CreatePurchase\");\r",
											"//get global variable to x_ais_OrderDesc \"CreatePurchase\"\r",
											"var x_ais_OrderDesc_CreatePurchase = pm.globals.get(\"x_ais_OrderDesc_CreatePurchase\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"// Signin get token\r",
											" Signin = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username,\r",
											"                password:Password\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"\r",
											"        //set random_number\r",
											"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
											"        //set PartnerName\r",
											"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
											"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
											"        //set MerchantContact\r",
											"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
											"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
											"        // set CPID\r",
											"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
											"        pm.environment.set(\"CPID\", CPIDValue)\r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// ValidateToken\r",
											" ValidateToken = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptValidateToken = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_ValidateToken + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_ValidateToken,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestValidateToken = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                \"AccessToken\": pm.environment.get(\"AccessToken\")\r",
											"            })\r",
											"        };  \r",
											"        \r",
											"        let optionsValidateToken = {\r",
											"            url: url + provisioningapis + urlValidateToken,\r",
											"            method: 'POST',\r",
											"            header: headersOptValidateToken,\r",
											"            body: httpRequestValidateToken\r",
											"        };\r",
											"        // console.log('request ValidateToken');\r",
											"        let response = await reqPromise(optionsValidateToken);\r",
											"        let jsonDataValidateToken = await response.json();\r",
											"        let operationStatusValidateToken = await jsonDataValidateToken.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"ValidateToken : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('ValidateToken : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusValidateToken).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // ValidateTokenProcess is Success\r",
											"        pm.test('ValidateToken : OperationStatus Description is '+'\"'+ resultDescriptionValidateToken+'\"', function () {\r",
											"            pm.expect(operationStatusValidateToken).to.have.property('Description', resultDescriptionValidateToken);\r",
											"        });\r",
											" \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreatePartner\r",
											" CreatePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreatePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreatePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
											"                \"PartnerType\": [\r",
											"                    \"Supplier\",\r",
											"                    \"Customer\"\r",
											"                ],\r",
											"                \"PartnerDetail\": {\r",
											"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
											"                    \"CPID\": pm.environment.get(\"CPID\")\r",
											"                },\r",
											"                \"Property\": {\r",
											"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
											"                }\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsCreatePartner = {\r",
											"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreatePartner,\r",
											"            body: httpRequestCreatePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsCreatePartner);\r",
											"        let jsonDataCreatePartner = await response.json();\r",
											"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
											"    \r",
											"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreatePartner is Success\r",
											"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
											"        });\r",
											"\r",
											"        //GetResponse_PartnerId\r",
											"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
											"\r",
											"        //GetResponse_CustomerId\r",
											"        pm.environment.set(\"GetResponse_CustomerId\", jsonDataCreatePartner.PartnerInfo.CustomerId);\r",
											"        \r",
											"        //Accountname\r",
											"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
											"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreateAccount\r",
											" CreateAccount = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreateAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreateAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
											"                })\r",
											"        };\r",
											"        \r",
											"        let optionsCreateAccount = {\r",
											"            url: url + provisioningapis + urlAccountCreateAccount,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreateAccount,\r",
											"            body: httpRequestCreateAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request CreateAccount');\r",
											"        let response = await reqPromise(optionsCreateAccount);\r",
											"        let jsonDataCreateAccount = await response.json();\r",
											"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
											"    \r",
											"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreateAccount : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreateAccount is Success\r",
											"        pm.test('CreateAccount : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
											"        });\r",
											"        // GetResponse_AccountName\r",
											"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
											"        // GetResponse_AccountId\r",
											"        pm.environment.set(\"GetResponse_AccountId\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
											"        // random_IM\r",
											"        pm.environment.set(\"random_IM\", _.random(10000000, 99999999)+\" \"+_.random(1000000, 9999999))\r",
											"        // random_ICCID\r",
											"        pm.environment.set(\"random_ICCID\", _.random(1000000, 9999999)+\" \"+_.random(100000, 999999))\r",
											"        // random_number\r",
											"        pm.environment.set(\"random_number\",pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
											"        //ThingName\r",
											"        let thingNameValue = fieldDataValue.Provisioning.Thing.ThingNameValue; // \"QAtestthing_T01\"\r",
											"        pm.environment.set(\"ThingName\", thingNameValue + pm.environment.get(\"random_number\"))\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreateThing\r",
											" CreateThing = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreateThing = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreateThing+ current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateThing,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreateThing = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"ThingName\": pm.environment.get(\"ThingName\"),\r",
											"                \"IMEI\": pm.environment.get(\"random_IM\"),\r",
											"                \"IMSI\": pm.environment.get(\"random_IM\"),\r",
											"                \"ICCID\": pm.environment.get(\"random_ICCID\"),\r",
											"                \"RouteUrl\": fieldDataValue.Provisioning.Thing.CreateThing.RouteUrlValue , //[\"http://10.12.3.4:2019/api/information/AddInformation\"]\r",
											"                \"RouteInfo\": {\r",
											"                    \"MIMO_ID\": fieldDataValue.Provisioning.Thing.CreateThing.RouteInfoMIMOIDValue , //\"606edada\"\r",
											"                    \"MIMO_SerialNo\": fieldDataValue.Provisioning.Thing.CreateThing.RouteInfoMIMOSerialNoValue //5466758878\r",
											"                },\r",
											"                \"RouteFlag\": {\r",
											"                    \"ThingName\": fieldDataValue.Provisioning.Thing.CreateThing.RouteFlagThingNameValue , //true\r",
											"                    \"ThingToken\": fieldDataValue.Provisioning.Thing.CreateThing.RouteFlagThingTokenValue, //true\r",
											"                    \"IMEI\": fieldDataValue.Provisioning.Thing.CreateThing.RouteFlagIMEIValue, //true\r",
											"                    \"ICCID\": fieldDataValue.Provisioning.Thing.CreateThing.RouteFlagICCIDValue, //true\r",
											"                    \"RouteInfo\": fieldDataValue.Provisioning.Thing.CreateThing.RouteFlagRouteInfoValue //true\r",
											"                }\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsCreateThing = {\r",
											"            url: url + provisioningapis + urlThingCreateThing,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreateThing,\r",
											"            body: httpRequestCreateThing\r",
											"        };\r",
											"\r",
											"        // console.log('request CreateThing');\r",
											"        let response = await reqPromise(optionsCreateThing);\r",
											"        let jsonDataCreateThing = await response.json();\r",
											"        // console.log('jsonDataCreateThing',jsonDataCreateThing)\r",
											"    \r",
											"        let operationStatusCreateThing = await jsonDataCreateThing.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreateThing : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreateThing : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreateThing).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreateThing is Success\r",
											"        pm.test('CreateThing : OperationStatus Description is '+'\"'+ resultDescriptionCreateThing+'\"', function () {\r",
											"            pm.expect(operationStatusCreateThing).to.have.property('Description', resultDescriptionCreateThing);\r",
											"        });\r",
											"\r",
											"        pm.environment.set(\"GetResponse_ThingID\",jsonDataCreateThing.ThingInfo.ThingId)\r",
											"\r",
											"        //Get Random Sensor \r",
											"        pm.environment.set(\"random_Sensor\", _.random(100, 999))\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreateThingStateInfo\r",
											" CreateThingStateInfo = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreateThingStateInfo = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreateThingStateInfo+ current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateThingStateInfo,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        // {\"Temp\" : pm.environment.get(\"random_Sensor\")}\r",
											"        let sensorValue = {};\r",
											"        sensorValue[fieldDataValue.CreateThingStateInfo.SensorKey] = pm.environment.get(\"random_Sensor\");\r",
											"        // console.log('sensorValue',sensorValue);\r",
											"        \r",
											"        let httpRequestCreateThingStateInfo = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"ThingId\": [\r",
											"                    pm.environment.get(\"GetResponse_ThingID\")\r",
											"                ],\r",
											"                \"Type\": fieldDataValue.CreateThingStateInfo.Type_Report,\r",
											"                \"Sensor\": sensorValue\r",
											"            })\r",
											"        };\r",
											"    \r",
											"        let optionsCreateThingStateInfo = {\r",
											"            url: url + provisioningapis + urlThingCreateThingStateInfo,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreateThingStateInfo,\r",
											"            body: httpRequestCreateThingStateInfo\r",
											"        };\r",
											"\r",
											"        // console.log('request CreateThingStateInfo');\r",
											"        let response = await reqPromise(optionsCreateThingStateInfo);\r",
											"        let jsonDataCreateThingStateInfo = await response.json();\r",
											"        // console.log('jsonDataCreateThingStateInfo',jsonDataCreateThingStateInfo)\r",
											"    \r",
											"        let operationStatusCreateThingStateInfo = await jsonDataCreateThingStateInfo.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"CreateThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('CreateThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //CreateThingStateInfo is Success\r",
											"        pm.test('CreateThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionCreateThingStateInfo+'\"', function () {\r",
											"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Description', resultDescriptionCreateThingStateInfo);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreatePurchase\r",
											"CreatePurchase = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreatePurchase = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreatePurchase+ current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePurchase,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'Accept':Accept\r",
											"        };\r",
											"                \r",
											"        let httpRequestCreatePurchase = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"customerId\": pm.environment.get(\"GetResponse_CustomerId\"),\r",
											"                \"PurchaseInfo\": {\r",
											"                    \"PurchaseKey\": pm.environment.get(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseKey\"),\r",
											"                    \"PurchaseValue\": pm.environment.get(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseValue\"),\r",
											"                    \"PurchaseName\": pm.environment.get(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseName\"),\r",
											"                    \"PurchaseType\": pm.environment.get(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseType\"), //Volume\r",
											"                    \"PurchaseState\": pm.environment.get(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseState\") //Active\r",
											"                },\r",
											"                \"ChargingStatus\": pm.environment.get(\"Value_DeleteCustomer_Create_ChargingStatus\") //Enable\r",
											"            })\r",
											"        };\r",
											"    \r",
											"        let optionsCreatePurchase = {\r",
											"            url: url + provisioningapis + urlCreatePurchase,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreatePurchase,\r",
											"            body: httpRequestCreatePurchase\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePurchase');\r",
											"        let response = await reqPromise(optionsCreatePurchase);\r",
											"        let jsonDataCreatePurchase = await response.json();\r",
											"        // console.log('jsonDataCreatePurchase',jsonDataCreatePurchase)\r",
											"    \r",
											"        let operationStatusCreatePurchase = await jsonDataCreatePurchase.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"CreatePurchase : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('CreatePurchase : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreatePurchase).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //CreatePurchase is Success\r",
											"        pm.test('CreatePurchase : OperationStatus Description is '+'\"'+ resultDescriptionCreatePurchase+'\"', function () {\r",
											"            pm.expect(operationStatusCreatePurchase).to.have.property('Description', resultDescriptionCreatePurchase);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// Signin get token\r",
											" Signin2 = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username_SupplierAdmin,\r",
											"                password:Password_SupplierAdmin\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken2\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"Signin();\r",
											"setTimeout(async function(){await ValidateToken();}, 1000);\r",
											"setTimeout(async function(){await CreatePartner();}, 2000); \r",
											"setTimeout(async function(){await CreateAccount();}, 3000); \r",
											"setTimeout(async function(){await CreateThing();}, 4000); \r",
											"setTimeout(async function(){await CreateThingStateInfo();}, 6000); \r",
											"setTimeout(async function(){await CreatePurchase();}, 7000); \r",
											"setTimeout(async function(){await Signin2();}, 8000);\r",
											"setTimeout(async function(){}, 9000);  "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-ais-UserName",
										"type": "text",
										"value": "{{x_ais_UserName_AisPartner}}"
									},
									{
										"key": "x-ais-OrderRef",
										"value": "{{x_ais_OrderRef_DeleteCustomer}}{{current_timestamp}}"
									},
									{
										"key": "x-ais-OrderDesc",
										"type": "text",
										"value": "{{x_ais_OrderDesc_DeleteCustomer}}"
									},
									{
										"key": "x-ais-AccessToken",
										"value": "{{Bearer}} {{AccessToken2}}"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"customerId\": \"{{GetResponse_CustomerId}}\"\r\n}"
								},
								"url": {
									"raw": "{{url}}{{provisioningapis}}/api/v1/Customer/DeleteCustomer",
									"host": [
										"{{url}}{{provisioningapis}}"
									],
									"path": [
										"api",
										"v1",
										"Customer",
										"DeleteCustomer"
									]
								},
								"description": "Type:Desire"
							},
							"response": []
						},
						{
							"name": "DeleteCustomer_TST_F73_1_1_006_Error_CustomerAdmin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Thing --------------//\r",
											"//get global variable to xAisOrderRef \"RemoveThing_\"\r",
											"var x_ais_OrderRef_RemoveThing = pm.globals.get(\"x_ais_OrderRef_RemoveThing\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveThing\"\r",
											"var x_ais_OrderDesc_RemoveThing = pm.globals.get(\"x_ais_OrderDesc_RemoveThing\");\r",
											"//get global variable to x_ais_OrderRef \"RemoveThingStateInfo_\" \r",
											"var x_ais_OrderDesc_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_RemoveThingStateInfo\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveThingStateInfo\"\r",
											"var x_ais_OrderRef_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderRef_RemoveThingStateInfo\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Purchase --------------//\r",
											"//get global variable to x_ais_OrderRef \"DeleteCustomer_\"\r",
											"var x_ais_OrderRef_DeleteCustomer = pm.globals.get(\"x_ais_OrderRef_DeleteCustomer\");\r",
											"//get global variable to x_ais_OrderDesc \"DeleteCustomer\"\r",
											"var x_ais_OrderDesc_DeleteCustomer = pm.globals.get(\"x_ais_OrderDesc_DeleteCustomer\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get url Remove --------------//\r",
											"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
											"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
											"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
											"//get global variable to url \"/api/v1/Thing/RemoveThing\"\r",
											"var urlThingRemoveThing = pm.globals.get(\"urlThingRemoveThing\");\r",
											"//get global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
											"var urlThingRemoveThingStateInfo = pm.globals.get(\"urlThingRemoveThingStateInfo\");\r",
											"//------------------------------------------------------------//\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultCode \"20100\"\r",
											"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
											"//get global variable to resultDescription \"RemovePartner is Success\"\r",
											"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
											"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
											"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
											"//get global variable to resultDescription \"RemoveThing is Success\"\r",
											"var resultDescriptionRemoveThing = pm.globals.get(\"resultDescriptionRemoveThing\");\r",
											"//get global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
											"var resultDescriptionRemoveThingStateInfo = pm.globals.get(\"resultDescriptionRemoveThingStateInfo\");\r",
											"//------------------------------------------------------------//\r",
											"//get global variable to statusCode 403\r",
											"var statusCodeForbidden = pm.globals.get(\"statusCodeForbidden\");\r",
											"//get global variable to resultCode \"40308\"\r",
											"var resultCodeRoleInvalid = pm.globals.get(\"resultCodeRoleInvalid\");\r",
											"//get global variable to resultDescription \"Role Invalid\"\r",
											"var resultDescriptionRoleInvalid = pm.globals.get(\"resultDescriptionRoleInvalid\");\r",
											"//------------------------------------------------------------//\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"DeleteCustomer : Status code is \" + statusCodeForbidden, function () {\r",
											"    pm.response.to.have.status(statusCodeForbidden);\r",
											"});\r",
											"\r",
											"pm.test('DeleteCustomer : operationStatus code is '+'\"'+ resultCodeRoleInvalid +'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeRoleInvalid);\r",
											"});\r",
											"\r",
											"pm.test('DeleteCustomer : operationStatus Description is '+'\"'+ resultDescriptionRoleInvalid+'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionRoleInvalid);\r",
											"});\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"// RemovePartner\r",
											" RemovePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemovePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemovePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsRemovePartner = {\r",
											"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemovePartner,\r",
											"            body: httpRequestRemovePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request RemovePartner');\r",
											"        let response = await reqPromise(optionsRemovePartner);\r",
											"        let jsonDataRemovePartner = await response.json();\r",
											"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
											"    \r",
											"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemovePartner is Success\r",
											"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// RemoveAccount\r",
											" RemoveAccount = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemoveAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemoveAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsRemoveAccount = {\r",
											"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemoveAccount,\r",
											"            body: httpRequestRemoveAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request RemoveAccount');\r",
											"        let response = await reqPromise(optionsRemoveAccount);\r",
											"        let jsonDataRemoveAccount = await response.json();\r",
											"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
											"    \r",
											"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemoveAccount is Success\r",
											"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
											"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// RemoveThing\r",
											" RemoveThing = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemoveThing = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThing + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThing,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemoveThing = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\")\r",
											"            })\r",
											"        };\r",
											"\r",
											"        let optionsRemoveThing = {\r",
											"            url: url + provisioningapis + urlThingRemoveThing,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemoveThing,\r",
											"            body: httpRequestRemoveThing\r",
											"        };\r",
											"\r",
											"        // console.log('request RemoveThing');\r",
											"        let response = await reqPromise(optionsRemoveThing);\r",
											"        let jsonDataRemoveThing = await response.json();\r",
											"        // console.log('jsonDataRemoveThing',jsonDataRemoveThing)\r",
											"    \r",
											"        let operationStatusRemoveThing = await jsonDataRemoveThing.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemoveThing : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemoveThing : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemoveThing).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemoveThing is Success\r",
											"        pm.test('RemoveThing : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThing+'\"', function () {\r",
											"            pm.expect(operationStatusRemoveThing).to.have.property('Description', resultDescriptionRemoveThing);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// RemoveThingStateInfo\r",
											" RemoveThingStateInfo = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemoveThingStateInfo = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThingStateInfo + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThingStateInfo,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
											"            'Accept':Accept\r",
											"            \r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemoveThingStateInfo = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\"),\r",
											"                \"stateType\": fieldDataValue.CreateThingStateInfo.Type_Report, //Report\r",
											"                \"stateKey\": fieldDataValue.CreateThingStateInfo.SensorKey //Temp\r",
											"            })\r",
											"        };\r",
											"\r",
											"        let optionsRemoveThingStateInfo = {\r",
											"            url: url + provisioningapis + urlThingRemoveThingStateInfo,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemoveThingStateInfo,\r",
											"            body: httpRequestRemoveThingStateInfo\r",
											"        };\r",
											"\r",
											"        // console.log('response RemoveThingStateInfo');\r",
											"        let response = await reqPromise(optionsRemoveThingStateInfo);\r",
											"        let jsonDataRemoveThingStateInfo = await response.json();\r",
											"        // console.log('jsonDataRemoveThing',jsonDataRemoveThingStateInfo)\r",
											"    \r",
											"        let operationStatusRemoveThingStateInfo = await jsonDataRemoveThingStateInfo.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemoveThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemoveThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemoveThingStateInfo is Success\r",
											"        pm.test('RemoveThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThingStateInfo+'\"', function () {\r",
											"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Description', resultDescriptionRemoveThingStateInfo);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"//---------------- LogDefaultValue --------------//\r",
											"//set variable to LogDefaultValue JSON.parse\r",
											"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
											"// console.log('LogDefaultValue',LogDefaultValue);\r",
											"//---------------- set globals Other --------------//\r",
											"\r",
											"var SearchLog = LogDefaultValue.SearchLog;\r",
											"// console.log('SearchLog',SearchLog);\r",
											"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
											"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
											"var kbn_version = SearchLog.header.kbn_version;\r",
											"var authorization = SearchLog.header.Authorization;\r",
											"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
											"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
											"var namespace = LogDefaultValue.Other.namespace;\r",
											"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
											"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
											"var header_x_ais_username = LogDefaultValue.Other.header_x_ais_username;\r",
											"var header_x_ais_accountkey = LogDefaultValue.Other.header_x_ais_accountkey;\r",
											"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
											"var methodDelete = LogDefaultValue.Other.methodDelete;\r",
											"\r",
											"// Detail\r",
											"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
											"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
											"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
											"\r",
											"// Summary\r",
											"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
											"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
											"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
											"\r",
											"// ProvisioningAPIs [Purchase]\r",
											"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
											"var cmdName = LogDefaultValue.Provisioning.DeleteCustomer.cmdNameDeleteCustomer;\r",
											"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
											"var containerId = LogDefaultValue.Provisioning.containerId;\r",
											"var requestObjectUrlStaging = LogDefaultValue.Provisioning.DeleteCustomer.requestObjectUrlDeleteCustomerMgStaging;\r",
											"\r",
											"// Check CDR (Summary Log) and EDR (Detail Log)\r",
											"SearchLogFindTid = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSearchLogFindTid = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = x_ais_OrderRef_DeleteCustomer + current_timestamp;\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestSearchLogFindTid = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"\r",
											"        let optionsSearchLogFindTid = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptSearchLogFindTid,\r",
											"            body: httpRequestSearchLogFindTid\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsSearchLogFindTid);\r",
											"        let jsonDataSearchLogFindTid = await response.json();\r",
											"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
											"\r",
											"        // //200\r",
											"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"\r",
											"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
											"        console.log('hits',hits)\r",
											"  \r",
											"        // find tid\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            // let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"        \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            if(applicationNameValue == applicationName){\r",
											"                let sessionId = hits[i]._source.cauldron.sessionId;\r",
											"                pm.environment.set(\"sessionId\", sessionId);\r",
											"                break;\r",
											"           }\r",
											"        }\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"CheckLog = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCheckLog = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = pm.environment.get(\"sessionId\");\r",
											"\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestCheckLog = {\r",
											"            mode: 'raw',\r",
											"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"        let optionsCheckLog = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptCheckLog,\r",
											"            body: httpRequestCheckLog\r",
											"        }; \r",
											"        let response = await reqPromise(optionsCheckLog);\r",
											"        let jsonDataCheckLog = await response.json();\r",
											"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
											"        \r",
											"        // //200\r",
											"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });     \r",
											"        \r",
											"        let hits = jsonDataCheckLog.hits.hits\r",
											"        console.log('hits',hits)\r",
											"  \r",
											"        // find logType\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            //  let logType = hits[i]._source.cauldron.logType\r",
											"            let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"           \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            \r",
											"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
											"            // console.log('resultDataLog',resultDataLog)\r",
											"\r",
											"            let tidControl = x_ais_OrderRef_DeleteCustomer + current_timestamp;\r",
											"            // console.log(tidControl);\r",
											"            if(applicationNameValue == applicationName){\r",
											"                 \r",
											"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ProvisioningAPIs\r",
											"                    pm.test(\"Check Summary Log : DeleteCustomer\" , function () {\r",
											"                        console.log(\"======== Check Summary Log ( Expected = Actual) [DeleteCustomer] ==================\");\r",
											"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
											"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
											"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeRoleInvalid);\r",
											"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionRoleInvalid);\r",
											"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
											"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
											"                        console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
											"\r",
											"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
											"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
											"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeRoleInvalid); \r",
											"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionRoleInvalid); \r",
											"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
											"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
											"                        pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
											"                    }); \r",
											"                }\r",
											"\r",
											"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ProvisioningAPIs\r",
											"\r",
											"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
											"                    // console.log('endPointNameValue ',endPointNameValue)\r",
											"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [DeleteCustomer]\", function () {\r",
											"                        console.log(\"======== Check Detail Log ( Expected = Actual) [DeleteCustomer] ==================\");\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
											"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
											"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
											"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
											"\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
											"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
											"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
											"\r",
											"                        if( endPointNameValue == endPointNameProvisioningAPIs){     //\"endPointName\":\"ProvisioningAPIs\"\r",
											"                            console.log(\"custom1.endPointName : \" + resultDataLog.custom1.endPointName + \" = \" + endPointNameProvisioningAPIs);\r",
											"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs); \r",
											"                        \r",
											"                            // check requestObject\r",
											"                            // \"requestObject\":\"{\\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Customer/DeleteCustomer\\\",\\\"method\\\":\\\"DELETE\\\",\\\"headers\\\":{\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"DeleteCustomer_202102172002683\\\",\\\"x-ais-orderdesc\\\":\\\"DeleteCustomer\\\",\\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAGJjc8t2ZfqZcNNvBKwuLmPMV/NLO2GPEwLJG3c2Ik+TEIlAkkY2KW0\\\"},\\\"body\\\":{\\\"customerId\\\":\\\"602d1a0bd441170001999d6fxx\\\"}}}\"\r",
											"                            \r",
											"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
											"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
											"                            let url = urlCheckLog + requestObjectUrlStaging; \r",
											"                            let x_ais_orderref = x_ais_OrderRef_DeleteCustomer + current_timestamp;\r",
											"                            let x_ais_orderdesc = x_ais_OrderDesc_DeleteCustomer;\r",
											"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken2\");\r",
											"                            let x_ais_userName = x_ais_UserName_AisPartner;\r",
											"                            \r",
											"                            let customerId = pm.environment.get(\"GetResponse_CustomerId\");\r",
											"                            \r",
											"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
											"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodDelete);\r",
											"                            console.log(\"headers.x_ais_userName : \" + jsonParseRequestObject.headers[header_x_ais_username] + \" = \" + x_ais_userName);\r",
											"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
											"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
											"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
											"                                                                                                                                                             \r",
											"                            pm.expect(jsonParseRequestObject.url).to.eql(url);\r",
											"                            pm.expect(jsonParseRequestObject.method).to.eql(methodDelete);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_username]).to.eql(x_ais_userName);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
											"\r",
											"                            console.log(\"resquest.body.customerId : \" + jsonParseRequestObject.body.customerId + \" = \" + customerId);\r",
											"\r",
											"                            pm.expect(jsonParseRequestObject.body.customerId).to.eql(customerId);\r",
											"\r",
											"                            // check responseObject\r",
											"                            // \"responseObject\":\"{\\\"OperationStatus\\\":{\\\"Code\\\":\\\"40308\\\",\\\"Description\\\":\\\"Role Invalid\\\"}}\"\r",
											"\r",
											"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
											"                            // console.log('jsonParseResponseObject',jsonParseResponseObject);\r",
											"\r",
											"                            console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeRoleInvalid);\r",
											"                            console.log(\"response.OperationStatus.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionRoleInvalid);\r",
											"\r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeRoleInvalid);  \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionRoleInvalid);  \r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"setTimeout(function(){SearchLogFindTid();}, 10000); \r",
											"setTimeout(function(){CheckLog();}, 30000); \r",
											"\r",
											"setTimeout(function(){RemoveThingStateInfo();}, 40000); \r",
											"setTimeout(function(){RemoveThing();}, 50000); \r",
											"setTimeout(function(){RemoveAccount();}, 60000); \r",
											"setTimeout(function(){RemovePartner();}, 70000); \r",
											"\r",
											"setTimeout(function(){\r",
											"pm.environment.unset(\"current_timestamp\");\r",
											"pm.environment.unset(\"AccessToken\");\r",
											"pm.environment.unset(\"AccessToken2\");\r",
											"pm.environment.unset(\"random_number\");\r",
											"pm.environment.unset(\"PartnerName\");\r",
											"pm.environment.unset(\"MerchantContact\");\r",
											"pm.environment.unset(\"CPID\");\r",
											"pm.environment.unset(\"GetResponse_PartnerId\");\r",
											"pm.environment.unset(\"AccountName\");\r",
											"pm.environment.unset(\"GetResponse_AccountName\");\r",
											"pm.environment.unset(\"GetResponse_AccountId\");\r",
											"pm.environment.unset(\"random_IM\");\r",
											"pm.environment.unset(\"random_ICCID\");\r",
											"pm.environment.unset(\"ThingName\");\r",
											"pm.environment.unset(\"GetResponse_ThingID\");\r",
											"pm.environment.unset(\"random_Sensor\");\r",
											"pm.environment.unset(\"sessionId\");\r",
											"pm.environment.unset(\"GetResponse_CustomerId\");\r",
											"pm.environment.unset(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseKey\");\r",
											"pm.environment.unset(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseValue\");\r",
											"pm.environment.unset(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseName\");\r",
											"pm.environment.unset(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseType\");\r",
											"pm.environment.unset(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseState\");\r",
											"pm.environment.unset(\"Value_DeleteCustomer_Create_ChargingStatus\");\r",
											"}, 75000);\r",
											"setTimeout(function(){}, 80000); "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var Username = pm.environment.get(\"Username\");\r",
											"var Password = pm.environment.get(\"Password\");\r",
											"var Username_CustomerAdmin = pm.environment.get(\"Username_CustomerAdmin\");\r",
											"var Password_CustomerAdmin = pm.environment.get(\"Password_CustomerAdmin\");\r",
											"\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"pm.environment.set(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseKey\",fieldDataValue.Provisioning.DeleteCustomer.Value_DeleteCustomer_Create_PurchaseInfo_PurchaseKey)\r",
											"pm.environment.set(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseValue\",fieldDataValue.Provisioning.DeleteCustomer.Value_DeleteCustomer_Create_PurchaseInfo_PurchaseValue)\r",
											"pm.environment.set(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseName\",fieldDataValue.Provisioning.DeleteCustomer.Value_DeleteCustomer_Create_PurchaseInfo_PurchaseName)\r",
											"pm.environment.set(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseType\",fieldDataValue.Provisioning.DeleteCustomer.Value_DeleteCustomer_Create_PurchaseInfo_PurchaseType)\r",
											"pm.environment.set(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseState\",fieldDataValue.Provisioning.DeleteCustomer.Value_DeleteCustomer_Create_PurchaseInfo_PurchaseState)\r",
											"pm.environment.set(\"Value_DeleteCustomer_Create_ChargingStatus\",fieldDataValue.Provisioning.DeleteCustomer.Value_DeleteCustomer_Create_ChargingStatus)\r",
											"\r",
											"//format YYYYMMDDHHMMSSS\r",
											"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
											"// console.log('currentTmestamp',currentTmestamp);\r",
											"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- statusCodeList --------------//\r",
											"//set variable to statusCodeList JSON.parse\r",
											"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
											"//set global variable to statusCode 200\r",
											"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
											"//set global variable to statusCode 201\r",
											"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
											"//set global variable to statusCode 403\r",
											"pm.globals.set(\"statusCodeForbidden\", statusCodeList.statusCodeForbidden);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- resultCodeList --------------//\r",
											"//set variable to resultCodeList JSON.parse\r",
											"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
											"//set global variable to resultCode \"20000\"\r",
											"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
											"//set global variable to resultCode \"20100\"\r",
											"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
											"//set global variable to resultCode \"40308\"\r",
											"pm.globals.set(\"resultCodeRoleInvalid\", resultCodeList.resultCodeRoleInvalid);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- resultDescriptionSuccessList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
											"//set global variable to resultDescription \"SignInProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
											"//set global variable to resultDescription \"ValidateTokenProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionValidateToken\", resultDescriptionSuccessList.resultDescriptionValidateToken);\r",
											"//set global variable to resultDescription \"CreatePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
											"//set global variable to resultDescription \"CreateAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
											"//set global variable to resultDescription \"CreateThing is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreateThing\", resultDescriptionSuccessList.resultDescriptionCreateThing);\r",
											"//set global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreateThingStateInfo\", resultDescriptionSuccessList.resultDescriptionCreateThingStateInfo);\r",
											"//set global variable to resultDescription \"RemovePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
											"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
											"//set global variable to resultDescription \"RemoveThing is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveThing\", resultDescriptionSuccessList.resultDescriptionRemoveThing);\r",
											"//set global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveThingStateInfo\", resultDescriptionSuccessList.resultDescriptionRemoveThingStateInfo);\r",
											"//set global variable to resultDescription \"CreatePurchase is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreatePurchase\", resultDescriptionSuccessList.resultDescriptionCreatePurchase);\r",
											"//set global variable to resultDescription \"removeCustomer is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveCustomer\", resultDescriptionSuccessList.resultDescriptionRemoveCustomer);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- resultDescriptionErrorList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
											"//set global variable to resultDescription \"Role Invalid\"\r",
											"pm.globals.set(\"resultDescriptionRoleInvalid\", resultDescriptionErrorList.resultDescriptionRoleInvalid);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- HeaderList --------------//\r",
											"//set variable to HeaderList JSON.parse\r",
											"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
											"//---------------- set globals Other --------------//\r",
											"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
											"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
											"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
											"//set global variable to kbn-versio \"7.5.1\"\r",
											"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Signin_ --------------//\r",
											"//set global variable to x_ais_OrderRef \"Signin_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
											"//set global variable to x_ais_OrderRef \"ValidateToken\"\r",
											"pm.globals.set(\"x_ais_OrderRef_ValidateToken\", HeaderList.Signin.x_ais_OrderRef_ValidateToken);\r",
											"//set global variable to x_ais_OrderDesc \"ValidateToken\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_ValidateToken\", HeaderList.Signin.x_ais_OrderDesc_ValidateToken);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals CreatePartner --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
											"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
											"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
											"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals CreateAccount --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
											"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
											"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
											"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Thing --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreateThing_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreateThing\", HeaderList.Thing.x_ais_OrderRef_CreateThing);\r",
											"//set global variable to x_ais_OrderDesc \"CreateThing\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreateThing\", HeaderList.Thing.x_ais_OrderDesc_CreateThing);\r",
											"//set global variable to x_ais_OrderRef \"RemoveThing_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemoveThing\", HeaderList.Thing.x_ais_OrderRef_RemoveThing);\r",
											"//set global variable to x_ais_OrderDesc \"RemoveThing\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemoveThing\", HeaderList.Thing.x_ais_OrderDesc_RemoveThing);\r",
											"//set global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_CreateThingStateInfo);\r",
											"//set global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_CreateThingStateInfo);\r",
											"//set global variable to x_ais_OrderRef \"RemoveThingStateInfo\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_RemoveThingStateInfo);\r",
											"//set global variable to x_ais_OrderDesc \"RemoveThingStateInfo_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_RemoveThingStateInfo);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Purchase --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreatePurchase_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreatePurchase\", HeaderList.Purchase.x_ais_OrderRef_CreatePurchase);\r",
											"//set global variable to x_ais_OrderDesc \"CreatePurchase\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreatePurchase\", HeaderList.Purchase.x_ais_OrderDesc_CreatePurchase);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals DeleteCustomer --------------//\r",
											"//set global variable to x_ais_OrderRef \"DeleteCustomer_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_DeleteCustomer\", HeaderList.Customer.x_ais_OrderRef_DeleteCustomer);\r",
											"//set global variable to x_ais_OrderRef \"DeleteCustomerfail_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_DeleteCustomer_fail\", HeaderList.Customer.x_ais_OrderRef_DeleteCustomer_fail);\r",
											"//set global variable to x_ais_OrderDesc \"DeleteCustomer\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_DeleteCustomer\", HeaderList.Customer.x_ais_OrderDesc_DeleteCustomer);\r",
											"//------------------------------------------------------------//\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultCode \"20100\"\r",
											"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
											"//get global variable to resultDescription \"SignInProcess is Success\"\r",
											"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
											"//get global variable to resultDescription \"ValidateTokenProcess is Success\"\r",
											"var resultDescriptionValidateToken = pm.globals.get(\"resultDescriptionValidateToken\");\r",
											"//get global variable to resultDescription \"CreatePartner is Success\"\r",
											"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
											"//get global variable to resultDescription \"CreateAccount is Success\"\r",
											"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
											"//get global variable to resultDescription \"CreateThing is Success\"\r",
											"var resultDescriptionCreateThing = pm.globals.get(\"resultDescriptionCreateThing\");\r",
											"//get global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
											"var resultDescriptionCreateThingStateInfo = pm.globals.get(\"resultDescriptionCreateThingStateInfo\");\r",
											"//get global variable to resultDescription \"CreatePurchase is Success\"\r",
											"var resultDescriptionCreatePurchase = pm.globals.get(\"resultDescriptionCreatePurchase\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- urlRouteList --------------//\r",
											"//set variable to urlRouteList JSON.parse\r",
											"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
											"//---------------- set url Create --------------//\r",
											"//set global variable to url \"/api/v1/auth/signin\"\r",
											"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
											"//set global variable to url \"/api/v1/auth/ValidateToken\"\r",
											"pm.globals.set(\"urlValidateToken\", urlRouteList.Signin.urlValidateToken);\r",
											"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
											"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
											"//set global variable to url \"/api/v1/Thing/CreateThing\"\r",
											"pm.globals.set(\"urlThingCreateThing\", urlRouteList.Thing.urlThingCreateThing);\r",
											"//set global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
											"pm.globals.set(\"urlThingCreateThingStateInfo\", urlRouteList.Thing.urlThingCreateThingStateInfo);\r",
											"//set global variable to url \"/api/v1/Purchase/CreatePurchase\"\r",
											"pm.globals.set(\"urlCreatePurchase\", urlRouteList.Purchase.urlCreatePurchase);\r",
											"//---------------- get url Create --------------//\r",
											"//get global variable to url \"/api/v1/auth/signin\"\r",
											"var urlSignin = pm.globals.get(\"urlSignin\");\r",
											"//get global variable to url \"/api/v1/auth/ValidateToken\"\r",
											"var urlValidateToken = pm.globals.get(\"urlValidateToken\");\r",
											"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
											"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
											"//get global variable to url \"/api/v1/Thing/CreateThing\"\r",
											"var urlThingCreateThing = pm.globals.get(\"urlThingCreateThing\");\r",
											"//get global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
											"var urlThingCreateThingStateInfo = pm.globals.get(\"urlThingCreateThingStateInfo\");\r",
											"//get global variable to url \"/api/v1/Purchase/CreatePurchase\"\r",
											"var urlCreatePurchase = pm.globals.get(\"urlCreatePurchase\");\r",
											"//---------------- set url Remove --------------//\r",
											"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
											"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
											"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
											"//set global variable to url \"/api/v1/Thing/RemoveThing\"\r",
											"pm.globals.set(\"urlThingRemoveThing\", urlRouteList.Thing.urlThingRemoveThing);\r",
											"//set global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
											"pm.globals.set(\"urlThingRemoveThingStateInfo\", urlRouteList.Thing.urlThingRemoveThingStateInfo);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"Signin_\"\r",
											"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
											"//get global variable to x_ais_OrderRef \"ValidateToken_\"\r",
											"var x_ais_OrderRef_ValidateToken = pm.globals.get(\"x_ais_OrderRef_ValidateToken\");\r",
											"//get global variable to x_ais_OrderDesc \"ValidateToken\"\r",
											"var x_ais_OrderDesc_ValidateToken = pm.globals.get(\"x_ais_OrderDesc_ValidateToken\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Thing --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreateThing_\"\r",
											"var x_ais_OrderRef_CreateThing = pm.globals.get(\"x_ais_OrderRef_CreateThing\");\r",
											"//get global variable to x_ais_OrderDesc \"CreateThing\"\r",
											"var x_ais_OrderDesc_CreateThing = pm.globals.get(\"x_ais_OrderDesc_CreateThing\");\r",
											"//get global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
											"var x_ais_OrderRef_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderRef_CreateThingStateInfo\");\r",
											"//get global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
											"var x_ais_OrderDesc_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_CreateThingStateInfo\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Purchase --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreatePurchase_\"\r",
											"var x_ais_OrderRef_CreatePurchase = pm.globals.get(\"x_ais_OrderRef_CreatePurchase\");\r",
											"//get global variable to x_ais_OrderDesc \"CreatePurchase\"\r",
											"var x_ais_OrderDesc_CreatePurchase = pm.globals.get(\"x_ais_OrderDesc_CreatePurchase\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"// Signin get token\r",
											" Signin = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username,\r",
											"                password:Password\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"\r",
											"        //set random_number\r",
											"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
											"        //set PartnerName\r",
											"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
											"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
											"        //set MerchantContact\r",
											"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
											"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
											"        // set CPID\r",
											"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
											"        pm.environment.set(\"CPID\", CPIDValue)\r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// ValidateToken\r",
											" ValidateToken = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptValidateToken = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_ValidateToken + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_ValidateToken,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestValidateToken = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                \"AccessToken\": pm.environment.get(\"AccessToken\")\r",
											"            })\r",
											"        };  \r",
											"        \r",
											"        let optionsValidateToken = {\r",
											"            url: url + provisioningapis + urlValidateToken,\r",
											"            method: 'POST',\r",
											"            header: headersOptValidateToken,\r",
											"            body: httpRequestValidateToken\r",
											"        };\r",
											"        // console.log('request ValidateToken');\r",
											"        let response = await reqPromise(optionsValidateToken);\r",
											"        let jsonDataValidateToken = await response.json();\r",
											"        let operationStatusValidateToken = await jsonDataValidateToken.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"ValidateToken : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('ValidateToken : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusValidateToken).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // ValidateTokenProcess is Success\r",
											"        pm.test('ValidateToken : OperationStatus Description is '+'\"'+ resultDescriptionValidateToken+'\"', function () {\r",
											"            pm.expect(operationStatusValidateToken).to.have.property('Description', resultDescriptionValidateToken);\r",
											"        });\r",
											" \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreatePartner\r",
											" CreatePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreatePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreatePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
											"                \"PartnerType\": [\r",
											"                    \"Supplier\",\r",
											"                    \"Customer\"\r",
											"                ],\r",
											"                \"PartnerDetail\": {\r",
											"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
											"                    \"CPID\": pm.environment.get(\"CPID\")\r",
											"                },\r",
											"                \"Property\": {\r",
											"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
											"                }\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsCreatePartner = {\r",
											"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreatePartner,\r",
											"            body: httpRequestCreatePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsCreatePartner);\r",
											"        let jsonDataCreatePartner = await response.json();\r",
											"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
											"    \r",
											"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreatePartner is Success\r",
											"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
											"        });\r",
											"\r",
											"        //GetResponse_PartnerId\r",
											"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
											"\r",
											"        //GetResponse_CustomerId\r",
											"        pm.environment.set(\"GetResponse_CustomerId\", jsonDataCreatePartner.PartnerInfo.CustomerId);\r",
											"        \r",
											"        //Accountname\r",
											"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
											"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreateAccount\r",
											" CreateAccount = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreateAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreateAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
											"                })\r",
											"        };\r",
											"        \r",
											"        let optionsCreateAccount = {\r",
											"            url: url + provisioningapis + urlAccountCreateAccount,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreateAccount,\r",
											"            body: httpRequestCreateAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request CreateAccount');\r",
											"        let response = await reqPromise(optionsCreateAccount);\r",
											"        let jsonDataCreateAccount = await response.json();\r",
											"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
											"    \r",
											"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreateAccount : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreateAccount is Success\r",
											"        pm.test('CreateAccount : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
											"        });\r",
											"        // GetResponse_AccountName\r",
											"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
											"        // GetResponse_AccountId\r",
											"        pm.environment.set(\"GetResponse_AccountId\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
											"        // random_IM\r",
											"        pm.environment.set(\"random_IM\", _.random(10000000, 99999999)+\" \"+_.random(1000000, 9999999))\r",
											"        // random_ICCID\r",
											"        pm.environment.set(\"random_ICCID\", _.random(1000000, 9999999)+\" \"+_.random(100000, 999999))\r",
											"        // random_number\r",
											"        pm.environment.set(\"random_number\",pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
											"        //ThingName\r",
											"        let thingNameValue = fieldDataValue.Provisioning.Thing.ThingNameValue; // \"QAtestthing_T01\"\r",
											"        pm.environment.set(\"ThingName\", thingNameValue + pm.environment.get(\"random_number\"))\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreateThing\r",
											" CreateThing = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreateThing = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreateThing+ current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateThing,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreateThing = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"ThingName\": pm.environment.get(\"ThingName\"),\r",
											"                \"IMEI\": pm.environment.get(\"random_IM\"),\r",
											"                \"IMSI\": pm.environment.get(\"random_IM\"),\r",
											"                \"ICCID\": pm.environment.get(\"random_ICCID\"),\r",
											"                \"RouteUrl\": fieldDataValue.Provisioning.Thing.CreateThing.RouteUrlValue , //[\"http://10.12.3.4:2019/api/information/AddInformation\"]\r",
											"                \"RouteInfo\": {\r",
											"                    \"MIMO_ID\": fieldDataValue.Provisioning.Thing.CreateThing.RouteInfoMIMOIDValue , //\"606edada\"\r",
											"                    \"MIMO_SerialNo\": fieldDataValue.Provisioning.Thing.CreateThing.RouteInfoMIMOSerialNoValue //5466758878\r",
											"                },\r",
											"                \"RouteFlag\": {\r",
											"                    \"ThingName\": fieldDataValue.Provisioning.Thing.CreateThing.RouteFlagThingNameValue , //true\r",
											"                    \"ThingToken\": fieldDataValue.Provisioning.Thing.CreateThing.RouteFlagThingTokenValue, //true\r",
											"                    \"IMEI\": fieldDataValue.Provisioning.Thing.CreateThing.RouteFlagIMEIValue, //true\r",
											"                    \"ICCID\": fieldDataValue.Provisioning.Thing.CreateThing.RouteFlagICCIDValue, //true\r",
											"                    \"RouteInfo\": fieldDataValue.Provisioning.Thing.CreateThing.RouteFlagRouteInfoValue //true\r",
											"                }\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsCreateThing = {\r",
											"            url: url + provisioningapis + urlThingCreateThing,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreateThing,\r",
											"            body: httpRequestCreateThing\r",
											"        };\r",
											"\r",
											"        // console.log('request CreateThing');\r",
											"        let response = await reqPromise(optionsCreateThing);\r",
											"        let jsonDataCreateThing = await response.json();\r",
											"        // console.log('jsonDataCreateThing',jsonDataCreateThing)\r",
											"    \r",
											"        let operationStatusCreateThing = await jsonDataCreateThing.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreateThing : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreateThing : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreateThing).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreateThing is Success\r",
											"        pm.test('CreateThing : OperationStatus Description is '+'\"'+ resultDescriptionCreateThing+'\"', function () {\r",
											"            pm.expect(operationStatusCreateThing).to.have.property('Description', resultDescriptionCreateThing);\r",
											"        });\r",
											"\r",
											"        pm.environment.set(\"GetResponse_ThingID\",jsonDataCreateThing.ThingInfo.ThingId)\r",
											"\r",
											"        //Get Random Sensor \r",
											"        pm.environment.set(\"random_Sensor\", _.random(100, 999))\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreateThingStateInfo\r",
											" CreateThingStateInfo = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreateThingStateInfo = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreateThingStateInfo+ current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateThingStateInfo,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        // {\"Temp\" : pm.environment.get(\"random_Sensor\")}\r",
											"        let sensorValue = {};\r",
											"        sensorValue[fieldDataValue.CreateThingStateInfo.SensorKey] = pm.environment.get(\"random_Sensor\");\r",
											"        // console.log('sensorValue',sensorValue);\r",
											"        \r",
											"        let httpRequestCreateThingStateInfo = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"ThingId\": [\r",
											"                    pm.environment.get(\"GetResponse_ThingID\")\r",
											"                ],\r",
											"                \"Type\": fieldDataValue.CreateThingStateInfo.Type_Report,\r",
											"                \"Sensor\": sensorValue\r",
											"            })\r",
											"        };\r",
											"    \r",
											"        let optionsCreateThingStateInfo = {\r",
											"            url: url + provisioningapis + urlThingCreateThingStateInfo,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreateThingStateInfo,\r",
											"            body: httpRequestCreateThingStateInfo\r",
											"        };\r",
											"\r",
											"        // console.log('request CreateThingStateInfo');\r",
											"        let response = await reqPromise(optionsCreateThingStateInfo);\r",
											"        let jsonDataCreateThingStateInfo = await response.json();\r",
											"        // console.log('jsonDataCreateThingStateInfo',jsonDataCreateThingStateInfo)\r",
											"    \r",
											"        let operationStatusCreateThingStateInfo = await jsonDataCreateThingStateInfo.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"CreateThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('CreateThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //CreateThingStateInfo is Success\r",
											"        pm.test('CreateThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionCreateThingStateInfo+'\"', function () {\r",
											"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Description', resultDescriptionCreateThingStateInfo);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreatePurchase\r",
											"CreatePurchase = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreatePurchase = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreatePurchase+ current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePurchase,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'Accept':Accept\r",
											"        };\r",
											"                \r",
											"        let httpRequestCreatePurchase = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"customerId\": pm.environment.get(\"GetResponse_CustomerId\"),\r",
											"                \"PurchaseInfo\": {\r",
											"                    \"PurchaseKey\": pm.environment.get(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseKey\"),\r",
											"                    \"PurchaseValue\": pm.environment.get(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseValue\"),\r",
											"                    \"PurchaseName\": pm.environment.get(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseName\"),\r",
											"                    \"PurchaseType\": pm.environment.get(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseType\"), //Volume\r",
											"                    \"PurchaseState\": pm.environment.get(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseState\") //Active\r",
											"                },\r",
											"                \"ChargingStatus\": pm.environment.get(\"Value_DeleteCustomer_Create_ChargingStatus\") //Enable\r",
											"            })\r",
											"        };\r",
											"    \r",
											"        let optionsCreatePurchase = {\r",
											"            url: url + provisioningapis + urlCreatePurchase,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreatePurchase,\r",
											"            body: httpRequestCreatePurchase\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePurchase');\r",
											"        let response = await reqPromise(optionsCreatePurchase);\r",
											"        let jsonDataCreatePurchase = await response.json();\r",
											"        // console.log('jsonDataCreatePurchase',jsonDataCreatePurchase)\r",
											"    \r",
											"        let operationStatusCreatePurchase = await jsonDataCreatePurchase.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"CreatePurchase : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('CreatePurchase : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreatePurchase).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //CreatePurchase is Success\r",
											"        pm.test('CreatePurchase : OperationStatus Description is '+'\"'+ resultDescriptionCreatePurchase+'\"', function () {\r",
											"            pm.expect(operationStatusCreatePurchase).to.have.property('Description', resultDescriptionCreatePurchase);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// Signin get token\r",
											" Signin2 = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username_CustomerAdmin,\r",
											"                password:Password_CustomerAdmin\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken2\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"Signin();\r",
											"setTimeout(async function(){await ValidateToken();}, 1000);\r",
											"setTimeout(async function(){await CreatePartner();}, 2000); \r",
											"setTimeout(async function(){await CreateAccount();}, 3000); \r",
											"setTimeout(async function(){await CreateThing();}, 4000); \r",
											"setTimeout(async function(){await CreateThingStateInfo();}, 6000); \r",
											"setTimeout(async function(){await CreatePurchase();}, 7000); \r",
											"setTimeout(async function(){await Signin2();}, 8000);\r",
											"setTimeout(async function(){}, 9000);  "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-ais-UserName",
										"type": "text",
										"value": "{{x_ais_UserName_AisPartner}}"
									},
									{
										"key": "x-ais-OrderRef",
										"value": "{{x_ais_OrderRef_DeleteCustomer}}{{current_timestamp}}"
									},
									{
										"key": "x-ais-OrderDesc",
										"type": "text",
										"value": "{{x_ais_OrderDesc_DeleteCustomer}}"
									},
									{
										"key": "x-ais-AccessToken",
										"value": "{{Bearer}} {{AccessToken2}}"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"customerId\": \"{{GetResponse_CustomerId}}\"\r\n}"
								},
								"url": {
									"raw": "{{url}}{{provisioningapis}}/api/v1/Customer/DeleteCustomer",
									"host": [
										"{{url}}{{provisioningapis}}"
									],
									"path": [
										"api",
										"v1",
										"Customer",
										"DeleteCustomer"
									]
								},
								"description": "Type:Desire"
							},
							"response": []
						},
						{
							"name": "DeleteCustomer_TST_F73_1_1_007_Error_Supplier",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Thing --------------//\r",
											"//get global variable to xAisOrderRef \"RemoveThing_\"\r",
											"var x_ais_OrderRef_RemoveThing = pm.globals.get(\"x_ais_OrderRef_RemoveThing\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveThing\"\r",
											"var x_ais_OrderDesc_RemoveThing = pm.globals.get(\"x_ais_OrderDesc_RemoveThing\");\r",
											"//get global variable to x_ais_OrderRef \"RemoveThingStateInfo_\" \r",
											"var x_ais_OrderDesc_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_RemoveThingStateInfo\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveThingStateInfo\"\r",
											"var x_ais_OrderRef_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderRef_RemoveThingStateInfo\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Purchase --------------//\r",
											"//get global variable to x_ais_OrderRef \"DeleteCustomer_\"\r",
											"var x_ais_OrderRef_DeleteCustomer = pm.globals.get(\"x_ais_OrderRef_DeleteCustomer\");\r",
											"//get global variable to x_ais_OrderDesc \"DeleteCustomer\"\r",
											"var x_ais_OrderDesc_DeleteCustomer = pm.globals.get(\"x_ais_OrderDesc_DeleteCustomer\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get url Remove --------------//\r",
											"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
											"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
											"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
											"//get global variable to url \"/api/v1/Thing/RemoveThing\"\r",
											"var urlThingRemoveThing = pm.globals.get(\"urlThingRemoveThing\");\r",
											"//get global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
											"var urlThingRemoveThingStateInfo = pm.globals.get(\"urlThingRemoveThingStateInfo\");\r",
											"//------------------------------------------------------------//\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultCode \"20100\"\r",
											"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
											"//get global variable to resultDescription \"RemovePartner is Success\"\r",
											"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
											"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
											"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
											"//get global variable to resultDescription \"RemoveThing is Success\"\r",
											"var resultDescriptionRemoveThing = pm.globals.get(\"resultDescriptionRemoveThing\");\r",
											"//get global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
											"var resultDescriptionRemoveThingStateInfo = pm.globals.get(\"resultDescriptionRemoveThingStateInfo\");\r",
											"//------------------------------------------------------------//\r",
											"//get global variable to statusCode 403\r",
											"var statusCodeForbidden = pm.globals.get(\"statusCodeForbidden\");\r",
											"//get global variable to resultCode \"40308\"\r",
											"var resultCodeRoleInvalid = pm.globals.get(\"resultCodeRoleInvalid\");\r",
											"//get global variable to resultDescription \"Role Invalid\"\r",
											"var resultDescriptionRoleInvalid = pm.globals.get(\"resultDescriptionRoleInvalid\");\r",
											"//------------------------------------------------------------//\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"DeleteCustomer : Status code is \" + statusCodeForbidden, function () {\r",
											"    pm.response.to.have.status(statusCodeForbidden);\r",
											"});\r",
											"\r",
											"pm.test('DeleteCustomer : operationStatus code is '+'\"'+ resultCodeRoleInvalid +'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeRoleInvalid);\r",
											"});\r",
											"\r",
											"pm.test('DeleteCustomer : operationStatus Description is '+'\"'+ resultDescriptionRoleInvalid+'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionRoleInvalid);\r",
											"});\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"// RemovePartner\r",
											" RemovePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemovePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemovePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsRemovePartner = {\r",
											"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemovePartner,\r",
											"            body: httpRequestRemovePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request RemovePartner');\r",
											"        let response = await reqPromise(optionsRemovePartner);\r",
											"        let jsonDataRemovePartner = await response.json();\r",
											"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
											"    \r",
											"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemovePartner is Success\r",
											"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// RemoveAccount\r",
											" RemoveAccount = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemoveAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemoveAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsRemoveAccount = {\r",
											"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemoveAccount,\r",
											"            body: httpRequestRemoveAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request RemoveAccount');\r",
											"        let response = await reqPromise(optionsRemoveAccount);\r",
											"        let jsonDataRemoveAccount = await response.json();\r",
											"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
											"    \r",
											"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemoveAccount is Success\r",
											"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
											"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// RemoveThing\r",
											" RemoveThing = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemoveThing = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThing + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThing,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemoveThing = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\")\r",
											"            })\r",
											"        };\r",
											"\r",
											"        let optionsRemoveThing = {\r",
											"            url: url + provisioningapis + urlThingRemoveThing,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemoveThing,\r",
											"            body: httpRequestRemoveThing\r",
											"        };\r",
											"\r",
											"        // console.log('request RemoveThing');\r",
											"        let response = await reqPromise(optionsRemoveThing);\r",
											"        let jsonDataRemoveThing = await response.json();\r",
											"        // console.log('jsonDataRemoveThing',jsonDataRemoveThing)\r",
											"    \r",
											"        let operationStatusRemoveThing = await jsonDataRemoveThing.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemoveThing : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemoveThing : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemoveThing).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemoveThing is Success\r",
											"        pm.test('RemoveThing : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThing+'\"', function () {\r",
											"            pm.expect(operationStatusRemoveThing).to.have.property('Description', resultDescriptionRemoveThing);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// RemoveThingStateInfo\r",
											" RemoveThingStateInfo = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemoveThingStateInfo = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThingStateInfo + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThingStateInfo,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
											"            'Accept':Accept\r",
											"            \r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemoveThingStateInfo = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\"),\r",
											"                \"stateType\": fieldDataValue.CreateThingStateInfo.Type_Report, //Report\r",
											"                \"stateKey\": fieldDataValue.CreateThingStateInfo.SensorKey //Temp\r",
											"            })\r",
											"        };\r",
											"\r",
											"        let optionsRemoveThingStateInfo = {\r",
											"            url: url + provisioningapis + urlThingRemoveThingStateInfo,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemoveThingStateInfo,\r",
											"            body: httpRequestRemoveThingStateInfo\r",
											"        };\r",
											"\r",
											"        // console.log('response RemoveThingStateInfo');\r",
											"        let response = await reqPromise(optionsRemoveThingStateInfo);\r",
											"        let jsonDataRemoveThingStateInfo = await response.json();\r",
											"        // console.log('jsonDataRemoveThing',jsonDataRemoveThingStateInfo)\r",
											"    \r",
											"        let operationStatusRemoveThingStateInfo = await jsonDataRemoveThingStateInfo.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemoveThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemoveThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemoveThingStateInfo is Success\r",
											"        pm.test('RemoveThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThingStateInfo+'\"', function () {\r",
											"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Description', resultDescriptionRemoveThingStateInfo);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"//---------------- LogDefaultValue --------------//\r",
											"//set variable to LogDefaultValue JSON.parse\r",
											"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
											"// console.log('LogDefaultValue',LogDefaultValue);\r",
											"//---------------- set globals Other --------------//\r",
											"\r",
											"var SearchLog = LogDefaultValue.SearchLog;\r",
											"// console.log('SearchLog',SearchLog);\r",
											"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
											"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
											"var kbn_version = SearchLog.header.kbn_version;\r",
											"var authorization = SearchLog.header.Authorization;\r",
											"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
											"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
											"var namespace = LogDefaultValue.Other.namespace;\r",
											"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
											"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
											"var header_x_ais_username = LogDefaultValue.Other.header_x_ais_username;\r",
											"var header_x_ais_accountkey = LogDefaultValue.Other.header_x_ais_accountkey;\r",
											"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
											"var methodDelete = LogDefaultValue.Other.methodDelete;\r",
											"\r",
											"// Detail\r",
											"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
											"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
											"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
											"\r",
											"// Summary\r",
											"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
											"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
											"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
											"\r",
											"// ProvisioningAPIs [Purchase]\r",
											"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
											"var cmdName = LogDefaultValue.Provisioning.DeleteCustomer.cmdNameDeleteCustomer;\r",
											"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
											"var containerId = LogDefaultValue.Provisioning.containerId;\r",
											"var requestObjectUrlStaging = LogDefaultValue.Provisioning.DeleteCustomer.requestObjectUrlDeleteCustomerMgStaging;\r",
											"\r",
											"// Check CDR (Summary Log) and EDR (Detail Log)\r",
											"SearchLogFindTid = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSearchLogFindTid = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = x_ais_OrderRef_DeleteCustomer + current_timestamp;\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestSearchLogFindTid = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"\r",
											"        let optionsSearchLogFindTid = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptSearchLogFindTid,\r",
											"            body: httpRequestSearchLogFindTid\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsSearchLogFindTid);\r",
											"        let jsonDataSearchLogFindTid = await response.json();\r",
											"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
											"\r",
											"        // //200\r",
											"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"\r",
											"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
											"        console.log('hits',hits)\r",
											"  \r",
											"        // find tid\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            // let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"        \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            if(applicationNameValue == applicationName){\r",
											"                let sessionId = hits[i]._source.cauldron.sessionId;\r",
											"                pm.environment.set(\"sessionId\", sessionId);\r",
											"                break;\r",
											"           }\r",
											"        }\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"CheckLog = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCheckLog = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = pm.environment.get(\"sessionId\");\r",
											"\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestCheckLog = {\r",
											"            mode: 'raw',\r",
											"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"        let optionsCheckLog = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptCheckLog,\r",
											"            body: httpRequestCheckLog\r",
											"        }; \r",
											"        let response = await reqPromise(optionsCheckLog);\r",
											"        let jsonDataCheckLog = await response.json();\r",
											"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
											"        \r",
											"        // //200\r",
											"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });     \r",
											"        \r",
											"        let hits = jsonDataCheckLog.hits.hits\r",
											"        console.log('hits',hits)\r",
											"  \r",
											"        // find logType\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            //  let logType = hits[i]._source.cauldron.logType\r",
											"            let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"           \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            \r",
											"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
											"            // console.log('resultDataLog',resultDataLog)\r",
											"\r",
											"            let tidControl = x_ais_OrderRef_DeleteCustomer + current_timestamp;\r",
											"            // console.log(tidControl);\r",
											"            if(applicationNameValue == applicationName){\r",
											"                 \r",
											"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ProvisioningAPIs\r",
											"                    pm.test(\"Check Summary Log : DeleteCustomer\" , function () {\r",
											"                        console.log(\"======== Check Summary Log ( Expected = Actual) [DeleteCustomer] ==================\");\r",
											"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
											"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
											"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeRoleInvalid);\r",
											"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionRoleInvalid);\r",
											"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
											"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
											"                        console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
											"\r",
											"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
											"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
											"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeRoleInvalid); \r",
											"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionRoleInvalid); \r",
											"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
											"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
											"                        pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
											"                    }); \r",
											"                }\r",
											"\r",
											"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ProvisioningAPIs\r",
											"\r",
											"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
											"                    // console.log('endPointNameValue ',endPointNameValue)\r",
											"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [DeleteCustomer]\", function () {\r",
											"                        console.log(\"======== Check Detail Log ( Expected = Actual) [DeleteCustomer] ==================\");\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
											"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
											"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
											"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
											"\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
											"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
											"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
											"\r",
											"                        if( endPointNameValue == endPointNameProvisioningAPIs){     //\"endPointName\":\"ProvisioningAPIs\"\r",
											"                            console.log(\"custom1.endPointName : \" + resultDataLog.custom1.endPointName + \" = \" + endPointNameProvisioningAPIs);\r",
											"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs); \r",
											"                        \r",
											"                            // check requestObject\r",
											"                            // \"requestObject\":\"{\\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Customer/DeleteCustomer\\\",\\\"method\\\":\\\"DELETE\\\",\\\"headers\\\":{\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"DeleteCustomer_202102172002683\\\",\\\"x-ais-orderdesc\\\":\\\"DeleteCustomer\\\",\\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAGJjc8t2ZfqZcNNvBKwuLmPMV/NLO2GPEwLJG3c2Ik+TEIlAkkY2KW0\\\"},\\\"body\\\":{\\\"customerId\\\":\\\"602d1a0bd441170001999d6fxx\\\"}}}\"\r",
											"                            \r",
											"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
											"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
											"                            let url = urlCheckLog + requestObjectUrlStaging; \r",
											"                            let x_ais_orderref = x_ais_OrderRef_DeleteCustomer + current_timestamp;\r",
											"                            let x_ais_orderdesc = x_ais_OrderDesc_DeleteCustomer;\r",
											"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken2\");\r",
											"                            let x_ais_userName = x_ais_UserName_AisPartner;\r",
											"                            \r",
											"                            let customerId = pm.environment.get(\"GetResponse_CustomerId\");\r",
											"                            \r",
											"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
											"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodDelete);\r",
											"                            console.log(\"headers.x_ais_userName : \" + jsonParseRequestObject.headers[header_x_ais_username] + \" = \" + x_ais_userName);\r",
											"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
											"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
											"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
											"                                                                                                                                                             \r",
											"                            pm.expect(jsonParseRequestObject.url).to.eql(url);\r",
											"                            pm.expect(jsonParseRequestObject.method).to.eql(methodDelete);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_username]).to.eql(x_ais_userName);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
											"\r",
											"                            console.log(\"resquest.body.customerId : \" + jsonParseRequestObject.body.customerId + \" = \" + customerId);\r",
											"\r",
											"                            pm.expect(jsonParseRequestObject.body.customerId).to.eql(customerId);\r",
											"\r",
											"                            // check responseObject\r",
											"                            // \"responseObject\":\"{\\\"OperationStatus\\\":{\\\"Code\\\":\\\"40308\\\",\\\"Description\\\":\\\"Role Invalid\\\"}}\"\r",
											"\r",
											"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
											"                            // console.log('jsonParseResponseObject',jsonParseResponseObject);\r",
											"\r",
											"                            console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeRoleInvalid);\r",
											"                            console.log(\"response.OperationStatus.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionRoleInvalid);\r",
											"\r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeRoleInvalid);  \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionRoleInvalid);  \r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"setTimeout(function(){SearchLogFindTid();}, 10000); \r",
											"setTimeout(function(){CheckLog();}, 30000); \r",
											"\r",
											"setTimeout(function(){RemoveThingStateInfo();}, 40000); \r",
											"setTimeout(function(){RemoveThing();}, 50000); \r",
											"setTimeout(function(){RemoveAccount();}, 60000); \r",
											"setTimeout(function(){RemovePartner();}, 70000); \r",
											"\r",
											"setTimeout(function(){\r",
											"pm.environment.unset(\"current_timestamp\");\r",
											"pm.environment.unset(\"AccessToken\");\r",
											"pm.environment.unset(\"AccessToken2\");\r",
											"pm.environment.unset(\"random_number\");\r",
											"pm.environment.unset(\"PartnerName\");\r",
											"pm.environment.unset(\"MerchantContact\");\r",
											"pm.environment.unset(\"CPID\");\r",
											"pm.environment.unset(\"GetResponse_PartnerId\");\r",
											"pm.environment.unset(\"AccountName\");\r",
											"pm.environment.unset(\"GetResponse_AccountName\");\r",
											"pm.environment.unset(\"GetResponse_AccountId\");\r",
											"pm.environment.unset(\"random_IM\");\r",
											"pm.environment.unset(\"random_ICCID\");\r",
											"pm.environment.unset(\"ThingName\");\r",
											"pm.environment.unset(\"GetResponse_ThingID\");\r",
											"pm.environment.unset(\"random_Sensor\");\r",
											"pm.environment.unset(\"sessionId\");\r",
											"pm.environment.unset(\"GetResponse_CustomerId\");\r",
											"pm.environment.unset(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseKey\");\r",
											"pm.environment.unset(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseValue\");\r",
											"pm.environment.unset(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseName\");\r",
											"pm.environment.unset(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseType\");\r",
											"pm.environment.unset(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseState\");\r",
											"pm.environment.unset(\"Value_DeleteCustomer_Create_ChargingStatus\");\r",
											"}, 75000);\r",
											"setTimeout(function(){}, 80000); "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var Username = pm.environment.get(\"Username\");\r",
											"var Password = pm.environment.get(\"Password\");\r",
											"var Username_Supplier = pm.environment.get(\"Username_Supplier\");\r",
											"var Password_Supplier = pm.environment.get(\"Password_Supplier\");\r",
											"\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"pm.environment.set(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseKey\",fieldDataValue.Provisioning.DeleteCustomer.Value_DeleteCustomer_Create_PurchaseInfo_PurchaseKey)\r",
											"pm.environment.set(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseValue\",fieldDataValue.Provisioning.DeleteCustomer.Value_DeleteCustomer_Create_PurchaseInfo_PurchaseValue)\r",
											"pm.environment.set(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseName\",fieldDataValue.Provisioning.DeleteCustomer.Value_DeleteCustomer_Create_PurchaseInfo_PurchaseName)\r",
											"pm.environment.set(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseType\",fieldDataValue.Provisioning.DeleteCustomer.Value_DeleteCustomer_Create_PurchaseInfo_PurchaseType)\r",
											"pm.environment.set(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseState\",fieldDataValue.Provisioning.DeleteCustomer.Value_DeleteCustomer_Create_PurchaseInfo_PurchaseState)\r",
											"pm.environment.set(\"Value_DeleteCustomer_Create_ChargingStatus\",fieldDataValue.Provisioning.DeleteCustomer.Value_DeleteCustomer_Create_ChargingStatus)\r",
											"\r",
											"//format YYYYMMDDHHMMSSS\r",
											"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
											"// console.log('currentTmestamp',currentTmestamp);\r",
											"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- statusCodeList --------------//\r",
											"//set variable to statusCodeList JSON.parse\r",
											"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
											"//set global variable to statusCode 200\r",
											"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
											"//set global variable to statusCode 201\r",
											"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
											"//set global variable to statusCode 403\r",
											"pm.globals.set(\"statusCodeForbidden\", statusCodeList.statusCodeForbidden);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- resultCodeList --------------//\r",
											"//set variable to resultCodeList JSON.parse\r",
											"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
											"//set global variable to resultCode \"20000\"\r",
											"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
											"//set global variable to resultCode \"20100\"\r",
											"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
											"//set global variable to resultCode \"40308\"\r",
											"pm.globals.set(\"resultCodeRoleInvalid\", resultCodeList.resultCodeRoleInvalid);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- resultDescriptionSuccessList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
											"//set global variable to resultDescription \"SignInProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
											"//set global variable to resultDescription \"ValidateTokenProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionValidateToken\", resultDescriptionSuccessList.resultDescriptionValidateToken);\r",
											"//set global variable to resultDescription \"CreatePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
											"//set global variable to resultDescription \"CreateAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
											"//set global variable to resultDescription \"CreateThing is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreateThing\", resultDescriptionSuccessList.resultDescriptionCreateThing);\r",
											"//set global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreateThingStateInfo\", resultDescriptionSuccessList.resultDescriptionCreateThingStateInfo);\r",
											"//set global variable to resultDescription \"RemovePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
											"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
											"//set global variable to resultDescription \"RemoveThing is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveThing\", resultDescriptionSuccessList.resultDescriptionRemoveThing);\r",
											"//set global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveThingStateInfo\", resultDescriptionSuccessList.resultDescriptionRemoveThingStateInfo);\r",
											"//set global variable to resultDescription \"CreatePurchase is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreatePurchase\", resultDescriptionSuccessList.resultDescriptionCreatePurchase);\r",
											"//set global variable to resultDescription \"removeCustomer is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveCustomer\", resultDescriptionSuccessList.resultDescriptionRemoveCustomer);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- resultDescriptionErrorList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
											"//set global variable to resultDescription \"Role Invalid\"\r",
											"pm.globals.set(\"resultDescriptionRoleInvalid\", resultDescriptionErrorList.resultDescriptionRoleInvalid);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- HeaderList --------------//\r",
											"//set variable to HeaderList JSON.parse\r",
											"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
											"//---------------- set globals Other --------------//\r",
											"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
											"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
											"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
											"//set global variable to kbn-versio \"7.5.1\"\r",
											"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Signin_ --------------//\r",
											"//set global variable to x_ais_OrderRef \"Signin_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
											"//set global variable to x_ais_OrderRef \"ValidateToken\"\r",
											"pm.globals.set(\"x_ais_OrderRef_ValidateToken\", HeaderList.Signin.x_ais_OrderRef_ValidateToken);\r",
											"//set global variable to x_ais_OrderDesc \"ValidateToken\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_ValidateToken\", HeaderList.Signin.x_ais_OrderDesc_ValidateToken);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals CreatePartner --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
											"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
											"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
											"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals CreateAccount --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
											"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
											"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
											"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Thing --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreateThing_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreateThing\", HeaderList.Thing.x_ais_OrderRef_CreateThing);\r",
											"//set global variable to x_ais_OrderDesc \"CreateThing\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreateThing\", HeaderList.Thing.x_ais_OrderDesc_CreateThing);\r",
											"//set global variable to x_ais_OrderRef \"RemoveThing_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemoveThing\", HeaderList.Thing.x_ais_OrderRef_RemoveThing);\r",
											"//set global variable to x_ais_OrderDesc \"RemoveThing\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemoveThing\", HeaderList.Thing.x_ais_OrderDesc_RemoveThing);\r",
											"//set global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_CreateThingStateInfo);\r",
											"//set global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_CreateThingStateInfo);\r",
											"//set global variable to x_ais_OrderRef \"RemoveThingStateInfo\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_RemoveThingStateInfo);\r",
											"//set global variable to x_ais_OrderDesc \"RemoveThingStateInfo_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_RemoveThingStateInfo);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Purchase --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreatePurchase_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreatePurchase\", HeaderList.Purchase.x_ais_OrderRef_CreatePurchase);\r",
											"//set global variable to x_ais_OrderDesc \"CreatePurchase\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreatePurchase\", HeaderList.Purchase.x_ais_OrderDesc_CreatePurchase);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals DeleteCustomer --------------//\r",
											"//set global variable to x_ais_OrderRef \"DeleteCustomer_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_DeleteCustomer\", HeaderList.Customer.x_ais_OrderRef_DeleteCustomer);\r",
											"//set global variable to x_ais_OrderRef \"DeleteCustomerfail_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_DeleteCustomer_fail\", HeaderList.Customer.x_ais_OrderRef_DeleteCustomer_fail);\r",
											"//set global variable to x_ais_OrderDesc \"DeleteCustomer\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_DeleteCustomer\", HeaderList.Customer.x_ais_OrderDesc_DeleteCustomer);\r",
											"//------------------------------------------------------------//\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultCode \"20100\"\r",
											"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
											"//get global variable to resultDescription \"SignInProcess is Success\"\r",
											"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
											"//get global variable to resultDescription \"ValidateTokenProcess is Success\"\r",
											"var resultDescriptionValidateToken = pm.globals.get(\"resultDescriptionValidateToken\");\r",
											"//get global variable to resultDescription \"CreatePartner is Success\"\r",
											"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
											"//get global variable to resultDescription \"CreateAccount is Success\"\r",
											"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
											"//get global variable to resultDescription \"CreateThing is Success\"\r",
											"var resultDescriptionCreateThing = pm.globals.get(\"resultDescriptionCreateThing\");\r",
											"//get global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
											"var resultDescriptionCreateThingStateInfo = pm.globals.get(\"resultDescriptionCreateThingStateInfo\");\r",
											"//get global variable to resultDescription \"CreatePurchase is Success\"\r",
											"var resultDescriptionCreatePurchase = pm.globals.get(\"resultDescriptionCreatePurchase\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- urlRouteList --------------//\r",
											"//set variable to urlRouteList JSON.parse\r",
											"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
											"//---------------- set url Create --------------//\r",
											"//set global variable to url \"/api/v1/auth/signin\"\r",
											"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
											"//set global variable to url \"/api/v1/auth/ValidateToken\"\r",
											"pm.globals.set(\"urlValidateToken\", urlRouteList.Signin.urlValidateToken);\r",
											"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
											"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
											"//set global variable to url \"/api/v1/Thing/CreateThing\"\r",
											"pm.globals.set(\"urlThingCreateThing\", urlRouteList.Thing.urlThingCreateThing);\r",
											"//set global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
											"pm.globals.set(\"urlThingCreateThingStateInfo\", urlRouteList.Thing.urlThingCreateThingStateInfo);\r",
											"//set global variable to url \"/api/v1/Purchase/CreatePurchase\"\r",
											"pm.globals.set(\"urlCreatePurchase\", urlRouteList.Purchase.urlCreatePurchase);\r",
											"//---------------- get url Create --------------//\r",
											"//get global variable to url \"/api/v1/auth/signin\"\r",
											"var urlSignin = pm.globals.get(\"urlSignin\");\r",
											"//get global variable to url \"/api/v1/auth/ValidateToken\"\r",
											"var urlValidateToken = pm.globals.get(\"urlValidateToken\");\r",
											"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
											"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
											"//get global variable to url \"/api/v1/Thing/CreateThing\"\r",
											"var urlThingCreateThing = pm.globals.get(\"urlThingCreateThing\");\r",
											"//get global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
											"var urlThingCreateThingStateInfo = pm.globals.get(\"urlThingCreateThingStateInfo\");\r",
											"//get global variable to url \"/api/v1/Purchase/CreatePurchase\"\r",
											"var urlCreatePurchase = pm.globals.get(\"urlCreatePurchase\");\r",
											"//---------------- set url Remove --------------//\r",
											"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
											"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
											"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
											"//set global variable to url \"/api/v1/Thing/RemoveThing\"\r",
											"pm.globals.set(\"urlThingRemoveThing\", urlRouteList.Thing.urlThingRemoveThing);\r",
											"//set global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
											"pm.globals.set(\"urlThingRemoveThingStateInfo\", urlRouteList.Thing.urlThingRemoveThingStateInfo);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"Signin_\"\r",
											"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
											"//get global variable to x_ais_OrderRef \"ValidateToken_\"\r",
											"var x_ais_OrderRef_ValidateToken = pm.globals.get(\"x_ais_OrderRef_ValidateToken\");\r",
											"//get global variable to x_ais_OrderDesc \"ValidateToken\"\r",
											"var x_ais_OrderDesc_ValidateToken = pm.globals.get(\"x_ais_OrderDesc_ValidateToken\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Thing --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreateThing_\"\r",
											"var x_ais_OrderRef_CreateThing = pm.globals.get(\"x_ais_OrderRef_CreateThing\");\r",
											"//get global variable to x_ais_OrderDesc \"CreateThing\"\r",
											"var x_ais_OrderDesc_CreateThing = pm.globals.get(\"x_ais_OrderDesc_CreateThing\");\r",
											"//get global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
											"var x_ais_OrderRef_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderRef_CreateThingStateInfo\");\r",
											"//get global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
											"var x_ais_OrderDesc_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_CreateThingStateInfo\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Purchase --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreatePurchase_\"\r",
											"var x_ais_OrderRef_CreatePurchase = pm.globals.get(\"x_ais_OrderRef_CreatePurchase\");\r",
											"//get global variable to x_ais_OrderDesc \"CreatePurchase\"\r",
											"var x_ais_OrderDesc_CreatePurchase = pm.globals.get(\"x_ais_OrderDesc_CreatePurchase\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"// Signin get token\r",
											" Signin = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username,\r",
											"                password:Password\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"\r",
											"        //set random_number\r",
											"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
											"        //set PartnerName\r",
											"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
											"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
											"        //set MerchantContact\r",
											"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
											"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
											"        // set CPID\r",
											"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
											"        pm.environment.set(\"CPID\", CPIDValue)\r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// ValidateToken\r",
											" ValidateToken = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptValidateToken = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_ValidateToken + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_ValidateToken,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestValidateToken = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                \"AccessToken\": pm.environment.get(\"AccessToken\")\r",
											"            })\r",
											"        };  \r",
											"        \r",
											"        let optionsValidateToken = {\r",
											"            url: url + provisioningapis + urlValidateToken,\r",
											"            method: 'POST',\r",
											"            header: headersOptValidateToken,\r",
											"            body: httpRequestValidateToken\r",
											"        };\r",
											"        // console.log('request ValidateToken');\r",
											"        let response = await reqPromise(optionsValidateToken);\r",
											"        let jsonDataValidateToken = await response.json();\r",
											"        let operationStatusValidateToken = await jsonDataValidateToken.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"ValidateToken : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('ValidateToken : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusValidateToken).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // ValidateTokenProcess is Success\r",
											"        pm.test('ValidateToken : OperationStatus Description is '+'\"'+ resultDescriptionValidateToken+'\"', function () {\r",
											"            pm.expect(operationStatusValidateToken).to.have.property('Description', resultDescriptionValidateToken);\r",
											"        });\r",
											" \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreatePartner\r",
											" CreatePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreatePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreatePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
											"                \"PartnerType\": [\r",
											"                    \"Supplier\",\r",
											"                    \"Customer\"\r",
											"                ],\r",
											"                \"PartnerDetail\": {\r",
											"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
											"                    \"CPID\": pm.environment.get(\"CPID\")\r",
											"                },\r",
											"                \"Property\": {\r",
											"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
											"                }\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsCreatePartner = {\r",
											"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreatePartner,\r",
											"            body: httpRequestCreatePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsCreatePartner);\r",
											"        let jsonDataCreatePartner = await response.json();\r",
											"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
											"    \r",
											"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreatePartner is Success\r",
											"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
											"        });\r",
											"\r",
											"        //GetResponse_PartnerId\r",
											"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
											"\r",
											"        //GetResponse_CustomerId\r",
											"        pm.environment.set(\"GetResponse_CustomerId\", jsonDataCreatePartner.PartnerInfo.CustomerId);\r",
											"        \r",
											"        //Accountname\r",
											"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
											"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreateAccount\r",
											" CreateAccount = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreateAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreateAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
											"                })\r",
											"        };\r",
											"        \r",
											"        let optionsCreateAccount = {\r",
											"            url: url + provisioningapis + urlAccountCreateAccount,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreateAccount,\r",
											"            body: httpRequestCreateAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request CreateAccount');\r",
											"        let response = await reqPromise(optionsCreateAccount);\r",
											"        let jsonDataCreateAccount = await response.json();\r",
											"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
											"    \r",
											"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreateAccount : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreateAccount is Success\r",
											"        pm.test('CreateAccount : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
											"        });\r",
											"        // GetResponse_AccountName\r",
											"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
											"        // GetResponse_AccountId\r",
											"        pm.environment.set(\"GetResponse_AccountId\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
											"        // random_IM\r",
											"        pm.environment.set(\"random_IM\", _.random(10000000, 99999999)+\" \"+_.random(1000000, 9999999))\r",
											"        // random_ICCID\r",
											"        pm.environment.set(\"random_ICCID\", _.random(1000000, 9999999)+\" \"+_.random(100000, 999999))\r",
											"        // random_number\r",
											"        pm.environment.set(\"random_number\",pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
											"        //ThingName\r",
											"        let thingNameValue = fieldDataValue.Provisioning.Thing.ThingNameValue; // \"QAtestthing_T01\"\r",
											"        pm.environment.set(\"ThingName\", thingNameValue + pm.environment.get(\"random_number\"))\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreateThing\r",
											" CreateThing = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreateThing = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreateThing+ current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateThing,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreateThing = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"ThingName\": pm.environment.get(\"ThingName\"),\r",
											"                \"IMEI\": pm.environment.get(\"random_IM\"),\r",
											"                \"IMSI\": pm.environment.get(\"random_IM\"),\r",
											"                \"ICCID\": pm.environment.get(\"random_ICCID\"),\r",
											"                \"RouteUrl\": fieldDataValue.Provisioning.Thing.CreateThing.RouteUrlValue , //[\"http://10.12.3.4:2019/api/information/AddInformation\"]\r",
											"                \"RouteInfo\": {\r",
											"                    \"MIMO_ID\": fieldDataValue.Provisioning.Thing.CreateThing.RouteInfoMIMOIDValue , //\"606edada\"\r",
											"                    \"MIMO_SerialNo\": fieldDataValue.Provisioning.Thing.CreateThing.RouteInfoMIMOSerialNoValue //5466758878\r",
											"                },\r",
											"                \"RouteFlag\": {\r",
											"                    \"ThingName\": fieldDataValue.Provisioning.Thing.CreateThing.RouteFlagThingNameValue , //true\r",
											"                    \"ThingToken\": fieldDataValue.Provisioning.Thing.CreateThing.RouteFlagThingTokenValue, //true\r",
											"                    \"IMEI\": fieldDataValue.Provisioning.Thing.CreateThing.RouteFlagIMEIValue, //true\r",
											"                    \"ICCID\": fieldDataValue.Provisioning.Thing.CreateThing.RouteFlagICCIDValue, //true\r",
											"                    \"RouteInfo\": fieldDataValue.Provisioning.Thing.CreateThing.RouteFlagRouteInfoValue //true\r",
											"                }\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsCreateThing = {\r",
											"            url: url + provisioningapis + urlThingCreateThing,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreateThing,\r",
											"            body: httpRequestCreateThing\r",
											"        };\r",
											"\r",
											"        // console.log('request CreateThing');\r",
											"        let response = await reqPromise(optionsCreateThing);\r",
											"        let jsonDataCreateThing = await response.json();\r",
											"        // console.log('jsonDataCreateThing',jsonDataCreateThing)\r",
											"    \r",
											"        let operationStatusCreateThing = await jsonDataCreateThing.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreateThing : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreateThing : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreateThing).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreateThing is Success\r",
											"        pm.test('CreateThing : OperationStatus Description is '+'\"'+ resultDescriptionCreateThing+'\"', function () {\r",
											"            pm.expect(operationStatusCreateThing).to.have.property('Description', resultDescriptionCreateThing);\r",
											"        });\r",
											"\r",
											"        pm.environment.set(\"GetResponse_ThingID\",jsonDataCreateThing.ThingInfo.ThingId)\r",
											"\r",
											"        //Get Random Sensor \r",
											"        pm.environment.set(\"random_Sensor\", _.random(100, 999))\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreateThingStateInfo\r",
											" CreateThingStateInfo = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreateThingStateInfo = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreateThingStateInfo+ current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateThingStateInfo,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        // {\"Temp\" : pm.environment.get(\"random_Sensor\")}\r",
											"        let sensorValue = {};\r",
											"        sensorValue[fieldDataValue.CreateThingStateInfo.SensorKey] = pm.environment.get(\"random_Sensor\");\r",
											"        // console.log('sensorValue',sensorValue);\r",
											"        \r",
											"        let httpRequestCreateThingStateInfo = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"ThingId\": [\r",
											"                    pm.environment.get(\"GetResponse_ThingID\")\r",
											"                ],\r",
											"                \"Type\": fieldDataValue.CreateThingStateInfo.Type_Report,\r",
											"                \"Sensor\": sensorValue\r",
											"            })\r",
											"        };\r",
											"    \r",
											"        let optionsCreateThingStateInfo = {\r",
											"            url: url + provisioningapis + urlThingCreateThingStateInfo,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreateThingStateInfo,\r",
											"            body: httpRequestCreateThingStateInfo\r",
											"        };\r",
											"\r",
											"        // console.log('request CreateThingStateInfo');\r",
											"        let response = await reqPromise(optionsCreateThingStateInfo);\r",
											"        let jsonDataCreateThingStateInfo = await response.json();\r",
											"        // console.log('jsonDataCreateThingStateInfo',jsonDataCreateThingStateInfo)\r",
											"    \r",
											"        let operationStatusCreateThingStateInfo = await jsonDataCreateThingStateInfo.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"CreateThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('CreateThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //CreateThingStateInfo is Success\r",
											"        pm.test('CreateThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionCreateThingStateInfo+'\"', function () {\r",
											"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Description', resultDescriptionCreateThingStateInfo);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreatePurchase\r",
											"CreatePurchase = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreatePurchase = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreatePurchase+ current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePurchase,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'Accept':Accept\r",
											"        };\r",
											"                \r",
											"        let httpRequestCreatePurchase = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"customerId\": pm.environment.get(\"GetResponse_CustomerId\"),\r",
											"                \"PurchaseInfo\": {\r",
											"                    \"PurchaseKey\": pm.environment.get(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseKey\"),\r",
											"                    \"PurchaseValue\": pm.environment.get(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseValue\"),\r",
											"                    \"PurchaseName\": pm.environment.get(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseName\"),\r",
											"                    \"PurchaseType\": pm.environment.get(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseType\"), //Volume\r",
											"                    \"PurchaseState\": pm.environment.get(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseState\") //Active\r",
											"                },\r",
											"                \"ChargingStatus\": pm.environment.get(\"Value_DeleteCustomer_Create_ChargingStatus\") //Enable\r",
											"            })\r",
											"        };\r",
											"    \r",
											"        let optionsCreatePurchase = {\r",
											"            url: url + provisioningapis + urlCreatePurchase,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreatePurchase,\r",
											"            body: httpRequestCreatePurchase\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePurchase');\r",
											"        let response = await reqPromise(optionsCreatePurchase);\r",
											"        let jsonDataCreatePurchase = await response.json();\r",
											"        // console.log('jsonDataCreatePurchase',jsonDataCreatePurchase)\r",
											"    \r",
											"        let operationStatusCreatePurchase = await jsonDataCreatePurchase.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"CreatePurchase : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('CreatePurchase : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreatePurchase).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //CreatePurchase is Success\r",
											"        pm.test('CreatePurchase : OperationStatus Description is '+'\"'+ resultDescriptionCreatePurchase+'\"', function () {\r",
											"            pm.expect(operationStatusCreatePurchase).to.have.property('Description', resultDescriptionCreatePurchase);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// Signin get token\r",
											" Signin2 = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username_Supplier,\r",
											"                password:Password_Supplier\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken2\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"Signin();\r",
											"setTimeout(async function(){await ValidateToken();}, 1000);\r",
											"setTimeout(async function(){await CreatePartner();}, 2000); \r",
											"setTimeout(async function(){await CreateAccount();}, 3000); \r",
											"setTimeout(async function(){await CreateThing();}, 4000); \r",
											"setTimeout(async function(){await CreateThingStateInfo();}, 6000); \r",
											"setTimeout(async function(){await CreatePurchase();}, 7000); \r",
											"setTimeout(async function(){await Signin2();}, 8000);\r",
											"setTimeout(async function(){}, 9000);  "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-ais-UserName",
										"type": "text",
										"value": "{{x_ais_UserName_AisPartner}}"
									},
									{
										"key": "x-ais-OrderRef",
										"value": "{{x_ais_OrderRef_DeleteCustomer}}{{current_timestamp}}"
									},
									{
										"key": "x-ais-OrderDesc",
										"type": "text",
										"value": "{{x_ais_OrderDesc_DeleteCustomer}}"
									},
									{
										"key": "x-ais-AccessToken",
										"value": "{{Bearer}} {{AccessToken2}}"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"customerId\": \"{{GetResponse_CustomerId}}\"\r\n}"
								},
								"url": {
									"raw": "{{url}}{{provisioningapis}}/api/v1/Customer/DeleteCustomer",
									"host": [
										"{{url}}{{provisioningapis}}"
									],
									"path": [
										"api",
										"v1",
										"Customer",
										"DeleteCustomer"
									]
								},
								"description": "Type:Desire"
							},
							"response": []
						},
						{
							"name": "DeleteCustomer_TST_F73_1_1_008_Error_Customer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Thing --------------//\r",
											"//get global variable to xAisOrderRef \"RemoveThing_\"\r",
											"var x_ais_OrderRef_RemoveThing = pm.globals.get(\"x_ais_OrderRef_RemoveThing\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveThing\"\r",
											"var x_ais_OrderDesc_RemoveThing = pm.globals.get(\"x_ais_OrderDesc_RemoveThing\");\r",
											"//get global variable to x_ais_OrderRef \"RemoveThingStateInfo_\" \r",
											"var x_ais_OrderDesc_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_RemoveThingStateInfo\");\r",
											"//get global variable to x_ais_OrderDesc \"RemoveThingStateInfo\"\r",
											"var x_ais_OrderRef_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderRef_RemoveThingStateInfo\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Purchase --------------//\r",
											"//get global variable to x_ais_OrderRef \"DeleteCustomer_\"\r",
											"var x_ais_OrderRef_DeleteCustomer = pm.globals.get(\"x_ais_OrderRef_DeleteCustomer\");\r",
											"//get global variable to x_ais_OrderDesc \"DeleteCustomer\"\r",
											"var x_ais_OrderDesc_DeleteCustomer = pm.globals.get(\"x_ais_OrderDesc_DeleteCustomer\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get url Remove --------------//\r",
											"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
											"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
											"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
											"//get global variable to url \"/api/v1/Thing/RemoveThing\"\r",
											"var urlThingRemoveThing = pm.globals.get(\"urlThingRemoveThing\");\r",
											"//get global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
											"var urlThingRemoveThingStateInfo = pm.globals.get(\"urlThingRemoveThingStateInfo\");\r",
											"//------------------------------------------------------------//\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultCode \"20100\"\r",
											"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
											"//get global variable to resultDescription \"RemovePartner is Success\"\r",
											"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
											"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
											"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
											"//get global variable to resultDescription \"RemoveThing is Success\"\r",
											"var resultDescriptionRemoveThing = pm.globals.get(\"resultDescriptionRemoveThing\");\r",
											"//get global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
											"var resultDescriptionRemoveThingStateInfo = pm.globals.get(\"resultDescriptionRemoveThingStateInfo\");\r",
											"//------------------------------------------------------------//\r",
											"//get global variable to statusCode 403\r",
											"var statusCodeForbidden = pm.globals.get(\"statusCodeForbidden\");\r",
											"//get global variable to resultCode \"40308\"\r",
											"var resultCodeRoleInvalid = pm.globals.get(\"resultCodeRoleInvalid\");\r",
											"//get global variable to resultDescription \"Role Invalid\"\r",
											"var resultDescriptionRoleInvalid = pm.globals.get(\"resultDescriptionRoleInvalid\");\r",
											"//------------------------------------------------------------//\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"DeleteCustomer : Status code is \" + statusCodeForbidden, function () {\r",
											"    pm.response.to.have.status(statusCodeForbidden);\r",
											"});\r",
											"\r",
											"pm.test('DeleteCustomer : operationStatus code is '+'\"'+ resultCodeRoleInvalid +'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeRoleInvalid);\r",
											"});\r",
											"\r",
											"pm.test('DeleteCustomer : operationStatus Description is '+'\"'+ resultDescriptionRoleInvalid+'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionRoleInvalid);\r",
											"});\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"// RemovePartner\r",
											" RemovePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemovePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemovePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsRemovePartner = {\r",
											"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemovePartner,\r",
											"            body: httpRequestRemovePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request RemovePartner');\r",
											"        let response = await reqPromise(optionsRemovePartner);\r",
											"        let jsonDataRemovePartner = await response.json();\r",
											"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
											"    \r",
											"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemovePartner is Success\r",
											"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
											"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// RemoveAccount\r",
											" RemoveAccount = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemoveAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemoveAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsRemoveAccount = {\r",
											"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemoveAccount,\r",
											"            body: httpRequestRemoveAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request RemoveAccount');\r",
											"        let response = await reqPromise(optionsRemoveAccount);\r",
											"        let jsonDataRemoveAccount = await response.json();\r",
											"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
											"    \r",
											"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemoveAccount is Success\r",
											"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
											"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// RemoveThing\r",
											" RemoveThing = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemoveThing = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThing + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThing,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemoveThing = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\")\r",
											"            })\r",
											"        };\r",
											"\r",
											"        let optionsRemoveThing = {\r",
											"            url: url + provisioningapis + urlThingRemoveThing,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemoveThing,\r",
											"            body: httpRequestRemoveThing\r",
											"        };\r",
											"\r",
											"        // console.log('request RemoveThing');\r",
											"        let response = await reqPromise(optionsRemoveThing);\r",
											"        let jsonDataRemoveThing = await response.json();\r",
											"        // console.log('jsonDataRemoveThing',jsonDataRemoveThing)\r",
											"    \r",
											"        let operationStatusRemoveThing = await jsonDataRemoveThing.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemoveThing : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemoveThing : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemoveThing).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemoveThing is Success\r",
											"        pm.test('RemoveThing : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThing+'\"', function () {\r",
											"            pm.expect(operationStatusRemoveThing).to.have.property('Description', resultDescriptionRemoveThing);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// RemoveThingStateInfo\r",
											" RemoveThingStateInfo = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptRemoveThingStateInfo = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThingStateInfo + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThingStateInfo,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
											"            'Accept':Accept\r",
											"            \r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestRemoveThingStateInfo = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\"),\r",
											"                \"stateType\": fieldDataValue.CreateThingStateInfo.Type_Report, //Report\r",
											"                \"stateKey\": fieldDataValue.CreateThingStateInfo.SensorKey //Temp\r",
											"            })\r",
											"        };\r",
											"\r",
											"        let optionsRemoveThingStateInfo = {\r",
											"            url: url + provisioningapis + urlThingRemoveThingStateInfo,\r",
											"            method: 'DELETE',\r",
											"            header: headersOptRemoveThingStateInfo,\r",
											"            body: httpRequestRemoveThingStateInfo\r",
											"        };\r",
											"\r",
											"        // console.log('response RemoveThingStateInfo');\r",
											"        let response = await reqPromise(optionsRemoveThingStateInfo);\r",
											"        let jsonDataRemoveThingStateInfo = await response.json();\r",
											"        // console.log('jsonDataRemoveThing',jsonDataRemoveThingStateInfo)\r",
											"    \r",
											"        let operationStatusRemoveThingStateInfo = await jsonDataRemoveThingStateInfo.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"RemoveThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('RemoveThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //RemoveThingStateInfo is Success\r",
											"        pm.test('RemoveThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThingStateInfo+'\"', function () {\r",
											"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Description', resultDescriptionRemoveThingStateInfo);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"//---------------- LogDefaultValue --------------//\r",
											"//set variable to LogDefaultValue JSON.parse\r",
											"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
											"// console.log('LogDefaultValue',LogDefaultValue);\r",
											"//---------------- set globals Other --------------//\r",
											"\r",
											"var SearchLog = LogDefaultValue.SearchLog;\r",
											"// console.log('SearchLog',SearchLog);\r",
											"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
											"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
											"var kbn_version = SearchLog.header.kbn_version;\r",
											"var authorization = SearchLog.header.Authorization;\r",
											"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
											"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
											"var namespace = LogDefaultValue.Other.namespace;\r",
											"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
											"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
											"var header_x_ais_username = LogDefaultValue.Other.header_x_ais_username;\r",
											"var header_x_ais_accountkey = LogDefaultValue.Other.header_x_ais_accountkey;\r",
											"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
											"var methodDelete = LogDefaultValue.Other.methodDelete;\r",
											"\r",
											"// Detail\r",
											"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
											"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
											"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
											"\r",
											"// Summary\r",
											"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
											"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
											"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
											"\r",
											"// ProvisioningAPIs [Purchase]\r",
											"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
											"var cmdName = LogDefaultValue.Provisioning.DeleteCustomer.cmdNameDeleteCustomer;\r",
											"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
											"var containerId = LogDefaultValue.Provisioning.containerId;\r",
											"var requestObjectUrlStaging = LogDefaultValue.Provisioning.DeleteCustomer.requestObjectUrlDeleteCustomerMgStaging;\r",
											"\r",
											"// Check CDR (Summary Log) and EDR (Detail Log)\r",
											"SearchLogFindTid = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSearchLogFindTid = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = x_ais_OrderRef_DeleteCustomer + current_timestamp;\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestSearchLogFindTid = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"\r",
											"        let optionsSearchLogFindTid = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptSearchLogFindTid,\r",
											"            body: httpRequestSearchLogFindTid\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsSearchLogFindTid);\r",
											"        let jsonDataSearchLogFindTid = await response.json();\r",
											"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
											"\r",
											"        // //200\r",
											"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"\r",
											"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
											"        console.log('hits',hits)\r",
											"  \r",
											"        // find tid\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            // let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"        \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            if(applicationNameValue == applicationName){\r",
											"                let sessionId = hits[i]._source.cauldron.sessionId;\r",
											"                pm.environment.set(\"sessionId\", sessionId);\r",
											"                break;\r",
											"           }\r",
											"        }\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"CheckLog = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCheckLog = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = pm.environment.get(\"sessionId\");\r",
											"\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestCheckLog = {\r",
											"            mode: 'raw',\r",
											"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"        let optionsCheckLog = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptCheckLog,\r",
											"            body: httpRequestCheckLog\r",
											"        }; \r",
											"        let response = await reqPromise(optionsCheckLog);\r",
											"        let jsonDataCheckLog = await response.json();\r",
											"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
											"        \r",
											"        // //200\r",
											"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });     \r",
											"        \r",
											"        let hits = jsonDataCheckLog.hits.hits\r",
											"        console.log('hits',hits)\r",
											"  \r",
											"        // find logType\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            //  let logType = hits[i]._source.cauldron.logType\r",
											"            let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"           \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            \r",
											"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
											"            // console.log('resultDataLog',resultDataLog)\r",
											"\r",
											"            let tidControl = x_ais_OrderRef_DeleteCustomer + current_timestamp;\r",
											"            // console.log(tidControl);\r",
											"            if(applicationNameValue == applicationName){\r",
											"                 \r",
											"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ProvisioningAPIs\r",
											"                    pm.test(\"Check Summary Log : DeleteCustomer\" , function () {\r",
											"                        console.log(\"======== Check Summary Log ( Expected = Actual) [DeleteCustomer] ==================\");\r",
											"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
											"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
											"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeRoleInvalid);\r",
											"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionRoleInvalid);\r",
											"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
											"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
											"                        console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
											"\r",
											"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
											"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
											"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeRoleInvalid); \r",
											"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionRoleInvalid); \r",
											"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
											"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
											"                        pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
											"                    }); \r",
											"                }\r",
											"\r",
											"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ProvisioningAPIs\r",
											"\r",
											"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
											"                    // console.log('endPointNameValue ',endPointNameValue)\r",
											"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [DeleteCustomer]\", function () {\r",
											"                        console.log(\"======== Check Detail Log ( Expected = Actual) [DeleteCustomer] ==================\");\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
											"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
											"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
											"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
											"\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
											"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
											"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
											"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
											"\r",
											"                        if( endPointNameValue == endPointNameProvisioningAPIs){     //\"endPointName\":\"ProvisioningAPIs\"\r",
											"                            console.log(\"custom1.endPointName : \" + resultDataLog.custom1.endPointName + \" = \" + endPointNameProvisioningAPIs);\r",
											"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs); \r",
											"                        \r",
											"                            // check requestObject\r",
											"                            // \"requestObject\":\"{\\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Customer/DeleteCustomer\\\",\\\"method\\\":\\\"DELETE\\\",\\\"headers\\\":{\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"DeleteCustomer_202102172002683\\\",\\\"x-ais-orderdesc\\\":\\\"DeleteCustomer\\\",\\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAGJjc8t2ZfqZcNNvBKwuLmPMV/NLO2GPEwLJG3c2Ik+TEIlAkkY2KW0\\\"},\\\"body\\\":{\\\"customerId\\\":\\\"602d1a0bd441170001999d6fxx\\\"}}}\"\r",
											"                            \r",
											"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
											"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
											"                            let url = urlCheckLog + requestObjectUrlStaging; \r",
											"                            let x_ais_orderref = x_ais_OrderRef_DeleteCustomer + current_timestamp;\r",
											"                            let x_ais_orderdesc = x_ais_OrderDesc_DeleteCustomer;\r",
											"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken2\");\r",
											"                            let x_ais_userName = x_ais_UserName_AisPartner;\r",
											"                            \r",
											"                            let customerId = pm.environment.get(\"GetResponse_CustomerId\");\r",
											"                            \r",
											"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
											"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodDelete);\r",
											"                            console.log(\"headers.x_ais_userName : \" + jsonParseRequestObject.headers[header_x_ais_username] + \" = \" + x_ais_userName);\r",
											"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
											"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
											"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
											"                                                                                                                                                             \r",
											"                            pm.expect(jsonParseRequestObject.url).to.eql(url);\r",
											"                            pm.expect(jsonParseRequestObject.method).to.eql(methodDelete);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_username]).to.eql(x_ais_userName);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
											"\r",
											"                            console.log(\"resquest.body.customerId : \" + jsonParseRequestObject.body.customerId + \" = \" + customerId);\r",
											"\r",
											"                            pm.expect(jsonParseRequestObject.body.customerId).to.eql(customerId);\r",
											"\r",
											"                            // check responseObject\r",
											"                            // \"responseObject\":\"{\\\"OperationStatus\\\":{\\\"Code\\\":\\\"40308\\\",\\\"Description\\\":\\\"Role Invalid\\\"}}\"\r",
											"\r",
											"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
											"                            // console.log('jsonParseResponseObject',jsonParseResponseObject);\r",
											"\r",
											"                            console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeRoleInvalid);\r",
											"                            console.log(\"response.OperationStatus.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionRoleInvalid);\r",
											"\r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeRoleInvalid);  \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionRoleInvalid);  \r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"setTimeout(function(){SearchLogFindTid();}, 10000); \r",
											"setTimeout(function(){CheckLog();}, 30000); \r",
											"\r",
											"setTimeout(function(){RemoveThingStateInfo();}, 40000); \r",
											"setTimeout(function(){RemoveThing();}, 50000); \r",
											"setTimeout(function(){RemoveAccount();}, 60000); \r",
											"setTimeout(function(){RemovePartner();}, 70000); \r",
											"\r",
											"setTimeout(function(){\r",
											"pm.environment.unset(\"current_timestamp\");\r",
											"pm.environment.unset(\"AccessToken\");\r",
											"pm.environment.unset(\"AccessToken2\");\r",
											"pm.environment.unset(\"random_number\");\r",
											"pm.environment.unset(\"PartnerName\");\r",
											"pm.environment.unset(\"MerchantContact\");\r",
											"pm.environment.unset(\"CPID\");\r",
											"pm.environment.unset(\"GetResponse_PartnerId\");\r",
											"pm.environment.unset(\"AccountName\");\r",
											"pm.environment.unset(\"GetResponse_AccountName\");\r",
											"pm.environment.unset(\"GetResponse_AccountId\");\r",
											"pm.environment.unset(\"random_IM\");\r",
											"pm.environment.unset(\"random_ICCID\");\r",
											"pm.environment.unset(\"ThingName\");\r",
											"pm.environment.unset(\"GetResponse_ThingID\");\r",
											"pm.environment.unset(\"random_Sensor\");\r",
											"pm.environment.unset(\"sessionId\");\r",
											"pm.environment.unset(\"GetResponse_CustomerId\");\r",
											"pm.environment.unset(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseKey\");\r",
											"pm.environment.unset(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseValue\");\r",
											"pm.environment.unset(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseName\");\r",
											"pm.environment.unset(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseType\");\r",
											"pm.environment.unset(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseState\");\r",
											"pm.environment.unset(\"Value_DeleteCustomer_Create_ChargingStatus\");\r",
											"}, 75000);\r",
											"setTimeout(function(){}, 80000); "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var Username = pm.environment.get(\"Username\");\r",
											"var Password = pm.environment.get(\"Password\");\r",
											"var Username_Customer = pm.environment.get(\"Username_Customer\");\r",
											"var Password_Customer = pm.environment.get(\"Password_Customer\");\r",
											"\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"pm.environment.set(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseKey\",fieldDataValue.Provisioning.DeleteCustomer.Value_DeleteCustomer_Create_PurchaseInfo_PurchaseKey)\r",
											"pm.environment.set(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseValue\",fieldDataValue.Provisioning.DeleteCustomer.Value_DeleteCustomer_Create_PurchaseInfo_PurchaseValue)\r",
											"pm.environment.set(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseName\",fieldDataValue.Provisioning.DeleteCustomer.Value_DeleteCustomer_Create_PurchaseInfo_PurchaseName)\r",
											"pm.environment.set(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseType\",fieldDataValue.Provisioning.DeleteCustomer.Value_DeleteCustomer_Create_PurchaseInfo_PurchaseType)\r",
											"pm.environment.set(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseState\",fieldDataValue.Provisioning.DeleteCustomer.Value_DeleteCustomer_Create_PurchaseInfo_PurchaseState)\r",
											"pm.environment.set(\"Value_DeleteCustomer_Create_ChargingStatus\",fieldDataValue.Provisioning.DeleteCustomer.Value_DeleteCustomer_Create_ChargingStatus)\r",
											"\r",
											"//format YYYYMMDDHHMMSSS\r",
											"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
											"// console.log('currentTmestamp',currentTmestamp);\r",
											"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- statusCodeList --------------//\r",
											"//set variable to statusCodeList JSON.parse\r",
											"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
											"//set global variable to statusCode 200\r",
											"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
											"//set global variable to statusCode 201\r",
											"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
											"//set global variable to statusCode 403\r",
											"pm.globals.set(\"statusCodeForbidden\", statusCodeList.statusCodeForbidden);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- resultCodeList --------------//\r",
											"//set variable to resultCodeList JSON.parse\r",
											"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
											"//set global variable to resultCode \"20000\"\r",
											"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
											"//set global variable to resultCode \"20100\"\r",
											"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
											"//set global variable to resultCode \"40308\"\r",
											"pm.globals.set(\"resultCodeRoleInvalid\", resultCodeList.resultCodeRoleInvalid);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- resultDescriptionSuccessList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
											"//set global variable to resultDescription \"SignInProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
											"//set global variable to resultDescription \"ValidateTokenProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionValidateToken\", resultDescriptionSuccessList.resultDescriptionValidateToken);\r",
											"//set global variable to resultDescription \"CreatePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
											"//set global variable to resultDescription \"CreateAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
											"//set global variable to resultDescription \"CreateThing is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreateThing\", resultDescriptionSuccessList.resultDescriptionCreateThing);\r",
											"//set global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreateThingStateInfo\", resultDescriptionSuccessList.resultDescriptionCreateThingStateInfo);\r",
											"//set global variable to resultDescription \"RemovePartner is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
											"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
											"//set global variable to resultDescription \"RemoveThing is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveThing\", resultDescriptionSuccessList.resultDescriptionRemoveThing);\r",
											"//set global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveThingStateInfo\", resultDescriptionSuccessList.resultDescriptionRemoveThingStateInfo);\r",
											"//set global variable to resultDescription \"CreatePurchase is Success\"\r",
											"pm.globals.set(\"resultDescriptionCreatePurchase\", resultDescriptionSuccessList.resultDescriptionCreatePurchase);\r",
											"//set global variable to resultDescription \"removeCustomer is Success\"\r",
											"pm.globals.set(\"resultDescriptionRemoveCustomer\", resultDescriptionSuccessList.resultDescriptionRemoveCustomer);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- resultDescriptionErrorList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
											"//set global variable to resultDescription \"Role Invalid\"\r",
											"pm.globals.set(\"resultDescriptionRoleInvalid\", resultDescriptionErrorList.resultDescriptionRoleInvalid);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- HeaderList --------------//\r",
											"//set variable to HeaderList JSON.parse\r",
											"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
											"//---------------- set globals Other --------------//\r",
											"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
											"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
											"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
											"//set global variable to kbn-versio \"7.5.1\"\r",
											"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Signin_ --------------//\r",
											"//set global variable to x_ais_OrderRef \"Signin_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
											"//set global variable to x_ais_OrderRef \"ValidateToken\"\r",
											"pm.globals.set(\"x_ais_OrderRef_ValidateToken\", HeaderList.Signin.x_ais_OrderRef_ValidateToken);\r",
											"//set global variable to x_ais_OrderDesc \"ValidateToken\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_ValidateToken\", HeaderList.Signin.x_ais_OrderDesc_ValidateToken);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals CreatePartner --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
											"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
											"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
											"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals CreateAccount --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
											"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
											"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
											"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Thing --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreateThing_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreateThing\", HeaderList.Thing.x_ais_OrderRef_CreateThing);\r",
											"//set global variable to x_ais_OrderDesc \"CreateThing\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreateThing\", HeaderList.Thing.x_ais_OrderDesc_CreateThing);\r",
											"//set global variable to x_ais_OrderRef \"RemoveThing_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemoveThing\", HeaderList.Thing.x_ais_OrderRef_RemoveThing);\r",
											"//set global variable to x_ais_OrderDesc \"RemoveThing\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemoveThing\", HeaderList.Thing.x_ais_OrderDesc_RemoveThing);\r",
											"//set global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_CreateThingStateInfo);\r",
											"//set global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_CreateThingStateInfo);\r",
											"//set global variable to x_ais_OrderRef \"RemoveThingStateInfo\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_RemoveThingStateInfo);\r",
											"//set global variable to x_ais_OrderDesc \"RemoveThingStateInfo_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_RemoveThingStateInfo);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Purchase --------------//\r",
											"//set global variable to x_ais_OrderRef \"CreatePurchase_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_CreatePurchase\", HeaderList.Purchase.x_ais_OrderRef_CreatePurchase);\r",
											"//set global variable to x_ais_OrderDesc \"CreatePurchase\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_CreatePurchase\", HeaderList.Purchase.x_ais_OrderDesc_CreatePurchase);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals DeleteCustomer --------------//\r",
											"//set global variable to x_ais_OrderRef \"DeleteCustomer_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_DeleteCustomer\", HeaderList.Customer.x_ais_OrderRef_DeleteCustomer);\r",
											"//set global variable to x_ais_OrderRef \"DeleteCustomerfail_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_DeleteCustomer_fail\", HeaderList.Customer.x_ais_OrderRef_DeleteCustomer_fail);\r",
											"//set global variable to x_ais_OrderDesc \"DeleteCustomer\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_DeleteCustomer\", HeaderList.Customer.x_ais_OrderDesc_DeleteCustomer);\r",
											"//------------------------------------------------------------//\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to statusCode 201\r",
											"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultCode \"20100\"\r",
											"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
											"//get global variable to resultDescription \"SignInProcess is Success\"\r",
											"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
											"//get global variable to resultDescription \"ValidateTokenProcess is Success\"\r",
											"var resultDescriptionValidateToken = pm.globals.get(\"resultDescriptionValidateToken\");\r",
											"//get global variable to resultDescription \"CreatePartner is Success\"\r",
											"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
											"//get global variable to resultDescription \"CreateAccount is Success\"\r",
											"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
											"//get global variable to resultDescription \"CreateThing is Success\"\r",
											"var resultDescriptionCreateThing = pm.globals.get(\"resultDescriptionCreateThing\");\r",
											"//get global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
											"var resultDescriptionCreateThingStateInfo = pm.globals.get(\"resultDescriptionCreateThingStateInfo\");\r",
											"//get global variable to resultDescription \"CreatePurchase is Success\"\r",
											"var resultDescriptionCreatePurchase = pm.globals.get(\"resultDescriptionCreatePurchase\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- urlRouteList --------------//\r",
											"//set variable to urlRouteList JSON.parse\r",
											"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
											"//---------------- set url Create --------------//\r",
											"//set global variable to url \"/api/v1/auth/signin\"\r",
											"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
											"//set global variable to url \"/api/v1/auth/ValidateToken\"\r",
											"pm.globals.set(\"urlValidateToken\", urlRouteList.Signin.urlValidateToken);\r",
											"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
											"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
											"//set global variable to url \"/api/v1/Thing/CreateThing\"\r",
											"pm.globals.set(\"urlThingCreateThing\", urlRouteList.Thing.urlThingCreateThing);\r",
											"//set global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
											"pm.globals.set(\"urlThingCreateThingStateInfo\", urlRouteList.Thing.urlThingCreateThingStateInfo);\r",
											"//set global variable to url \"/api/v1/Purchase/CreatePurchase\"\r",
											"pm.globals.set(\"urlCreatePurchase\", urlRouteList.Purchase.urlCreatePurchase);\r",
											"//---------------- get url Create --------------//\r",
											"//get global variable to url \"/api/v1/auth/signin\"\r",
											"var urlSignin = pm.globals.get(\"urlSignin\");\r",
											"//get global variable to url \"/api/v1/auth/ValidateToken\"\r",
											"var urlValidateToken = pm.globals.get(\"urlValidateToken\");\r",
											"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
											"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
											"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
											"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
											"//get global variable to url \"/api/v1/Thing/CreateThing\"\r",
											"var urlThingCreateThing = pm.globals.get(\"urlThingCreateThing\");\r",
											"//get global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
											"var urlThingCreateThingStateInfo = pm.globals.get(\"urlThingCreateThingStateInfo\");\r",
											"//get global variable to url \"/api/v1/Purchase/CreatePurchase\"\r",
											"var urlCreatePurchase = pm.globals.get(\"urlCreatePurchase\");\r",
											"//---------------- set url Remove --------------//\r",
											"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
											"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
											"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
											"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
											"//set global variable to url \"/api/v1/Thing/RemoveThing\"\r",
											"pm.globals.set(\"urlThingRemoveThing\", urlRouteList.Thing.urlThingRemoveThing);\r",
											"//set global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
											"pm.globals.set(\"urlThingRemoveThingStateInfo\", urlRouteList.Thing.urlThingRemoveThingStateInfo);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"Signin_\"\r",
											"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
											"//get global variable to x_ais_OrderRef \"ValidateToken_\"\r",
											"var x_ais_OrderRef_ValidateToken = pm.globals.get(\"x_ais_OrderRef_ValidateToken\");\r",
											"//get global variable to x_ais_OrderDesc \"ValidateToken\"\r",
											"var x_ais_OrderDesc_ValidateToken = pm.globals.get(\"x_ais_OrderDesc_ValidateToken\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Partner --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
											"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
											"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
											"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Account --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
											"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
											"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
											"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Thing --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreateThing_\"\r",
											"var x_ais_OrderRef_CreateThing = pm.globals.get(\"x_ais_OrderRef_CreateThing\");\r",
											"//get global variable to x_ais_OrderDesc \"CreateThing\"\r",
											"var x_ais_OrderDesc_CreateThing = pm.globals.get(\"x_ais_OrderDesc_CreateThing\");\r",
											"//get global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
											"var x_ais_OrderRef_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderRef_CreateThingStateInfo\");\r",
											"//get global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
											"var x_ais_OrderDesc_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_CreateThingStateInfo\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Purchase --------------//\r",
											"//get global variable to x_ais_OrderRef \"CreatePurchase_\"\r",
											"var x_ais_OrderRef_CreatePurchase = pm.globals.get(\"x_ais_OrderRef_CreatePurchase\");\r",
											"//get global variable to x_ais_OrderDesc \"CreatePurchase\"\r",
											"var x_ais_OrderDesc_CreatePurchase = pm.globals.get(\"x_ais_OrderDesc_CreatePurchase\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"// Signin get token\r",
											" Signin = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username,\r",
											"                password:Password\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"\r",
											"        //set random_number\r",
											"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
											"        //set PartnerName\r",
											"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
											"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
											"        //set MerchantContact\r",
											"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
											"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
											"        // set CPID\r",
											"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
											"        pm.environment.set(\"CPID\", CPIDValue)\r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// ValidateToken\r",
											" ValidateToken = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptValidateToken = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_ValidateToken + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_ValidateToken,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestValidateToken = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                \"AccessToken\": pm.environment.get(\"AccessToken\")\r",
											"            })\r",
											"        };  \r",
											"        \r",
											"        let optionsValidateToken = {\r",
											"            url: url + provisioningapis + urlValidateToken,\r",
											"            method: 'POST',\r",
											"            header: headersOptValidateToken,\r",
											"            body: httpRequestValidateToken\r",
											"        };\r",
											"        // console.log('request ValidateToken');\r",
											"        let response = await reqPromise(optionsValidateToken);\r",
											"        let jsonDataValidateToken = await response.json();\r",
											"        let operationStatusValidateToken = await jsonDataValidateToken.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"ValidateToken : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('ValidateToken : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusValidateToken).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // ValidateTokenProcess is Success\r",
											"        pm.test('ValidateToken : OperationStatus Description is '+'\"'+ resultDescriptionValidateToken+'\"', function () {\r",
											"            pm.expect(operationStatusValidateToken).to.have.property('Description', resultDescriptionValidateToken);\r",
											"        });\r",
											" \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreatePartner\r",
											" CreatePartner = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreatePartner = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreatePartner = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
											"                \"PartnerType\": [\r",
											"                    \"Supplier\",\r",
											"                    \"Customer\"\r",
											"                ],\r",
											"                \"PartnerDetail\": {\r",
											"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
											"                    \"CPID\": pm.environment.get(\"CPID\")\r",
											"                },\r",
											"                \"Property\": {\r",
											"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
											"                }\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsCreatePartner = {\r",
											"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreatePartner,\r",
											"            body: httpRequestCreatePartner\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsCreatePartner);\r",
											"        let jsonDataCreatePartner = await response.json();\r",
											"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
											"    \r",
											"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreatePartner is Success\r",
											"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
											"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
											"        });\r",
											"\r",
											"        //GetResponse_PartnerId\r",
											"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
											"\r",
											"        //GetResponse_CustomerId\r",
											"        pm.environment.set(\"GetResponse_CustomerId\", jsonDataCreatePartner.PartnerInfo.CustomerId);\r",
											"        \r",
											"        //Accountname\r",
											"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
											"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreateAccount\r",
											" CreateAccount = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreateAccount = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreateAccount = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
											"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
											"                })\r",
											"        };\r",
											"        \r",
											"        let optionsCreateAccount = {\r",
											"            url: url + provisioningapis + urlAccountCreateAccount,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreateAccount,\r",
											"            body: httpRequestCreateAccount\r",
											"        };\r",
											"\r",
											"        // console.log('request CreateAccount');\r",
											"        let response = await reqPromise(optionsCreateAccount);\r",
											"        let jsonDataCreateAccount = await response.json();\r",
											"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
											"    \r",
											"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreateAccount : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreateAccount is Success\r",
											"        pm.test('CreateAccount : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
											"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
											"        });\r",
											"        // GetResponse_AccountName\r",
											"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
											"        // GetResponse_AccountId\r",
											"        pm.environment.set(\"GetResponse_AccountId\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
											"        // random_IM\r",
											"        pm.environment.set(\"random_IM\", _.random(10000000, 99999999)+\" \"+_.random(1000000, 9999999))\r",
											"        // random_ICCID\r",
											"        pm.environment.set(\"random_ICCID\", _.random(1000000, 9999999)+\" \"+_.random(100000, 999999))\r",
											"        // random_number\r",
											"        pm.environment.set(\"random_number\",pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
											"        //ThingName\r",
											"        let thingNameValue = fieldDataValue.Provisioning.Thing.ThingNameValue; // \"QAtestthing_T01\"\r",
											"        pm.environment.set(\"ThingName\", thingNameValue + pm.environment.get(\"random_number\"))\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreateThing\r",
											" CreateThing = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreateThing = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreateThing+ current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateThing,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestCreateThing = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"ThingName\": pm.environment.get(\"ThingName\"),\r",
											"                \"IMEI\": pm.environment.get(\"random_IM\"),\r",
											"                \"IMSI\": pm.environment.get(\"random_IM\"),\r",
											"                \"ICCID\": pm.environment.get(\"random_ICCID\"),\r",
											"                \"RouteUrl\": fieldDataValue.Provisioning.Thing.CreateThing.RouteUrlValue , //[\"http://10.12.3.4:2019/api/information/AddInformation\"]\r",
											"                \"RouteInfo\": {\r",
											"                    \"MIMO_ID\": fieldDataValue.Provisioning.Thing.CreateThing.RouteInfoMIMOIDValue , //\"606edada\"\r",
											"                    \"MIMO_SerialNo\": fieldDataValue.Provisioning.Thing.CreateThing.RouteInfoMIMOSerialNoValue //5466758878\r",
											"                },\r",
											"                \"RouteFlag\": {\r",
											"                    \"ThingName\": fieldDataValue.Provisioning.Thing.CreateThing.RouteFlagThingNameValue , //true\r",
											"                    \"ThingToken\": fieldDataValue.Provisioning.Thing.CreateThing.RouteFlagThingTokenValue, //true\r",
											"                    \"IMEI\": fieldDataValue.Provisioning.Thing.CreateThing.RouteFlagIMEIValue, //true\r",
											"                    \"ICCID\": fieldDataValue.Provisioning.Thing.CreateThing.RouteFlagICCIDValue, //true\r",
											"                    \"RouteInfo\": fieldDataValue.Provisioning.Thing.CreateThing.RouteFlagRouteInfoValue //true\r",
											"                }\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsCreateThing = {\r",
											"            url: url + provisioningapis + urlThingCreateThing,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreateThing,\r",
											"            body: httpRequestCreateThing\r",
											"        };\r",
											"\r",
											"        // console.log('request CreateThing');\r",
											"        let response = await reqPromise(optionsCreateThing);\r",
											"        let jsonDataCreateThing = await response.json();\r",
											"        // console.log('jsonDataCreateThing',jsonDataCreateThing)\r",
											"    \r",
											"        let operationStatusCreateThing = await jsonDataCreateThing.OperationStatus;\r",
											"\r",
											"        //201\r",
											"        pm.test(\"CreateThing : Status code is \" + statusCodeCreatedSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
											"        });\r",
											"        //20100\r",
											"        pm.test('CreateThing : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreateThing).to.have.property('Code', resultCodeCreatedSuccess);\r",
											"        });\r",
											"        //CreateThing is Success\r",
											"        pm.test('CreateThing : OperationStatus Description is '+'\"'+ resultDescriptionCreateThing+'\"', function () {\r",
											"            pm.expect(operationStatusCreateThing).to.have.property('Description', resultDescriptionCreateThing);\r",
											"        });\r",
											"\r",
											"        pm.environment.set(\"GetResponse_ThingID\",jsonDataCreateThing.ThingInfo.ThingId)\r",
											"\r",
											"        //Get Random Sensor \r",
											"        pm.environment.set(\"random_Sensor\", _.random(100, 999))\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreateThingStateInfo\r",
											" CreateThingStateInfo = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreateThingStateInfo = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreateThingStateInfo+ current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateThingStateInfo,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        // {\"Temp\" : pm.environment.get(\"random_Sensor\")}\r",
											"        let sensorValue = {};\r",
											"        sensorValue[fieldDataValue.CreateThingStateInfo.SensorKey] = pm.environment.get(\"random_Sensor\");\r",
											"        // console.log('sensorValue',sensorValue);\r",
											"        \r",
											"        let httpRequestCreateThingStateInfo = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"ThingId\": [\r",
											"                    pm.environment.get(\"GetResponse_ThingID\")\r",
											"                ],\r",
											"                \"Type\": fieldDataValue.CreateThingStateInfo.Type_Report,\r",
											"                \"Sensor\": sensorValue\r",
											"            })\r",
											"        };\r",
											"    \r",
											"        let optionsCreateThingStateInfo = {\r",
											"            url: url + provisioningapis + urlThingCreateThingStateInfo,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreateThingStateInfo,\r",
											"            body: httpRequestCreateThingStateInfo\r",
											"        };\r",
											"\r",
											"        // console.log('request CreateThingStateInfo');\r",
											"        let response = await reqPromise(optionsCreateThingStateInfo);\r",
											"        let jsonDataCreateThingStateInfo = await response.json();\r",
											"        // console.log('jsonDataCreateThingStateInfo',jsonDataCreateThingStateInfo)\r",
											"    \r",
											"        let operationStatusCreateThingStateInfo = await jsonDataCreateThingStateInfo.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"CreateThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('CreateThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //CreateThingStateInfo is Success\r",
											"        pm.test('CreateThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionCreateThingStateInfo+'\"', function () {\r",
											"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Description', resultDescriptionCreateThingStateInfo);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// CreatePurchase\r",
											"CreatePurchase = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCreatePurchase = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_CreatePurchase+ current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePurchase,\r",
											"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
											"            'Accept':Accept\r",
											"        };\r",
											"                \r",
											"        let httpRequestCreatePurchase = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"customerId\": pm.environment.get(\"GetResponse_CustomerId\"),\r",
											"                \"PurchaseInfo\": {\r",
											"                    \"PurchaseKey\": pm.environment.get(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseKey\"),\r",
											"                    \"PurchaseValue\": pm.environment.get(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseValue\"),\r",
											"                    \"PurchaseName\": pm.environment.get(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseName\"),\r",
											"                    \"PurchaseType\": pm.environment.get(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseType\"), //Volume\r",
											"                    \"PurchaseState\": pm.environment.get(\"Value_DeleteCustomer_Create_PurchaseInfo_PurchaseState\") //Active\r",
											"                },\r",
											"                \"ChargingStatus\": pm.environment.get(\"Value_DeleteCustomer_Create_ChargingStatus\") //Enable\r",
											"            })\r",
											"        };\r",
											"    \r",
											"        let optionsCreatePurchase = {\r",
											"            url: url + provisioningapis + urlCreatePurchase,\r",
											"            method: 'POST',\r",
											"            header: headersOptCreatePurchase,\r",
											"            body: httpRequestCreatePurchase\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePurchase');\r",
											"        let response = await reqPromise(optionsCreatePurchase);\r",
											"        let jsonDataCreatePurchase = await response.json();\r",
											"        // console.log('jsonDataCreatePurchase',jsonDataCreatePurchase)\r",
											"    \r",
											"        let operationStatusCreatePurchase = await jsonDataCreatePurchase.OperationStatus;\r",
											"\r",
											"        //200\r",
											"        pm.test(\"CreatePurchase : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        //20000\r",
											"        pm.test('CreatePurchase : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusCreatePurchase).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        //CreatePurchase is Success\r",
											"        pm.test('CreatePurchase : OperationStatus Description is '+'\"'+ resultDescriptionCreatePurchase+'\"', function () {\r",
											"            pm.expect(operationStatusCreatePurchase).to.have.property('Description', resultDescriptionCreatePurchase);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"// Signin get token\r",
											" Signin2 = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username_Customer,\r",
											"                password:Password_Customer\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken2\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"Signin();\r",
											"setTimeout(async function(){await ValidateToken();}, 1000);\r",
											"setTimeout(async function(){await CreatePartner();}, 2000); \r",
											"setTimeout(async function(){await CreateAccount();}, 3000); \r",
											"setTimeout(async function(){await CreateThing();}, 4000); \r",
											"setTimeout(async function(){await CreateThingStateInfo();}, 6000); \r",
											"setTimeout(async function(){await CreatePurchase();}, 7000); \r",
											"setTimeout(async function(){await Signin2();}, 8000);\r",
											"setTimeout(async function(){}, 9000);  "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-ais-UserName",
										"type": "text",
										"value": "{{x_ais_UserName_AisPartner}}"
									},
									{
										"key": "x-ais-OrderRef",
										"value": "{{x_ais_OrderRef_DeleteCustomer}}{{current_timestamp}}"
									},
									{
										"key": "x-ais-OrderDesc",
										"type": "text",
										"value": "{{x_ais_OrderDesc_DeleteCustomer}}"
									},
									{
										"key": "x-ais-AccessToken",
										"value": "{{Bearer}} {{AccessToken2}}"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"customerId\": \"{{GetResponse_CustomerId}}\"\r\n}"
								},
								"url": {
									"raw": "{{url}}{{provisioningapis}}/api/v1/Customer/DeleteCustomer",
									"host": [
										"{{url}}{{provisioningapis}}"
									],
									"path": [
										"api",
										"v1",
										"Customer",
										"DeleteCustomer"
									]
								},
								"description": "Type:Desire"
							},
							"response": []
						}
					]
				}
			]
		}
	]
}