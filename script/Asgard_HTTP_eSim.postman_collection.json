{
	"info": {
		"_postman_id": "5160d1b1-6164-4e3e-a547-4a72bb3859a4",
		"name": "MagellanCore_Asgard_HTTP(eSim)_AutomateTest",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Report",
			"item": [
				{
					"name": "AsgardHTTPeSimReport_TST_F1_1_1_001_Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var Basic = pm.environment.get(\"Basic\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to xAisOrderRef \"RemoveThing_\"\r",
									"var x_ais_OrderRef_RemoveThing = pm.globals.get(\"x_ais_OrderRef_RemoveThing\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"var x_ais_OrderDesc_RemoveThing = pm.globals.get(\"x_ais_OrderDesc_RemoveThing\");\r",
									"//get global variable to xAisOrderRef \"InquiryThing_\"\r",
									"var x_ais_OrderRef_InquiryThing = pm.globals.get(\"x_ais_OrderRef_InquiryThing\");\r",
									"//get global variable to x_ais_OrderDesc \"InquiryThing\"\r",
									"var x_ais_OrderDesc_InquiryThing = pm.globals.get(\"x_ais_OrderDesc_InquiryThing\");\r",
									"//get global variable to xAisOrderRef \"RemoveThingStateInfo_\"\r",
									"var x_ais_OrderRef_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderRef_RemoveThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThingStateInfo\"\r",
									"var x_ais_OrderDesc_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_RemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals AsgardHTTP --------------//\r",
									"//get global variable to x_ais_OrderRef \"ReportHTTP_\"\r",
									"var x_ais_OrderRef_ReportHTTP = pm.globals.get(\"x_ais_OrderRef_ReportHTTP\");\r",
									"//get global variable to x_ais_OrderDesc \"Report Data to MG\"\r",
									"var x_ais_OrderDesc_ReportHTTP = pm.globals.get(\"x_ais_OrderDesc_ReportHTTP\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get url Remove --------------//\r",
									"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
									"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"var urlThingRemoveThing = pm.globals.get(\"urlThingRemoveThing\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"var urlThingRemoveThingStateInfo = pm.globals.get(\"urlThingRemoveThingStateInfo\");\r",
									"//---------------- get url Inquiry --------------//\r",
									"//get global variable to url \"/api/v1/Thing/InquiryThingr\"\r",
									"var urlThingInquiryThing = pm.globals.get(\"urlThingInquiryThing\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"RemovePartner is Success\"\r",
									"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
									"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
									"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
									"//get global variable to resultDescription \"RemoveThing is Success\"\r",
									"var resultDescriptionRemoveThing = pm.globals.get(\"resultDescriptionRemoveThing\");\r",
									"//get global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"var resultDescriptionRemoveThingStateInfo = pm.globals.get(\"resultDescriptionRemoveThingStateInfo\");\r",
									"//get global variable to resultDescription \"InquiryThing is Success\"\r",
									"var resultDescriptionInquiryThing = pm.globals.get(\"resultDescriptionInquiryThing\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to resultDescription \"The requested operation was successfully.\"\r",
									"var resultDescriptionTheRequestedOperationWasSuccessfully = pm.globals.get(\"resultDescriptionTheRequestedOperationWasSuccessfully\");\r",
									"//------------------------------------------------------------//\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Asgard HTTP(eSim) Report : Status code is \" + statusCodeSuccess, function () {\r",
									"    pm.response.to.have.status(statusCodeSuccess);\r",
									"});\r",
									"\r",
									"pm.test('Asgard HTTP(eSim) Report : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeSuccess);\r",
									"});\r",
									"\r",
									"pm.test('Asgard HTTP(eSim) Report : OperationStatus DeveloperMessage is '+'\"'+ resultDescriptionTheRequestedOperationWasSuccessfully+'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"});\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// RemovePartner\r",
									" RemovePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemovePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemovePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemovePartner = {\r",
									"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemovePartner,\r",
									"            body: httpRequestRemovePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request RemovePartner');\r",
									"        let response = await reqPromise(optionsRemovePartner);\r",
									"        let jsonDataRemovePartner = await response.json();\r",
									"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
									"    \r",
									"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemovePartner is Success\r",
									"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveAccount\r",
									" RemoveAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemoveAccount = {\r",
									"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveAccount,\r",
									"            body: httpRequestRemoveAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveAccount');\r",
									"        let response = await reqPromise(optionsRemoveAccount);\r",
									"        let jsonDataRemoveAccount = await response.json();\r",
									"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
									"    \r",
									"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveAccount is Success\r",
									"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThing\r",
									" RemoveThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThing = {\r",
									"            url: url + provisioningapis + urlThingRemoveThing,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThing,\r",
									"            body: httpRequestRemoveThing\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveThing');\r",
									"        let response = await reqPromise(optionsRemoveThing);\r",
									"        let jsonDataRemoveThing = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThing)\r",
									"    \r",
									"        let operationStatusRemoveThing = await jsonDataRemoveThing.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThing : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThing : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThing is Success\r",
									"        pm.test('RemoveThing : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThing+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Description', resultDescriptionRemoveThing);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThingStateInfo\r",
									" RemoveThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"            \r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\"),\r",
									"                \"stateType\": fieldDataValue.CreateThingStateInfo.Type_Report, //Report\r",
									"                \"stateKey\": fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP //AA\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingRemoveThingStateInfo,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThingStateInfo,\r",
									"            body: httpRequestRemoveThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('response RemoveThingStateInfo');\r",
									"        let response = await reqPromise(optionsRemoveThingStateInfo);\r",
									"        let jsonDataRemoveThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThingStateInfo)\r",
									"    \r",
									"        let operationStatusRemoveThingStateInfo = await jsonDataRemoveThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThingStateInfo is Success\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThingStateInfo+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Description', resultDescriptionRemoveThingStateInfo);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"//---------------- LogDefaultValue --------------//\r",
									"//set variable to LogDefaultValue JSON.parse\r",
									"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
									"// console.log('LogDefaultValue',LogDefaultValue);\r",
									"//---------------- set globals Other --------------//\r",
									"\r",
									"var SearchLog = LogDefaultValue.SearchLog;\r",
									"// console.log('SearchLog',SearchLog);\r",
									"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
									"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
									"var kbn_version = SearchLog.header.kbn_version;\r",
									"var authorization = SearchLog.header.Authorization;\r",
									"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
									"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
									"var namespace = LogDefaultValue.Other.namespace;\r",
									"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
									"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
									"var header_x_ais_username = LogDefaultValue.Other.header_x_ais_username;\r",
									"var methodPost = LogDefaultValue.Other.methodPost;\r",
									"\r",
									"// Detail\r",
									"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
									"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
									"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
									"\r",
									"// Summary\r",
									"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
									"\r",
									"// Asgard.Http.APIs [staging]\r",
									"// HttpAPIs [iot]\r",
									"var applicationName = LogDefaultValue.AsgardHTTP.applicationName;\r",
									"var cmdName = LogDefaultValue.AsgardHTTP.cmdNameReport;\r",
									"var endPointNameRabbitMQ = LogDefaultValue.AsgardHTTP.endPointNameRabbitMQ;\r",
									"var containerId = LogDefaultValue.AsgardHTTP.containerId;\r",
									"var requestObjectUrlStaging = LogDefaultValue.AsgardHTTP.requestObjectUrlReportMgStaging;\r",
									"var urlReport  = LogDefaultValue.AsgardHTTP.urlReport;\r",
									"\r",
									"// Check CDR (Summary Log) and EDR (Detail Log)\r",
									"SearchLogFindTid = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSearchLogFindTid = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = x_ais_OrderRef_ReportHTTP + current_timestamp; \r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestSearchLogFindTid = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"phrase\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"\r",
									"        let optionsSearchLogFindTid = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptSearchLogFindTid,\r",
									"            body: httpRequestSearchLogFindTid\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsSearchLogFindTid);\r",
									"        let jsonDataSearchLogFindTid = await response.json();\r",
									"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
									"        console.log('hits',hits)\r",
									"  \r",
									"        // find tid\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            // let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"        \r",
									"            // console.log('logType',logType)\r",
									"             console.log('applicationNameValue',applicationNameValue)\r",
									"             console.log('applicationName',applicationName)\r",
									"            if(applicationNameValue == applicationName){\r",
									"                let tid = hits[i]._source.cauldron.tid;\r",
									"                pm.environment.set(\"tid\", tid);\r",
									"                break;\r",
									"           }\r",
									"        }\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"CheckLog = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCheckLog = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = pm.environment.get(\"tid\");\r",
									"\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"         console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestCheckLog = {\r",
									"            mode: 'raw',\r",
									"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"phrase\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"        let optionsCheckLog = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptCheckLog,\r",
									"            body: httpRequestCheckLog\r",
									"        }; \r",
									"        let response = await reqPromise(optionsCheckLog);\r",
									"        let jsonDataCheckLog = await response.json();\r",
									"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
									"        \r",
									"        // //200\r",
									"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });     \r",
									"        \r",
									"        let hits = jsonDataCheckLog.hits.hits\r",
									"         console.log('hits',hits)\r",
									"  \r",
									"        // find logType\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            //  let logType = hits[i]._source.cauldron.logType\r",
									"            let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"           \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            \r",
									"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
									"            // console.log('resultDataLog',resultDataLog)\r",
									"\r",
									"            let tidControl = x_ais_OrderRef_ReportHTTP  + current_timestamp;\r",
									"            // console.log(tidControl);\r",
									"            if(applicationNameValue == applicationName){\r",
									"                 \r",
									"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and Asgard.Http.APIs\r",
									"                    pm.test(\"Check Summary Log : Asgard_HTTP(eSim) Report\" , function () {\r",
									"                        console.log(\"======== Check Summary Log ( Expected = Actual) [Asgard_HTTP(eSim) Report] ==================\");\r",
									"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
									"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
									"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeSuccess);\r",
									"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
									"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        // console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
									"                        // console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
									"\r",
									"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
									"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
									"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeSuccess); \r",
									"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionTheRequestedOperationWasSuccessfully); \r",
									"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
									"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"\r",
									"                        let thingId = pm.environment.get(\"GetResponse_ThingID\");\r",
									"                        let imei = (pm.environment.get(\"random_IM\")).replace(\" \", \"\");\r",
									"                        let imsi = (pm.environment.get(\"random_IM\")).replace(\" \", \"\");\r",
									"                        let customUrl= urlCheckLog + requestObjectUrlStaging;\r",
									"\r",
									"                        // check identity\r",
									"                        // \"identity\":\"{\\\"Imei\\\":\\\"496151103122639\\\",\\\"ThingId\\\":\\\"6013965896d0ed0001f5a46d\\\",\\\"Imsi\\\":\\\"496151103122639\\\"}\"\r",
									"                        let dataSummaryIdentity = JSON.parse(resultDataLog.identity);\r",
									"\r",
									"                        console.log(\"identity.ThingId : \" + dataSummaryIdentity.ThingId + \" = \" + thingId);\r",
									"                        console.log(\"identity.Imei : \" + dataSummaryIdentity.Imei + \" = \" + imei);\r",
									"                        console.log(\"identity.Imsi : \" + dataSummaryIdentity.Imsi + \" = \" + imsi);\r",
									"\r",
									"                        pm.expect(dataSummaryIdentity.ThingId).to.eql(thingId); \r",
									"                        pm.expect(dataSummaryIdentity.Imei).to.eql(imei); \r",
									"                        pm.expect(dataSummaryIdentity.Imsi).to.eql(imsi); \r",
									"\r",
									"                        // check custom\r",
									"                        // \\\"custom\\\":{ \\\"customData\\\":{ \\\"Imsi\\\":[ \\\"312928552778013\\\" ], \\\"url\\\":\\\"mg-iot.sandais.com/api/report/sim/v1\\\", \\\"Imei\\\":[ \\\"312928552778013\\\" ], \\\"ThingID\\\":[ \\\"6098aa132d263900011dd250\\\" ] }, \\\"endPointSummary\\\":[ { \\\"no\\\":\\\"1\\\", \\\"endPointName\\\":\\\"db.ThingsCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:Inquiry was Success\\\", \\\"processTime\\\":0.0006 }, { \\\"no\\\":\\\"2\\\", \\\"endPointName\\\":\\\"db.AccountsCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:Inquiry was Success\\\", \\\"processTime\\\":0.0003 }, { \\\"no\\\":\\\"3\\\", \\\"endPointName\\\":\\\"db.CustomersCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:Inquiry was Success\\\", \\\"processTime\\\":0.0005 } ] }\r",
									"\r",
									"                        let customData = resultDataLog.custom.customData\r",
									"\r",
									"                        console.log(\"custom.url : \" + customData.url + \" = \" + customUrl);\r",
									"                        console.log(\"custom.Imei[0] : \" + customData.Imei[0] + \" = \" + imei);\r",
									"                        console.log(\"custom.Imsi[0] : \" + customData.Imsi[0] + \" = \" + imsi);\r",
									"                        console.log(\"custom.ThingID[0] : \" + customData.ThingID[0] + \" = \" + thingId);\r",
									"\r",
									"                        pm.expect(customData.url).to.eql(customUrl); \r",
									"                        pm.expect(customData.Imei[0]).to.eql(imei); \r",
									"                        pm.expect(customData.Imsi[0]).to.eql(imsi); \r",
									"                        pm.expect(customData.ThingID[0]).to.eql(thingId); \r",
									"\r",
									"                        let custom = resultDataLog.custom.endPointSummary;\r",
									"                        let countCustom = custom.length;\r",
									"                       \r",
									"                        // [\"db.ThingsCollection\",\"db.AccountsCollection\",\"db.CustomersCollection\"]\r",
									"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_Asgard_HTTP_eSim_Report;\r",
									"                        // [\"20000:Inquiry was Success\",\"20000:Inquiry was Success\",\"20000:Inquiry was Success\"]\r",
									"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_Asgard_HTTP_eSim_Report;\r",
									"                        let countCustomStep = dataEndPointName.length;\r",
									"\r",
									"                        console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep);\r",
									"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
									"                        \r",
									"                        for(let i=0;i<countCustomStep;i++){\r",
									"                            let no = custom[i].no;\r",
									"                            let valueEndPointName = custom[i].endPointName;\r",
									"                            let valueResponseStatus = custom[i].responseStatus;\r",
									"                            // console.log(\"i\",i);\r",
									"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
									"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
									"\r",
									"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString());\r",
									"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i]);\r",
									"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i]);\r",
									"\r",
									"                            pm.expect(no).to.eql((i+1).toString()); \r",
									"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
									"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]); \r",
									"                        }\r",
									"                    }); \r",
									"                }\r",
									"\r",
									"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and Asgard.Http.APIs\r",
									"\r",
									"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
									"                    // console.log('endPointNameValue ',endPointNameValue)\r",
									"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [Asgard_HTTP(eSim) Report]\", function () {\r",
									"                        console.log(\"======== Check Detail Log ( Expected = Actual) [Asgard_HTTP(eSim) Report] ==================\");\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
									"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
									"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
									"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.custom1.activityLog.processTime + \" = \" + resultDataLog.custom1.activityLog.processTime);\r",
									"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
									"\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
									"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
									"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
									"\r",
									"                        let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
									"                        // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
									"                        let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
									"                        // console.log('jsonParseResponseObject',jsonParseResponseObject); \r",
									"                        let url = urlReport; \r",
									"                        let x_ais_orderref = x_ais_OrderRef_ReportHTTP + current_timestamp;\r",
									"                        let x_ais_orderdesc = x_ais_OrderDesc_ReportHTTP;\r",
									"                        let x_ais_userName = x_ais_UserName_AisPartner;\r",
									"                        let authorization = Basic + ' ' + pm.environment.get(\"encodedKeys_Authorization_Report\");\r",
									"                        let imei = (pm.environment.get(\"random_IM\")).replace(\" \", \"\");\r",
									"                        let imsi = (pm.environment.get(\"GetResponse_IMSI\")).replace(\" \", \"\");\r",
									"                        let thingId = pm.environment.get(\"GetResponse_ThingID\");\r",
									"                        let customUrl= urlCheckLog + requestObjectUrlStaging;\r",
									"                        let SensorKey = fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP;\r",
									"                        let sensor = pm.environment.get(\"random_Sensor_AsgardHTTP\");\r",
									"                        let timestamp = pm.environment.get(\"timestamp\");\r",
									"\r",
									"                        if( endPointNameValue == undefined){\r",
									"                            // check requestObject\r",
									"                            // \"requestObject\":\"{\\\"url\\\":\\\"/api/report/sim/v1\\\",\\\"method\\\":\\\"POST\\\",\\\"headers\\\":{\\\"Cache-Control\\\":\\\"no-cache\\\",\\\"Content-Type\\\":\\\"application/json\\\",\\\"Accept\\\":\\\"*/*\\\",\\\"Accept-Encoding\\\":\\\"gzip,deflate,br\\\",\\\"Authorization\\\":\\\"Basic NDk2MTUxMTAzMTIyNjM5OjEuMi4zLjQ=\\\",\\\"Host\\\":\\\"mg-staging.sandais.com\\\",\\\"User-Agent\\\":\\\"PostmanRuntime/7.26.8\\\",\\\"Content-Length\\\":\\\"2\\\",\\\"x-real-ip\\\":\\\"171.96.174.10\\\",\\\"x-forwarded-for\\\":\\\"171.96.174.10\\\",\\\"x-forwarded-proto\\\":\\\"https\\\",\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"ReportHTTP_202101291701676\\\",\\\"x-ais-orderdesc\\\":\\\"Report Data to MG\\\",\\\"postman-token\\\":\\\"83bc76b4-8538-4a10-94fc-8b9cc1143ec8\\\",\\\"x-request-id\\\":\\\"bbf6c560-8bea-4d53-87d8-28a3f3664d37\\\",\\\"x-b3-traceid\\\":\\\"eb252eaef48d4ec507b32acd0a8dc573\\\",\\\"x-b3-spanid\\\":\\\"07b32acd0a8dc573\\\",\\\"x-b3-sampled\\\":\\\"0\\\",\\\"x-ais-SessionId\\\":\\\"1611896410502\\\",\\\"identity\\\":\\\"{\\\\\\\"Imei\\\\\\\":\\\\\\\"496151103122639\\\\\\\",\\\\\\\"ThingID\\\\\\\":\\\\\\\"6013965896d0ed0001f5a46d\\\\\\\",\\\\\\\"Imsi\\\\\\\":\\\\\\\"496151103122639\\\\\\\"}\\\",\\\"custom\\\":\\\"{\\\\\\\"Imsi\\\\\\\":[\\\\\\\"496151103122639\\\\\\\"],\\\\\\\"url\\\\\\\":\\\\\\\"mg-staging.sandais.com/api/register/sim/v1\\\\\\\",\\\\\\\"Imei\\\\\\\":[\\\\\\\"496151103122639\\\\\\\"],\\\\\\\"ThingID\\\\\\\":[\\\\\\\"6013965896d0ed0001f5a46d\\\\\\\"]}\\\"},\\\"queryString\\\":{},\\\"routeParamteters\\\":{},\\\"body\\\":{\\\"Payload\\\":{\\\"Temp\\\":\\\"686\\\",\\\"Timestamp\\\":\\\"2020-12-31T03:03:18+07:00\\\"}}\"\r",
									"\r",
									"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
									"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
									"                            console.log(\"headers.x_ais_userName : \" + jsonParseRequestObject.headers[header_x_ais_username] + \" = \" + x_ais_userName);\r",
									"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
									"                            console.log(\"headers.Authorization : \" + jsonParseRequestObject.headers.Authorization + \" = \" + authorization);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
									"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_username]).to.eql(x_ais_userName);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
									"                            pm.expect(jsonParseRequestObject.headers.Authorization).to.eql(authorization);\r",
									"\r",
									"                            // check requestObject headers.identity\r",
									"                            let jsonParseRequestObjectHeadersIdentity = JSON.parse(jsonParseRequestObject.headers.identity);\r",
									"                            // console.log('jsonParseRequestObjectHeadersIdentity',jsonParseRequestObjectHeadersIdentity);\r",
									"\r",
									"                            console.log(\"headers.identity.Imei : \" + jsonParseRequestObjectHeadersIdentity.Imei + \" = \" + imei);\r",
									"                            console.log(\"headers.identity.Imsi : \" + jsonParseRequestObjectHeadersIdentity.Imsi + \" = \" + imsi);\r",
									"                            console.log(\"headers.identity.ThingId : \" + jsonParseRequestObjectHeadersIdentity.ThingId + \" = \" + thingId);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObjectHeadersIdentity.Imei).to.eql(imei);\r",
									"                            pm.expect(jsonParseRequestObjectHeadersIdentity.Imsi).to.eql(imsi);\r",
									"                            pm.expect(jsonParseRequestObjectHeadersIdentity.ThingId).to.eql(thingId);\r",
									"\r",
									"                            // check requestObject headers.custom\r",
									"                            let jsonParseRequestObjectHeadersCustom = JSON.parse(jsonParseRequestObject.headers.custom);\r",
									"                            // console.log('jsonParseRequestObjectHeadersCustom',jsonParseRequestObjectHeadersCustom);\r",
									"\r",
									"                            console.log(\"headers.custom.url : \" + jsonParseRequestObjectHeadersCustom.url + \" = \" + customUrl);\r",
									"                            console.log(\"headers.custom.Imei[0] : \" + jsonParseRequestObjectHeadersCustom.Imei[0] + \" = \" + imei);\r",
									"                            console.log(\"headers.custom.Imsi[0] : \" + jsonParseRequestObjectHeadersCustom.Imsi[0] + \" = \" + imsi);\r",
									"                            console.log(\"headers.custom.ThingID[0] : \" + jsonParseRequestObjectHeadersCustom.ThingID[0] + \" = \" + thingId);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObjectHeadersCustom.url).to.eql(customUrl);\r",
									"                            pm.expect(jsonParseRequestObjectHeadersCustom.Imei[0]).to.eql(imei);\r",
									"                            pm.expect(jsonParseRequestObjectHeadersCustom.Imsi[0]).to.eql(imsi);\r",
									"                            pm.expect(jsonParseRequestObjectHeadersCustom.ThingID[0]).to.eql(thingId);\r",
									"\r",
									"                            console.log(\"queryString : \" + JSON.stringify(jsonParseRequestObject.queryString) + \" = \" + JSON.stringify({}));\r",
									"                            console.log(\"routeParamteters : \" + JSON.stringify(jsonParseRequestObject.routeParamteters) + \" = \" + JSON.stringify({}));\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.queryString).to.eql({}); \r",
									"                            pm.expect(jsonParseRequestObject.routeParamteters).to.eql({}); \r",
									"\r",
									"                            console.log(\"resquest.body.Payload.\" + SensorKey +\" : \" + jsonParseRequestObject.body.Payload[SensorKey] + \" = \" + sensor.toString());\r",
									"                            console.log(\"resquest.body.Payload.Timestamp : \" + jsonParseRequestObject.body.Payload.Timestamp + \" = \" + timestamp);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.body.Payload[SensorKey]).to.eql(sensor.toString());\r",
									"                            pm.expect(jsonParseRequestObject.body.Payload.Timestamp).to.eql(timestamp); \r",
									"                           \r",
									"                            // check responseObject\r",
									"                            // responseObject: \"{\"OperationStatus\":{\"Code\":\"20000\",\"DeveloperMessage\":\"The requested operation was successfully.\"}}\"\r",
									"\r",
									"                            console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeSuccess);\r",
									"                            console.log(\"response.OperationStatus.DeveloperMessage : \" + jsonParseResponseObject.OperationStatus.DeveloperMessage + \" = \" + resultDescriptionTheRequestedOperationWasSuccessfully); \r",
									"\r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeSuccess);  \r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheRequestedOperationWasSuccessfully);  \r",
									"                        }\r",
									"               \r",
									"                        if( endPointNameValue == endPointNameRabbitMQ){     //\"endPointName\":\"RabbitMQ\"\r",
									"                            console.log(\"custom1.endPointName : \" + resultDataLog.custom1.endPointName + \" = \" + endPointNameRabbitMQ);\r",
									"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameRabbitMQ); \r",
									"                        \r",
									"                            // check requestObject\r",
									"                            // \"requestObject\":\"{\\\"url\\\":\\\"internalreport.pub.v1.089320c4-3275-4d4d-98a9-1d598a3e70c1\\\",\\\"headers\\\":{\\\"x-ais-orderref\\\":\\\"ReportHTTP_202101291701676\\\",\\\"x-ais-sessionid\\\":\\\"1611916984472\\\",\\\"timestamp_in_ms\\\":\\\"1611916984473\\\"},\\\"body\\\":\\\"{\\\\\\\"AA\\\\\\\":\\\\\\\"686\\\\\\\",\\\\\\\"Timestamp\\\\\\\":\\\\\\\"2020-12-31T03:03:18+07:00\\\\\\\"}\\\"}\"\r",
									"\r",
									"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"\r",
									"                            let jsonParseRequestObjectBody = JSON.parse(jsonParseRequestObject.body);\r",
									"\r",
									"                            console.log(\"resquest.body.Payload.\" + SensorKey +\" : \" + jsonParseRequestObjectBody[SensorKey] + \" = \" + sensor.toString());\r",
									"                            pm.expect(jsonParseRequestObjectBody[SensorKey]).to.eql(sensor.toString());\r",
									"                            \r",
									"                            // check responseObject\r",
									"                            //  \"responseObject\":\"\\\"\\\"\",\r",
									"\r",
									"                            console.log(\"response : \" + JSON.stringify(jsonParseResponseObject) + \" = \" + JSON.stringify(\"\"));\r",
									"                            pm.expect(jsonParseResponseObject).to.eql(\"\");  \r",
									"                        }\r",
									"                    }); \r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// InquiryThing\r",
									"InquiryThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptInquiryThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_InquiryThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_InquiryThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestInquiryThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsInquiryThing = {\r",
									"            url: url + provisioningapis + urlThingInquiryThing,\r",
									"            method: 'POST',\r",
									"            header: headersOptInquiryThing,\r",
									"            body: httpRequestInquiryThing\r",
									"        };\r",
									"\r",
									"        // console.log('request InquiryThing');\r",
									"        let response = await reqPromise(optionsInquiryThing);\r",
									"        let jsonDataInquiryThing = await response.json();\r",
									"        // console.log('jsonDataInquiryThing',jsonDataInquiryThing)\r",
									"    \r",
									"        let operationStatusInquiryThing = await jsonDataInquiryThing.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"InquiryThing : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('InquiryThing : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusInquiryThing).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //InquiryThing is Success\r",
									"        pm.test('InquiryThing : OperationStatus Description is '+'\"'+ resultDescriptionInquiryThing+'\"', function () {\r",
									"            pm.expect(operationStatusInquiryThing).to.have.property('Description', resultDescriptionInquiryThing);\r",
									"        });\r",
									"\r",
									"        //Check Data\r",
									"        let thingInfo = await jsonDataInquiryThing.ThingInfo;\r",
									"        console.log('thingInfo',thingInfo)\r",
									"\r",
									"        for(let i=0;i<thingInfo.length;i++){\r",
									"            pm.test('Verify DB Check Data : Report [{ \"'+  [pm.environment.get(\"SensorKey_AsgardHTTP\")] + '\" : '+ pm.environment.get(\"random_Sensor_AsgardHTTP\") +' }]' , function () {\r",
									"                console.log(\"======== Verify DB Check Data ( Expected = Actual) [Asgard_HTTP(eSim) Report] ==================\");\r",
									"                console.log(\"ThingInfo[\"+ i +\"]StateInfo.Report.\" + pm.environment.get(\"SensorKey_AsgardHTTP\") + \" : \" + thingInfo[i].StateInfo.Report[pm.environment.get(\"SensorKey_AsgardHTTP\")] + \" = \" + JSON.stringify(pm.environment.get(\"random_Sensor_AsgardHTTP\")));\r",
									"\r",
									"                pm.expect(thingInfo[i].StateInfo.Report).to.have.property(pm.environment.get(\"SensorKey_AsgardHTTP\"), JSON.stringify(pm.environment.get(\"random_Sensor_AsgardHTTP\")));\r",
									"                \r",
									"            });\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"setTimeout(function(){SearchLogFindTid();}, 30000); \r",
									"setTimeout(function(){CheckLog();}, 50000); \r",
									"setTimeout(function(){InquiryThing();}, 60000); \r",
									"\r",
									"setTimeout(function(){RemoveThingStateInfo();}, 70000); \r",
									"setTimeout(function(){RemoveThing();}, 80000); \r",
									"setTimeout(function(){RemoveAccount();}, 90000); \r",
									"setTimeout(function(){RemovePartner();}, 100000); \r",
									"\r",
									"setTimeout(function(){\r",
									"pm.environment.unset(\"current_timestamp\");\r",
									"pm.environment.unset(\"AccessToken\");\r",
									"pm.environment.unset(\"random_number\");\r",
									"pm.environment.unset(\"PartnerName\");\r",
									"pm.environment.unset(\"MerchantContact\");\r",
									"pm.environment.unset(\"CPID\");\r",
									"pm.environment.unset(\"GetResponse_PartnerId\");\r",
									"pm.environment.unset(\"AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountId\");\r",
									"pm.environment.unset(\"random_IM\");\r",
									"pm.environment.unset(\"random_ICCID\");\r",
									"pm.environment.unset(\"ThingName\");\r",
									"pm.environment.unset(\"GetResponse_ThingID\");\r",
									"pm.environment.unset(\"GetResponse_IMSI\");\r",
									"pm.environment.unset(\"encodedKeys_Authorization_Register\");\r",
									"pm.environment.unset(\"encodedKeys_Authorization_Report\");\r",
									"pm.environment.unset(\"random_Sensor\");\r",
									"pm.environment.unset(\"GetResponse_ThingToken\");\r",
									"pm.environment.unset(\"tid\");\r",
									"pm.environment.unset(\"SensorKey_AsgardHTTP\");\r",
									"pm.environment.unset(\"random_Sensor_AsgardHTTP\");\r",
									"pm.environment.unset(\"timestamp\");\r",
									"}, 105000);\r",
									"setTimeout(async function(){}, 110000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var Username = pm.environment.get(\"Username\");\r",
									"var Password = pm.environment.get(\"Password\");\r",
									"\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"var httpapis = pm.environment.get(\"httpapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"pm.environment.set(\"SensorKey_AsgardHTTP\",fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP)\r",
									"\r",
									"// Timestamp 2020-12-31T03:03:18+07:00\r",
									"var timestamp = fieldDataValue.AsgardHTTP.Value_AsgardHTTP_Report_Timestamp;\r",
									"// console.log('currentTmestamp',currentTmestamp);\r",
									"pm.environment.set(\"timestamp\", timestamp);\r",
									"\r",
									"//format YYYYMMDDHHMMSSS\r",
									"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
									"// console.log('currentTmestamp',currentTmestamp);\r",
									"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var Basic = pm.environment.get(\"Basic\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- statusCodeList --------------//\r",
									"//set variable to statusCodeList JSON.parse\r",
									"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
									"//set global variable to statusCode 200\r",
									"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
									"//set global variable to statusCode 201\r",
									"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultCodeList --------------//\r",
									"//set variable to resultCodeList JSON.parse\r",
									"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
									"//set global variable to resultCode \"20000\"\r",
									"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
									"//set global variable to resultCode \"20100\"\r",
									"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionSuccessList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
									"//set global variable to resultDescription \"SignInProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
									"//set global variable to resultDescription \"CreatePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
									"//set global variable to resultDescription \"CreateAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
									"//set global variable to resultDescription \"CreateThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThing\", resultDescriptionSuccessList.resultDescriptionCreateThing);\r",
									"//set global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThingStateInfo\", resultDescriptionSuccessList.resultDescriptionCreateThingStateInfo);\r",
									"//set global variable to resultDescription \"RemovePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
									"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
									"//set global variable to resultDescription \"RemoveThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThing\", resultDescriptionSuccessList.resultDescriptionRemoveThing);\r",
									"//set global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThingStateInfo\", resultDescriptionSuccessList.resultDescriptionRemoveThingStateInfo);\r",
									"//set global variable to resultDescription \"Register is Success\"\r",
									"pm.globals.set(\"resultDescriptionRegisterIsSuccess\", resultDescriptionSuccessList.resultDescriptionRegisterIsSuccess);\r",
									"//set global variable to resultDescription \"ReportProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionReportProcessIsSuccess\", resultDescriptionSuccessList.resultDescriptionReportProcessIsSuccess);\r",
									"//set global variable to resultDescription \"The requested operation was successfully.\"\r",
									"pm.globals.set(\"resultDescriptionTheRequestedOperationWasSuccessfully\", resultDescriptionSuccessList.resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"//set global variable to resultDescription \"InquiryThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionInquiryThing\", resultDescriptionSuccessList.resultDescriptionInquiryThing);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- HeaderList --------------//\r",
									"//set variable to HeaderList JSON.parse\r",
									"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
									"//---------------- set globals Other --------------//\r",
									"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
									"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
									"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
									"//set global variable to kbn-versio \"7.5.1\"\r",
									"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Signin_ --------------//\r",
									"//set global variable to x_ais_OrderRef \"Signin_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreatePartner --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
									"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
									"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
									"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreateAccount --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
									"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
									"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Thing --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThing\", HeaderList.Thing.x_ais_OrderRef_CreateThing);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThing\", HeaderList.Thing.x_ais_OrderDesc_CreateThing);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThing\", HeaderList.Thing.x_ais_OrderRef_RemoveThing);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThing\", HeaderList.Thing.x_ais_OrderDesc_RemoveThing);\r",
									"//set global variable to x_ais_OrderRef \"InquiryThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_InquiryThing\", HeaderList.Thing.x_ais_OrderRef_InquiryThing);\r",
									"//set global variable to x_ais_OrderDesc \"InquiryThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_InquiryThing\", HeaderList.Thing.x_ais_OrderDesc_InquiryThing);\r",
									"//set global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_RemoveThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_RemoveThingStateInfo);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals AsgardHTTP --------------//\r",
									"//set global variable to x_ais_OrderRef \"RegisHTTP_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RegisHTTP\", HeaderList.AsgardHTTP.x_ais_OrderRef_RegisHTTP);\r",
									"//set global variable to x_ais_OrderDesc \"Register Thing in MG\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RegisHTTP\", HeaderList.AsgardHTTP.x_ais_OrderDesc_RegisHTTP);\r",
									"//set global variable to x_ais_OrderRef \"ReportHTTP_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ReportHTTP\", HeaderList.AsgardHTTP.x_ais_OrderRef_ReportHTTP);\r",
									"//set global variable to x_ais_OrderDesc \"Report Data to MG\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_ReportHTTP\", HeaderList.AsgardHTTP.x_ais_OrderDesc_ReportHTTP);\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"SignInProcess is Success\"\r",
									"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
									"//get global variable to resultDescription \"CreatePartner is Success\"\r",
									"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
									"//get global variable to resultDescription \"CreateAccount is Success\"\r",
									"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
									"//get global variable to resultDescription \"CreateThing is Success\"\r",
									"var resultDescriptionCreateThing = pm.globals.get(\"resultDescriptionCreateThing\");\r",
									"//get global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"var resultDescriptionCreateThingStateInfo = pm.globals.get(\"resultDescriptionCreateThingStateInfo\");\r",
									"//get global variable to resultDescription \"Register is Success\"\r",
									"var resultDescriptionRegisterIsSuccess = pm.globals.get(\"resultDescriptionRegisterIsSuccess\");\r",
									"//get global variable to resultDescription \"The requested operation was successfully.\"\r",
									"var resultDescriptionTheRequestedOperationWasSuccessfully = pm.globals.get(\"resultDescriptionTheRequestedOperationWasSuccessfully\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- urlRouteList --------------//\r",
									"//set variable to urlRouteList JSON.parse\r",
									"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
									"//---------------- set url Create --------------//\r",
									"//set global variable to url \"/api/v1/auth/signin\"\r",
									"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
									"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
									"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"pm.globals.set(\"urlThingCreateThing\", urlRouteList.Thing.urlThingCreateThing);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"pm.globals.set(\"urlThingCreateThingStateInfo\", urlRouteList.Thing.urlThingCreateThingStateInfo);\r",
									"//set global variable to url \"/api/register/sim/v1\"\r",
									"pm.globals.set(\"urlAsgardHTTPeSimRegister\", urlRouteList.AsgardHTTPeSim.urlAsgardHTTPeSimRegister);\r",
									"//set global variable to url \"/api/report/sim/v1\"\r",
									"pm.globals.set(\"urlAsgardHTTPeSimReport\", urlRouteList.AsgardHTTPeSim.urlAsgardHTTPeSimReport);\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to url \"/api/v1/auth/signin\"\r",
									"var urlSignin = pm.globals.get(\"urlSignin\");\r",
									"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
									"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"var urlThingCreateThing = pm.globals.get(\"urlThingCreateThing\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"var urlThingCreateThingStateInfo = pm.globals.get(\"urlThingCreateThingStateInfo\");\r",
									"//get global variable to url \"/api/register/sim/v1\"\r",
									"var urlAsgardHTTPeSimRegister = pm.globals.get(\"urlAsgardHTTPeSimRegister\");\r",
									"//get global variable to url \"/api/report/sim/v1\"\r",
									"var urlAsgardHTTPeSimReport = pm.globals.get(\"urlAsgardHTTPeSimReport\");\r",
									"//---------------- set url Remove --------------//\r",
									"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
									"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"pm.globals.set(\"urlThingRemoveThing\", urlRouteList.Thing.urlThingRemoveThing);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"pm.globals.set(\"urlThingRemoveThingStateInfo\", urlRouteList.Thing.urlThingRemoveThingStateInfo);\r",
									"//---------------- set url Inquiry --------------//\r",
									"//set global variable to url \"/api/v1/Thing/InquiryThing\"\r",
									"pm.globals.set(\"urlThingInquiryThing\", urlRouteList.Thing.urlThingInquiryThing);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Signin_ --------------//\r",
									"//get global variable to x_ais_OrderRef \"Signin_\"\r",
									"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"var x_ais_OrderRef_CreateThing = pm.globals.get(\"x_ais_OrderRef_CreateThing\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"var x_ais_OrderDesc_CreateThing = pm.globals.get(\"x_ais_OrderDesc_CreateThing\");\r",
									"//get global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"var x_ais_OrderRef_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderRef_CreateThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"var x_ais_OrderDesc_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_CreateThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals AsgardHTTP --------------//\r",
									"//get global variable to x_ais_OrderRef \"RegisHTTP_\"\r",
									"var x_ais_OrderRef_RegisHTTP = pm.globals.get(\"x_ais_OrderRef_RegisHTTP\");\r",
									"//get global variable to x_ais_OrderDesc \"Register Thing in MG\"\r",
									"var x_ais_OrderDesc_RegisHTTP = pm.globals.get(\"x_ais_OrderDesc_RegisHTTP\");\r",
									"//------------------------------------------------------------//\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// Signin get token\r",
									"Signin = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSignin = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_Signin + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_UserAuthentication,\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestSignin = {\r",
									"            mode: 'raw',\r",
									"            raw:\r",
									"                JSON.stringify({\r",
									"                    username: Username,\r",
									"                    password: Password\r",
									"                })\r",
									"        };\r",
									"\r",
									"        let optionsSignin = {\r",
									"            url: url + provisioningapis + urlSignin,\r",
									"            method: 'POST',\r",
									"            header: headersOptSignin,\r",
									"            body: httpRequestSignin\r",
									"        };\r",
									"        // console.log('request Signin');\r",
									"        let response = await reqPromise(optionsSignin);\r",
									"        let jsonDataSignin = await response.json();\r",
									"\r",
									"        // setAccessToken\r",
									"        await pm.environment.set(\"AccessToken\", jsonDataSignin.AccessToken);\r",
									"\r",
									"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('Signin : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // SignInProcess is Success\r",
									"        pm.test('Signin : OperationStatus Description is ' + '\"' + resultDescriptionSuccessSignIn + '\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
									"        });\r",
									"\r",
									"        //set random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //set PartnerName\r",
									"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
									"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
									"        //set MerchantContact\r",
									"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
									"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
									"        // set CPID\r",
									"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
									"        pm.environment.set(\"CPID\", CPIDValue)\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreatePartner\r",
									"CreatePartner = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreatePartner = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreatePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreatePartner,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreatePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
									"                \"PartnerType\": [\r",
									"                    \"Supplier\",\r",
									"                    \"Customer\"\r",
									"                ],\r",
									"                \"PartnerDetail\": {\r",
									"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
									"                    \"CPID\": pm.environment.get(\"CPID\")\r",
									"                },\r",
									"                \"Property\": {\r",
									"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreatePartner = {\r",
									"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreatePartner,\r",
									"            body: httpRequestCreatePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsCreatePartner);\r",
									"        let jsonDataCreatePartner = await response.json();\r",
									"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
									"\r",
									"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreatePartner : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreatePartner is Success\r",
									"        pm.test('CreatePartner : OperationStatus Description is ' + '\"' + resultDescriptionCreatePartner + '\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
									"        });\r",
									"\r",
									"        //GetResponse_PartnerId\r",
									"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
									"\r",
									"        //Accountname\r",
									"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
									"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateAccount\r",
									"CreateAccount = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateAccount = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateAccount,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreateAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateAccount = {\r",
									"            url: url + provisioningapis + urlAccountCreateAccount,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateAccount,\r",
									"            body: httpRequestCreateAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateAccount');\r",
									"        let response = await reqPromise(optionsCreateAccount);\r",
									"        let jsonDataCreateAccount = await response.json();\r",
									"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
									"\r",
									"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateAccount : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateAccount is Success\r",
									"        pm.test('CreateAccount : OperationStatus Description is ' + '\"' + resultDescriptionCreateAccount + '\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
									"        });\r",
									"        // GetResponse_AccountName\r",
									"        pm.environment.set(\"GetResponse_AccountName\", jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
									"        // GetResponse_AccountId\r",
									"        pm.environment.set(\"GetResponse_AccountId\", jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
									"        // random_IM\r",
									"        pm.environment.set(\"random_IM\", _.random(10000000, 99999999) + \" \" + _.random(1000000, 9999999))\r",
									"        // random_ICCID\r",
									"        pm.environment.set(\"random_ICCID\", _.random(1000000, 9999999) + \" \" + _.random(100000, 999999))\r",
									"        // random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //ThingName\r",
									"        let thingNameValue = fieldDataValue.Thing.ThingNameValue; // \"Sensor_TestThingName\"\r",
									"        pm.environment.set(\"ThingName\", thingNameValue + pm.environment.get(\"random_number\"))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThing\r",
									"CreateThing = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThing = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateThing + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateThing,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey': pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreateThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingName\": pm.environment.get(\"ThingName\"),\r",
									"                \"IMEI\": pm.environment.get(\"random_IM\"),\r",
									"                \"IMSI\": pm.environment.get(\"random_IM\"),\r",
									"                \"ICCID\": pm.environment.get(\"random_ICCID\"),\r",
									"                \"RouteUrl\": fieldDataValue.Thing.RouteUrlValue , //[\"http://10.12.3.4:2019/api/information/AddInformation\"]\r",
									"                \"RouteInfo\": {\r",
									"                    \"MIMO_ID\": fieldDataValue.Thing.RouteInfoMIMOIDValue , //\"606edada\"\r",
									"                    \"MIMO_SerialNo\": fieldDataValue.Thing.RouteInfoMIMOSerialNoValue //5466758878\r",
									"                },\r",
									"                \"RouteFlag\": {\r",
									"                    \"ThingName\": fieldDataValue.Thing.RouteFlagThingNameValue , //true\r",
									"                    \"ThingToken\": fieldDataValue.Thing.RouteFlagThingTokenValue, //true\r",
									"                    \"IMEI\": fieldDataValue.Thing.RouteFlagIMEIValue, //true\r",
									"                    \"ICCID\": fieldDataValue.Thing.RouteFlagICCIDValue, //true\r",
									"                    \"RouteInfo\": fieldDataValue.Thing.RouteFlagRouteInfoValue //true\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateThing = {\r",
									"            url: url + provisioningapis + urlThingCreateThing,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThing,\r",
									"            body: httpRequestCreateThing\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThing');\r",
									"        let response = await reqPromise(optionsCreateThing);\r",
									"        let jsonDataCreateThing = await response.json();\r",
									"        // console.log('jsonDataCreateThing',jsonDataCreateThing)\r",
									"\r",
									"        let operationStatusCreateThing = await jsonDataCreateThing.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateThing : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateThing : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateThing is Success\r",
									"        pm.test('CreateThing : OperationStatus Description is ' + '\"' + resultDescriptionCreateThing + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Description', resultDescriptionCreateThing);\r",
									"        });\r",
									"\r",
									"        pm.environment.set(\"GetResponse_ThingID\", jsonDataCreateThing.ThingInfo.ThingId)\r",
									"        pm.environment.set(\"GetResponse_IMSI\", jsonDataCreateThing.ThingInfo.IMSI)\r",
									"        \r",
									"        let keys = pm.environment.get(\"GetResponse_IMSI\") + \":\" + pm.environment.get(\"IpAddress\");\r",
									"        // console.log(\"keys\", keys);\r",
									"        let encodedKeys = CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(keys));\r",
									"        pm.environment.set(\"encodedKeys_Authorization_Register\", encodedKeys);\r",
									"\r",
									"        //Get Random Sensor \r",
									"        pm.environment.set(\"random_Sensor\", _.random(100, 999))\r",
									"\r",
									"        //Get Random Sensor AsgardHTTP\r",
									"        pm.environment.set(\"random_Sensor_AsgardHTTP\", _.random(100, 999))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThingStateInfo\r",
									"CreateThingStateInfo = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThingStateInfo = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateThingStateInfo,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey': pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        // {\"AA\" : pm.environment.get(\"random_Sensor\")}\r",
									"        let sensorValue = {};\r",
									"        sensorValue[fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP] = pm.environment.get(\"random_Sensor\");\r",
									"        // console.log('sensorValue',sensorValue);\r",
									"        \r",
									"        let httpRequestCreateThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": [\r",
									"                    pm.environment.get(\"GetResponse_ThingID\")\r",
									"                ],\r",
									"                \"Type\": fieldDataValue.CreateThingStateInfo.Type_Report,\r",
									"                \"Sensor\": sensorValue\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingCreateThingStateInfo,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThingStateInfo,\r",
									"            body: httpRequestCreateThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThingStateInfo');\r",
									"        let response = await reqPromise(optionsCreateThingStateInfo);\r",
									"        let jsonDataCreateThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataCreateThingStateInfo',jsonDataCreateThingStateInfo)\r",
									"\r",
									"        let operationStatusCreateThingStateInfo = await jsonDataCreateThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"CreateThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //CreateThingStateInfo is Success\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Description is ' + '\"' + resultDescriptionCreateThingStateInfo + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Description', resultDescriptionCreateThingStateInfo);\r",
									"        });\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// AsgardHTTPeSimRegister\r",
									"AsgardHTTPeSimRegister = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptAsgardHTTPeSimRegister = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_RegisHTTP + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_RegisHTTP,\r",
									"            'Authorization': Basic + ' ' + pm.environment.get(\"encodedKeys_Authorization_Register\")\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestAsgardHTTPeSimRegister = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({})\r",
									"        };\r",
									"\r",
									"        let optionsAsgardHTTPeSimRegister = {\r",
									"            url: url + httpapis + urlAsgardHTTPeSimRegister,\r",
									"            method: 'POST',\r",
									"            header: headersOptAsgardHTTPeSimRegister,\r",
									"            body: httpRequestAsgardHTTPeSimRegister\r",
									"        };\r",
									"\r",
									"        // console.log('request AsgardHTTPEsimRegister');\r",
									"        let response = await reqPromise(optionsAsgardHTTPeSimRegister);\r",
									"        let jsonDataAsgardHTTPeSimRegister = await response.json();\r",
									"        // console.log('jsonDataCreateThingStateInfo',jsonDataAsgardHTTPeSimRegister)\r",
									"        let operationStatusAsgardHTTPeSimRegister = await jsonDataAsgardHTTPeSimRegister.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"Asgard HTTP(eSim) Register : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('Asgard HTTP(eSim) Register : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusAsgardHTTPeSimRegister).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"\r",
									"        // The requested operation was successfully.\r",
									"        pm.test('Asgard HTTP(eSim) Register : OperationStatus DeveloperMessage is ' + '\"' + resultDescriptionTheRequestedOperationWasSuccessfully + '\"', function () {\r",
									"            pm.expect(operationStatusAsgardHTTPeSimRegister).to.have.property('DeveloperMessage', resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"        });\r",
									"\r",
									"        await pm.environment.set(\"GetResponse_ThingToken\", jsonDataAsgardHTTPeSimRegister.ThingToken)\r",
									"        let keys2 = await pm.environment.get(\"GetResponse_ThingToken\") + \":\" + pm.environment.get(\"IpAddress\");        \r",
									"        let encodedKeys2 = await CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(keys2));\r",
									"        pm.environment.set(\"encodedKeys_Authorization_Report\", encodedKeys2)\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"Signin();\r",
									"setTimeout(async function(){await CreatePartner();}, 3000); \r",
									"setTimeout(async function(){await CreateAccount();}, 6000); \r",
									"setTimeout(async function(){await CreateThing();}, 8000); \r",
									"setTimeout(async function(){await CreateThingStateInfo();}, 9000); \r",
									"setTimeout(async function(){await AsgardHTTPeSimRegister();}, 10000); \r",
									"setTimeout(async function(){}, 20000); //for wait value encodedKeys_Authorization_Report"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-ais-UserName",
								"type": "text",
								"value": "{{x_ais_UserName_AisPartner}}"
							},
							{
								"key": "x-ais-OrderRef",
								"value": "{{x_ais_OrderRef_ReportHTTP}}{{current_timestamp}}"
							},
							{
								"key": "x-ais-OrderDesc",
								"type": "text",
								"value": "{{x_ais_OrderDesc_ReportHTTP}}"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{Basic}} {{encodedKeys_Authorization_Report}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Payload\": {\r\n        \"{{SensorKey_AsgardHTTP}}\" : \"{{random_Sensor_AsgardHTTP}}\", \r\n        \"Timestamp\": \"{{timestamp}}\"\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{url}}{{httpapis}}/api/report/sim/v1",
							"host": [
								"{{url}}{{httpapis}}"
							],
							"path": [
								"api",
								"report",
								"sim",
								"v1"
							]
						},
						"description": "Type:Desire"
					},
					"response": []
				},
				{
					"name": "AsgardHTTPeSimReport_TST_F1_0_1_002_Error_ThingTokanNotfound",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var Basic = pm.environment.get(\"Basic\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to xAisOrderRef \"RemoveThing_\"\r",
									"var x_ais_OrderRef_RemoveThing = pm.globals.get(\"x_ais_OrderRef_RemoveThing\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"var x_ais_OrderDesc_RemoveThing = pm.globals.get(\"x_ais_OrderDesc_RemoveThing\");\r",
									"//get global variable to x_ais_OrderRef \"RemoveThing_\"\r",
									"var x_ais_OrderDesc_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_RemoveThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"var x_ais_OrderRef_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderRef_RemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals AsgardHTTP --------------//\r",
									"//get global variable to x_ais_OrderRef \"ReportHTTP_\"\r",
									"var x_ais_OrderRef_ReportHTTP = pm.globals.get(\"x_ais_OrderRef_ReportHTTP\");\r",
									"//get global variable to x_ais_OrderRef \"ReportHTTPfail_\"\r",
									"var x_ais_OrderRef_ReportHTTP_fail = pm.globals.get(\"x_ais_OrderRef_ReportHTTP_fail\");\r",
									"//get global variable to x_ais_OrderDesc \"Report Data to MG\"\r",
									"var x_ais_OrderDesc_ReportHTTP = pm.globals.get(\"x_ais_OrderDesc_ReportHTTP\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get url Remove --------------//\r",
									"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
									"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"var urlThingRemoveThing = pm.globals.get(\"urlThingRemoveThing\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"var urlThingRemoveThingStateInfo = pm.globals.get(\"urlThingRemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"RemovePartner is Success\"\r",
									"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
									"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
									"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
									"//get global variable to resultDescription \"RemoveThing is Success\"\r",
									"var resultDescriptionRemoveThing = pm.globals.get(\"resultDescriptionRemoveThing\");\r",
									"//get global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"var resultDescriptionRemoveThingStateInfo = pm.globals.get(\"resultDescriptionRemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 404\r",
									"var statusCodeNotFound = pm.globals.get(\"statusCodeNotFound\");\r",
									"//get global variable to resultCode \"40400\"\r",
									"var resultCodeNotFound = pm.globals.get(\"resultCodeNotFound\");\r",
									"//get global variable to resultDescription \"The requested operation could not be found.\"\r",
									"var resultDescriptionTheRequestedOperationCouldNotBeFound = pm.globals.get(\"resultDescriptionTheRequestedOperationCouldNotBeFound\");\r",
									"//------------------------------------------------------------//\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Asgard HTTP(eSim) Report : Status code is \" + statusCodeNotFound, function () {\r",
									"    pm.response.to.have.status(statusCodeNotFound);\r",
									"});\r",
									"\r",
									"pm.test('Asgard HTTP(eSim) Report : operationStatus code is '+'\"'+ resultCodeNotFound +'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeNotFound);\r",
									"});\r",
									"\r",
									"pm.test('Asgard HTTP(eSim) Report : operationStatus DeveloperMessage is '+'\"'+ resultDescriptionTheRequestedOperationCouldNotBeFound+'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheRequestedOperationCouldNotBeFound);\r",
									"});\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// RemovePartner\r",
									" RemovePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemovePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemovePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemovePartner = {\r",
									"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemovePartner,\r",
									"            body: httpRequestRemovePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request RemovePartner');\r",
									"        let response = await reqPromise(optionsRemovePartner);\r",
									"        let jsonDataRemovePartner = await response.json();\r",
									"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
									"    \r",
									"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemovePartner is Success\r",
									"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveAccount\r",
									" RemoveAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemoveAccount = {\r",
									"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveAccount,\r",
									"            body: httpRequestRemoveAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveAccount');\r",
									"        let response = await reqPromise(optionsRemoveAccount);\r",
									"        let jsonDataRemoveAccount = await response.json();\r",
									"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
									"    \r",
									"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveAccount is Success\r",
									"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThing\r",
									" RemoveThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThing = {\r",
									"            url: url + provisioningapis + urlThingRemoveThing,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThing,\r",
									"            body: httpRequestRemoveThing\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveThing');\r",
									"        let response = await reqPromise(optionsRemoveThing);\r",
									"        let jsonDataRemoveThing = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThing)\r",
									"    \r",
									"        let operationStatusRemoveThing = await jsonDataRemoveThing.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThing : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThing : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThing is Success\r",
									"        pm.test('RemoveThing : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThing+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Description', resultDescriptionRemoveThing);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThingStateInfo\r",
									" RemoveThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"            \r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\"),\r",
									"                \"stateType\": fieldDataValue.CreateThingStateInfo.Type_Report, //Report\r",
									"                \"stateKey\": fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP //AA\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingRemoveThingStateInfo,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThingStateInfo,\r",
									"            body: httpRequestRemoveThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('response RemoveThingStateInfo');\r",
									"        let response = await reqPromise(optionsRemoveThingStateInfo);\r",
									"        let jsonDataRemoveThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThingStateInfo)\r",
									"    \r",
									"        let operationStatusRemoveThingStateInfo = await jsonDataRemoveThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThingStateInfo is Success\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThingStateInfo+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Description', resultDescriptionRemoveThingStateInfo);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"//---------------- LogDefaultValue --------------//\r",
									"//set variable to LogDefaultValue JSON.parse\r",
									"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
									"// console.log('LogDefaultValue',LogDefaultValue);\r",
									"//---------------- set globals Other --------------//\r",
									"var SearchLog = LogDefaultValue.SearchLog;\r",
									"// console.log('SearchLog',SearchLog);\r",
									"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
									"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
									"var kbn_version = SearchLog.header.kbn_version;\r",
									"var authorization = SearchLog.header.Authorization;\r",
									"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
									"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
									"var namespace = LogDefaultValue.Other.namespace;\r",
									"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
									"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
									"var header_x_ais_username = LogDefaultValue.Other.header_x_ais_username;\r",
									"var methodPost = LogDefaultValue.Other.methodPost;\r",
									"\r",
									"// Detail\r",
									"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
									"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
									"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
									"\r",
									"// Summary\r",
									"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
									"var identitySummary = \"\";\r",
									"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
									"\r",
									"// Asgard.Http.APIs\r",
									"var applicationName = LogDefaultValue.AsgardHTTP.applicationName;\r",
									"var cmdName = LogDefaultValue.AsgardHTTP.cmdNameReport;\r",
									"var endPointNameRabbitMQ = LogDefaultValue.AsgardHTTP.endPointNameRabbitMQ;\r",
									"var containerId = LogDefaultValue.AsgardHTTP.containerId;\r",
									"var requestObjectUrlStaging = LogDefaultValue.AsgardHTTP.requestObjectUrlReportMgStaging;\r",
									"var urlReport  = LogDefaultValue.AsgardHTTP.urlReport;\r",
									"\r",
									"// Check CDR (Summary Log) and EDR (Detail Log)\r",
									"SearchLogFindTid = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSearchLogFindTid = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = x_ais_OrderRef_ReportHTTP_fail + current_timestamp; \r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestSearchLogFindTid = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"phrase\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"\r",
									"        let optionsSearchLogFindTid = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptSearchLogFindTid,\r",
									"            body: httpRequestSearchLogFindTid\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsSearchLogFindTid);\r",
									"        let jsonDataSearchLogFindTid = await response.json();\r",
									"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
									"        console.log('hits',hits)\r",
									"  \r",
									"        // find tid\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            // let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"        \r",
									"            // console.log('logType',logType)\r",
									"            //  console.log('applicationNameValue',applicationNameValue)\r",
									"            //  console.log('applicationName',applicationName)\r",
									"            if(applicationNameValue == applicationName){\r",
									"                let tid = hits[i]._source.cauldron.tid;\r",
									"                pm.environment.set(\"tid\", tid);\r",
									"                break;\r",
									"           }\r",
									"        }\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"CheckLog = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCheckLog = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = pm.environment.get(\"tid\");\r",
									"\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"         console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestCheckLog = {\r",
									"            mode: 'raw',\r",
									"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"phrase\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"        let optionsCheckLog = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptCheckLog,\r",
									"            body: httpRequestCheckLog\r",
									"        }; \r",
									"        let response = await reqPromise(optionsCheckLog);\r",
									"        let jsonDataCheckLog = await response.json();\r",
									"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
									"        \r",
									"        // //200\r",
									"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });     \r",
									"        \r",
									"        let hits = jsonDataCheckLog.hits.hits\r",
									"         console.log('hits',hits)\r",
									"  \r",
									"        // find logType\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            //  let logType = hits[i]._source.cauldron.logType\r",
									"            let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"           \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            \r",
									"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
									"            // console.log('resultDataLog',resultDataLog)\r",
									"\r",
									"            let tidControl = x_ais_OrderRef_ReportHTTP_fail  + current_timestamp;\r",
									"            // console.log(tidControl);\r",
									"            if(applicationNameValue == applicationName){\r",
									"                 \r",
									"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and Asgard.Http.APIs\r",
									"                    pm.test(\"Check Summary Log : Asgard_HTTP(eSim) Report\" , function () {\r",
									"                        console.log(\"======== Check Summary Log ( Expected = Actual) [Asgard_HTTP(eSim) Report] ==================\");\r",
									"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
									"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
									"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeNotFound);\r",
									"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionTheRequestedOperationCouldNotBeFound);\r",
									"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
									"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"identity : \" + JSON.stringify(resultDataLog.identity) + \" = \" + JSON.stringify(identitySummary));\r",
									"                        // console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
									"\r",
									"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
									"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
									"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeNotFound); \r",
									"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionTheRequestedOperationCouldNotBeFound); \r",
									"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
									"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
									"                        // pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
									"\r",
									"                        // check custom\r",
									"                        // \\\"custom\\\":{ \\\"endPointSummary\\\":[ { \\\"no\\\":\\\"1\\\", \\\"endPointName\\\":\\\"db.ThingsCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:Inquiry was Success\\\", \\\"processTime\\\":0.0008 } ] }\r",
									"\r",
									"                        let custom = resultDataLog.custom.endPointSummary;\r",
									"                        let countCustom = custom.length;\r",
									"                       \r",
									"                        // [\"db.ThingsCollection\"]\r",
									"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_Asgard_HTTP_eSim_Report_002_004_005_006;\r",
									"                        // [\"20000:Inquiry was Success\"]\r",
									"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_Asgard_HTTP_eSim_Report_002_004_005_006;\r",
									"                        let countCustomStep = dataEndPointName.length;\r",
									"\r",
									"                        console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep);\r",
									"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
									"                        \r",
									"                        for(let i=0;i<countCustomStep;i++){\r",
									"                            let no = custom[i].no;\r",
									"                            let valueEndPointName = custom[i].endPointName;\r",
									"                            let valueResponseStatus = custom[i].responseStatus;\r",
									"                            // console.log(\"i\",i);\r",
									"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
									"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
									"\r",
									"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString());\r",
									"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i]);\r",
									"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i]);\r",
									"\r",
									"                            pm.expect(no).to.eql((i+1).toString()); \r",
									"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
									"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]); \r",
									"                        }\r",
									"                    }); \r",
									"                }\r",
									"\r",
									"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and Asgard.Http.APIs\r",
									"\r",
									"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
									"                    // console.log('endPointNameValue ',endPointNameValue)\r",
									"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [Asgard_HTTP(eSim) Report]\", function () {\r",
									"                        console.log(\"======== Check Detail Log ( Expected = Actual) [Asgard_HTTP(eSim) Report] ==================\");\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
									"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
									"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
									"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.custom1.activityLog.processTime + \" = \" + resultDataLog.custom1.activityLog.processTime);\r",
									"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
									"\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
									"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
									"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
									"\r",
									"                        let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
									"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
									"                        let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
									"                            // console.log('jsonParseResponseObject',jsonParseResponseObject); \r",
									"                        let url = urlReport; \r",
									"                        let x_ais_orderref = x_ais_OrderRef_ReportHTTP_fail + current_timestamp;\r",
									"                        let x_ais_orderdesc = x_ais_OrderDesc_ReportHTTP;\r",
									"                        let x_ais_userName = x_ais_UserName_AisPartner;\r",
									"                        let authorization = Basic + ' ' + pm.environment.get(\"encodedKeys_Authorization_Report\");\r",
									"                        let SensorKey = fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP;\r",
									"                        let sensor = pm.environment.get(\"random_Sensor_AsgardHTTP\");\r",
									"                        let timestamp = pm.environment.get(\"timestamp\");\r",
									"\r",
									"                        if( endPointNameValue == undefined){\r",
									"                            // check requestObject\r",
									"                            // \"requestObject\":\"{\\\"url\\\":\\\"/api/report/sim/v1\\\",\\\"method\\\":\\\"POST\\\",\\\"headers\\\":{\\\"Cache-Control\\\":\\\"no-cache\\\",\\\"Content-Type\\\":\\\"application/json\\\",\\\"Accept\\\":\\\"*/*\\\",\\\"Accept-Encoding\\\":\\\"gzip,deflate,br\\\",\\\"Authorization\\\":\\\"Basic OWM0ZDgzZjUtNjNhNS00OGJlLWE1MzMtMmYwMzI3NTU3YWFjeHg6MS4yLjMuNA==\\\",\\\"Host\\\":\\\"mg-staging.sandais.com\\\",\\\"User-Agent\\\":\\\"PostmanRuntime/7.26.8\\\",\\\"Content-Length\\\":\\\"89\\\",\\\"x-real-ip\\\":\\\"58.8.214.174\\\",\\\"x-forwarded-for\\\":\\\"58.8.214.174\\\",\\\"x-forwarded-proto\\\":\\\"https\\\",\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"ReportHTTPfail_202102151702830\\\",\\\"x-ais-orderdesc\\\":\\\"Report Data to MG\\\",\\\"postman-token\\\":\\\"933da003-bcde-4576-95f5-d2ee8667187a\\\",\\\"x-request-id\\\":\\\"018277e8-4da1-4938-b53e-a5b5bcc4b3a9\\\",\\\"x-b3-traceid\\\":\\\"3070c97568f63ed143ddfff065b7a837\\\",\\\"x-b3-spanid\\\":\\\"43ddfff065b7a837\\\",\\\"x-b3-sampled\\\":\\\"0\\\",\\\"x-ais-SessionId\\\":\\\"1613384652608\\\"},\\\"queryString\\\":{},\\\"routeParamteters\\\":{},\\\"body\\\":{\\\"Payload\\\":{\\\"AA\\\":\\\"856\\\",\\\"Timestamp\\\":\\\"2020-12-31T03:03:18+07:00\\\"}}}\"\r",
									"\r",
									"                            // \\\"requestObject\\\":\\\"{ \\\\\\\"url\\\\\\\":\\\\\\\"/api/report/sim/v1\\\\\\\", \\\\\\\"method\\\\\\\":\\\\\\\"POST\\\\\\\", \\\\\\\"headers\\\\\\\":{ \\\\\\\"Cache-Control\\\\\\\":\\\\\\\"no-cache\\\\\\\", \\\\\\\"Content-Type\\\\\\\":\\\\\\\"application/json\\\\\\\", \\\\\\\"Accept\\\\\\\":\\\\\\\"*/*\\\\\\\", \\\\\\\"Accept-Encoding\\\\\\\":\\\\\\\"gzip, deflate, br\\\\\\\", \\\\\\\"Authorization\\\\\\\":\\\\\\\"Basic ZTcxYWNhOTUtNjQyMi00ZDFkLTk0MjAtZTc4NjkxZDdmNzhjeHg6MS4yLjMuNA==\\\\\\\", \\\\\\\"Host\\\\\\\":\\\\\\\"mg-iot.sandais.com\\\\\\\", \\\\\\\"User-Agent\\\\\\\":\\\\\\\"PostmanRuntime/7.26.8\\\\\\\", \\\\\\\"Content-Length\\\\\\\":\\\\\\\"103\\\\\\\", \\\\\\\"x-real-ip\\\\\\\":\\\\\\\"182.232.183.255\\\\\\\", \\\\\\\"x-forwarded-for\\\\\\\":\\\\\\\"182.232.183.255, 10.233.66.0\\\\\\\", \\\\\\\"x-forwarded-proto\\\\\\\":\\\\\\\"http\\\\\\\", \\\\\\\"x-ais-username\\\\\\\":\\\\\\\"AisPartner\\\\\\\", \\\\\\\"x-ais-orderref\\\\\\\":\\\\\\\"ReportHTTPfail_202105111905862\\\\\\\", \\\\\\\"x-ais-orderdesc\\\\\\\":\\\\\\\"Report Data to MG\\\\\\\", \\\\\\\"postman-token\\\\\\\":\\\\\\\"79d4deb1-02c1-49c3-b8d9-62d858bf3c3e\\\\\\\", \\\\\\\"x-envoy-external-address\\\\\\\":\\\\\\\"10.233.66.0\\\\\\\", \\\\\\\"x-request-id\\\\\\\":\\\\\\\"474a9ece-709a-4132-89b3-e836d75fe0e4\\\\\\\", \\\\\\\"x-envoy-original-path\\\\\\\":\\\\\\\"/httpapis/api/report/sim/v1\\\\\\\", \\\\\\\"x-b3-traceid\\\\\\\":\\\\\\\"a69a88556493e1a54a46c050f71abf8d\\\\\\\", \\\\\\\"x-b3-spanid\\\\\\\":\\\\\\\"2064b055aef48ab7\\\\\\\", \\\\\\\"x-b3-parentspanid\\\\\\\":\\\\\\\"4a46c050f71abf8d\\\\\\\", \\\\\\\"x-b3-sampled\\\\\\\":\\\\\\\"0\\\\\\\", \\\\\\\"x-ais-SessionId\\\\\\\":\\\\\\\"1620734533804\\\\\\\" }, \\\\\\\"queryString\\\\\\\":{ }, \\\\\\\"routeParamteters\\\\\\\":{ }, \\\\\\\"body\\\\\\\":{ \\\\\\\"Payload\\\\\\\":{ \\\\\\\"AA\\\\\\\":\\\\\\\"861\\\\\\\", \\\\\\\"Timestamp\\\\\\\":\\\\\\\"2020-12-31T03:03:18+07:00\\\\\\\" } } }\\\"\r",
									"\r",
									"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
									"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
									"                            console.log(\"headers.x_ais_userName : \" + jsonParseRequestObject.headers[header_x_ais_username] + \" = \" + x_ais_userName);\r",
									"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
									"                            console.log(\"headers.Authorization : \" + jsonParseRequestObject.headers.Authorization + \" = \" + authorization);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
									"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_username]).to.eql(x_ais_userName);\r",
									"                            pm.expect(jsonParseRequestObject.headers.Authorization).to.eql(authorization);\r",
									"\r",
									"                            console.log(\"queryString : \" + JSON.stringify(jsonParseRequestObject.queryString) + \" = \" + JSON.stringify({}));\r",
									"                            console.log(\"routeParamteters : \" + JSON.stringify(jsonParseRequestObject.routeParamteters) + \" = \" + JSON.stringify({}));\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.queryString).to.eql({}); \r",
									"                            pm.expect(jsonParseRequestObject.routeParamteters).to.eql({}); \r",
									"\r",
									"                            console.log(\"resquest.body.Payload.\" + SensorKey +\" : \" + jsonParseRequestObject.body.Payload[SensorKey] + \" = \" + sensor.toString());\r",
									"                            console.log(\"resquest.body.Payload.Timestamp : \" + jsonParseRequestObject.body.Payload.Timestamp + \" = \" + timestamp);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.body.Payload[SensorKey]).to.eql(sensor.toString());\r",
									"                            pm.expect(jsonParseRequestObject.body.Payload.Timestamp).to.eql(timestamp); \r",
									"                           \r",
									"                            // check responseObject\r",
									"                            // responseObject: \"{\"OperationStatus\":{\"Code\":\"40400\",\"DeveloperMessage\":\"The requested operation could not be found.\"}}\"\r",
									"\r",
									"                            console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeNotFound);\r",
									"                            console.log(\"response.OperationStatus.DeveloperMessage : \" + jsonParseResponseObject.OperationStatus.DeveloperMessage + \" = \" + resultDescriptionTheRequestedOperationCouldNotBeFound); \r",
									"\r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeNotFound);  \r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheRequestedOperationCouldNotBeFound);  \r",
									"                        }\r",
									"               \r",
									"                    }); \r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"setTimeout(function(){SearchLogFindTid();}, 30000); \r",
									"setTimeout(function(){CheckLog();}, 50000); \r",
									"\r",
									"setTimeout(function(){RemoveThingStateInfo();}, 60000); \r",
									"setTimeout(function(){RemoveThing();}, 70000); \r",
									"setTimeout(function(){RemoveAccount();}, 80000); \r",
									"setTimeout(function(){RemovePartner();}, 90000);\r",
									"\r",
									"setTimeout(function(){\r",
									"pm.environment.unset(\"current_timestamp\");\r",
									"pm.environment.unset(\"AccessToken\");\r",
									"pm.environment.unset(\"random_number\");\r",
									"pm.environment.unset(\"PartnerName\");\r",
									"pm.environment.unset(\"MerchantContact\");\r",
									"pm.environment.unset(\"CPID\");\r",
									"pm.environment.unset(\"GetResponse_PartnerId\");\r",
									"pm.environment.unset(\"AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountId\");\r",
									"pm.environment.unset(\"random_IM\");\r",
									"pm.environment.unset(\"random_ICCID\");\r",
									"pm.environment.unset(\"ThingName\");\r",
									"pm.environment.unset(\"GetResponse_ThingID\");\r",
									"pm.environment.unset(\"GetResponse_IMSI\");\r",
									"pm.environment.unset(\"encodedKeys_Authorization_Register\");\r",
									"pm.environment.unset(\"encodedKeys_Authorization_Report\");\r",
									"pm.environment.unset(\"random_Sensor\");\r",
									"pm.environment.unset(\"GetResponse_ThingToken\");\r",
									"pm.environment.unset(\"tid\");\r",
									"pm.environment.unset(\"SensorKey_AsgardHTTP\");\r",
									"pm.environment.unset(\"random_Sensor_AsgardHTTP\");\r",
									"pm.environment.unset(\"timestamp\");\r",
									"}, 105000);\r",
									"setTimeout(async function(){}, 110000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var Username = pm.environment.get(\"Username\");\r",
									"var Password = pm.environment.get(\"Password\");\r",
									"\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"var httpapis = pm.environment.get(\"httpapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"pm.environment.set(\"SensorKey_AsgardHTTP\",fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP)\r",
									"\r",
									"// Timestamp 2020-12-31T03:03:18+07:00\r",
									"var timestamp = fieldDataValue.AsgardHTTP.Value_AsgardHTTP_Report_Timestamp;\r",
									"// console.log('currentTmestamp',currentTmestamp);\r",
									"pm.environment.set(\"timestamp\", timestamp);\r",
									"\r",
									"//format YYYYMMDDHHMMSSS\r",
									"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
									"// console.log('currentTmestamp',currentTmestamp);\r",
									"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var Basic = pm.environment.get(\"Basic\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- statusCodeList --------------//\r",
									"//set variable to statusCodeList JSON.parse\r",
									"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
									"//set global variable to statusCode 200\r",
									"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
									"//set global variable to statusCode 201\r",
									"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
									"//set global variable to statusCode 404\r",
									"pm.globals.set(\"statusCodeNotFound\", statusCodeList.statusCodeNotFound);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultCodeList --------------//\r",
									"//set variable to resultCodeList JSON.parse\r",
									"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
									"//set global variable to resultCode \"20000\"\r",
									"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
									"//set global variable to resultCode \"20100\"\r",
									"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
									"//set global variable to resultCode \"40400\"\r",
									"pm.globals.set(\"resultCodeNotFound\", resultCodeList.resultCodeNotFound);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionSuccessList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
									"//set global variable to resultDescription \"SignInProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
									"//set global variable to resultDescription \"CreatePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
									"//set global variable to resultDescription \"CreateAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
									"//set global variable to resultDescription \"CreateThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThing\", resultDescriptionSuccessList.resultDescriptionCreateThing);\r",
									"//set global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThingStateInfo\", resultDescriptionSuccessList.resultDescriptionCreateThingStateInfo);\r",
									"//set global variable to resultDescription \"RemovePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
									"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
									"//set global variable to resultDescription \"RemoveThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThing\", resultDescriptionSuccessList.resultDescriptionRemoveThing);\r",
									"//set global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThingStateInfo\", resultDescriptionSuccessList.resultDescriptionRemoveThingStateInfo);\r",
									"//set global variable to resultDescription \"Register is Success\"\r",
									"pm.globals.set(\"resultDescriptionRegisterIsSuccess\", resultDescriptionSuccessList.resultDescriptionRegisterIsSuccess);\r",
									"//set global variable to resultDescription \"ReportProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionReportProcessIsSuccess\", resultDescriptionSuccessList.resultDescriptionReportProcessIsSuccess);\r",
									"//set global variable to resultDescription \"The requested operation was successfully.\"\r",
									"pm.globals.set(\"resultDescriptionTheRequestedOperationWasSuccessfully\", resultDescriptionSuccessList.resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionErrorList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
									"//set global variable to resultDescription \"The requested operation could not be found.\"\r",
									"pm.globals.set(\"resultDescriptionTheRequestedOperationCouldNotBeFound\", resultDescriptionErrorList.resultDescriptionTheRequestedOperationCouldNotBeFound);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- HeaderList --------------//\r",
									"//set variable to HeaderList JSON.parse\r",
									"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
									"//---------------- set globals Other --------------//\r",
									"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
									"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
									"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
									"//set global variable to kbn-versio \"7.5.1\"\r",
									"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Signin_ --------------//\r",
									"//set global variable to x_ais_OrderRef \"Signin_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreatePartner --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
									"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
									"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
									"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreateAccount --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
									"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
									"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Thing --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThing\", HeaderList.Thing.x_ais_OrderRef_CreateThing);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThing\", HeaderList.Thing.x_ais_OrderDesc_CreateThing);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThing\", HeaderList.Thing.x_ais_OrderRef_RemoveThing);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThing\", HeaderList.Thing.x_ais_OrderDesc_RemoveThing);\r",
									"//set global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_RemoveThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_RemoveThingStateInfo);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals AsgardHTTP --------------//\r",
									"//set global variable to x_ais_OrderRef \"RegisHTTP_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RegisHTTP\", HeaderList.AsgardHTTP.x_ais_OrderRef_RegisHTTP);\r",
									"//set global variable to x_ais_OrderDesc \"Register Thing in MG\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RegisHTTP\", HeaderList.AsgardHTTP.x_ais_OrderDesc_RegisHTTP);\r",
									"//set global variable to x_ais_OrderRef \"ReportHTTP_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ReportHTTP\", HeaderList.AsgardHTTP.x_ais_OrderRef_ReportHTTP);\r",
									"//set global variable to x_ais_OrderRef \"ReportHTTPfail_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ReportHTTP_fail\", HeaderList.AsgardHTTP.x_ais_OrderRef_ReportHTTP_fail);\r",
									"//set global variable to x_ais_OrderDesc \"Report Data to MG\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_ReportHTTP\", HeaderList.AsgardHTTP.x_ais_OrderDesc_ReportHTTP);\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"SignInProcess is Success\"\r",
									"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
									"//get global variable to resultDescription \"CreatePartner is Success\"\r",
									"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
									"//get global variable to resultDescription \"CreateAccount is Success\"\r",
									"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
									"//get global variable to resultDescription \"CreateThing is Success\"\r",
									"var resultDescriptionCreateThing = pm.globals.get(\"resultDescriptionCreateThing\");\r",
									"//get global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"var resultDescriptionCreateThingStateInfo = pm.globals.get(\"resultDescriptionCreateThingStateInfo\");\r",
									"//get global variable to resultDescription \"Register is Success\"\r",
									"var resultDescriptionRegisterIsSuccess = pm.globals.get(\"resultDescriptionRegisterIsSuccess\");\r",
									"//get global variable to resultDescription \"The requested operation was successfully.\" \r",
									"var resultDescriptionTheRequestedOperationWasSuccessfully = pm.globals.get(\"resultDescriptionTheRequestedOperationWasSuccessfully\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- urlRouteList --------------//\r",
									"//set variable to urlRouteList JSON.parse\r",
									"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
									"//---------------- set url Create --------------//\r",
									"//set global variable to url \"/api/v1/auth/signin\"\r",
									"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
									"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
									"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"pm.globals.set(\"urlThingCreateThing\", urlRouteList.Thing.urlThingCreateThing);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"pm.globals.set(\"urlThingCreateThingStateInfo\", urlRouteList.Thing.urlThingCreateThingStateInfo);\r",
									"//set global variable to url \"/api/register/sim/v1\"\r",
									"pm.globals.set(\"urlAsgardHTTPeSimRegister\", urlRouteList.AsgardHTTPeSim.urlAsgardHTTPeSimRegister);\r",
									"//set global variable to url \"/api/report/sim/v1\"\r",
									"pm.globals.set(\"urlAsgardHTTPeSimReport\", urlRouteList.AsgardHTTPeSim.urlAsgardHTTPeSimReport);\r",
									"//---------------- get url Create --------------//\r",
									"//get global variable to url \"/api/v1/auth/signin\"\r",
									"var urlSignin = pm.globals.get(\"urlSignin\");\r",
									"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
									"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"var urlThingCreateThing = pm.globals.get(\"urlThingCreateThing\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"var urlThingCreateThingStateInfo = pm.globals.get(\"urlThingCreateThingStateInfo\");\r",
									"//get global variable to url \"/api/register/sim/v1\"\r",
									"var urlAsgardHTTPeSimRegister = pm.globals.get(\"urlAsgardHTTPeSimRegister\");\r",
									"//get global variable to url \"/api/report/sim/v1\"\r",
									"var urlAsgardHTTPeSimReport = pm.globals.get(\"urlAsgardHTTPeSimReport\");\r",
									"//---------------- set url Remove --------------//\r",
									"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
									"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"pm.globals.set(\"urlThingRemoveThing\", urlRouteList.Thing.urlThingRemoveThing);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"pm.globals.set(\"urlThingRemoveThingStateInfo\", urlRouteList.Thing.urlThingRemoveThingStateInfo);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Signin_ --------------//\r",
									"//get global variable to x_ais_OrderRef \"Signin_\"\r",
									"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"var x_ais_OrderRef_CreateThing = pm.globals.get(\"x_ais_OrderRef_CreateThing\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"var x_ais_OrderDesc_CreateThing = pm.globals.get(\"x_ais_OrderDesc_CreateThing\");\r",
									"//get global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"var x_ais_OrderRef_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderRef_CreateThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"var x_ais_OrderDesc_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_CreateThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals AsgardHTTP --------------//\r",
									"//get global variable to x_ais_OrderRef \"RegisHTTP_\"\r",
									"var x_ais_OrderRef_RegisHTTP = pm.globals.get(\"x_ais_OrderRef_RegisHTTP\");\r",
									"//get global variable to x_ais_OrderDesc \"Register Thing in MG\"\r",
									"var x_ais_OrderDesc_RegisHTTP = pm.globals.get(\"x_ais_OrderDesc_RegisHTTP\");\r",
									"//------------------------------------------------------------//\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// Signin get token\r",
									"Signin = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSignin = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_Signin + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_UserAuthentication,\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestSignin = {\r",
									"            mode: 'raw',\r",
									"            raw:\r",
									"                JSON.stringify({\r",
									"                    username: Username,\r",
									"                    password: Password\r",
									"                })\r",
									"        };\r",
									"\r",
									"        let optionsSignin = {\r",
									"            url: url + provisioningapis + urlSignin,\r",
									"            method: 'POST',\r",
									"            header: headersOptSignin,\r",
									"            body: httpRequestSignin\r",
									"        };\r",
									"        // console.log('request Signin');\r",
									"        let response = await reqPromise(optionsSignin);\r",
									"        let jsonDataSignin = await response.json();\r",
									"\r",
									"        // setAccessToken\r",
									"        await pm.environment.set(\"AccessToken\", jsonDataSignin.AccessToken);\r",
									"\r",
									"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('Signin : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // SignInProcess is Success\r",
									"        pm.test('Signin : OperationStatus Description is ' + '\"' + resultDescriptionSuccessSignIn + '\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
									"        });\r",
									"\r",
									"        //set random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //set PartnerName\r",
									"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
									"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
									"        //set MerchantContact\r",
									"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
									"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
									"        // set CPID\r",
									"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
									"        pm.environment.set(\"CPID\", CPIDValue)\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreatePartner\r",
									"CreatePartner = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreatePartner = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreatePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreatePartner,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreatePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
									"                \"PartnerType\": [\r",
									"                    \"Supplier\",\r",
									"                    \"Customer\"\r",
									"                ],\r",
									"                \"PartnerDetail\": {\r",
									"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
									"                    \"CPID\": pm.environment.get(\"CPID\")\r",
									"                },\r",
									"                \"Property\": {\r",
									"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreatePartner = {\r",
									"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreatePartner,\r",
									"            body: httpRequestCreatePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsCreatePartner);\r",
									"        let jsonDataCreatePartner = await response.json();\r",
									"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
									"\r",
									"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreatePartner : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreatePartner is Success\r",
									"        pm.test('CreatePartner : OperationStatus Description is ' + '\"' + resultDescriptionCreatePartner + '\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
									"        });\r",
									"\r",
									"        //GetResponse_PartnerId\r",
									"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
									"\r",
									"        //Accountname\r",
									"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
									"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateAccount\r",
									"CreateAccount = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateAccount = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateAccount,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreateAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateAccount = {\r",
									"            url: url + provisioningapis + urlAccountCreateAccount,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateAccount,\r",
									"            body: httpRequestCreateAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateAccount');\r",
									"        let response = await reqPromise(optionsCreateAccount);\r",
									"        let jsonDataCreateAccount = await response.json();\r",
									"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
									"\r",
									"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateAccount : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateAccount is Success\r",
									"        pm.test('CreateAccount : OperationStatus Description is ' + '\"' + resultDescriptionCreateAccount + '\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
									"        });\r",
									"        // GetResponse_AccountName\r",
									"        pm.environment.set(\"GetResponse_AccountName\", jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
									"        // GetResponse_AccountId\r",
									"        pm.environment.set(\"GetResponse_AccountId\", jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
									"        // random_IM\r",
									"        pm.environment.set(\"random_IM\", _.random(10000000, 99999999) + \" \" + _.random(1000000, 9999999))\r",
									"        // random_ICCID\r",
									"        pm.environment.set(\"random_ICCID\", _.random(1000000, 9999999) + \" \" + _.random(100000, 999999))\r",
									"        // random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //ThingName\r",
									"        let thingNameValue = fieldDataValue.Thing.ThingNameValue; // \"Sensor_TestThingName\"\r",
									"        pm.environment.set(\"ThingName\", thingNameValue + pm.environment.get(\"random_number\"))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThing\r",
									"CreateThing = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThing = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateThing + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateThing,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey': pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreateThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingName\": pm.environment.get(\"ThingName\"),\r",
									"                \"IMEI\": pm.environment.get(\"random_IM\"),\r",
									"                \"IMSI\": pm.environment.get(\"random_IM\"),\r",
									"                \"ICCID\": pm.environment.get(\"random_ICCID\"),\r",
									"                \"RouteUrl\": fieldDataValue.Thing.RouteUrlValue , //[\"http://10.12.3.4:2019/api/information/AddInformation\"]\r",
									"                \"RouteInfo\": {\r",
									"                    \"MIMO_ID\": fieldDataValue.Thing.RouteInfoMIMOIDValue , //\"606edada\"\r",
									"                    \"MIMO_SerialNo\": fieldDataValue.Thing.RouteInfoMIMOSerialNoValue //5466758878\r",
									"                },\r",
									"                \"RouteFlag\": {\r",
									"                    \"ThingName\": fieldDataValue.Thing.RouteFlagThingNameValue , //true\r",
									"                    \"ThingToken\": fieldDataValue.Thing.RouteFlagThingTokenValue, //true\r",
									"                    \"IMEI\": fieldDataValue.Thing.RouteFlagIMEIValue, //true\r",
									"                    \"ICCID\": fieldDataValue.Thing.RouteFlagICCIDValue, //true\r",
									"                    \"RouteInfo\": fieldDataValue.Thing.RouteFlagRouteInfoValue //true\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateThing = {\r",
									"            url: url + provisioningapis + urlThingCreateThing,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThing,\r",
									"            body: httpRequestCreateThing\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThing');\r",
									"        let response = await reqPromise(optionsCreateThing);\r",
									"        let jsonDataCreateThing = await response.json();\r",
									"        // console.log('jsonDataCreateThing',jsonDataCreateThing)\r",
									"\r",
									"        let operationStatusCreateThing = await jsonDataCreateThing.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateThing : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateThing : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateThing is Success\r",
									"        pm.test('CreateThing : OperationStatus Description is ' + '\"' + resultDescriptionCreateThing + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Description', resultDescriptionCreateThing);\r",
									"        });\r",
									"\r",
									"        pm.environment.set(\"GetResponse_ThingID\", jsonDataCreateThing.ThingInfo.ThingId)\r",
									"        pm.environment.set(\"GetResponse_IMSI\", jsonDataCreateThing.ThingInfo.IMSI)\r",
									"        \r",
									"        let keys = pm.environment.get(\"GetResponse_IMSI\") + \":\" + pm.environment.get(\"IpAddress\");\r",
									"        // console.log(\"keys\", keys);\r",
									"        let encodedKeys = CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(keys));\r",
									"        pm.environment.set(\"encodedKeys_Authorization_Register\", encodedKeys);\r",
									"\r",
									"        //Get Random Sensor \r",
									"        pm.environment.set(\"random_Sensor\", _.random(100, 999))\r",
									"\r",
									"        //Get Random Sensor AsgardHTTP\r",
									"        pm.environment.set(\"random_Sensor_AsgardHTTP\", _.random(100, 999))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThingStateInfo\r",
									"CreateThingStateInfo = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThingStateInfo = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateThingStateInfo,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey': pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        // {\"AA\" : pm.environment.get(\"random_Sensor\")}\r",
									"        let sensorValue = {};\r",
									"        sensorValue[fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP] = pm.environment.get(\"random_Sensor\");\r",
									"        // console.log('sensorValue',sensorValue);\r",
									"        \r",
									"        let httpRequestCreateThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": [\r",
									"                    pm.environment.get(\"GetResponse_ThingID\")\r",
									"                ],\r",
									"                \"Type\": fieldDataValue.CreateThingStateInfo.Type_Report,\r",
									"                \"Sensor\": sensorValue\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingCreateThingStateInfo,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThingStateInfo,\r",
									"            body: httpRequestCreateThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThingStateInfo');\r",
									"        let response = await reqPromise(optionsCreateThingStateInfo);\r",
									"        let jsonDataCreateThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataCreateThingStateInfo',jsonDataCreateThingStateInfo)\r",
									"\r",
									"        let operationStatusCreateThingStateInfo = await jsonDataCreateThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"CreateThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //CreateThingStateInfo is Success\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Description is ' + '\"' + resultDescriptionCreateThingStateInfo + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Description', resultDescriptionCreateThingStateInfo);\r",
									"        });\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// AsgardHTTPeSimRegister\r",
									"AsgardHTTPeSimRegister = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptAsgardHTTPeSimRegister = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_RegisHTTP + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_RegisHTTP,\r",
									"            'Authorization': Basic + ' ' + pm.environment.get(\"encodedKeys_Authorization_Register\")\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestAsgardHTTPeSimRegister = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({})\r",
									"        };\r",
									"\r",
									"        let optionsAsgardHTTPeSimRegister = {\r",
									"            url: url + httpapis + urlAsgardHTTPeSimRegister,\r",
									"            method: 'POST',\r",
									"            header: headersOptAsgardHTTPeSimRegister,\r",
									"            body: httpRequestAsgardHTTPeSimRegister\r",
									"        };\r",
									"\r",
									"        // console.log('request AsgardHTTPEsimRegister');\r",
									"        let response = await reqPromise(optionsAsgardHTTPeSimRegister);\r",
									"        let jsonDataAsgardHTTPeSimRegister = await response.json();\r",
									"        // console.log('jsonDataCreateThingStateInfo',jsonDataAsgardHTTPeSimRegister)\r",
									"        let operationStatusAsgardHTTPeSimRegister = await jsonDataAsgardHTTPeSimRegister.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"Asgard HTTP(eSim) Register : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('Asgard HTTP(eSim) Register : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusAsgardHTTPeSimRegister).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"\r",
									"        // The requested operation was successfully.\r",
									"        pm.test('Asgard HTTP(eSim) Register : OperationStatus DeveloperMessage is ' + '\"' + resultDescriptionTheRequestedOperationWasSuccessfully + '\"', function () {\r",
									"            pm.expect(operationStatusAsgardHTTPeSimRegister).to.have.property('DeveloperMessage', resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"        });\r",
									"\r",
									"        await pm.environment.set(\"GetResponse_ThingToken\", jsonDataAsgardHTTPeSimRegister.ThingToken)\r",
									"        let keys2 = await pm.environment.get(\"GetResponse_ThingToken\") + fieldDataValue.AsgardHTTP.Value_AsgardHTTPeSim_Report_TST_F1_0_1_002_Error + \":\" + pm.environment.get(\"IpAddress\");        \r",
									"        let encodedKeys2 = await CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(keys2));\r",
									"        pm.environment.set(\"encodedKeys_Authorization_Report\", encodedKeys2)\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"Signin();\r",
									"setTimeout(async function(){await CreatePartner();}, 3000); \r",
									"setTimeout(async function(){await CreateAccount();}, 6000); \r",
									"setTimeout(async function(){await CreateThing();}, 8000); \r",
									"setTimeout(async function(){await CreateThingStateInfo();}, 9000); \r",
									"setTimeout(async function(){await AsgardHTTPeSimRegister();}, 10000); \r",
									"setTimeout(async function(){}, 20000); //for wait value encodedKeys_Authorization_Report"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-ais-UserName",
								"type": "text",
								"value": "{{x_ais_UserName_AisPartner}}"
							},
							{
								"key": "x-ais-OrderRef",
								"value": "{{x_ais_OrderRef_ReportHTTP_fail}}{{current_timestamp}}"
							},
							{
								"key": "x-ais-OrderDesc",
								"type": "text",
								"value": "{{x_ais_OrderDesc_ReportHTTP}}"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{Basic}} {{encodedKeys_Authorization_Report}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Payload\": {\r\n        \"{{SensorKey_AsgardHTTP}}\" : \"{{random_Sensor_AsgardHTTP}}\", \r\n        \"Timestamp\": \"{{timestamp}}\"\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{url}}{{httpapis}}/api/report/sim/v1",
							"host": [
								"{{url}}{{httpapis}}"
							],
							"path": [
								"api",
								"report",
								"sim",
								"v1"
							]
						},
						"description": "Type:Desire"
					},
					"response": []
				},
				{
					"name": "AsgardHTTPeSimReport_TST_F1_0_1_003_Error_ThingTokenUntrustedOrInvalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var Basic = pm.environment.get(\"Basic\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to xAisOrderRef \"RemoveThing_\"\r",
									"var x_ais_OrderRef_RemoveThing = pm.globals.get(\"x_ais_OrderRef_RemoveThing\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"var x_ais_OrderDesc_RemoveThing = pm.globals.get(\"x_ais_OrderDesc_RemoveThing\");\r",
									"//get global variable to xAisOrderRef \"RemoveThingStateInfo_\"\r",
									"var x_ais_OrderRef_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderRef_RemoveThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThingStateInfo\"\r",
									"var x_ais_OrderDesc_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_RemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals AsgardHTTP --------------//\r",
									"//get global variable to x_ais_OrderRef \"ReportHTTP_\"\r",
									"var x_ais_OrderRef_ReportHTTP = pm.globals.get(\"x_ais_OrderRef_ReportHTTP\");\r",
									"//get global variable to x_ais_OrderRef \"ReportHTTPfail_\"\r",
									"var x_ais_OrderRef_ReportHTTP_fail = pm.globals.get(\"x_ais_OrderRef_ReportHTTP_fail\");\r",
									"//get global variable to x_ais_OrderDesc \"Report Data to MG\"\r",
									"var x_ais_OrderDesc_ReportHTTP = pm.globals.get(\"x_ais_OrderDesc_ReportHTTP\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get url Remove --------------//\r",
									"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
									"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"var urlThingRemoveThing = pm.globals.get(\"urlThingRemoveThing\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"var urlThingRemoveThingStateInfo = pm.globals.get(\"urlThingRemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"RemovePartner is Success\"\r",
									"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
									"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
									"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
									"//get global variable to resultDescription \"RemoveThing is Success\"\r",
									"var resultDescriptionRemoveThing = pm.globals.get(\"resultDescriptionRemoveThing\");\r",
									"//get global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"var resultDescriptionRemoveThingStateInfo = pm.globals.get(\"resultDescriptionRemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 401\r",
									"var statusCodeUnauthorized = pm.globals.get(\"statusCodeUnauthorized\");\r",
									"//get global variable to resultCode \"40103\"\r",
									"var resultCodeTheTokenIsUntrustedOrInvalid = pm.globals.get(\"resultCodeTheTokenIsUntrustedOrInvalid\");\r",
									"//get global variable to resultDescription \"The token is Untrusted or Invalid.\"\r",
									"var resultDescriptionTheTokenIsUntrustedOrInvalid = pm.globals.get(\"resultDescriptionTheTokenIsUntrustedOrInvalid\");\r",
									"//------------------------------------------------------------//\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Asgard HTTP(eSim) Report : Status code is \" + statusCodeUnauthorized, function () {\r",
									"    pm.response.to.have.status(statusCodeUnauthorized);\r",
									"});\r",
									"\r",
									"pm.test('Asgard HTTP(eSim) Report : OperationStatus code is '+'\"'+ resultCodeTheTokenIsUntrustedOrInvalid +'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeTheTokenIsUntrustedOrInvalid);\r",
									"});\r",
									"\r",
									"pm.test('Asgard HTTP(eSim) Report : OperationStatus DeveloperMessage is '+'\"'+ resultDescriptionTheTokenIsUntrustedOrInvalid+'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheTokenIsUntrustedOrInvalid);\r",
									"});\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// RemovePartner\r",
									" RemovePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemovePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemovePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemovePartner = {\r",
									"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemovePartner,\r",
									"            body: httpRequestRemovePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request RemovePartner');\r",
									"        let response = await reqPromise(optionsRemovePartner);\r",
									"        let jsonDataRemovePartner = await response.json();\r",
									"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
									"    \r",
									"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemovePartner is Success\r",
									"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveAccount\r",
									" RemoveAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemoveAccount = {\r",
									"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveAccount,\r",
									"            body: httpRequestRemoveAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveAccount');\r",
									"        let response = await reqPromise(optionsRemoveAccount);\r",
									"        let jsonDataRemoveAccount = await response.json();\r",
									"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
									"    \r",
									"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveAccount is Success\r",
									"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThing\r",
									" RemoveThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThing = {\r",
									"            url: url + provisioningapis + urlThingRemoveThing,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThing,\r",
									"            body: httpRequestRemoveThing\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveThing');\r",
									"        let response = await reqPromise(optionsRemoveThing);\r",
									"        let jsonDataRemoveThing = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThing)\r",
									"    \r",
									"        let operationStatusRemoveThing = await jsonDataRemoveThing.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThing : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThing : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThing is Success\r",
									"        pm.test('RemoveThing : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThing+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Description', resultDescriptionRemoveThing);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThingStateInfo\r",
									" RemoveThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"            \r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\"),\r",
									"                \"stateType\": fieldDataValue.CreateThingStateInfo.Type_Report, //Report\r",
									"                \"stateKey\": fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP //AA\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingRemoveThingStateInfo,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThingStateInfo,\r",
									"            body: httpRequestRemoveThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('response RemoveThingStateInfo');\r",
									"        let response = await reqPromise(optionsRemoveThingStateInfo);\r",
									"        let jsonDataRemoveThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThingStateInfo)\r",
									"    \r",
									"        let operationStatusRemoveThingStateInfo = await jsonDataRemoveThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThingStateInfo is Success\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThingStateInfo+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Description', resultDescriptionRemoveThingStateInfo);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"//---------------- LogDefaultValue --------------//\r",
									"//set variable to LogDefaultValue JSON.parse\r",
									"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
									"// console.log('LogDefaultValue',LogDefaultValue);\r",
									"//---------------- set globals Other --------------//\r",
									"var SearchLog = LogDefaultValue.SearchLog;\r",
									"// console.log('SearchLog',SearchLog);\r",
									"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
									"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
									"var kbn_version = SearchLog.header.kbn_version;\r",
									"var authorization = SearchLog.header.Authorization;\r",
									"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
									"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
									"var namespace = LogDefaultValue.Other.namespace;\r",
									"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
									"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
									"var header_x_ais_username = LogDefaultValue.Other.header_x_ais_username;\r",
									"var methodPost = LogDefaultValue.Other.methodPost;\r",
									"\r",
									"// Detail\r",
									"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
									"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
									"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
									"\r",
									"// Summary\r",
									"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
									"var identitySummary = \"\";\r",
									"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
									"\r",
									"// Asgard.Http.APIs\r",
									"var applicationName = LogDefaultValue.AsgardHTTP.applicationName;\r",
									"var cmdName = LogDefaultValue.AsgardHTTP.cmdNameReport;\r",
									"var endPointNameRabbitMQ = LogDefaultValue.AsgardHTTP.endPointNameRabbitMQ;\r",
									"var containerId = LogDefaultValue.AsgardHTTP.containerId;\r",
									"var requestObjectUrlStaging = LogDefaultValue.AsgardHTTP.requestObjectUrlReportMgStaging;\r",
									"var urlReport  = LogDefaultValue.AsgardHTTP.urlReport;\r",
									"\r",
									"// Check CDR (Summary Log) and EDR (Detail Log)\r",
									"SearchLogFindTid = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSearchLogFindTid = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = x_ais_OrderRef_ReportHTTP_fail + current_timestamp; \r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestSearchLogFindTid = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"phrase\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"\r",
									"        let optionsSearchLogFindTid = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptSearchLogFindTid,\r",
									"            body: httpRequestSearchLogFindTid\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsSearchLogFindTid);\r",
									"        let jsonDataSearchLogFindTid = await response.json();\r",
									"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
									"        console.log('hits',hits)\r",
									"  \r",
									"        // find tid\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            // let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"        \r",
									"            // console.log('logType',logType)\r",
									"            //  console.log('applicationNameValue',applicationNameValue)\r",
									"            //  console.log('applicationName',applicationName)\r",
									"            if(applicationNameValue == applicationName){\r",
									"                let tid = hits[i]._source.cauldron.tid;\r",
									"                pm.environment.set(\"tid\", tid);\r",
									"                break;\r",
									"           }\r",
									"        }\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"CheckLog = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCheckLog = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = pm.environment.get(\"tid\");\r",
									"\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"         console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestCheckLog = {\r",
									"            mode: 'raw',\r",
									"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"phrase\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"        let optionsCheckLog = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptCheckLog,\r",
									"            body: httpRequestCheckLog\r",
									"        }; \r",
									"        let response = await reqPromise(optionsCheckLog);\r",
									"        let jsonDataCheckLog = await response.json();\r",
									"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
									"        \r",
									"        // //200\r",
									"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });     \r",
									"        \r",
									"        let hits = jsonDataCheckLog.hits.hits\r",
									"         console.log('hits',hits)\r",
									"  \r",
									"        // find logType\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            //  let logType = hits[i]._source.cauldron.logType\r",
									"            let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"           \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            \r",
									"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
									"            // console.log('resultDataLog',resultDataLog)\r",
									"\r",
									"            let tidControl = x_ais_OrderRef_ReportHTTP_fail  + current_timestamp;\r",
									"            // console.log(tidControl);\r",
									"            if(applicationNameValue == applicationName){\r",
									"                 \r",
									"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and Asgard.Http.APIs\r",
									"                    pm.test(\"Check Summary Log : Asgard_HTTP(eSim) Report\" , function () {\r",
									"                        console.log(\"======== Check Summary Log ( Expected = Actual) [Asgard_HTTP(eSim) Report] ==================\");\r",
									"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
									"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
									"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeTheTokenIsUntrustedOrInvalid);\r",
									"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionTheTokenIsUntrustedOrInvalid);\r",
									"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
									"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"identity : \" + JSON.stringify(resultDataLog.identity) + \" = \" + JSON.stringify(identitySummary));\r",
									"                        console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
									"\r",
									"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
									"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
									"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeTheTokenIsUntrustedOrInvalid); \r",
									"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionTheTokenIsUntrustedOrInvalid); \r",
									"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
									"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
									"                        pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
									"                    }); \r",
									"                }\r",
									"\r",
									"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and Asgard.Http.APIs\r",
									"\r",
									"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
									"                    // console.log('endPointNameValue ',endPointNameValue)\r",
									"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [Asgard_HTTP(eSim) Report]\", function () {\r",
									"                        console.log(\"======== Check Detail Log ( Expected = Actual) [Asgard_HTTP(eSim) Report] ==================\");\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
									"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
									"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
									"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.custom1.activityLog.processTime + \" = \" + resultDataLog.custom1.activityLog.processTime);\r",
									"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
									"\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
									"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
									"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
									"\r",
									"                        let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
									"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
									"                        let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
									"                            // console.log('jsonParseResponseObject',jsonParseResponseObject); \r",
									"                        let url = urlReport; \r",
									"                        let x_ais_orderref = x_ais_OrderRef_ReportHTTP_fail + current_timestamp;\r",
									"                        let x_ais_orderdesc = x_ais_OrderDesc_ReportHTTP;\r",
									"                        let x_ais_userName = x_ais_UserName_AisPartner;\r",
									"                        // let authorization = Basic + ' ' + pm.environment.get(\"encodedKeys_Authorization_Report\");\r",
									"                        let SensorKey = fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP;\r",
									"                        let sensor = pm.environment.get(\"random_Sensor_AsgardHTTP\");\r",
									"                        let timestamp = pm.environment.get(\"timestamp\");\r",
									"\r",
									"                        if( endPointNameValue == undefined){\r",
									"                            // check requestObject\r",
									"                            // \"requestObject\":\"{\\\"url\\\":\\\"/api/report/sim/v1\\\",\\\"method\\\":\\\"POST\\\",\\\"headers\\\":{\\\"Cache-Control\\\":\\\"no-cache\\\",\\\"Content-Type\\\":\\\"application/json\\\",\\\"Accept\\\":\\\"*/*\\\",\\\"Accept-Encoding\\\":\\\"gzip,deflate,br\\\",\\\"Host\\\":\\\"mg-staging.sandais.com\\\",\\\"User-Agent\\\":\\\"PostmanRuntime/7.26.8\\\",\\\"Content-Length\\\":\\\"87\\\",\\\"x-real-ip\\\":\\\"58.8.214.174\\\",\\\"x-forwarded-for\\\":\\\"58.8.214.174\\\",\\\"x-forwarded-proto\\\":\\\"https\\\",\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"ReportHTTPfail_202102151802798\\\",\\\"x-ais-orderdesc\\\":\\\"Report Data to MG\\\",\\\"postman-token\\\":\\\"b2e3de7a-6775-44a1-9f65-a12fc4d4e9f1\\\",\\\"x-request-id\\\":\\\"6efed948-bf02-4b16-bd92-f62fecac26a0\\\",\\\"x-b3-traceid\\\":\\\"1f26dea7f93528f086cba62c68c418a8\\\",\\\"x-b3-spanid\\\":\\\"86cba62c68c418a8\\\",\\\"x-b3-sampled\\\":\\\"0\\\",\\\"x-ais-SessionId\\\":\\\"1613388645513\\\"},\\\"queryString\\\":{},\\\"routeParamteters\\\":{},\\\"body\\\":{\\\"Payload\\\":{\\\"AA\\\":\\\"424\\\",\\\"Timestamp\\\":\\\"2020-12-31T03:03:18+07:00\\\"}}}\"\r",
									"\r",
									"                            // \\\"requestObject\\\":\\\"{ \\\\\\\"url\\\\\\\":\\\\\\\"/api/report/sim/v1\\\\\\\", \\\\\\\"method\\\\\\\":\\\\\\\"POST\\\\\\\", \\\\\\\"headers\\\\\\\":{ \\\\\\\"Cache-Control\\\\\\\":\\\\\\\"no-cache\\\\\\\", \\\\\\\"Content-Type\\\\\\\":\\\\\\\"application/json\\\\\\\", \\\\\\\"Accept\\\\\\\":\\\\\\\"*/*\\\\\\\", \\\\\\\"Accept-Encoding\\\\\\\":\\\\\\\"gzip, deflate, br\\\\\\\", \\\\\\\"Host\\\\\\\":\\\\\\\"mg-iot.sandais.com\\\\\\\", \\\\\\\"User-Agent\\\\\\\":\\\\\\\"PostmanRuntime/7.26.8\\\\\\\", \\\\\\\"Content-Length\\\\\\\":\\\\\\\"103\\\\\\\", \\\\\\\"x-real-ip\\\\\\\":\\\\\\\"182.232.183.255\\\\\\\", \\\\\\\"x-forwarded-for\\\\\\\":\\\\\\\"182.232.183.255, 10.233.65.1\\\\\\\", \\\\\\\"x-forwarded-proto\\\\\\\":\\\\\\\"http\\\\\\\", \\\\\\\"x-ais-username\\\\\\\":\\\\\\\"AisPartner\\\\\\\", \\\\\\\"x-ais-orderref\\\\\\\":\\\\\\\"ReportHTTPfail_202105111905126\\\\\\\", \\\\\\\"x-ais-orderdesc\\\\\\\":\\\\\\\"Report Data to MG\\\\\\\", \\\\\\\"postman-token\\\\\\\":\\\\\\\"daaa9487-4a23-4a7f-9e9d-d160af6a0bcf\\\\\\\", \\\\\\\"x-envoy-external-address\\\\\\\":\\\\\\\"10.233.65.1\\\\\\\", \\\\\\\"x-request-id\\\\\\\":\\\\\\\"59ba55b5-63d1-4a77-b93e-c76be3de24de\\\\\\\", \\\\\\\"x-envoy-original-path\\\\\\\":\\\\\\\"/httpapis/api/report/sim/v1\\\\\\\", \\\\\\\"x-b3-traceid\\\\\\\":\\\\\\\"3af126498cbc8c2704c33e4bbd0fc172\\\\\\\", \\\\\\\"x-b3-spanid\\\\\\\":\\\\\\\"d48e14243b6b8179\\\\\\\", \\\\\\\"x-b3-parentspanid\\\\\\\":\\\\\\\"04c33e4bbd0fc172\\\\\\\", \\\\\\\"x-b3-sampled\\\\\\\":\\\\\\\"0\\\\\\\", \\\\\\\"x-ais-SessionId\\\\\\\":\\\\\\\"1620736411024\\\\\\\" }, \\\\\\\"queryString\\\\\\\":{ }, \\\\\\\"routeParamteters\\\\\\\":{ }, \\\\\\\"body\\\\\\\":{ \\\\\\\"Payload\\\\\\\":{ \\\\\\\"AA\\\\\\\":\\\\\\\"611\\\\\\\", \\\\\\\"Timestamp\\\\\\\":\\\\\\\"2020-12-31T03:03:18+07:00\\\\\\\" } } }\\\"\r",
									"\r",
									"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
									"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
									"                            console.log(\"headers.x_ais_userName : \" + jsonParseRequestObject.headers[header_x_ais_username] + \" = \" + x_ais_userName);\r",
									"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
									"                            // console.log(\"headers.Authorization : \" + jsonParseRequestObject.headers.Authorization + \" = \" + authorization);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
									"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_username]).to.eql(x_ais_userName);\r",
									"                            // pm.expect(jsonParseRequestObject.headers.Authorization).to.eql(authorization);\r",
									"\r",
									"                            console.log(\"queryString : \" + JSON.stringify(jsonParseRequestObject.queryString) + \" = \" + JSON.stringify({}));\r",
									"                            console.log(\"routeParamteters : \" + JSON.stringify(jsonParseRequestObject.routeParamteters) + \" = \" + JSON.stringify({}));\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.queryString).to.eql({}); \r",
									"                            pm.expect(jsonParseRequestObject.routeParamteters).to.eql({}); \r",
									"\r",
									"                            console.log(\"resquest.body.Payload.\" + SensorKey +\" : \" + jsonParseRequestObject.body.Payload[SensorKey] + \" = \" + sensor.toString());\r",
									"                            console.log(\"resquest.body.Payload.Timestamp : \" + jsonParseRequestObject.body.Payload.Timestamp + \" = \" + timestamp);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.body.Payload[SensorKey]).to.eql(sensor.toString());\r",
									"                            pm.expect(jsonParseRequestObject.body.Payload.Timestamp).to.eql(timestamp); \r",
									"                           \r",
									"                            // check responseObject\r",
									"                            // responseObject: \"{\"OperationStatus\":{\"Code\":\"40103\",\"The token is Untrusted or Invalid.\"}}\"\r",
									"\r",
									"                            console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeTheTokenIsUntrustedOrInvalid);\r",
									"                            console.log(\"response.OperationStatus.DeveloperMessage : \" + jsonParseResponseObject.OperationStatus.DeveloperMessage + \" = \" + resultDescriptionTheTokenIsUntrustedOrInvalid); \r",
									"\r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeTheTokenIsUntrustedOrInvalid);  \r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheTokenIsUntrustedOrInvalid);  \r",
									"                        }\r",
									"               \r",
									"                    }); \r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"setTimeout(function(){SearchLogFindTid();}, 30000); \r",
									"setTimeout(function(){CheckLog();}, 50000); \r",
									"\r",
									"setTimeout(function(){RemoveThingStateInfo();}, 60000); \r",
									"setTimeout(function(){RemoveThing();}, 70000); \r",
									"setTimeout(function(){RemoveAccount();}, 80000); \r",
									"setTimeout(function(){RemovePartner();}, 90000);\r",
									"\r",
									"setTimeout(function(){\r",
									"pm.environment.unset(\"current_timestamp\");\r",
									"pm.environment.unset(\"AccessToken\");\r",
									"pm.environment.unset(\"random_number\");\r",
									"pm.environment.unset(\"PartnerName\");\r",
									"pm.environment.unset(\"MerchantContact\");\r",
									"pm.environment.unset(\"CPID\");\r",
									"pm.environment.unset(\"GetResponse_PartnerId\");\r",
									"pm.environment.unset(\"AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountId\");\r",
									"pm.environment.unset(\"random_IM\");\r",
									"pm.environment.unset(\"random_ICCID\");\r",
									"pm.environment.unset(\"ThingName\");\r",
									"pm.environment.unset(\"GetResponse_ThingID\");\r",
									"pm.environment.unset(\"GetResponse_IMSI\");\r",
									"pm.environment.unset(\"encodedKeys_Authorization_Register\");\r",
									"pm.environment.unset(\"encodedKeys_Authorization_Report\");\r",
									"pm.environment.unset(\"random_Sensor\");\r",
									"pm.environment.unset(\"GetResponse_ThingToken\");\r",
									"pm.environment.unset(\"tid\");\r",
									"pm.environment.unset(\"SensorKey_AsgardHTTP\");\r",
									"pm.environment.unset(\"random_Sensor_AsgardHTTP\");\r",
									"pm.environment.unset(\"timestamp\");\r",
									"}, 105000);\r",
									"setTimeout(async function(){}, 110000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var Username = pm.environment.get(\"Username\");\r",
									"var Password = pm.environment.get(\"Password\");\r",
									"\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"var httpapis = pm.environment.get(\"httpapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"pm.environment.set(\"SensorKey_AsgardHTTP\",fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP)\r",
									"\r",
									"// Timestamp 2020-12-31T03:03:18+07:00\r",
									"var timestamp = fieldDataValue.AsgardHTTP.Value_AsgardHTTP_Report_Timestamp;\r",
									"// console.log('currentTmestamp',currentTmestamp);\r",
									"pm.environment.set(\"timestamp\", timestamp);\r",
									"\r",
									"//format YYYYMMDDHHMMSSS\r",
									"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
									"// console.log('currentTmestamp',currentTmestamp);\r",
									"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var Basic = pm.environment.get(\"Basic\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var x_ais_UserName_AisPartner = pm.environment.get(\"x_ais_UserName_AisPartner\");\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.environment.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- statusCodeList --------------//\r",
									"//set variable to statusCodeList JSON.parse\r",
									"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
									"//set global variable to statusCode 200\r",
									"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
									"//set global variable to statusCode 201\r",
									"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
									"//set global variable to statusCode 401\r",
									"pm.globals.set(\"statusCodeUnauthorized\", statusCodeList.statusCodeUnauthorized);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultCodeList --------------//\r",
									"//set variable to resultCodeList JSON.parse\r",
									"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
									"//set global variable to resultCode \"20000\"\r",
									"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
									"//set global variable to resultCode \"20100\"\r",
									"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
									"//set global variable to resultCode \"40103\"\r",
									"pm.globals.set(\"resultCodeTheTokenIsUntrustedOrInvalid\", resultCodeList.resultCodeTheTokenIsUntrustedOrInvalid);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionSuccessList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
									"//set global variable to resultDescription \"SignInProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
									"//set global variable to resultDescription \"CreatePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
									"//set global variable to resultDescription \"CreateAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
									"//set global variable to resultDescription \"CreateThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThing\", resultDescriptionSuccessList.resultDescriptionCreateThing);\r",
									"//set global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThingStateInfo\", resultDescriptionSuccessList.resultDescriptionCreateThingStateInfo);\r",
									"//set global variable to resultDescription \"RemovePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
									"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
									"//set global variable to resultDescription \"RemoveThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThing\", resultDescriptionSuccessList.resultDescriptionRemoveThing);\r",
									"//set global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThingStateInfo\", resultDescriptionSuccessList.resultDescriptionRemoveThingStateInfo);\r",
									"//set global variable to resultDescription \"Register is Success\"\r",
									"pm.globals.set(\"resultDescriptionRegisterIsSuccess\", resultDescriptionSuccessList.resultDescriptionRegisterIsSuccess);\r",
									"//set global variable to resultDescription \"ReportProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionReportProcessIsSuccess\", resultDescriptionSuccessList.resultDescriptionReportProcessIsSuccess);\r",
									"//set global variable to resultDescription \"The requested operation was successfully.\"\r",
									"pm.globals.set(\"resultDescriptionTheRequestedOperationWasSuccessfully\", resultDescriptionSuccessList.resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionErrorList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
									"//set global variable to resultDescription \"The token is Untrusted or Invalid.\"\r",
									"pm.globals.set(\"resultDescriptionTheTokenIsUntrustedOrInvalid\", resultDescriptionErrorList.resultDescriptionTheTokenIsUntrustedOrInvalid);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- HeaderList --------------//\r",
									"//set variable to HeaderList JSON.parse\r",
									"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
									"//---------------- set globals Other --------------//\r",
									"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
									"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
									"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
									"//set global variable to kbn-versio \"7.5.1\"\r",
									"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Signin_ --------------//\r",
									"//set global variable to x_ais_OrderRef \"Signin_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreatePartner --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
									"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
									"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
									"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreateAccount --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
									"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
									"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Thing --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThing\", HeaderList.Thing.x_ais_OrderRef_CreateThing);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThing\", HeaderList.Thing.x_ais_OrderDesc_CreateThing);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThing\", HeaderList.Thing.x_ais_OrderRef_RemoveThing);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThing\", HeaderList.Thing.x_ais_OrderDesc_RemoveThing);\r",
									"//set global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_RemoveThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_RemoveThingStateInfo);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals AsgardHTTP --------------//\r",
									"//set global variable to x_ais_OrderRef \"RegisHTTP_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RegisHTTP\", HeaderList.AsgardHTTP.x_ais_OrderRef_RegisHTTP);\r",
									"//set global variable to x_ais_OrderDesc \"Register Thing in MG\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RegisHTTP\", HeaderList.AsgardHTTP.x_ais_OrderDesc_RegisHTTP);\r",
									"//set global variable to x_ais_OrderRef \"ReportHTTP_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ReportHTTP\", HeaderList.AsgardHTTP.x_ais_OrderRef_ReportHTTP);\r",
									"//set global variable to x_ais_OrderRef \"ReportHTTPfail_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ReportHTTP_fail\", HeaderList.AsgardHTTP.x_ais_OrderRef_ReportHTTP_fail);\r",
									"//set global variable to x_ais_OrderDesc \"Report Data to MG\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_ReportHTTP\", HeaderList.AsgardHTTP.x_ais_OrderDesc_ReportHTTP);\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"SignInProcess is Success\"\r",
									"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
									"//get global variable to resultDescription \"CreatePartner is Success\"\r",
									"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
									"//get global variable to resultDescription \"CreateAccount is Success\"\r",
									"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
									"//get global variable to resultDescription \"CreateThing is Success\"\r",
									"var resultDescriptionCreateThing = pm.globals.get(\"resultDescriptionCreateThing\");\r",
									"//get global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"var resultDescriptionCreateThingStateInfo = pm.globals.get(\"resultDescriptionCreateThingStateInfo\");\r",
									"//get global variable to resultDescription \"Register is Success\"\r",
									"var resultDescriptionRegisterIsSuccess = pm.globals.get(\"resultDescriptionRegisterIsSuccess\");\r",
									"//get global variable to resultDescription \"The requested operation was successfully.\"\r",
									"var resultDescriptionTheRequestedOperationWasSuccessfully = pm.globals.get(\"resultDescriptionTheRequestedOperationWasSuccessfully\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- urlRouteList --------------//\r",
									"//set variable to urlRouteList JSON.parse\r",
									"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
									"//---------------- set url Create --------------//\r",
									"//set global variable to url \"/api/v1/auth/signin\"\r",
									"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
									"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
									"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"pm.globals.set(\"urlThingCreateThing\", urlRouteList.Thing.urlThingCreateThing);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"pm.globals.set(\"urlThingCreateThingStateInfo\", urlRouteList.Thing.urlThingCreateThingStateInfo);\r",
									"//set global variable to url \"/api/register/sim/v1\"\r",
									"pm.globals.set(\"urlAsgardHTTPeSimRegister\", urlRouteList.AsgardHTTPeSim.urlAsgardHTTPeSimRegister);\r",
									"//set global variable to url \"/api/report/sim/v1\"\r",
									"pm.globals.set(\"urlAsgardHTTPeSimReport\", urlRouteList.AsgardHTTPeSim.urlAsgardHTTPeSimReport);\r",
									"//---------------- get url Create --------------//\r",
									"//get global variable to url \"/api/v1/auth/signin\"\r",
									"var urlSignin = pm.globals.get(\"urlSignin\");\r",
									"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
									"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"var urlThingCreateThing = pm.globals.get(\"urlThingCreateThing\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"var urlThingCreateThingStateInfo = pm.globals.get(\"urlThingCreateThingStateInfo\");\r",
									"//get global variable to url \"/api/register/sim/v1\"\r",
									"var urlAsgardHTTPeSimRegister = pm.globals.get(\"urlAsgardHTTPeSimRegister\");\r",
									"//get global variable to url \"/api/report/sim/v1\"\r",
									"var urlAsgardHTTPeSimReport = pm.globals.get(\"urlAsgardHTTPeSimReport\");\r",
									"//---------------- set url Remove --------------//\r",
									"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
									"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"pm.globals.set(\"urlThingRemoveThing\", urlRouteList.Thing.urlThingRemoveThing);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"pm.globals.set(\"urlThingRemoveThingStateInfo\", urlRouteList.Thing.urlThingRemoveThingStateInfo);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Signin_ --------------//\r",
									"//get global variable to x_ais_OrderRef \"Signin_\"\r",
									"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"var x_ais_OrderRef_CreateThing = pm.globals.get(\"x_ais_OrderRef_CreateThing\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"var x_ais_OrderDesc_CreateThing = pm.globals.get(\"x_ais_OrderDesc_CreateThing\");\r",
									"//get global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"var x_ais_OrderRef_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderRef_CreateThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"var x_ais_OrderDesc_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_CreateThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals AsgardHTTP --------------//\r",
									"//get global variable to x_ais_OrderRef \"RegisHTTP_\"\r",
									"var x_ais_OrderRef_RegisHTTP = pm.globals.get(\"x_ais_OrderRef_RegisHTTP\");\r",
									"//get global variable to x_ais_OrderDesc \"Register Thing in MG\"\r",
									"var x_ais_OrderDesc_RegisHTTP = pm.globals.get(\"x_ais_OrderDesc_RegisHTTP\");\r",
									"//------------------------------------------------------------//\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// Signin get token\r",
									"Signin = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSignin = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_Signin + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_UserAuthentication,\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestSignin = {\r",
									"            mode: 'raw',\r",
									"            raw:\r",
									"                JSON.stringify({\r",
									"                    username: Username,\r",
									"                    password: Password\r",
									"                })\r",
									"        };\r",
									"\r",
									"        let optionsSignin = {\r",
									"            url: url + provisioningapis + urlSignin,\r",
									"            method: 'POST',\r",
									"            header: headersOptSignin,\r",
									"            body: httpRequestSignin\r",
									"        };\r",
									"        // console.log('request Signin');\r",
									"        let response = await reqPromise(optionsSignin);\r",
									"        let jsonDataSignin = await response.json();\r",
									"\r",
									"        // setAccessToken\r",
									"        await pm.environment.set(\"AccessToken\", jsonDataSignin.AccessToken);\r",
									"\r",
									"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('Signin : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // SignInProcess is Success\r",
									"        pm.test('Signin : OperationStatus Description is ' + '\"' + resultDescriptionSuccessSignIn + '\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
									"        });\r",
									"\r",
									"        //set random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //set PartnerName\r",
									"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
									"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
									"        //set MerchantContact\r",
									"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
									"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
									"        // set CPID\r",
									"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
									"        pm.environment.set(\"CPID\", CPIDValue)\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreatePartner\r",
									"CreatePartner = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreatePartner = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreatePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreatePartner,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreatePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
									"                \"PartnerType\": [\r",
									"                    \"Supplier\",\r",
									"                    \"Customer\"\r",
									"                ],\r",
									"                \"PartnerDetail\": {\r",
									"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
									"                    \"CPID\": pm.environment.get(\"CPID\")\r",
									"                },\r",
									"                \"Property\": {\r",
									"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreatePartner = {\r",
									"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreatePartner,\r",
									"            body: httpRequestCreatePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsCreatePartner);\r",
									"        let jsonDataCreatePartner = await response.json();\r",
									"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
									"\r",
									"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreatePartner : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreatePartner is Success\r",
									"        pm.test('CreatePartner : OperationStatus Description is ' + '\"' + resultDescriptionCreatePartner + '\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
									"        });\r",
									"\r",
									"        //GetResponse_PartnerId\r",
									"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
									"\r",
									"        //Accountname\r",
									"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
									"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateAccount\r",
									"CreateAccount = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateAccount = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateAccount,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreateAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateAccount = {\r",
									"            url: url + provisioningapis + urlAccountCreateAccount,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateAccount,\r",
									"            body: httpRequestCreateAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateAccount');\r",
									"        let response = await reqPromise(optionsCreateAccount);\r",
									"        let jsonDataCreateAccount = await response.json();\r",
									"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
									"\r",
									"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateAccount : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateAccount is Success\r",
									"        pm.test('CreateAccount : OperationStatus Description is ' + '\"' + resultDescriptionCreateAccount + '\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
									"        });\r",
									"        // GetResponse_AccountName\r",
									"        pm.environment.set(\"GetResponse_AccountName\", jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
									"        // GetResponse_AccountId\r",
									"        pm.environment.set(\"GetResponse_AccountId\", jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
									"        // random_IM\r",
									"        pm.environment.set(\"random_IM\", _.random(10000000, 99999999) + \" \" + _.random(1000000, 9999999))\r",
									"        // random_ICCID\r",
									"        pm.environment.set(\"random_ICCID\", _.random(1000000, 9999999) + \" \" + _.random(100000, 999999))\r",
									"        // random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //ThingName\r",
									"        let thingNameValue = fieldDataValue.Thing.ThingNameValue; // \"Sensor_TestThingName\"\r",
									"        pm.environment.set(\"ThingName\", thingNameValue + pm.environment.get(\"random_number\"))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThing\r",
									"CreateThing = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThing = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateThing + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateThing,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey': pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreateThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingName\": pm.environment.get(\"ThingName\"),\r",
									"                \"IMEI\": pm.environment.get(\"random_IM\"),\r",
									"                \"IMSI\": pm.environment.get(\"random_IM\"),\r",
									"                \"ICCID\": pm.environment.get(\"random_ICCID\"),\r",
									"                \"RouteUrl\": fieldDataValue.Thing.RouteUrlValue , //[\"http://10.12.3.4:2019/api/information/AddInformation\"]\r",
									"                \"RouteInfo\": {\r",
									"                    \"MIMO_ID\": fieldDataValue.Thing.RouteInfoMIMOIDValue , //\"606edada\"\r",
									"                    \"MIMO_SerialNo\": fieldDataValue.Thing.RouteInfoMIMOSerialNoValue //5466758878\r",
									"                },\r",
									"                \"RouteFlag\": {\r",
									"                    \"ThingName\": fieldDataValue.Thing.RouteFlagThingNameValue , //true\r",
									"                    \"ThingToken\": fieldDataValue.Thing.RouteFlagThingTokenValue, //true\r",
									"                    \"IMEI\": fieldDataValue.Thing.RouteFlagIMEIValue, //true\r",
									"                    \"ICCID\": fieldDataValue.Thing.RouteFlagICCIDValue, //true\r",
									"                    \"RouteInfo\": fieldDataValue.Thing.RouteFlagRouteInfoValue //true\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateThing = {\r",
									"            url: url + provisioningapis + urlThingCreateThing,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThing,\r",
									"            body: httpRequestCreateThing\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThing');\r",
									"        let response = await reqPromise(optionsCreateThing);\r",
									"        let jsonDataCreateThing = await response.json();\r",
									"        // console.log('jsonDataCreateThing',jsonDataCreateThing)\r",
									"\r",
									"        let operationStatusCreateThing = await jsonDataCreateThing.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateThing : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateThing : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateThing is Success\r",
									"        pm.test('CreateThing : OperationStatus Description is ' + '\"' + resultDescriptionCreateThing + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Description', resultDescriptionCreateThing);\r",
									"        });\r",
									"\r",
									"        pm.environment.set(\"GetResponse_ThingID\", jsonDataCreateThing.ThingInfo.ThingId)\r",
									"        pm.environment.set(\"GetResponse_IMSI\", jsonDataCreateThing.ThingInfo.IMSI)\r",
									"        \r",
									"        let keys = pm.environment.get(\"GetResponse_IMSI\") + \":\" + pm.environment.get(\"IpAddress\");\r",
									"        // console.log(\"keys\", keys);\r",
									"        let encodedKeys = CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(keys));\r",
									"        pm.environment.set(\"encodedKeys_Authorization_Register\", encodedKeys);\r",
									"\r",
									"        //Get Random Sensor \r",
									"        pm.environment.set(\"random_Sensor\", _.random(100, 999))\r",
									"\r",
									"        //Get Random Sensor AsgardHTTP\r",
									"        pm.environment.set(\"random_Sensor_AsgardHTTP\", _.random(100, 999))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThingStateInfo\r",
									"CreateThingStateInfo = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThingStateInfo = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateThingStateInfo,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey': pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        // {\"AA\" : pm.environment.get(\"random_Sensor\")}\r",
									"        let sensorValue = {};\r",
									"        sensorValue[fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP] = pm.environment.get(\"random_Sensor\");\r",
									"        // console.log('sensorValue',sensorValue);\r",
									"        \r",
									"        let httpRequestCreateThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": [\r",
									"                    pm.environment.get(\"GetResponse_ThingID\")\r",
									"                ],\r",
									"                \"Type\": fieldDataValue.CreateThingStateInfo.Type_Report,\r",
									"                \"Sensor\": sensorValue\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingCreateThingStateInfo,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThingStateInfo,\r",
									"            body: httpRequestCreateThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThingStateInfo');\r",
									"        let response = await reqPromise(optionsCreateThingStateInfo);\r",
									"        let jsonDataCreateThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataCreateThingStateInfo',jsonDataCreateThingStateInfo)\r",
									"\r",
									"        let operationStatusCreateThingStateInfo = await jsonDataCreateThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"CreateThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //CreateThingStateInfo is Success\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Description is ' + '\"' + resultDescriptionCreateThingStateInfo + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Description', resultDescriptionCreateThingStateInfo);\r",
									"        });\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// AsgardHTTPeSimRegister\r",
									"AsgardHTTPeSimRegister = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptAsgardHTTPeSimRegister = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_RegisHTTP + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_RegisHTTP,\r",
									"            'Authorization': Basic + ' ' + pm.environment.get(\"encodedKeys_Authorization_Register\")\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestAsgardHTTPeSimRegister = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({})\r",
									"        };\r",
									"\r",
									"        let optionsAsgardHTTPeSimRegister = {\r",
									"            url: url + httpapis + urlAsgardHTTPeSimRegister,\r",
									"            method: 'POST',\r",
									"            header: headersOptAsgardHTTPeSimRegister,\r",
									"            body: httpRequestAsgardHTTPeSimRegister\r",
									"        };\r",
									"\r",
									"        // console.log('request AsgardHTTPEsimRegister');\r",
									"        let response = await reqPromise(optionsAsgardHTTPeSimRegister);\r",
									"        let jsonDataAsgardHTTPeSimRegister = await response.json();\r",
									"        // console.log('jsonDataCreateThingStateInfo',jsonDataAsgardHTTPeSimRegister)\r",
									"        let operationStatusAsgardHTTPeSimRegister = await jsonDataAsgardHTTPeSimRegister.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"Asgard HTTP(eSim) Register : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('Asgard HTTP(eSim) Register : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusAsgardHTTPeSimRegister).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"\r",
									"        // The requested operation was successfully.\r",
									"        pm.test('Asgard HTTP(eSim) Register : OperationStatus DeveloperMessage is ' + '\"' + resultDescriptionTheRequestedOperationWasSuccessfully + '\"', function () {\r",
									"            pm.expect(operationStatusAsgardHTTPeSimRegister).to.have.property('DeveloperMessage', resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"        });\r",
									"\r",
									"        await pm.environment.set(\"GetResponse_ThingToken\", jsonDataAsgardHTTPeSimRegister.ThingToken)\r",
									"        let keys2 = await pm.environment.get(\"GetResponse_ThingToken\") + \":\" + pm.environment.get(\"IpAddress\");        \r",
									"        let encodedKeys2 = await CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(keys2));\r",
									"        pm.environment.set(\"encodedKeys_Authorization_Report\", encodedKeys2)\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"Signin();\r",
									"setTimeout(async function(){await CreatePartner();}, 3000); \r",
									"setTimeout(async function(){await CreateAccount();}, 6000); \r",
									"setTimeout(async function(){await CreateThing();}, 8000); \r",
									"setTimeout(async function(){await CreateThingStateInfo();}, 9000); \r",
									"setTimeout(async function(){await AsgardHTTPeSimRegister();}, 10000); \r",
									"setTimeout(async function(){}, 20000); //for wait value encodedKeys_Authorization_Report"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-ais-UserName",
								"type": "text",
								"value": "{{x_ais_UserName_AisPartner}}"
							},
							{
								"key": "x-ais-OrderRef",
								"value": "{{x_ais_OrderRef_ReportHTTP_fail}}{{current_timestamp}}"
							},
							{
								"key": "x-ais-OrderDesc",
								"type": "text",
								"value": "{{x_ais_OrderDesc_ReportHTTP}}"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{Basic}} {{encodedKeys_Authorization_Report}}",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Payload\": {\r\n        \"{{SensorKey_AsgardHTTP}}\" : \"{{random_Sensor_AsgardHTTP}}\", \r\n        \"Timestamp\": \"{{timestamp}}\"\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{url}}{{httpapis}}/api/report/sim/v1",
							"host": [
								"{{url}}{{httpapis}}"
							],
							"path": [
								"api",
								"report",
								"sim",
								"v1"
							]
						},
						"description": "Type:Desire"
					},
					"response": []
				},
				{
					"name": "AsgardHTTPeSimReport_TST_F1_0_2_004_Error_AccountIdNotfound",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var Basic = pm.environment.get(\"Basic\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to xAisOrderRef \"RemoveThing_\"\r",
									"var x_ais_OrderRef_RemoveThing = pm.globals.get(\"x_ais_OrderRef_RemoveThing\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"var x_ais_OrderDesc_RemoveThing = pm.globals.get(\"x_ais_OrderDesc_RemoveThing\");\r",
									"//get global variable to xAisOrderRef \"RemoveThingStateInfo_\"\r",
									"var x_ais_OrderRef_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderRef_RemoveThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThingStateInfo\"\r",
									"var x_ais_OrderDesc_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_RemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals AsgardHTTP --------------//\r",
									"//get global variable to x_ais_OrderRef \"ReportHTTP_\"\r",
									"var x_ais_OrderRef_ReportHTTP = pm.globals.get(\"x_ais_OrderRef_ReportHTTP\");\r",
									"//get global variable to x_ais_OrderRef \"ReportHTTPfail_\"\r",
									"var x_ais_OrderRef_ReportHTTP_fail = pm.globals.get(\"x_ais_OrderRef_ReportHTTP_fail\");\r",
									"//get global variable to x_ais_OrderDesc \"Report Data to MG\"\r",
									"var x_ais_OrderDesc_ReportHTTP = pm.globals.get(\"x_ais_OrderDesc_ReportHTTP\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get url Remove --------------//\r",
									"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
									"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"var urlThingRemoveThing = pm.globals.get(\"urlThingRemoveThing\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"var urlThingRemoveThingStateInfo = pm.globals.get(\"urlThingRemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"RemovePartner is Success\"\r",
									"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
									"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
									"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
									"//get global variable to resultDescription \"RemoveThing is Success\"\r",
									"var resultDescriptionRemoveThing = pm.globals.get(\"resultDescriptionRemoveThing\");\r",
									"//get global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"var resultDescriptionRemoveThingStateInfo = pm.globals.get(\"resultDescriptionRemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 404\r",
									"var statusCodeNotFound = pm.globals.get(\"statusCodeNotFound\");\r",
									"//get global variable to resultCode \"40400\"\r",
									"var resultCodeNotFound = pm.globals.get(\"resultCodeNotFound\");\r",
									"//get global variable to resultDescription \"The requested operation could not be found.\"\r",
									"var resultDescriptionTheRequestedOperationCouldNotBeFound = pm.globals.get(\"resultDescriptionTheRequestedOperationCouldNotBeFound\");\r",
									"//------------------------------------------------------------//\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Asgard HTTP(eSim) Report : Status code is \" + statusCodeNotFound, function () {\r",
									"    pm.response.to.have.status(statusCodeNotFound);\r",
									"});\r",
									"\r",
									"pm.test('Asgard HTTP(eSim) Report : operationStatus code is '+'\"'+ resultCodeNotFound +'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeNotFound);\r",
									"});\r",
									"\r",
									"pm.test('Asgard HTTP(eSim) Report : operationStatus DeveloperMessage is '+'\"'+ resultDescriptionTheRequestedOperationCouldNotBeFound+'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheRequestedOperationCouldNotBeFound);\r",
									"});\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// RemovePartner\r",
									" RemovePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemovePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemovePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemovePartner = {\r",
									"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemovePartner,\r",
									"            body: httpRequestRemovePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request RemovePartner');\r",
									"        let response = await reqPromise(optionsRemovePartner);\r",
									"        let jsonDataRemovePartner = await response.json();\r",
									"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
									"    \r",
									"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemovePartner is Success\r",
									"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveAccount\r",
									" RemoveAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemoveAccount = {\r",
									"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveAccount,\r",
									"            body: httpRequestRemoveAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveAccount');\r",
									"        let response = await reqPromise(optionsRemoveAccount);\r",
									"        let jsonDataRemoveAccount = await response.json();\r",
									"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
									"    \r",
									"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveAccount is Success\r",
									"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThing\r",
									" RemoveThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThing = {\r",
									"            url: url + provisioningapis + urlThingRemoveThing,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThing,\r",
									"            body: httpRequestRemoveThing\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveThing');\r",
									"        let response = await reqPromise(optionsRemoveThing);\r",
									"        let jsonDataRemoveThing = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThing)\r",
									"    \r",
									"        let operationStatusRemoveThing = await jsonDataRemoveThing.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThing : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThing : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThing is Success\r",
									"        pm.test('RemoveThing : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThing+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Description', resultDescriptionRemoveThing);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThingStateInfo\r",
									" RemoveThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"            \r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\"),\r",
									"                \"stateType\": fieldDataValue.CreateThingStateInfo.Type_Report, //Report\r",
									"                \"stateKey\": fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP //AA\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingRemoveThingStateInfo,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThingStateInfo,\r",
									"            body: httpRequestRemoveThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('response RemoveThingStateInfo');\r",
									"        let response = await reqPromise(optionsRemoveThingStateInfo);\r",
									"        let jsonDataRemoveThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThingStateInfo)\r",
									"    \r",
									"        let operationStatusRemoveThingStateInfo = await jsonDataRemoveThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThingStateInfo is Success\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThingStateInfo+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Description', resultDescriptionRemoveThingStateInfo);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"//---------------- LogDefaultValue --------------//\r",
									"//set variable to LogDefaultValue JSON.parse\r",
									"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
									"// console.log('LogDefaultValue',LogDefaultValue);\r",
									"//---------------- set globals Other --------------//\r",
									"var SearchLog = LogDefaultValue.SearchLog;\r",
									"// console.log('SearchLog',SearchLog);\r",
									"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
									"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
									"var kbn_version = SearchLog.header.kbn_version;\r",
									"var authorization = SearchLog.header.Authorization;\r",
									"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
									"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
									"var namespace = LogDefaultValue.Other.namespace;\r",
									"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
									"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
									"var header_x_ais_username = LogDefaultValue.Other.header_x_ais_username;\r",
									"var methodPost = LogDefaultValue.Other.methodPost;\r",
									"\r",
									"// Detail\r",
									"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
									"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
									"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
									"\r",
									"// Summary\r",
									"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
									"var identitySummary = \"\";\r",
									"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
									"\r",
									"// Asgard.Http.APIs\r",
									"var applicationName = LogDefaultValue.AsgardHTTP.applicationName;\r",
									"var cmdName = LogDefaultValue.AsgardHTTP.cmdNameReport;\r",
									"var endPointNameRabbitMQ = LogDefaultValue.AsgardHTTP.endPointNameRabbitMQ;\r",
									"var containerId = LogDefaultValue.AsgardHTTP.containerId;\r",
									"var requestObjectUrlStaging = LogDefaultValue.AsgardHTTP.requestObjectUrlReportMgStaging;\r",
									"var urlReport  = LogDefaultValue.AsgardHTTP.urlReport;\r",
									"\r",
									"// Check CDR (Summary Log) and EDR (Detail Log)\r",
									"SearchLogFindTid = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSearchLogFindTid = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = x_ais_OrderRef_ReportHTTP_fail + current_timestamp; \r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestSearchLogFindTid = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"phrase\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"\r",
									"        let optionsSearchLogFindTid = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptSearchLogFindTid,\r",
									"            body: httpRequestSearchLogFindTid\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsSearchLogFindTid);\r",
									"        let jsonDataSearchLogFindTid = await response.json();\r",
									"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
									"        console.log('hits',hits)\r",
									"  \r",
									"        // find tid\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            // let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"        \r",
									"            // console.log('logType',logType)\r",
									"             console.log('applicationNameValue',applicationNameValue)\r",
									"             console.log('applicationName',applicationName)\r",
									"            if(applicationNameValue == applicationName){\r",
									"                let tid = hits[i]._source.cauldron.tid;\r",
									"                pm.environment.set(\"tid\", tid);\r",
									"                break;\r",
									"           }\r",
									"        }\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"CheckLog = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCheckLog = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = pm.environment.get(\"tid\");\r",
									"\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"         console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestCheckLog = {\r",
									"            mode: 'raw',\r",
									"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"phrase\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"        let optionsCheckLog = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptCheckLog,\r",
									"            body: httpRequestCheckLog\r",
									"        }; \r",
									"        let response = await reqPromise(optionsCheckLog);\r",
									"        let jsonDataCheckLog = await response.json();\r",
									"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
									"        \r",
									"        // //200\r",
									"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });     \r",
									"        \r",
									"        let hits = jsonDataCheckLog.hits.hits\r",
									"         console.log('hits',hits)\r",
									"  \r",
									"        // find logType\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            //  let logType = hits[i]._source.cauldron.logType\r",
									"            let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"           \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            \r",
									"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
									"            // console.log('resultDataLog',resultDataLog)\r",
									"\r",
									"            let tidControl = x_ais_OrderRef_ReportHTTP_fail  + current_timestamp;\r",
									"            // console.log(tidControl);\r",
									"            if(applicationNameValue == applicationName){\r",
									"                 \r",
									"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and Asgard.Http.APIs\r",
									"                    pm.test(\"Check Summary Log : Asgard_HTTP(eSim) Report\" , function () {\r",
									"                        console.log(\"======== Check Summary Log ( Expected = Actual) [Asgard_HTTP(eSim) Report] ==================\");\r",
									"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
									"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
									"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeNotFound);\r",
									"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionTheRequestedOperationCouldNotBeFound);\r",
									"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
									"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"identity : \" + JSON.stringify(resultDataLog.identity) + \" = \" + JSON.stringify(identitySummary));\r",
									"                        // console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
									"\r",
									"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
									"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
									"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeNotFound); \r",
									"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionTheRequestedOperationCouldNotBeFound); \r",
									"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
									"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
									"                        // pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
									"\r",
									"                        // check custom\r",
									"                        // \\\"custom\\\":{ \\\"endPointSummary\\\":[ { \\\"no\\\":\\\"1\\\", \\\"endPointName\\\":\\\"db.ThingsCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:Inquiry was Success\\\", \\\"processTime\\\":0.0008 } ] }\r",
									"\r",
									"                        let custom = resultDataLog.custom.endPointSummary;\r",
									"                        let countCustom = custom.length;\r",
									"                       \r",
									"                        // [\"db.ThingsCollection\"]\r",
									"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_Asgard_HTTP_eSim_Report_002_004_005_006;\r",
									"                        // [\"20000:Inquiry was Success\"]\r",
									"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_Asgard_HTTP_eSim_Report_002_004_005_006;\r",
									"                        let countCustomStep = dataEndPointName.length;\r",
									"\r",
									"                        console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep);\r",
									"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
									"                        \r",
									"                        for(let i=0;i<countCustomStep;i++){\r",
									"                            let no = custom[i].no;\r",
									"                            let valueEndPointName = custom[i].endPointName;\r",
									"                            let valueResponseStatus = custom[i].responseStatus;\r",
									"                            // console.log(\"i\",i);\r",
									"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
									"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
									"\r",
									"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString());\r",
									"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i]);\r",
									"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i]);\r",
									"\r",
									"                            pm.expect(no).to.eql((i+1).toString()); \r",
									"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
									"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]); \r",
									"                        }\r",
									"                    }); \r",
									"                }\r",
									"\r",
									"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and Asgard.Http.APIs\r",
									"\r",
									"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
									"                    // console.log('endPointNameValue ',endPointNameValue)\r",
									"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [Asgard_HTTP(eSim) Report]\", function () {\r",
									"                        console.log(\"======== Check Detail Log ( Expected = Actual) [Asgard_HTTP(eSim) Report] ==================\");\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
									"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
									"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
									"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.custom1.activityLog.processTime + \" = \" + resultDataLog.custom1.activityLog.processTime);\r",
									"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
									"\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
									"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
									"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
									"\r",
									"                        let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
									"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
									"                        let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
									"                            // console.log('jsonParseResponseObject',jsonParseResponseObject); \r",
									"                        let url = urlReport; \r",
									"                        let x_ais_orderref = x_ais_OrderRef_ReportHTTP_fail + current_timestamp;\r",
									"                        let x_ais_orderdesc = x_ais_OrderDesc_ReportHTTP;\r",
									"                        let x_ais_userName = x_ais_UserName_AisPartner;\r",
									"                        let authorization = Basic + ' ' + pm.environment.get(\"encodedKeys_Authorization_Report\");\r",
									"                        let SensorKey = fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP;\r",
									"                        let sensor = pm.environment.get(\"random_Sensor_AsgardHTTP\");\r",
									"                        let timestamp = pm.environment.get(\"timestamp\");\r",
									"\r",
									"                        if( endPointNameValue == undefined){\r",
									"                            // check requestObject\r",
									"                            // \"requestObject\":\"{\\\"url\\\":\\\"/api/report/sim/v1\\\",\\\"method\\\":\\\"POST\\\",\\\"headers\\\":{\\\"Cache-Control\\\":\\\"no-cache\\\",\\\"Content-Type\\\":\\\"application/json\\\",\\\"Accept\\\":\\\"*/*\\\",\\\"Accept-Encoding\\\":\\\"gzip,deflate,br\\\",\\\"Authorization\\\":\\\"Basic OWM0ZDgzZjUtNjNhNS00OGJlLWE1MzMtMmYwMzI3NTU3YWFjeHg6MS4yLjMuNA==\\\",\\\"Host\\\":\\\"mg-staging.sandais.com\\\",\\\"User-Agent\\\":\\\"PostmanRuntime/7.26.8\\\",\\\"Content-Length\\\":\\\"89\\\",\\\"x-real-ip\\\":\\\"58.8.214.174\\\",\\\"x-forwarded-for\\\":\\\"58.8.214.174\\\",\\\"x-forwarded-proto\\\":\\\"https\\\",\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"ReportHTTPfail_202102151702830\\\",\\\"x-ais-orderdesc\\\":\\\"Report Data to MG\\\",\\\"postman-token\\\":\\\"933da003-bcde-4576-95f5-d2ee8667187a\\\",\\\"x-request-id\\\":\\\"018277e8-4da1-4938-b53e-a5b5bcc4b3a9\\\",\\\"x-b3-traceid\\\":\\\"3070c97568f63ed143ddfff065b7a837\\\",\\\"x-b3-spanid\\\":\\\"43ddfff065b7a837\\\",\\\"x-b3-sampled\\\":\\\"0\\\",\\\"x-ais-SessionId\\\":\\\"1613384652608\\\"},\\\"queryString\\\":{},\\\"routeParamteters\\\":{},\\\"body\\\":{\\\"Payload\\\":{\\\"AA\\\":\\\"856\\\",\\\"Timestamp\\\":\\\"2020-12-31T03:03:18+07:00\\\"}}}\"\r",
									"\r",
									"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
									"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
									"                            console.log(\"headers.x_ais_userName : \" + jsonParseRequestObject.headers[header_x_ais_username] + \" = \" + x_ais_userName);\r",
									"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
									"                            console.log(\"headers.Authorization : \" + jsonParseRequestObject.headers.Authorization + \" = \" + authorization);\r",
									"                            \r",
									"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
									"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_username]).to.eql(x_ais_userName);\r",
									"                            pm.expect(jsonParseRequestObject.headers.Authorization).to.eql(authorization);\r",
									"\r",
									"                            console.log(\"queryString : \" + JSON.stringify(jsonParseRequestObject.queryString) + \" = \" + JSON.stringify({}));\r",
									"                            console.log(\"routeParamteters : \" + JSON.stringify(jsonParseRequestObject.routeParamteters) + \" = \" + JSON.stringify({}));\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.queryString).to.eql({}); \r",
									"                            pm.expect(jsonParseRequestObject.routeParamteters).to.eql({}); \r",
									"\r",
									"                            console.log(\"resquest.body.Payload.\" + SensorKey +\" : \" + jsonParseRequestObject.body.Payload[SensorKey] + \" = \" + sensor.toString());\r",
									"                            console.log(\"resquest.body.Payload.Timestamp : \" + jsonParseRequestObject.body.Payload.Timestamp + \" = \" + timestamp);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.body.Payload[SensorKey]).to.eql(sensor.toString());\r",
									"                            pm.expect(jsonParseRequestObject.body.Payload.Timestamp).to.eql(timestamp); \r",
									"                           \r",
									"                            // check responseObject\r",
									"                            // responseObject: \"{\"OperationStatus\":{\"Code\":\"40400\",\"DeveloperMessage\":\"The requested operation could not be found.\"}}\"\r",
									"\r",
									"                            console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeNotFound);\r",
									"                            console.log(\"response.OperationStatus.DeveloperMessage : \" + jsonParseResponseObject.OperationStatus.DeveloperMessage + \" = \" + resultDescriptionTheRequestedOperationCouldNotBeFound);\r",
									"\r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeNotFound);  \r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheRequestedOperationCouldNotBeFound);  \r",
									"                        }\r",
									"               \r",
									"                    }); \r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"setTimeout(function(){SearchLogFindTid();}, 40000); \r",
									"setTimeout(function(){CheckLog();}, 60000); \r",
									"\r",
									"setTimeout(function(){RemoveAccount();}, 70000); \r",
									"setTimeout(function(){RemovePartner();}, 80000);  \r",
									"\r",
									"setTimeout(function(){\r",
									"pm.environment.unset(\"current_timestamp\");\r",
									"pm.environment.unset(\"AccessToken\");\r",
									"pm.environment.unset(\"random_number\");\r",
									"pm.environment.unset(\"PartnerName\");\r",
									"pm.environment.unset(\"MerchantContact\");\r",
									"pm.environment.unset(\"CPID\");\r",
									"pm.environment.unset(\"GetResponse_PartnerId\");\r",
									"pm.environment.unset(\"AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountId\");\r",
									"pm.environment.unset(\"random_IM\");\r",
									"pm.environment.unset(\"random_ICCID\");\r",
									"pm.environment.unset(\"ThingName\");\r",
									"pm.environment.unset(\"GetResponse_ThingID\");\r",
									"pm.environment.unset(\"GetResponse_IMSI\");\r",
									"pm.environment.unset(\"encodedKeys_Authorization_Register\");\r",
									"pm.environment.unset(\"encodedKeys_Authorization_Report\");\r",
									"pm.environment.unset(\"random_Sensor\");\r",
									"pm.environment.unset(\"GetResponse_ThingToken\");\r",
									"pm.environment.unset(\"tid\");\r",
									"pm.environment.unset(\"SensorKey\");\r",
									"pm.environment.unset(\"SensorKey_AsgardHTTP\");\r",
									"pm.environment.unset(\"random_Sensor_AsgardHTTP\");\r",
									"pm.environment.unset(\"timestamp\");\r",
									"}, 105000);\r",
									"setTimeout(async function(){}, 110000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var Username = pm.environment.get(\"Username\");\r",
									"var Password = pm.environment.get(\"Password\");\r",
									"\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"var httpapis = pm.environment.get(\"httpapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"pm.environment.set(\"SensorKey_AsgardHTTP\",fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP)\r",
									"\r",
									"// Timestamp 2020-12-31T03:03:18+07:00\r",
									"var timestamp = fieldDataValue.AsgardHTTP.Value_AsgardHTTP_Report_Timestamp;\r",
									"// console.log('currentTmestamp',currentTmestamp);\r",
									"pm.environment.set(\"timestamp\", timestamp);\r",
									"\r",
									"//format YYYYMMDDHHMMSSS\r",
									"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
									"// console.log('currentTmestamp',currentTmestamp);\r",
									"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var Basic = pm.environment.get(\"Basic\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var x_ais_UserName_AisPartner = pm.environment.get(\"x_ais_UserName_AisPartner\");\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.environment.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- statusCodeList --------------//\r",
									"//set variable to statusCodeList JSON.parse\r",
									"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
									"//set global variable to statusCode 200\r",
									"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
									"//set global variable to statusCode 201\r",
									"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
									"//set global variable to statusCode 404\r",
									"pm.globals.set(\"statusCodeNotFound\", statusCodeList.statusCodeNotFound);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultCodeList --------------//\r",
									"//set variable to resultCodeList JSON.parse\r",
									"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
									"//set global variable to resultCode \"20000\"\r",
									"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
									"//set global variable to resultCode \"20100\"\r",
									"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
									"//set global variable to resultCode \"40400\"\r",
									"pm.globals.set(\"resultCodeNotFound\", resultCodeList.resultCodeNotFound);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionSuccessList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
									"//set global variable to resultDescription \"SignInProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
									"//set global variable to resultDescription \"CreatePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
									"//set global variable to resultDescription \"CreateAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
									"//set global variable to resultDescription \"CreateThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThing\", resultDescriptionSuccessList.resultDescriptionCreateThing);\r",
									"//set global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThingStateInfo\", resultDescriptionSuccessList.resultDescriptionCreateThingStateInfo);\r",
									"//set global variable to resultDescription \"RemovePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
									"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
									"//set global variable to resultDescription \"RemoveThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThing\", resultDescriptionSuccessList.resultDescriptionRemoveThing);\r",
									"//set global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThingStateInfo\", resultDescriptionSuccessList.resultDescriptionRemoveThingStateInfo);\r",
									"//set global variable to resultDescription \"ReportProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionReportProcessIsSuccess\", resultDescriptionSuccessList.resultDescriptionReportProcessIsSuccess);\r",
									"//set global variable to resultDescription \"The requested operation was successfully.\"\r",
									"pm.globals.set(\"resultDescriptionTheRequestedOperationWasSuccessfully\", resultDescriptionSuccessList.resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"//set global variable to resultDescription \"RemoveThingFromAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThingFromAccount\", resultDescriptionSuccessList.resultDescriptionRemoveThingFromAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionErrorList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
									"//set global variable to resultDescription \"The requested operation could not be found.\"\r",
									"pm.globals.set(\"resultDescriptionTheRequestedOperationCouldNotBeFound\", resultDescriptionErrorList.resultDescriptionTheRequestedOperationCouldNotBeFound);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- HeaderList --------------//\r",
									"//set variable to HeaderList JSON.parse\r",
									"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
									"//---------------- set globals Other --------------//\r",
									"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
									"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
									"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
									"//set global variable to kbn-versio \"7.5.1\"\r",
									"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Signin_ --------------//\r",
									"//set global variable to x_ais_OrderRef \"Signin_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreatePartner --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
									"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
									"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
									"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreateAccount --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
									"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
									"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Thing --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThing\", HeaderList.Thing.x_ais_OrderRef_CreateThing);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThing\", HeaderList.Thing.x_ais_OrderDesc_CreateThing);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThing\", HeaderList.Thing.x_ais_OrderRef_RemoveThing);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThing\", HeaderList.Thing.x_ais_OrderDesc_RemoveThing);\r",
									"//set global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_RemoveThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_RemoveThingStateInfo);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThingFromAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThingFromAccount\", HeaderList.Thing.x_ais_OrderRef_RemoveThingFromAccount);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThingFromAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThingFromAccount\", HeaderList.Thing.x_ais_OrderDesc_RemoveThingFromAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals AsgardHTTP --------------//\r",
									"//set global variable to x_ais_OrderRef \"RegisHTTP_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RegisHTTP\", HeaderList.AsgardHTTP.x_ais_OrderRef_RegisHTTP);\r",
									"//set global variable to x_ais_OrderDesc \"Register Thing in MG\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RegisHTTP\", HeaderList.AsgardHTTP.x_ais_OrderDesc_RegisHTTP);\r",
									"//set global variable to x_ais_OrderRef \"ReportHTTP_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ReportHTTP\", HeaderList.AsgardHTTP.x_ais_OrderRef_ReportHTTP);\r",
									"//set global variable to x_ais_OrderRef \"ReportHTTPfail_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ReportHTTP_fail\", HeaderList.AsgardHTTP.x_ais_OrderRef_ReportHTTP_fail);\r",
									"//set global variable to x_ais_OrderDesc \"Report Data to MG\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_ReportHTTP\", HeaderList.AsgardHTTP.x_ais_OrderDesc_ReportHTTP);\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"SignInProcess is Success\"\r",
									"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
									"//get global variable to resultDescription \"CreatePartner is Success\"\r",
									"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
									"//get global variable to resultDescription \"CreateAccount is Success\"\r",
									"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
									"//get global variable to resultDescription \"CreateThing is Success\"\r",
									"var resultDescriptionCreateThing = pm.globals.get(\"resultDescriptionCreateThing\");\r",
									"//get global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"var resultDescriptionCreateThingStateInfo = pm.globals.get(\"resultDescriptionCreateThingStateInfo\");\r",
									"//get global variable to resultDescription \"The requested operation was successfully.\"\r",
									"var resultDescriptionTheRequestedOperationWasSuccessfully = pm.globals.get(\"resultDescriptionTheRequestedOperationWasSuccessfully\");\r",
									"//get global variable to resultDescription \"RemoveThingFromAccount is Success\"\r",
									"var resultDescriptionRemoveThingFromAccount = pm.globals.get(\"resultDescriptionRemoveThingFromAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- urlRouteList --------------//\r",
									"//set variable to urlRouteList JSON.parse\r",
									"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
									"//---------------- set url Create --------------//\r",
									"//set global variable to url \"/api/v1/auth/signin\"\r",
									"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
									"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
									"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"pm.globals.set(\"urlThingCreateThing\", urlRouteList.Thing.urlThingCreateThing);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"pm.globals.set(\"urlThingCreateThingStateInfo\", urlRouteList.Thing.urlThingCreateThingStateInfo);\r",
									"//set global variable to url \"/api/register/sim/v1\"\r",
									"pm.globals.set(\"urlAsgardHTTPeSimRegister\", urlRouteList.AsgardHTTPeSim.urlAsgardHTTPeSimRegister);\r",
									"//set global variable to url \"/api/report/sim/v1\"\r",
									"pm.globals.set(\"urlAsgardHTTPeSimReport\", urlRouteList.AsgardHTTPeSim.urlAsgardHTTPeSimReport);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThingFromAccount\"\r",
									"pm.globals.set(\"urlAccountRemoveThingFromAccount\", urlRouteList.Thing.urlAccountRemoveThingFromAccount);\r",
									"//---------------- get url Create --------------//\r",
									"//get global variable to url \"/api/v1/auth/signin\"\r",
									"var urlSignin = pm.globals.get(\"urlSignin\");\r",
									"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
									"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"var urlThingCreateThing = pm.globals.get(\"urlThingCreateThing\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"var urlThingCreateThingStateInfo = pm.globals.get(\"urlThingCreateThingStateInfo\");\r",
									"//get global variable to url \"/api/register/sim/v1\"\r",
									"var urlAsgardHTTPeSimRegister = pm.globals.get(\"urlAsgardHTTPeSimRegister\");\r",
									"//get global variable to url \"/api/report/sim/v1\"\r",
									"var urlAsgardHTTPeSimReport = pm.globals.get(\"urlAsgardHTTPeSimReport\");\r",
									"//---------------- set url Remove --------------//\r",
									"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
									"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"pm.globals.set(\"urlThingRemoveThing\", urlRouteList.Thing.urlThingRemoveThing);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"pm.globals.set(\"urlThingRemoveThingStateInfo\", urlRouteList.Thing.urlThingRemoveThingStateInfo);\r",
									"//---------------- get url Remove --------------//\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThingFromAccount\"\r",
									"var urlAccountRemoveThingFromAccount = pm.globals.get(\"urlAccountRemoveThingFromAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Signin_ --------------//\r",
									"//get global variable to x_ais_OrderRef \"Signin_\"\r",
									"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"var x_ais_OrderRef_CreateThing = pm.globals.get(\"x_ais_OrderRef_CreateThing\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"var x_ais_OrderDesc_CreateThing = pm.globals.get(\"x_ais_OrderDesc_CreateThing\");\r",
									"//get global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"var x_ais_OrderRef_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderRef_CreateThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"var x_ais_OrderDesc_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_CreateThingStateInfo\");\r",
									"//get global variable to x_ais_OrderRef \"RemoveThingFromAccount_\"\r",
									"var x_ais_OrderRef_RemoveThingFromAccount = pm.globals.get(\"x_ais_OrderRef_RemoveThingFromAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThingFromAccount\"\r",
									"var x_ais_OrderDesc_RemoveThingFromAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveThingFromAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals AsgardHTTP --------------//\r",
									"//get global variable to x_ais_OrderRef \"RegisHTTP_\"\r",
									"var x_ais_OrderRef_RegisHTTP = pm.globals.get(\"x_ais_OrderRef_RegisHTTP\");\r",
									"//get global variable to x_ais_OrderDesc \"Register Thing in MG\"\r",
									"var x_ais_OrderDesc_RegisHTTP = pm.globals.get(\"x_ais_OrderDesc_RegisHTTP\");\r",
									"//------------------------------------------------------------//\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// Signin get token\r",
									"Signin = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSignin = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_Signin + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_UserAuthentication,\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestSignin = {\r",
									"            mode: 'raw',\r",
									"            raw:\r",
									"                JSON.stringify({\r",
									"                    username: Username,\r",
									"                    password: Password\r",
									"                })\r",
									"        };\r",
									"\r",
									"        let optionsSignin = {\r",
									"            url: url + provisioningapis + urlSignin,\r",
									"            method: 'POST',\r",
									"            header: headersOptSignin,\r",
									"            body: httpRequestSignin\r",
									"        };\r",
									"        // console.log('request Signin');\r",
									"        let response = await reqPromise(optionsSignin);\r",
									"        let jsonDataSignin = await response.json();\r",
									"\r",
									"        // setAccessToken\r",
									"        await pm.environment.set(\"AccessToken\", jsonDataSignin.AccessToken);\r",
									"\r",
									"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('Signin : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // SignInProcess is Success\r",
									"        pm.test('Signin : OperationStatus Description is ' + '\"' + resultDescriptionSuccessSignIn + '\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
									"        });\r",
									"\r",
									"        //set random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //set PartnerName\r",
									"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
									"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
									"        //set MerchantContact\r",
									"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
									"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
									"        // set CPID\r",
									"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
									"        pm.environment.set(\"CPID\", CPIDValue)\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreatePartner\r",
									"CreatePartner = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreatePartner = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreatePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreatePartner,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreatePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
									"                \"PartnerType\": [\r",
									"                    \"Supplier\",\r",
									"                    \"Customer\"\r",
									"                ],\r",
									"                \"PartnerDetail\": {\r",
									"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
									"                    \"CPID\": pm.environment.get(\"CPID\")\r",
									"                },\r",
									"                \"Property\": {\r",
									"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreatePartner = {\r",
									"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreatePartner,\r",
									"            body: httpRequestCreatePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsCreatePartner);\r",
									"        let jsonDataCreatePartner = await response.json();\r",
									"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
									"\r",
									"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreatePartner : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreatePartner is Success\r",
									"        pm.test('CreatePartner : OperationStatus Description is ' + '\"' + resultDescriptionCreatePartner + '\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
									"        });\r",
									"\r",
									"        //GetResponse_PartnerId\r",
									"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
									"\r",
									"        //Accountname\r",
									"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
									"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateAccount\r",
									"CreateAccount = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateAccount = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateAccount,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreateAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateAccount = {\r",
									"            url: url + provisioningapis + urlAccountCreateAccount,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateAccount,\r",
									"            body: httpRequestCreateAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateAccount');\r",
									"        let response = await reqPromise(optionsCreateAccount);\r",
									"        let jsonDataCreateAccount = await response.json();\r",
									"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
									"\r",
									"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateAccount : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateAccount is Success\r",
									"        pm.test('CreateAccount : OperationStatus Description is ' + '\"' + resultDescriptionCreateAccount + '\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
									"        });\r",
									"        // GetResponse_AccountName\r",
									"        pm.environment.set(\"GetResponse_AccountName\", jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
									"        // GetResponse_AccountId\r",
									"        pm.environment.set(\"GetResponse_AccountId\", jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
									"        // random_IM\r",
									"        pm.environment.set(\"random_IM\", _.random(10000000, 99999999) + \" \" + _.random(1000000, 9999999))\r",
									"        // random_ICCID\r",
									"        pm.environment.set(\"random_ICCID\", _.random(1000000, 9999999) + \" \" + _.random(100000, 999999))\r",
									"        // random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //ThingName\r",
									"        let thingNameValue = fieldDataValue.Thing.ThingNameValue; // \"Sensor_TestThingName\"\r",
									"        pm.environment.set(\"ThingName\", thingNameValue + pm.environment.get(\"random_number\"))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThing\r",
									"CreateThing = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThing = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateThing + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateThing,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey': pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreateThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingName\": pm.environment.get(\"ThingName\"),\r",
									"                \"IMEI\": pm.environment.get(\"random_IM\"),\r",
									"                \"IMSI\": pm.environment.get(\"random_IM\"),\r",
									"                \"ICCID\": pm.environment.get(\"random_ICCID\"),\r",
									"                \"RouteUrl\": fieldDataValue.Thing.RouteUrlValue , //[\"http://10.12.3.4:2019/api/information/AddInformation\"]\r",
									"                \"RouteInfo\": {\r",
									"                    \"MIMO_ID\": fieldDataValue.Thing.RouteInfoMIMOIDValue , //\"606edada\"\r",
									"                    \"MIMO_SerialNo\": fieldDataValue.Thing.RouteInfoMIMOSerialNoValue //5466758878\r",
									"                },\r",
									"                \"RouteFlag\": {\r",
									"                    \"ThingName\": fieldDataValue.Thing.RouteFlagThingNameValue , //true\r",
									"                    \"ThingToken\": fieldDataValue.Thing.RouteFlagThingTokenValue, //true\r",
									"                    \"IMEI\": fieldDataValue.Thing.RouteFlagIMEIValue, //true\r",
									"                    \"ICCID\": fieldDataValue.Thing.RouteFlagICCIDValue, //true\r",
									"                    \"RouteInfo\": fieldDataValue.Thing.RouteFlagRouteInfoValue //true\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateThing = {\r",
									"            url: url + provisioningapis + urlThingCreateThing,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThing,\r",
									"            body: httpRequestCreateThing\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThing');\r",
									"        let response = await reqPromise(optionsCreateThing);\r",
									"        let jsonDataCreateThing = await response.json();\r",
									"        // console.log('jsonDataCreateThing',jsonDataCreateThing)\r",
									"\r",
									"        let operationStatusCreateThing = await jsonDataCreateThing.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateThing : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateThing : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateThing is Success\r",
									"        pm.test('CreateThing : OperationStatus Description is ' + '\"' + resultDescriptionCreateThing + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Description', resultDescriptionCreateThing);\r",
									"        });\r",
									"\r",
									"        pm.environment.set(\"GetResponse_ThingID\", jsonDataCreateThing.ThingInfo.ThingId)\r",
									"        pm.environment.set(\"GetResponse_IMSI\", jsonDataCreateThing.ThingInfo.IMSI)\r",
									"        \r",
									"        let keys = pm.environment.get(\"GetResponse_IMSI\") + \":\" + pm.environment.get(\"IpAddress\");\r",
									"        // console.log(\"keys\", keys);\r",
									"        let encodedKeys = CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(keys));\r",
									"        pm.environment.set(\"encodedKeys_Authorization_Register\", encodedKeys);\r",
									"\r",
									"        //Get Random Sensor \r",
									"        pm.environment.set(\"random_Sensor\", _.random(100, 999))\r",
									"\r",
									"        //Get Random Sensor AsgardHTTP\r",
									"        pm.environment.set(\"random_Sensor_AsgardHTTP\", _.random(100, 999))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThingStateInfo\r",
									"CreateThingStateInfo = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThingStateInfo = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateThingStateInfo,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey': pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        // {\"AA\" : pm.environment.get(\"random_Sensor\")}\r",
									"        let sensorValue = {};\r",
									"        sensorValue[fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP] = pm.environment.get(\"random_Sensor\");\r",
									"        // console.log('sensorValue',sensorValue);\r",
									"        \r",
									"        let httpRequestCreateThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": [\r",
									"                    pm.environment.get(\"GetResponse_ThingID\")\r",
									"                ],\r",
									"                \"Type\": fieldDataValue.CreateThingStateInfo.Type_Report,\r",
									"                \"Sensor\": sensorValue\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingCreateThingStateInfo,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThingStateInfo,\r",
									"            body: httpRequestCreateThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThingStateInfo');\r",
									"        let response = await reqPromise(optionsCreateThingStateInfo);\r",
									"        let jsonDataCreateThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataCreateThingStateInfo',jsonDataCreateThingStateInfo)\r",
									"\r",
									"        let operationStatusCreateThingStateInfo = await jsonDataCreateThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"CreateThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //CreateThingStateInfo is Success\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Description is ' + '\"' + resultDescriptionCreateThingStateInfo + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Description', resultDescriptionCreateThingStateInfo);\r",
									"        });\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// AsgardHTTPeSimRegister\r",
									"AsgardHTTPeSimRegister = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptAsgardHTTPeSimRegister = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_RegisHTTP + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_RegisHTTP,\r",
									"            'Authorization': Basic + ' ' + pm.environment.get(\"encodedKeys_Authorization_Register\")\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestAsgardHTTPeSimRegister = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({})\r",
									"        };\r",
									"\r",
									"        let optionsAsgardHTTPeSimRegister = {\r",
									"            url: url + httpapis + urlAsgardHTTPeSimRegister,\r",
									"            method: 'POST',\r",
									"            header: headersOptAsgardHTTPeSimRegister,\r",
									"            body: httpRequestAsgardHTTPeSimRegister\r",
									"        };\r",
									"\r",
									"        // console.log('request AsgardHTTPEsimRegister');\r",
									"        let response = await reqPromise(optionsAsgardHTTPeSimRegister);\r",
									"        let jsonDataAsgardHTTPeSimRegister = await response.json();\r",
									"        // console.log('jsonDataCreateThingStateInfo',jsonDataAsgardHTTPeSimRegister)\r",
									"        let operationStatusAsgardHTTPeSimRegister = await jsonDataAsgardHTTPeSimRegister.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"Asgard HTTP(eSim) Register : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('Asgard HTTP(eSim) Register : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusAsgardHTTPeSimRegister).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"\r",
									"        // The requested operation was successfully.\r",
									"        pm.test('Asgard HTTP(eSim) Register : OperationStatus DeveloperMessage is ' + '\"' + resultDescriptionTheRequestedOperationWasSuccessfully + '\"', function () {\r",
									"            pm.expect(operationStatusAsgardHTTPeSimRegister).to.have.property('DeveloperMessage', resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"        });\r",
									"\r",
									"        await pm.environment.set(\"GetResponse_ThingToken\", jsonDataAsgardHTTPeSimRegister.ThingToken)\r",
									"        let keys2 = await pm.environment.get(\"GetResponse_ThingToken\") + \":\" + pm.environment.get(\"IpAddress\");        \r",
									"        let encodedKeys2 = await CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(keys2));\r",
									"        pm.environment.set(\"encodedKeys_Authorization_Report\", encodedKeys2)\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThingFromAccount\r",
									"RemoveThingFromAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThingFromAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThingFromAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThingFromAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThingFromAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": [pm.environment.get(\"GetResponse_ThingID\")]\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThingFromAccount = {\r",
									"            url: url + provisioningapis + urlAccountRemoveThingFromAccount,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThingFromAccount,\r",
									"            body: httpRequestRemoveThingFromAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveThingFromAccount');\r",
									"        let response = await reqPromise(optionsRemoveThingFromAccount);\r",
									"        let jsonDataRemoveThingFromAccount = await response.json();\r",
									"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
									"    \r",
									"        let operationStatusRemoveThingFromAccount = await jsonDataRemoveThingFromAccount.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThingFromAccount : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThingFromAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingFromAccount).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThingFromAccount is Success\r",
									"        pm.test('RemoveThingFromAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThingFromAccount+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingFromAccount).to.have.property('Description', resultDescriptionRemoveThingFromAccount);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"Signin();\r",
									"setTimeout(async function(){await CreatePartner();}, 3000); \r",
									"setTimeout(async function(){await CreateAccount();}, 6000); \r",
									"setTimeout(async function(){await CreateThing();}, 8000); \r",
									"setTimeout(async function(){await CreateThingStateInfo();}, 9000); \r",
									"setTimeout(async function(){await AsgardHTTPeSimRegister();}, 10000); \r",
									"setTimeout(async function(){}, 20000); //for wait value encodedKeys_Authorization_Report\r",
									"setTimeout(async function(){await RemoveThingFromAccount();}, 30000); "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-ais-UserName",
								"type": "text",
								"value": "{{x_ais_UserName_AisPartner}}"
							},
							{
								"key": "x-ais-OrderRef",
								"value": "{{x_ais_OrderRef_ReportHTTP_fail}}{{current_timestamp}}"
							},
							{
								"key": "x-ais-OrderDesc",
								"type": "text",
								"value": "{{x_ais_OrderDesc_ReportHTTP}}"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{Basic}} {{encodedKeys_Authorization_Report}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Payload\": {\r\n        \"{{SensorKey_AsgardHTTP}}\" : \"{{random_Sensor_AsgardHTTP}}\", \r\n        \"Timestamp\": \"{{timestamp}}\"\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{url}}{{httpapis}}/api/report/sim/v1",
							"host": [
								"{{url}}{{httpapis}}"
							],
							"path": [
								"api",
								"report",
								"sim",
								"v1"
							]
						},
						"description": "Type:Desire"
					},
					"response": []
				},
				{
					"name": "AsgardHTTPeSimReport_TST_F1_0_2_005_Error_ThingtokenAlreadyExist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"var controlapis = pm.environment.get(\"controlapis\");\r",
									"var httpapis = pm.environment.get(\"httpapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var Basic = pm.environment.get(\"Basic\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to xAisOrderRef \"RemoveThing_\"\r",
									"var x_ais_OrderRef_RemoveThing = pm.globals.get(\"x_ais_OrderRef_RemoveThing\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"var x_ais_OrderDesc_RemoveThing = pm.globals.get(\"x_ais_OrderDesc_RemoveThing\");\r",
									"//get global variable to xAisOrderRef \"RemoveThingStateInfo_\"\r",
									"var x_ais_OrderRef_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderRef_RemoveThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThingStateInfo\"\r",
									"var x_ais_OrderDesc_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_RemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Group --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveGroup_\"\r",
									"var x_ais_OrderRef_RemoveGroup = pm.globals.get(\"x_ais_OrderRef_RemoveGroup\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveGroup\"\r",
									"var x_ais_OrderDesc_RemoveGroup = pm.globals.get(\"x_ais_OrderDesc_RemoveGroup\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals AsgardHTTP --------------//\r",
									"//get global variable to x_ais_OrderRef \"ReportHTTP_\"\r",
									"var x_ais_OrderRef_ReportHTTP = pm.globals.get(\"x_ais_OrderRef_ReportHTTP\");\r",
									"//get global variable to x_ais_OrderRef \"ReportHTTPfail_\"\r",
									"var x_ais_OrderRef_ReportHTTP_fail = pm.globals.get(\"x_ais_OrderRef_ReportHTTP_fail\");\r",
									"//get global variable to x_ais_OrderDesc \"Report Data to MG\"\r",
									"var x_ais_OrderDesc_ReportHTTP = pm.globals.get(\"x_ais_OrderDesc_ReportHTTP\");\r",
									"//------------------------------------------------------------//\r",
									"\r",
									"//---------------- get url Remove --------------//\r",
									"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
									"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"var urlThingRemoveThing = pm.globals.get(\"urlThingRemoveThing\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"var urlThingRemoveThingStateInfo = pm.globals.get(\"urlThingRemoveThingStateInfo\");\r",
									"//get global variable to url \"/api/v1/Group/RemoveGroup\"\r",
									"var urlGroupRemoveGroup = pm.globals.get(\"urlGroupRemoveGroup\");\r",
									"\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"RemovePartner is Success\"\r",
									"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
									"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
									"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
									"//get global variable to resultDescription \"RemoveThing is Success\"\r",
									"var resultDescriptionRemoveThing = pm.globals.get(\"resultDescriptionRemoveThing\");\r",
									"//get global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"var resultDescriptionRemoveThingStateInfo = pm.globals.get(\"resultDescriptionRemoveThingStateInfo\");\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"//get global variable to statusCode 403\r",
									"var statusCodeForbidden = pm.globals.get(\"statusCodeForbidden\");\r",
									"//get global variable to resultCode \"40301\"\r",
									"var resultCodeTheClientRequestedAlreadyExists = pm.globals.get(\"resultCodeTheClientRequestedAlreadyExists\");\r",
									"//get global variable to resultDescription \"The thingToken requested already exists.\"\r",
									"var resultDescriptionTheThingTokenRequestedAlreadyExists = pm.globals.get(\"resultDescriptionTheThingTokenRequestedAlreadyExists\");\r",
									"\r",
									"pm.test(\"Asgard HTTP(eSim) Report : Status code is \" + statusCodeForbidden, function () {\r",
									"    pm.response.to.have.status(statusCodeForbidden);\r",
									"});\r",
									"\r",
									"pm.test('Asgard HTTP(eSim) Report : operationStatus code is '+'\"'+ resultCodeTheClientRequestedAlreadyExists +'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeTheClientRequestedAlreadyExists);\r",
									"});\r",
									"\r",
									"pm.test('Asgard HTTP(eSim) Report : operationStatus DeveloperMessage is '+'\"'+ resultDescriptionTheThingTokenRequestedAlreadyExists+'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheThingTokenRequestedAlreadyExists);\r",
									"});\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// RemovePartner\r",
									" RemovePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemovePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemovePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemovePartner = {\r",
									"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemovePartner,\r",
									"            body: httpRequestRemovePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request RemovePartner');\r",
									"        let response = await reqPromise(optionsRemovePartner);\r",
									"        let jsonDataRemovePartner = await response.json();\r",
									"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
									"    \r",
									"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemovePartner is Success\r",
									"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveAccount\r",
									" RemoveAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemoveAccount = {\r",
									"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveAccount,\r",
									"            body: httpRequestRemoveAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveAccount');\r",
									"        let response = await reqPromise(optionsRemoveAccount);\r",
									"        let jsonDataRemoveAccount = await response.json();\r",
									"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
									"    \r",
									"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveAccount is Success\r",
									"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThing\r",
									" RemoveThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThing = {\r",
									"            url: url + provisioningapis + urlThingRemoveThing,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThing,\r",
									"            body: httpRequestRemoveThing\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveThing');\r",
									"        let response = await reqPromise(optionsRemoveThing);\r",
									"        let jsonDataRemoveThing = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThing)\r",
									"    \r",
									"        let operationStatusRemoveThing = await jsonDataRemoveThing.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThing : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThing : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThing is Success\r",
									"        pm.test('RemoveThing : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThing+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Description', resultDescriptionRemoveThing);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThingStateInfo\r",
									" RemoveThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"            \r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\"),\r",
									"                \"stateType\": fieldDataValue.CreateThingStateInfo.Type_Report, //Report\r",
									"                \"stateKey\": fieldDataValue.CreateThingStateInfo.SensorKey //Temp\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingRemoveThingStateInfo,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThingStateInfo,\r",
									"            body: httpRequestRemoveThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('response RemoveThingStateInfo');\r",
									"        let response = await reqPromise(optionsRemoveThingStateInfo);\r",
									"        let jsonDataRemoveThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThingStateInfo)\r",
									"    \r",
									"        let operationStatusRemoveThingStateInfo = await jsonDataRemoveThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThingStateInfo is Success\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThingStateInfo+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Description', resultDescriptionRemoveThingStateInfo);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"//---------------- LogDefaultValue --------------//\r",
									"//set variable to LogDefaultValue JSON.parse\r",
									"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
									"// console.log('LogDefaultValue',LogDefaultValue);\r",
									"//---------------- set globals Other --------------//\r",
									"var SearchLog = LogDefaultValue.SearchLog;\r",
									"// console.log('SearchLog',SearchLog);\r",
									"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
									"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
									"var kbn_version = SearchLog.header.kbn_version;\r",
									"var authorization = SearchLog.header.Authorization;\r",
									"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
									"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
									"var namespace = LogDefaultValue.Other.namespace;\r",
									"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
									"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
									"var header_x_ais_username = LogDefaultValue.Other.header_x_ais_username;\r",
									"var methodPost = LogDefaultValue.Other.methodPost;\r",
									"\r",
									"// Detail\r",
									"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
									"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
									"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
									"\r",
									"// Summary\r",
									"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
									"var identitySummary = \"\";\r",
									"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
									"\r",
									"// Asgard.Http.APIs\r",
									"var applicationName = LogDefaultValue.AsgardHTTP.applicationName;\r",
									"var cmdName = LogDefaultValue.AsgardHTTP.cmdNameReport;\r",
									"var endPointNameRabbitMQ = LogDefaultValue.AsgardHTTP.endPointNameRabbitMQ;\r",
									"var containerId = LogDefaultValue.AsgardHTTP.containerId;\r",
									"var requestObjectUrlStaging = LogDefaultValue.AsgardHTTP.requestObjectUrlReportMgStaging;\r",
									"var urlReport  = LogDefaultValue.AsgardHTTP.urlReport;\r",
									"\r",
									"// Check CDR (Summary Log) and EDR (Detail Log)\r",
									"SearchLogFindTid = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSearchLogFindTid = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = x_ais_OrderRef_ReportHTTP_fail + current_timestamp; \r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestSearchLogFindTid = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"phrase\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"\r",
									"        let optionsSearchLogFindTid = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptSearchLogFindTid,\r",
									"            body: httpRequestSearchLogFindTid\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsSearchLogFindTid);\r",
									"        let jsonDataSearchLogFindTid = await response.json();\r",
									"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
									"        console.log('hits',hits)\r",
									"  \r",
									"        // find tid\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            // let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"        \r",
									"            // console.log('logType',logType)\r",
									"            //  console.log('applicationNameValue',applicationNameValue)\r",
									"            //  console.log('applicationName',applicationName)\r",
									"            if(applicationNameValue == applicationName){\r",
									"                let tid = hits[i]._source.cauldron.tid;\r",
									"                pm.environment.set(\"tid\", tid);\r",
									"                break;\r",
									"           }\r",
									"        }\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"CheckLog = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCheckLog = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = pm.environment.get(\"tid\");\r",
									"\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"         console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestCheckLog = {\r",
									"            mode: 'raw',\r",
									"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"phrase\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"        let optionsCheckLog = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptCheckLog,\r",
									"            body: httpRequestCheckLog\r",
									"        }; \r",
									"        let response = await reqPromise(optionsCheckLog);\r",
									"        let jsonDataCheckLog = await response.json();\r",
									"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
									"        \r",
									"        // //200\r",
									"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });     \r",
									"        \r",
									"        let hits = jsonDataCheckLog.hits.hits\r",
									"         console.log('hits',hits)\r",
									"  \r",
									"        // find logType\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            //  let logType = hits[i]._source.cauldron.logType\r",
									"            let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"           \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            \r",
									"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
									"            // console.log('resultDataLog',resultDataLog)\r",
									"\r",
									"            let tidControl = x_ais_OrderRef_ReportHTTP_fail  + current_timestamp;\r",
									"            // console.log(tidControl);\r",
									"            if(applicationNameValue == applicationName){\r",
									"                 \r",
									"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and Asgard.Http.APIs\r",
									"                    pm.test(\"Check Summary Log : Asgard_HTTP(eSim) Report\" , function () {\r",
									"                        console.log(\"======== Check Summary Log ( Expected = Actual) [Asgard_HTTP(eSim) Report] ==================\");\r",
									"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
									"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
									"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeTheClientRequestedAlreadyExists);\r",
									"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionTheThingTokenRequestedAlreadyExists);\r",
									"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
									"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"identity : \" + JSON.stringify(resultDataLog.identity) + \" = \" + JSON.stringify(identitySummary));\r",
									"                        // console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
									"\r",
									"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
									"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
									"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeTheClientRequestedAlreadyExists); \r",
									"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionTheThingTokenRequestedAlreadyExists); \r",
									"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
									"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
									"                        // pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
									"\r",
									"                        // check custom\r",
									"                        // \\\"custom\\\":{ \\\"endPointSummary\\\":[ { \\\"no\\\":\\\"1\\\", \\\"endPointName\\\":\\\"db.ThingsCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:Inquiry was Success\\\", \\\"processTime\\\":0.0008 } ] }\r",
									"\r",
									"                        let custom = resultDataLog.custom.endPointSummary;\r",
									"                        let countCustom = custom.length;\r",
									"                       \r",
									"                        // [\"db.ThingsCollection\"]\r",
									"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_Asgard_HTTP_eSim_Report_002_004_005_006;\r",
									"                        // [\"20000:Inquiry was Success\"]\r",
									"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_Asgard_HTTP_eSim_Report_002_004_005_006;\r",
									"                        let countCustomStep = dataEndPointName.length;\r",
									"\r",
									"                        console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep);\r",
									"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
									"                        \r",
									"                        for(let i=0;i<countCustomStep;i++){\r",
									"                            let no = custom[i].no;\r",
									"                            let valueEndPointName = custom[i].endPointName;\r",
									"                            let valueResponseStatus = custom[i].responseStatus;\r",
									"                            // console.log(\"i\",i);\r",
									"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
									"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
									"\r",
									"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString());\r",
									"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i]);\r",
									"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i]);\r",
									"\r",
									"                            pm.expect(no).to.eql((i+1).toString()); \r",
									"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
									"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]); \r",
									"                        }\r",
									"                    }); \r",
									"                }\r",
									"\r",
									"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and Asgard.Http.APIs\r",
									"\r",
									"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
									"                    // console.log('endPointNameValue ',endPointNameValue)\r",
									"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [Asgard_HTTP(eSim) Report]\", function () {\r",
									"                        console.log(\"======== Check Detail Log ( Expected = Actual) [Asgard_HTTP(eSim) Report] ==================\");\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
									"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
									"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
									"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.custom1.activityLog.processTime + \" = \" + resultDataLog.custom1.activityLog.processTime);\r",
									"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
									"\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
									"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
									"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
									"\r",
									"                        let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
									"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
									"                        let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
									"                            // console.log('jsonParseResponseObject',jsonParseResponseObject); \r",
									"                        let url = urlReport; \r",
									"                        let x_ais_orderref = x_ais_OrderRef_ReportHTTP_fail + current_timestamp;\r",
									"                        let x_ais_orderdesc = x_ais_OrderDesc_ReportHTTP;\r",
									"                        let x_ais_userName = x_ais_UserName_AisPartner;\r",
									"                        let authorization = Basic + ' ' + pm.environment.get(\"encodedKeys_Authorization_Report\");\r",
									"                        let SensorKey = fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP;\r",
									"                        let sensor = pm.environment.get(\"random_Sensor_AsgardHTTP\");\r",
									"                        let timestamp = pm.environment.get(\"timestamp\");\r",
									"\r",
									"                        if( endPointNameValue == undefined){\r",
									"                            // check requestObject\r",
									"                            // \"requestObject\":\"{\\\"url\\\":\\\"/api/report/sim/v1\\\",\\\"method\\\":\\\"POST\\\",\\\"headers\\\":{\\\"Cache-Control\\\":\\\"no-cache\\\",\\\"Content-Type\\\":\\\"application/json\\\",\\\"Accept\\\":\\\"*/*\\\",\\\"Accept-Encoding\\\":\\\"gzip,deflate,br\\\",\\\"Authorization\\\":\\\"Basic OWM0ZDgzZjUtNjNhNS00OGJlLWE1MzMtMmYwMzI3NTU3YWFjeHg6MS4yLjMuNA==\\\",\\\"Host\\\":\\\"mg-staging.sandais.com\\\",\\\"User-Agent\\\":\\\"PostmanRuntime/7.26.8\\\",\\\"Content-Length\\\":\\\"89\\\",\\\"x-real-ip\\\":\\\"58.8.214.174\\\",\\\"x-forwarded-for\\\":\\\"58.8.214.174\\\",\\\"x-forwarded-proto\\\":\\\"https\\\",\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"ReportHTTPfail_202102151702830\\\",\\\"x-ais-orderdesc\\\":\\\"Report Data to MG\\\",\\\"postman-token\\\":\\\"933da003-bcde-4576-95f5-d2ee8667187a\\\",\\\"x-request-id\\\":\\\"018277e8-4da1-4938-b53e-a5b5bcc4b3a9\\\",\\\"x-b3-traceid\\\":\\\"3070c97568f63ed143ddfff065b7a837\\\",\\\"x-b3-spanid\\\":\\\"43ddfff065b7a837\\\",\\\"x-b3-sampled\\\":\\\"0\\\",\\\"x-ais-SessionId\\\":\\\"1613384652608\\\"},\\\"queryString\\\":{},\\\"routeParamteters\\\":{},\\\"body\\\":{\\\"Payload\\\":{\\\"AA\\\":\\\"856\\\",\\\"Timestamp\\\":\\\"2020-12-31T03:03:18+07:00\\\"}}}\"\r",
									"\r",
									"                            // \\\"requestObject\\\":\\\"{ \\\\\\\"url\\\\\\\":\\\\\\\"/api/report/sim/v1\\\\\\\", \\\\\\\"method\\\\\\\":\\\\\\\"POST\\\\\\\", \\\\\\\"headers\\\\\\\":{ \\\\\\\"Cache-Control\\\\\\\":\\\\\\\"no-cache\\\\\\\", \\\\\\\"Content-Type\\\\\\\":\\\\\\\"application/json\\\\\\\", \\\\\\\"Accept\\\\\\\":\\\\\\\"*/*\\\\\\\", \\\\\\\"Accept-Encoding\\\\\\\":\\\\\\\"gzip, deflate, br\\\\\\\", \\\\\\\"Authorization\\\\\\\":\\\\\\\"Basic Mzk4NjMxNzMtZDFjMC00OWZhLTk5N2UtOWZlOTBjYzdjMWE0OjEuMi4zLjQ=\\\\\\\", \\\\\\\"Host\\\\\\\":\\\\\\\"mg-iot.sandais.com\\\\\\\", \\\\\\\"User-Agent\\\\\\\":\\\\\\\"PostmanRuntime/7.26.8\\\\\\\", \\\\\\\"Content-Length\\\\\\\":\\\\\\\"103\\\\\\\", \\\\\\\"x-real-ip\\\\\\\":\\\\\\\"182.232.183.255\\\\\\\", \\\\\\\"x-forwarded-for\\\\\\\":\\\\\\\"182.232.183.255, 10.233.67.0\\\\\\\", \\\\\\\"x-forwarded-proto\\\\\\\":\\\\\\\"http\\\\\\\", \\\\\\\"x-ais-username\\\\\\\":\\\\\\\"AisPartner\\\\\\\", \\\\\\\"x-ais-orderref\\\\\\\":\\\\\\\"ReportHTTPfail_202105112105436\\\\\\\", \\\\\\\"x-ais-orderdesc\\\\\\\":\\\\\\\"Report Data to MG\\\\\\\", \\\\\\\"postman-token\\\\\\\":\\\\\\\"eba5f9d8-5ea5-4885-8278-fefc5ad924ad\\\\\\\", \\\\\\\"x-envoy-external-address\\\\\\\":\\\\\\\"10.233.67.0\\\\\\\", \\\\\\\"x-request-id\\\\\\\":\\\\\\\"f1ba0e94-3402-4d6a-a82d-80ae7864480e\\\\\\\", \\\\\\\"x-envoy-original-path\\\\\\\":\\\\\\\"/httpapis/api/report/sim/v1\\\\\\\", \\\\\\\"x-b3-traceid\\\\\\\":\\\\\\\"b196b8c4663a27b7136f5b786e39ae92\\\\\\\", \\\\\\\"x-b3-spanid\\\\\\\":\\\\\\\"7026e48f1e1377dd\\\\\\\", \\\\\\\"x-b3-parentspanid\\\\\\\":\\\\\\\"136f5b786e39ae92\\\\\\\", \\\\\\\"x-b3-sampled\\\\\\\":\\\\\\\"0\\\\\\\", \\\\\\\"x-ais-SessionId\\\\\\\":\\\\\\\"1620743998256\\\\\\\" }, \\\\\\\"queryString\\\\\\\":{ }, \\\\\\\"routeParamteters\\\\\\\":{ }, \\\\\\\"body\\\\\\\":{ \\\\\\\"Payload\\\\\\\":{ \\\\\\\"AA\\\\\\\":\\\\\\\"180\\\\\\\", \\\\\\\"Timestamp\\\\\\\":\\\\\\\"2020-12-31T03:03:18+07:00\\\\\\\" } } }\\\"\r",
									"\r",
									"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
									"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
									"                            console.log(\"headers.x_ais_userName : \" + jsonParseRequestObject.headers[header_x_ais_username] + \" = \" + x_ais_userName);\r",
									"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
									"                            console.log(\"headers.Authorization : \" + jsonParseRequestObject.headers.Authorization + \" = \" + authorization);\r",
									"                            \r",
									"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
									"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_username]).to.eql(x_ais_userName);\r",
									"                            pm.expect(jsonParseRequestObject.headers.Authorization).to.eql(authorization);\r",
									"\r",
									"                            console.log(\"queryString : \" + JSON.stringify(jsonParseRequestObject.queryString) + \" = \" + JSON.stringify({}));\r",
									"                            console.log(\"routeParamteters : \" + JSON.stringify(jsonParseRequestObject.routeParamteters) + \" = \" + JSON.stringify({}));\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.queryString).to.eql({}); \r",
									"                            pm.expect(jsonParseRequestObject.routeParamteters).to.eql({}); \r",
									"\r",
									"                            console.log(\"resquest.body.Payload.\" + SensorKey +\" : \" + jsonParseRequestObject.body.Payload[SensorKey] + \" = \" + sensor.toString());\r",
									"                            console.log(\"resquest.body.Payload.Timestamp : \" + jsonParseRequestObject.body.Payload.Timestamp + \" = \" + timestamp);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.body.Payload[SensorKey]).to.eql(sensor.toString());\r",
									"                            pm.expect(jsonParseRequestObject.body.Payload.Timestamp).to.eql(timestamp); \r",
									"                           \r",
									"                            // check responseObject\r",
									"                            // responseObject: \"{\"OperationStatus\":{\"Code\":\"40301\",\"DeveloperMessage\":\"The requested operation could not be found.\"}}\"\r",
									"\r",
									"                            console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeTheClientRequestedAlreadyExists);\r",
									"                            console.log(\"response.OperationStatus.DeveloperMessage : \" + jsonParseResponseObject.OperationStatus.DeveloperMessage + \" = \" + resultDescriptionTheThingTokenRequestedAlreadyExists);\r",
									"\r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeTheClientRequestedAlreadyExists);  \r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheThingTokenRequestedAlreadyExists);  \r",
									"                        }\r",
									"               \r",
									"                    }); \r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"setTimeout(function(){SearchLogFindTid();}, 30000); \r",
									"setTimeout(function(){CheckLog();}, 50000); \r",
									"\r",
									"setTimeout(function(){RemoveThingStateInfo();}, 60000); \r",
									"setTimeout(function(){RemoveThing();}, 70000); \r",
									"setTimeout(function(){RemoveAccount();}, 80000); \r",
									"setTimeout(function(){RemovePartner();}, 90000);\r",
									"\r",
									"setTimeout(function(){\r",
									"pm.environment.unset(\"current_timestamp\");\r",
									"pm.environment.unset(\"AccessToken\");\r",
									"pm.environment.unset(\"random_number\");\r",
									"pm.environment.unset(\"PartnerName\");\r",
									"pm.environment.unset(\"MerchantContact\");\r",
									"pm.environment.unset(\"CPID\");\r",
									"pm.environment.unset(\"GetResponse_PartnerId\");\r",
									"pm.environment.unset(\"AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountId\");\r",
									"pm.environment.unset(\"random_IM\");\r",
									"pm.environment.unset(\"random_ICCID\");\r",
									"pm.environment.unset(\"ThingName\");\r",
									"pm.environment.unset(\"GetResponse_ThingID\");\r",
									"pm.environment.unset(\"GetResponse_IMSI\");\r",
									"pm.environment.unset(\"encodedKeys_Authorization_Register\");\r",
									"pm.environment.unset(\"encodedKeys_Authorization_Report\");\r",
									"pm.environment.unset(\"random_Sensor\");\r",
									"pm.environment.unset(\"GetResponse_ThingToken\");\r",
									"pm.environment.unset(\"tid\");\r",
									"pm.environment.unset(\"SensorKey_AsgardHTTP\");\r",
									"pm.environment.unset(\"random_Sensor_AsgardHTTP\");\r",
									"pm.environment.unset(\"timestamp\");\r",
									"}, 105000);\r",
									"setTimeout(async function(){}, 110000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var Username = pm.environment.get(\"Username\");\r",
									"var Password = pm.environment.get(\"Password\");\r",
									"\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"var httpapis = pm.environment.get(\"httpapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"pm.environment.set(\"SensorKey\",fieldDataValue.CreateThingStateInfo.SensorKey)\r",
									"pm.environment.set(\"SensorKey_AsgardHTTP\",fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP)\r",
									"\r",
									"// Timestamp 2020-12-31T03:03:18+07:00\r",
									"var timestamp = fieldDataValue.AsgardHTTP.Value_AsgardHTTP_Report_Timestamp;\r",
									"// console.log('currentTmestamp',currentTmestamp);\r",
									"pm.environment.set(\"timestamp\", timestamp);\r",
									"\r",
									"//format YYYYMMDDHHMMSSS\r",
									"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
									"// console.log('currentTmestamp',currentTmestamp);\r",
									"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var Basic = pm.environment.get(\"Basic\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var x_ais_UserName_AisPartner = pm.environment.get(\"x_ais_UserName_AisPartner\");\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.environment.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- statusCodeList --------------//\r",
									"//set variable to statusCodeList JSON.parse\r",
									"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
									"//set global variable to statusCode 200\r",
									"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
									"//set global variable to statusCode 201\r",
									"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
									"//set global variable to statusCode 403\r",
									"pm.globals.set(\"statusCodeForbidden\", statusCodeList.statusCodeForbidden);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultCodeList --------------//\r",
									"//set variable to resultCodeList JSON.parse\r",
									"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
									"//set global variable to resultCode \"20000\"\r",
									"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
									"//set global variable to resultCode \"20100\"\r",
									"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
									"//set global variable to resultCode \"40301\"\r",
									"pm.globals.set(\"resultCodeTheClientRequestedAlreadyExists\", resultCodeList.resultCodeTheClientRequestedAlreadyExists);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionSuccessList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
									"//set global variable to resultDescription \"SignInProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
									"//set global variable to resultDescription \"CreatePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
									"//set global variable to resultDescription \"CreateAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
									"//set global variable to resultDescription \"CreateThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThing\", resultDescriptionSuccessList.resultDescriptionCreateThing);\r",
									"//set global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThingStateInfo\", resultDescriptionSuccessList.resultDescriptionCreateThingStateInfo);\r",
									"//set global variable to resultDescription \"RemovePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
									"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
									"//set global variable to resultDescription \"RemoveThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThing\", resultDescriptionSuccessList.resultDescriptionRemoveThing);\r",
									"//set global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThingStateInfo\", resultDescriptionSuccessList.resultDescriptionRemoveThingStateInfo);\r",
									"//set global variable to resultDescription \"Register is Success\"\r",
									"pm.globals.set(\"resultDescriptionRegisterIsSuccess\", resultDescriptionSuccessList.resultDescriptionRegisterIsSuccess);\r",
									"//set global variable to resultDescription \"ReportProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionReportProcessIsSuccess\", resultDescriptionSuccessList.resultDescriptionReportProcessIsSuccess);\r",
									"//set global variable to resultDescription \"The requested operation was successfully.\"\r",
									"pm.globals.set(\"resultDescriptionTheRequestedOperationWasSuccessfully\", resultDescriptionSuccessList.resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionErrorList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
									"//set global variable to resultDescription \"The thingToken requested already exists.\"\r",
									"pm.globals.set(\"resultDescriptionTheThingTokenRequestedAlreadyExists\", resultDescriptionErrorList.resultDescriptionTheThingTokenRequestedAlreadyExists);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- HeaderList --------------//\r",
									"//set variable to HeaderList JSON.parse\r",
									"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
									"//---------------- set globals Other --------------//\r",
									"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
									"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
									"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
									"//set global variable to kbn-versio \"7.5.1\"\r",
									"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Signin_ --------------//\r",
									"//set global variable to x_ais_OrderRef \"Signin_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreatePartner --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
									"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
									"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
									"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreateAccount --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
									"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
									"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Thing --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThing\", HeaderList.Thing.x_ais_OrderRef_CreateThing);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThing\", HeaderList.Thing.x_ais_OrderDesc_CreateThing);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThing\", HeaderList.Thing.x_ais_OrderRef_RemoveThing);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThing\", HeaderList.Thing.x_ais_OrderDesc_RemoveThing);\r",
									"//set global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_RemoveThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_RemoveThingStateInfo);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals AsgardHTTP --------------//\r",
									"//set global variable to x_ais_OrderRef \"RegisHTTP_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RegisHTTP\", HeaderList.AsgardHTTP.x_ais_OrderRef_RegisHTTP);\r",
									"//set global variable to x_ais_OrderDesc \"Register Thing in MG\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RegisHTTP\", HeaderList.AsgardHTTP.x_ais_OrderDesc_RegisHTTP);\r",
									"//set global variable to x_ais_OrderRef \"ReportHTTP_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ReportHTTP\", HeaderList.AsgardHTTP.x_ais_OrderRef_ReportHTTP);\r",
									"//set global variable to x_ais_OrderRef \"ReportHTTPfail_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ReportHTTP_fail\", HeaderList.AsgardHTTP.x_ais_OrderRef_ReportHTTP_fail);\r",
									"//set global variable to x_ais_OrderDesc \"Report Data to MG\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_ReportHTTP\", HeaderList.AsgardHTTP.x_ais_OrderDesc_ReportHTTP);\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"SignInProcess is Success\"\r",
									"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
									"//get global variable to resultDescription \"CreatePartner is Success\"\r",
									"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
									"//get global variable to resultDescription \"CreateAccount is Success\"\r",
									"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
									"//get global variable to resultDescription \"CreateThing is Success\"\r",
									"var resultDescriptionCreateThing = pm.globals.get(\"resultDescriptionCreateThing\");\r",
									"//get global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"var resultDescriptionCreateThingStateInfo = pm.globals.get(\"resultDescriptionCreateThingStateInfo\");\r",
									"//get global variable to resultDescription \"Register is Success\"\r",
									"var resultDescriptionRegisterIsSuccess = pm.globals.get(\"resultDescriptionRegisterIsSuccess\");\r",
									"//get global variable to resultDescription \"The requested operation was successfully.\"\r",
									"var resultDescriptionTheRequestedOperationWasSuccessfully = pm.globals.get(\"resultDescriptionTheRequestedOperationWasSuccessfully\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- urlRouteList --------------//\r",
									"//set variable to urlRouteList JSON.parse\r",
									"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
									"//---------------- set url Create --------------//\r",
									"//set global variable to url \"/api/v1/auth/signin\"\r",
									"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
									"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
									"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"pm.globals.set(\"urlThingCreateThing\", urlRouteList.Thing.urlThingCreateThing);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"pm.globals.set(\"urlThingCreateThingStateInfo\", urlRouteList.Thing.urlThingCreateThingStateInfo);\r",
									"//set global variable to url \"/api/register/sim/v1\"\r",
									"pm.globals.set(\"urlAsgardHTTPeSimRegister\", urlRouteList.AsgardHTTPeSim.urlAsgardHTTPeSimRegister);\r",
									"//set global variable to url \"/api/report/sim/v1\"\r",
									"pm.globals.set(\"urlAsgardHTTPeSimReport\", urlRouteList.AsgardHTTPeSim.urlAsgardHTTPeSimReport);\r",
									"//---------------- get url Create --------------//\r",
									"//get global variable to url \"/api/v1/auth/signin\"\r",
									"var urlSignin = pm.globals.get(\"urlSignin\");\r",
									"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
									"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"var urlThingCreateThing = pm.globals.get(\"urlThingCreateThing\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"var urlThingCreateThingStateInfo = pm.globals.get(\"urlThingCreateThingStateInfo\");\r",
									"//get global variable to url \"/api/register/sim/v1\"\r",
									"var urlAsgardHTTPeSimRegister = pm.globals.get(\"urlAsgardHTTPeSimRegister\");\r",
									"//get global variable to url \"/api/report/sim/v1\"\r",
									"var urlAsgardHTTPeSimReport = pm.globals.get(\"urlAsgardHTTPeSimReport\");\r",
									"//---------------- set url Remove --------------//\r",
									"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
									"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"pm.globals.set(\"urlThingRemoveThing\", urlRouteList.Thing.urlThingRemoveThing);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"pm.globals.set(\"urlThingRemoveThingStateInfo\", urlRouteList.Thing.urlThingRemoveThingStateInfo);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Signin_ --------------//\r",
									"//get global variable to x_ais_OrderRef \"Signin_\"\r",
									"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"var x_ais_OrderRef_CreateThing = pm.globals.get(\"x_ais_OrderRef_CreateThing\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"var x_ais_OrderDesc_CreateThing = pm.globals.get(\"x_ais_OrderDesc_CreateThing\");\r",
									"//get global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"var x_ais_OrderRef_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderRef_CreateThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"var x_ais_OrderDesc_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_CreateThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals AsgardHTTP --------------//\r",
									"//get global variable to x_ais_OrderRef \"RegisHTTP_\"\r",
									"var x_ais_OrderRef_RegisHTTP = pm.globals.get(\"x_ais_OrderRef_RegisHTTP\");\r",
									"//get global variable to x_ais_OrderDesc \"Register Thing in MG\"\r",
									"var x_ais_OrderDesc_RegisHTTP = pm.globals.get(\"x_ais_OrderDesc_RegisHTTP\");\r",
									"//------------------------------------------------------------//\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// Signin get token\r",
									"Signin = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSignin = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_Signin + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_UserAuthentication,\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestSignin = {\r",
									"            mode: 'raw',\r",
									"            raw:\r",
									"                JSON.stringify({\r",
									"                    username: Username,\r",
									"                    password: Password\r",
									"                })\r",
									"        };\r",
									"\r",
									"        let optionsSignin = {\r",
									"            url: url + provisioningapis + urlSignin,\r",
									"            method: 'POST',\r",
									"            header: headersOptSignin,\r",
									"            body: httpRequestSignin\r",
									"        };\r",
									"        // console.log('request Signin');\r",
									"        let response = await reqPromise(optionsSignin);\r",
									"        let jsonDataSignin = await response.json();\r",
									"\r",
									"        // setAccessToken\r",
									"        await pm.environment.set(\"AccessToken\", jsonDataSignin.AccessToken);\r",
									"\r",
									"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('Signin : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // SignInProcess is Success\r",
									"        pm.test('Signin : OperationStatus Description is ' + '\"' + resultDescriptionSuccessSignIn + '\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
									"        });\r",
									"\r",
									"        //set random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //set PartnerName\r",
									"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
									"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
									"        //set MerchantContact\r",
									"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
									"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
									"        // set CPID\r",
									"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
									"        pm.environment.set(\"CPID\", CPIDValue)\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreatePartner\r",
									"CreatePartner = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreatePartner = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreatePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreatePartner,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreatePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
									"                \"PartnerType\": [\r",
									"                    \"Supplier\",\r",
									"                    \"Customer\"\r",
									"                ],\r",
									"                \"PartnerDetail\": {\r",
									"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
									"                    \"CPID\": pm.environment.get(\"CPID\")\r",
									"                },\r",
									"                \"Property\": {\r",
									"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreatePartner = {\r",
									"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreatePartner,\r",
									"            body: httpRequestCreatePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsCreatePartner);\r",
									"        let jsonDataCreatePartner = await response.json();\r",
									"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
									"\r",
									"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreatePartner : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreatePartner is Success\r",
									"        pm.test('CreatePartner : OperationStatus Description is ' + '\"' + resultDescriptionCreatePartner + '\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
									"        });\r",
									"\r",
									"        //GetResponse_PartnerId\r",
									"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
									"\r",
									"        //Accountname\r",
									"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
									"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateAccount\r",
									"CreateAccount = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateAccount = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateAccount,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreateAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateAccount = {\r",
									"            url: url + provisioningapis + urlAccountCreateAccount,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateAccount,\r",
									"            body: httpRequestCreateAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateAccount');\r",
									"        let response = await reqPromise(optionsCreateAccount);\r",
									"        let jsonDataCreateAccount = await response.json();\r",
									"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
									"\r",
									"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateAccount : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateAccount is Success\r",
									"        pm.test('CreateAccount : OperationStatus Description is ' + '\"' + resultDescriptionCreateAccount + '\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
									"        });\r",
									"        // GetResponse_AccountName\r",
									"        pm.environment.set(\"GetResponse_AccountName\", jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
									"        // GetResponse_AccountId\r",
									"        pm.environment.set(\"GetResponse_AccountId\", jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
									"        // random_IM\r",
									"        pm.environment.set(\"random_IM\", _.random(10000000, 99999999) + \" \" + _.random(1000000, 9999999))\r",
									"        // random_ICCID\r",
									"        pm.environment.set(\"random_ICCID\", _.random(1000000, 9999999) + \" \" + _.random(100000, 999999))\r",
									"        // random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //ThingName\r",
									"        let thingNameValue = fieldDataValue.Thing.ThingNameValue; // \"Sensor_TestThingName\"\r",
									"        pm.environment.set(\"ThingName\", thingNameValue + pm.environment.get(\"random_number\"))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThing\r",
									"CreateThing = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThing = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateThing + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateThing,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey': pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreateThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingName\": pm.environment.get(\"ThingName\"),\r",
									"                \"IMEI\": pm.environment.get(\"random_IM\"),\r",
									"                \"IMSI\": pm.environment.get(\"random_IM\"),\r",
									"                \"ICCID\": pm.environment.get(\"random_ICCID\"),\r",
									"                \"RouteUrl\": fieldDataValue.Thing.RouteUrlValue , //[\"http://10.12.3.4:2019/api/information/AddInformation\"]\r",
									"                \"RouteInfo\": {\r",
									"                    \"MIMO_ID\": fieldDataValue.Thing.RouteInfoMIMOIDValue , //\"606edada\"\r",
									"                    \"MIMO_SerialNo\": fieldDataValue.Thing.RouteInfoMIMOSerialNoValue //5466758878\r",
									"                },\r",
									"                \"RouteFlag\": {\r",
									"                    \"ThingName\": fieldDataValue.Thing.RouteFlagThingNameValue , //true\r",
									"                    \"ThingToken\": fieldDataValue.Thing.RouteFlagThingTokenValue, //true\r",
									"                    \"IMEI\": fieldDataValue.Thing.RouteFlagIMEIValue, //true\r",
									"                    \"ICCID\": fieldDataValue.Thing.RouteFlagICCIDValue, //true\r",
									"                    \"RouteInfo\": fieldDataValue.Thing.RouteFlagRouteInfoValue //true\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateThing = {\r",
									"            url: url + provisioningapis + urlThingCreateThing,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThing,\r",
									"            body: httpRequestCreateThing\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThing');\r",
									"        let response = await reqPromise(optionsCreateThing);\r",
									"        let jsonDataCreateThing = await response.json();\r",
									"        // console.log('jsonDataCreateThing',jsonDataCreateThing)\r",
									"\r",
									"        let operationStatusCreateThing = await jsonDataCreateThing.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateThing : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateThing : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateThing is Success\r",
									"        pm.test('CreateThing : OperationStatus Description is ' + '\"' + resultDescriptionCreateThing + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Description', resultDescriptionCreateThing);\r",
									"        });\r",
									"\r",
									"        pm.environment.set(\"GetResponse_ThingID\", jsonDataCreateThing.ThingInfo.ThingId)\r",
									"        pm.environment.set(\"GetResponse_IMSI\", jsonDataCreateThing.ThingInfo.IMSI)\r",
									"        \r",
									"        let keys = pm.environment.get(\"GetResponse_IMSI\") + \":\" + pm.environment.get(\"IpAddress\");\r",
									"        // console.log(\"keys\", keys);\r",
									"        let encodedKeys = CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(keys));\r",
									"        pm.environment.set(\"encodedKeys_Authorization_Register\", encodedKeys);\r",
									"\r",
									"        //Get Random Sensor \r",
									"        pm.environment.set(\"random_Sensor\", _.random(100, 999))\r",
									"\r",
									"        //Get Random Sensor AsgardHTTP\r",
									"        pm.environment.set(\"random_Sensor_AsgardHTTP\", _.random(100, 999))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThingStateInfo\r",
									"CreateThingStateInfo = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThingStateInfo = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateThingStateInfo,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey': pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        // {\"Temp\" : pm.environment.get(\"random_Sensor\")}\r",
									"        let sensorValue = {};\r",
									"        sensorValue[fieldDataValue.CreateThingStateInfo.SensorKey] = pm.environment.get(\"random_Sensor\");\r",
									"        // console.log('sensorValue',sensorValue);\r",
									"        \r",
									"        let httpRequestCreateThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": [\r",
									"                    pm.environment.get(\"GetResponse_ThingID\")\r",
									"                ],\r",
									"                \"Type\": fieldDataValue.CreateThingStateInfo.Type_Report,\r",
									"                \"Sensor\": sensorValue\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingCreateThingStateInfo,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThingStateInfo,\r",
									"            body: httpRequestCreateThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThingStateInfo');\r",
									"        let response = await reqPromise(optionsCreateThingStateInfo);\r",
									"        let jsonDataCreateThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataCreateThingStateInfo',jsonDataCreateThingStateInfo)\r",
									"\r",
									"        let operationStatusCreateThingStateInfo = await jsonDataCreateThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"CreateThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //CreateThingStateInfo is Success\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Description is ' + '\"' + resultDescriptionCreateThingStateInfo + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Description', resultDescriptionCreateThingStateInfo);\r",
									"        });\r",
									"\r",
									"       \r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// AsgardHTTPeSimRegister\r",
									"AsgardHTTPeSimRegister = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptAsgardHTTPeSimRegister = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_RegisHTTP + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_RegisHTTP,\r",
									"            'Authorization': Basic + ' ' + pm.environment.get(\"encodedKeys_Authorization_Register\")\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestAsgardHTTPeSimRegister = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({})\r",
									"        };\r",
									"\r",
									"        let optionsAsgardHTTPeSimRegister = {\r",
									"            url: url + httpapis + urlAsgardHTTPeSimRegister,\r",
									"            method: 'POST',\r",
									"            header: headersOptAsgardHTTPeSimRegister,\r",
									"            body: httpRequestAsgardHTTPeSimRegister\r",
									"        };\r",
									"\r",
									"        // console.log('request AsgardHTTPEsimRegister');\r",
									"        let response = await reqPromise(optionsAsgardHTTPeSimRegister);\r",
									"        let jsonDataAsgardHTTPeSimRegister = await response.json();\r",
									"        // console.log('jsonDataCreateThingStateInfo',jsonDataAsgardHTTPeSimRegister)\r",
									"        let operationStatusAsgardHTTPeSimRegister = await jsonDataAsgardHTTPeSimRegister.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"Asgard HTTP(eSim) Register : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('Asgard HTTP(eSim) Register : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusAsgardHTTPeSimRegister).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"\r",
									"        // The requested operation was successfully.\r",
									"        pm.test('Asgard HTTP(eSim) Register : OperationStatus DeveloperMessage is ' + '\"' + resultDescriptionTheRequestedOperationWasSuccessfully + '\"', function () {\r",
									"            pm.expect(operationStatusAsgardHTTPeSimRegister).to.have.property('DeveloperMessage', resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"        });\r",
									"\r",
									"        await pm.environment.set(\"GetResponse_ThingToken\", jsonDataAsgardHTTPeSimRegister.ThingToken)\r",
									"        let keys2 = await fieldDataValue.AsgardHTTP.Value_AsgardHTTPeSim_Report_TST_F1_0_1_005_Username_Error + \":\" + fieldDataValue.AsgardHTTP.Value_AsgardHTTPeSim_Report_TST_F1_0_1_005_Password_Error; \r",
									"        let encodedKeys2 = await CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(keys2));\r",
									"        pm.environment.set(\"encodedKeys_Authorization_Report\", encodedKeys2)\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"Signin();\r",
									"setTimeout(async function(){await CreatePartner();}, 3000); \r",
									"setTimeout(async function(){await CreateAccount();}, 6000); \r",
									"setTimeout(async function(){await CreateThing();}, 8000); \r",
									"setTimeout(async function(){await CreateThingStateInfo();}, 9000); \r",
									"setTimeout(async function(){await AsgardHTTPeSimRegister();}, 10000); \r",
									"setTimeout(async function(){},20000); //for wait value encodedKeys_Authorization_Report"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-ais-UserName",
								"type": "text",
								"value": "{{x_ais_UserName_AisPartner}}"
							},
							{
								"key": "x-ais-OrderRef",
								"value": "{{x_ais_OrderRef_ReportHTTP_fail}}{{current_timestamp}}"
							},
							{
								"key": "x-ais-OrderDesc",
								"type": "text",
								"value": "{{x_ais_OrderDesc_ReportHTTP}}"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{Basic}} {{encodedKeys_Authorization_Report}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Payload\": {\r\n        \"{{SensorKey_AsgardHTTP}}\" : \"{{random_Sensor_AsgardHTTP}}\", \r\n        \"Timestamp\": \"{{timestamp}}\"\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{url}}{{httpapis}}/api/report/sim/v1",
							"host": [
								"{{url}}{{httpapis}}"
							],
							"path": [
								"api",
								"report",
								"sim",
								"v1"
							]
						},
						"description": "Type:Desire"
					},
					"response": []
				},
				{
					"name": "AsgardHTTPeSimReport_TST_F1_0_2_006_Error_ThingStatusIdle",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"var controlapis = pm.environment.get(\"controlapis\");\r",
									"var httpapis = pm.environment.get(\"httpapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var Basic = pm.environment.get(\"Basic\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to xAisOrderRef \"RemoveThing_\"\r",
									"var x_ais_OrderRef_RemoveThing = pm.globals.get(\"x_ais_OrderRef_RemoveThing\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"var x_ais_OrderDesc_RemoveThing = pm.globals.get(\"x_ais_OrderDesc_RemoveThing\");\r",
									"//get global variable to xAisOrderRef \"RemoveThingStateInfo_\"\r",
									"var x_ais_OrderRef_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderRef_RemoveThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThingStateInfo\"\r",
									"var x_ais_OrderDesc_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_RemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Group --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveGroup_\"\r",
									"var x_ais_OrderRef_RemoveGroup = pm.globals.get(\"x_ais_OrderRef_RemoveGroup\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveGroup\"\r",
									"var x_ais_OrderDesc_RemoveGroup = pm.globals.get(\"x_ais_OrderDesc_RemoveGroup\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals AsgardHTTP --------------//\r",
									"//get global variable to x_ais_OrderRef \"ReportHTTP_\"\r",
									"var x_ais_OrderRef_ReportHTTP = pm.globals.get(\"x_ais_OrderRef_ReportHTTP\");\r",
									"//get global variable to x_ais_OrderRef \"ReportHTTPfail_\"\r",
									"var x_ais_OrderRef_ReportHTTP_fail = pm.globals.get(\"x_ais_OrderRef_ReportHTTP_fail\");\r",
									"//get global variable to x_ais_OrderDesc \"Report Data to MG\"\r",
									"var x_ais_OrderDesc_ReportHTTP = pm.globals.get(\"x_ais_OrderDesc_ReportHTTP\");\r",
									"//------------------------------------------------------------//\r",
									"\r",
									"//---------------- get url Remove --------------//\r",
									"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
									"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"var urlThingRemoveThing = pm.globals.get(\"urlThingRemoveThing\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"var urlThingRemoveThingStateInfo = pm.globals.get(\"urlThingRemoveThingStateInfo\");\r",
									"//get global variable to url \"/api/v1/Group/RemoveGroup\"\r",
									"var urlGroupRemoveGroup = pm.globals.get(\"urlGroupRemoveGroup\");\r",
									"\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"RemovePartner is Success\"\r",
									"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
									"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
									"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
									"//get global variable to resultDescription \"RemoveThing is Success\"\r",
									"var resultDescriptionRemoveThing = pm.globals.get(\"resultDescriptionRemoveThing\");\r",
									"//get global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"var resultDescriptionRemoveThingStateInfo = pm.globals.get(\"resultDescriptionRemoveThingStateInfo\");\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"//get global variable to statusCode 404\r",
									"var statusCodeNotFound = pm.globals.get(\"statusCodeNotFound\");\r",
									"//get global variable to resultCode \"40400\"\r",
									"var resultCodeNotFound = pm.globals.get(\"resultCodeNotFound\");\r",
									"//get global variable to resultDescription \"The requested operation could not be found.\"\r",
									"var resultDescriptionTheRequestedOperationCouldNotBeFound = pm.globals.get(\"resultDescriptionTheRequestedOperationCouldNotBeFound\");\r",
									"\r",
									"pm.test(\"Asgard HTTP(eSim) Report : Status code is \" + statusCodeNotFound, function () {\r",
									"    pm.response.to.have.status(statusCodeNotFound);\r",
									"});\r",
									"\r",
									"pm.test('Asgard HTTP(eSim) Report : operationStatus code is '+'\"'+ resultCodeNotFound +'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeNotFound);\r",
									"});\r",
									"\r",
									"pm.test('Asgard HTTP(eSim) Report : operationStatus DeveloperMessage is '+'\"'+ resultDescriptionTheRequestedOperationCouldNotBeFound+'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheRequestedOperationCouldNotBeFound);\r",
									"});\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// RemovePartner\r",
									" RemovePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemovePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemovePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemovePartner = {\r",
									"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemovePartner,\r",
									"            body: httpRequestRemovePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request RemovePartner');\r",
									"        let response = await reqPromise(optionsRemovePartner);\r",
									"        let jsonDataRemovePartner = await response.json();\r",
									"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
									"    \r",
									"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemovePartner is Success\r",
									"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// // RemoveAccount\r",
									"//  RemoveAccount = async () =>  {\r",
									"//     try {\r",
									"//         // header\r",
									"//         let headersOptRemoveAccount = {\r",
									"//             'Content-Type':ContentType_ApplicationJson,\r",
									"//             'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
									"//             'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
									"//             'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"//             'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"//             'Accept':Accept\r",
									"//         };\r",
									"        \r",
									"//         // body\r",
									"//         let httpRequestRemoveAccount = {\r",
									"//             mode: 'raw',\r",
									"//             raw: JSON.stringify({\r",
									"//                 \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"//                 \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
									"//             })\r",
									"//         };\r",
									"        \r",
									"//         let optionsRemoveAccount = {\r",
									"//             url: url + provisioningapis + urlAccountRemoveAccount,\r",
									"//             method: 'DELETE',\r",
									"//             header: headersOptRemoveAccount,\r",
									"//             body: httpRequestRemoveAccount\r",
									"//         };\r",
									"\r",
									"//         // console.log('request RemoveAccount');\r",
									"//         let response = await reqPromise(optionsRemoveAccount);\r",
									"//         let jsonDataRemoveAccount = await response.json();\r",
									"//         // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
									"    \r",
									"//         let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
									"\r",
									"//         //200\r",
									"//         pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
									"//             pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"//         });\r",
									"//         //20000\r",
									"//         pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"//             pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
									"//         });\r",
									"//         //RemoveAccount is Success\r",
									"//         pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
									"//             pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
									"//         });\r",
									"\r",
									"//     } catch (err) {\r",
									"//         console.log('err',err);\r",
									"//     }\r",
									"// }\r",
									"\r",
									"// RemoveThing\r",
									" RemoveThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThing = {\r",
									"            url: url + provisioningapis + urlThingRemoveThing,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThing,\r",
									"            body: httpRequestRemoveThing\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveThing');\r",
									"        let response = await reqPromise(optionsRemoveThing);\r",
									"        let jsonDataRemoveThing = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThing)\r",
									"    \r",
									"        let operationStatusRemoveThing = await jsonDataRemoveThing.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThing : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThing : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThing is Success\r",
									"        pm.test('RemoveThing : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThing+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Description', resultDescriptionRemoveThing);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThingStateInfo\r",
									" RemoveThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"            \r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\"),\r",
									"                \"stateType\": fieldDataValue.CreateThingStateInfo.Type_Report, //Report\r",
									"                \"stateKey\": fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP //AA\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingRemoveThingStateInfo,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThingStateInfo,\r",
									"            body: httpRequestRemoveThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('response RemoveThingStateInfo');\r",
									"        let response = await reqPromise(optionsRemoveThingStateInfo);\r",
									"        let jsonDataRemoveThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThingStateInfo)\r",
									"    \r",
									"        let operationStatusRemoveThingStateInfo = await jsonDataRemoveThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThingStateInfo is Success\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThingStateInfo+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Description', resultDescriptionRemoveThingStateInfo);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"//---------------- LogDefaultValue --------------//\r",
									"//set variable to LogDefaultValue JSON.parse\r",
									"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
									"// console.log('LogDefaultValue',LogDefaultValue);\r",
									"//---------------- set globals Other --------------//\r",
									"var SearchLog = LogDefaultValue.SearchLog;\r",
									"// console.log('SearchLog',SearchLog);\r",
									"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
									"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
									"var kbn_version = SearchLog.header.kbn_version;\r",
									"var authorization = SearchLog.header.Authorization;\r",
									"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
									"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
									"var namespace = LogDefaultValue.Other.namespace;\r",
									"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
									"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
									"var header_x_ais_username = LogDefaultValue.Other.header_x_ais_username;\r",
									"var methodPost = LogDefaultValue.Other.methodPost;\r",
									"\r",
									"// Detail\r",
									"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
									"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
									"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
									"\r",
									"// Summary\r",
									"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
									"var identitySummary = \"\";\r",
									"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
									"\r",
									"// Asgard.Http.APIs\r",
									"var applicationName = LogDefaultValue.AsgardHTTP.applicationName;\r",
									"var cmdName = LogDefaultValue.AsgardHTTP.cmdNameReport;\r",
									"var endPointNameRabbitMQ = LogDefaultValue.AsgardHTTP.endPointNameRabbitMQ;\r",
									"var containerId = LogDefaultValue.AsgardHTTP.containerId;\r",
									"var requestObjectUrlStaging = LogDefaultValue.AsgardHTTP.requestObjectUrlReportMgStaging;\r",
									"var urlReport  = LogDefaultValue.AsgardHTTP.urlReport;\r",
									"\r",
									"// Check CDR (Summary Log) and EDR (Detail Log)\r",
									"SearchLogFindTid = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSearchLogFindTid = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = x_ais_OrderRef_ReportHTTP_fail + current_timestamp; \r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestSearchLogFindTid = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"phrase\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"\r",
									"        let optionsSearchLogFindTid = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptSearchLogFindTid,\r",
									"            body: httpRequestSearchLogFindTid\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsSearchLogFindTid);\r",
									"        let jsonDataSearchLogFindTid = await response.json();\r",
									"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
									"        console.log('hits',hits)\r",
									"  \r",
									"        // find tid\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            // let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"        \r",
									"            // console.log('logType',logType)\r",
									"            //  console.log('applicationNameValue',applicationNameValue)\r",
									"            //  console.log('applicationName',applicationName)\r",
									"            if(applicationNameValue == applicationName){\r",
									"                let tid = hits[i]._source.cauldron.tid;\r",
									"                pm.environment.set(\"tid\", tid);\r",
									"                break;\r",
									"           }\r",
									"        }\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"CheckLog = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCheckLog = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = pm.environment.get(\"tid\");\r",
									"\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"         console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestCheckLog = {\r",
									"            mode: 'raw',\r",
									"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"phrase\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"        let optionsCheckLog = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptCheckLog,\r",
									"            body: httpRequestCheckLog\r",
									"        }; \r",
									"        let response = await reqPromise(optionsCheckLog);\r",
									"        let jsonDataCheckLog = await response.json();\r",
									"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
									"        \r",
									"        // //200\r",
									"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });     \r",
									"        \r",
									"        let hits = jsonDataCheckLog.hits.hits\r",
									"         console.log('hits',hits)\r",
									"  \r",
									"        // find logType\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            //  let logType = hits[i]._source.cauldron.logType\r",
									"            let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"           \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            \r",
									"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
									"            // console.log('resultDataLog',resultDataLog)\r",
									"\r",
									"            let tidControl = x_ais_OrderRef_ReportHTTP_fail  + current_timestamp;\r",
									"            // console.log(tidControl);\r",
									"            if(applicationNameValue == applicationName){\r",
									"                 \r",
									"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and Asgard.Http.APIs\r",
									"                    pm.test(\"Check Summary Log : Asgard_HTTP(eSim) Report\" , function () {\r",
									"                        console.log(\"======== Check Summary Log ( Expected = Actual) [Asgard_HTTP(eSim) Report] ==================\");\r",
									"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
									"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
									"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeNotFound);\r",
									"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionTheRequestedOperationCouldNotBeFound);\r",
									"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
									"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"identity : \" + JSON.stringify(resultDataLog.identity) + \" = \" + JSON.stringify(identitySummary));\r",
									"                        // console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
									"\r",
									"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
									"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
									"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeNotFound); \r",
									"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionTheRequestedOperationCouldNotBeFound); \r",
									"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
									"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
									"                        // pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
									"\r",
									"                        // check custom\r",
									"                        // \\\"custom\\\":{ \\\"endPointSummary\\\":[ { \\\"no\\\":\\\"1\\\", \\\"endPointName\\\":\\\"db.ThingsCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:Inquiry was Success\\\", \\\"processTime\\\":0.0008 } ] }\r",
									"\r",
									"                        let custom = resultDataLog.custom.endPointSummary;\r",
									"                        let countCustom = custom.length;\r",
									"                       \r",
									"                        // [\"db.ThingsCollection\"]\r",
									"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_Asgard_HTTP_eSim_Report_002_004_005_006;\r",
									"                        // [\"20000:Inquiry was Success\"]\r",
									"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_Asgard_HTTP_eSim_Report_002_004_005_006;\r",
									"                        let countCustomStep = dataEndPointName.length;\r",
									"\r",
									"                        console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep);\r",
									"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
									"                        \r",
									"                        for(let i=0;i<countCustomStep;i++){\r",
									"                            let no = custom[i].no;\r",
									"                            let valueEndPointName = custom[i].endPointName;\r",
									"                            let valueResponseStatus = custom[i].responseStatus;\r",
									"                            // console.log(\"i\",i);\r",
									"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
									"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
									"\r",
									"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString());\r",
									"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i]);\r",
									"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i]);\r",
									"\r",
									"                            pm.expect(no).to.eql((i+1).toString()); \r",
									"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
									"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]); \r",
									"                        }\r",
									"                    }); \r",
									"                }\r",
									"\r",
									"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and Asgard.Http.APIs\r",
									"\r",
									"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
									"                    // console.log('endPointNameValue ',endPointNameValue)\r",
									"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [Asgard_HTTP(eSim) Report]\", function () {\r",
									"                        console.log(\"======== Check Detail Log ( Expected = Actual) [Asgard_HTTP(eSim) Report] ==================\");\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
									"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
									"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
									"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.custom1.activityLog.processTime + \" = \" + resultDataLog.custom1.activityLog.processTime);\r",
									"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
									"\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
									"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
									"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
									"\r",
									"                        let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
									"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
									"                        let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
									"                            // console.log('jsonParseResponseObject',jsonParseResponseObject); \r",
									"                        let url = urlReport; \r",
									"                        let x_ais_orderref = x_ais_OrderRef_ReportHTTP_fail + current_timestamp;\r",
									"                        let x_ais_orderdesc = x_ais_OrderDesc_ReportHTTP;\r",
									"                        let x_ais_userName = x_ais_UserName_AisPartner;\r",
									"                        let authorization = Basic + ' ' + pm.environment.get(\"encodedKeys_Authorization_Report\");\r",
									"                        let SensorKey = fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP;\r",
									"                        let sensor = pm.environment.get(\"random_Sensor_AsgardHTTP\");\r",
									"                        let timestamp = pm.environment.get(\"timestamp\");\r",
									"\r",
									"                        if( endPointNameValue == undefined){\r",
									"                            // check requestObject\r",
									"                            // \"requestObject\":\"{\\\"url\\\":\\\"/api/report/sim/v1\\\",\\\"method\\\":\\\"POST\\\",\\\"headers\\\":{\\\"Cache-Control\\\":\\\"no-cache\\\",\\\"Content-Type\\\":\\\"application/json\\\",\\\"Accept\\\":\\\"*/*\\\",\\\"Accept-Encoding\\\":\\\"gzip,deflate,br\\\",\\\"Authorization\\\":\\\"Basic OWM0ZDgzZjUtNjNhNS00OGJlLWE1MzMtMmYwMzI3NTU3YWFjeHg6MS4yLjMuNA==\\\",\\\"Host\\\":\\\"mg-staging.sandais.com\\\",\\\"User-Agent\\\":\\\"PostmanRuntime/7.26.8\\\",\\\"Content-Length\\\":\\\"89\\\",\\\"x-real-ip\\\":\\\"58.8.214.174\\\",\\\"x-forwarded-for\\\":\\\"58.8.214.174\\\",\\\"x-forwarded-proto\\\":\\\"https\\\",\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"ReportHTTPfail_202102151702830\\\",\\\"x-ais-orderdesc\\\":\\\"Report Data to MG\\\",\\\"postman-token\\\":\\\"933da003-bcde-4576-95f5-d2ee8667187a\\\",\\\"x-request-id\\\":\\\"018277e8-4da1-4938-b53e-a5b5bcc4b3a9\\\",\\\"x-b3-traceid\\\":\\\"3070c97568f63ed143ddfff065b7a837\\\",\\\"x-b3-spanid\\\":\\\"43ddfff065b7a837\\\",\\\"x-b3-sampled\\\":\\\"0\\\",\\\"x-ais-SessionId\\\":\\\"1613384652608\\\"},\\\"queryString\\\":{},\\\"routeParamteters\\\":{},\\\"body\\\":{\\\"Payload\\\":{\\\"AA\\\":\\\"856\\\",\\\"Timestamp\\\":\\\"2020-12-31T03:03:18+07:00\\\"}}}\"\r",
									"\r",
									"                            // \\\"requestObject\\\":\\\"{ \\\\\\\"url\\\\\\\":\\\\\\\"/api/report/sim/v1\\\\\\\", \\\\\\\"method\\\\\\\":\\\\\\\"POST\\\\\\\", \\\\\\\"headers\\\\\\\":{ \\\\\\\"Cache-Control\\\\\\\":\\\\\\\"no-cache\\\\\\\", \\\\\\\"Content-Type\\\\\\\":\\\\\\\"application/json\\\\\\\", \\\\\\\"Accept\\\\\\\":\\\\\\\"*/*\\\\\\\", \\\\\\\"Accept-Encoding\\\\\\\":\\\\\\\"gzip, deflate, br\\\\\\\", \\\\\\\"Authorization\\\\\\\":\\\\\\\"Basic MGM4YzVjOGYtYzViNS00MWRiLTlmNjktNjAwMzYyOTIwMWM3OjEuMi4zLjQ=\\\\\\\", \\\\\\\"Host\\\\\\\":\\\\\\\"mg-staging.sandais.com\\\\\\\", \\\\\\\"User-Agent\\\\\\\":\\\\\\\"PostmanRuntime/7.26.8\\\\\\\", \\\\\\\"Content-Length\\\\\\\":\\\\\\\"103\\\\\\\", \\\\\\\"x-real-ip\\\\\\\":\\\\\\\"182.232.183.255\\\\\\\", \\\\\\\"x-forwarded-for\\\\\\\":\\\\\\\"182.232.183.255\\\\\\\", \\\\\\\"x-forwarded-proto\\\\\\\":\\\\\\\"https\\\\\\\", \\\\\\\"x-ais-username\\\\\\\":\\\\\\\"AisPartner\\\\\\\", \\\\\\\"x-ais-orderref\\\\\\\":\\\\\\\"ReportHTTPfail_202105112005856\\\\\\\", \\\\\\\"x-ais-orderdesc\\\\\\\":\\\\\\\"Report Data to MG\\\\\\\", \\\\\\\"postman-token\\\\\\\":\\\\\\\"ed6f0938-b084-4049-8e35-bdb40b950093\\\\\\\", \\\\\\\"x-request-id\\\\\\\":\\\\\\\"4e30d238-a706-4f1d-a1da-07ef2dbbe496\\\\\\\", \\\\\\\"x-b3-traceid\\\\\\\":\\\\\\\"bb99d0a6c6a6d8299a751541f4dfd470\\\\\\\", \\\\\\\"x-b3-spanid\\\\\\\":\\\\\\\"9a751541f4dfd470\\\\\\\", \\\\\\\"x-b3-sampled\\\\\\\":\\\\\\\"0\\\\\\\", \\\\\\\"x-ais-SessionId\\\\\\\":\\\\\\\"1620739359830\\\\\\\" }, \\\\\\\"queryString\\\\\\\":{ }, \\\\\\\"routeParamteters\\\\\\\":{ }, \\\\\\\"body\\\\\\\":{ \\\\\\\"Payload\\\\\\\":{ \\\\\\\"AA\\\\\\\":\\\\\\\"462\\\\\\\", \\\\\\\"Timestamp\\\\\\\":\\\\\\\"2020-12-31T03:03:18+07:00\\\\\\\" } } }\\\"\r",
									"\r",
									"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
									"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
									"                            console.log(\"headers.x_ais_userName : \" + jsonParseRequestObject.headers[header_x_ais_username] + \" = \" + x_ais_userName);\r",
									"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
									"                            console.log(\"headers.Authorization : \" + jsonParseRequestObject.headers.Authorization + \" = \" + authorization);\r",
									"                            \r",
									"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
									"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_username]).to.eql(x_ais_userName);\r",
									"                            pm.expect(jsonParseRequestObject.headers.Authorization).to.eql(authorization);\r",
									"\r",
									"                            console.log(\"queryString : \" + JSON.stringify(jsonParseRequestObject.queryString) + \" = \" + JSON.stringify({}));\r",
									"                            console.log(\"routeParamteters : \" + JSON.stringify(jsonParseRequestObject.routeParamteters) + \" = \" + JSON.stringify({}));\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.queryString).to.eql({}); \r",
									"                            pm.expect(jsonParseRequestObject.routeParamteters).to.eql({}); \r",
									"\r",
									"                            console.log(\"resquest.body.Payload.\" + SensorKey +\" : \" + jsonParseRequestObject.body.Payload[SensorKey] + \" = \" + sensor.toString());\r",
									"                            console.log(\"resquest.body.Payload.Timestamp : \" + jsonParseRequestObject.body.Payload.Timestamp + \" = \" + timestamp);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.body.Payload[SensorKey]).to.eql(sensor.toString());\r",
									"                            pm.expect(jsonParseRequestObject.body.Payload.Timestamp).to.eql(timestamp); \r",
									"                           \r",
									"                            // check responseObject\r",
									"                            // responseObject: \"{\"OperationStatus\":{\"Code\":\"40400\",\"DeveloperMessage\":\"The requested operation could not be found.\"}}\"\r",
									"\r",
									"                            console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeNotFound);\r",
									"                            console.log(\"response.OperationStatus.DeveloperMessage : \" + jsonParseResponseObject.OperationStatus.DeveloperMessage + \" = \" + resultDescriptionTheRequestedOperationCouldNotBeFound);\r",
									"\r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeNotFound);  \r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheRequestedOperationCouldNotBeFound);  \r",
									"                        }\r",
									"               \r",
									"                    }); \r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"setTimeout(function(){SearchLogFindTid();}, 40000); \r",
									"setTimeout(function(){CheckLog();}, 60000); \r",
									"\r",
									"setTimeout(function(){RemovePartner();}, 70000);  \r",
									"\r",
									"setTimeout(function(){\r",
									"pm.environment.unset(\"current_timestamp\");\r",
									"pm.environment.unset(\"AccessToken\");\r",
									"pm.environment.unset(\"random_number\");\r",
									"pm.environment.unset(\"PartnerName\");\r",
									"pm.environment.unset(\"MerchantContact\");\r",
									"pm.environment.unset(\"CPID\");\r",
									"pm.environment.unset(\"GetResponse_PartnerId\");\r",
									"pm.environment.unset(\"AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountId\");\r",
									"pm.environment.unset(\"random_IM\");\r",
									"pm.environment.unset(\"random_ICCID\");\r",
									"pm.environment.unset(\"ThingName\");\r",
									"pm.environment.unset(\"GetResponse_ThingID\");\r",
									"pm.environment.unset(\"GetResponse_IMSI\");\r",
									"pm.environment.unset(\"encodedKeys_Authorization_Register\");\r",
									"pm.environment.unset(\"encodedKeys_Authorization_Report\");\r",
									"pm.environment.unset(\"random_Sensor\");\r",
									"pm.environment.unset(\"GetResponse_ThingToken\");\r",
									"pm.environment.unset(\"tid\");\r",
									"pm.environment.unset(\"SensorKey_AsgardHTTP\");\r",
									"pm.environment.unset(\"random_Sensor_AsgardHTTP\");\r",
									"pm.environment.unset(\"timestamp\");\r",
									"}, 105000);\r",
									"setTimeout(async function(){}, 110000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var Username = pm.environment.get(\"Username\");\r",
									"var Password = pm.environment.get(\"Password\");\r",
									"\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"var httpapis = pm.environment.get(\"httpapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"pm.environment.set(\"SensorKey_AsgardHTTP\",fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP)\r",
									"\r",
									"// Timestamp 2020-12-31T03:03:18+07:00\r",
									"var timestamp = fieldDataValue.AsgardHTTP.Value_AsgardHTTP_Report_Timestamp;\r",
									"// console.log('currentTmestamp',currentTmestamp);\r",
									"pm.environment.set(\"timestamp\", timestamp);\r",
									"\r",
									"//format YYYYMMDDHHMMSSS\r",
									"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
									"// console.log('currentTmestamp',currentTmestamp);\r",
									"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var Basic = pm.environment.get(\"Basic\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var x_ais_UserName_AisPartner = pm.environment.get(\"x_ais_UserName_AisPartner\");\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.environment.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- statusCodeList --------------//\r",
									"//set variable to statusCodeList JSON.parse\r",
									"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
									"//set global variable to statusCode 200\r",
									"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
									"//set global variable to statusCode 201\r",
									"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
									"//set global variable to statusCode 404\r",
									"pm.globals.set(\"statusCodeNotFound\", statusCodeList.statusCodeNotFound);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultCodeList --------------//\r",
									"//set variable to resultCodeList JSON.parse\r",
									"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
									"//set global variable to resultCode \"20000\"\r",
									"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
									"//set global variable to resultCode \"20100\"\r",
									"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
									"//set global variable to resultCode \"40400\"\r",
									"pm.globals.set(\"resultCodeNotFound\", resultCodeList.resultCodeNotFound);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionSuccessList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
									"//set global variable to resultDescription \"SignInProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
									"//set global variable to resultDescription \"CreatePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
									"//set global variable to resultDescription \"CreateAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
									"//set global variable to resultDescription \"CreateThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThing\", resultDescriptionSuccessList.resultDescriptionCreateThing);\r",
									"//set global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThingStateInfo\", resultDescriptionSuccessList.resultDescriptionCreateThingStateInfo);\r",
									"//set global variable to resultDescription \"RemovePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
									"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
									"//set global variable to resultDescription \"RemoveThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThing\", resultDescriptionSuccessList.resultDescriptionRemoveThing);\r",
									"//set global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThingStateInfo\", resultDescriptionSuccessList.resultDescriptionRemoveThingStateInfo);\r",
									"//set global variable to resultDescription \"Register is Success\"\r",
									"pm.globals.set(\"resultDescriptionRegisterIsSuccess\", resultDescriptionSuccessList.resultDescriptionRegisterIsSuccess);\r",
									"//set global variable to resultDescription \"ReportProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionReportProcessIsSuccess\", resultDescriptionSuccessList.resultDescriptionReportProcessIsSuccess);\r",
									"//set global variable to resultDescription \"The requested operation was successfully.\"\r",
									"pm.globals.set(\"resultDescriptionTheRequestedOperationWasSuccessfully\", resultDescriptionSuccessList.resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionErrorList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
									"//set global variable to resultDescription \"The requested operation could not be found.\"\r",
									"pm.globals.set(\"resultDescriptionTheRequestedOperationCouldNotBeFound\", resultDescriptionErrorList.resultDescriptionTheRequestedOperationCouldNotBeFound);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- HeaderList --------------//\r",
									"//set variable to HeaderList JSON.parse\r",
									"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
									"//---------------- set globals Other --------------//\r",
									"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
									"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
									"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
									"//set global variable to kbn-versio \"7.5.1\"\r",
									"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Signin_ --------------//\r",
									"//set global variable to x_ais_OrderRef \"Signin_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreatePartner --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
									"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
									"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
									"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreateAccount --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
									"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
									"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Thing --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThing\", HeaderList.Thing.x_ais_OrderRef_CreateThing);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThing\", HeaderList.Thing.x_ais_OrderDesc_CreateThing);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThing\", HeaderList.Thing.x_ais_OrderRef_RemoveThing);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThing\", HeaderList.Thing.x_ais_OrderDesc_RemoveThing);\r",
									"//set global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_RemoveThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_RemoveThingStateInfo);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals AsgardHTTP --------------//\r",
									"//set global variable to x_ais_OrderRef \"RegisHTTP_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RegisHTTP\", HeaderList.AsgardHTTP.x_ais_OrderRef_RegisHTTP);\r",
									"//set global variable to x_ais_OrderDesc \"Register Thing in MG\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RegisHTTP\", HeaderList.AsgardHTTP.x_ais_OrderDesc_RegisHTTP);\r",
									"//set global variable to x_ais_OrderRef \"ReportHTTP_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ReportHTTP\", HeaderList.AsgardHTTP.x_ais_OrderRef_ReportHTTP);\r",
									"//set global variable to x_ais_OrderRef \"ReportHTTPfail_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ReportHTTP_fail\", HeaderList.AsgardHTTP.x_ais_OrderRef_ReportHTTP_fail);\r",
									"//set global variable to x_ais_OrderDesc \"Report Data to MG\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_ReportHTTP\", HeaderList.AsgardHTTP.x_ais_OrderDesc_ReportHTTP);\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"SignInProcess is Success\"\r",
									"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
									"//get global variable to resultDescription \"CreatePartner is Success\"\r",
									"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
									"//get global variable to resultDescription \"CreateAccount is Success\"\r",
									"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
									"//get global variable to resultDescription \"CreateThing is Success\"\r",
									"var resultDescriptionCreateThing = pm.globals.get(\"resultDescriptionCreateThing\");\r",
									"//get global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"var resultDescriptionCreateThingStateInfo = pm.globals.get(\"resultDescriptionCreateThingStateInfo\");\r",
									"//get global variable to resultDescription \"Register is Success\"\r",
									"var resultDescriptionRegisterIsSuccess = pm.globals.get(\"resultDescriptionRegisterIsSuccess\");\r",
									"//get global variable to resultDescription \"The requested operation was successfully.\"\r",
									"var resultDescriptionTheRequestedOperationWasSuccessfully = pm.globals.get(\"resultDescriptionTheRequestedOperationWasSuccessfully\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- urlRouteList --------------//\r",
									"//set variable to urlRouteList JSON.parse\r",
									"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
									"//---------------- set url Create --------------//\r",
									"//set global variable to url \"/api/v1/auth/signin\"\r",
									"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
									"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
									"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"pm.globals.set(\"urlThingCreateThing\", urlRouteList.Thing.urlThingCreateThing);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"pm.globals.set(\"urlThingCreateThingStateInfo\", urlRouteList.Thing.urlThingCreateThingStateInfo);\r",
									"//set global variable to url \"/api/register/sim/v1\"\r",
									"pm.globals.set(\"urlAsgardHTTPeSimRegister\", urlRouteList.AsgardHTTPeSim.urlAsgardHTTPeSimRegister);\r",
									"//set global variable to url \"/api/report/sim/v1\"\r",
									"pm.globals.set(\"urlAsgardHTTPeSimReport\", urlRouteList.AsgardHTTPeSim.urlAsgardHTTPeSimReport);\r",
									"//---------------- get url Create --------------//\r",
									"//get global variable to url \"/api/v1/auth/signin\"\r",
									"var urlSignin = pm.globals.get(\"urlSignin\");\r",
									"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
									"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"var urlThingCreateThing = pm.globals.get(\"urlThingCreateThing\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"var urlThingCreateThingStateInfo = pm.globals.get(\"urlThingCreateThingStateInfo\");\r",
									"//get global variable to url \"/api/register/sim/v1\"\r",
									"var urlAsgardHTTPeSimRegister = pm.globals.get(\"urlAsgardHTTPeSimRegister\");\r",
									"//get global variable to url \"/api/report/sim/v1\"\r",
									"var urlAsgardHTTPeSimReport = pm.globals.get(\"urlAsgardHTTPeSimReport\");\r",
									"//---------------- set url Remove --------------//\r",
									"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
									"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"pm.globals.set(\"urlThingRemoveThing\", urlRouteList.Thing.urlThingRemoveThing);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"pm.globals.set(\"urlThingRemoveThingStateInfo\", urlRouteList.Thing.urlThingRemoveThingStateInfo);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Signin_ --------------//\r",
									"//get global variable to x_ais_OrderRef \"Signin_\"\r",
									"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"var x_ais_OrderRef_CreateThing = pm.globals.get(\"x_ais_OrderRef_CreateThing\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"var x_ais_OrderDesc_CreateThing = pm.globals.get(\"x_ais_OrderDesc_CreateThing\");\r",
									"//get global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"var x_ais_OrderRef_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderRef_CreateThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"var x_ais_OrderDesc_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_CreateThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals AsgardHTTP --------------//\r",
									"//get global variable to x_ais_OrderRef \"RegisHTTP_\"\r",
									"var x_ais_OrderRef_RegisHTTP = pm.globals.get(\"x_ais_OrderRef_RegisHTTP\");\r",
									"//get global variable to x_ais_OrderDesc \"Register Thing in MG\"\r",
									"var x_ais_OrderDesc_RegisHTTP = pm.globals.get(\"x_ais_OrderDesc_RegisHTTP\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get url Remove --------------//\r",
									"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
									"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
									"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// Signin get token\r",
									"Signin = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSignin = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_Signin + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_UserAuthentication,\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestSignin = {\r",
									"            mode: 'raw',\r",
									"            raw:\r",
									"                JSON.stringify({\r",
									"                    username: Username,\r",
									"                    password: Password\r",
									"                })\r",
									"        };\r",
									"\r",
									"        let optionsSignin = {\r",
									"            url: url + provisioningapis + urlSignin,\r",
									"            method: 'POST',\r",
									"            header: headersOptSignin,\r",
									"            body: httpRequestSignin\r",
									"        };\r",
									"        // console.log('request Signin');\r",
									"        let response = await reqPromise(optionsSignin);\r",
									"        let jsonDataSignin = await response.json();\r",
									"\r",
									"        // setAccessToken\r",
									"        await pm.environment.set(\"AccessToken\", jsonDataSignin.AccessToken);\r",
									"\r",
									"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('Signin : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // SignInProcess is Success\r",
									"        pm.test('Signin : OperationStatus Description is ' + '\"' + resultDescriptionSuccessSignIn + '\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
									"        });\r",
									"\r",
									"        //set random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //set PartnerName\r",
									"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
									"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
									"        //set MerchantContact\r",
									"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
									"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
									"        // set CPID\r",
									"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
									"        pm.environment.set(\"CPID\", CPIDValue)\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreatePartner\r",
									"CreatePartner = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreatePartner = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreatePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreatePartner,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreatePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
									"                \"PartnerType\": [\r",
									"                    \"Supplier\",\r",
									"                    \"Customer\"\r",
									"                ],\r",
									"                \"PartnerDetail\": {\r",
									"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
									"                    \"CPID\": pm.environment.get(\"CPID\")\r",
									"                },\r",
									"                \"Property\": {\r",
									"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreatePartner = {\r",
									"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreatePartner,\r",
									"            body: httpRequestCreatePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsCreatePartner);\r",
									"        let jsonDataCreatePartner = await response.json();\r",
									"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
									"\r",
									"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreatePartner : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreatePartner is Success\r",
									"        pm.test('CreatePartner : OperationStatus Description is ' + '\"' + resultDescriptionCreatePartner + '\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
									"        });\r",
									"\r",
									"        //GetResponse_PartnerId\r",
									"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
									"\r",
									"        //Accountname\r",
									"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
									"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateAccount\r",
									"CreateAccount = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateAccount = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateAccount,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreateAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateAccount = {\r",
									"            url: url + provisioningapis + urlAccountCreateAccount,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateAccount,\r",
									"            body: httpRequestCreateAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateAccount');\r",
									"        let response = await reqPromise(optionsCreateAccount);\r",
									"        let jsonDataCreateAccount = await response.json();\r",
									"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
									"\r",
									"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateAccount : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateAccount is Success\r",
									"        pm.test('CreateAccount : OperationStatus Description is ' + '\"' + resultDescriptionCreateAccount + '\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
									"        });\r",
									"        // GetResponse_AccountName\r",
									"        pm.environment.set(\"GetResponse_AccountName\", jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
									"        // GetResponse_AccountId\r",
									"        pm.environment.set(\"GetResponse_AccountId\", jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
									"        // random_IM\r",
									"        pm.environment.set(\"random_IM\", _.random(10000000, 99999999) + \" \" + _.random(1000000, 9999999))\r",
									"        // random_ICCID\r",
									"        pm.environment.set(\"random_ICCID\", _.random(1000000, 9999999) + \" \" + _.random(100000, 999999))\r",
									"        // random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //ThingName\r",
									"        let thingNameValue = fieldDataValue.Thing.ThingNameValue; // \"Sensor_TestThingName\"\r",
									"        pm.environment.set(\"ThingName\", thingNameValue + pm.environment.get(\"random_number\"))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThing\r",
									"CreateThing = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThing = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateThing + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateThing,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey': pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreateThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingName\": pm.environment.get(\"ThingName\"),\r",
									"                \"IMEI\": pm.environment.get(\"random_IM\"),\r",
									"                \"IMSI\": pm.environment.get(\"random_IM\"),\r",
									"                \"ICCID\": pm.environment.get(\"random_ICCID\"),\r",
									"                \"RouteUrl\": fieldDataValue.Thing.RouteUrlValue , //[\"http://10.12.3.4:2019/api/information/AddInformation\"]\r",
									"                \"RouteInfo\": {\r",
									"                    \"MIMO_ID\": fieldDataValue.Thing.RouteInfoMIMOIDValue , //\"606edada\"\r",
									"                    \"MIMO_SerialNo\": fieldDataValue.Thing.RouteInfoMIMOSerialNoValue //5466758878\r",
									"                },\r",
									"                \"RouteFlag\": {\r",
									"                    \"ThingName\": fieldDataValue.Thing.RouteFlagThingNameValue , //true\r",
									"                    \"ThingToken\": fieldDataValue.Thing.RouteFlagThingTokenValue, //true\r",
									"                    \"IMEI\": fieldDataValue.Thing.RouteFlagIMEIValue, //true\r",
									"                    \"ICCID\": fieldDataValue.Thing.RouteFlagICCIDValue, //true\r",
									"                    \"RouteInfo\": fieldDataValue.Thing.RouteFlagRouteInfoValue //true\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateThing = {\r",
									"            url: url + provisioningapis + urlThingCreateThing,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThing,\r",
									"            body: httpRequestCreateThing\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThing');\r",
									"        let response = await reqPromise(optionsCreateThing);\r",
									"        let jsonDataCreateThing = await response.json();\r",
									"        // console.log('jsonDataCreateThing',jsonDataCreateThing)\r",
									"\r",
									"        let operationStatusCreateThing = await jsonDataCreateThing.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateThing : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateThing : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateThing is Success\r",
									"        pm.test('CreateThing : OperationStatus Description is ' + '\"' + resultDescriptionCreateThing + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Description', resultDescriptionCreateThing);\r",
									"        });\r",
									"\r",
									"        pm.environment.set(\"GetResponse_ThingID\", jsonDataCreateThing.ThingInfo.ThingId)\r",
									"        pm.environment.set(\"GetResponse_IMSI\", jsonDataCreateThing.ThingInfo.IMSI)\r",
									"        \r",
									"        let keys = pm.environment.get(\"GetResponse_IMSI\") + \":\" + pm.environment.get(\"IpAddress\");\r",
									"        // console.log(\"keys\", keys);\r",
									"        let encodedKeys = CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(keys));\r",
									"        pm.environment.set(\"encodedKeys_Authorization_Register\", encodedKeys);\r",
									"\r",
									"        //Get Random Sensor \r",
									"        pm.environment.set(\"random_Sensor\", _.random(100, 999))\r",
									"\r",
									"        //Get Random Sensor AsgardHTTP\r",
									"        pm.environment.set(\"random_Sensor_AsgardHTTP\", _.random(100, 999))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThingStateInfo\r",
									"CreateThingStateInfo = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThingStateInfo = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateThingStateInfo,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey': pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        // {\"AA\" : pm.environment.get(\"random_Sensor\")}\r",
									"        let sensorValue = {};\r",
									"        sensorValue[fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP] = pm.environment.get(\"random_Sensor\");\r",
									"        // console.log('sensorValue',sensorValue);\r",
									"        \r",
									"        let httpRequestCreateThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": [\r",
									"                    pm.environment.get(\"GetResponse_ThingID\")\r",
									"                ],\r",
									"                \"Type\": fieldDataValue.CreateThingStateInfo.Type_Report,\r",
									"                \"Sensor\": sensorValue\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingCreateThingStateInfo,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThingStateInfo,\r",
									"            body: httpRequestCreateThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThingStateInfo');\r",
									"        let response = await reqPromise(optionsCreateThingStateInfo);\r",
									"        let jsonDataCreateThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataCreateThingStateInfo',jsonDataCreateThingStateInfo)\r",
									"\r",
									"        let operationStatusCreateThingStateInfo = await jsonDataCreateThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"CreateThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //CreateThingStateInfo is Success\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Description is ' + '\"' + resultDescriptionCreateThingStateInfo + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Description', resultDescriptionCreateThingStateInfo);\r",
									"        });\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// AsgardHTTPeSimRegister\r",
									"AsgardHTTPeSimRegister = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptAsgardHTTPeSimRegister = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_RegisHTTP + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_RegisHTTP,\r",
									"            'Authorization': Basic + ' ' + pm.environment.get(\"encodedKeys_Authorization_Register\")\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestAsgardHTTPeSimRegister = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({})\r",
									"        };\r",
									"\r",
									"        let optionsAsgardHTTPeSimRegister = {\r",
									"            url: url + httpapis + urlAsgardHTTPeSimRegister,\r",
									"            method: 'POST',\r",
									"            header: headersOptAsgardHTTPeSimRegister,\r",
									"            body: httpRequestAsgardHTTPeSimRegister\r",
									"        };\r",
									"\r",
									"        // console.log('request AsgardHTTPEsimRegister');\r",
									"        let response = await reqPromise(optionsAsgardHTTPeSimRegister);\r",
									"        let jsonDataAsgardHTTPeSimRegister = await response.json();\r",
									"        // console.log('jsonDataCreateThingStateInfo',jsonDataAsgardHTTPeSimRegister)\r",
									"        let operationStatusAsgardHTTPeSimRegister = await jsonDataAsgardHTTPeSimRegister.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"Asgard HTTP(eSim) Register : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('Asgard HTTP(eSim) Register : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusAsgardHTTPeSimRegister).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"\r",
									"        // The requested operation was successfully.\r",
									"        pm.test('Asgard HTTP(eSim) Register : OperationStatus DeveloperMessage is ' + '\"' + resultDescriptionTheRequestedOperationWasSuccessfully + '\"', function () {\r",
									"            pm.expect(operationStatusAsgardHTTPeSimRegister).to.have.property('DeveloperMessage', resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"        });\r",
									"\r",
									"        await pm.environment.set(\"GetResponse_ThingToken\", jsonDataAsgardHTTPeSimRegister.ThingToken)\r",
									"        let keys2 = await pm.environment.get(\"GetResponse_ThingToken\") + \":\" + pm.environment.get(\"IpAddress\");        \r",
									"        let encodedKeys2 = await CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(keys2));\r",
									"        pm.environment.set(\"encodedKeys_Authorization_Report\", encodedKeys2)\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveAccount\r",
									" RemoveAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemoveAccount = {\r",
									"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveAccount,\r",
									"            body: httpRequestRemoveAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveAccount');\r",
									"        let response = await reqPromise(optionsRemoveAccount);\r",
									"        let jsonDataRemoveAccount = await response.json();\r",
									"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
									"    \r",
									"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveAccount is Success\r",
									"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"Signin();\r",
									"setTimeout(async function(){await CreatePartner();}, 3000); \r",
									"setTimeout(async function(){await CreateAccount();}, 6000); \r",
									"setTimeout(async function(){await CreateThing();}, 8000); \r",
									"setTimeout(async function(){await CreateThingStateInfo();}, 9000); \r",
									"setTimeout(async function(){await AsgardHTTPeSimRegister();}, 10000); \r",
									"setTimeout(async function(){}, 20000); //for wait value encodedKeys_Authorization_Report\r",
									"setTimeout(function(){RemoveAccount();}, 30000); "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-ais-UserName",
								"type": "text",
								"value": "{{x_ais_UserName_AisPartner}}"
							},
							{
								"key": "x-ais-OrderRef",
								"value": "{{x_ais_OrderRef_ReportHTTP_fail}}{{current_timestamp}}"
							},
							{
								"key": "x-ais-OrderDesc",
								"type": "text",
								"value": "{{x_ais_OrderDesc_ReportHTTP}}"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{Basic}} {{encodedKeys_Authorization_Report}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Payload\": {\r\n        \"{{SensorKey_AsgardHTTP}}\" : \"{{random_Sensor_AsgardHTTP}}\", \r\n        \"Timestamp\": \"{{timestamp}}\"\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{url}}{{httpapis}}/api/report/sim/v1",
							"host": [
								"{{url}}{{httpapis}}"
							],
							"path": [
								"api",
								"report",
								"sim",
								"v1"
							]
						},
						"description": "Type:Desire"
					},
					"response": []
				},
				{
					"name": "AsgardHTTPeSimReport_TST_F1_0_2_007_Error_AccountExpired",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var Username = pm.environment.get(\"Username\");\r",
									"var Password = pm.environment.get(\"Password\");\r",
									"\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"var httpapis = pm.environment.get(\"httpapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"pm.environment.set(\"SensorKey_AsgardHTTP\",fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP)\r",
									"\r",
									"// Timestamp 2020-12-31T03:03:18+07:00\r",
									"var timestamp = fieldDataValue.AsgardHTTP.Value_AsgardHTTP_Report_Timestamp;\r",
									"// console.log('currentTmestamp',currentTmestamp);\r",
									"pm.environment.set(\"timestamp\", timestamp);\r",
									"\r",
									"//format YYYYMMDDHHMMSSS\r",
									"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
									"// console.log('currentTmestamp',currentTmestamp);\r",
									"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var Basic = pm.environment.get(\"Basic\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var x_ais_UserName_AisPartner = pm.environment.get(\"x_ais_UserName_AisPartner\");\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.environment.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- statusCodeList --------------//\r",
									"//set variable to statusCodeList JSON.parse\r",
									"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
									"//set global variable to statusCode 200\r",
									"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
									"//set global variable to statusCode 201\r",
									"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
									"//set global variable to statusCode 403\r",
									"pm.globals.set(\"statusCodeForbidden\", statusCodeList.statusCodeForbidden);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultCodeList --------------//\r",
									"//set variable to resultCodeList JSON.parse\r",
									"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
									"//set global variable to resultCode \"20000\"\r",
									"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
									"//set global variable to resultCode \"20100\"\r",
									"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
									"//set global variable to resultCode \"40305\"\r",
									"pm.globals.set(\"resultCodeTheOperationHasAlreadyExpired\", resultCodeList.resultCodeTheOperationHasAlreadyExpired);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionSuccessList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
									"//set global variable to resultDescription \"SignInProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
									"//set global variable to resultDescription \"CreatePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
									"//set global variable to resultDescription \"CreateAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
									"//set global variable to resultDescription \"CreateThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThing\", resultDescriptionSuccessList.resultDescriptionCreateThing);\r",
									"//set global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThingStateInfo\", resultDescriptionSuccessList.resultDescriptionCreateThingStateInfo);\r",
									"//set global variable to resultDescription \"RemovePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
									"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
									"//set global variable to resultDescription \"RemoveThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThing\", resultDescriptionSuccessList.resultDescriptionRemoveThing);\r",
									"//set global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThingStateInfo\", resultDescriptionSuccessList.resultDescriptionRemoveThingStateInfo);\r",
									"//set global variable to resultDescription \"Register is Success\"\r",
									"pm.globals.set(\"resultDescriptionRegisterIsSuccess\", resultDescriptionSuccessList.resultDescriptionRegisterIsSuccess);\r",
									"//set global variable to resultDescription \"ReportProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionReportProcessIsSuccess\", resultDescriptionSuccessList.resultDescriptionReportProcessIsSuccess);\r",
									"//set global variable to resultDescription \"The requested operation was successfully.\"\r",
									"pm.globals.set(\"resultDescriptionTheRequestedOperationWasSuccessfully\", resultDescriptionSuccessList.resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionErrorList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
									"//set global variable to resultDescription \"The operation has already expired.\"\r",
									"pm.globals.set(\"resultDescriptionTheOperationHasAlreadyExpired\", resultDescriptionErrorList.resultDescriptionTheOperationHasAlreadyExpired);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- HeaderList --------------//\r",
									"//set variable to HeaderList JSON.parse\r",
									"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
									"//---------------- set globals Other --------------//\r",
									"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
									"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
									"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
									"//set global variable to kbn-versio \"7.5.1\"\r",
									"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Signin_ --------------//\r",
									"//set global variable to x_ais_OrderRef \"Signin_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreatePartner --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
									"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
									"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
									"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreateAccount --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
									"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
									"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Thing --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThing\", HeaderList.Thing.x_ais_OrderRef_CreateThing);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThing\", HeaderList.Thing.x_ais_OrderDesc_CreateThing);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThing\", HeaderList.Thing.x_ais_OrderRef_RemoveThing);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThing\", HeaderList.Thing.x_ais_OrderDesc_RemoveThing);\r",
									"//set global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_RemoveThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_RemoveThingStateInfo);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals AsgardHTTP --------------//\r",
									"//set global variable to x_ais_OrderRef \"RegisHTTP_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RegisHTTP\", HeaderList.AsgardHTTP.x_ais_OrderRef_RegisHTTP);\r",
									"//set global variable to x_ais_OrderDesc \"Register Thing in MG\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RegisHTTP\", HeaderList.AsgardHTTP.x_ais_OrderDesc_RegisHTTP);\r",
									"//set global variable to x_ais_OrderRef \"ReportHTTP_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ReportHTTP\", HeaderList.AsgardHTTP.x_ais_OrderRef_ReportHTTP);\r",
									"//set global variable to x_ais_OrderRef \"ReportHTTPfail_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ReportHTTP_fail\", HeaderList.AsgardHTTP.x_ais_OrderRef_ReportHTTP_fail);\r",
									"//set global variable to x_ais_OrderDesc \"Report Data to MG\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_ReportHTTP\", HeaderList.AsgardHTTP.x_ais_OrderDesc_ReportHTTP);\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"SignInProcess is Success\"\r",
									"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
									"//get global variable to resultDescription \"CreatePartner is Success\"\r",
									"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
									"//get global variable to resultDescription \"CreateAccount is Success\"\r",
									"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
									"//get global variable to resultDescription \"CreateThing is Success\"\r",
									"var resultDescriptionCreateThing = pm.globals.get(\"resultDescriptionCreateThing\");\r",
									"//get global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"var resultDescriptionCreateThingStateInfo = pm.globals.get(\"resultDescriptionCreateThingStateInfo\");\r",
									"//get global variable to resultDescription \"Register is Success\"\r",
									"var resultDescriptionRegisterIsSuccess = pm.globals.get(\"resultDescriptionRegisterIsSuccess\");\r",
									"//get global variable to resultDescription \"The requested operation was successfully.\"\r",
									"var resultDescriptionTheRequestedOperationWasSuccessfully = pm.globals.get(\"resultDescriptionTheRequestedOperationWasSuccessfully\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- urlRouteList --------------//\r",
									"//set variable to urlRouteList JSON.parse\r",
									"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
									"//---------------- set url Create --------------//\r",
									"//set global variable to url \"/api/v1/auth/signin\"\r",
									"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
									"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
									"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"pm.globals.set(\"urlThingCreateThing\", urlRouteList.Thing.urlThingCreateThing);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"pm.globals.set(\"urlThingCreateThingStateInfo\", urlRouteList.Thing.urlThingCreateThingStateInfo);\r",
									"//set global variable to url \"/api/register/sim/v1\"\r",
									"pm.globals.set(\"urlAsgardHTTPeSimRegister\", urlRouteList.AsgardHTTPeSim.urlAsgardHTTPeSimRegister);\r",
									"//set global variable to url \"/api/report/sim/v1\"\r",
									"pm.globals.set(\"urlAsgardHTTPeSimReport\", urlRouteList.AsgardHTTPeSim.urlAsgardHTTPeSimReport);\r",
									"//---------------- get url Create --------------//\r",
									"//get global variable to url \"/api/v1/auth/signin\"\r",
									"var urlSignin = pm.globals.get(\"urlSignin\");\r",
									"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
									"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"var urlThingCreateThing = pm.globals.get(\"urlThingCreateThing\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"var urlThingCreateThingStateInfo = pm.globals.get(\"urlThingCreateThingStateInfo\");\r",
									"//get global variable to url \"/api/register/sim/v1\"\r",
									"var urlAsgardHTTPeSimRegister = pm.globals.get(\"urlAsgardHTTPeSimRegister\");\r",
									"//get global variable to url \"/api/report/sim/v1\"\r",
									"var urlAsgardHTTPeSimReport = pm.globals.get(\"urlAsgardHTTPeSimReport\");\r",
									"//---------------- set url Remove --------------//\r",
									"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
									"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"pm.globals.set(\"urlThingRemoveThing\", urlRouteList.Thing.urlThingRemoveThing);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"pm.globals.set(\"urlThingRemoveThingStateInfo\", urlRouteList.Thing.urlThingRemoveThingStateInfo);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Signin_ --------------//\r",
									"//get global variable to x_ais_OrderRef \"Signin_\"\r",
									"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"var x_ais_OrderRef_CreateThing = pm.globals.get(\"x_ais_OrderRef_CreateThing\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"var x_ais_OrderDesc_CreateThing = pm.globals.get(\"x_ais_OrderDesc_CreateThing\");\r",
									"//get global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"var x_ais_OrderRef_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderRef_CreateThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"var x_ais_OrderDesc_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_CreateThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals AsgardHTTP --------------//\r",
									"//get global variable to x_ais_OrderRef \"RegisHTTP_\"\r",
									"var x_ais_OrderRef_RegisHTTP = pm.globals.get(\"x_ais_OrderRef_RegisHTTP\");\r",
									"//get global variable to x_ais_OrderDesc \"Register Thing in MG\"\r",
									"var x_ais_OrderDesc_RegisHTTP = pm.globals.get(\"x_ais_OrderDesc_RegisHTTP\");\r",
									"//------------------------------------------------------------//\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// Signin get token\r",
									"Signin = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSignin = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_Signin + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_UserAuthentication,\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestSignin = {\r",
									"            mode: 'raw',\r",
									"            raw:\r",
									"                JSON.stringify({\r",
									"                    username: Username,\r",
									"                    password: Password\r",
									"                })\r",
									"        };\r",
									"\r",
									"        let optionsSignin = {\r",
									"            url: url + provisioningapis + urlSignin,\r",
									"            method: 'POST',\r",
									"            header: headersOptSignin,\r",
									"            body: httpRequestSignin\r",
									"        };\r",
									"        // console.log('request Signin');\r",
									"        let response = await reqPromise(optionsSignin);\r",
									"        let jsonDataSignin = await response.json();\r",
									"\r",
									"        // setAccessToken\r",
									"        await pm.environment.set(\"AccessToken\", jsonDataSignin.AccessToken);\r",
									"\r",
									"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('Signin : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // SignInProcess is Success\r",
									"        pm.test('Signin : OperationStatus Description is ' + '\"' + resultDescriptionSuccessSignIn + '\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
									"        });\r",
									"\r",
									"        //set random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //set PartnerName\r",
									"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
									"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
									"        //set MerchantContact\r",
									"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
									"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
									"        // set CPID\r",
									"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
									"        pm.environment.set(\"CPID\", CPIDValue)\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreatePartner\r",
									"CreatePartner = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreatePartner = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreatePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreatePartner,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreatePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
									"                \"PartnerType\": [\r",
									"                    \"Supplier\",\r",
									"                    \"Customer\"\r",
									"                ],\r",
									"                \"PartnerDetail\": {\r",
									"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
									"                    \"CPID\": pm.environment.get(\"CPID\")\r",
									"                },\r",
									"                \"Property\": {\r",
									"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreatePartner = {\r",
									"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreatePartner,\r",
									"            body: httpRequestCreatePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsCreatePartner);\r",
									"        let jsonDataCreatePartner = await response.json();\r",
									"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
									"\r",
									"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreatePartner : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreatePartner is Success\r",
									"        pm.test('CreatePartner : OperationStatus Description is ' + '\"' + resultDescriptionCreatePartner + '\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
									"        });\r",
									"\r",
									"        //GetResponse_PartnerId\r",
									"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
									"\r",
									"        //Accountname\r",
									"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
									"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateAccount\r",
									"CreateAccount = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateAccount = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateAccount,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreateAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateAccount = {\r",
									"            url: url + provisioningapis + urlAccountCreateAccount,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateAccount,\r",
									"            body: httpRequestCreateAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateAccount');\r",
									"        let response = await reqPromise(optionsCreateAccount);\r",
									"        let jsonDataCreateAccount = await response.json();\r",
									"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
									"\r",
									"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateAccount : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateAccount is Success\r",
									"        pm.test('CreateAccount : OperationStatus Description is ' + '\"' + resultDescriptionCreateAccount + '\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
									"        });\r",
									"        // GetResponse_AccountName\r",
									"        pm.environment.set(\"GetResponse_AccountName\", jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
									"        // GetResponse_AccountId\r",
									"        pm.environment.set(\"GetResponse_AccountId\", jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
									"        // random_IM\r",
									"        pm.environment.set(\"random_IM\", _.random(10000000, 99999999) + \" \" + _.random(1000000, 9999999))\r",
									"        // random_ICCID\r",
									"        pm.environment.set(\"random_ICCID\", _.random(1000000, 9999999) + \" \" + _.random(100000, 999999))\r",
									"        // random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //ThingName\r",
									"        let thingNameValue = fieldDataValue.Thing.ThingNameValue; // \"Sensor_TestThingName\"\r",
									"        pm.environment.set(\"ThingName\", thingNameValue + pm.environment.get(\"random_number\"))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThing\r",
									"CreateThing = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThing = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateThing + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateThing,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey': pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreateThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingName\": pm.environment.get(\"ThingName\"),\r",
									"                \"IMEI\": pm.environment.get(\"random_IM\"),\r",
									"                \"IMSI\": pm.environment.get(\"random_IM\"),\r",
									"                \"ICCID\": pm.environment.get(\"random_ICCID\"),\r",
									"                \"RouteUrl\": fieldDataValue.Thing.RouteUrlValue , //[\"http://10.12.3.4:2019/api/information/AddInformation\"]\r",
									"                \"RouteInfo\": {\r",
									"                    \"MIMO_ID\": fieldDataValue.Thing.RouteInfoMIMOIDValue , //\"606edada\"\r",
									"                    \"MIMO_SerialNo\": fieldDataValue.Thing.RouteInfoMIMOSerialNoValue //5466758878\r",
									"                },\r",
									"                \"RouteFlag\": {\r",
									"                    \"ThingName\": fieldDataValue.Thing.RouteFlagThingNameValue , //true\r",
									"                    \"ThingToken\": fieldDataValue.Thing.RouteFlagThingTokenValue, //true\r",
									"                    \"IMEI\": fieldDataValue.Thing.RouteFlagIMEIValue, //true\r",
									"                    \"ICCID\": fieldDataValue.Thing.RouteFlagICCIDValue, //true\r",
									"                    \"RouteInfo\": fieldDataValue.Thing.RouteFlagRouteInfoValue //true\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateThing = {\r",
									"            url: url + provisioningapis + urlThingCreateThing,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThing,\r",
									"            body: httpRequestCreateThing\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThing');\r",
									"        let response = await reqPromise(optionsCreateThing);\r",
									"        let jsonDataCreateThing = await response.json();\r",
									"        // console.log('jsonDataCreateThing',jsonDataCreateThing)\r",
									"\r",
									"        let operationStatusCreateThing = await jsonDataCreateThing.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateThing : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateThing : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateThing is Success\r",
									"        pm.test('CreateThing : OperationStatus Description is ' + '\"' + resultDescriptionCreateThing + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Description', resultDescriptionCreateThing);\r",
									"        });\r",
									"\r",
									"        pm.environment.set(\"GetResponse_ThingID\", jsonDataCreateThing.ThingInfo.ThingId)\r",
									"        pm.environment.set(\"GetResponse_IMSI\", jsonDataCreateThing.ThingInfo.IMSI)\r",
									"        \r",
									"        let keys = pm.environment.get(\"GetResponse_IMSI\") + \":\" + pm.environment.get(\"IpAddress\");\r",
									"        // console.log(\"keys\", keys);\r",
									"        let encodedKeys = CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(keys));\r",
									"        pm.environment.set(\"encodedKeys_Authorization_Register\", encodedKeys);\r",
									"\r",
									"        //Get Random Sensor \r",
									"        pm.environment.set(\"random_Sensor\", _.random(100, 999))\r",
									"\r",
									"        //Get Random Sensor AsgardHTTP\r",
									"        pm.environment.set(\"random_Sensor_AsgardHTTP\", _.random(100, 999))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThingStateInfo\r",
									"CreateThingStateInfo = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThingStateInfo = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateThingStateInfo,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey': pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        // {\"AA\" : pm.environment.get(\"random_Sensor\")}\r",
									"        let sensorValue = {};\r",
									"        sensorValue[fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP] = pm.environment.get(\"random_Sensor\");\r",
									"        // console.log('sensorValue',sensorValue);\r",
									"        \r",
									"        let httpRequestCreateThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": [\r",
									"                    pm.environment.get(\"GetResponse_ThingID\")\r",
									"                ],\r",
									"                \"Type\": fieldDataValue.CreateThingStateInfo.Type_Report,\r",
									"                \"Sensor\": sensorValue\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingCreateThingStateInfo,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThingStateInfo,\r",
									"            body: httpRequestCreateThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThingStateInfo');\r",
									"        let response = await reqPromise(optionsCreateThingStateInfo);\r",
									"        let jsonDataCreateThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataCreateThingStateInfo',jsonDataCreateThingStateInfo)\r",
									"\r",
									"        let operationStatusCreateThingStateInfo = await jsonDataCreateThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"CreateThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //CreateThingStateInfo is Success\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Description is ' + '\"' + resultDescriptionCreateThingStateInfo + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Description', resultDescriptionCreateThingStateInfo);\r",
									"        });\r",
									"\r",
									"       \r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// AsgardHTTPeSimRegister\r",
									"AsgardHTTPeSimRegister = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptAsgardHTTPeSimRegister = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_RegisHTTP + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_RegisHTTP,\r",
									"            'Authorization': Basic + ' ' + pm.environment.get(\"encodedKeys_Authorization_Register\")\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestAsgardHTTPeSimRegister = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({})\r",
									"        };\r",
									"\r",
									"        let optionsAsgardHTTPeSimRegister = {\r",
									"            url: url + httpapis + urlAsgardHTTPeSimRegister,\r",
									"            method: 'POST',\r",
									"            header: headersOptAsgardHTTPeSimRegister,\r",
									"            body: httpRequestAsgardHTTPeSimRegister\r",
									"        };\r",
									"\r",
									"        // console.log('request AsgardHTTPEsimRegister');\r",
									"        let response = await reqPromise(optionsAsgardHTTPeSimRegister);\r",
									"        let jsonDataAsgardHTTPeSimRegister = await response.json();\r",
									"        // console.log('jsonDataCreateThingStateInfo',jsonDataAsgardHTTPeSimRegister)\r",
									"        let operationStatusAsgardHTTPeSimRegister = await jsonDataAsgardHTTPeSimRegister.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"Asgard HTTP(eSim) Register : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('Asgard HTTP(eSim) Register : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusAsgardHTTPeSimRegister).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"\r",
									"        // The requested operation was successfully.\r",
									"        pm.test('Asgard HTTP(eSim) Register : OperationStatus DeveloperMessage is ' + '\"' + resultDescriptionTheRequestedOperationWasSuccessfully + '\"', function () {\r",
									"            pm.expect(operationStatusAsgardHTTPeSimRegister).to.have.property('DeveloperMessage', resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"        });\r",
									"\r",
									"        await pm.environment.set(\"GetResponse_ThingToken\", jsonDataAsgardHTTPeSimRegister.ThingToken)\r",
									"        let keys2 = await fieldDataValue.AsgardHTTP.Value_AsgardHTTPeSim_Report_TST_F1_0_1_007_Username_Error + \":\" + fieldDataValue.AsgardHTTP.Value_AsgardHTTPeSim_Report_TST_F1_0_1_007_Password_Error;         \r",
									"        let encodedKeys2 = await CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(keys2));\r",
									"        pm.environment.set(\"encodedKeys_Authorization_Report\", encodedKeys2)\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"Signin();\r",
									"setTimeout(async function(){await CreatePartner();}, 3000); \r",
									"setTimeout(async function(){await CreateAccount();}, 6000); \r",
									"setTimeout(async function(){await CreateThing();}, 8000); \r",
									"setTimeout(async function(){await CreateThingStateInfo();}, 9000); \r",
									"setTimeout(async function(){await AsgardHTTPeSimRegister();}, 10000); \r",
									"setTimeout(async function(){}, 20000); //for wait value encodedKeys_Authorization_Report"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"var controlapis = pm.environment.get(\"controlapis\");\r",
									"var httpapis = pm.environment.get(\"httpapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var Basic = pm.environment.get(\"Basic\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to xAisOrderRef \"RemoveThing_\"\r",
									"var x_ais_OrderRef_RemoveThing = pm.globals.get(\"x_ais_OrderRef_RemoveThing\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"var x_ais_OrderDesc_RemoveThing = pm.globals.get(\"x_ais_OrderDesc_RemoveThing\");\r",
									"//get global variable to xAisOrderRef \"RemoveThingStateInfo_\"\r",
									"var x_ais_OrderRef_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderRef_RemoveThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThingStateInfo\"\r",
									"var x_ais_OrderDesc_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_RemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Group --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveGroup_\"\r",
									"var x_ais_OrderRef_RemoveGroup = pm.globals.get(\"x_ais_OrderRef_RemoveGroup\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveGroup\"\r",
									"var x_ais_OrderDesc_RemoveGroup = pm.globals.get(\"x_ais_OrderDesc_RemoveGroup\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals AsgardHTTP --------------//\r",
									"//get global variable to x_ais_OrderRef \"ReportHTTP_\"\r",
									"var x_ais_OrderRef_ReportHTTP = pm.globals.get(\"x_ais_OrderRef_ReportHTTP\");\r",
									"//get global variable to x_ais_OrderRef \"ReportHTTPfail_\"\r",
									"var x_ais_OrderRef_ReportHTTP_fail = pm.globals.get(\"x_ais_OrderRef_ReportHTTP_fail\");\r",
									"//get global variable to x_ais_OrderDesc \"Report Data to MG\"\r",
									"var x_ais_OrderDesc_ReportHTTP = pm.globals.get(\"x_ais_OrderDesc_ReportHTTP\");\r",
									"//------------------------------------------------------------//\r",
									"\r",
									"//---------------- get url Remove --------------//\r",
									"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
									"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"var urlThingRemoveThing = pm.globals.get(\"urlThingRemoveThing\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"var urlThingRemoveThingStateInfo = pm.globals.get(\"urlThingRemoveThingStateInfo\");\r",
									"//get global variable to url \"/api/v1/Group/RemoveGroup\"\r",
									"var urlGroupRemoveGroup = pm.globals.get(\"urlGroupRemoveGroup\");\r",
									"\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"RemovePartner is Success\"\r",
									"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
									"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
									"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
									"//get global variable to resultDescription \"RemoveThing is Success\"\r",
									"var resultDescriptionRemoveThing = pm.globals.get(\"resultDescriptionRemoveThing\");\r",
									"//get global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"var resultDescriptionRemoveThingStateInfo = pm.globals.get(\"resultDescriptionRemoveThingStateInfo\");\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"//get global variable to statusCode 403\r",
									"var statusCodeForbidden = pm.globals.get(\"statusCodeForbidden\");\r",
									"//get global variable to resultCode \"40305\"\r",
									"var resultCodeTheOperationHasAlreadyExpired = pm.globals.get(\"resultCodeTheOperationHasAlreadyExpired\");\r",
									"//get global variable to resultDescription \"The operation has already expired.\"\r",
									"var resultDescriptionTheOperationHasAlreadyExpired = pm.globals.get(\"resultDescriptionTheOperationHasAlreadyExpired\");\r",
									"\r",
									"pm.test(\"Asgard HTTP(eSim) Register : Status code is \" + statusCodeForbidden, function () {\r",
									"    pm.response.to.have.status(statusCodeForbidden);\r",
									"});\r",
									"\r",
									"pm.test('Asgard HTTP(eSim) Register : operationStatus code is '+'\"'+ resultCodeTheOperationHasAlreadyExpired +'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeTheOperationHasAlreadyExpired);\r",
									"});\r",
									"\r",
									"pm.test('Asgard HTTP(eSim) Register : operationStatus DeveloperMessage is '+'\"'+ resultDescriptionTheOperationHasAlreadyExpired+'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheOperationHasAlreadyExpired);\r",
									"});\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// RemovePartner\r",
									" RemovePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemovePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemovePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemovePartner = {\r",
									"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemovePartner,\r",
									"            body: httpRequestRemovePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request RemovePartner');\r",
									"        let response = await reqPromise(optionsRemovePartner);\r",
									"        let jsonDataRemovePartner = await response.json();\r",
									"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
									"    \r",
									"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemovePartner is Success\r",
									"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveAccount\r",
									" RemoveAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemoveAccount = {\r",
									"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveAccount,\r",
									"            body: httpRequestRemoveAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveAccount');\r",
									"        let response = await reqPromise(optionsRemoveAccount);\r",
									"        let jsonDataRemoveAccount = await response.json();\r",
									"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
									"    \r",
									"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveAccount is Success\r",
									"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThing\r",
									" RemoveThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThing = {\r",
									"            url: url + provisioningapis + urlThingRemoveThing,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThing,\r",
									"            body: httpRequestRemoveThing\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveThing');\r",
									"        let response = await reqPromise(optionsRemoveThing);\r",
									"        let jsonDataRemoveThing = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThing)\r",
									"    \r",
									"        let operationStatusRemoveThing = await jsonDataRemoveThing.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThing : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThing : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThing is Success\r",
									"        pm.test('RemoveThing : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThing+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Description', resultDescriptionRemoveThing);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThingStateInfo\r",
									" RemoveThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"            \r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\"),\r",
									"                \"stateType\": fieldDataValue.CreateThingStateInfo.Type_Report, //Report\r",
									"                \"stateKey\": fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP //AA\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingRemoveThingStateInfo,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThingStateInfo,\r",
									"            body: httpRequestRemoveThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('response RemoveThingStateInfo');\r",
									"        let response = await reqPromise(optionsRemoveThingStateInfo);\r",
									"        let jsonDataRemoveThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThingStateInfo)\r",
									"    \r",
									"        let operationStatusRemoveThingStateInfo = await jsonDataRemoveThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThingStateInfo is Success\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThingStateInfo+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Description', resultDescriptionRemoveThingStateInfo);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"//---------------- LogDefaultValue --------------//\r",
									"//set variable to LogDefaultValue JSON.parse\r",
									"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
									"// console.log('LogDefaultValue',LogDefaultValue);\r",
									"//---------------- set globals Other --------------//\r",
									"var SearchLog = LogDefaultValue.SearchLog;\r",
									"// console.log('SearchLog',SearchLog);\r",
									"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
									"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
									"var kbn_version = SearchLog.header.kbn_version;\r",
									"var authorization = SearchLog.header.Authorization;\r",
									"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
									"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
									"var namespace = LogDefaultValue.Other.namespace;\r",
									"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
									"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
									"var header_x_ais_username = LogDefaultValue.Other.header_x_ais_username;\r",
									"var methodPost = LogDefaultValue.Other.methodPost;\r",
									"\r",
									"// Detail\r",
									"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
									"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
									"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
									"\r",
									"// Summary\r",
									"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
									"var identitySummary = \"\";\r",
									"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
									"\r",
									"// Asgard.Http.APIs\r",
									"var applicationName = LogDefaultValue.AsgardHTTP.applicationName;\r",
									"var cmdName = LogDefaultValue.AsgardHTTP.cmdNameReport;\r",
									"var endPointNameRabbitMQ = LogDefaultValue.AsgardHTTP.endPointNameRabbitMQ;\r",
									"var containerId = LogDefaultValue.AsgardHTTP.containerId;\r",
									"var requestObjectUrlStaging = LogDefaultValue.AsgardHTTP.requestObjectUrlReportMgStaging;\r",
									"var urlReport  = LogDefaultValue.AsgardHTTP.urlReport;\r",
									"\r",
									"// Check CDR (Summary Log) and EDR (Detail Log)\r",
									"SearchLogFindTid = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSearchLogFindTid = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = x_ais_OrderRef_ReportHTTP_fail + current_timestamp; \r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestSearchLogFindTid = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"phrase\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"\r",
									"        let optionsSearchLogFindTid = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptSearchLogFindTid,\r",
									"            body: httpRequestSearchLogFindTid\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsSearchLogFindTid);\r",
									"        let jsonDataSearchLogFindTid = await response.json();\r",
									"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
									"        console.log('hits',hits)\r",
									"  \r",
									"        // find tid\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            // let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"        \r",
									"            // console.log('logType',logType)\r",
									"            //  console.log('applicationNameValue',applicationNameValue)\r",
									"            //  console.log('applicationName',applicationName)\r",
									"            if(applicationNameValue == applicationName){\r",
									"                let tid = hits[i]._source.cauldron.tid;\r",
									"                pm.environment.set(\"tid\", tid);\r",
									"                break;\r",
									"           }\r",
									"        }\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"CheckLog = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCheckLog = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = pm.environment.get(\"tid\");\r",
									"\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"         console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestCheckLog = {\r",
									"            mode: 'raw',\r",
									"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"phrase\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"        let optionsCheckLog = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptCheckLog,\r",
									"            body: httpRequestCheckLog\r",
									"        }; \r",
									"        let response = await reqPromise(optionsCheckLog);\r",
									"        let jsonDataCheckLog = await response.json();\r",
									"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
									"        \r",
									"        // //200\r",
									"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });     \r",
									"        \r",
									"        let hits = jsonDataCheckLog.hits.hits\r",
									"         console.log('hits',hits)\r",
									"  \r",
									"        // find logType\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            //  let logType = hits[i]._source.cauldron.logType\r",
									"            let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"           \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            \r",
									"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
									"            // console.log('resultDataLog',resultDataLog)\r",
									"\r",
									"            let tidControl = x_ais_OrderRef_ReportHTTP_fail  + current_timestamp;\r",
									"            // console.log(tidControl);\r",
									"            if(applicationNameValue == applicationName){\r",
									"                 \r",
									"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and Asgard.Http.APIs\r",
									"                    pm.test(\"Check Summary Log : Asgard_HTTP(eSim) Report\" , function () {\r",
									"                        console.log(\"======== Check Summary Log ( Expected = Actual) [Asgard_HTTP(eSim) Report] ==================\");\r",
									"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
									"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
									"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeTheOperationHasAlreadyExpired);\r",
									"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionTheOperationHasAlreadyExpired);\r",
									"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
									"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"identity : \" + JSON.stringify(resultDataLog.identity) + \" = \" + JSON.stringify(identitySummary));\r",
									"                        // console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
									"\r",
									"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
									"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
									"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeTheOperationHasAlreadyExpired); \r",
									"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionTheOperationHasAlreadyExpired); \r",
									"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
									"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
									"                        // pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
									"\r",
									"                        // check custom\r",
									"                        // \\\"custom\\\":{ \\\"endPointSummary\\\":[ { \\\"no\\\":\\\"1\\\", \\\"endPointName\\\":\\\"db.ThingsCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:Inquiry was Success\\\", \\\"processTime\\\":0.0005 }, { \\\"no\\\":\\\"2\\\", \\\"endPointName\\\":\\\"db.AccountsCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:Inquiry was Success\\\", \\\"processTime\\\":0.0003 } ] }\r",
									"\r",
									"                        let custom = resultDataLog.custom.endPointSummary;\r",
									"                        let countCustom = custom.length;\r",
									"                       \r",
									"                        // [\"db.ThingsCollection\",\"db.AccountsCollection\"]\r",
									"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_Asgard_HTTP_eSim_Report_007;\r",
									"                        // [\"20000:Inquiry was Success\",\"20000:Inquiry was Success\"]\r",
									"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_Asgard_HTTP_eSim_Report_007;\r",
									"                        let countCustomStep = dataEndPointName.length;\r",
									"\r",
									"                        console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep);\r",
									"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
									"                        \r",
									"                        for(let i=0;i<countCustomStep;i++){\r",
									"                            let no = custom[i].no;\r",
									"                            let valueEndPointName = custom[i].endPointName;\r",
									"                            let valueResponseStatus = custom[i].responseStatus;\r",
									"                            // console.log(\"i\",i);\r",
									"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
									"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
									"\r",
									"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString());\r",
									"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i]);\r",
									"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i]);\r",
									"\r",
									"                            pm.expect(no).to.eql((i+1).toString()); \r",
									"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
									"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]); \r",
									"                        }\r",
									"                    }); \r",
									"                }\r",
									"\r",
									"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and Asgard.Http.APIs\r",
									"\r",
									"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
									"                    // console.log('endPointNameValue ',endPointNameValue)\r",
									"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [Asgard_HTTP(eSim) Report]\", function () {\r",
									"                        console.log(\"======== Check Detail Log ( Expected = Actual) [Asgard_HTTP(eSim) Report] ==================\");\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
									"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
									"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
									"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.custom1.activityLog.processTime + \" = \" + resultDataLog.custom1.activityLog.processTime);\r",
									"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
									"\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
									"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
									"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
									"\r",
									"                        let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
									"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
									"                        let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
									"                            // console.log('jsonParseResponseObject',jsonParseResponseObject); \r",
									"                        let url = urlReport; \r",
									"                        let x_ais_orderref = x_ais_OrderRef_ReportHTTP_fail + current_timestamp;\r",
									"                        let x_ais_orderdesc = x_ais_OrderDesc_ReportHTTP;\r",
									"                        let x_ais_userName = x_ais_UserName_AisPartner;\r",
									"                        let authorization = Basic + ' ' + pm.environment.get(\"encodedKeys_Authorization_Report\");\r",
									"                        let SensorKey = fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP;\r",
									"                        let sensor = pm.environment.get(\"random_Sensor_AsgardHTTP\");\r",
									"                        let timestamp = pm.environment.get(\"timestamp\");\r",
									"\r",
									"                        if( endPointNameValue == undefined){\r",
									"                            // check requestObject\r",
									"                            // \"requestObject\":\"{\\\"url\\\":\\\"/api/report/sim/v1\\\",\\\"method\\\":\\\"POST\\\",\\\"headers\\\":{\\\"Cache-Control\\\":\\\"no-cache\\\",\\\"Content-Type\\\":\\\"application/json\\\",\\\"Accept\\\":\\\"*/*\\\",\\\"Accept-Encoding\\\":\\\"gzip,deflate,br\\\",\\\"Authorization\\\":\\\"Basic OWM0ZDgzZjUtNjNhNS00OGJlLWE1MzMtMmYwMzI3NTU3YWFjeHg6MS4yLjMuNA==\\\",\\\"Host\\\":\\\"mg-staging.sandais.com\\\",\\\"User-Agent\\\":\\\"PostmanRuntime/7.26.8\\\",\\\"Content-Length\\\":\\\"89\\\",\\\"x-real-ip\\\":\\\"58.8.214.174\\\",\\\"x-forwarded-for\\\":\\\"58.8.214.174\\\",\\\"x-forwarded-proto\\\":\\\"https\\\",\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"ReportHTTPfail_202102151702830\\\",\\\"x-ais-orderdesc\\\":\\\"Report Data to MG\\\",\\\"postman-token\\\":\\\"933da003-bcde-4576-95f5-d2ee8667187a\\\",\\\"x-request-id\\\":\\\"018277e8-4da1-4938-b53e-a5b5bcc4b3a9\\\",\\\"x-b3-traceid\\\":\\\"3070c97568f63ed143ddfff065b7a837\\\",\\\"x-b3-spanid\\\":\\\"43ddfff065b7a837\\\",\\\"x-b3-sampled\\\":\\\"0\\\",\\\"x-ais-SessionId\\\":\\\"1613384652608\\\"},\\\"queryString\\\":{},\\\"routeParamteters\\\":{},\\\"body\\\":{\\\"Payload\\\":{\\\"AA\\\":\\\"856\\\",\\\"Timestamp\\\":\\\"2020-12-31T03:03:18+07:00\\\"}}}\"\r",
									"\r",
									"                            // \\\"requestObject\\\":\\\"{ \\\\\\\"url\\\\\\\":\\\\\\\"/api/report/sim/v1\\\\\\\", \\\\\\\"method\\\\\\\":\\\\\\\"POST\\\\\\\", \\\\\\\"headers\\\\\\\":{ \\\\\\\"Cache-Control\\\\\\\":\\\\\\\"no-cache\\\\\\\", \\\\\\\"Content-Type\\\\\\\":\\\\\\\"application/json\\\\\\\", \\\\\\\"Accept\\\\\\\":\\\\\\\"*/*\\\\\\\", \\\\\\\"Accept-Encoding\\\\\\\":\\\\\\\"gzip, deflate, br\\\\\\\", \\\\\\\"Authorization\\\\\\\":\\\\\\\"Basic ZDM5ZmJjNDktNDZhMi00YmFkLWEwNGItNWJiZWU2OWFlODkxOjEuMi4zLjQ=\\\\\\\", \\\\\\\"Host\\\\\\\":\\\\\\\"mg-iot.sandais.com\\\\\\\", \\\\\\\"User-Agent\\\\\\\":\\\\\\\"PostmanRuntime/7.26.8\\\\\\\", \\\\\\\"Content-Length\\\\\\\":\\\\\\\"103\\\\\\\", \\\\\\\"x-real-ip\\\\\\\":\\\\\\\"182.232.183.255\\\\\\\", \\\\\\\"x-forwarded-for\\\\\\\":\\\\\\\"182.232.183.255, 10.233.67.0\\\\\\\", \\\\\\\"x-forwarded-proto\\\\\\\":\\\\\\\"http\\\\\\\", \\\\\\\"x-ais-username\\\\\\\":\\\\\\\"AisPartner\\\\\\\", \\\\\\\"x-ais-orderref\\\\\\\":\\\\\\\"ReportHTTPfail_202105112105044\\\\\\\", \\\\\\\"x-ais-orderdesc\\\\\\\":\\\\\\\"Report Data to MG\\\\\\\", \\\\\\\"postman-token\\\\\\\":\\\\\\\"27333513-aa45-4090-9ae0-540850db411a\\\\\\\", \\\\\\\"x-envoy-external-address\\\\\\\":\\\\\\\"10.233.67.0\\\\\\\", \\\\\\\"x-request-id\\\\\\\":\\\\\\\"dec32d24-26d0-4dde-ae8b-9b1c3dce3e29\\\\\\\", \\\\\\\"x-envoy-original-path\\\\\\\":\\\\\\\"/httpapis/api/report/sim/v1\\\\\\\", \\\\\\\"x-b3-traceid\\\\\\\":\\\\\\\"112d47fca6f1812e50cf7d1df1d044f0\\\\\\\", \\\\\\\"x-b3-spanid\\\\\\\":\\\\\\\"be0fde3e6cc4f45a\\\\\\\", \\\\\\\"x-b3-parentspanid\\\\\\\":\\\\\\\"50cf7d1df1d044f0\\\\\\\", \\\\\\\"x-b3-sampled\\\\\\\":\\\\\\\"0\\\\\\\", \\\\\\\"x-ais-SessionId\\\\\\\":\\\\\\\"1620744125837\\\\\\\" }, \\\\\\\"queryString\\\\\\\":{ }, \\\\\\\"routeParamteters\\\\\\\":{ }, \\\\\\\"body\\\\\\\":{ \\\\\\\"Payload\\\\\\\":{ \\\\\\\"AA\\\\\\\":\\\\\\\"971\\\\\\\", \\\\\\\"Timestamp\\\\\\\":\\\\\\\"2020-12-31T03:03:18+07:00\\\\\\\" } } }\\\"\r",
									"\r",
									"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
									"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
									"                            console.log(\"headers.x_ais_userName : \" + jsonParseRequestObject.headers[header_x_ais_username] + \" = \" + x_ais_userName);\r",
									"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
									"                            console.log(\"headers.Authorization : \" + jsonParseRequestObject.headers.Authorization + \" = \" + authorization);\r",
									"                            \r",
									"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
									"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_username]).to.eql(x_ais_userName);\r",
									"                            pm.expect(jsonParseRequestObject.headers.Authorization).to.eql(authorization);\r",
									"\r",
									"                            console.log(\"queryString : \" + JSON.stringify(jsonParseRequestObject.queryString) + \" = \" + JSON.stringify({}));\r",
									"                            console.log(\"routeParamteters : \" + JSON.stringify(jsonParseRequestObject.routeParamteters) + \" = \" + JSON.stringify({}));\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.queryString).to.eql({}); \r",
									"                            pm.expect(jsonParseRequestObject.routeParamteters).to.eql({}); \r",
									"\r",
									"                            console.log(\"resquest.body.Payload.\" + SensorKey +\" : \" + jsonParseRequestObject.body.Payload[SensorKey] + \" = \" + sensor.toString());\r",
									"                            console.log(\"resquest.body.Payload.Timestamp : \" + jsonParseRequestObject.body.Payload.Timestamp + \" = \" + timestamp);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.body.Payload[SensorKey]).to.eql(sensor.toString());\r",
									"                            pm.expect(jsonParseRequestObject.body.Payload.Timestamp).to.eql(timestamp); \r",
									"                           \r",
									"                            // check responseObject\r",
									"                            // responseObject: \"{\"OperationStatus\":{\"Code\":\"40305\",\"DeveloperMessage\":\"The operation has already expired.\"}}\"\r",
									"\r",
									"                            console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeTheOperationHasAlreadyExpired);\r",
									"                            console.log(\"response.OperationStatus.DeveloperMessage : \" + jsonParseResponseObject.OperationStatus.DeveloperMessage + \" = \" + resultDescriptionTheOperationHasAlreadyExpired);\r",
									"\r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeTheOperationHasAlreadyExpired);  \r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheOperationHasAlreadyExpired);  \r",
									"                        }\r",
									"               \r",
									"                    }); \r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"setTimeout(function(){SearchLogFindTid();}, 30000); \r",
									"setTimeout(function(){CheckLog();}, 50000); \r",
									"\r",
									"setTimeout(function(){RemoveThingStateInfo();}, 60000); \r",
									"setTimeout(function(){RemoveThing();}, 70000); \r",
									"setTimeout(function(){RemoveAccount();}, 80000); \r",
									"setTimeout(function(){RemovePartner();}, 90000); \r",
									"\r",
									"setTimeout(function(){\r",
									"pm.environment.unset(\"current_timestamp\");\r",
									"pm.environment.unset(\"AccessToken\");\r",
									"pm.environment.unset(\"random_number\");\r",
									"pm.environment.unset(\"PartnerName\");\r",
									"pm.environment.unset(\"MerchantContact\");\r",
									"pm.environment.unset(\"CPID\");\r",
									"pm.environment.unset(\"GetResponse_PartnerId\");\r",
									"pm.environment.unset(\"AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountId\");\r",
									"pm.environment.unset(\"random_IM\");\r",
									"pm.environment.unset(\"random_ICCID\");\r",
									"pm.environment.unset(\"ThingName\");\r",
									"pm.environment.unset(\"GetResponse_ThingID\");\r",
									"pm.environment.unset(\"GetResponse_IMSI\");\r",
									"pm.environment.unset(\"encodedKeys_Authorization_Register\");\r",
									"pm.environment.unset(\"encodedKeys_Authorization_Report\");\r",
									"pm.environment.unset(\"random_Sensor\");\r",
									"pm.environment.unset(\"GetResponse_ThingToken\");\r",
									"pm.environment.unset(\"tid\");\r",
									"pm.environment.unset(\"SensorKey_AsgardHTTP\");\r",
									"pm.environment.unset(\"random_Sensor_AsgardHTTP\");\r",
									"pm.environment.unset(\"timestamp\");\r",
									"}, 105000);\r",
									"setTimeout(async function(){}, 110000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-ais-UserName",
								"type": "text",
								"value": "{{x_ais_UserName_AisPartner}}"
							},
							{
								"key": "x-ais-OrderRef",
								"value": "{{x_ais_OrderRef_ReportHTTP_fail}}{{current_timestamp}}"
							},
							{
								"key": "x-ais-OrderDesc",
								"type": "text",
								"value": "{{x_ais_OrderDesc_ReportHTTP}}"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{Basic}} {{encodedKeys_Authorization_Report}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Payload\": {\r\n        \"{{SensorKey_AsgardHTTP}}\" : \"{{random_Sensor_AsgardHTTP}}\", \r\n        \"Timestamp\": \"{{timestamp}}\"\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{url}}{{httpapis}}/api/report/sim/v1",
							"host": [
								"{{url}}{{httpapis}}"
							],
							"path": [
								"api",
								"report",
								"sim",
								"v1"
							]
						},
						"description": "Type:Desire"
					},
					"response": []
				}
			]
		},
		{
			"name": "Config",
			"item": [
				{
					"name": "AsgardHTTPeSimConfig_TST_F2_1_1_001_Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var Basic = pm.environment.get(\"Basic\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to xAisOrderRef \"RemoveThing_\"\r",
									"var x_ais_OrderRef_RemoveThing = pm.globals.get(\"x_ais_OrderRef_RemoveThing\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"var x_ais_OrderDesc_RemoveThing = pm.globals.get(\"x_ais_OrderDesc_RemoveThing\");\r",
									"//get global variable to xAisOrderRef \"RemoveThingStateInfo_\"\r",
									"var x_ais_OrderRef_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderRef_RemoveThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThingStateInfo\"\r",
									"var x_ais_OrderDesc_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_RemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals ConfigGroup --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveConfigGroup_\"\r",
									"const x_ais_OrderRef_RemoveConfigGroup = pm.globals.get(\"x_ais_OrderRef_RemoveConfigGroup\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveConfigGroup\"\r",
									"const x_ais_OrderDesc_RemoveConfigGroup = pm.globals.get(\"x_ais_OrderDesc_RemoveConfigGroup\");\r",
									"//get global variable to xAisOrderRef \"InquiryConfigGroup_\"\r",
									"var x_ais_OrderRef_InquiryConfigGroup = pm.globals.get(\"x_ais_OrderRef_InquiryConfigGroup\");\r",
									"//get global variable to x_ais_OrderDesc \"InquiryConfigGroup\"\r",
									"var x_ais_OrderDesc_InquiryConfigGroup = pm.globals.get(\"x_ais_OrderDesc_InquiryConfigGroup\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals AsgardHTTP --------------//\r",
									"//get global variable to x_ais_OrderRef \"ConfigHTTP_\"\r",
									"var x_ais_OrderRef_ConfigHTTP = pm.globals.get(\"x_ais_OrderRef_ConfigHTTP\");\r",
									"//get global variable to x_ais_OrderDesc \"Get Config from MG\"\r",
									"var x_ais_OrderDesc_ConfigHTTP = pm.globals.get(\"x_ais_OrderDesc_ConfigHTTP\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get url Remove --------------//\r",
									"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
									"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"var urlThingRemoveThing = pm.globals.get(\"urlThingRemoveThing\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"var urlThingRemoveThingStateInfo = pm.globals.get(\"urlThingRemoveThingStateInfo\");\r",
									"//get global variable to url \"/ConfigGroup/RemoveConfigGroup\"\r",
									"var urlConfigGroupRemoveConfigGroup = pm.globals.get(\"urlConfigGroupRemoveConfigGroup\");\r",
									"//---------------- get url Inquiry --------------//\r",
									"//get global variable to url \"/api/v1/ConfigGroup/InquiryConfigGroup\"\r",
									"var urlConfigGroupInquiryConfigGroup = pm.globals.get(\"urlConfigGroupInquiryConfigGroup\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"RemovePartner is Success\"\r",
									"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
									"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
									"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
									"//get global variable to resultDescription \"RemoveThing is Success\"\r",
									"var resultDescriptionRemoveThing = pm.globals.get(\"resultDescriptionRemoveThing\");\r",
									"//get global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"var resultDescriptionRemoveThingStateInfo = pm.globals.get(\"resultDescriptionRemoveThingStateInfo\");\r",
									"//get global variable to resultDescription \"RemoveConfigGroup is Success\"\r",
									"var resultDescriptionRemoveConfigGroup = pm.globals.get(\"resultDescriptionRemoveConfigGroup\");\r",
									"//get global variable to resultDescription \"InquiryConfigGroup is Success\"\r",
									"var resultDescriptionInquiryConfigGroup = pm.globals.get(\"resultDescriptionInquiryConfigGroup\");\r",
									"//------------------------------------------------------------//\r",
									"// //get global variable to resultDescription \"ConfigProcess is Success\"\r",
									"// var resultDescriptionConfigProcessIsSuccess = pm.globals.get(\"resultDescriptionConfigProcessIsSuccess\");\r",
									"//get global variable to resultDescription \"The requested operation was successfully.\"\r",
									"var resultDescriptionTheRequestedOperationWasSuccessfully = pm.globals.get(\"resultDescriptionTheRequestedOperationWasSuccessfully\");\r",
									"//------------------------------------------------------------//\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"// RefreshTime\r",
									"pm.environment.set(\"GetResponse_Config_RefreshTime\", jsonData.Config.RefreshTime)\r",
									"// Max\r",
									"pm.environment.set(\"GetResponse_Config_Max\", jsonData.Config.Max)\r",
									"\r",
									"pm.test(\"Asgard HTTP(eSim) Config : Status code is \" + statusCodeSuccess, function () {\r",
									"    pm.response.to.have.status(statusCodeSuccess);\r",
									"});\r",
									"\r",
									"pm.test('Asgard HTTP(eSim) Config : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeSuccess);\r",
									"});\r",
									"\r",
									"pm.test('Asgard HTTP(eSim) Config : OperationStatus DeveloperMessage is '+'\"'+ resultDescriptionTheRequestedOperationWasSuccessfully+'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"});\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// RemovePartner\r",
									" RemovePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemovePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemovePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemovePartner = {\r",
									"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemovePartner,\r",
									"            body: httpRequestRemovePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request RemovePartner');\r",
									"        let response = await reqPromise(optionsRemovePartner);\r",
									"        let jsonDataRemovePartner = await response.json();\r",
									"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
									"    \r",
									"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemovePartner is Success\r",
									"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveAccount\r",
									" RemoveAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemoveAccount = {\r",
									"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveAccount,\r",
									"            body: httpRequestRemoveAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveAccount');\r",
									"        let response = await reqPromise(optionsRemoveAccount);\r",
									"        let jsonDataRemoveAccount = await response.json();\r",
									"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
									"    \r",
									"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveAccount is Success\r",
									"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThing\r",
									" RemoveThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThing = {\r",
									"            url: url + provisioningapis + urlThingRemoveThing,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThing,\r",
									"            body: httpRequestRemoveThing\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveThing');\r",
									"        let response = await reqPromise(optionsRemoveThing);\r",
									"        let jsonDataRemoveThing = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThing)\r",
									"    \r",
									"        let operationStatusRemoveThing = await jsonDataRemoveThing.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThing : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThing : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThing is Success\r",
									"        pm.test('RemoveThing : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThing+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Description', resultDescriptionRemoveThing);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThingStateInfo\r",
									" RemoveThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"            \r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\"),\r",
									"                \"stateType\": fieldDataValue.CreateThingStateInfo.Type_Report, //Report\r",
									"                \"stateKey\": fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP //AA\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingRemoveThingStateInfo,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThingStateInfo,\r",
									"            body: httpRequestRemoveThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('response RemoveThingStateInfo');\r",
									"        let response = await reqPromise(optionsRemoveThingStateInfo);\r",
									"        let jsonDataRemoveThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThingStateInfo)\r",
									"    \r",
									"        let operationStatusRemoveThingStateInfo = await jsonDataRemoveThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThingStateInfo is Success\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThingStateInfo+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Description', resultDescriptionRemoveThingStateInfo);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveConfigGroup\r",
									" RemoveConfigGroup = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveConfigGroup = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_RemoveConfigGroup + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_RemoveConfigGroup,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey': pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveConfigGroup = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ConfigGroupId\": pm.environment.get(\"GetResponse_ConfigGroupId\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveConfigGroup = {\r",
									"            url: url + provisioningapis + urlConfigGroupRemoveConfigGroup,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveConfigGroup,\r",
									"            body: httpRequestRemoveConfigGroup\r",
									"        };\r",
									"\r",
									"        // console.log('response RemoveConfigGroup');\r",
									"        let response = await reqPromise(optionsRemoveConfigGroup);\r",
									"        let jsonDataRemoveConfigGroup = await response.json();\r",
									"        // console.log('jsonDataRemoveConfigGroup',jsonDataRemoveConfigGroup)\r",
									"    \r",
									"        let operationStatusRemoveConfigGroup = await jsonDataRemoveConfigGroup.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveConfigGroup : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveConfigGroup : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveConfigGroup).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveConfigGroup is Success\r",
									"        pm.test('RemoveConfigGroup : OperationStatus Description is '+'\"'+ resultDescriptionRemoveConfigGroup+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveConfigGroup).to.have.property('Description', resultDescriptionRemoveConfigGroup);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"//---------------- LogDefaultValue --------------//\r",
									"//set variable to LogDefaultValue JSON.parse\r",
									"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
									"// console.log('LogDefaultValue',LogDefaultValue);\r",
									"//---------------- set globals Other --------------//\r",
									"\r",
									"var SearchLog = LogDefaultValue.SearchLog;\r",
									"// console.log('SearchLog',SearchLog);\r",
									"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
									"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
									"var kbn_version = SearchLog.header.kbn_version;\r",
									"var authorization = SearchLog.header.Authorization;\r",
									"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
									"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
									"var namespace = LogDefaultValue.Other.namespace;\r",
									"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
									"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
									"var header_x_ais_username = LogDefaultValue.Other.header_x_ais_username;\r",
									"var methodGet = LogDefaultValue.Other.methodGet;\r",
									"\r",
									"// Detail\r",
									"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
									"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
									"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
									"\r",
									"// Summary\r",
									"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
									"\r",
									"// Asgard.Http.APIs\r",
									"var applicationName = LogDefaultValue.AsgardHTTP.applicationName;\r",
									"var cmdName = LogDefaultValue.AsgardHTTP.cmdNameConfig;\r",
									"var endPointNameRabbitMQ = LogDefaultValue.AsgardHTTP.endPointNameRabbitMQ;\r",
									"var containerId = LogDefaultValue.AsgardHTTP.containerId;\r",
									"var requestObjectUrlStaging = LogDefaultValue.AsgardHTTP.requestObjectUrlConfigMgStaging;\r",
									"var urlConfig  = LogDefaultValue.AsgardHTTP.urlConfig;\r",
									"\r",
									"// Check CDR (Summary Log) and EDR (Detail Log)\r",
									"SearchLogFindTid = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSearchLogFindTid = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = x_ais_OrderRef_ConfigHTTP + current_timestamp;\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestSearchLogFindTid = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"\r",
									"        let optionsSearchLogFindTid = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptSearchLogFindTid,\r",
									"            body: httpRequestSearchLogFindTid\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsSearchLogFindTid);\r",
									"        let jsonDataSearchLogFindTid = await response.json();\r",
									"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
									"        // console.log('hits',hits)\r",
									"  \r",
									"        // find tid\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            // let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"        \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            if(applicationNameValue == applicationName){\r",
									"                let tid = hits[i]._source.cauldron.tid;\r",
									"                pm.environment.set(\"tid\", tid);\r",
									"                break;\r",
									"           }\r",
									"        }\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"CheckLog = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCheckLog = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = pm.environment.get(\"tid\");\r",
									"\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestCheckLog = {\r",
									"            mode: 'raw',\r",
									"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"        let optionsCheckLog = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptCheckLog,\r",
									"            body: httpRequestCheckLog\r",
									"        }; \r",
									"        let response = await reqPromise(optionsCheckLog);\r",
									"        let jsonDataCheckLog = await response.json();\r",
									"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
									"        \r",
									"        // //200\r",
									"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });     \r",
									"        \r",
									"        let hits = jsonDataCheckLog.hits.hits\r",
									"        console.log('hits',hits)\r",
									"  \r",
									"        // find logType\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            //  let logType = hits[i]._source.cauldron.logType\r",
									"            let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"           \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            \r",
									"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
									"            // console.log('resultDataLog',resultDataLog)\r",
									"\r",
									"            let tidControl = x_ais_OrderRef_ConfigHTTP  + current_timestamp;\r",
									"            // console.log(tidControl);\r",
									"            if(applicationNameValue == applicationName){\r",
									"                 \r",
									"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and Asgard.Http.APIs\r",
									"                    pm.test(\"Check Summary Log : Asgard_HTTP(eSim) Config\" , function () {\r",
									"                        console.log(\"======== Check Summary Log ( Expected = Actual) [Asgard_HTTP(eSim) Config] ==================\");\r",
									"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
									"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
									"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeSuccess);\r",
									"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
									"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        // console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
									"                        // console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
									"\r",
									"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
									"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
									"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeSuccess); \r",
									"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionTheRequestedOperationWasSuccessfully); \r",
									"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
									"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"\r",
									"                        let thingId = pm.environment.get(\"GetResponse_ThingID\");\r",
									"                        let imei = (pm.environment.get(\"random_IM\")).replace(\" \", \"\");\r",
									"                        let imsi = (pm.environment.get(\"GetResponse_IMSI\")).replace(\" \", \"\");\r",
									"                        let customUrl= urlCheckLog + requestObjectUrlStaging;\r",
									"\r",
									"                        // check identity\r",
									"                        // \"identity\":\"{\\\"Imei\\\":\\\"496151103122639\\\",\\\"ThingId\\\":\\\"6013965896d0ed0001f5a46d\\\",\\\"Imsi\\\":\\\"496151103122639\\\"}\"\r",
									"                        let dataSummaryIdentity = JSON.parse(resultDataLog.identity);\r",
									"\r",
									"                        console.log(\"identity.ThingId : \" + dataSummaryIdentity.ThingId + \" = \" + thingId);\r",
									"                        console.log(\"identity.Imei : \" + dataSummaryIdentity.Imei + \" = \" + imei);\r",
									"                        console.log(\"identity.Imsi : \" + dataSummaryIdentity.Imsi + \" = \" + imsi);\r",
									"\r",
									"                        pm.expect(dataSummaryIdentity.ThingId).to.eql(thingId); \r",
									"                        pm.expect(dataSummaryIdentity.Imei).to.eql(imei); \r",
									"                        pm.expect(dataSummaryIdentity.Imsi).to.eql(imsi); \r",
									"\r",
									"                        // check custom\r",
									"                        // \\\"custom\\\":{ \\\"customData\\\":{ \\\"Imsi\\\":[ \\\"850792818300963\\\" ], \\\"url\\\":\\\"mg-iot.sandais.com/api/config/sim/v1/\\\", \\\"Imei\\\":[ \\\"850792818300963\\\" ], \\\"ThingID\\\":[ \\\"609a8c74f1b8790001876df6\\\" ] }, \\\"endPointSummary\\\":[ { \\\"no\\\":\\\"1\\\", \\\"endPointName\\\":\\\"db.ThingsCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:Inquiry was Success\\\", \\\"processTime\\\":0.0008 }, { \\\"no\\\":\\\"2\\\", \\\"endPointName\\\":\\\"db.AccountsCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:Inquiry was Success\\\", \\\"processTime\\\":0.0005 }, { \\\"no\\\":\\\"3\\\", \\\"endPointName\\\":\\\"db.OnlineConfigsCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:Inquiry was Success\\\", \\\"processTime\\\":0.0003 } ] }\r",
									"\r",
									"                        let customData = resultDataLog.custom.customData\r",
									"\r",
									"                        console.log(\"custom.url : \" + customData.url + \" = \" + customUrl);\r",
									"                        console.log(\"custom.Imei[0] : \" + customData.Imei[0] + \" = \" + imei);\r",
									"                        console.log(\"custom.Imsi[0] : \" + customData.Imsi[0] + \" = \" + imsi);\r",
									"                        console.log(\"custom.ThingID[0] : \" + customData.ThingID[0] + \" = \" + thingId);\r",
									"\r",
									"                        pm.expect(customData.url).to.eql(customUrl); \r",
									"                        pm.expect(customData.Imei[0]).to.eql(imei); \r",
									"                        pm.expect(customData.Imsi[0]).to.eql(imsi); \r",
									"                        pm.expect(customData.ThingID[0]).to.eql(thingId); \r",
									"\r",
									"                        let custom = resultDataLog.custom.endPointSummary;\r",
									"                        let countCustom = custom.length;\r",
									"                       \r",
									"                        // [\"db.ThingsCollection\",\"db.AccountsCollection\",\"db.OnlineConfigsCollection\"]\r",
									"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_Asgard_HTTP_eSim_Config;\r",
									"                        // [\"20000:Inquiry was Success\",\"20000:Inquiry was Success\",\"20000:Inquiry was Success\"]\r",
									"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_Asgard_HTTP_eSim_Config;\r",
									"                        let countCustomStep = dataEndPointName.length;\r",
									"\r",
									"                        console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep);\r",
									"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
									"                        \r",
									"                        for(let i=0;i<countCustomStep;i++){\r",
									"                            let no = custom[i].no;\r",
									"                            let valueEndPointName = custom[i].endPointName;\r",
									"                            let valueResponseStatus = custom[i].responseStatus;\r",
									"                            // console.log(\"i\",i);\r",
									"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
									"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
									"\r",
									"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString());\r",
									"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i]);\r",
									"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i]);\r",
									"\r",
									"                            pm.expect(no).to.eql((i+1).toString()); \r",
									"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
									"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]); \r",
									"                        }\r",
									"                    }); \r",
									"                }\r",
									"\r",
									"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and Asgard.Http.APIs\r",
									"\r",
									"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
									"                    // console.log('endPointNameValue ',endPointNameValue)\r",
									"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [Asgard_HTTP(eSim) Config]\", function () {\r",
									"                        console.log(\"======== Check Detail Log ( Expected = Actual) [Asgard_HTTP(eSim) Config] ==================\");\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
									"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
									"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
									"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.custom1.activityLog.processTime + \" = \" + resultDataLog.custom1.activityLog.processTime);\r",
									"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
									"\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
									"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
									"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
									"\r",
									"                        let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
									"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
									"                        let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
									"                            // console.log('jsonParseResponseObject',jsonParseResponseObject); \r",
									"                        let url = urlConfig; \r",
									"                        let x_ais_orderref = x_ais_OrderRef_ConfigHTTP + current_timestamp;\r",
									"                        let x_ais_orderdesc = x_ais_OrderDesc_ConfigHTTP;\r",
									"                        let x_ais_userName = x_ais_UserName_AisPartner;\r",
									"                        let authorization = Basic + ' ' + pm.environment.get(\"encodedKeys_Authorization_Config\");\r",
									"                        let imei = (pm.environment.get(\"random_IM\")).replace(\" \", \"\");\r",
									"                        let imsi = (pm.environment.get(\"GetResponse_IMSI\")).replace(\" \", \"\");\r",
									"                        let thingId = pm.environment.get(\"GetResponse_ThingID\");\r",
									"                        let customUrl= urlCheckLog + requestObjectUrlStaging;\r",
									"                        let SensorKey = fieldDataValue.CreateThingStateInfo.SensorKey;\r",
									"                        let sensor = pm.environment.get(\"random_Sensor\");\r",
									"                        let timestamp = pm.environment.get(\"timestamp\");\r",
									"\r",
									"                        if( endPointNameValue == undefined){\r",
									"                            // check requestObject\r",
									"                            // \"requestObject\":\"{\\\"url\\\":\\\"/api/config/sim/v1/\\\",\\\"method\\\":\\\"GET\\\",\\\"headers\\\":{\\\"Cache-Control\\\":\\\"no-cache\\\",\\\"Content-Type\\\":\\\"application/json\\\",\\\"Accept\\\":\\\"*/*\\\",\\\"Accept-Encoding\\\":\\\"gzip,deflate,br\\\",\\\"Authorization\\\":\\\"Basic NWUzYTExNzUtNmZiZC00MDJhLWI1YWUtOTllNzVhM2ZhNzMxOjEuMi4zLjQ=\\\",\\\"Host\\\":\\\"mg-staging.sandais.com\\\",\\\"User-Agent\\\":\\\"PostmanRuntime/7.26.8\\\",\\\"Content-Length\\\":\\\"0\\\",\\\"x-real-ip\\\":\\\"171.96.174.10\\\",\\\"x-forwarded-for\\\":\\\"171.96.174.10\\\",\\\"x-forwarded-proto\\\":\\\"https\\\",\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"ConfigHTTP_202101292101316\\\",\\\"x-ais-orderdesc\\\":\\\"Get Config from MG\\\",\\\"postman-token\\\":\\\"a6c6bd7e-e6de-4209-ad43-47a179c29a76\\\",\\\"x-request-id\\\":\\\"a1fcae98-fb1a-461c-ab3d-3ed1ffface66\\\",\\\"x-b3-traceid\\\":\\\"6a0b46f50f28e0c24438a0e975161cbe\\\",\\\"x-b3-spanid\\\":\\\"4438a0e975161cbe\\\",\\\"x-b3-sampled\\\":\\\"0\\\",\\\"x-ais-SessionId\\\":\\\"1611931525595\\\",\\\"identity\\\":\\\"{\\\\\\\"Imei\\\\\\\":\\\\\\\"223518843379905\\\\\\\",\\\\\\\"ThingID\\\\\\\":\\\\\\\"60141f8296d0ed0001f5d8f7\\\\\\\",\\\\\\\"Imsi\\\\\\\":\\\\\\\"223518843379905\\\\\\\"}\\\",\\\"custom\\\":\\\"{\\\\\\\"Imei\\\\\\\":[\\\\\\\"223518843379905\\\\\\\"],\\\\\\\"url\\\\\\\":\\\\\\\"mg-staging.sandais.com/api/config/sim/v1/\\\\\\\",\\\\\\\"Imsi\\\\\\\":[\\\\\\\"223518843379905\\\\\\\"],\\\\\\\"ThingID\\\\\\\":[\\\\\\\"60141f8296d0ed0001f5d8f7\\\\\\\"]}\\\"},\\\"queryString\\\":{\\\"Sensor\\\":\\\"\\\"},\\\"routeParamteters\\\":{}}\"\r",
									"\r",
									"                            \t\r",
									"                            // \\\"requestObject\\\":\\\"{ \\\\\\\"url\\\\\\\":\\\\\\\"/api/config/sim/v1/\\\\\\\", \\\\\\\"method\\\\\\\":\\\\\\\"GET\\\\\\\", \\\\\\\"headers\\\\\\\":{ \\\\\\\"Cache-Control\\\\\\\":\\\\\\\"no-cache\\\\\\\", \\\\\\\"Content-Type\\\\\\\":\\\\\\\"application/json\\\\\\\", \\\\\\\"Accept\\\\\\\":\\\\\\\"*/*\\\\\\\", \\\\\\\"Accept-Encoding\\\\\\\":\\\\\\\"gzip, deflate, br\\\\\\\", \\\\\\\"Authorization\\\\\\\":\\\\\\\"Basic YWMyZTUxMTMtY2QyNy00YjA4LWFkMjktZDRlYTdlNDI4M2Q1OjEuMi4zLjQ=\\\\\\\", \\\\\\\"Host\\\\\\\":\\\\\\\"mg-iot.sandais.com\\\\\\\", \\\\\\\"User-Agent\\\\\\\":\\\\\\\"PostmanRuntime/7.26.8\\\\\\\", \\\\\\\"Content-Length\\\\\\\":\\\\\\\"0\\\\\\\", \\\\\\\"x-real-ip\\\\\\\":\\\\\\\"182.232.183.255\\\\\\\", \\\\\\\"x-forwarded-for\\\\\\\":\\\\\\\"182.232.183.255, 10.233.65.1\\\\\\\", \\\\\\\"x-forwarded-proto\\\\\\\":\\\\\\\"http\\\\\\\", \\\\\\\"x-ais-username\\\\\\\":\\\\\\\"AisPartner\\\\\\\", \\\\\\\"x-ais-orderref\\\\\\\":\\\\\\\"ConfigHTTP_202105112005930\\\\\\\", \\\\\\\"x-ais-orderdesc\\\\\\\":\\\\\\\"Get Config from MG\\\\\\\", \\\\\\\"postman-token\\\\\\\":\\\\\\\"f7316b93-1f2a-47f2-ae82-65090133abdb\\\\\\\", \\\\\\\"x-envoy-external-address\\\\\\\":\\\\\\\"10.233.65.1\\\\\\\", \\\\\\\"x-request-id\\\\\\\":\\\\\\\"2f817c85-55c0-49ee-81d1-9db101dc931a\\\\\\\", \\\\\\\"x-envoy-original-path\\\\\\\":\\\\\\\"/httpapis/api/config/sim/v1/?Sensor\\\\\\\", \\\\\\\"x-b3-traceid\\\\\\\":\\\\\\\"ad75689217333f50e2f518895a7a6e51\\\\\\\", \\\\\\\"x-b3-spanid\\\\\\\":\\\\\\\"867d3f08c36e8c42\\\\\\\", \\\\\\\"x-b3-parentspanid\\\\\\\":\\\\\\\"e2f518895a7a6e51\\\\\\\", \\\\\\\"x-b3-sampled\\\\\\\":\\\\\\\"0\\\\\\\", \\\\\\\"x-ais-SessionId\\\\\\\":\\\\\\\"1620741258740\\\\\\\", \\\\\\\"identity\\\\\\\":\\\\\\\"{ \\\\\\\\\\\\\\\"Imei\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"850792818300963\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"ThingId\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"609a8c74f1b8790001876df6\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Imsi\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"850792818300963\\\\\\\\\\\\\\\" }\\\\\\\", \\\\\\\"custom\\\\\\\":\\\\\\\"{ \\\\\\\\\\\\\\\"Imsi\\\\\\\\\\\\\\\":[ \\\\\\\\\\\\\\\"850792818300963\\\\\\\\\\\\\\\" ], \\\\\\\\\\\\\\\"url\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"mg-iot.sandais.com/api/config/sim/v1/\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Imei\\\\\\\\\\\\\\\":[ \\\\\\\\\\\\\\\"850792818300963\\\\\\\\\\\\\\\" ], \\\\\\\\\\\\\\\"ThingID\\\\\\\\\\\\\\\":[ \\\\\\\\\\\\\\\"609a8c74f1b8790001876df6\\\\\\\\\\\\\\\" ] }\\\\\\\" }, \\\\\\\"queryString\\\\\\\":{ \\\\\\\"Sensor\\\\\\\":\\\\\\\"\\\\\\\" }, \\\\\\\"routeParamteters\\\\\\\":{ } }\\\"\r",
									"\r",
									"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
									"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodGet);\r",
									"                            console.log(\"headers.x_ais_userName : \" + jsonParseRequestObject.headers[header_x_ais_username] + \" = \" + x_ais_userName);\r",
									"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
									"                            console.log(\"headers.Authorization : \" + jsonParseRequestObject.headers.Authorization + \" = \" + authorization);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
									"                            pm.expect(jsonParseRequestObject.method).to.eql(methodGet);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_username]).to.eql(x_ais_userName);\r",
									"                            pm.expect(jsonParseRequestObject.headers.Authorization).to.eql(authorization);\r",
									"\r",
									"                            // check requestObject headers.identity\r",
									"                            let jsonParseRequestObjectHeadersIdentity = JSON.parse(jsonParseRequestObject.headers.identity);\r",
									"                            // console.log('jsonParseRequestObjectHeadersIdentity',jsonParseRequestObjectHeadersIdentity);\r",
									"\r",
									"                            console.log(\"headers.identity.Imei : \" + jsonParseRequestObjectHeadersIdentity.Imei + \" = \" + imei);\r",
									"                            console.log(\"headers.identity.Imsi : \" + jsonParseRequestObjectHeadersIdentity.Imsi + \" = \" + imsi);\r",
									"                            console.log(\"headers.identity.ThingId : \" + jsonParseRequestObjectHeadersIdentity.ThingId + \" = \" + thingId);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObjectHeadersIdentity.Imei).to.eql(imei);\r",
									"                            pm.expect(jsonParseRequestObjectHeadersIdentity.Imsi).to.eql(imsi);\r",
									"                            pm.expect(jsonParseRequestObjectHeadersIdentity.ThingId).to.eql(thingId);\r",
									"\r",
									"                            // check requestObject headers.custom\r",
									"                            let jsonParseRequestObjectHeadersCustom = JSON.parse(jsonParseRequestObject.headers.custom);\r",
									"                            // console.log('jsonParseRequestObjectHeadersCustom',jsonParseRequestObjectHeadersCustom);\r",
									"\r",
									"                            console.log(\"headers.custom.url : \" + jsonParseRequestObjectHeadersCustom.url + \" = \" + customUrl);\r",
									"                            console.log(\"headers.custom.Imei[0] : \" + jsonParseRequestObjectHeadersCustom.Imei[0] + \" = \" + imei);\r",
									"                            console.log(\"headers.custom.Imsi[0] : \" + jsonParseRequestObjectHeadersCustom.Imsi[0] + \" = \" + imsi);\r",
									"                            console.log(\"headers.custom.ThingID[0] : \" + jsonParseRequestObjectHeadersCustom.ThingID[0] + \" = \" + thingId);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObjectHeadersCustom.url).to.eql(customUrl);\r",
									"                            pm.expect(jsonParseRequestObjectHeadersCustom.Imei[0]).to.eql(imei);\r",
									"                            pm.expect(jsonParseRequestObjectHeadersCustom.Imsi[0]).to.eql(imsi);\r",
									"                            pm.expect(jsonParseRequestObjectHeadersCustom.ThingID[0]).to.eql(thingId);\r",
									"\r",
									"                            console.log(\"queryString.Sensor : \" + JSON.stringify(jsonParseRequestObject.queryString.Sensor) + \" = \" + JSON.stringify(\"\"));\r",
									"                            console.log(\"routeParamteters : \" + JSON.stringify(jsonParseRequestObject.routeParamteters) + \" = \" + JSON.stringify({}));\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.queryString.Sensor).to.eql(\"\"); \r",
									"                            pm.expect(jsonParseRequestObject.routeParamteters).to.eql({}); \r",
									"\r",
									"                            // check responseObject\r",
									"                            // \"responseObject\":\"{\\\"Config\\\":{\\\"RefreshTime\\\":\\\"On\\\",\\\"Max\\\":\\\"99\\\"},\\\"OperationStatus\\\":{\\\"Code\\\":\\\"20000\\\",\\\"DeveloperMessage\\\":\\\"The requested operation was successfully.\\\"}}\"\r",
									"\r",
									"                            console.log(\"response.Config.RefreshTime : \" + jsonParseResponseObject.Config.RefreshTime + \" = \" + fieldDataValue.ConfigGroup.RefreshTime);\r",
									"                            console.log(\"response.Config.Max : \" + jsonParseResponseObject.Config.Max + \" = \" + fieldDataValue.ConfigGroup.Max); \r",
									"                            \r",
									"                            pm.expect(jsonParseResponseObject.Config.RefreshTime).to.eql(fieldDataValue.ConfigGroup.RefreshTime);  \r",
									"                            pm.expect(jsonParseResponseObject.Config.Max).to.eql(fieldDataValue.ConfigGroup.Max);  \r",
									"\r",
									"                            console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeSuccess);\r",
									"                            console.log(\"response.OperationStatus.DeveloperMessage : \" + jsonParseResponseObject.OperationStatus.DeveloperMessage + \" = \" + resultDescriptionTheRequestedOperationWasSuccessfully); \r",
									"\r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeSuccess);  \r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheRequestedOperationWasSuccessfully);  \r",
									"                        }\r",
									"                    }); \r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// InquiryConfigGroup\r",
									"InquiryConfigGroup = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptInquiryConfigGroup = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_InquiryConfigGroup + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_InquiryConfigGroup,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestInquiryConfigGroup = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsInquiryConfigGroup = {\r",
									"            url: url + provisioningapis + urlConfigGroupInquiryConfigGroup,\r",
									"            method: 'POST',\r",
									"            header: headersOptInquiryConfigGroup,\r",
									"            body: httpRequestInquiryConfigGroup\r",
									"        };\r",
									"\r",
									"        // console.log('request InquiryConfigGroup');\r",
									"        let response = await reqPromise(optionsInquiryConfigGroup);\r",
									"        let jsonDataInquiryConfigGroup = await response.json();\r",
									"        // console.log('jsonDataInquiryConfigGroup',jsonDataInquiryConfigGroup)\r",
									"    \r",
									"        let operationStatusInquiryConfigGroup = await jsonDataInquiryConfigGroup.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"InquiryConfigGroup : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('InquiryConfigGroup : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusInquiryConfigGroup).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //InquiryConfigGroup is Success\r",
									"        pm.test('InquiryConfigGroup : OperationStatus Description is '+'\"'+ resultDescriptionInquiryConfigGroup+'\"', function () {\r",
									"            pm.expect(operationStatusInquiryConfigGroup).to.have.property('Description', resultDescriptionInquiryConfigGroup);\r",
									"        });\r",
									"\r",
									"        //Check Data\r",
									"        let configGroupInfo = await jsonDataInquiryConfigGroup.ConfigGroupInfo;\r",
									"        // console.log('configGroupInfo',configGroupInfo);\r",
									"\r",
									"        for(let i=0;i<configGroupInfo.length;i++){\r",
									"            pm.test('Verify DB Check Data : Config [{ \"RefreshTime\" : \"'+ pm.environment.get(\"GetResponse_Config_RefreshTime\") +'\" ,\"Max\" : \"'+ pm.environment.get(\"GetResponse_Config_Max\") + '\" }]'  , function () {\r",
									"                console.log(\"======== Verify DB Check Data ( Expected = Actual) [Asgard_HTTP(eSim) Config] ==================\");\r",
									"                console.log(\"configGroupInfo[\"+ i +\"].ConfigInfo.RefreshTime : \" + configGroupInfo[i].ConfigInfo.RefreshTime + \" = \" + fieldDataValue.ConfigGroup.RefreshTime);\r",
									"                console.log(\"configGroupInfo[\"+ i +\"].ConfigInfo.Max : \" + configGroupInfo[i].ConfigInfo.Max + \" = \" + fieldDataValue.ConfigGroup.Max);\r",
									"\r",
									"                pm.expect(configGroupInfo[i].ConfigInfo).to.have.property('RefreshTime', fieldDataValue.ConfigGroup.RefreshTime );\r",
									"                pm.expect(configGroupInfo[i].ConfigInfo).to.have.property('Max',  fieldDataValue.ConfigGroup.Max);\r",
									"            });\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"setTimeout(function(){SearchLogFindTid();}, 40000); \r",
									"setTimeout(function(){CheckLog();}, 60000); \r",
									"setTimeout(function(){InquiryConfigGroup();}, 70000); \r",
									"\r",
									"setTimeout(function(){RemoveConfigGroup();}, 80000); \r",
									"setTimeout(function(){RemoveThingStateInfo();}, 90000); \r",
									"setTimeout(function(){RemoveThing();}, 100000); \r",
									"setTimeout(function(){RemoveAccount();}, 110000); \r",
									"setTimeout(function(){RemovePartner();}, 120000); \r",
									"\r",
									"setTimeout(function(){\r",
									"pm.environment.unset(\"current_timestamp\");\r",
									"pm.environment.unset(\"AccessToken\");\r",
									"pm.environment.unset(\"random_number\");\r",
									"pm.environment.unset(\"PartnerName\");\r",
									"pm.environment.unset(\"MerchantContact\");\r",
									"pm.environment.unset(\"CPID\");\r",
									"pm.environment.unset(\"GetResponse_PartnerId\");\r",
									"pm.environment.unset(\"AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountId\");\r",
									"pm.environment.unset(\"random_IM\");\r",
									"pm.environment.unset(\"random_ICCID\");\r",
									"pm.environment.unset(\"ThingName\");\r",
									"pm.environment.unset(\"GetResponse_ThingID\");\r",
									"pm.environment.unset(\"GetResponse_IMSI\");\r",
									"pm.environment.unset(\"encodedKeys_Authorization_Register\");\r",
									"pm.environment.unset(\"encodedKeys_Authorization_Config\");\r",
									"pm.environment.unset(\"random_Sensor\");\r",
									"pm.environment.unset(\"GetResponse_ThingToken\");\r",
									"pm.environment.unset(\"tid\");\r",
									"pm.environment.unset(\"GetResponse_ConfigGroupId\");\r",
									"pm.environment.unset(\"ConfigGroupName\");\r",
									"pm.environment.unset(\"GetResponse_Config_RefreshTime\");\r",
									"pm.environment.unset(\"GetResponse_Config_Max\");\r",
									"}, 125000); \r",
									"setTimeout(async function(){}, 130000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var Username = pm.environment.get(\"Username\");\r",
									"var Password = pm.environment.get(\"Password\");\r",
									"\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"var httpapis = pm.environment.get(\"httpapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"//format YYYYMMDDHHMMSSS\r",
									"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
									"// console.log('currentTmestamp',currentTmestamp);\r",
									"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var Basic = pm.environment.get(\"Basic\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- statusCodeList --------------//\r",
									"//set variable to statusCodeList JSON.parse\r",
									"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
									"//set global variable to statusCode 200\r",
									"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
									"//set global variable to statusCode 201\r",
									"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultCodeList --------------//\r",
									"//set variable to resultCodeList JSON.parse\r",
									"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
									"//set global variable to resultCode \"20000\"\r",
									"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
									"//set global variable to resultCode \"20100\"\r",
									"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionSuccessList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
									"//set global variable to resultDescription \"SignInProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
									"//set global variable to resultDescription \"CreatePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
									"//set global variable to resultDescription \"CreateAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
									"//set global variable to resultDescription \"CreateThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThing\", resultDescriptionSuccessList.resultDescriptionCreateThing);\r",
									"//set global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThingStateInfo\", resultDescriptionSuccessList.resultDescriptionCreateThingStateInfo);\r",
									"//set global variable to resultDescription \"RemovePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
									"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
									"//set global variable to resultDescription \"RemoveThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThing\", resultDescriptionSuccessList.resultDescriptionRemoveThing);\r",
									"//set global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThingStateInfo\", resultDescriptionSuccessList.resultDescriptionRemoveThingStateInfo);\r",
									"//set global variable to resultDescription \"Register is Success\"\r",
									"pm.globals.set(\"resultDescriptionRegisterIsSuccess\", resultDescriptionSuccessList.resultDescriptionRegisterIsSuccess);\r",
									"//set global variable to resultDescription \"ConfigProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionConfigProcessIsSuccess\", resultDescriptionSuccessList.resultDescriptionConfigProcessIsSuccess);\r",
									"//set global variable to resultDescription \"CreateConfigGroup is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateConfigGroup\", resultDescriptionSuccessList.resultDescriptionCreateConfigGroup);\r",
									"//set global variable to resultDescription \"RemoveConfigGroup is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveConfigGroup\", resultDescriptionSuccessList.resultDescriptionRemoveConfigGroup);\r",
									"//set global variable to resultDescription \"The requested operation was successfully.\"\r",
									"pm.globals.set(\"resultDescriptionTheRequestedOperationWasSuccessfully\", resultDescriptionSuccessList.resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"//set global variable to resultDescription \"InquiryConfigGroup is Success\"\r",
									"pm.globals.set(\"resultDescriptionInquiryConfigGroup\", resultDescriptionSuccessList.resultDescriptionInquiryConfigGroup);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- HeaderList --------------//\r",
									"//set variable to HeaderList JSON.parse\r",
									"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
									"//---------------- set globals Other --------------//\r",
									"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
									"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
									"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
									"//set global variable to kbn-versio \"7.5.1\"\r",
									"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Signin_ --------------//\r",
									"//set global variable to x_ais_OrderRef \"Signin_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreatePartner --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
									"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
									"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
									"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreateAccount --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
									"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
									"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Thing --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThing\", HeaderList.Thing.x_ais_OrderRef_CreateThing);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThing\", HeaderList.Thing.x_ais_OrderDesc_CreateThing);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThing\", HeaderList.Thing.x_ais_OrderRef_RemoveThing);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThing\", HeaderList.Thing.x_ais_OrderDesc_RemoveThing);\r",
									"//set global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_RemoveThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_RemoveThingStateInfo);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals AsgardHTTP --------------//\r",
									"//set global variable to x_ais_OrderRef \"RegisHTTP_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RegisHTTP\", HeaderList.AsgardHTTP.x_ais_OrderRef_RegisHTTP);\r",
									"//set global variable to x_ais_OrderDesc \"Register Thing in MG\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RegisHTTP\", HeaderList.AsgardHTTP.x_ais_OrderDesc_RegisHTTP);\r",
									"//set global variable to x_ais_OrderRef \"ConfigHTTP_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ConfigHTTP\", HeaderList.AsgardHTTP.x_ais_OrderRef_ConfigHTTP);\r",
									"//set global variable to x_ais_OrderDesc \"Get Config from MG\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_ConfigHTTP\", HeaderList.AsgardHTTP.x_ais_OrderDesc_ConfigHTTP);\r",
									"//set global variable to x_ais_OrderRef \"ReportHTTP_\"\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals ConfigGroup --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateConfigGroup_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateConfigGroup\", HeaderList.ConfigGroup.x_ais_OrderRef_CreateConfigGroup);\r",
									"//set global variable to x_ais_OrderDesc \"CreateConfigGroup\"\r",
									" pm.globals.set(\"x_ais_OrderDesc_CreateConfigGroup\", HeaderList.ConfigGroup.x_ais_OrderDesc_CreateConfigGroup);\r",
									"//set global variable to x_ais_OrderRef \"RemoveConfigGroup_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveConfigGroup\", HeaderList.ConfigGroup.x_ais_OrderRef_RemoveConfigGroup);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveConfigGroup\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveConfigGroup\", HeaderList.ConfigGroup.x_ais_OrderDesc_RemoveConfigGroup);\r",
									"//set global variable to x_ais_OrderRef \"InquiryConfigGroup_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_InquiryConfigGroup\", HeaderList.ConfigGroup.x_ais_OrderRef_InquiryConfigGroup);\r",
									"//set global variable to x_ais_OrderDesc \"InquiryConfigGroup\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_InquiryConfigGroup\", HeaderList.ConfigGroup.x_ais_OrderDesc_InquiryConfigGroup);\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"SignInProcess is Success\"\r",
									"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
									"//get global variable to resultDescription \"CreatePartner is Success\"\r",
									"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
									"//get global variable to resultDescription \"CreateAccount is Success\"\r",
									"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
									"//get global variable to resultDescription \"CreateThing is Success\"\r",
									"var resultDescriptionCreateThing = pm.globals.get(\"resultDescriptionCreateThing\");\r",
									"//get global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"var resultDescriptionCreateThingStateInfo = pm.globals.get(\"resultDescriptionCreateThingStateInfo\");\r",
									"//get global variable to resultDescription \"Register is Success\"\r",
									"var resultDescriptionRegisterIsSuccess = pm.globals.get(\"resultDescriptionRegisterIsSuccess\");\r",
									"//get global variable to resultDescription \"CreateConfigGroup is Success\"\r",
									"var resultDescriptionCreateConfigGroup = pm.globals.get(\"resultDescriptionCreateConfigGroup\");\r",
									"//get global variable to resultDescription \"The requested operation was successfully.\"\r",
									"var resultDescriptionTheRequestedOperationWasSuccessfully = pm.globals.get(\"resultDescriptionTheRequestedOperationWasSuccessfully\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- urlRouteList --------------//\r",
									"//set variable to urlRouteList JSON.parse\r",
									"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
									"//---------------- set url Create --------------//\r",
									"//set global variable to url \"/api/v1/auth/signin\"\r",
									"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
									"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
									"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"pm.globals.set(\"urlThingCreateThing\", urlRouteList.Thing.urlThingCreateThing);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"pm.globals.set(\"urlThingCreateThingStateInfo\", urlRouteList.Thing.urlThingCreateThingStateInfo);\r",
									"//set global variable to url \"/api/register/sim/v1\"\r",
									"pm.globals.set(\"urlAsgardHTTPeSimRegister\", urlRouteList.AsgardHTTPeSim.urlAsgardHTTPeSimRegister);\r",
									"//set global variable to url \"/api/config/sim/v1?Sensor\"\r",
									"pm.globals.set(\"urlAsgardHTTPeSimConfig\", urlRouteList.AsgardHTTPeSim.urlAsgardHTTPeSimConfig);\r",
									"//set global variable to url \"/ConfigGroup/CreateConfigGroup\"\r",
									"pm.globals.set(\"urlConfigGroupCreateConfigGroup\", urlRouteList.ConfigGroup.urlConfigGroupCreateConfigGroup);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get url Create --------------//\r",
									"//get global variable to url \"/api/v1/auth/signin\"\r",
									"var urlSignin = pm.globals.get(\"urlSignin\");\r",
									"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
									"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"var urlThingCreateThing = pm.globals.get(\"urlThingCreateThing\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"var urlThingCreateThingStateInfo = pm.globals.get(\"urlThingCreateThingStateInfo\");\r",
									"//get global variable to url \"/api/register/sim/v1\"\r",
									"var urlAsgardHTTPeSimRegister = pm.globals.get(\"urlAsgardHTTPeSimRegister\");\r",
									"//get global variable to url \"/api/config/sim/v1?Sensor\"\r",
									"var urlAsgardHTTPeSimConfig = pm.globals.get(\"urlAsgardHTTPeSimConfig\");\r",
									"//get global variable to url \"/ConfigGroup/CreateConfigGroup\"\r",
									"var urlConfigGroupCreateConfigGroup = pm.globals.get(\"urlConfigGroupCreateConfigGroup\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set url Remove --------------//\r",
									"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
									"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"pm.globals.set(\"urlThingRemoveThing\", urlRouteList.Thing.urlThingRemoveThing);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"pm.globals.set(\"urlThingRemoveThingStateInfo\", urlRouteList.Thing.urlThingRemoveThingStateInfo);\r",
									"//set global variable to url \"/ConfigGroup/RemoveConfigGroup\"\r",
									"pm.globals.set(\"urlConfigGroupRemoveConfigGroup\", urlRouteList.ConfigGroup.urlConfigGroupRemoveConfigGroup);\r",
									"//---------------- set url Inquiry --------------//\r",
									"//set global variable to url \"/api/v1/ConfigGroup/InquiryConfigGroup\"\r",
									"pm.globals.set(\"urlConfigGroupInquiryConfigGroup\", urlRouteList.ConfigGroup.urlConfigGroupInquiryConfigGroup);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Signin_ --------------//\r",
									"//get global variable to x_ais_OrderRef \"Signin_\"\r",
									"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"var x_ais_OrderRef_CreateThing = pm.globals.get(\"x_ais_OrderRef_CreateThing\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"var x_ais_OrderDesc_CreateThing = pm.globals.get(\"x_ais_OrderDesc_CreateThing\");\r",
									"//get global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"var x_ais_OrderRef_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderRef_CreateThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"var x_ais_OrderDesc_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_CreateThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals AsgardHTTP --------------//\r",
									"//get global variable to x_ais_OrderRef \"RegisHTTP_\"\r",
									"var x_ais_OrderRef_RegisHTTP = pm.globals.get(\"x_ais_OrderRef_RegisHTTP\");\r",
									"//get global variable to x_ais_OrderDesc \"Register Thing in MG\"\r",
									"var x_ais_OrderDesc_RegisHTTP = pm.globals.get(\"x_ais_OrderDesc_RegisHTTP\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals ConfigGroup --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateConfigGroup_\"\r",
									"const x_ais_OrderRef_CreateConfigGroup = pm.globals.get(\"x_ais_OrderRef_CreateConfigGroup\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateConfigGroup\"\r",
									"const x_ais_OrderDesc_CreateConfigGroup = pm.globals.get(\"x_ais_OrderDesc_CreateConfigGroup\");\r",
									"//------------------------------------------------------------//\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// Signin get token\r",
									"Signin = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSignin = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_Signin + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_UserAuthentication,\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestSignin = {\r",
									"            mode: 'raw',\r",
									"            raw:\r",
									"                JSON.stringify({\r",
									"                    username: Username,\r",
									"                    password: Password\r",
									"                })\r",
									"        };\r",
									"\r",
									"        let optionsSignin = {\r",
									"            url: url + provisioningapis + urlSignin,\r",
									"            method: 'POST',\r",
									"            header: headersOptSignin,\r",
									"            body: httpRequestSignin\r",
									"        };\r",
									"        // console.log('request Signin');\r",
									"        let response = await reqPromise(optionsSignin);\r",
									"        let jsonDataSignin = await response.json();\r",
									"\r",
									"        // setAccessToken\r",
									"        await pm.environment.set(\"AccessToken\", jsonDataSignin.AccessToken);\r",
									"\r",
									"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('Signin : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // SignInProcess is Success\r",
									"        pm.test('Signin : OperationStatus Description is ' + '\"' + resultDescriptionSuccessSignIn + '\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
									"        });\r",
									"\r",
									"        //set random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //set PartnerName\r",
									"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
									"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
									"        //set MerchantContact\r",
									"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
									"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
									"        // set CPID\r",
									"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
									"        pm.environment.set(\"CPID\", CPIDValue)\r",
									"\r",
									"        //ConfigGroupName\r",
									"        let ConfigGroupNameValue = fieldDataValue.ConfigGroup.ConfigGroupNameValue; // \"Sensor_TestThingGroupName\"\r",
									"        pm.environment.set(\"ConfigGroupName\", ConfigGroupNameValue +pm.environment.get(\"random_number\"))\r",
									"        \r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreatePartner\r",
									"CreatePartner = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreatePartner = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreatePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreatePartner,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreatePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
									"                \"PartnerType\": [\r",
									"                    \"Supplier\",\r",
									"                    \"Customer\"\r",
									"                ],\r",
									"                \"PartnerDetail\": {\r",
									"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
									"                    \"CPID\": pm.environment.get(\"CPID\")\r",
									"                },\r",
									"                \"Property\": {\r",
									"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreatePartner = {\r",
									"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreatePartner,\r",
									"            body: httpRequestCreatePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsCreatePartner);\r",
									"        let jsonDataCreatePartner = await response.json();\r",
									"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
									"\r",
									"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreatePartner : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreatePartner is Success\r",
									"        pm.test('CreatePartner : OperationStatus Description is ' + '\"' + resultDescriptionCreatePartner + '\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
									"        });\r",
									"\r",
									"        //GetResponse_PartnerId\r",
									"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
									"\r",
									"        //Accountname\r",
									"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
									"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateAccount\r",
									"CreateAccount = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateAccount = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateAccount,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreateAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateAccount = {\r",
									"            url: url + provisioningapis + urlAccountCreateAccount,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateAccount,\r",
									"            body: httpRequestCreateAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateAccount');\r",
									"        let response = await reqPromise(optionsCreateAccount);\r",
									"        let jsonDataCreateAccount = await response.json();\r",
									"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
									"\r",
									"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateAccount : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateAccount is Success\r",
									"        pm.test('CreateAccount : OperationStatus Description is ' + '\"' + resultDescriptionCreateAccount + '\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
									"        });\r",
									"        // GetResponse_AccountName\r",
									"        pm.environment.set(\"GetResponse_AccountName\", jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
									"        // GetResponse_AccountId\r",
									"        pm.environment.set(\"GetResponse_AccountId\", jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
									"        // random_IM\r",
									"        pm.environment.set(\"random_IM\", _.random(10000000, 99999999) + \" \" + _.random(1000000, 9999999))\r",
									"        // random_ICCID\r",
									"        pm.environment.set(\"random_ICCID\", _.random(1000000, 9999999) + \" \" + _.random(100000, 999999))\r",
									"        // random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //ThingName\r",
									"        let thingNameValue = fieldDataValue.Thing.ThingNameValue; // \"Sensor_TestThingName\"\r",
									"        pm.environment.set(\"ThingName\", thingNameValue + pm.environment.get(\"random_number\"))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThing\r",
									"CreateThing = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThing = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateThing + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateThing,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey': pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreateThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingName\": pm.environment.get(\"ThingName\"),\r",
									"                \"IMEI\": pm.environment.get(\"random_IM\"),\r",
									"                \"IMSI\": pm.environment.get(\"random_IM\"),\r",
									"                \"ICCID\": pm.environment.get(\"random_ICCID\"),\r",
									"                \"RouteUrl\": fieldDataValue.Thing.RouteUrlValue , //[\"http://10.12.3.4:2019/api/information/AddInformation\"]\r",
									"                \"RouteInfo\": {\r",
									"                    \"MIMO_ID\": fieldDataValue.Thing.RouteInfoMIMOIDValue , //\"606edada\"\r",
									"                    \"MIMO_SerialNo\": fieldDataValue.Thing.RouteInfoMIMOSerialNoValue //5466758878\r",
									"                },\r",
									"                \"RouteFlag\": {\r",
									"                    \"ThingName\": fieldDataValue.Thing.RouteFlagThingNameValue , //true\r",
									"                    \"ThingToken\": fieldDataValue.Thing.RouteFlagThingTokenValue, //true\r",
									"                    \"IMEI\": fieldDataValue.Thing.RouteFlagIMEIValue, //true\r",
									"                    \"ICCID\": fieldDataValue.Thing.RouteFlagICCIDValue, //true\r",
									"                    \"RouteInfo\": fieldDataValue.Thing.RouteFlagRouteInfoValue //true\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateThing = {\r",
									"            url: url + provisioningapis + urlThingCreateThing,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThing,\r",
									"            body: httpRequestCreateThing\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThing');\r",
									"        let response = await reqPromise(optionsCreateThing);\r",
									"        let jsonDataCreateThing = await response.json();\r",
									"        // console.log('jsonDataCreateThing',jsonDataCreateThing)\r",
									"\r",
									"        let operationStatusCreateThing = await jsonDataCreateThing.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateThing : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateThing : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateThing is Success\r",
									"        pm.test('CreateThing : OperationStatus Description is ' + '\"' + resultDescriptionCreateThing + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Description', resultDescriptionCreateThing);\r",
									"        });\r",
									"\r",
									"        pm.environment.set(\"GetResponse_ThingID\", jsonDataCreateThing.ThingInfo.ThingId)\r",
									"        pm.environment.set(\"GetResponse_IMSI\", jsonDataCreateThing.ThingInfo.IMSI)\r",
									"        \r",
									"        let keys = pm.environment.get(\"GetResponse_IMSI\") + \":\" + pm.environment.get(\"IpAddress\");\r",
									"        // console.log(\"keys\", keys);\r",
									"        let encodedKeys = CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(keys));\r",
									"        pm.environment.set(\"encodedKeys_Authorization_Register\", encodedKeys);\r",
									"\r",
									"        //Get Random Sensor \r",
									"        pm.environment.set(\"random_Sensor\", _.random(100, 999))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThingStateInfo\r",
									"CreateThingStateInfo = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThingStateInfo = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateThingStateInfo,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey': pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        // {\"AA\" : pm.environment.get(\"random_Sensor\")}\r",
									"        let sensorValue = {};\r",
									"        sensorValue[fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP] = pm.environment.get(\"random_Sensor\");\r",
									"        // console.log('sensorValue',sensorValue);\r",
									"        \r",
									"        let httpRequestCreateThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": [\r",
									"                    pm.environment.get(\"GetResponse_ThingID\")\r",
									"                ],\r",
									"                \"Type\": fieldDataValue.CreateThingStateInfo.Type_Report,\r",
									"                \"Sensor\": sensorValue\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingCreateThingStateInfo,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThingStateInfo,\r",
									"            body: httpRequestCreateThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThingStateInfo');\r",
									"        let response = await reqPromise(optionsCreateThingStateInfo);\r",
									"        let jsonDataCreateThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataCreateThingStateInfo',jsonDataCreateThingStateInfo)\r",
									"\r",
									"        let operationStatusCreateThingStateInfo = await jsonDataCreateThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"CreateThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //CreateThingStateInfo is Success\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Description is ' + '\"' + resultDescriptionCreateThingStateInfo + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Description', resultDescriptionCreateThingStateInfo);\r",
									"        });\r",
									"\r",
									"       \r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateConfigGroup\r",
									"CreateConfigGroup = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateConfigGroup = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateConfigGroup + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateConfigGroup,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\")\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreateConfigGroup = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ConfigName\":  pm.environment.get(\"ConfigGroupName\"),\r",
									"                \"ThingId\": [pm.environment.get(\"GetResponse_ThingID\")],\r",
									"                \"ConfigInfo\": {\r",
									"                    \"RefreshTime\": fieldDataValue.ConfigGroup.RefreshTime , //\"On\"\r",
									"                    \"Max\": fieldDataValue.ConfigGroup.Max //\"99\"\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateConfigGroup = {\r",
									"            url: url + provisioningapis + urlConfigGroupCreateConfigGroup,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateConfigGroup,\r",
									"            body: httpRequestCreateConfigGroup\r",
									"        };\r",
									"\r",
									"        // console.log('response CreateConfigGroup');\r",
									"        let response = await reqPromise(optionsCreateConfigGroup);\r",
									"        let jsonDataCreateConfigGroup = await response.json();\r",
									"        // console.log('jsonDataCreateConfigGroup',jsonDataCreateConfigGroup)\r",
									"    \r",
									"        let operationStatusCreateConfigGroup = await jsonDataCreateConfigGroup.OperationStatus;\r",
									"\r",
									"        //201 \r",
									"        pm.test(\"CreateConfigGroup : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateConfigGroup : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateConfigGroup).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateConfigGroup is Success\r",
									"        pm.test('CreateConfigGroup : OperationStatus description is '+'\"'+ resultDescriptionCreateConfigGroup+'\"', function () {\r",
									"            pm.expect(operationStatusCreateConfigGroup).to.have.property('Description', resultDescriptionCreateConfigGroup);\r",
									"        });\r",
									"\r",
									"        pm.environment.set(\"GetResponse_ConfigGroupId\",jsonDataCreateConfigGroup.ConfigGroupInfo.ConfigGroupId)\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// AsgardHTTPeSimRegister\r",
									"AsgardHTTPeSimRegister = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptAsgardHTTPeSimRegister = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_RegisHTTP + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_RegisHTTP,\r",
									"            'Authorization': Basic + ' ' + pm.environment.get(\"encodedKeys_Authorization_Register\")\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestAsgardHTTPeSimRegister = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({})\r",
									"        };\r",
									"\r",
									"        let optionsAsgardHTTPeSimRegister = {\r",
									"            url: url + httpapis + urlAsgardHTTPeSimRegister,\r",
									"            method: 'POST',\r",
									"            header: headersOptAsgardHTTPeSimRegister,\r",
									"            body: httpRequestAsgardHTTPeSimRegister\r",
									"        };\r",
									"\r",
									"        // console.log('request AsgardHTTPEsimRegister');\r",
									"        let response = await reqPromise(optionsAsgardHTTPeSimRegister);\r",
									"        let jsonDataAsgardHTTPeSimRegister = await response.json();\r",
									"        // console.log('jsonDataCreateThingStateInfo',jsonDataAsgardHTTPeSimRegister)\r",
									"        let operationStatusAsgardHTTPeSimRegister = await jsonDataAsgardHTTPeSimRegister.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"Asgard HTTP(eSim) Register : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('Asgard HTTP(eSim) Register : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusAsgardHTTPeSimRegister).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"\r",
									"        // The requested operation was successfully.\r",
									"        pm.test('Asgard HTTP(eSim) Register : OperationStatus DeveloperMessage is ' + '\"' + resultDescriptionTheRequestedOperationWasSuccessfully + '\"', function () {\r",
									"            pm.expect(operationStatusAsgardHTTPeSimRegister).to.have.property('DeveloperMessage', resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"        });\r",
									"        \r",
									"        await pm.environment.set(\"GetResponse_ThingToken\", jsonDataAsgardHTTPeSimRegister.ThingToken)\r",
									"        let keys2 = await pm.environment.get(\"GetResponse_ThingToken\") + \":\" + pm.environment.get(\"IpAddress\");        \r",
									"        let encodedKeys2 = await CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(keys2));\r",
									"        pm.environment.set(\"encodedKeys_Authorization_Config\", encodedKeys2)\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"Signin();\r",
									"setTimeout(async function(){await CreatePartner();}, 3000); \r",
									"setTimeout(async function(){await CreateAccount();}, 6000); \r",
									"setTimeout(async function(){await CreateThing();}, 8000); \r",
									"setTimeout(async function(){await CreateThingStateInfo();}, 9000); \r",
									"setTimeout(async function(){await CreateConfigGroup();}, 10000); \r",
									"setTimeout(async function(){await AsgardHTTPeSimRegister();}, 20000); \r",
									"setTimeout(async function(){}, 30000); //for wait value encodedKeys_Authorization_Config"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-ais-UserName",
								"type": "text",
								"value": "{{x_ais_UserName_AisPartner}}"
							},
							{
								"key": "x-ais-OrderRef",
								"value": "{{x_ais_OrderRef_ConfigHTTP}}{{current_timestamp}}"
							},
							{
								"key": "x-ais-OrderDesc",
								"type": "text",
								"value": "{{x_ais_OrderDesc_ConfigHTTP}}"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{Basic}} {{encodedKeys_Authorization_Config}}"
							}
						],
						"url": {
							"raw": "{{url}}{{httpapis}}/api/config/sim/v1/?Sensor=",
							"host": [
								"{{url}}{{httpapis}}"
							],
							"path": [
								"api",
								"config",
								"sim",
								"v1",
								""
							],
							"query": [
								{
									"key": "Sensor",
									"value": ""
								}
							]
						},
						"description": "Type:Desire"
					},
					"response": []
				},
				{
					"name": "AsgardHTTPeSimConfig_TST_F2_0_2_002_Error_CouldNotBeFound",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var Basic = pm.environment.get(\"Basic\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to xAisOrderRef \"RemoveThing_\"\r",
									"var x_ais_OrderRef_RemoveThing = pm.globals.get(\"x_ais_OrderRef_RemoveThing\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"var x_ais_OrderDesc_RemoveThing = pm.globals.get(\"x_ais_OrderDesc_RemoveThing\");\r",
									"//get global variable to xAisOrderRef \"RemoveThingStateInfo_\"\r",
									"var x_ais_OrderRef_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderRef_RemoveThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThingStateInfo\"\r",
									"var x_ais_OrderDesc_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_RemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals ConfigGroup --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveConfigGroup_\"\r",
									"const x_ais_OrderRef_RemoveConfigGroup = pm.globals.get(\"x_ais_OrderRef_RemoveConfigGroup\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveConfigGroup\"\r",
									"const x_ais_OrderDesc_RemoveConfigGroup = pm.globals.get(\"x_ais_OrderDesc_RemoveConfigGroup\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals AsgardHTTP --------------//\r",
									"//get global variable to x_ais_OrderRef \"ConfigHTTP_\"\r",
									"var x_ais_OrderRef_ConfigHTTP = pm.globals.get(\"x_ais_OrderRef_ConfigHTTP\");\r",
									"//get global variable to x_ais_OrderRef \"ConfigHTTPfail_\"\r",
									"var x_ais_OrderRef_ConfigHTTP_fail = pm.globals.get(\"x_ais_OrderRef_ConfigHTTP_fail\");\r",
									"//get global variable to x_ais_OrderDesc \"Get Config from MG\"\r",
									"var x_ais_OrderDesc_ConfigHTTP = pm.globals.get(\"x_ais_OrderDesc_ConfigHTTP\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get url Remove --------------//\r",
									"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
									"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"var urlThingRemoveThing = pm.globals.get(\"urlThingRemoveThing\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"var urlThingRemoveThingStateInfo = pm.globals.get(\"urlThingRemoveThingStateInfo\");\r",
									"//get global variable to url \"/ConfigGroup/RemoveConfigGroup\"\r",
									"var urlConfigGroupRemoveConfigGroup = pm.globals.get(\"urlConfigGroupRemoveConfigGroup\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"RemovePartner is Success\"\r",
									"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
									"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
									"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
									"//get global variable to resultDescription \"RemoveThing is Success\"\r",
									"var resultDescriptionRemoveThing = pm.globals.get(\"resultDescriptionRemoveThing\");\r",
									"//get global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"var resultDescriptionRemoveThingStateInfo = pm.globals.get(\"resultDescriptionRemoveThingStateInfo\");\r",
									"//get global variable to resultDescription \"RemoveConfigGroup is Success\"\r",
									"var resultDescriptionRemoveConfigGroup = pm.globals.get(\"resultDescriptionRemoveConfigGroup\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 404\r",
									"var statusCodeNotFound = pm.globals.get(\"statusCodeNotFound\");\r",
									"//get global variable to resultCode \"40400\"\r",
									"var resultCodeNotFound = pm.globals.get(\"resultCodeNotFound\");\r",
									"//get global variable to resultDescription \"The requested operation could not be found.\"\r",
									"var resultDescriptionTheRequestedOperationCouldNotBeFound = pm.globals.get(\"resultDescriptionTheRequestedOperationCouldNotBeFound\");\r",
									"//------------------------------------------------------------//\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Asgard HTTP(eSim) Config : Status code is \" + statusCodeNotFound, function () {\r",
									"    pm.response.to.have.status(statusCodeNotFound);\r",
									"});\r",
									"\r",
									"pm.test('Asgard HTTP(eSim) Config : operationStatus code is '+'\"'+ resultCodeNotFound +'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeNotFound);\r",
									"});\r",
									"\r",
									"pm.test('Asgard HTTP(eSim) Config : OperationStatus DeveloperMessage is '+'\"'+ resultDescriptionTheRequestedOperationCouldNotBeFound+'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheRequestedOperationCouldNotBeFound);\r",
									"});\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// RemovePartner\r",
									" RemovePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemovePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemovePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemovePartner = {\r",
									"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemovePartner,\r",
									"            body: httpRequestRemovePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request RemovePartner');\r",
									"        let response = await reqPromise(optionsRemovePartner);\r",
									"        let jsonDataRemovePartner = await response.json();\r",
									"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
									"    \r",
									"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemovePartner is Success\r",
									"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveAccount\r",
									" RemoveAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemoveAccount = {\r",
									"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveAccount,\r",
									"            body: httpRequestRemoveAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveAccount');\r",
									"        let response = await reqPromise(optionsRemoveAccount);\r",
									"        let jsonDataRemoveAccount = await response.json();\r",
									"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
									"    \r",
									"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveAccount is Success\r",
									"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThing\r",
									" RemoveThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThing = {\r",
									"            url: url + provisioningapis + urlThingRemoveThing,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThing,\r",
									"            body: httpRequestRemoveThing\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveThing');\r",
									"        let response = await reqPromise(optionsRemoveThing);\r",
									"        let jsonDataRemoveThing = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThing)\r",
									"    \r",
									"        let operationStatusRemoveThing = await jsonDataRemoveThing.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThing : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThing : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThing is Success\r",
									"        pm.test('RemoveThing : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThing+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Description', resultDescriptionRemoveThing);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThingStateInfo\r",
									" RemoveThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"            \r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\"),\r",
									"                \"stateType\": fieldDataValue.CreateThingStateInfo.Type_Report, //Report\r",
									"                \"stateKey\": fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP //AA\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingRemoveThingStateInfo,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThingStateInfo,\r",
									"            body: httpRequestRemoveThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('response RemoveThingStateInfo');\r",
									"        let response = await reqPromise(optionsRemoveThingStateInfo);\r",
									"        let jsonDataRemoveThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThingStateInfo)\r",
									"    \r",
									"        let operationStatusRemoveThingStateInfo = await jsonDataRemoveThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThingStateInfo is Success\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThingStateInfo+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Description', resultDescriptionRemoveThingStateInfo);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveConfigGroup\r",
									" RemoveConfigGroup = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveConfigGroup = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_RemoveConfigGroup + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_RemoveConfigGroup,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey': pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveConfigGroup = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ConfigGroupId\": pm.environment.get(\"GetResponse_ConfigGroupId\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveConfigGroup = {\r",
									"            url: url + provisioningapis + urlConfigGroupRemoveConfigGroup,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveConfigGroup,\r",
									"            body: httpRequestRemoveConfigGroup\r",
									"        };\r",
									"\r",
									"        // console.log('response RemoveConfigGroup');\r",
									"        let response = await reqPromise(optionsRemoveConfigGroup);\r",
									"        let jsonDataRemoveConfigGroup = await response.json();\r",
									"        // console.log('jsonDataRemoveConfigGroup',jsonDataRemoveConfigGroup)\r",
									"    \r",
									"        let operationStatusRemoveConfigGroup = await jsonDataRemoveConfigGroup.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveConfigGroup : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveConfigGroup : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveConfigGroup).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveConfigGroup is Success\r",
									"        pm.test('RemoveConfigGroup : OperationStatus Description is '+'\"'+ resultDescriptionRemoveConfigGroup+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveConfigGroup).to.have.property('Description', resultDescriptionRemoveConfigGroup);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"//---------------- LogDefaultValue --------------//\r",
									"//set variable to LogDefaultValue JSON.parse\r",
									"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
									"// console.log('LogDefaultValue',LogDefaultValue);\r",
									"//---------------- set globals Other --------------//\r",
									"\r",
									"var SearchLog = LogDefaultValue.SearchLog;\r",
									"// console.log('SearchLog',SearchLog);\r",
									"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
									"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
									"var kbn_version = SearchLog.header.kbn_version;\r",
									"var authorization = SearchLog.header.Authorization;\r",
									"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
									"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
									"var namespace = LogDefaultValue.Other.namespace;\r",
									"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
									"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
									"var header_x_ais_username = LogDefaultValue.Other.header_x_ais_username;\r",
									"var methodGet = LogDefaultValue.Other.methodGet;\r",
									"\r",
									"// Detail\r",
									"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
									"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
									"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
									"\r",
									"// Summary\r",
									"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
									"var identitySummary = \"\";\r",
									"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
									"\r",
									"// Asgard.Http.APIs\r",
									"var applicationName = LogDefaultValue.AsgardHTTP.applicationName;\r",
									"var cmdName = LogDefaultValue.AsgardHTTP.cmdNameConfig;\r",
									"var endPointNameRabbitMQ = LogDefaultValue.AsgardHTTP.endPointNameRabbitMQ;\r",
									"var containerId = LogDefaultValue.AsgardHTTP.containerId;\r",
									"var requestObjectUrlStaging = LogDefaultValue.AsgardHTTP.requestObjectUrlConfigMgStaging;\r",
									"var urlConfig  = LogDefaultValue.AsgardHTTP.urlConfigError;\r",
									"\r",
									"// Check CDR (Summary Log) and EDR (Detail Log)\r",
									"SearchLogFindTid = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSearchLogFindTid = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = x_ais_OrderRef_ConfigHTTP_fail + current_timestamp;\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestSearchLogFindTid = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"\r",
									"        let optionsSearchLogFindTid = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptSearchLogFindTid,\r",
									"            body: httpRequestSearchLogFindTid\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsSearchLogFindTid);\r",
									"        let jsonDataSearchLogFindTid = await response.json();\r",
									"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
									"        console.log('hits',hits)\r",
									"  \r",
									"        // find tid\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            // let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"        \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            if(applicationNameValue == applicationName){\r",
									"                let tid = hits[i]._source.cauldron.tid;\r",
									"                pm.environment.set(\"tid\", tid);\r",
									"                break;\r",
									"           }\r",
									"        }\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"CheckLog = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCheckLog = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = pm.environment.get(\"tid\");\r",
									"\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestCheckLog = {\r",
									"            mode: 'raw',\r",
									"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"        let optionsCheckLog = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptCheckLog,\r",
									"            body: httpRequestCheckLog\r",
									"        }; \r",
									"        let response = await reqPromise(optionsCheckLog);\r",
									"        let jsonDataCheckLog = await response.json();\r",
									"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
									"        \r",
									"        // //200\r",
									"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });     \r",
									"        \r",
									"        let hits = jsonDataCheckLog.hits.hits\r",
									"        console.log('hits',hits)\r",
									"  \r",
									"        // find logType\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            //  let logType = hits[i]._source.cauldron.logType\r",
									"            let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"           \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            \r",
									"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
									"            // console.log('resultDataLog',resultDataLog)\r",
									"\r",
									"            let tidControl = x_ais_OrderRef_ConfigHTTP_fail  + current_timestamp;\r",
									"            // console.log(tidControl);\r",
									"            if(applicationNameValue == applicationName){\r",
									"                 \r",
									"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and Asgard.Http.APIs\r",
									"                    pm.test(\"Check Summary Log : Asgard_HTTP(eSim) Config\" , function () {\r",
									"                        console.log(\"======== Check Summary Log ( Expected = Actual) [Asgard_HTTP(eSim) Config] ==================\");\r",
									"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
									"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
									"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeNotFound);\r",
									"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionTheRequestedOperationCouldNotBeFound);\r",
									"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
									"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"identity : \" + JSON.stringify(resultDataLog.identity) + \" = \" + JSON.stringify(identitySummary));\r",
									"                        // console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
									"\r",
									"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
									"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
									"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeNotFound); \r",
									"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionTheRequestedOperationCouldNotBeFound); \r",
									"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
									"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
									"                        // pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
									"\r",
									"                        // check custom\r",
									"                        // \\\"custom\\\":{ \\\"endPointSummary\\\":[ { \\\"no\\\":\\\"1\\\", \\\"endPointName\\\":\\\"db.ThingsCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:Inquiry was Success\\\", \\\"processTime\\\":0.0012 } ] }\r",
									"\r",
									"                        let custom = resultDataLog.custom.endPointSummary;\r",
									"                        let countCustom = custom.length;\r",
									"                       \r",
									"                        // [\"db.ThingsCollection\"]\r",
									"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_Asgard_HTTP_eSim_Config_002_004_005_006;\r",
									"                        // [\"20000:Inquiry was Success\"]\r",
									"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_Asgard_HTTP_eSim_Config_002_004_005_006;\r",
									"                        let countCustomStep = dataEndPointName.length;\r",
									"\r",
									"                        console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep);\r",
									"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
									"                        \r",
									"                        for(let i=0;i<countCustomStep;i++){\r",
									"                            let no = custom[i].no;\r",
									"                            let valueEndPointName = custom[i].endPointName;\r",
									"                            let valueResponseStatus = custom[i].responseStatus;\r",
									"                            // console.log(\"i\",i);\r",
									"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
									"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
									"\r",
									"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString());\r",
									"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i]);\r",
									"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i]);\r",
									"\r",
									"                            pm.expect(no).to.eql((i+1).toString()); \r",
									"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
									"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]); \r",
									"                        }\r",
									"                    }); \r",
									"                }\r",
									"\r",
									"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and Asgard.Http.APIs\r",
									"\r",
									"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
									"                    // console.log('endPointNameValue ',endPointNameValue)\r",
									"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [Asgard_HTTP(eSim) Config]\", function () {\r",
									"                        console.log(\"======== Check Detail Log ( Expected = Actual) [Asgard_HTTP(eSim) Config] ==================\");\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
									"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
									"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
									"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.custom1.activityLog.processTime + \" = \" + resultDataLog.custom1.activityLog.processTime);\r",
									"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
									"\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
									"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
									"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
									"\r",
									"                        let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
									"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
									"                        let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
									"                            // console.log('jsonParseResponseObject',jsonParseResponseObject); \r",
									"                        let url = urlConfig; \r",
									"                        let x_ais_orderref = x_ais_OrderRef_ConfigHTTP_fail + current_timestamp;\r",
									"                        let x_ais_orderdesc = x_ais_OrderDesc_ConfigHTTP;\r",
									"                        let x_ais_userName = x_ais_UserName_AisPartner;\r",
									"                        let authorization = Basic + ' ' + pm.environment.get(\"encodedKeys_Authorization_Config\");\r",
									"                        let SensorKey = fieldDataValue.CreateThingStateInfo.SensorKey;\r",
									"                        let sensor = pm.environment.get(\"random_Sensor\");\r",
									"                        let timestamp = pm.environment.get(\"timestamp\");\r",
									"\r",
									"                        if( endPointNameValue == undefined){\r",
									"                            // check requestObject\r",
									"                            // \"requestObject\":\"{\\\"url\\\":\\\"/api/config/sim/v1\\\",\\\"method\\\":\\\"GET\\\",\\\"headers\\\":{\\\"Cache-Control\\\":\\\"no-cache\\\",\\\"Content-Type\\\":\\\"application/json\\\",\\\"Accept\\\":\\\"*/*\\\",\\\"Accept-Encoding\\\":\\\"gzip,deflate,br\\\",\\\"Authorization\\\":\\\"Basic ZmYxMjEwZjgtNGFjYi00YjNjLTkwMTMtODc0YWM0ZGIxZGVieHg6MS4yLjMuNA==\\\",\\\"Host\\\":\\\"mg-staging.sandais.com\\\",\\\"User-Agent\\\":\\\"PostmanRuntime/7.26.8\\\",\\\"Content-Length\\\":\\\"0\\\",\\\"x-real-ip\\\":\\\"58.8.214.174\\\",\\\"x-forwarded-for\\\":\\\"58.8.214.174\\\",\\\"x-forwarded-proto\\\":\\\"https\\\",\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"ConfigHTTPfail_202102152002008\\\",\\\"x-ais-orderdesc\\\":\\\"Get Config from MG\\\",\\\"postman-token\\\":\\\"a99d5f91-ea7c-4695-b941-0dea110169a2\\\",\\\"x-request-id\\\":\\\"cc1ffc3a-c815-4299-ac4a-9250d7064fa8\\\",\\\"x-b3-traceid\\\":\\\"55b1fe4d9548fdbb017552c523e0afcd\\\",\\\"x-b3-spanid\\\":\\\"017552c523e0afcd\\\",\\\"x-b3-sampled\\\":\\\"0\\\",\\\"x-ais-SessionId\\\":\\\"1613397270624\\\"},\\\"queryString\\\":{\\\"Sensor\\\":\\\"\\\"},\\\"routeParamteters\\\":{}}\"\r",
									"\r",
									"                            // \\\"requestObject\\\":\\\"{ \\\\\\\"url\\\\\\\":\\\\\\\"/api/config/sim/v1\\\\\\\", \\\\\\\"method\\\\\\\":\\\\\\\"GET\\\\\\\", \\\\\\\"headers\\\\\\\":{ \\\\\\\"Cache-Control\\\\\\\":\\\\\\\"no-cache\\\\\\\", \\\\\\\"Content-Type\\\\\\\":\\\\\\\"application/json\\\\\\\", \\\\\\\"Accept\\\\\\\":\\\\\\\"*/*\\\\\\\", \\\\\\\"Accept-Encoding\\\\\\\":\\\\\\\"gzip, deflate, br\\\\\\\", \\\\\\\"Authorization\\\\\\\":\\\\\\\"Basic MzIwNzdmMDktZmE1YS00NWEwLWJiNGUtODJmMGQ3MzkzZWIzeHg6MS4yLjMuNA==\\\\\\\", \\\\\\\"Host\\\\\\\":\\\\\\\"mg-iot.sandais.com\\\\\\\", \\\\\\\"User-Agent\\\\\\\":\\\\\\\"PostmanRuntime/7.26.8\\\\\\\", \\\\\\\"Content-Length\\\\\\\":\\\\\\\"0\\\\\\\", \\\\\\\"x-real-ip\\\\\\\":\\\\\\\"182.232.183.255\\\\\\\", \\\\\\\"x-forwarded-for\\\\\\\":\\\\\\\"182.232.183.255, 10.233.66.0\\\\\\\", \\\\\\\"x-forwarded-proto\\\\\\\":\\\\\\\"http\\\\\\\", \\\\\\\"x-ais-username\\\\\\\":\\\\\\\"AisPartner\\\\\\\", \\\\\\\"x-ais-orderref\\\\\\\":\\\\\\\"ConfigHTTPfail_202105112105387\\\\\\\", \\\\\\\"x-ais-orderdesc\\\\\\\":\\\\\\\"Get Config from MG\\\\\\\", \\\\\\\"postman-token\\\\\\\":\\\\\\\"4cf0dcc2-61e9-4598-9a5c-6cb0f9e4519b\\\\\\\", \\\\\\\"x-envoy-external-address\\\\\\\":\\\\\\\"10.233.66.0\\\\\\\", \\\\\\\"x-request-id\\\\\\\":\\\\\\\"da90b083-9b8b-4060-b314-ea15568eb74b\\\\\\\", \\\\\\\"x-envoy-original-path\\\\\\\":\\\\\\\"/httpapis/api/config/sim/v1?Sensor\\\\\\\", \\\\\\\"x-b3-traceid\\\\\\\":\\\\\\\"67891f1b724e1eef122cffd4d59d2605\\\\\\\", \\\\\\\"x-b3-spanid\\\\\\\":\\\\\\\"340298fadb5e3ec2\\\\\\\", \\\\\\\"x-b3-parentspanid\\\\\\\":\\\\\\\"122cffd4d59d2605\\\\\\\", \\\\\\\"x-b3-sampled\\\\\\\":\\\\\\\"0\\\\\\\", \\\\\\\"x-ais-SessionId\\\\\\\":\\\\\\\"1620742139201\\\\\\\" }, \\\\\\\"queryString\\\\\\\":{ \\\\\\\"Sensor\\\\\\\":\\\\\\\"\\\\\\\" }, \\\\\\\"routeParamteters\\\\\\\":{ } }\\\"\r",
									"\r",
									"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
									"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodGet);\r",
									"                            console.log(\"headers.x_ais_userName : \" + jsonParseRequestObject.headers[header_x_ais_username] + \" = \" + x_ais_userName);\r",
									"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
									"                            console.log(\"headers.Authorization : \" + jsonParseRequestObject.headers.Authorization + \" = \" + authorization);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
									"                            pm.expect(jsonParseRequestObject.method).to.eql(methodGet);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_username]).to.eql(x_ais_userName);\r",
									"                            pm.expect(jsonParseRequestObject.headers.Authorization).to.eql(authorization);\r",
									"\r",
									"                            console.log(\"queryString.Sensor : \" + JSON.stringify(jsonParseRequestObject.queryString.Sensor) + \" = \" + JSON.stringify(\"\"));\r",
									"                            console.log(\"routeParamteters : \" + JSON.stringify(jsonParseRequestObject.routeParamteters) + \" = \" + JSON.stringify({}));\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.queryString.Sensor).to.eql(\"\"); \r",
									"                            pm.expect(jsonParseRequestObject.routeParamteters).to.eql({}); \r",
									"\r",
									"                            // check responseObject\r",
									"                            // \"responseObject\":\"{\\\"OperationStatus\\\":{\\\"Code\\\":\\\"40400\\\",\\\"DeveloperMessage\\\":\\\"The requested operation could not be found.\\\"}}\"\r",
									"\r",
									"                            console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeNotFound);\r",
									"                            console.log(\"response.OperationStatus.DeveloperMessage : \" + jsonParseResponseObject.OperationStatus.DeveloperMessage + \" = \" + resultDescriptionTheRequestedOperationCouldNotBeFound); \r",
									"\r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeNotFound);  \r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheRequestedOperationCouldNotBeFound);  \r",
									"                        }\r",
									"                    }); \r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"setTimeout(function(){SearchLogFindTid();}, 40000); \r",
									"setTimeout(function(){CheckLog();}, 60000); \r",
									"\r",
									"setTimeout(function(){RemoveConfigGroup();}, 70000); \r",
									"setTimeout(function(){RemoveThingStateInfo();}, 80000); \r",
									"setTimeout(function(){RemoveThing();}, 90000); \r",
									"setTimeout(function(){RemoveAccount();}, 100000); \r",
									"setTimeout(function(){RemovePartner();}, 110000); \r",
									"\r",
									"setTimeout(function(){\r",
									"pm.environment.unset(\"current_timestamp\");\r",
									"pm.environment.unset(\"AccessToken\");\r",
									"pm.environment.unset(\"random_number\");\r",
									"pm.environment.unset(\"PartnerName\");\r",
									"pm.environment.unset(\"MerchantContact\");\r",
									"pm.environment.unset(\"CPID\");\r",
									"pm.environment.unset(\"GetResponse_PartnerId\");\r",
									"pm.environment.unset(\"AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountId\");\r",
									"pm.environment.unset(\"random_IM\");\r",
									"pm.environment.unset(\"random_ICCID\");\r",
									"pm.environment.unset(\"ThingName\");\r",
									"pm.environment.unset(\"GetResponse_ThingID\");\r",
									"pm.environment.unset(\"GetResponse_IMSI\");\r",
									"pm.environment.unset(\"encodedKeys_Authorization_Register\");\r",
									"pm.environment.unset(\"encodedKeys_Authorization_Config\");\r",
									"pm.environment.unset(\"random_Sensor\");\r",
									"pm.environment.unset(\"GetResponse_ThingToken\");\r",
									"pm.environment.unset(\"tid\");\r",
									"pm.environment.unset(\"GetResponse_ConfigGroupId\");\r",
									"pm.environment.unset(\"ConfigGroupName\");\r",
									"}, 115000); \r",
									"setTimeout(async function(){}, 120000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var Username = pm.environment.get(\"Username\");\r",
									"var Password = pm.environment.get(\"Password\");\r",
									"\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"var httpapis = pm.environment.get(\"httpapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"//format YYYYMMDDHHMMSSS\r",
									"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
									"// console.log('currentTmestamp',currentTmestamp);\r",
									"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var Basic = pm.environment.get(\"Basic\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- statusCodeList --------------//\r",
									"//set variable to statusCodeList JSON.parse\r",
									"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
									"//set global variable to statusCode 200\r",
									"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
									"//set global variable to statusCode 201\r",
									"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
									"//set global variable to statusCode 404\r",
									"pm.globals.set(\"statusCodeNotFound\", statusCodeList.statusCodeNotFound);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultCodeList --------------//\r",
									"//set variable to resultCodeList JSON.parse\r",
									"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
									"//set global variable to resultCode \"20000\"\r",
									"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
									"//set global variable to resultCode \"20100\"\r",
									"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
									"//set global variable to resultCode \"40400\"\r",
									"pm.globals.set(\"resultCodeNotFound\", resultCodeList.resultCodeNotFound);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionSuccessList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
									"//set global variable to resultDescription \"SignInProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
									"//set global variable to resultDescription \"CreatePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
									"//set global variable to resultDescription \"CreateAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
									"//set global variable to resultDescription \"CreateThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThing\", resultDescriptionSuccessList.resultDescriptionCreateThing);\r",
									"//set global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThingStateInfo\", resultDescriptionSuccessList.resultDescriptionCreateThingStateInfo);\r",
									"//set global variable to resultDescription \"RemovePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
									"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
									"//set global variable to resultDescription \"RemoveThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThing\", resultDescriptionSuccessList.resultDescriptionRemoveThing);\r",
									"//set global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThingStateInfo\", resultDescriptionSuccessList.resultDescriptionRemoveThingStateInfo);\r",
									"//set global variable to resultDescription \"Register is Success\"\r",
									"pm.globals.set(\"resultDescriptionRegisterIsSuccess\", resultDescriptionSuccessList.resultDescriptionRegisterIsSuccess);\r",
									"//set global variable to resultDescription \"ConfigProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionConfigProcessIsSuccess\", resultDescriptionSuccessList.resultDescriptionConfigProcessIsSuccess);\r",
									"//set global variable to resultDescription \"CreateConfigGroup is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateConfigGroup\", resultDescriptionSuccessList.resultDescriptionCreateConfigGroup);\r",
									"//set global variable to resultDescription \"RemoveConfigGroup is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveConfigGroup\", resultDescriptionSuccessList.resultDescriptionRemoveConfigGroup);\r",
									"//set global variable to resultDescription \"The requested operation was successfully.\"\r",
									"pm.globals.set(\"resultDescriptionTheRequestedOperationWasSuccessfully\", resultDescriptionSuccessList.resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionErrorList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
									"//set global variable to resultDescription \"The requested operation could not be found.\"\r",
									"pm.globals.set(\"resultDescriptionTheRequestedOperationCouldNotBeFound\", resultDescriptionErrorList.resultDescriptionTheRequestedOperationCouldNotBeFound);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- HeaderList --------------//\r",
									"//set variable to HeaderList JSON.parse\r",
									"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
									"//---------------- set globals Other --------------//\r",
									"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
									"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
									"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
									"//set global variable to kbn-versio \"7.5.1\"\r",
									"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Signin_ --------------//\r",
									"//set global variable to x_ais_OrderRef \"Signin_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreatePartner --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
									"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
									"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
									"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreateAccount --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
									"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
									"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Thing --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThing\", HeaderList.Thing.x_ais_OrderRef_CreateThing);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThing\", HeaderList.Thing.x_ais_OrderDesc_CreateThing);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThing\", HeaderList.Thing.x_ais_OrderRef_RemoveThing);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThing\", HeaderList.Thing.x_ais_OrderDesc_RemoveThing);\r",
									"//set global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_RemoveThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_RemoveThingStateInfo);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals AsgardHTTP --------------//\r",
									"//set global variable to x_ais_OrderRef \"RegisHTTP_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RegisHTTP\", HeaderList.AsgardHTTP.x_ais_OrderRef_RegisHTTP);\r",
									"//set global variable to x_ais_OrderDesc \"Register Thing in MG\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RegisHTTP\", HeaderList.AsgardHTTP.x_ais_OrderDesc_RegisHTTP);\r",
									"//set global variable to x_ais_OrderRef \"ConfigHTTP_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ConfigHTTP\", HeaderList.AsgardHTTP.x_ais_OrderRef_ConfigHTTP);\r",
									"//set global variable to x_ais_OrderRef \"ConfigHTTPfail_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ConfigHTTP_fail\", HeaderList.AsgardHTTP.x_ais_OrderRef_ConfigHTTP_fail);\r",
									"//set global variable to x_ais_OrderDesc \"Get Config from MG\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_ConfigHTTP\", HeaderList.AsgardHTTP.x_ais_OrderDesc_ConfigHTTP);\r",
									"//set global variable to x_ais_OrderRef \"ReportHTTP_\"\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals ConfigGroup --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateConfigGroup_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateConfigGroup\", HeaderList.ConfigGroup.x_ais_OrderRef_CreateConfigGroup);\r",
									"//set global variable to x_ais_OrderDesc \"CreateConfigGroup\"\r",
									" pm.globals.set(\"x_ais_OrderDesc_CreateConfigGroup\", HeaderList.ConfigGroup.x_ais_OrderDesc_CreateConfigGroup);\r",
									"//set global variable to x_ais_OrderRef \"RemoveConfigGroup_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveConfigGroup\", HeaderList.ConfigGroup.x_ais_OrderRef_RemoveConfigGroup);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveConfigGroup\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveConfigGroup\", HeaderList.ConfigGroup.x_ais_OrderDesc_RemoveConfigGroup);\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"SignInProcess is Success\"\r",
									"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
									"//get global variable to resultDescription \"CreatePartner is Success\"\r",
									"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
									"//get global variable to resultDescription \"CreateAccount is Success\"\r",
									"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
									"//get global variable to resultDescription \"CreateThing is Success\"\r",
									"var resultDescriptionCreateThing = pm.globals.get(\"resultDescriptionCreateThing\");\r",
									"//get global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"var resultDescriptionCreateThingStateInfo = pm.globals.get(\"resultDescriptionCreateThingStateInfo\");\r",
									"//get global variable to resultDescription \"Register is Success\"\r",
									"var resultDescriptionRegisterIsSuccess = pm.globals.get(\"resultDescriptionRegisterIsSuccess\");\r",
									"//get global variable to resultDescription \"CreateConfigGroup is Success\"\r",
									"var resultDescriptionCreateConfigGroup = pm.globals.get(\"resultDescriptionCreateConfigGroup\");\r",
									"//get global variable to resultDescription \"The requested operation was successfully.\" \r",
									"var resultDescriptionTheRequestedOperationWasSuccessfully = pm.globals.get(\"resultDescriptionTheRequestedOperationWasSuccessfully\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- urlRouteList --------------//\r",
									"//set variable to urlRouteList JSON.parse\r",
									"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
									"//---------------- set url Create --------------//\r",
									"//set global variable to url \"/api/v1/auth/signin\"\r",
									"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
									"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
									"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"pm.globals.set(\"urlThingCreateThing\", urlRouteList.Thing.urlThingCreateThing);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"pm.globals.set(\"urlThingCreateThingStateInfo\", urlRouteList.Thing.urlThingCreateThingStateInfo);\r",
									"//set global variable to url \"/api/register/sim/v1\"\r",
									"pm.globals.set(\"urlAsgardHTTPeSimRegister\", urlRouteList.AsgardHTTPeSim.urlAsgardHTTPeSimRegister);\r",
									"//set global variable to url \"/api/config/sim/v1?Sensor\"\r",
									"pm.globals.set(\"urlAsgardHTTPeSimConfig\", urlRouteList.AsgardHTTPeSim.urlAsgardHTTPeSimConfig);\r",
									"//set global variable to url \"/ConfigGroup/CreateConfigGroup\"\r",
									"pm.globals.set(\"urlConfigGroupCreateConfigGroup\", urlRouteList.ConfigGroup.urlConfigGroupCreateConfigGroup);\r",
									"//---------------- get url Create --------------//\r",
									"//get global variable to url \"/api/v1/auth/signin\"\r",
									"var urlSignin = pm.globals.get(\"urlSignin\");\r",
									"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
									"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"var urlThingCreateThing = pm.globals.get(\"urlThingCreateThing\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"var urlThingCreateThingStateInfo = pm.globals.get(\"urlThingCreateThingStateInfo\");\r",
									"//get global variable to url \"/api/v1/Group/CreateGroup\"\r",
									"var urlGroupCreateGroup = pm.globals.get(\"urlGroupCreateGroup\");\r",
									"//get global variable to url \"/api/v1/Control/Thing\"\r",
									"var urlControlThing = pm.globals.get(\"urlControlThing\");\r",
									"//get global variable to url \"/api/register/sim/v1\"\r",
									"var urlAsgardHTTPeSimRegister = pm.globals.get(\"urlAsgardHTTPeSimRegister\");\r",
									"//get global variable to url \"/api/config/sim/v1?Sensor\"\r",
									"var urlAsgardHTTPeSimConfig = pm.globals.get(\"urlAsgardHTTPeSimConfig\");\r",
									"//get global variable to url \"/ConfigGroup/CreateConfigGroup\"\r",
									"var urlConfigGroupCreateConfigGroup = pm.globals.get(\"urlConfigGroupCreateConfigGroup\");\r",
									"//---------------- set url Remove --------------//\r",
									"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
									"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"pm.globals.set(\"urlThingRemoveThing\", urlRouteList.Thing.urlThingRemoveThing);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"pm.globals.set(\"urlThingRemoveThingStateInfo\", urlRouteList.Thing.urlThingRemoveThingStateInfo);\r",
									"//set global variable to url \"/ConfigGroup/RemoveConfigGroup\"\r",
									"pm.globals.set(\"urlConfigGroupRemoveConfigGroup\", urlRouteList.ConfigGroup.urlConfigGroupRemoveConfigGroup);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Signin_ --------------//\r",
									"//get global variable to x_ais_OrderRef \"Signin_\"\r",
									"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"var x_ais_OrderRef_CreateThing = pm.globals.get(\"x_ais_OrderRef_CreateThing\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"var x_ais_OrderDesc_CreateThing = pm.globals.get(\"x_ais_OrderDesc_CreateThing\");\r",
									"//get global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"var x_ais_OrderRef_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderRef_CreateThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"var x_ais_OrderDesc_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_CreateThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals AsgardHTTP --------------//\r",
									"//get global variable to x_ais_OrderRef \"RegisHTTP_\"\r",
									"var x_ais_OrderRef_RegisHTTP = pm.globals.get(\"x_ais_OrderRef_RegisHTTP\");\r",
									"//get global variable to x_ais_OrderDesc \"Register Thing in MG\"\r",
									"var x_ais_OrderDesc_RegisHTTP = pm.globals.get(\"x_ais_OrderDesc_RegisHTTP\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals ConfigGroup --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateConfigGroup_\"\r",
									"const x_ais_OrderRef_CreateConfigGroup = pm.globals.get(\"x_ais_OrderRef_CreateConfigGroup\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateConfigGroup\"\r",
									"const x_ais_OrderDesc_CreateConfigGroup = pm.globals.get(\"x_ais_OrderDesc_CreateConfigGroup\");\r",
									"//------------------------------------------------------------//\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// Signin get token\r",
									"Signin = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSignin = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_Signin + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_UserAuthentication,\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestSignin = {\r",
									"            mode: 'raw',\r",
									"            raw:\r",
									"                JSON.stringify({\r",
									"                    username: Username,\r",
									"                    password: Password\r",
									"                })\r",
									"        };\r",
									"\r",
									"        let optionsSignin = {\r",
									"            url: url + provisioningapis + urlSignin,\r",
									"            method: 'POST',\r",
									"            header: headersOptSignin,\r",
									"            body: httpRequestSignin\r",
									"        };\r",
									"        // console.log('request Signin');\r",
									"        let response = await reqPromise(optionsSignin);\r",
									"        let jsonDataSignin = await response.json();\r",
									"\r",
									"        // setAccessToken\r",
									"        await pm.environment.set(\"AccessToken\", jsonDataSignin.AccessToken);\r",
									"\r",
									"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('Signin : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // SignInProcess is Success\r",
									"        pm.test('Signin : OperationStatus Description is ' + '\"' + resultDescriptionSuccessSignIn + '\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
									"        });\r",
									"\r",
									"        //set random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //set PartnerName\r",
									"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
									"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
									"        //set MerchantContact\r",
									"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
									"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
									"        // set CPID\r",
									"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
									"        pm.environment.set(\"CPID\", CPIDValue)\r",
									"\r",
									"        //ConfigGroupName\r",
									"        let ConfigGroupNameValue = fieldDataValue.ConfigGroup.ConfigGroupNameValue; // \"Sensor_TestThingGroupName\"\r",
									"        pm.environment.set(\"ConfigGroupName\", ConfigGroupNameValue +pm.environment.get(\"random_number\"))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreatePartner\r",
									"CreatePartner = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreatePartner = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreatePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreatePartner,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreatePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
									"                \"PartnerType\": [\r",
									"                    \"Supplier\",\r",
									"                    \"Customer\"\r",
									"                ],\r",
									"                \"PartnerDetail\": {\r",
									"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
									"                    \"CPID\": pm.environment.get(\"CPID\")\r",
									"                },\r",
									"                \"Property\": {\r",
									"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreatePartner = {\r",
									"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreatePartner,\r",
									"            body: httpRequestCreatePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsCreatePartner);\r",
									"        let jsonDataCreatePartner = await response.json();\r",
									"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
									"\r",
									"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreatePartner : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreatePartner is Success\r",
									"        pm.test('CreatePartner : OperationStatus Description is ' + '\"' + resultDescriptionCreatePartner + '\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
									"        });\r",
									"\r",
									"        //GetResponse_PartnerId\r",
									"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
									"\r",
									"        //Accountname\r",
									"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
									"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateAccount\r",
									"CreateAccount = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateAccount = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateAccount,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreateAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateAccount = {\r",
									"            url: url + provisioningapis + urlAccountCreateAccount,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateAccount,\r",
									"            body: httpRequestCreateAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateAccount');\r",
									"        let response = await reqPromise(optionsCreateAccount);\r",
									"        let jsonDataCreateAccount = await response.json();\r",
									"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
									"\r",
									"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateAccount : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateAccount is Success\r",
									"        pm.test('CreateAccount : OperationStatus Description is ' + '\"' + resultDescriptionCreateAccount + '\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
									"        });\r",
									"        // GetResponse_AccountName\r",
									"        pm.environment.set(\"GetResponse_AccountName\", jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
									"        // GetResponse_AccountId\r",
									"        pm.environment.set(\"GetResponse_AccountId\", jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
									"        // random_IM\r",
									"        pm.environment.set(\"random_IM\", _.random(10000000, 99999999) + \" \" + _.random(1000000, 9999999))\r",
									"        // random_ICCID\r",
									"        pm.environment.set(\"random_ICCID\", _.random(1000000, 9999999) + \" \" + _.random(100000, 999999))\r",
									"        // random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //ThingName\r",
									"        let thingNameValue = fieldDataValue.Thing.ThingNameValue; // \"Sensor_TestThingName\"\r",
									"        pm.environment.set(\"ThingName\", thingNameValue + pm.environment.get(\"random_number\"))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThing\r",
									"CreateThing = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThing = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateThing + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateThing,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey': pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreateThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingName\": pm.environment.get(\"ThingName\"),\r",
									"                \"IMEI\": pm.environment.get(\"random_IM\"),\r",
									"                \"IMSI\": pm.environment.get(\"random_IM\"),\r",
									"                \"ICCID\": pm.environment.get(\"random_ICCID\"),\r",
									"                \"RouteUrl\": fieldDataValue.Thing.RouteUrlValue , //[\"http://10.12.3.4:2019/api/information/AddInformation\"]\r",
									"                \"RouteInfo\": {\r",
									"                    \"MIMO_ID\": fieldDataValue.Thing.RouteInfoMIMOIDValue , //\"606edada\"\r",
									"                    \"MIMO_SerialNo\": fieldDataValue.Thing.RouteInfoMIMOSerialNoValue //5466758878\r",
									"                },\r",
									"                \"RouteFlag\": {\r",
									"                    \"ThingName\": fieldDataValue.Thing.RouteFlagThingNameValue , //true\r",
									"                    \"ThingToken\": fieldDataValue.Thing.RouteFlagThingTokenValue, //true\r",
									"                    \"IMEI\": fieldDataValue.Thing.RouteFlagIMEIValue, //true\r",
									"                    \"ICCID\": fieldDataValue.Thing.RouteFlagICCIDValue, //true\r",
									"                    \"RouteInfo\": fieldDataValue.Thing.RouteFlagRouteInfoValue //true\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateThing = {\r",
									"            url: url + provisioningapis + urlThingCreateThing,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThing,\r",
									"            body: httpRequestCreateThing\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThing');\r",
									"        let response = await reqPromise(optionsCreateThing);\r",
									"        let jsonDataCreateThing = await response.json();\r",
									"        // console.log('jsonDataCreateThing',jsonDataCreateThing)\r",
									"\r",
									"        let operationStatusCreateThing = await jsonDataCreateThing.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateThing : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateThing : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateThing is Success\r",
									"        pm.test('CreateThing : OperationStatus Description is ' + '\"' + resultDescriptionCreateThing + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Description', resultDescriptionCreateThing);\r",
									"        });\r",
									"\r",
									"        pm.environment.set(\"GetResponse_ThingID\", jsonDataCreateThing.ThingInfo.ThingId)\r",
									"        pm.environment.set(\"GetResponse_IMSI\", jsonDataCreateThing.ThingInfo.IMSI)\r",
									"        \r",
									"        let keys = pm.environment.get(\"GetResponse_IMSI\") + \":\" + pm.environment.get(\"IpAddress\");\r",
									"        // console.log(\"keys\", keys);\r",
									"        let encodedKeys = CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(keys));\r",
									"        pm.environment.set(\"encodedKeys_Authorization_Register\", encodedKeys);\r",
									"\r",
									"        //Get Random Sensor \r",
									"        pm.environment.set(\"random_Sensor\", _.random(100, 999))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThingStateInfo\r",
									"CreateThingStateInfo = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThingStateInfo = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateThingStateInfo,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey': pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        // {\"AA\" : pm.environment.get(\"random_Sensor\")}\r",
									"        let sensorValue = {};\r",
									"        sensorValue[fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP] = pm.environment.get(\"random_Sensor\");\r",
									"        // console.log('sensorValue',sensorValue);\r",
									"        \r",
									"        let httpRequestCreateThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": [\r",
									"                    pm.environment.get(\"GetResponse_ThingID\")\r",
									"                ],\r",
									"                \"Type\": fieldDataValue.CreateThingStateInfo.Type_Report,\r",
									"                \"Sensor\": sensorValue\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingCreateThingStateInfo,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThingStateInfo,\r",
									"            body: httpRequestCreateThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThingStateInfo');\r",
									"        let response = await reqPromise(optionsCreateThingStateInfo);\r",
									"        let jsonDataCreateThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataCreateThingStateInfo',jsonDataCreateThingStateInfo)\r",
									"\r",
									"        let operationStatusCreateThingStateInfo = await jsonDataCreateThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"CreateThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //CreateThingStateInfo is Success\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Description is ' + '\"' + resultDescriptionCreateThingStateInfo + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Description', resultDescriptionCreateThingStateInfo);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateConfigGroup\r",
									"CreateConfigGroup = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateConfigGroup = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateConfigGroup + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateConfigGroup,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\")\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreateConfigGroup = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ConfigName\":  pm.environment.get(\"ConfigGroupName\"),\r",
									"                \"ThingId\": [pm.environment.get(\"GetResponse_ThingID\")],\r",
									"                \"ConfigInfo\": {\r",
									"                    \"RefreshTime\": fieldDataValue.ConfigGroup.RefreshTime , //\"On\"\r",
									"                    \"Max\": fieldDataValue.ConfigGroup.Max //\"99\"\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateConfigGroup = {\r",
									"            url: url + provisioningapis + urlConfigGroupCreateConfigGroup,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateConfigGroup,\r",
									"            body: httpRequestCreateConfigGroup\r",
									"        };\r",
									"\r",
									"        // console.log('response CreateConfigGroup');\r",
									"        let response = await reqPromise(optionsCreateConfigGroup);\r",
									"        let jsonDataCreateConfigGroup = await response.json();\r",
									"        // console.log('jsonDataCreateConfigGroup',jsonDataCreateConfigGroup)\r",
									"    \r",
									"        let operationStatusCreateConfigGroup = await jsonDataCreateConfigGroup.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateConfigGroup : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateConfigGroup : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateConfigGroup).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateConfigGroup is Success\r",
									"        pm.test('CreateConfigGroup : OperationStatus description is '+'\"'+ resultDescriptionCreateConfigGroup+'\"', function () {\r",
									"            pm.expect(operationStatusCreateConfigGroup).to.have.property('Description', resultDescriptionCreateConfigGroup);\r",
									"        });\r",
									"\r",
									"        pm.environment.set(\"GetResponse_ConfigGroupId\",jsonDataCreateConfigGroup.ConfigGroupInfo.ConfigGroupId)\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// AsgardHTTPeSimRegister\r",
									"AsgardHTTPeSimRegister = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptAsgardHTTPeSimRegister = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_RegisHTTP + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_RegisHTTP,\r",
									"            'Authorization': Basic + ' ' + pm.environment.get(\"encodedKeys_Authorization_Register\")\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestAsgardHTTPeSimRegister = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({})\r",
									"        };\r",
									"\r",
									"        let optionsAsgardHTTPeSimRegister = {\r",
									"            url: url + httpapis + urlAsgardHTTPeSimRegister,\r",
									"            method: 'POST',\r",
									"            header: headersOptAsgardHTTPeSimRegister,\r",
									"            body: httpRequestAsgardHTTPeSimRegister\r",
									"        };\r",
									"\r",
									"        // console.log('request AsgardHTTPEsimRegister');\r",
									"        let response = await reqPromise(optionsAsgardHTTPeSimRegister);\r",
									"        let jsonDataAsgardHTTPeSimRegister = await response.json();\r",
									"        // console.log('jsonDataCreateThingStateInfo',jsonDataAsgardHTTPeSimRegister)\r",
									"        let operationStatusAsgardHTTPeSimRegister = await jsonDataAsgardHTTPeSimRegister.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"Asgard HTTP(eSim) Register : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('Asgard HTTP(eSim) Register : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusAsgardHTTPeSimRegister).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"\r",
									"        // The requested operation was successfully.\r",
									"        pm.test('Asgard HTTP(eSim) Register : OperationStatus DeveloperMessage is ' + '\"' + resultDescriptionTheRequestedOperationWasSuccessfully + '\"', function () {\r",
									"            pm.expect(operationStatusAsgardHTTPeSimRegister).to.have.property('DeveloperMessage', resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"        });\r",
									"\r",
									"        await pm.environment.set(\"GetResponse_ThingToken\", jsonDataAsgardHTTPeSimRegister.ThingToken)\r",
									"        let keys2 = await pm.environment.get(\"GetResponse_ThingToken\")+ fieldDataValue.AsgardHTTP.Value_AsgardHTTPeSim_Config_TST_F2_0_2_002_Error + \":\" + pm.environment.get(\"IpAddress\");        \r",
									"        let encodedKeys2 = await CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(keys2));\r",
									"        pm.environment.set(\"encodedKeys_Authorization_Config\", encodedKeys2)\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"Signin();\r",
									"setTimeout(async function(){await CreatePartner();}, 3000); \r",
									"setTimeout(async function(){await CreateAccount();}, 6000); \r",
									"setTimeout(async function(){await CreateThing();}, 8000); \r",
									"setTimeout(async function(){await CreateThingStateInfo();}, 9000); \r",
									"setTimeout(async function(){await CreateConfigGroup();}, 10000); \r",
									"setTimeout(async function(){await AsgardHTTPeSimRegister();}, 20000); \r",
									"setTimeout(async function(){}, 30000); //for wait value encodedKeys_Authorization_Config"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-ais-UserName",
								"type": "text",
								"value": "{{x_ais_UserName_AisPartner}}"
							},
							{
								"key": "x-ais-OrderRef",
								"value": "{{x_ais_OrderRef_ConfigHTTP_fail}}{{current_timestamp}}"
							},
							{
								"key": "x-ais-OrderDesc",
								"type": "text",
								"value": "{{x_ais_OrderDesc_ConfigHTTP}}"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{Basic}} {{encodedKeys_Authorization_Config}}"
							}
						],
						"url": {
							"raw": "{{url}}{{httpapis}}/api/config/sim/v1?Sensor=",
							"host": [
								"{{url}}{{httpapis}}"
							],
							"path": [
								"api",
								"config",
								"sim",
								"v1"
							],
							"query": [
								{
									"key": "Sensor",
									"value": ""
								}
							]
						},
						"description": "Type:Desire"
					},
					"response": []
				},
				{
					"name": "AsgardHTTPeSimConfig_TST_F2_0_2_003_Error_TokenUntrustedOrInvalid.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var Basic = pm.environment.get(\"Basic\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to xAisOrderRef \"RemoveThing_\"\r",
									"var x_ais_OrderRef_RemoveThing = pm.globals.get(\"x_ais_OrderRef_RemoveThing\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"var x_ais_OrderDesc_RemoveThing = pm.globals.get(\"x_ais_OrderDesc_RemoveThing\");\r",
									"//get global variable to xAisOrderRef \"RemoveThingStateInfo_\"\r",
									"var x_ais_OrderRef_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderRef_RemoveThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThingStateInfo\"\r",
									"var x_ais_OrderDesc_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_RemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals ConfigGroup --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveConfigGroup_\"\r",
									"const x_ais_OrderRef_RemoveConfigGroup = pm.globals.get(\"x_ais_OrderRef_RemoveConfigGroup\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveConfigGroup\"\r",
									"const x_ais_OrderDesc_RemoveConfigGroup = pm.globals.get(\"x_ais_OrderDesc_RemoveConfigGroup\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals AsgardHTTP --------------//\r",
									"//get global variable to x_ais_OrderRef \"ConfigHTTP_\"\r",
									"var x_ais_OrderRef_ConfigHTTP = pm.globals.get(\"x_ais_OrderRef_ConfigHTTP\");\r",
									"//get global variable to x_ais_OrderRef \"ConfigHTTPfail_\"\r",
									"var x_ais_OrderRef_ConfigHTTP_fail = pm.globals.get(\"x_ais_OrderRef_ConfigHTTP_fail\");\r",
									"//get global variable to x_ais_OrderDesc \"Get Config from MG\"\r",
									"var x_ais_OrderDesc_ConfigHTTP = pm.globals.get(\"x_ais_OrderDesc_ConfigHTTP\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get url Remove --------------//\r",
									"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
									"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"var urlThingRemoveThing = pm.globals.get(\"urlThingRemoveThing\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"var urlThingRemoveThingStateInfo = pm.globals.get(\"urlThingRemoveThingStateInfo\");\r",
									"//get global variable to url \"/ConfigGroup/RemoveConfigGroup\"\r",
									"var urlConfigGroupRemoveConfigGroup = pm.globals.get(\"urlConfigGroupRemoveConfigGroup\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"RemovePartner is Success\"\r",
									"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
									"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
									"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
									"//get global variable to resultDescription \"RemoveThing is Success\"\r",
									"var resultDescriptionRemoveThing = pm.globals.get(\"resultDescriptionRemoveThing\");\r",
									"//get global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"var resultDescriptionRemoveThingStateInfo = pm.globals.get(\"resultDescriptionRemoveThingStateInfo\");\r",
									"//get global variable to resultDescription \"RemoveConfigGroup is Success\"\r",
									"var resultDescriptionRemoveConfigGroup = pm.globals.get(\"resultDescriptionRemoveConfigGroup\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 401\r",
									"var statusCodeUnauthorized = pm.globals.get(\"statusCodeUnauthorized\");\r",
									"//get global variable to resultCode \"40103\"\r",
									"var resultCodeTheTokenIsUntrustedOrInvalid = pm.globals.get(\"resultCodeTheTokenIsUntrustedOrInvalid\");\r",
									"//get global variable to resultDescription \"The token is Untrusted or Invalid.\"\r",
									"var resultDescriptionTheTokenIsUntrustedOrInvalid = pm.globals.get(\"resultDescriptionTheTokenIsUntrustedOrInvalid\");\r",
									"//------------------------------------------------------------//\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Asgard HTTP(eSim) Config : Status code is \" + statusCodeUnauthorized, function () {\r",
									"    pm.response.to.have.status(statusCodeUnauthorized);\r",
									"});\r",
									"\r",
									"pm.test('Asgard HTTP(eSim) Config : OperationStatus code is '+'\"'+ resultCodeTheTokenIsUntrustedOrInvalid +'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeTheTokenIsUntrustedOrInvalid);\r",
									"});\r",
									"\r",
									"pm.test('Asgard HTTP(eSim) Config : OperationStatus DeveloperMessage is '+'\"'+ resultDescriptionTheTokenIsUntrustedOrInvalid+'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheTokenIsUntrustedOrInvalid);\r",
									"});\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// RemovePartner\r",
									" RemovePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemovePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemovePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemovePartner = {\r",
									"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemovePartner,\r",
									"            body: httpRequestRemovePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request RemovePartner');\r",
									"        let response = await reqPromise(optionsRemovePartner);\r",
									"        let jsonDataRemovePartner = await response.json();\r",
									"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
									"    \r",
									"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemovePartner is Success\r",
									"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveAccount\r",
									" RemoveAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemoveAccount = {\r",
									"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveAccount,\r",
									"            body: httpRequestRemoveAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveAccount');\r",
									"        let response = await reqPromise(optionsRemoveAccount);\r",
									"        let jsonDataRemoveAccount = await response.json();\r",
									"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
									"    \r",
									"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveAccount is Success\r",
									"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThing\r",
									" RemoveThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThing = {\r",
									"            url: url + provisioningapis + urlThingRemoveThing,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThing,\r",
									"            body: httpRequestRemoveThing\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveThing');\r",
									"        let response = await reqPromise(optionsRemoveThing);\r",
									"        let jsonDataRemoveThing = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThing)\r",
									"    \r",
									"        let operationStatusRemoveThing = await jsonDataRemoveThing.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThing : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThing : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThing is Success\r",
									"        pm.test('RemoveThing : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThing+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Description', resultDescriptionRemoveThing);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThingStateInfo\r",
									" RemoveThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"            \r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\"),\r",
									"                \"stateType\": fieldDataValue.CreateThingStateInfo.Type_Report, //Report\r",
									"                \"stateKey\": fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP //AA\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingRemoveThingStateInfo,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThingStateInfo,\r",
									"            body: httpRequestRemoveThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('response RemoveThingStateInfo');\r",
									"        let response = await reqPromise(optionsRemoveThingStateInfo);\r",
									"        let jsonDataRemoveThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThingStateInfo)\r",
									"    \r",
									"        let operationStatusRemoveThingStateInfo = await jsonDataRemoveThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThingStateInfo is Success\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThingStateInfo+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Description', resultDescriptionRemoveThingStateInfo);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveConfigGroup\r",
									" RemoveConfigGroup = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveConfigGroup = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_RemoveConfigGroup + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_RemoveConfigGroup,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey': pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveConfigGroup = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ConfigGroupId\": pm.environment.get(\"GetResponse_ConfigGroupId\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveConfigGroup = {\r",
									"            url: url + provisioningapis + urlConfigGroupRemoveConfigGroup,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveConfigGroup,\r",
									"            body: httpRequestRemoveConfigGroup\r",
									"        };\r",
									"\r",
									"        // console.log('response RemoveConfigGroup');\r",
									"        let response = await reqPromise(optionsRemoveConfigGroup);\r",
									"        let jsonDataRemoveConfigGroup = await response.json();\r",
									"        // console.log('jsonDataRemoveConfigGroup',jsonDataRemoveConfigGroup)\r",
									"    \r",
									"        let operationStatusRemoveConfigGroup = await jsonDataRemoveConfigGroup.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveConfigGroup : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveConfigGroup : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveConfigGroup).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveConfigGroup is Success\r",
									"        pm.test('RemoveConfigGroup : OperationStatus Description is '+'\"'+ resultDescriptionRemoveConfigGroup+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveConfigGroup).to.have.property('Description', resultDescriptionRemoveConfigGroup);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"//---------------- LogDefaultValue --------------//\r",
									"//set variable to LogDefaultValue JSON.parse\r",
									"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
									"// console.log('LogDefaultValue',LogDefaultValue);\r",
									"//---------------- set globals Other --------------//\r",
									"var SearchLog = LogDefaultValue.SearchLog;\r",
									"// console.log('SearchLog',SearchLog);\r",
									"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
									"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
									"var kbn_version = SearchLog.header.kbn_version;\r",
									"var authorization = SearchLog.header.Authorization;\r",
									"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
									"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
									"var namespace = LogDefaultValue.Other.namespace;\r",
									"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
									"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
									"var header_x_ais_username = LogDefaultValue.Other.header_x_ais_username;\r",
									"var methodGet = LogDefaultValue.Other.methodGet;\r",
									"\r",
									"// Detail\r",
									"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
									"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
									"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
									"\r",
									"// Summary\r",
									"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
									"var identitySummary = \"\";\r",
									"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
									"\r",
									"// Asgard.Http.APIs\r",
									"var applicationName = LogDefaultValue.AsgardHTTP.applicationName;\r",
									"var cmdName = LogDefaultValue.AsgardHTTP.cmdNameConfig;\r",
									"var endPointNameRabbitMQ = LogDefaultValue.AsgardHTTP.endPointNameRabbitMQ;\r",
									"var containerId = LogDefaultValue.AsgardHTTP.containerId;\r",
									"var requestObjectUrlStaging = LogDefaultValue.AsgardHTTP.requestObjectUrlConfigMgStaging;\r",
									"var urlConfig  = LogDefaultValue.AsgardHTTP.urlConfigError;\r",
									"\r",
									"// Check CDR (Summary Log) and EDR (Detail Log)\r",
									"SearchLogFindTid = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSearchLogFindTid = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = x_ais_OrderRef_ConfigHTTP_fail + current_timestamp;\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestSearchLogFindTid = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"\r",
									"        let optionsSearchLogFindTid = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptSearchLogFindTid,\r",
									"            body: httpRequestSearchLogFindTid\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsSearchLogFindTid);\r",
									"        let jsonDataSearchLogFindTid = await response.json();\r",
									"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
									"        // console.log('hits',hits)\r",
									"  \r",
									"        // find tid\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            // let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"        \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            if(applicationNameValue == applicationName){\r",
									"                let tid = hits[i]._source.cauldron.tid;\r",
									"                pm.environment.set(\"tid\", tid);\r",
									"                break;\r",
									"           }\r",
									"        }\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"CheckLog = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCheckLog = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = pm.environment.get(\"tid\");\r",
									"\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestCheckLog = {\r",
									"            mode: 'raw',\r",
									"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"        let optionsCheckLog = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptCheckLog,\r",
									"            body: httpRequestCheckLog\r",
									"        }; \r",
									"        let response = await reqPromise(optionsCheckLog);\r",
									"        let jsonDataCheckLog = await response.json();\r",
									"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
									"        \r",
									"        // //200\r",
									"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });     \r",
									"        \r",
									"        let hits = jsonDataCheckLog.hits.hits\r",
									"        console.log('hits',hits)\r",
									"  \r",
									"        // find logType\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            //  let logType = hits[i]._source.cauldron.logType\r",
									"            let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"           \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            \r",
									"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
									"            // console.log('resultDataLog',resultDataLog)\r",
									"\r",
									"            let tidControl = x_ais_OrderRef_ConfigHTTP_fail  + current_timestamp;\r",
									"            // console.log(tidControl);\r",
									"            if(applicationNameValue == applicationName){\r",
									"                 \r",
									"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and Asgard.Http.APIs\r",
									"                    pm.test(\"Check Summary Log : Asgard_HTTP(eSim) Config\" , function () {\r",
									"                        console.log(\"======== Check Summary Log ( Expected = Actual) [Asgard_HTTP(eSim) Config] ==================\");\r",
									"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
									"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
									"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeTheTokenIsUntrustedOrInvalid);\r",
									"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionTheTokenIsUntrustedOrInvalid);\r",
									"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
									"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"identity : \" + JSON.stringify(resultDataLog.identity) + \" = \" + JSON.stringify(identitySummary));\r",
									"                        console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
									"\r",
									"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
									"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
									"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeTheTokenIsUntrustedOrInvalid); \r",
									"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionTheTokenIsUntrustedOrInvalid); \r",
									"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
									"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
									"                        pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
									"                    }); \r",
									"                }\r",
									"\r",
									"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and Asgard.Http.APIs\r",
									"\r",
									"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
									"                    // console.log('endPointNameValue ',endPointNameValue)\r",
									"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [Asgard_HTTP(eSim) Config]\", function () {\r",
									"                        console.log(\"======== Check Detail Log ( Expected = Actual) [Asgard_HTTP(eSim) Config] ==================\");\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
									"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
									"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
									"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.custom1.activityLog.processTime + \" = \" + resultDataLog.custom1.activityLog.processTime);\r",
									"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
									"\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
									"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
									"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
									"\r",
									"                        let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
									"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
									"                        let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
									"                            // console.log('jsonParseResponseObject',jsonParseResponseObject); \r",
									"                        let url = urlConfig; \r",
									"                        let x_ais_orderref = x_ais_OrderRef_ConfigHTTP_fail + current_timestamp;\r",
									"                        let x_ais_orderdesc = x_ais_OrderDesc_ConfigHTTP;\r",
									"                        let x_ais_userName = x_ais_UserName_AisPartner;\r",
									"                        // let authorization = Basic + ' ' + pm.environment.get(\"encodedKeys_Authorization_Config\");\r",
									"                        let SensorKey = fieldDataValue.CreateThingStateInfo.SensorKey;\r",
									"                        let sensor = pm.environment.get(\"random_Sensor\");\r",
									"                        let timestamp = pm.environment.get(\"timestamp\");\r",
									"\r",
									"                        if( endPointNameValue == undefined){\r",
									"                            // check requestObject\r",
									"                            // \"requestObject\":\"{\\\"url\\\":\\\"/api/config/sim/v1\\\",\\\"method\\\":\\\"GET\\\",\\\"headers\\\":{\\\"Cache-Control\\\":\\\"no-cache\\\",\\\"Content-Type\\\":\\\"application/json\\\",\\\"Accept\\\":\\\"*/*\\\",\\\"Accept-Encoding\\\":\\\"gzip,deflate,br\\\",\\\"Authorization\\\":\\\"Basic ZmYxMjEwZjgtNGFjYi00YjNjLTkwMTMtODc0YWM0ZGIxZGVieHg6MS4yLjMuNA==\\\",\\\"Host\\\":\\\"mg-staging.sandais.com\\\",\\\"User-Agent\\\":\\\"PostmanRuntime/7.26.8\\\",\\\"Content-Length\\\":\\\"0\\\",\\\"x-real-ip\\\":\\\"58.8.214.174\\\",\\\"x-forwarded-for\\\":\\\"58.8.214.174\\\",\\\"x-forwarded-proto\\\":\\\"https\\\",\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"ConfigHTTPfail_202102152002008\\\",\\\"x-ais-orderdesc\\\":\\\"Get Config from MG\\\",\\\"postman-token\\\":\\\"a99d5f91-ea7c-4695-b941-0dea110169a2\\\",\\\"x-request-id\\\":\\\"cc1ffc3a-c815-4299-ac4a-9250d7064fa8\\\",\\\"x-b3-traceid\\\":\\\"55b1fe4d9548fdbb017552c523e0afcd\\\",\\\"x-b3-spanid\\\":\\\"017552c523e0afcd\\\",\\\"x-b3-sampled\\\":\\\"0\\\",\\\"x-ais-SessionId\\\":\\\"1613397270624\\\"},\\\"queryString\\\":{\\\"Sensor\\\":\\\"RefreshTime\\\"},\\\"routeParamteters\\\":{}}\"\r",
									"\r",
									"                            // \\\"requestObject\\\":\\\"{ \\\\\\\"url\\\\\\\":\\\\\\\"/api/config/sim/v1\\\\\\\", \\\\\\\"method\\\\\\\":\\\\\\\"GET\\\\\\\", \\\\\\\"headers\\\\\\\":{ \\\\\\\"Cache-Control\\\\\\\":\\\\\\\"no-cache\\\\\\\", \\\\\\\"Content-Type\\\\\\\":\\\\\\\"application/json\\\\\\\", \\\\\\\"Accept\\\\\\\":\\\\\\\"*/*\\\\\\\", \\\\\\\"Accept-Encoding\\\\\\\":\\\\\\\"gzip, deflate, br\\\\\\\", \\\\\\\"Host\\\\\\\":\\\\\\\"mg-iot.sandais.com\\\\\\\", \\\\\\\"User-Agent\\\\\\\":\\\\\\\"PostmanRuntime/7.26.8\\\\\\\", \\\\\\\"Content-Length\\\\\\\":\\\\\\\"0\\\\\\\", \\\\\\\"x-real-ip\\\\\\\":\\\\\\\"182.232.183.255\\\\\\\", \\\\\\\"x-forwarded-for\\\\\\\":\\\\\\\"182.232.183.255, 10.233.68.0\\\\\\\", \\\\\\\"x-forwarded-proto\\\\\\\":\\\\\\\"http\\\\\\\", \\\\\\\"x-ais-username\\\\\\\":\\\\\\\"AisPartner\\\\\\\", \\\\\\\"x-ais-orderref\\\\\\\":\\\\\\\"ConfigHTTPfail_202105112105928\\\\\\\", \\\\\\\"x-ais-orderdesc\\\\\\\":\\\\\\\"Get Config from MG\\\\\\\", \\\\\\\"postman-token\\\\\\\":\\\\\\\"dba87308-ecc0-4596-938f-43c3a0e650d3\\\\\\\", \\\\\\\"x-envoy-external-address\\\\\\\":\\\\\\\"10.233.68.0\\\\\\\", \\\\\\\"x-request-id\\\\\\\":\\\\\\\"30b30daf-ee8b-4092-b18b-c19e03980d98\\\\\\\", \\\\\\\"x-envoy-original-path\\\\\\\":\\\\\\\"/httpapis/api/config/sim/v1?Sensor=RefreshTime\\\\\\\", \\\\\\\"x-b3-traceid\\\\\\\":\\\\\\\"c705cca19c6c94d7ee7f2aee1b5e4cc5\\\\\\\", \\\\\\\"x-b3-spanid\\\\\\\":\\\\\\\"d81023b84cdc62dd\\\\\\\", \\\\\\\"x-b3-parentspanid\\\\\\\":\\\\\\\"ee7f2aee1b5e4cc5\\\\\\\", \\\\\\\"x-b3-sampled\\\\\\\":\\\\\\\"0\\\\\\\", \\\\\\\"x-ais-SessionId\\\\\\\":\\\\\\\"1620743083741\\\\\\\" }, \\\\\\\"queryString\\\\\\\":{ \\\\\\\"Sensor\\\\\\\":\\\\\\\"RefreshTime\\\\\\\" }, \\\\\\\"routeParamteters\\\\\\\":{ } }\\\"\r",
									"\r",
									"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
									"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodGet);\r",
									"                            console.log(\"headers.x_ais_userName : \" + jsonParseRequestObject.headers[header_x_ais_username] + \" = \" + x_ais_userName);\r",
									"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
									"                            // console.log(\"headers.Authorization : \" + jsonParseRequestObject.headers.Authorization + \" = \" + authorization);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
									"                            pm.expect(jsonParseRequestObject.method).to.eql(methodGet);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_username]).to.eql(x_ais_userName);\r",
									"                            // pm.expect(jsonParseRequestObject.headers.Authorization).to.eql(authorization);\r",
									"\r",
									"                            console.log(\"queryString.Sensor : \" + JSON.stringify(jsonParseRequestObject.queryString.Sensor) + \" = \" + JSON.stringify(\"RefreshTime\"));\r",
									"                            console.log(\"routeParamteters : \" + JSON.stringify(jsonParseRequestObject.routeParamteters) + \" = \" + JSON.stringify({}));\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.queryString.Sensor).to.eql(\"RefreshTime\"); \r",
									"                            pm.expect(jsonParseRequestObject.routeParamteters).to.eql({}); \r",
									"\r",
									"                            // check responseObject\r",
									"                            // \"responseObject\":\"{\\\"Config\\\":null,\\\"OperationStatus\\\":{\\\"Code\\\":\\\"40103\\\",\\\"DeveloperMessage\\\":\\\"The token is Untrusted or Invalid.\\\"}}\"\r",
									"\r",
									"                            console.log(\"response.Config : \" + jsonParseResponseObject.Config + \" = \" + null);\r",
									"                            pm.expect(jsonParseResponseObject.Config).to.eql(null);  \r",
									"\r",
									"                            console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeTheTokenIsUntrustedOrInvalid);\r",
									"                            console.log(\"response.OperationStatus.DeveloperMessage : \" + jsonParseResponseObject.OperationStatus.DeveloperMessage + \" = \" + resultDescriptionTheTokenIsUntrustedOrInvalid); \r",
									"\r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeTheTokenIsUntrustedOrInvalid);  \r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheTokenIsUntrustedOrInvalid);  \r",
									"                        }\r",
									"                    }); \r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"setTimeout(function(){SearchLogFindTid();}, 40000); \r",
									"setTimeout(function(){CheckLog();}, 60000); \r",
									"\r",
									"setTimeout(function(){RemoveConfigGroup();}, 70000); \r",
									"setTimeout(function(){RemoveThingStateInfo();}, 80000); \r",
									"setTimeout(function(){RemoveThing();}, 90000); \r",
									"setTimeout(function(){RemoveAccount();}, 100000); \r",
									"setTimeout(function(){RemovePartner();}, 110000); \r",
									"\r",
									"setTimeout(function(){\r",
									"pm.environment.unset(\"current_timestamp\");\r",
									"pm.environment.unset(\"AccessToken\");\r",
									"pm.environment.unset(\"random_number\");\r",
									"pm.environment.unset(\"PartnerName\");\r",
									"pm.environment.unset(\"MerchantContact\");\r",
									"pm.environment.unset(\"CPID\");\r",
									"pm.environment.unset(\"GetResponse_PartnerId\");\r",
									"pm.environment.unset(\"AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountId\");\r",
									"pm.environment.unset(\"random_IM\");\r",
									"pm.environment.unset(\"random_ICCID\");\r",
									"pm.environment.unset(\"ThingName\");\r",
									"pm.environment.unset(\"GetResponse_ThingID\");\r",
									"pm.environment.unset(\"GetResponse_IMSI\");\r",
									"pm.environment.unset(\"encodedKeys_Authorization_Register\");\r",
									"pm.environment.unset(\"encodedKeys_Authorization_Config\");\r",
									"pm.environment.unset(\"random_Sensor\");\r",
									"pm.environment.unset(\"GetResponse_ThingToken\");\r",
									"pm.environment.unset(\"tid\");\r",
									"pm.environment.unset(\"GetResponse_ConfigGroupId\");\r",
									"pm.environment.unset(\"ConfigGroupName\");\r",
									"}, 125000); \r",
									"setTimeout(async function(){}, 130000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var Username = pm.environment.get(\"Username\");\r",
									"var Password = pm.environment.get(\"Password\");\r",
									"\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"var httpapis = pm.environment.get(\"httpapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"//format YYYYMMDDHHMMSSS\r",
									"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
									"// console.log('currentTmestamp',currentTmestamp);\r",
									"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var Basic = pm.environment.get(\"Basic\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- statusCodeList --------------//\r",
									"//set variable to statusCodeList JSON.parse\r",
									"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
									"//set global variable to statusCode 200\r",
									"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
									"//set global variable to statusCode 201\r",
									"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
									"//set global variable to statusCode 401\r",
									"pm.globals.set(\"statusCodeUnauthorized\", statusCodeList.statusCodeUnauthorized);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultCodeList --------------//\r",
									"//set variable to resultCodeList JSON.parse\r",
									"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
									"//set global variable to resultCode \"20000\"\r",
									"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
									"//set global variable to resultCode \"20100\"\r",
									"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
									"//set global variable to resultCode \"40103\"\r",
									"pm.globals.set(\"resultCodeTheTokenIsUntrustedOrInvalid\", resultCodeList.resultCodeTheTokenIsUntrustedOrInvalid);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionSuccessList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
									"//set global variable to resultDescription \"SignInProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
									"//set global variable to resultDescription \"CreatePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
									"//set global variable to resultDescription \"CreateAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
									"//set global variable to resultDescription \"CreateThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThing\", resultDescriptionSuccessList.resultDescriptionCreateThing);\r",
									"//set global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThingStateInfo\", resultDescriptionSuccessList.resultDescriptionCreateThingStateInfo);\r",
									"//set global variable to resultDescription \"RemovePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
									"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
									"//set global variable to resultDescription \"RemoveThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThing\", resultDescriptionSuccessList.resultDescriptionRemoveThing);\r",
									"//set global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThingStateInfo\", resultDescriptionSuccessList.resultDescriptionRemoveThingStateInfo);\r",
									"//set global variable to resultDescription \"Register is Success\"\r",
									"pm.globals.set(\"resultDescriptionRegisterIsSuccess\", resultDescriptionSuccessList.resultDescriptionRegisterIsSuccess);\r",
									"//set global variable to resultDescription \"ConfigProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionConfigProcessIsSuccess\", resultDescriptionSuccessList.resultDescriptionConfigProcessIsSuccess);\r",
									"//set global variable to resultDescription \"CreateConfigGroup is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateConfigGroup\", resultDescriptionSuccessList.resultDescriptionCreateConfigGroup);\r",
									"//set global variable to resultDescription \"RemoveConfigGroup is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveConfigGroup\", resultDescriptionSuccessList.resultDescriptionRemoveConfigGroup);\r",
									"//set global variable to resultDescription \"The requested operation was successfully.\"\r",
									"pm.globals.set(\"resultDescriptionTheRequestedOperationWasSuccessfully\", resultDescriptionSuccessList.resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionErrorList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
									"//set global variable to resultDescription \"The token is Untrusted or Invalid.\"\r",
									"pm.globals.set(\"resultDescriptionTheTokenIsUntrustedOrInvalid\", resultDescriptionErrorList.resultDescriptionTheTokenIsUntrustedOrInvalid);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- HeaderList --------------//\r",
									"//set variable to HeaderList JSON.parse\r",
									"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
									"//---------------- set globals Other --------------//\r",
									"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
									"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
									"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
									"//set global variable to kbn-versio \"7.5.1\"\r",
									"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Signin_ --------------//\r",
									"//set global variable to x_ais_OrderRef \"Signin_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreatePartner --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
									"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
									"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
									"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreateAccount --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
									"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
									"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Thing --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThing\", HeaderList.Thing.x_ais_OrderRef_CreateThing);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThing\", HeaderList.Thing.x_ais_OrderDesc_CreateThing);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThing\", HeaderList.Thing.x_ais_OrderRef_RemoveThing);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThing\", HeaderList.Thing.x_ais_OrderDesc_RemoveThing);\r",
									"//set global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_RemoveThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_RemoveThingStateInfo);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals AsgardHTTP --------------//\r",
									"//set global variable to x_ais_OrderRef \"RegisHTTP_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RegisHTTP\", HeaderList.AsgardHTTP.x_ais_OrderRef_RegisHTTP);\r",
									"//set global variable to x_ais_OrderDesc \"Register Thing in MG\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RegisHTTP\", HeaderList.AsgardHTTP.x_ais_OrderDesc_RegisHTTP);\r",
									"//set global variable to x_ais_OrderRef \"ConfigHTTP_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ConfigHTTP\", HeaderList.AsgardHTTP.x_ais_OrderRef_ConfigHTTP);\r",
									"//set global variable to x_ais_OrderRef \"ConfigHTTPfail_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ConfigHTTP_fail\", HeaderList.AsgardHTTP.x_ais_OrderRef_ConfigHTTP_fail);\r",
									"//set global variable to x_ais_OrderDesc \"Get Config from MG\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_ConfigHTTP\", HeaderList.AsgardHTTP.x_ais_OrderDesc_ConfigHTTP);\r",
									"//set global variable to x_ais_OrderRef \"ReportHTTP_\"\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals ConfigGroup --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateConfigGroup_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateConfigGroup\", HeaderList.ConfigGroup.x_ais_OrderRef_CreateConfigGroup);\r",
									"//set global variable to x_ais_OrderDesc \"CreateConfigGroup\"\r",
									" pm.globals.set(\"x_ais_OrderDesc_CreateConfigGroup\", HeaderList.ConfigGroup.x_ais_OrderDesc_CreateConfigGroup);\r",
									"//set global variable to x_ais_OrderRef \"RemoveConfigGroup_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveConfigGroup\", HeaderList.ConfigGroup.x_ais_OrderRef_RemoveConfigGroup);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveConfigGroup\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveConfigGroup\", HeaderList.ConfigGroup.x_ais_OrderDesc_RemoveConfigGroup);\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"SignInProcess is Success\"\r",
									"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
									"//get global variable to resultDescription \"CreatePartner is Success\"\r",
									"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
									"//get global variable to resultDescription \"CreateAccount is Success\"\r",
									"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
									"//get global variable to resultDescription \"CreateThing is Success\"\r",
									"var resultDescriptionCreateThing = pm.globals.get(\"resultDescriptionCreateThing\");\r",
									"//get global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"var resultDescriptionCreateThingStateInfo = pm.globals.get(\"resultDescriptionCreateThingStateInfo\");\r",
									"//get global variable to resultDescription \"Register is Success\"\r",
									"var resultDescriptionRegisterIsSuccess = pm.globals.get(\"resultDescriptionRegisterIsSuccess\");\r",
									"//get global variable to resultDescription \"CreateConfigGroup is Success\"\r",
									"var resultDescriptionCreateConfigGroup = pm.globals.get(\"resultDescriptionCreateConfigGroup\");\r",
									"//get global variable to resultDescription \"The requested operation was successfully.\"\r",
									"var resultDescriptionTheRequestedOperationWasSuccessfully = pm.globals.get(\"resultDescriptionTheRequestedOperationWasSuccessfully\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- urlRouteList --------------//\r",
									"//set variable to urlRouteList JSON.parse\r",
									"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
									"//---------------- set url Create --------------//\r",
									"//set global variable to url \"/api/v1/auth/signin\"\r",
									"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
									"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
									"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"pm.globals.set(\"urlThingCreateThing\", urlRouteList.Thing.urlThingCreateThing);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"pm.globals.set(\"urlThingCreateThingStateInfo\", urlRouteList.Thing.urlThingCreateThingStateInfo);\r",
									"//set global variable to url \"/api/register/sim/v1\"\r",
									"pm.globals.set(\"urlAsgardHTTPeSimRegister\", urlRouteList.AsgardHTTPeSim.urlAsgardHTTPeSimRegister);\r",
									"//set global variable to url \"/api/config/sim/v1?Sensor\"\r",
									"pm.globals.set(\"urlAsgardHTTPeSimConfig\", urlRouteList.AsgardHTTPeSim.urlAsgardHTTPeSimConfig);\r",
									"//set global variable to url \"/ConfigGroup/CreateConfigGroup\"\r",
									"pm.globals.set(\"urlConfigGroupCreateConfigGroup\", urlRouteList.ConfigGroup.urlConfigGroupCreateConfigGroup);\r",
									"//---------------- get url Create --------------//\r",
									"//get global variable to url \"/api/v1/auth/signin\"\r",
									"var urlSignin = pm.globals.get(\"urlSignin\");\r",
									"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
									"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"var urlThingCreateThing = pm.globals.get(\"urlThingCreateThing\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"var urlThingCreateThingStateInfo = pm.globals.get(\"urlThingCreateThingStateInfo\");\r",
									"//get global variable to url \"/api/register/sim/v1\"\r",
									"var urlAsgardHTTPeSimRegister = pm.globals.get(\"urlAsgardHTTPeSimRegister\");\r",
									"//get global variable to url \"/api/config/sim/v1?Sensor\"\r",
									"var urlAsgardHTTPeSimConfig = pm.globals.get(\"urlAsgardHTTPeSimConfig\");\r",
									"//get global variable to url \"/ConfigGroup/CreateConfigGroup\"\r",
									"var urlConfigGroupCreateConfigGroup = pm.globals.get(\"urlConfigGroupCreateConfigGroup\");\r",
									"//---------------- set url Remove --------------//\r",
									"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
									"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"pm.globals.set(\"urlThingRemoveThing\", urlRouteList.Thing.urlThingRemoveThing);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"pm.globals.set(\"urlThingRemoveThingStateInfo\", urlRouteList.Thing.urlThingRemoveThingStateInfo);\r",
									"//set global variable to url \"/ConfigGroup/RemoveConfigGroup\"\r",
									"pm.globals.set(\"urlConfigGroupRemoveConfigGroup\", urlRouteList.ConfigGroup.urlConfigGroupRemoveConfigGroup);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Signin_ --------------//\r",
									"//get global variable to x_ais_OrderRef \"Signin_\"\r",
									"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"var x_ais_OrderRef_CreateThing = pm.globals.get(\"x_ais_OrderRef_CreateThing\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"var x_ais_OrderDesc_CreateThing = pm.globals.get(\"x_ais_OrderDesc_CreateThing\");\r",
									"//get global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"var x_ais_OrderRef_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderRef_CreateThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"var x_ais_OrderDesc_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_CreateThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals AsgardHTTP --------------//\r",
									"//get global variable to x_ais_OrderRef \"RegisHTTP_\"\r",
									"var x_ais_OrderRef_RegisHTTP = pm.globals.get(\"x_ais_OrderRef_RegisHTTP\");\r",
									"//get global variable to x_ais_OrderDesc \"Register Thing in MG\"\r",
									"var x_ais_OrderDesc_RegisHTTP = pm.globals.get(\"x_ais_OrderDesc_RegisHTTP\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals ConfigGroup --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateConfigGroup_\"\r",
									"const x_ais_OrderRef_CreateConfigGroup = pm.globals.get(\"x_ais_OrderRef_CreateConfigGroup\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateConfigGroup\"\r",
									"const x_ais_OrderDesc_CreateConfigGroup = pm.globals.get(\"x_ais_OrderDesc_CreateConfigGroup\");\r",
									"//------------------------------------------------------------//\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// Signin get token\r",
									"Signin = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSignin = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_Signin + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_UserAuthentication,\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestSignin = {\r",
									"            mode: 'raw',\r",
									"            raw:\r",
									"                JSON.stringify({\r",
									"                    username: Username,\r",
									"                    password: Password\r",
									"                })\r",
									"        };\r",
									"\r",
									"        let optionsSignin = {\r",
									"            url: url + provisioningapis + urlSignin,\r",
									"            method: 'POST',\r",
									"            header: headersOptSignin,\r",
									"            body: httpRequestSignin\r",
									"        };\r",
									"        // console.log('request Signin');\r",
									"        let response = await reqPromise(optionsSignin);\r",
									"        let jsonDataSignin = await response.json();\r",
									"\r",
									"        // setAccessToken\r",
									"        await pm.environment.set(\"AccessToken\", jsonDataSignin.AccessToken);\r",
									"\r",
									"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('Signin : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // SignInProcess is Success\r",
									"        pm.test('Signin : OperationStatus Description is ' + '\"' + resultDescriptionSuccessSignIn + '\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
									"        });\r",
									"\r",
									"        //set random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //set PartnerName\r",
									"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
									"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
									"        //set MerchantContact\r",
									"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
									"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
									"        // set CPID\r",
									"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
									"        pm.environment.set(\"CPID\", CPIDValue)\r",
									"\r",
									"        //ConfigGroupName\r",
									"        let ConfigGroupNameValue = fieldDataValue.ConfigGroup.ConfigGroupNameValue; // \"Sensor_TestThingGroupName\"\r",
									"        pm.environment.set(\"ConfigGroupName\", ConfigGroupNameValue +pm.environment.get(\"random_number\"))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreatePartner\r",
									"CreatePartner = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreatePartner = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreatePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreatePartner,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreatePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
									"                \"PartnerType\": [\r",
									"                    \"Supplier\",\r",
									"                    \"Customer\"\r",
									"                ],\r",
									"                \"PartnerDetail\": {\r",
									"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
									"                    \"CPID\": pm.environment.get(\"CPID\")\r",
									"                },\r",
									"                \"Property\": {\r",
									"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreatePartner = {\r",
									"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreatePartner,\r",
									"            body: httpRequestCreatePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsCreatePartner);\r",
									"        let jsonDataCreatePartner = await response.json();\r",
									"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
									"\r",
									"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreatePartner : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreatePartner is Success\r",
									"        pm.test('CreatePartner : OperationStatus Description is ' + '\"' + resultDescriptionCreatePartner + '\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
									"        });\r",
									"\r",
									"        //GetResponse_PartnerId\r",
									"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
									"\r",
									"        //Accountname\r",
									"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
									"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateAccount\r",
									"CreateAccount = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateAccount = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateAccount,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreateAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateAccount = {\r",
									"            url: url + provisioningapis + urlAccountCreateAccount,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateAccount,\r",
									"            body: httpRequestCreateAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateAccount');\r",
									"        let response = await reqPromise(optionsCreateAccount);\r",
									"        let jsonDataCreateAccount = await response.json();\r",
									"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
									"\r",
									"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateAccount : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateAccount is Success\r",
									"        pm.test('CreateAccount : OperationStatus Description is ' + '\"' + resultDescriptionCreateAccount + '\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
									"        });\r",
									"        // GetResponse_AccountName\r",
									"        pm.environment.set(\"GetResponse_AccountName\", jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
									"        // GetResponse_AccountId\r",
									"        pm.environment.set(\"GetResponse_AccountId\", jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
									"        // random_IM\r",
									"        pm.environment.set(\"random_IM\", _.random(10000000, 99999999) + \" \" + _.random(1000000, 9999999))\r",
									"        // random_ICCID\r",
									"        pm.environment.set(\"random_ICCID\", _.random(1000000, 9999999) + \" \" + _.random(100000, 999999))\r",
									"        // random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //ThingName\r",
									"        let thingNameValue = fieldDataValue.Thing.ThingNameValue; // \"Sensor_TestThingName\"\r",
									"        pm.environment.set(\"ThingName\", thingNameValue + pm.environment.get(\"random_number\"))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThing\r",
									"CreateThing = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThing = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateThing + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateThing,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey': pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreateThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingName\": pm.environment.get(\"ThingName\"),\r",
									"                \"IMEI\": pm.environment.get(\"random_IM\"),\r",
									"                \"IMSI\": pm.environment.get(\"random_IM\"),\r",
									"                \"ICCID\": pm.environment.get(\"random_ICCID\"),\r",
									"                \"RouteUrl\": fieldDataValue.Thing.RouteUrlValue , //[\"http://10.12.3.4:2019/api/information/AddInformation\"]\r",
									"                \"RouteInfo\": {\r",
									"                    \"MIMO_ID\": fieldDataValue.Thing.RouteInfoMIMOIDValue , //\"606edada\"\r",
									"                    \"MIMO_SerialNo\": fieldDataValue.Thing.RouteInfoMIMOSerialNoValue //5466758878\r",
									"                },\r",
									"                \"RouteFlag\": {\r",
									"                    \"ThingName\": fieldDataValue.Thing.RouteFlagThingNameValue , //true\r",
									"                    \"ThingToken\": fieldDataValue.Thing.RouteFlagThingTokenValue, //true\r",
									"                    \"IMEI\": fieldDataValue.Thing.RouteFlagIMEIValue, //true\r",
									"                    \"ICCID\": fieldDataValue.Thing.RouteFlagICCIDValue, //true\r",
									"                    \"RouteInfo\": fieldDataValue.Thing.RouteFlagRouteInfoValue //true\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateThing = {\r",
									"            url: url + provisioningapis + urlThingCreateThing,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThing,\r",
									"            body: httpRequestCreateThing\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThing');\r",
									"        let response = await reqPromise(optionsCreateThing);\r",
									"        let jsonDataCreateThing = await response.json();\r",
									"        // console.log('jsonDataCreateThing',jsonDataCreateThing)\r",
									"\r",
									"        let operationStatusCreateThing = await jsonDataCreateThing.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateThing : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateThing : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateThing is Success\r",
									"        pm.test('CreateThing : OperationStatus Description is ' + '\"' + resultDescriptionCreateThing + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Description', resultDescriptionCreateThing);\r",
									"        });\r",
									"\r",
									"        pm.environment.set(\"GetResponse_ThingID\", jsonDataCreateThing.ThingInfo.ThingId)\r",
									"        pm.environment.set(\"GetResponse_IMSI\", jsonDataCreateThing.ThingInfo.IMSI)\r",
									"        \r",
									"        let keys = pm.environment.get(\"GetResponse_IMSI\") + \":\" + pm.environment.get(\"IpAddress\");\r",
									"        // console.log(\"keys\", keys);\r",
									"        let encodedKeys = CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(keys));\r",
									"        pm.environment.set(\"encodedKeys_Authorization_Register\", encodedKeys);\r",
									"\r",
									"        //Get Random Sensor \r",
									"        pm.environment.set(\"random_Sensor\", _.random(100, 999))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThingStateInfo\r",
									"CreateThingStateInfo = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThingStateInfo = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateThingStateInfo,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey': pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        // {\"AA\" : pm.environment.get(\"random_Sensor\")}\r",
									"        let sensorValue = {};\r",
									"        sensorValue[fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP] = pm.environment.get(\"random_Sensor\");\r",
									"        // console.log('sensorValue',sensorValue);\r",
									"        \r",
									"        let httpRequestCreateThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": [\r",
									"                    pm.environment.get(\"GetResponse_ThingID\")\r",
									"                ],\r",
									"                \"Type\": fieldDataValue.CreateThingStateInfo.Type_Report,\r",
									"                \"Sensor\": sensorValue\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingCreateThingStateInfo,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThingStateInfo,\r",
									"            body: httpRequestCreateThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThingStateInfo');\r",
									"        let response = await reqPromise(optionsCreateThingStateInfo);\r",
									"        let jsonDataCreateThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataCreateThingStateInfo',jsonDataCreateThingStateInfo)\r",
									"\r",
									"        let operationStatusCreateThingStateInfo = await jsonDataCreateThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"CreateThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //CreateThingStateInfo is Success\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Description is ' + '\"' + resultDescriptionCreateThingStateInfo + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Description', resultDescriptionCreateThingStateInfo);\r",
									"        });\r",
									"\r",
									"       \r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateConfigGroup\r",
									"CreateConfigGroup = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateConfigGroup = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateConfigGroup + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateConfigGroup,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\")\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreateConfigGroup = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ConfigName\":  pm.environment.get(\"ConfigGroupName\"),\r",
									"                \"ThingId\": [pm.environment.get(\"GetResponse_ThingID\")],\r",
									"                \"ConfigInfo\": {\r",
									"                    \"RefreshTime\": fieldDataValue.ConfigGroup.RefreshTime , //\"On\"\r",
									"                    \"Max\": fieldDataValue.ConfigGroup.Max //\"99\"\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateConfigGroup = {\r",
									"            url: url + provisioningapis + urlConfigGroupCreateConfigGroup,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateConfigGroup,\r",
									"            body: httpRequestCreateConfigGroup\r",
									"        };\r",
									"\r",
									"        // console.log('response CreateConfigGroup');\r",
									"        let response = await reqPromise(optionsCreateConfigGroup);\r",
									"        let jsonDataCreateConfigGroup = await response.json();\r",
									"        // console.log('jsonDataCreateConfigGroup',jsonDataCreateConfigGroup)\r",
									"    \r",
									"        let operationStatusCreateConfigGroup = await jsonDataCreateConfigGroup.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateConfigGroup : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateConfigGroup : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateConfigGroup).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateConfigGroup is Success\r",
									"        pm.test('CreateConfigGroup : OperationStatus description is '+'\"'+ resultDescriptionCreateConfigGroup+'\"', function () {\r",
									"            pm.expect(operationStatusCreateConfigGroup).to.have.property('Description', resultDescriptionCreateConfigGroup);\r",
									"        });\r",
									"\r",
									"        pm.environment.set(\"GetResponse_ConfigGroupId\",jsonDataCreateConfigGroup.ConfigGroupInfo.ConfigGroupId)\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// AsgardHTTPeSimRegister\r",
									"AsgardHTTPeSimRegister = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptAsgardHTTPeSimRegister = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_RegisHTTP + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_RegisHTTP,\r",
									"            'Authorization': Basic + ' ' + pm.environment.get(\"encodedKeys_Authorization_Register\")\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestAsgardHTTPeSimRegister = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({})\r",
									"        };\r",
									"\r",
									"        let optionsAsgardHTTPeSimRegister = {\r",
									"            url: url + httpapis + urlAsgardHTTPeSimRegister,\r",
									"            method: 'POST',\r",
									"            header: headersOptAsgardHTTPeSimRegister,\r",
									"            body: httpRequestAsgardHTTPeSimRegister\r",
									"        };\r",
									"\r",
									"        // console.log('request AsgardHTTPEsimRegister');\r",
									"        let response = await reqPromise(optionsAsgardHTTPeSimRegister);\r",
									"        let jsonDataAsgardHTTPeSimRegister = await response.json();\r",
									"        // console.log('jsonDataCreateThingStateInfo',jsonDataAsgardHTTPeSimRegister)\r",
									"        let operationStatusAsgardHTTPeSimRegister = await jsonDataAsgardHTTPeSimRegister.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"Asgard HTTP(eSim) Register : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('Asgard HTTP(eSim) Register : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusAsgardHTTPeSimRegister).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"\r",
									"        // The requested operation was successfully.\r",
									"        pm.test('Asgard HTTP(eSim) Register : OperationStatus DeveloperMessage is ' + '\"' + resultDescriptionTheRequestedOperationWasSuccessfully + '\"', function () {\r",
									"            pm.expect(operationStatusAsgardHTTPeSimRegister).to.have.property('DeveloperMessage', resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"        });\r",
									"\r",
									"        await pm.environment.set(\"GetResponse_ThingToken\", jsonDataAsgardHTTPeSimRegister.ThingToken)\r",
									"        let keys2 = await pm.environment.get(\"GetResponse_ThingToken\") + \":\" + pm.environment.get(\"IpAddress\");        \r",
									"        let encodedKeys2 = await CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(keys2));\r",
									"        pm.environment.set(\"encodedKeys_Authorization_Config\", encodedKeys2)\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"Signin();\r",
									"setTimeout(async function(){await CreatePartner();}, 3000); \r",
									"setTimeout(async function(){await CreateAccount();}, 6000); \r",
									"setTimeout(async function(){await CreateThing();}, 8000); \r",
									"setTimeout(async function(){await CreateThingStateInfo();}, 9000); \r",
									"setTimeout(async function(){await CreateConfigGroup();}, 10000); \r",
									"setTimeout(async function(){await AsgardHTTPeSimRegister();}, 20000); \r",
									"setTimeout(async function(){}, 30000); //for wait value encodedKeys_Authorization_Config"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-ais-UserName",
								"type": "text",
								"value": "{{x_ais_UserName_AisPartner}}"
							},
							{
								"key": "x-ais-OrderRef",
								"value": "{{x_ais_OrderRef_ConfigHTTP_fail}}{{current_timestamp}}"
							},
							{
								"key": "x-ais-OrderDesc",
								"type": "text",
								"value": "{{x_ais_OrderDesc_ConfigHTTP}}"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{Basic}} {{encodedKeys_Authorization_Config}}",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{url}}{{httpapis}}/api/config/sim/v1?Sensor=RefreshTime",
							"host": [
								"{{url}}{{httpapis}}"
							],
							"path": [
								"api",
								"config",
								"sim",
								"v1"
							],
							"query": [
								{
									"key": "Sensor",
									"value": "RefreshTime"
								}
							]
						},
						"description": "Type:Desire"
					},
					"response": []
				},
				{
					"name": "AsgardHTTPeSimConfig_TST_F2_0_2_004_Error_AccountIdNotfound",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var Basic = pm.environment.get(\"Basic\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to xAisOrderRef \"RemoveThing_\"\r",
									"var x_ais_OrderRef_RemoveThing = pm.globals.get(\"x_ais_OrderRef_RemoveThing\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"var x_ais_OrderDesc_RemoveThing = pm.globals.get(\"x_ais_OrderDesc_RemoveThing\");\r",
									"//get global variable to xAisOrderRef \"RemoveThingStateInfo_\"\r",
									"var x_ais_OrderRef_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderRef_RemoveThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThingStateInfo\"\r",
									"var x_ais_OrderDesc_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_RemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals ConfigGroup --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveConfigGroup_\"\r",
									"const x_ais_OrderRef_RemoveConfigGroup = pm.globals.get(\"x_ais_OrderRef_RemoveConfigGroup\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveConfigGroup\"\r",
									"const x_ais_OrderDesc_RemoveConfigGroup = pm.globals.get(\"x_ais_OrderDesc_RemoveConfigGroup\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals AsgardHTTP --------------//\r",
									"//get global variable to x_ais_OrderRef \"ConfigHTTP_\"\r",
									"var x_ais_OrderRef_ConfigHTTP = pm.globals.get(\"x_ais_OrderRef_ConfigHTTP\");\r",
									"//get global variable to x_ais_OrderRef \"ConfigHTTPfail_\"\r",
									"var x_ais_OrderRef_ConfigHTTP_fail = pm.globals.get(\"x_ais_OrderRef_ConfigHTTP_fail\");\r",
									"//get global variable to x_ais_OrderDesc \"Get Config from MG\"\r",
									"var x_ais_OrderDesc_ConfigHTTP = pm.globals.get(\"x_ais_OrderDesc_ConfigHTTP\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get url Remove --------------//\r",
									"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
									"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"var urlThingRemoveThing = pm.globals.get(\"urlThingRemoveThing\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"var urlThingRemoveThingStateInfo = pm.globals.get(\"urlThingRemoveThingStateInfo\");\r",
									"//get global variable to url \"/ConfigGroup/RemoveConfigGroup\"\r",
									"var urlConfigGroupRemoveConfigGroup = pm.globals.get(\"urlConfigGroupRemoveConfigGroup\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"RemovePartner is Success\"\r",
									"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
									"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
									"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
									"//get global variable to resultDescription \"RemoveThing is Success\"\r",
									"var resultDescriptionRemoveThing = pm.globals.get(\"resultDescriptionRemoveThing\");\r",
									"//get global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"var resultDescriptionRemoveThingStateInfo = pm.globals.get(\"resultDescriptionRemoveThingStateInfo\");\r",
									"//get global variable to resultDescription \"RemoveConfigGroup is Success\"\r",
									"var resultDescriptionRemoveConfigGroup = pm.globals.get(\"resultDescriptionRemoveConfigGroup\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 404\r",
									"var statusCodeNotFound = pm.globals.get(\"statusCodeNotFound\");\r",
									"//get global variable to resultCode \"40400\"\r",
									"var resultCodeNotFound = pm.globals.get(\"resultCodeNotFound\");\r",
									"//get global variable to resultDescription \"The requested operation could not be found.\"\r",
									"var resultDescriptionTheRequestedOperationCouldNotBeFound = pm.globals.get(\"resultDescriptionTheRequestedOperationCouldNotBeFound\");\r",
									"//------------------------------------------------------------//\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Asgard HTTP(eSim) Config : Status code is \" + statusCodeNotFound, function () {\r",
									"    pm.response.to.have.status(statusCodeNotFound);\r",
									"});\r",
									"\r",
									"pm.test('Asgard HTTP(eSim) Config : operationStatus code is '+'\"'+ resultCodeNotFound +'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeNotFound);\r",
									"});\r",
									"\r",
									"pm.test('Asgard HTTP(eSim) Config : OperationStatus DeveloperMessage is '+'\"'+ resultDescriptionTheRequestedOperationCouldNotBeFound+'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheRequestedOperationCouldNotBeFound);\r",
									"});\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// RemovePartner\r",
									" RemovePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemovePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemovePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemovePartner = {\r",
									"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemovePartner,\r",
									"            body: httpRequestRemovePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request RemovePartner');\r",
									"        let response = await reqPromise(optionsRemovePartner);\r",
									"        let jsonDataRemovePartner = await response.json();\r",
									"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
									"    \r",
									"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemovePartner is Success\r",
									"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveAccount\r",
									" RemoveAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemoveAccount = {\r",
									"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveAccount,\r",
									"            body: httpRequestRemoveAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveAccount');\r",
									"        let response = await reqPromise(optionsRemoveAccount);\r",
									"        let jsonDataRemoveAccount = await response.json();\r",
									"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
									"    \r",
									"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveAccount is Success\r",
									"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThing\r",
									" RemoveThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThing = {\r",
									"            url: url + provisioningapis + urlThingRemoveThing,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThing,\r",
									"            body: httpRequestRemoveThing\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveThing');\r",
									"        let response = await reqPromise(optionsRemoveThing);\r",
									"        let jsonDataRemoveThing = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThing)\r",
									"    \r",
									"        let operationStatusRemoveThing = await jsonDataRemoveThing.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThing : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThing : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThing is Success\r",
									"        pm.test('RemoveThing : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThing+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Description', resultDescriptionRemoveThing);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThingStateInfo\r",
									" RemoveThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"            \r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\"),\r",
									"                \"stateType\": fieldDataValue.CreateThingStateInfo.Type_Report, //Report\r",
									"                \"stateKey\": fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP //AA\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingRemoveThingStateInfo,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThingStateInfo,\r",
									"            body: httpRequestRemoveThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('response RemoveThingStateInfo');\r",
									"        let response = await reqPromise(optionsRemoveThingStateInfo);\r",
									"        let jsonDataRemoveThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThingStateInfo)\r",
									"    \r",
									"        let operationStatusRemoveThingStateInfo = await jsonDataRemoveThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThingStateInfo is Success\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThingStateInfo+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Description', resultDescriptionRemoveThingStateInfo);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveConfigGroup\r",
									" RemoveConfigGroup = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveConfigGroup = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_RemoveConfigGroup + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_RemoveConfigGroup,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey': pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveConfigGroup = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ConfigGroupId\": pm.environment.get(\"GetResponse_ConfigGroupId\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveConfigGroup = {\r",
									"            url: url + provisioningapis + urlConfigGroupRemoveConfigGroup,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveConfigGroup,\r",
									"            body: httpRequestRemoveConfigGroup\r",
									"        };\r",
									"\r",
									"        // console.log('response RemoveConfigGroup');\r",
									"        let response = await reqPromise(optionsRemoveConfigGroup);\r",
									"        let jsonDataRemoveConfigGroup = await response.json();\r",
									"        // console.log('jsonDataRemoveConfigGroup',jsonDataRemoveConfigGroup)\r",
									"    \r",
									"        let operationStatusRemoveConfigGroup = await jsonDataRemoveConfigGroup.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveConfigGroup : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveConfigGroup : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveConfigGroup).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveConfigGroup is Success\r",
									"        pm.test('RemoveConfigGroup : OperationStatus Description is '+'\"'+ resultDescriptionRemoveConfigGroup+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveConfigGroup).to.have.property('Description', resultDescriptionRemoveConfigGroup);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"//---------------- LogDefaultValue --------------//\r",
									"//set variable to LogDefaultValue JSON.parse\r",
									"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
									"// console.log('LogDefaultValue',LogDefaultValue);\r",
									"//---------------- set globals Other --------------//\r",
									"\r",
									"var SearchLog = LogDefaultValue.SearchLog;\r",
									"// console.log('SearchLog',SearchLog);\r",
									"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
									"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
									"var kbn_version = SearchLog.header.kbn_version;\r",
									"var authorization = SearchLog.header.Authorization;\r",
									"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
									"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
									"var namespace = LogDefaultValue.Other.namespace;\r",
									"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
									"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
									"var header_x_ais_username = LogDefaultValue.Other.header_x_ais_username;\r",
									"var methodGet = LogDefaultValue.Other.methodGet;\r",
									"\r",
									"// Detail\r",
									"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
									"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
									"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
									"\r",
									"// Summary\r",
									"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
									"var identitySummary = \"\";\r",
									"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
									"\r",
									"// Asgard.Http.APIs\r",
									"var applicationName = LogDefaultValue.AsgardHTTP.applicationName;\r",
									"var cmdName = LogDefaultValue.AsgardHTTP.cmdNameConfig;\r",
									"var endPointNameRabbitMQ = LogDefaultValue.AsgardHTTP.endPointNameRabbitMQ;\r",
									"var containerId = LogDefaultValue.AsgardHTTP.containerId;\r",
									"var requestObjectUrlStaging = LogDefaultValue.AsgardHTTP.requestObjectUrlConfigMgStaging;\r",
									"var urlConfig  = LogDefaultValue.AsgardHTTP.urlConfigError;\r",
									"\r",
									"// Check CDR (Summary Log) and EDR (Detail Log)\r",
									"SearchLogFindTid = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSearchLogFindTid = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = x_ais_OrderRef_ConfigHTTP_fail + current_timestamp;\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestSearchLogFindTid = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"\r",
									"        let optionsSearchLogFindTid = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptSearchLogFindTid,\r",
									"            body: httpRequestSearchLogFindTid\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsSearchLogFindTid);\r",
									"        let jsonDataSearchLogFindTid = await response.json();\r",
									"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
									"        // console.log('hits',hits)\r",
									"  \r",
									"        // find tid\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            // let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"        \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            if(applicationNameValue == applicationName){\r",
									"                let tid = hits[i]._source.cauldron.tid;\r",
									"                pm.environment.set(\"tid\", tid);\r",
									"                break;\r",
									"           }\r",
									"        }\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"CheckLog = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCheckLog = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = pm.environment.get(\"tid\");\r",
									"\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestCheckLog = {\r",
									"            mode: 'raw',\r",
									"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"        let optionsCheckLog = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptCheckLog,\r",
									"            body: httpRequestCheckLog\r",
									"        }; \r",
									"        let response = await reqPromise(optionsCheckLog);\r",
									"        let jsonDataCheckLog = await response.json();\r",
									"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
									"        \r",
									"        // //200\r",
									"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });     \r",
									"        \r",
									"        let hits = jsonDataCheckLog.hits.hits\r",
									"        console.log('hits',hits)\r",
									"  \r",
									"        // find logType\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            //  let logType = hits[i]._source.cauldron.logType\r",
									"            let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"           \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            \r",
									"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
									"            // console.log('resultDataLog',resultDataLog)\r",
									"\r",
									"            let tidControl = x_ais_OrderRef_ConfigHTTP_fail  + current_timestamp;\r",
									"            // console.log(tidControl);\r",
									"            if(applicationNameValue == applicationName){\r",
									"                 \r",
									"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and Asgard.Http.APIs\r",
									"                    pm.test(\"Check Summary Log : Asgard_HTTP(eSim) Config\" , function () {\r",
									"                        console.log(\"======== Check Summary Log ( Expected = Actual) [Asgard_HTTP(eSim) Config] ==================\");\r",
									"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
									"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
									"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeNotFound);\r",
									"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionTheRequestedOperationCouldNotBeFound);\r",
									"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
									"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"identity : \" + JSON.stringify(resultDataLog.identity) + \" = \" + JSON.stringify(identitySummary));\r",
									"                        // console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
									"\r",
									"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
									"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
									"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeNotFound); \r",
									"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionTheRequestedOperationCouldNotBeFound); \r",
									"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
									"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
									"                        // pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
									"\r",
									"                        // check custom\r",
									"                        // \\\"custom\\\":{ \\\"endPointSummary\\\":[ { \\\"no\\\":\\\"1\\\", \\\"endPointName\\\":\\\"db.ThingsCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:Inquiry was Success\\\", \\\"processTime\\\":0.0012 } ] }\r",
									"\r",
									"                        let custom = resultDataLog.custom.endPointSummary;\r",
									"                        let countCustom = custom.length;\r",
									"                       \r",
									"                        // [\"db.ThingsCollection\"]\r",
									"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_Asgard_HTTP_eSim_Config_002_004_005_006;\r",
									"                        // [\"20000:Inquiry was Success\"]\r",
									"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_Asgard_HTTP_eSim_Config_002_004_005_006;\r",
									"                        let countCustomStep = dataEndPointName.length;\r",
									"\r",
									"                        console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep);\r",
									"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
									"                        \r",
									"                        for(let i=0;i<countCustomStep;i++){\r",
									"                            let no = custom[i].no;\r",
									"                            let valueEndPointName = custom[i].endPointName;\r",
									"                            let valueResponseStatus = custom[i].responseStatus;\r",
									"                            // console.log(\"i\",i);\r",
									"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
									"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
									"\r",
									"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString());\r",
									"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i]);\r",
									"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i]);\r",
									"\r",
									"                            pm.expect(no).to.eql((i+1).toString()); \r",
									"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
									"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]); \r",
									"                        }\r",
									"                    }); \r",
									"                }\r",
									"\r",
									"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and Asgard.Http.APIs\r",
									"\r",
									"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
									"                    // console.log('endPointNameValue ',endPointNameValue)\r",
									"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [Asgard_HTTP(eSim) Config]\", function () {\r",
									"                        console.log(\"======== Check Detail Log ( Expected = Actual) [Asgard_HTTP(eSim) Config] ==================\");\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
									"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
									"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
									"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.custom1.activityLog.processTime + \" = \" + resultDataLog.custom1.activityLog.processTime);\r",
									"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
									"\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
									"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
									"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
									"\r",
									"                        let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
									"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
									"                        let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
									"                            // console.log('jsonParseResponseObject',jsonParseResponseObject); \r",
									"                        let url = urlConfig; \r",
									"                        let x_ais_orderref = x_ais_OrderRef_ConfigHTTP_fail + current_timestamp;\r",
									"                        let x_ais_orderdesc = x_ais_OrderDesc_ConfigHTTP;\r",
									"                        let x_ais_userName = x_ais_UserName_AisPartner;\r",
									"                        let authorization = Basic + ' ' + pm.environment.get(\"encodedKeys_Authorization_Config\");\r",
									"                        let SensorKey = fieldDataValue.CreateThingStateInfo.SensorKey;\r",
									"                        let sensor = pm.environment.get(\"random_Sensor\");\r",
									"                        let timestamp = pm.environment.get(\"timestamp\");\r",
									"\r",
									"                        if( endPointNameValue == undefined){\r",
									"                            // check requestObject\r",
									"                            // \"requestObject\":\"{\\\"url\\\":\\\"/api/config/sim/v1\\\",\\\"method\\\":\\\"GET\\\",\\\"headers\\\":{\\\"Cache-Control\\\":\\\"no-cache\\\",\\\"Content-Type\\\":\\\"application/json\\\",\\\"Accept\\\":\\\"*/*\\\",\\\"Accept-Encoding\\\":\\\"gzip,deflate,br\\\",\\\"Authorization\\\":\\\"Basic ZmYxMjEwZjgtNGFjYi00YjNjLTkwMTMtODc0YWM0ZGIxZGVieHg6MS4yLjMuNA==\\\",\\\"Host\\\":\\\"mg-staging.sandais.com\\\",\\\"User-Agent\\\":\\\"PostmanRuntime/7.26.8\\\",\\\"Content-Length\\\":\\\"0\\\",\\\"x-real-ip\\\":\\\"58.8.214.174\\\",\\\"x-forwarded-for\\\":\\\"58.8.214.174\\\",\\\"x-forwarded-proto\\\":\\\"https\\\",\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"ConfigHTTPfail_202102152002008\\\",\\\"x-ais-orderdesc\\\":\\\"Get Config from MG\\\",\\\"postman-token\\\":\\\"a99d5f91-ea7c-4695-b941-0dea110169a2\\\",\\\"x-request-id\\\":\\\"cc1ffc3a-c815-4299-ac4a-9250d7064fa8\\\",\\\"x-b3-traceid\\\":\\\"55b1fe4d9548fdbb017552c523e0afcd\\\",\\\"x-b3-spanid\\\":\\\"017552c523e0afcd\\\",\\\"x-b3-sampled\\\":\\\"0\\\",\\\"x-ais-SessionId\\\":\\\"1613397270624\\\"},\\\"queryString\\\":{\\\"Sensor\\\":\\\"RefreshTime\\\"},\\\"routeParamteters\\\":{}}\"\r",
									"\r",
									"                            // \\\"requestObject\\\":\\\"{ \\\\\\\"url\\\\\\\":\\\\\\\"/api/config/sim/v1\\\\\\\", \\\\\\\"method\\\\\\\":\\\\\\\"GET\\\\\\\", \\\\\\\"headers\\\\\\\":{ \\\\\\\"Cache-Control\\\\\\\":\\\\\\\"no-cache\\\\\\\", \\\\\\\"Content-Type\\\\\\\":\\\\\\\"application/json\\\\\\\", \\\\\\\"Accept\\\\\\\":\\\\\\\"*/*\\\\\\\", \\\\\\\"Accept-Encoding\\\\\\\":\\\\\\\"gzip, deflate, br\\\\\\\", \\\\\\\"Authorization\\\\\\\":\\\\\\\"Basic NzU0MmNmM2UtYzc5My00N2FkLTk3MDQtMTdiZTZiMWI0NDVhOjEuMi4zLjQ=\\\\\\\", \\\\\\\"Host\\\\\\\":\\\\\\\"mg-iot.sandais.com\\\\\\\", \\\\\\\"User-Agent\\\\\\\":\\\\\\\"PostmanRuntime/7.26.8\\\\\\\", \\\\\\\"Content-Length\\\\\\\":\\\\\\\"0\\\\\\\", \\\\\\\"x-real-ip\\\\\\\":\\\\\\\"182.232.183.255\\\\\\\", \\\\\\\"x-forwarded-for\\\\\\\":\\\\\\\"182.232.183.255, 10.233.67.0\\\\\\\", \\\\\\\"x-forwarded-proto\\\\\\\":\\\\\\\"http\\\\\\\", \\\\\\\"x-ais-username\\\\\\\":\\\\\\\"AisPartner\\\\\\\", \\\\\\\"x-ais-orderref\\\\\\\":\\\\\\\"ConfigHTTPfail_202105112105128\\\\\\\", \\\\\\\"x-ais-orderdesc\\\\\\\":\\\\\\\"Get Config from MG\\\\\\\", \\\\\\\"postman-token\\\\\\\":\\\\\\\"37acfa27-92cf-4edd-b5bf-f1d8bb900b4b\\\\\\\", \\\\\\\"x-envoy-external-address\\\\\\\":\\\\\\\"10.233.67.0\\\\\\\", \\\\\\\"x-request-id\\\\\\\":\\\\\\\"87a9edde-fde2-4cb1-9060-6f2a33400087\\\\\\\", \\\\\\\"x-envoy-original-path\\\\\\\":\\\\\\\"/httpapis/api/config/sim/v1?Sensor=RefreshTime\\\\\\\", \\\\\\\"x-b3-traceid\\\\\\\":\\\\\\\"f179fec5a8cfd73b6882d16e433d0406\\\\\\\", \\\\\\\"x-b3-spanid\\\\\\\":\\\\\\\"9a62a0d43c85bb46\\\\\\\", \\\\\\\"x-b3-parentspanid\\\\\\\":\\\\\\\"6882d16e433d0406\\\\\\\", \\\\\\\"x-b3-sampled\\\\\\\":\\\\\\\"0\\\\\\\", \\\\\\\"x-ais-SessionId\\\\\\\":\\\\\\\"1620743206151\\\\\\\" }, \\\\\\\"queryString\\\\\\\":{ \\\\\\\"Sensor\\\\\\\":\\\\\\\"RefreshTime\\\\\\\" }, \\\\\\\"routeParamteters\\\\\\\":{ } }\\\"\r",
									"\r",
									"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
									"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodGet);\r",
									"                            console.log(\"headers.x_ais_userName : \" + jsonParseRequestObject.headers[header_x_ais_username] + \" = \" + x_ais_userName);\r",
									"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
									"                            console.log(\"headers.Authorization : \" + jsonParseRequestObject.headers.Authorization + \" = \" + authorization);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
									"                            pm.expect(jsonParseRequestObject.method).to.eql(methodGet);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_username]).to.eql(x_ais_userName);\r",
									"                            pm.expect(jsonParseRequestObject.headers.Authorization).to.eql(authorization);\r",
									"\r",
									"                            console.log(\"queryString.Sensor : \" + JSON.stringify(jsonParseRequestObject.queryString.Sensor) + \" = \" + JSON.stringify(\"RefreshTime\"));\r",
									"                            console.log(\"routeParamteters : \" + JSON.stringify(jsonParseRequestObject.routeParamteters) + \" = \" + JSON.stringify({}));\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.queryString.Sensor).to.eql(\"RefreshTime\"); \r",
									"                            pm.expect(jsonParseRequestObject.routeParamteters).to.eql({}); \r",
									"\r",
									"                            // check responseObject\r",
									"                            // \"responseObject\":\"{\\\"OperationStatus\\\":{\\\"Code\\\":\\\"40400\\\",\\\"DeveloperMessage\\\":\\\"The requested operation could not be found.\\\"}}\"\r",
									"\r",
									"                            console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeNotFound);\r",
									"                            console.log(\"response.OperationStatus.DeveloperMessage : \" + jsonParseResponseObject.OperationStatus.DeveloperMessage + \" = \" + resultDescriptionTheRequestedOperationCouldNotBeFound); \r",
									"\r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeNotFound);  \r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheRequestedOperationCouldNotBeFound);  \r",
									"                        }\r",
									"                    }); \r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"setTimeout(function(){SearchLogFindTid();}, 50000); \r",
									"setTimeout(function(){CheckLog();}, 70000); \r",
									"\r",
									"setTimeout(function(){RemoveConfigGroup();}, 80000); \r",
									"setTimeout(function(){RemoveAccount();}, 90000); \r",
									"setTimeout(function(){RemovePartner();}, 100000); \r",
									"\r",
									"setTimeout(function(){\r",
									"pm.environment.unset(\"current_timestamp\");\r",
									"pm.environment.unset(\"AccessToken\");\r",
									"pm.environment.unset(\"random_number\");\r",
									"pm.environment.unset(\"PartnerName\");\r",
									"pm.environment.unset(\"MerchantContact\");\r",
									"pm.environment.unset(\"CPID\");\r",
									"pm.environment.unset(\"GetResponse_PartnerId\");\r",
									"pm.environment.unset(\"AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountId\");\r",
									"pm.environment.unset(\"random_IM\");\r",
									"pm.environment.unset(\"random_ICCID\");\r",
									"pm.environment.unset(\"ThingName\");\r",
									"pm.environment.unset(\"GetResponse_ThingID\");\r",
									"pm.environment.unset(\"GetResponse_IMSI\");\r",
									"pm.environment.unset(\"encodedKeys_Authorization_Register\");\r",
									"pm.environment.unset(\"encodedKeys_Authorization_Config\");\r",
									"pm.environment.unset(\"random_Sensor\");\r",
									"pm.environment.unset(\"GetResponse_ThingToken\");\r",
									"pm.environment.unset(\"tid\");\r",
									"pm.environment.unset(\"GetResponse_ConfigGroupId\");\r",
									"pm.environment.unset(\"ConfigGroupName\");\r",
									"}, 110000); \r",
									"setTimeout(async function(){}, 120000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var Username = pm.environment.get(\"Username\");\r",
									"var Password = pm.environment.get(\"Password\");\r",
									"\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"var httpapis = pm.environment.get(\"httpapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"//format YYYYMMDDHHMMSSS\r",
									"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
									"// console.log('currentTmestamp',currentTmestamp);\r",
									"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var Basic = pm.environment.get(\"Basic\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- statusCodeList --------------//\r",
									"//set variable to statusCodeList JSON.parse\r",
									"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
									"//set global variable to statusCode 200\r",
									"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
									"//set global variable to statusCode 201\r",
									"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
									"//set global variable to statusCode 404\r",
									"pm.globals.set(\"statusCodeNotFound\", statusCodeList.statusCodeNotFound);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultCodeList --------------//\r",
									"//set variable to resultCodeList JSON.parse\r",
									"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
									"//set global variable to resultCode \"20000\"\r",
									"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
									"//set global variable to resultCode \"20100\"\r",
									"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
									"//set global variable to resultCode \"40400\"\r",
									"pm.globals.set(\"resultCodeNotFound\", resultCodeList.resultCodeNotFound);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionSuccessList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
									"//set global variable to resultDescription \"SignInProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
									"//set global variable to resultDescription \"CreatePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
									"//set global variable to resultDescription \"CreateAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
									"//set global variable to resultDescription \"CreateThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThing\", resultDescriptionSuccessList.resultDescriptionCreateThing);\r",
									"//set global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThingStateInfo\", resultDescriptionSuccessList.resultDescriptionCreateThingStateInfo);\r",
									"//set global variable to resultDescription \"RemovePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
									"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
									"//set global variable to resultDescription \"RemoveThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThing\", resultDescriptionSuccessList.resultDescriptionRemoveThing);\r",
									"//set global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThingStateInfo\", resultDescriptionSuccessList.resultDescriptionRemoveThingStateInfo);\r",
									"//set global variable to resultDescription \"Register is Success\"\r",
									"pm.globals.set(\"resultDescriptionRegisterIsSuccess\", resultDescriptionSuccessList.resultDescriptionRegisterIsSuccess);\r",
									"//set global variable to resultDescription \"ConfigProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionConfigProcessIsSuccess\", resultDescriptionSuccessList.resultDescriptionConfigProcessIsSuccess);\r",
									"//set global variable to resultDescription \"CreateConfigGroup is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateConfigGroup\", resultDescriptionSuccessList.resultDescriptionCreateConfigGroup);\r",
									"//set global variable to resultDescription \"RemoveConfigGroup is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveConfigGroup\", resultDescriptionSuccessList.resultDescriptionRemoveConfigGroup);\r",
									"//set global variable to resultDescription \"The requested operation was successfully.\"\r",
									"pm.globals.set(\"resultDescriptionTheRequestedOperationWasSuccessfully\", resultDescriptionSuccessList.resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"//set global variable to resultDescription \"RemoveThingFromAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThingFromAccount\", resultDescriptionSuccessList.resultDescriptionRemoveThingFromAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionErrorList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
									"//set global variable to resultDescription \"The requested operation could not be found.\"\r",
									"pm.globals.set(\"resultDescriptionTheRequestedOperationCouldNotBeFound\", resultDescriptionErrorList.resultDescriptionTheRequestedOperationCouldNotBeFound);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- HeaderList --------------//\r",
									"//set variable to HeaderList JSON.parse\r",
									"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
									"//---------------- set globals Other --------------//\r",
									"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
									"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
									"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
									"//set global variable to kbn-versio \"7.5.1\"\r",
									"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Signin_ --------------//\r",
									"//set global variable to x_ais_OrderRef \"Signin_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreatePartner --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
									"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
									"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
									"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreateAccount --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
									"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
									"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Thing --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThing\", HeaderList.Thing.x_ais_OrderRef_CreateThing);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThing\", HeaderList.Thing.x_ais_OrderDesc_CreateThing);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThing\", HeaderList.Thing.x_ais_OrderRef_RemoveThing);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThing\", HeaderList.Thing.x_ais_OrderDesc_RemoveThing);\r",
									"//set global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_RemoveThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_RemoveThingStateInfo);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThingFromAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThingFromAccount\", HeaderList.Thing.x_ais_OrderRef_RemoveThingFromAccount);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThingFromAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThingFromAccount\", HeaderList.Thing.x_ais_OrderDesc_RemoveThingFromAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals AsgardHTTP --------------//\r",
									"//set global variable to x_ais_OrderRef \"RegisHTTP_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RegisHTTP\", HeaderList.AsgardHTTP.x_ais_OrderRef_RegisHTTP);\r",
									"//set global variable to x_ais_OrderDesc \"Register Thing in MG\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RegisHTTP\", HeaderList.AsgardHTTP.x_ais_OrderDesc_RegisHTTP);\r",
									"//set global variable to x_ais_OrderRef \"ConfigHTTP_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ConfigHTTP\", HeaderList.AsgardHTTP.x_ais_OrderRef_ConfigHTTP);\r",
									"//set global variable to x_ais_OrderRef \"ConfigHTTPfail_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ConfigHTTP_fail\", HeaderList.AsgardHTTP.x_ais_OrderRef_ConfigHTTP_fail);\r",
									"//set global variable to x_ais_OrderDesc \"Get Config from MG\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_ConfigHTTP\", HeaderList.AsgardHTTP.x_ais_OrderDesc_ConfigHTTP);\r",
									"//set global variable to x_ais_OrderRef \"ReportHTTP_\"\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals ConfigGroup --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateConfigGroup_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateConfigGroup\", HeaderList.ConfigGroup.x_ais_OrderRef_CreateConfigGroup);\r",
									"//set global variable to x_ais_OrderDesc \"CreateConfigGroup\"\r",
									" pm.globals.set(\"x_ais_OrderDesc_CreateConfigGroup\", HeaderList.ConfigGroup.x_ais_OrderDesc_CreateConfigGroup);\r",
									"//set global variable to x_ais_OrderRef \"RemoveConfigGroup_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveConfigGroup\", HeaderList.ConfigGroup.x_ais_OrderRef_RemoveConfigGroup);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveConfigGroup\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveConfigGroup\", HeaderList.ConfigGroup.x_ais_OrderDesc_RemoveConfigGroup);\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"SignInProcess is Success\"\r",
									"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
									"//get global variable to resultDescription \"CreatePartner is Success\"\r",
									"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
									"//get global variable to resultDescription \"CreateAccount is Success\"\r",
									"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
									"//get global variable to resultDescription \"CreateThing is Success\"\r",
									"var resultDescriptionCreateThing = pm.globals.get(\"resultDescriptionCreateThing\");\r",
									"//get global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"var resultDescriptionCreateThingStateInfo = pm.globals.get(\"resultDescriptionCreateThingStateInfo\");\r",
									"//get global variable to resultDescription \"Register is Success\"\r",
									"var resultDescriptionRegisterIsSuccess = pm.globals.get(\"resultDescriptionRegisterIsSuccess\");\r",
									"//get global variable to resultDescription \"CreateConfigGroup is Success\"\r",
									"var resultDescriptionCreateConfigGroup = pm.globals.get(\"resultDescriptionCreateConfigGroup\");\r",
									"//get global variable to resultDescription \"The requested operation was successfully.\"\r",
									"var resultDescriptionTheRequestedOperationWasSuccessfully = pm.globals.get(\"resultDescriptionTheRequestedOperationWasSuccessfully\");\r",
									"//get global variable to resultDescription \"RemoveThingFromAccount is Success\"\r",
									"var resultDescriptionRemoveThingFromAccount = pm.globals.get(\"resultDescriptionRemoveThingFromAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- urlRouteList --------------//\r",
									"//set variable to urlRouteList JSON.parse\r",
									"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
									"//---------------- set url Create --------------//\r",
									"//set global variable to url \"/api/v1/auth/signin\"\r",
									"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
									"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
									"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"pm.globals.set(\"urlThingCreateThing\", urlRouteList.Thing.urlThingCreateThing);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"pm.globals.set(\"urlThingCreateThingStateInfo\", urlRouteList.Thing.urlThingCreateThingStateInfo);\r",
									"//set global variable to url \"/api/register/sim/v1\"\r",
									"pm.globals.set(\"urlAsgardHTTPeSimRegister\", urlRouteList.AsgardHTTPeSim.urlAsgardHTTPeSimRegister);\r",
									"//set global variable to url \"/api/config/sim/v1?Sensor\"\r",
									"pm.globals.set(\"urlAsgardHTTPeSimConfig\", urlRouteList.AsgardHTTPeSim.urlAsgardHTTPeSimConfig);\r",
									"//set global variable to url \"/ConfigGroup/CreateConfigGroup\"\r",
									"pm.globals.set(\"urlConfigGroupCreateConfigGroup\", urlRouteList.ConfigGroup.urlConfigGroupCreateConfigGroup);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThingFromAccount\"\r",
									"pm.globals.set(\"urlAccountRemoveThingFromAccount\", urlRouteList.Thing.urlAccountRemoveThingFromAccount);\r",
									"//---------------- get url Create --------------//\r",
									"//get global variable to url \"/api/v1/auth/signin\"\r",
									"var urlSignin = pm.globals.get(\"urlSignin\");\r",
									"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
									"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"var urlThingCreateThing = pm.globals.get(\"urlThingCreateThing\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"var urlThingCreateThingStateInfo = pm.globals.get(\"urlThingCreateThingStateInfo\");\r",
									"//get global variable to url \"/api/register/sim/v1\"\r",
									"var urlAsgardHTTPeSimRegister = pm.globals.get(\"urlAsgardHTTPeSimRegister\");\r",
									"//get global variable to url \"/api/config/sim/v1?Sensor\"\r",
									"var urlAsgardHTTPeSimConfig = pm.globals.get(\"urlAsgardHTTPeSimConfig\");\r",
									"//get global variable to url \"/ConfigGroup/CreateConfigGroup\"\r",
									"var urlConfigGroupCreateConfigGroup = pm.globals.get(\"urlConfigGroupCreateConfigGroup\");\r",
									"//---------------- set url Remove --------------//\r",
									"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
									"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"pm.globals.set(\"urlThingRemoveThing\", urlRouteList.Thing.urlThingRemoveThing);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"pm.globals.set(\"urlThingRemoveThingStateInfo\", urlRouteList.Thing.urlThingRemoveThingStateInfo);\r",
									"//set global variable to url \"/ConfigGroup/RemoveConfigGroup\"\r",
									"pm.globals.set(\"urlConfigGroupRemoveConfigGroup\", urlRouteList.ConfigGroup.urlConfigGroupRemoveConfigGroup);\r",
									"//---------------- get url Remove --------------//\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThingFromAccount\"\r",
									"var urlAccountRemoveThingFromAccount = pm.globals.get(\"urlAccountRemoveThingFromAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Signin_ --------------//\r",
									"//get global variable to x_ais_OrderRef \"Signin_\"\r",
									"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"var x_ais_OrderRef_CreateThing = pm.globals.get(\"x_ais_OrderRef_CreateThing\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"var x_ais_OrderDesc_CreateThing = pm.globals.get(\"x_ais_OrderDesc_CreateThing\");\r",
									"//get global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"var x_ais_OrderRef_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderRef_CreateThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"var x_ais_OrderDesc_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_CreateThingStateInfo\");\r",
									"//get global variable to x_ais_OrderRef \"RemoveThingFromAccount_\"\r",
									"var x_ais_OrderRef_RemoveThingFromAccount = pm.globals.get(\"x_ais_OrderRef_RemoveThingFromAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThingFromAccount\"\r",
									"var x_ais_OrderDesc_RemoveThingFromAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveThingFromAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals AsgardHTTP --------------//\r",
									"//get global variable to x_ais_OrderRef \"RegisHTTP_\"\r",
									"var x_ais_OrderRef_RegisHTTP = pm.globals.get(\"x_ais_OrderRef_RegisHTTP\");\r",
									"//get global variable to x_ais_OrderDesc \"Register Thing in MG\"\r",
									"var x_ais_OrderDesc_RegisHTTP = pm.globals.get(\"x_ais_OrderDesc_RegisHTTP\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals ConfigGroup --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateConfigGroup_\"\r",
									"const x_ais_OrderRef_CreateConfigGroup = pm.globals.get(\"x_ais_OrderRef_CreateConfigGroup\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateConfigGroup\"\r",
									"const x_ais_OrderDesc_CreateConfigGroup = pm.globals.get(\"x_ais_OrderDesc_CreateConfigGroup\");\r",
									"//------------------------------------------------------------//\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// Signin get token\r",
									"Signin = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSignin = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_Signin + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_UserAuthentication,\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestSignin = {\r",
									"            mode: 'raw',\r",
									"            raw:\r",
									"                JSON.stringify({\r",
									"                    username: Username,\r",
									"                    password: Password\r",
									"                })\r",
									"        };\r",
									"\r",
									"        let optionsSignin = {\r",
									"            url: url + provisioningapis + urlSignin,\r",
									"            method: 'POST',\r",
									"            header: headersOptSignin,\r",
									"            body: httpRequestSignin\r",
									"        };\r",
									"        // console.log('request Signin');\r",
									"        let response = await reqPromise(optionsSignin);\r",
									"        let jsonDataSignin = await response.json();\r",
									"\r",
									"        // setAccessToken\r",
									"        await pm.environment.set(\"AccessToken\", jsonDataSignin.AccessToken);\r",
									"\r",
									"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('Signin : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // SignInProcess is Success\r",
									"        pm.test('Signin : OperationStatus Description is ' + '\"' + resultDescriptionSuccessSignIn + '\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
									"        });\r",
									"\r",
									"//set random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //set PartnerName\r",
									"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
									"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
									"        //set MerchantContact\r",
									"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
									"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
									"        // set CPID\r",
									"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
									"        pm.environment.set(\"CPID\", CPIDValue)\r",
									"\r",
									"        //ConfigGroupName\r",
									"        let ConfigGroupNameValue = fieldDataValue.ConfigGroup.ConfigGroupNameValue; // \"Sensor_TestThingGroupName\"\r",
									"        pm.environment.set(\"ConfigGroupName\", ConfigGroupNameValue +pm.environment.get(\"random_number\"))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreatePartner\r",
									"CreatePartner = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreatePartner = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreatePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreatePartner,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreatePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
									"                \"PartnerType\": [\r",
									"                    \"Supplier\",\r",
									"                    \"Customer\"\r",
									"                ],\r",
									"                \"PartnerDetail\": {\r",
									"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
									"                    \"CPID\": pm.environment.get(\"CPID\")\r",
									"                },\r",
									"                \"Property\": {\r",
									"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreatePartner = {\r",
									"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreatePartner,\r",
									"            body: httpRequestCreatePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsCreatePartner);\r",
									"        let jsonDataCreatePartner = await response.json();\r",
									"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
									"\r",
									"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreatePartner : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreatePartner is Success\r",
									"        pm.test('CreatePartner : OperationStatus Description is ' + '\"' + resultDescriptionCreatePartner + '\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
									"        });\r",
									"\r",
									"        //GetResponse_PartnerId\r",
									"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
									"\r",
									"        //Accountname\r",
									"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
									"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateAccount\r",
									"CreateAccount = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateAccount = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateAccount,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreateAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateAccount = {\r",
									"            url: url + provisioningapis + urlAccountCreateAccount,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateAccount,\r",
									"            body: httpRequestCreateAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateAccount');\r",
									"        let response = await reqPromise(optionsCreateAccount);\r",
									"        let jsonDataCreateAccount = await response.json();\r",
									"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
									"\r",
									"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateAccount : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateAccount is Success\r",
									"        pm.test('CreateAccount : OperationStatus Description is ' + '\"' + resultDescriptionCreateAccount + '\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
									"        });\r",
									"        // GetResponse_AccountName\r",
									"        pm.environment.set(\"GetResponse_AccountName\", jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
									"        // GetResponse_AccountId\r",
									"        pm.environment.set(\"GetResponse_AccountId\", jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
									"        // random_IM\r",
									"        pm.environment.set(\"random_IM\", _.random(10000000, 99999999) + \" \" + _.random(1000000, 9999999))\r",
									"        // random_ICCID\r",
									"        pm.environment.set(\"random_ICCID\", _.random(1000000, 9999999) + \" \" + _.random(100000, 999999))\r",
									"        // random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //ThingName\r",
									"        let thingNameValue = fieldDataValue.Thing.ThingNameValue; // \"Sensor_TestThingName\"\r",
									"        pm.environment.set(\"ThingName\", thingNameValue + pm.environment.get(\"random_number\"))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThing\r",
									"CreateThing = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThing = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateThing + pm.environment.get(\"current_timestamp\"),\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateThing,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey': pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreateThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingName\": pm.environment.get(\"ThingName\"),\r",
									"                \"IMEI\": pm.environment.get(\"random_IM\"),\r",
									"                \"IMSI\": pm.environment.get(\"random_IM\"),\r",
									"                \"ICCID\": pm.environment.get(\"random_ICCID\"),\r",
									"                \"RouteUrl\": fieldDataValue.Thing.RouteUrlValue , //[\"http://10.12.3.4:2019/api/information/AddInformation\"]\r",
									"                \"RouteInfo\": {\r",
									"                    \"MIMO_ID\": fieldDataValue.Thing.RouteInfoMIMOIDValue , //\"606edada\"\r",
									"                    \"MIMO_SerialNo\": fieldDataValue.Thing.RouteInfoMIMOSerialNoValue //5466758878\r",
									"                },\r",
									"                \"RouteFlag\": {\r",
									"                    \"ThingName\": fieldDataValue.Thing.RouteFlagThingNameValue , //true\r",
									"                    \"ThingToken\": fieldDataValue.Thing.RouteFlagThingTokenValue, //true\r",
									"                    \"IMEI\": fieldDataValue.Thing.RouteFlagIMEIValue, //true\r",
									"                    \"ICCID\": fieldDataValue.Thing.RouteFlagICCIDValue, //true\r",
									"                    \"RouteInfo\": fieldDataValue.Thing.RouteFlagRouteInfoValue //true\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateThing = {\r",
									"            url: url + provisioningapis + urlThingCreateThing,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThing,\r",
									"            body: httpRequestCreateThing\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThing');\r",
									"        let response = await reqPromise(optionsCreateThing);\r",
									"        let jsonDataCreateThing = await response.json();\r",
									"        // console.log('jsonDataCreateThing',jsonDataCreateThing)\r",
									"\r",
									"        let operationStatusCreateThing = await jsonDataCreateThing.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateThing : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateThing : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateThing is Success\r",
									"        pm.test('CreateThing : OperationStatus Description is ' + '\"' + resultDescriptionCreateThing + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Description', resultDescriptionCreateThing);\r",
									"        });\r",
									"\r",
									"        pm.environment.set(\"GetResponse_ThingID\", jsonDataCreateThing.ThingInfo.ThingId)\r",
									"        pm.environment.set(\"GetResponse_IMSI\", jsonDataCreateThing.ThingInfo.IMSI)\r",
									"        \r",
									"        let keys = pm.environment.get(\"GetResponse_IMSI\") + \":\" + pm.environment.get(\"IpAddress\");\r",
									"        // console.log(\"keys\", keys);\r",
									"        let encodedKeys = CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(keys));\r",
									"        pm.environment.set(\"encodedKeys_Authorization_Register\", encodedKeys);\r",
									"\r",
									"        //Get Random Sensor \r",
									"        pm.environment.set(\"random_Sensor\", _.random(100, 999))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThingStateInfo\r",
									"CreateThingStateInfo = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThingStateInfo = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateThingStateInfo + pm.environment.get(\"current_timestamp\"),\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateThingStateInfo,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey': pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        // {\"AA\" : pm.environment.get(\"random_Sensor\")}\r",
									"        let sensorValue = {};\r",
									"        sensorValue[fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP] = pm.environment.get(\"random_Sensor\");\r",
									"        // console.log('sensorValue',sensorValue);\r",
									"        \r",
									"        let httpRequestCreateThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": [\r",
									"                    pm.environment.get(\"GetResponse_ThingID\")\r",
									"                ],\r",
									"                \"Type\": fieldDataValue.CreateThingStateInfo.Type_Report,\r",
									"                \"Sensor\": sensorValue\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingCreateThingStateInfo,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThingStateInfo,\r",
									"            body: httpRequestCreateThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThingStateInfo');\r",
									"        let response = await reqPromise(optionsCreateThingStateInfo);\r",
									"        let jsonDataCreateThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataCreateThingStateInfo',jsonDataCreateThingStateInfo)\r",
									"\r",
									"        let operationStatusCreateThingStateInfo = await jsonDataCreateThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"CreateThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //CreateThingStateInfo is Success\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Description is ' + '\"' + resultDescriptionCreateThingStateInfo + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Description', resultDescriptionCreateThingStateInfo);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateConfigGroup\r",
									"CreateConfigGroup = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateConfigGroup = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateConfigGroup + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateConfigGroup,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\")\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreateConfigGroup = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ConfigName\":  pm.environment.get(\"ConfigGroupName\"),\r",
									"                \"ThingId\": [pm.environment.get(\"GetResponse_ThingID\")],\r",
									"                \"ConfigInfo\": {\r",
									"                    \"RefreshTime\": fieldDataValue.ConfigGroup.RefreshTime , //\"On\"\r",
									"                    \"Max\": fieldDataValue.ConfigGroup.Max //\"99\"\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateConfigGroup = {\r",
									"            url: url + provisioningapis + urlConfigGroupCreateConfigGroup,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateConfigGroup,\r",
									"            body: httpRequestCreateConfigGroup\r",
									"        };\r",
									"\r",
									"        // console.log('response CreateConfigGroup');\r",
									"        let response = await reqPromise(optionsCreateConfigGroup);\r",
									"        let jsonDataCreateConfigGroup = await response.json();\r",
									"        // console.log('jsonDataCreateConfigGroup',jsonDataCreateConfigGroup)\r",
									"    \r",
									"        let operationStatusCreateConfigGroup = await jsonDataCreateConfigGroup.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateConfigGroup : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateConfigGroup : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateConfigGroup).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateConfigGroup is Success\r",
									"        pm.test('CreateConfigGroup : OperationStatus description is '+'\"'+ resultDescriptionCreateConfigGroup+'\"', function () {\r",
									"            pm.expect(operationStatusCreateConfigGroup).to.have.property('Description', resultDescriptionCreateConfigGroup);\r",
									"        });\r",
									"\r",
									"        pm.environment.set(\"GetResponse_ConfigGroupId\",jsonDataCreateConfigGroup.ConfigGroupInfo.ConfigGroupId)\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// AsgardHTTPeSimRegister\r",
									"AsgardHTTPeSimRegister = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptAsgardHTTPeSimRegister = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_RegisHTTP + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_RegisHTTP,\r",
									"            'Authorization': Basic + ' ' + pm.environment.get(\"encodedKeys_Authorization_Register\")\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestAsgardHTTPeSimRegister = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({})\r",
									"        };\r",
									"\r",
									"        let optionsAsgardHTTPeSimRegister = {\r",
									"            url: url + httpapis + urlAsgardHTTPeSimRegister,\r",
									"            method: 'POST',\r",
									"            header: headersOptAsgardHTTPeSimRegister,\r",
									"            body: httpRequestAsgardHTTPeSimRegister\r",
									"        };\r",
									"\r",
									"        // console.log('request AsgardHTTPEsimRegister');\r",
									"        let response = await reqPromise(optionsAsgardHTTPeSimRegister);\r",
									"        let jsonDataAsgardHTTPeSimRegister = await response.json();\r",
									"        // console.log('jsonDataCreateThingStateInfo',jsonDataAsgardHTTPeSimRegister)\r",
									"        let operationStatusAsgardHTTPeSimRegister = await jsonDataAsgardHTTPeSimRegister.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"Asgard HTTP(eSim) Register : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('Asgard HTTP(eSim) Register : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusAsgardHTTPeSimRegister).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"\r",
									"        // The requested operation was successfully.\r",
									"        pm.test('Asgard HTTP(eSim) Register : OperationStatus DeveloperMessage is ' + '\"' + resultDescriptionTheRequestedOperationWasSuccessfully + '\"', function () {\r",
									"            pm.expect(operationStatusAsgardHTTPeSimRegister).to.have.property('DeveloperMessage', resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"        });\r",
									"\r",
									"        await pm.environment.set(\"GetResponse_ThingToken\", jsonDataAsgardHTTPeSimRegister.ThingToken)\r",
									"        let keys2 = await pm.environment.get(\"GetResponse_ThingToken\") + \":\" + pm.environment.get(\"IpAddress\");        \r",
									"        let encodedKeys2 = await CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(keys2));\r",
									"        pm.environment.set(\"encodedKeys_Authorization_Config\", encodedKeys2)\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThingFromAccount\r",
									"RemoveThingFromAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThingFromAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThingFromAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThingFromAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThingFromAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": [pm.environment.get(\"GetResponse_ThingID\")]\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThingFromAccount = {\r",
									"            url: url + provisioningapis + urlAccountRemoveThingFromAccount,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThingFromAccount,\r",
									"            body: httpRequestRemoveThingFromAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveThingFromAccount');\r",
									"        let response = await reqPromise(optionsRemoveThingFromAccount);\r",
									"        let jsonDataRemoveThingFromAccount = await response.json();\r",
									"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
									"    \r",
									"        let operationStatusRemoveThingFromAccount = await jsonDataRemoveThingFromAccount.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThingFromAccount : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThingFromAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingFromAccount).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThingFromAccount is Success\r",
									"        pm.test('RemoveThingFromAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThingFromAccount+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingFromAccount).to.have.property('Description', resultDescriptionRemoveThingFromAccount);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"Signin();\r",
									"setTimeout(async function(){await CreatePartner();}, 3000); \r",
									"setTimeout(async function(){await CreateAccount();}, 6000); \r",
									"setTimeout(async function(){await CreateThing();}, 8000); \r",
									"setTimeout(async function(){await CreateThingStateInfo();}, 9000); \r",
									"setTimeout(async function(){await CreateConfigGroup();}, 10000); \r",
									"setTimeout(async function(){await AsgardHTTPeSimRegister();}, 20000); \r",
									"setTimeout(async function(){}, 30000); //for wait value encodedKeys_Authorization_Config\r",
									"setTimeout(async function(){await RemoveThingFromAccount();}, 40000); "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-ais-UserName",
								"type": "text",
								"value": "{{x_ais_UserName_AisPartner}}"
							},
							{
								"key": "x-ais-OrderRef",
								"value": "{{x_ais_OrderRef_ConfigHTTP_fail}}{{current_timestamp}}"
							},
							{
								"key": "x-ais-OrderDesc",
								"type": "text",
								"value": "{{x_ais_OrderDesc_ConfigHTTP}}"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{Basic}} {{encodedKeys_Authorization_Config}}"
							}
						],
						"url": {
							"raw": "{{url}}{{httpapis}}/api/config/sim/v1?Sensor=RefreshTime",
							"host": [
								"{{url}}{{httpapis}}"
							],
							"path": [
								"api",
								"config",
								"sim",
								"v1"
							],
							"query": [
								{
									"key": "Sensor",
									"value": "RefreshTime"
								}
							]
						},
						"description": "Type:Desire"
					},
					"response": []
				},
				{
					"name": "AsgardHTTPeSimConfig_TST_F2_0_2_005_Error_ThingtokenAlreadyExist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var Basic = pm.environment.get(\"Basic\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to xAisOrderRef \"RemoveThing_\"\r",
									"var x_ais_OrderRef_RemoveThing = pm.globals.get(\"x_ais_OrderRef_RemoveThing\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"var x_ais_OrderDesc_RemoveThing = pm.globals.get(\"x_ais_OrderDesc_RemoveThing\");\r",
									"//get global variable to xAisOrderRef \"RemoveThingStateInfo_\"\r",
									"var x_ais_OrderRef_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderRef_RemoveThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThingStateInfo\"\r",
									"var x_ais_OrderDesc_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_RemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals ConfigGroup --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveConfigGroup_\"\r",
									"const x_ais_OrderRef_RemoveConfigGroup = pm.globals.get(\"x_ais_OrderRef_RemoveConfigGroup\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveConfigGroup\"\r",
									"const x_ais_OrderDesc_RemoveConfigGroup = pm.globals.get(\"x_ais_OrderDesc_RemoveConfigGroup\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals AsgardHTTP --------------//\r",
									"//get global variable to x_ais_OrderRef \"ConfigHTTP_\"\r",
									"var x_ais_OrderRef_ConfigHTTP = pm.globals.get(\"x_ais_OrderRef_ConfigHTTP\");\r",
									"//get global variable to x_ais_OrderRef \"ConfigHTTPfail_\"\r",
									"var x_ais_OrderRef_ConfigHTTP_fail = pm.globals.get(\"x_ais_OrderRef_ConfigHTTP_fail\");\r",
									"//get global variable to x_ais_OrderDesc \"Get Config from MG\"\r",
									"var x_ais_OrderDesc_ConfigHTTP = pm.globals.get(\"x_ais_OrderDesc_ConfigHTTP\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get url Remove --------------//\r",
									"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
									"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"var urlThingRemoveThing = pm.globals.get(\"urlThingRemoveThing\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"var urlThingRemoveThingStateInfo = pm.globals.get(\"urlThingRemoveThingStateInfo\");\r",
									"//get global variable to url \"/ConfigGroup/RemoveConfigGroup\"\r",
									"var urlConfigGroupRemoveConfigGroup = pm.globals.get(\"urlConfigGroupRemoveConfigGroup\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"RemovePartner is Success\"\r",
									"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
									"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
									"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
									"//get global variable to resultDescription \"RemoveThing is Success\"\r",
									"var resultDescriptionRemoveThing = pm.globals.get(\"resultDescriptionRemoveThing\");\r",
									"//get global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"var resultDescriptionRemoveThingStateInfo = pm.globals.get(\"resultDescriptionRemoveThingStateInfo\");\r",
									"//get global variable to resultDescription \"RemoveConfigGroup is Success\"\r",
									"var resultDescriptionRemoveConfigGroup = pm.globals.get(\"resultDescriptionRemoveConfigGroup\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 403\r",
									"var statusCodeForbidden = pm.globals.get(\"statusCodeForbidden\");\r",
									"//get global variable to resultCode \"40301\"\r",
									"var resultCodeTheClientRequestedAlreadyExists = pm.globals.get(\"resultCodeTheClientRequestedAlreadyExists\");\r",
									"//get global variable to resultDescription \"The thingToken requested already exists.\"\r",
									"var resultDescriptionTheThingTokenRequestedAlreadyExists = pm.globals.get(\"resultDescriptionTheThingTokenRequestedAlreadyExists\");\r",
									"//------------------------------------------------------------//\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Asgard HTTP(eSim) Config : Status code is \" + statusCodeForbidden, function () {\r",
									"    pm.response.to.have.status(statusCodeForbidden);\r",
									"});\r",
									"\r",
									"pm.test('Asgard HTTP(eSim) Config : operationStatus code is '+'\"'+ resultCodeTheClientRequestedAlreadyExists +'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeTheClientRequestedAlreadyExists);\r",
									"});\r",
									"\r",
									"pm.test('Asgard HTTP(eSim) Config : operationStatus DeveloperMessage is '+'\"'+ resultDescriptionTheThingTokenRequestedAlreadyExists+'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheThingTokenRequestedAlreadyExists);\r",
									"});\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// RemovePartner\r",
									" RemovePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemovePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemovePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemovePartner = {\r",
									"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemovePartner,\r",
									"            body: httpRequestRemovePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request RemovePartner');\r",
									"        let response = await reqPromise(optionsRemovePartner);\r",
									"        let jsonDataRemovePartner = await response.json();\r",
									"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
									"    \r",
									"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemovePartner is Success\r",
									"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveAccount\r",
									" RemoveAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemoveAccount = {\r",
									"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveAccount,\r",
									"            body: httpRequestRemoveAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveAccount');\r",
									"        let response = await reqPromise(optionsRemoveAccount);\r",
									"        let jsonDataRemoveAccount = await response.json();\r",
									"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
									"    \r",
									"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveAccount is Success\r",
									"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThing\r",
									" RemoveThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThing = {\r",
									"            url: url + provisioningapis + urlThingRemoveThing,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThing,\r",
									"            body: httpRequestRemoveThing\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveThing');\r",
									"        let response = await reqPromise(optionsRemoveThing);\r",
									"        let jsonDataRemoveThing = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThing)\r",
									"    \r",
									"        let operationStatusRemoveThing = await jsonDataRemoveThing.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThing : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThing : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThing is Success\r",
									"        pm.test('RemoveThing : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThing+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Description', resultDescriptionRemoveThing);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThingStateInfo\r",
									" RemoveThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"            \r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\"),\r",
									"                \"stateType\": fieldDataValue.CreateThingStateInfo.Type_Report, //Report\r",
									"                \"stateKey\": fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP //AA\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingRemoveThingStateInfo,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThingStateInfo,\r",
									"            body: httpRequestRemoveThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('response RemoveThingStateInfo');\r",
									"        let response = await reqPromise(optionsRemoveThingStateInfo);\r",
									"        let jsonDataRemoveThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThingStateInfo)\r",
									"    \r",
									"        let operationStatusRemoveThingStateInfo = await jsonDataRemoveThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThingStateInfo is Success\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThingStateInfo+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Description', resultDescriptionRemoveThingStateInfo);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveConfigGroup\r",
									" RemoveConfigGroup = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveConfigGroup = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_RemoveConfigGroup + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_RemoveConfigGroup,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey': pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveConfigGroup = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ConfigGroupId\": pm.environment.get(\"GetResponse_ConfigGroupId\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveConfigGroup = {\r",
									"            url: url + provisioningapis + urlConfigGroupRemoveConfigGroup,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveConfigGroup,\r",
									"            body: httpRequestRemoveConfigGroup\r",
									"        };\r",
									"\r",
									"        // console.log('response RemoveConfigGroup');\r",
									"        let response = await reqPromise(optionsRemoveConfigGroup);\r",
									"        let jsonDataRemoveConfigGroup = await response.json();\r",
									"        // console.log('jsonDataRemoveConfigGroup',jsonDataRemoveConfigGroup)\r",
									"    \r",
									"        let operationStatusRemoveConfigGroup = await jsonDataRemoveConfigGroup.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveConfigGroup : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveConfigGroup : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveConfigGroup).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveConfigGroup is Success\r",
									"        pm.test('RemoveConfigGroup : OperationStatus Description is '+'\"'+ resultDescriptionRemoveConfigGroup+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveConfigGroup).to.have.property('Description', resultDescriptionRemoveConfigGroup);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"//---------------- LogDefaultValue --------------//\r",
									"//set variable to LogDefaultValue JSON.parse\r",
									"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
									"// console.log('LogDefaultValue',LogDefaultValue);\r",
									"//---------------- set globals Other --------------//\r",
									"\r",
									"var SearchLog = LogDefaultValue.SearchLog;\r",
									"// console.log('SearchLog',SearchLog);\r",
									"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
									"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
									"var kbn_version = SearchLog.header.kbn_version;\r",
									"var authorization = SearchLog.header.Authorization;\r",
									"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
									"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
									"var namespace = LogDefaultValue.Other.namespace;\r",
									"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
									"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
									"var header_x_ais_username = LogDefaultValue.Other.header_x_ais_username;\r",
									"var methodGet = LogDefaultValue.Other.methodGet;\r",
									"\r",
									"// Detail\r",
									"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
									"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
									"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
									"\r",
									"// Summary\r",
									"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
									"var identitySummary = \"\";\r",
									"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
									"\r",
									"// Asgard.Http.APIs\r",
									"var applicationName = LogDefaultValue.AsgardHTTP.applicationName;\r",
									"var cmdName = LogDefaultValue.AsgardHTTP.cmdNameConfig;\r",
									"var endPointNameRabbitMQ = LogDefaultValue.AsgardHTTP.endPointNameRabbitMQ;\r",
									"var containerId = LogDefaultValue.AsgardHTTP.containerId;\r",
									"var requestObjectUrlStaging = LogDefaultValue.AsgardHTTP.requestObjectUrlConfigMgStaging;\r",
									"var urlConfig  = LogDefaultValue.AsgardHTTP.urlConfigError;\r",
									"\r",
									"// Check CDR (Summary Log) and EDR (Detail Log)\r",
									"SearchLogFindTid = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSearchLogFindTid = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = x_ais_OrderRef_ConfigHTTP_fail + current_timestamp;\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestSearchLogFindTid = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"\r",
									"        let optionsSearchLogFindTid = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptSearchLogFindTid,\r",
									"            body: httpRequestSearchLogFindTid\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsSearchLogFindTid);\r",
									"        let jsonDataSearchLogFindTid = await response.json();\r",
									"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
									"        // console.log('hits',hits)\r",
									"  \r",
									"        // find tid\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            // let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"        \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            if(applicationNameValue == applicationName){\r",
									"                let tid = hits[i]._source.cauldron.tid;\r",
									"                pm.environment.set(\"tid\", tid);\r",
									"                break;\r",
									"           }\r",
									"        }\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"CheckLog = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCheckLog = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = pm.environment.get(\"tid\");\r",
									"\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestCheckLog = {\r",
									"            mode: 'raw',\r",
									"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"        let optionsCheckLog = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptCheckLog,\r",
									"            body: httpRequestCheckLog\r",
									"        }; \r",
									"        let response = await reqPromise(optionsCheckLog);\r",
									"        let jsonDataCheckLog = await response.json();\r",
									"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
									"        \r",
									"        // //200\r",
									"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });     \r",
									"        \r",
									"        let hits = jsonDataCheckLog.hits.hits\r",
									"        console.log('hits',hits)\r",
									"  \r",
									"        // find logType\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            //  let logType = hits[i]._source.cauldron.logType\r",
									"            let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"           \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            \r",
									"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
									"            // console.log('resultDataLog',resultDataLog)\r",
									"\r",
									"            let tidControl = x_ais_OrderRef_ConfigHTTP_fail  + current_timestamp;\r",
									"            // console.log(tidControl);\r",
									"            if(applicationNameValue == applicationName){\r",
									"                 \r",
									"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and Asgard.Http.APIs\r",
									"                    pm.test(\"Check Summary Log : Asgard_HTTP(eSim) Config\" , function () {\r",
									"                        console.log(\"======== Check Summary Log ( Expected = Actual) [Asgard_HTTP(eSim) Config] ==================\");\r",
									"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
									"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
									"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeTheClientRequestedAlreadyExists);\r",
									"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionTheThingTokenRequestedAlreadyExists);\r",
									"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
									"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"identity : \" + JSON.stringify(resultDataLog.identity) + \" = \" + JSON.stringify(identitySummary));\r",
									"                        // console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
									"\r",
									"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
									"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
									"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeTheClientRequestedAlreadyExists); \r",
									"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionTheThingTokenRequestedAlreadyExists); \r",
									"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
									"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
									"                        // pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
									"\r",
									"                        // check custom\r",
									"                        // \\\"custom\\\":{ \\\"endPointSummary\\\":[ { \\\"no\\\":\\\"1\\\", \\\"endPointName\\\":\\\"db.ThingsCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:Inquiry was Success\\\", \\\"processTime\\\":0.0012 } ] }\r",
									"\r",
									"                        let custom = resultDataLog.custom.endPointSummary;\r",
									"                        let countCustom = custom.length;\r",
									"                       \r",
									"                        // [\"db.ThingsCollection\"]\r",
									"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_Asgard_HTTP_eSim_Config_002_004_005_006;\r",
									"                        // [\"20000:Inquiry was Success\"]\r",
									"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_Asgard_HTTP_eSim_Config_002_004_005_006;\r",
									"                        let countCustomStep = dataEndPointName.length;\r",
									"\r",
									"                        console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep);\r",
									"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
									"                        \r",
									"                        for(let i=0;i<countCustomStep;i++){\r",
									"                            let no = custom[i].no;\r",
									"                            let valueEndPointName = custom[i].endPointName;\r",
									"                            let valueResponseStatus = custom[i].responseStatus;\r",
									"                            // console.log(\"i\",i);\r",
									"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
									"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
									"\r",
									"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString());\r",
									"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i]);\r",
									"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i]);\r",
									"\r",
									"                            pm.expect(no).to.eql((i+1).toString()); \r",
									"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
									"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]); \r",
									"                        }\r",
									"                    }); \r",
									"                }\r",
									"\r",
									"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and Asgard.Http.APIs\r",
									"\r",
									"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
									"                    // console.log('endPointNameValue ',endPointNameValue)\r",
									"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [Asgard_HTTP(eSim) Config]\", function () {\r",
									"                        console.log(\"======== Check Detail Log ( Expected = Actual) [Asgard_HTTP(eSim) Config] ==================\");\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
									"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
									"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
									"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.custom1.activityLog.processTime + \" = \" + resultDataLog.custom1.activityLog.processTime);\r",
									"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
									"\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
									"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
									"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
									"\r",
									"                        let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
									"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
									"                        let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
									"                            // console.log('jsonParseResponseObject',jsonParseResponseObject); \r",
									"                        let url = urlConfig; \r",
									"                        let x_ais_orderref = x_ais_OrderRef_ConfigHTTP_fail + current_timestamp;\r",
									"                        let x_ais_orderdesc = x_ais_OrderDesc_ConfigHTTP;\r",
									"                        let x_ais_userName = x_ais_UserName_AisPartner;\r",
									"                        let authorization = Basic + ' ' + pm.environment.get(\"encodedKeys_Authorization_Config\");\r",
									"                        let SensorKey = fieldDataValue.CreateThingStateInfo.SensorKey;\r",
									"                        let sensor = pm.environment.get(\"random_Sensor\");\r",
									"                        let timestamp = pm.environment.get(\"timestamp\");\r",
									"\r",
									"                        if( endPointNameValue == undefined){\r",
									"                            // check requestObject\r",
									"                            // \"requestObject\":\"{\\\"url\\\":\\\"/api/config/sim/v1\\\",\\\"method\\\":\\\"GET\\\",\\\"headers\\\":{\\\"Cache-Control\\\":\\\"no-cache\\\",\\\"Content-Type\\\":\\\"application/json\\\",\\\"Accept\\\":\\\"*/*\\\",\\\"Accept-Encoding\\\":\\\"gzip,deflate,br\\\",\\\"Authorization\\\":\\\"Basic ZmYxMjEwZjgtNGFjYi00YjNjLTkwMTMtODc0YWM0ZGIxZGVieHg6MS4yLjMuNA==\\\",\\\"Host\\\":\\\"mg-staging.sandais.com\\\",\\\"User-Agent\\\":\\\"PostmanRuntime/7.26.8\\\",\\\"Content-Length\\\":\\\"0\\\",\\\"x-real-ip\\\":\\\"58.8.214.174\\\",\\\"x-forwarded-for\\\":\\\"58.8.214.174\\\",\\\"x-forwarded-proto\\\":\\\"https\\\",\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"ConfigHTTPfail_202102152002008\\\",\\\"x-ais-orderdesc\\\":\\\"Get Config from MG\\\",\\\"postman-token\\\":\\\"a99d5f91-ea7c-4695-b941-0dea110169a2\\\",\\\"x-request-id\\\":\\\"cc1ffc3a-c815-4299-ac4a-9250d7064fa8\\\",\\\"x-b3-traceid\\\":\\\"55b1fe4d9548fdbb017552c523e0afcd\\\",\\\"x-b3-spanid\\\":\\\"017552c523e0afcd\\\",\\\"x-b3-sampled\\\":\\\"0\\\",\\\"x-ais-SessionId\\\":\\\"1613397270624\\\"},\\\"queryString\\\":{\\\"Sensor\\\":\\\"RefreshTime\\\"},\\\"routeParamteters\\\":{}}\"\r",
									"\r",
									"                            // \\\"requestObject\\\":\\\"{ \\\\\\\"url\\\\\\\":\\\\\\\"/api/config/sim/v1\\\\\\\", \\\\\\\"method\\\\\\\":\\\\\\\"GET\\\\\\\", \\\\\\\"headers\\\\\\\":{ \\\\\\\"Cache-Control\\\\\\\":\\\\\\\"no-cache\\\\\\\", \\\\\\\"Content-Type\\\\\\\":\\\\\\\"application/json\\\\\\\", \\\\\\\"Accept\\\\\\\":\\\\\\\"*/*\\\\\\\", \\\\\\\"Accept-Encoding\\\\\\\":\\\\\\\"gzip, deflate, br\\\\\\\", \\\\\\\"Authorization\\\\\\\":\\\\\\\"Basic Mzk4NjMxNzMtZDFjMC00OWZhLTk5N2UtOWZlOTBjYzdjMWE0OjEuMi4zLjQ=\\\\\\\", \\\\\\\"Host\\\\\\\":\\\\\\\"mg-iot.sandais.com\\\\\\\", \\\\\\\"User-Agent\\\\\\\":\\\\\\\"PostmanRuntime/7.26.8\\\\\\\", \\\\\\\"Content-Length\\\\\\\":\\\\\\\"0\\\\\\\", \\\\\\\"x-real-ip\\\\\\\":\\\\\\\"182.232.183.255\\\\\\\", \\\\\\\"x-forwarded-for\\\\\\\":\\\\\\\"182.232.183.255, 10.233.67.0\\\\\\\", \\\\\\\"x-forwarded-proto\\\\\\\":\\\\\\\"http\\\\\\\", \\\\\\\"x-ais-username\\\\\\\":\\\\\\\"AisPartner\\\\\\\", \\\\\\\"x-ais-orderref\\\\\\\":\\\\\\\"ConfigHTTPfail_202105112105307\\\\\\\", \\\\\\\"x-ais-orderdesc\\\\\\\":\\\\\\\"Get Config from MG\\\\\\\", \\\\\\\"postman-token\\\\\\\":\\\\\\\"8daa8bc5-e7c1-41b2-bb12-db83713f0e56\\\\\\\", \\\\\\\"x-envoy-external-address\\\\\\\":\\\\\\\"10.233.67.0\\\\\\\", \\\\\\\"x-request-id\\\\\\\":\\\\\\\"c47e48ed-5976-4844-a280-e4a2993cc7f2\\\\\\\", \\\\\\\"x-envoy-original-path\\\\\\\":\\\\\\\"/httpapis/api/config/sim/v1?Sensor=RefreshTime\\\\\\\", \\\\\\\"x-b3-traceid\\\\\\\":\\\\\\\"a92170558d884e7918df009b7192dcf2\\\\\\\", \\\\\\\"x-b3-spanid\\\\\\\":\\\\\\\"24cf2fbd6443f34a\\\\\\\", \\\\\\\"x-b3-parentspanid\\\\\\\":\\\\\\\"18df009b7192dcf2\\\\\\\", \\\\\\\"x-b3-sampled\\\\\\\":\\\\\\\"0\\\\\\\", \\\\\\\"x-ais-SessionId\\\\\\\":\\\\\\\"1620744419120\\\\\\\" }, \\\\\\\"queryString\\\\\\\":{ \\\\\\\"Sensor\\\\\\\":\\\\\\\"RefreshTime\\\\\\\" }, \\\\\\\"routeParamteters\\\\\\\":{ } }\\\"\r",
									"\r",
									"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
									"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodGet);\r",
									"                            console.log(\"headers.x_ais_userName : \" + jsonParseRequestObject.headers[header_x_ais_username] + \" = \" + x_ais_userName);\r",
									"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
									"                            console.log(\"headers.Authorization : \" + jsonParseRequestObject.headers.Authorization + \" = \" + authorization);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
									"                            pm.expect(jsonParseRequestObject.method).to.eql(methodGet);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_username]).to.eql(x_ais_userName);\r",
									"                            pm.expect(jsonParseRequestObject.headers.Authorization).to.eql(authorization);\r",
									"\r",
									"                            console.log(\"queryString.Sensor : \" + JSON.stringify(jsonParseRequestObject.queryString.Sensor) + \" = \" + JSON.stringify(\"RefreshTime\"));\r",
									"                            console.log(\"routeParamteters : \" + JSON.stringify(jsonParseRequestObject.routeParamteters) + \" = \" + JSON.stringify({}));\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.queryString.Sensor).to.eql(\"RefreshTime\"); \r",
									"                            pm.expect(jsonParseRequestObject.routeParamteters).to.eql({}); \r",
									"\r",
									"                            // check responseObject\r",
									"                            // \"responseObject\":\"{\\\"OperationStatus\\\":{\\\"Code\\\":\\\"40301\\\",\\\"DeveloperMessage\\\":\\\"The thingToken requested already exists.\\\"}}\"\r",
									"\r",
									"                            console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeTheClientRequestedAlreadyExists);\r",
									"                            console.log(\"response.OperationStatus.DeveloperMessage : \" + jsonParseResponseObject.OperationStatus.DeveloperMessage + \" = \" + resultDescriptionTheThingTokenRequestedAlreadyExists);\r",
									"\r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeTheClientRequestedAlreadyExists);  \r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheThingTokenRequestedAlreadyExists);  \r",
									"                        }\r",
									"                    }); \r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"setTimeout(function(){SearchLogFindTid();}, 40000); \r",
									"setTimeout(function(){CheckLog();}, 60000); \r",
									"\r",
									"setTimeout(function(){RemoveConfigGroup();}, 70000); \r",
									"setTimeout(function(){RemoveThingStateInfo();}, 80000); \r",
									"setTimeout(function(){RemoveThing();}, 90000); \r",
									"setTimeout(function(){RemoveAccount();}, 100000); \r",
									"setTimeout(function(){RemovePartner();}, 110000); \r",
									"\r",
									"setTimeout(function(){\r",
									"pm.environment.unset(\"current_timestamp\");\r",
									"pm.environment.unset(\"AccessToken\");\r",
									"pm.environment.unset(\"random_number\");\r",
									"pm.environment.unset(\"PartnerName\");\r",
									"pm.environment.unset(\"MerchantContact\");\r",
									"pm.environment.unset(\"CPID\");\r",
									"pm.environment.unset(\"GetResponse_PartnerId\");\r",
									"pm.environment.unset(\"AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountId\");\r",
									"pm.environment.unset(\"random_IM\");\r",
									"pm.environment.unset(\"random_ICCID\");\r",
									"pm.environment.unset(\"ThingName\");\r",
									"pm.environment.unset(\"GetResponse_ThingID\");\r",
									"pm.environment.unset(\"GetResponse_IMSI\");\r",
									"pm.environment.unset(\"encodedKeys_Authorization_Register\");\r",
									"pm.environment.unset(\"encodedKeys_Authorization_Config\");\r",
									"pm.environment.unset(\"random_Sensor\");\r",
									"pm.environment.unset(\"GetResponse_ThingToken\");\r",
									"pm.environment.unset(\"tid\");\r",
									"pm.environment.unset(\"GetResponse_ConfigGroupId\");\r",
									"pm.environment.unset(\"ConfigGroupName\");\r",
									"}, 115000); \r",
									"setTimeout(async function(){}, 120000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var Username = pm.environment.get(\"Username\");\r",
									"var Password = pm.environment.get(\"Password\");\r",
									"\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"var httpapis = pm.environment.get(\"httpapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"//format YYYYMMDDHHMMSSS\r",
									"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
									"// console.log('currentTmestamp',currentTmestamp);\r",
									"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var Basic = pm.environment.get(\"Basic\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- statusCodeList --------------//\r",
									"//set variable to statusCodeList JSON.parse\r",
									"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
									"//set global variable to statusCode 200\r",
									"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
									"//set global variable to statusCode 201\r",
									"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
									"//set global variable to statusCode 403\r",
									"pm.globals.set(\"statusCodeForbidden\", statusCodeList.statusCodeForbidden);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultCodeList --------------//\r",
									"//set variable to resultCodeList JSON.parse\r",
									"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
									"//set global variable to resultCode \"20000\"\r",
									"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
									"//set global variable to resultCode \"20100\"\r",
									"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
									"//set global variable to resultCode \"40301\"\r",
									"pm.globals.set(\"resultCodeTheClientRequestedAlreadyExists\", resultCodeList.resultCodeTheClientRequestedAlreadyExists);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionSuccessList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
									"//set global variable to resultDescription \"SignInProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
									"//set global variable to resultDescription \"CreatePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
									"//set global variable to resultDescription \"CreateAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
									"//set global variable to resultDescription \"CreateThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThing\", resultDescriptionSuccessList.resultDescriptionCreateThing);\r",
									"//set global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThingStateInfo\", resultDescriptionSuccessList.resultDescriptionCreateThingStateInfo);\r",
									"//set global variable to resultDescription \"RemovePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
									"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
									"//set global variable to resultDescription \"RemoveThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThing\", resultDescriptionSuccessList.resultDescriptionRemoveThing);\r",
									"//set global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThingStateInfo\", resultDescriptionSuccessList.resultDescriptionRemoveThingStateInfo);\r",
									"//set global variable to resultDescription \"Register is Success\"\r",
									"pm.globals.set(\"resultDescriptionRegisterIsSuccess\", resultDescriptionSuccessList.resultDescriptionRegisterIsSuccess);\r",
									"//set global variable to resultDescription \"ConfigProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionConfigProcessIsSuccess\", resultDescriptionSuccessList.resultDescriptionConfigProcessIsSuccess);\r",
									"//set global variable to resultDescription \"CreateConfigGroup is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateConfigGroup\", resultDescriptionSuccessList.resultDescriptionCreateConfigGroup);\r",
									"//set global variable to resultDescription \"RemoveConfigGroup is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveConfigGroup\", resultDescriptionSuccessList.resultDescriptionRemoveConfigGroup);\r",
									"//set global variable to resultDescription \"The requested operation was successfully.\"\r",
									"pm.globals.set(\"resultDescriptionTheRequestedOperationWasSuccessfully\", resultDescriptionSuccessList.resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionErrorList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
									"//set global variable to resultDescription \"The thingToken requested already exists.\"\r",
									"pm.globals.set(\"resultDescriptionTheThingTokenRequestedAlreadyExists\", resultDescriptionErrorList.resultDescriptionTheThingTokenRequestedAlreadyExists);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- HeaderList --------------//\r",
									"//set variable to HeaderList JSON.parse\r",
									"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
									"//---------------- set globals Other --------------//\r",
									"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
									"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
									"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
									"//set global variable to kbn-versio \"7.5.1\"\r",
									"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Signin_ --------------//\r",
									"//set global variable to x_ais_OrderRef \"Signin_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreatePartner --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
									"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
									"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
									"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreateAccount --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
									"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
									"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Thing --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThing\", HeaderList.Thing.x_ais_OrderRef_CreateThing);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThing\", HeaderList.Thing.x_ais_OrderDesc_CreateThing);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThing\", HeaderList.Thing.x_ais_OrderRef_RemoveThing);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThing\", HeaderList.Thing.x_ais_OrderDesc_RemoveThing);\r",
									"//set global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_RemoveThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_RemoveThingStateInfo);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals AsgardHTTP --------------//\r",
									"//set global variable to x_ais_OrderRef \"RegisHTTP_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RegisHTTP\", HeaderList.AsgardHTTP.x_ais_OrderRef_RegisHTTP);\r",
									"//set global variable to x_ais_OrderDesc \"Register Thing in MG\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RegisHTTP\", HeaderList.AsgardHTTP.x_ais_OrderDesc_RegisHTTP);\r",
									"//set global variable to x_ais_OrderRef \"ConfigHTTP_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ConfigHTTP\", HeaderList.AsgardHTTP.x_ais_OrderRef_ConfigHTTP);\r",
									"//set global variable to x_ais_OrderRef \"ConfigHTTPfail_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ConfigHTTP_fail\", HeaderList.AsgardHTTP.x_ais_OrderRef_ConfigHTTP_fail);\r",
									"//set global variable to x_ais_OrderDesc \"Get Config from MG\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_ConfigHTTP\", HeaderList.AsgardHTTP.x_ais_OrderDesc_ConfigHTTP);\r",
									"//set global variable to x_ais_OrderRef \"ReportHTTP_\"\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals ConfigGroup --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateConfigGroup_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateConfigGroup\", HeaderList.ConfigGroup.x_ais_OrderRef_CreateConfigGroup);\r",
									"//set global variable to x_ais_OrderDesc \"CreateConfigGroup\"\r",
									" pm.globals.set(\"x_ais_OrderDesc_CreateConfigGroup\", HeaderList.ConfigGroup.x_ais_OrderDesc_CreateConfigGroup);\r",
									"//set global variable to x_ais_OrderRef \"RemoveConfigGroup_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveConfigGroup\", HeaderList.ConfigGroup.x_ais_OrderRef_RemoveConfigGroup);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveConfigGroup\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveConfigGroup\", HeaderList.ConfigGroup.x_ais_OrderDesc_RemoveConfigGroup);\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"SignInProcess is Success\"\r",
									"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
									"//get global variable to resultDescription \"CreatePartner is Success\"\r",
									"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
									"//get global variable to resultDescription \"CreateAccount is Success\"\r",
									"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
									"//get global variable to resultDescription \"CreateThing is Success\"\r",
									"var resultDescriptionCreateThing = pm.globals.get(\"resultDescriptionCreateThing\");\r",
									"//get global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"var resultDescriptionCreateThingStateInfo = pm.globals.get(\"resultDescriptionCreateThingStateInfo\");\r",
									"//get global variable to resultDescription \"Register is Success\"\r",
									"var resultDescriptionRegisterIsSuccess = pm.globals.get(\"resultDescriptionRegisterIsSuccess\");\r",
									"//get global variable to resultDescription \"CreateConfigGroup is Success\"\r",
									"var resultDescriptionCreateConfigGroup = pm.globals.get(\"resultDescriptionCreateConfigGroup\");\r",
									"//get global variable to resultDescription \"The requested operation was successfully.\" \r",
									"var resultDescriptionTheRequestedOperationWasSuccessfully = pm.globals.get(\"resultDescriptionTheRequestedOperationWasSuccessfully\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- urlRouteList --------------//\r",
									"//set variable to urlRouteList JSON.parse\r",
									"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
									"//---------------- set url Create --------------//\r",
									"//set global variable to url \"/api/v1/auth/signin\"\r",
									"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
									"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
									"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"pm.globals.set(\"urlThingCreateThing\", urlRouteList.Thing.urlThingCreateThing);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"pm.globals.set(\"urlThingCreateThingStateInfo\", urlRouteList.Thing.urlThingCreateThingStateInfo);\r",
									"//set global variable to url \"/api/register/sim/v1\"\r",
									"pm.globals.set(\"urlAsgardHTTPeSimRegister\", urlRouteList.AsgardHTTPeSim.urlAsgardHTTPeSimRegister);\r",
									"//set global variable to url \"/api/config/sim/v1?Sensor\"\r",
									"pm.globals.set(\"urlAsgardHTTPeSimConfig\", urlRouteList.AsgardHTTPeSim.urlAsgardHTTPeSimConfig);\r",
									"//set global variable to url \"/ConfigGroup/CreateConfigGroup\"\r",
									"pm.globals.set(\"urlConfigGroupCreateConfigGroup\", urlRouteList.ConfigGroup.urlConfigGroupCreateConfigGroup);\r",
									"//---------------- get url Create --------------//\r",
									"//get global variable to url \"/api/v1/auth/signin\"\r",
									"var urlSignin = pm.globals.get(\"urlSignin\");\r",
									"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
									"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"var urlThingCreateThing = pm.globals.get(\"urlThingCreateThing\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"var urlThingCreateThingStateInfo = pm.globals.get(\"urlThingCreateThingStateInfo\");\r",
									"//get global variable to url \"/api/v1/Group/CreateGroup\"\r",
									"var urlGroupCreateGroup = pm.globals.get(\"urlGroupCreateGroup\");\r",
									"//get global variable to url \"/api/v1/Control/Thing\"\r",
									"var urlControlThing = pm.globals.get(\"urlControlThing\");\r",
									"//get global variable to url \"/api/register/sim/v1\"\r",
									"var urlAsgardHTTPeSimRegister = pm.globals.get(\"urlAsgardHTTPeSimRegister\");\r",
									"//get global variable to url \"/api/config/sim/v1?Sensor\"\r",
									"var urlAsgardHTTPeSimConfig = pm.globals.get(\"urlAsgardHTTPeSimConfig\");\r",
									"//get global variable to url \"/ConfigGroup/CreateConfigGroup\"\r",
									"var urlConfigGroupCreateConfigGroup = pm.globals.get(\"urlConfigGroupCreateConfigGroup\");\r",
									"//---------------- set url Remove --------------//\r",
									"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
									"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"pm.globals.set(\"urlThingRemoveThing\", urlRouteList.Thing.urlThingRemoveThing);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"pm.globals.set(\"urlThingRemoveThingStateInfo\", urlRouteList.Thing.urlThingRemoveThingStateInfo);\r",
									"//set global variable to url \"/ConfigGroup/RemoveConfigGroup\"\r",
									"pm.globals.set(\"urlConfigGroupRemoveConfigGroup\", urlRouteList.ConfigGroup.urlConfigGroupRemoveConfigGroup);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Signin_ --------------//\r",
									"//get global variable to x_ais_OrderRef \"Signin_\"\r",
									"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"var x_ais_OrderRef_CreateThing = pm.globals.get(\"x_ais_OrderRef_CreateThing\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"var x_ais_OrderDesc_CreateThing = pm.globals.get(\"x_ais_OrderDesc_CreateThing\");\r",
									"//get global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"var x_ais_OrderRef_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderRef_CreateThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"var x_ais_OrderDesc_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_CreateThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals AsgardHTTP --------------//\r",
									"//get global variable to x_ais_OrderRef \"RegisHTTP_\"\r",
									"var x_ais_OrderRef_RegisHTTP = pm.globals.get(\"x_ais_OrderRef_RegisHTTP\");\r",
									"//get global variable to x_ais_OrderDesc \"Register Thing in MG\"\r",
									"var x_ais_OrderDesc_RegisHTTP = pm.globals.get(\"x_ais_OrderDesc_RegisHTTP\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals ConfigGroup --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateConfigGroup_\"\r",
									"const x_ais_OrderRef_CreateConfigGroup = pm.globals.get(\"x_ais_OrderRef_CreateConfigGroup\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateConfigGroup\"\r",
									"const x_ais_OrderDesc_CreateConfigGroup = pm.globals.get(\"x_ais_OrderDesc_CreateConfigGroup\");\r",
									"//------------------------------------------------------------//\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// Signin get token\r",
									"Signin = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSignin = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_Signin + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_UserAuthentication,\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestSignin = {\r",
									"            mode: 'raw',\r",
									"            raw:\r",
									"                JSON.stringify({\r",
									"                    username: Username,\r",
									"                    password: Password\r",
									"                })\r",
									"        };\r",
									"\r",
									"        let optionsSignin = {\r",
									"            url: url + provisioningapis + urlSignin,\r",
									"            method: 'POST',\r",
									"            header: headersOptSignin,\r",
									"            body: httpRequestSignin\r",
									"        };\r",
									"        // console.log('request Signin');\r",
									"        let response = await reqPromise(optionsSignin);\r",
									"        let jsonDataSignin = await response.json();\r",
									"\r",
									"        // setAccessToken\r",
									"        await pm.environment.set(\"AccessToken\", jsonDataSignin.AccessToken);\r",
									"\r",
									"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('Signin : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // SignInProcess is Success\r",
									"        pm.test('Signin : OperationStatus Description is ' + '\"' + resultDescriptionSuccessSignIn + '\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
									"        });\r",
									"\r",
									"        //set random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //set PartnerName\r",
									"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
									"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
									"        //set MerchantContact\r",
									"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
									"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
									"        // set CPID\r",
									"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
									"        pm.environment.set(\"CPID\", CPIDValue)\r",
									"\r",
									"        //ConfigGroupName\r",
									"        let ConfigGroupNameValue = fieldDataValue.ConfigGroup.ConfigGroupNameValue; // \"Sensor_TestThingGroupName\"\r",
									"        pm.environment.set(\"ConfigGroupName\", ConfigGroupNameValue +pm.environment.get(\"random_number\"))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreatePartner\r",
									"CreatePartner = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreatePartner = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreatePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreatePartner,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreatePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
									"                \"PartnerType\": [\r",
									"                    \"Supplier\",\r",
									"                    \"Customer\"\r",
									"                ],\r",
									"                \"PartnerDetail\": {\r",
									"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
									"                    \"CPID\": pm.environment.get(\"CPID\")\r",
									"                },\r",
									"                \"Property\": {\r",
									"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreatePartner = {\r",
									"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreatePartner,\r",
									"            body: httpRequestCreatePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsCreatePartner);\r",
									"        let jsonDataCreatePartner = await response.json();\r",
									"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
									"\r",
									"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreatePartner : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreatePartner is Success\r",
									"        pm.test('CreatePartner : OperationStatus Description is ' + '\"' + resultDescriptionCreatePartner + '\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
									"        });\r",
									"\r",
									"        //GetResponse_PartnerId\r",
									"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
									"\r",
									"        //Accountname\r",
									"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
									"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateAccount\r",
									"CreateAccount = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateAccount = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateAccount,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreateAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateAccount = {\r",
									"            url: url + provisioningapis + urlAccountCreateAccount,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateAccount,\r",
									"            body: httpRequestCreateAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateAccount');\r",
									"        let response = await reqPromise(optionsCreateAccount);\r",
									"        let jsonDataCreateAccount = await response.json();\r",
									"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
									"\r",
									"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateAccount : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateAccount is Success\r",
									"        pm.test('CreateAccount : OperationStatus Description is ' + '\"' + resultDescriptionCreateAccount + '\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
									"        });\r",
									"        // GetResponse_AccountName\r",
									"        pm.environment.set(\"GetResponse_AccountName\", jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
									"        // GetResponse_AccountId\r",
									"        pm.environment.set(\"GetResponse_AccountId\", jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
									"        // random_IM\r",
									"        pm.environment.set(\"random_IM\", _.random(10000000, 99999999) + \" \" + _.random(1000000, 9999999))\r",
									"        // random_ICCID\r",
									"        pm.environment.set(\"random_ICCID\", _.random(1000000, 9999999) + \" \" + _.random(100000, 999999))\r",
									"        // random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //ThingName\r",
									"        let thingNameValue = fieldDataValue.Thing.ThingNameValue; // \"Sensor_TestThingName\"\r",
									"        pm.environment.set(\"ThingName\", thingNameValue + pm.environment.get(\"random_number\"))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThing\r",
									"CreateThing = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThing = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateThing + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateThing,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey': pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreateThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingName\": pm.environment.get(\"ThingName\"),\r",
									"                \"IMEI\": pm.environment.get(\"random_IM\"),\r",
									"                \"IMSI\": pm.environment.get(\"random_IM\"),\r",
									"                \"ICCID\": pm.environment.get(\"random_ICCID\"),\r",
									"                \"RouteUrl\": fieldDataValue.Thing.RouteUrlValue , //[\"http://10.12.3.4:2019/api/information/AddInformation\"]\r",
									"                \"RouteInfo\": {\r",
									"                    \"MIMO_ID\": fieldDataValue.Thing.RouteInfoMIMOIDValue , //\"606edada\"\r",
									"                    \"MIMO_SerialNo\": fieldDataValue.Thing.RouteInfoMIMOSerialNoValue //5466758878\r",
									"                },\r",
									"                \"RouteFlag\": {\r",
									"                    \"ThingName\": fieldDataValue.Thing.RouteFlagThingNameValue , //true\r",
									"                    \"ThingToken\": fieldDataValue.Thing.RouteFlagThingTokenValue, //true\r",
									"                    \"IMEI\": fieldDataValue.Thing.RouteFlagIMEIValue, //true\r",
									"                    \"ICCID\": fieldDataValue.Thing.RouteFlagICCIDValue, //true\r",
									"                    \"RouteInfo\": fieldDataValue.Thing.RouteFlagRouteInfoValue //true\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateThing = {\r",
									"            url: url + provisioningapis + urlThingCreateThing,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThing,\r",
									"            body: httpRequestCreateThing\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThing');\r",
									"        let response = await reqPromise(optionsCreateThing);\r",
									"        let jsonDataCreateThing = await response.json();\r",
									"        // console.log('jsonDataCreateThing',jsonDataCreateThing)\r",
									"\r",
									"        let operationStatusCreateThing = await jsonDataCreateThing.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateThing : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateThing : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateThing is Success\r",
									"        pm.test('CreateThing : OperationStatus Description is ' + '\"' + resultDescriptionCreateThing + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Description', resultDescriptionCreateThing);\r",
									"        });\r",
									"\r",
									"        pm.environment.set(\"GetResponse_ThingID\", jsonDataCreateThing.ThingInfo.ThingId)\r",
									"        pm.environment.set(\"GetResponse_IMSI\", jsonDataCreateThing.ThingInfo.IMSI)\r",
									"        \r",
									"        let keys = pm.environment.get(\"GetResponse_IMSI\") + \":\" + pm.environment.get(\"IpAddress\");\r",
									"        // console.log(\"keys\", keys);\r",
									"        let encodedKeys = CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(keys));\r",
									"        pm.environment.set(\"encodedKeys_Authorization_Register\", encodedKeys);\r",
									"\r",
									"        //Get Random Sensor \r",
									"        pm.environment.set(\"random_Sensor\", _.random(100, 999))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThingStateInfo\r",
									"CreateThingStateInfo = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThingStateInfo = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateThingStateInfo,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey': pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        // {\"AA\" : pm.environment.get(\"random_Sensor\")}\r",
									"        let sensorValue = {};\r",
									"        sensorValue[fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP] = pm.environment.get(\"random_Sensor\");\r",
									"        // console.log('sensorValue',sensorValue);\r",
									"        \r",
									"        let httpRequestCreateThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": [\r",
									"                    pm.environment.get(\"GetResponse_ThingID\")\r",
									"                ],\r",
									"                \"Type\": fieldDataValue.CreateThingStateInfo.Type_Report,\r",
									"                \"Sensor\": sensorValue\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingCreateThingStateInfo,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThingStateInfo,\r",
									"            body: httpRequestCreateThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThingStateInfo');\r",
									"        let response = await reqPromise(optionsCreateThingStateInfo);\r",
									"        let jsonDataCreateThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataCreateThingStateInfo',jsonDataCreateThingStateInfo)\r",
									"\r",
									"        let operationStatusCreateThingStateInfo = await jsonDataCreateThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"CreateThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //CreateThingStateInfo is Success\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Description is ' + '\"' + resultDescriptionCreateThingStateInfo + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Description', resultDescriptionCreateThingStateInfo);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateConfigGroup\r",
									"CreateConfigGroup = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateConfigGroup = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateConfigGroup + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateConfigGroup,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\")\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreateConfigGroup = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ConfigName\":  pm.environment.get(\"ConfigGroupName\"),\r",
									"                \"ThingId\": [pm.environment.get(\"GetResponse_ThingID\")],\r",
									"                \"ConfigInfo\": {\r",
									"                    \"RefreshTime\": fieldDataValue.ConfigGroup.RefreshTime , //\"On\"\r",
									"                    \"Max\": fieldDataValue.ConfigGroup.Max //\"99\"\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateConfigGroup = {\r",
									"            url: url + provisioningapis + urlConfigGroupCreateConfigGroup,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateConfigGroup,\r",
									"            body: httpRequestCreateConfigGroup\r",
									"        };\r",
									"\r",
									"        // console.log('response CreateConfigGroup');\r",
									"        let response = await reqPromise(optionsCreateConfigGroup);\r",
									"        let jsonDataCreateConfigGroup = await response.json();\r",
									"        // console.log('jsonDataCreateConfigGroup',jsonDataCreateConfigGroup)\r",
									"    \r",
									"        let operationStatusCreateConfigGroup = await jsonDataCreateConfigGroup.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateConfigGroup : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateConfigGroup : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateConfigGroup).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateConfigGroup is Success\r",
									"        pm.test('CreateConfigGroup : OperationStatus description is '+'\"'+ resultDescriptionCreateConfigGroup+'\"', function () {\r",
									"            pm.expect(operationStatusCreateConfigGroup).to.have.property('Description', resultDescriptionCreateConfigGroup);\r",
									"        });\r",
									"\r",
									"        pm.environment.set(\"GetResponse_ConfigGroupId\",jsonDataCreateConfigGroup.ConfigGroupInfo.ConfigGroupId)\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// AsgardHTTPeSimRegister\r",
									"AsgardHTTPeSimRegister = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptAsgardHTTPeSimRegister = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_RegisHTTP + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_RegisHTTP,\r",
									"            'Authorization': Basic + ' ' + pm.environment.get(\"encodedKeys_Authorization_Register\")\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestAsgardHTTPeSimRegister = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({})\r",
									"        };\r",
									"\r",
									"        let optionsAsgardHTTPeSimRegister = {\r",
									"            url: url + httpapis + urlAsgardHTTPeSimRegister,\r",
									"            method: 'POST',\r",
									"            header: headersOptAsgardHTTPeSimRegister,\r",
									"            body: httpRequestAsgardHTTPeSimRegister\r",
									"        };\r",
									"\r",
									"        // console.log('request AsgardHTTPEsimRegister');\r",
									"        let response = await reqPromise(optionsAsgardHTTPeSimRegister);\r",
									"        let jsonDataAsgardHTTPeSimRegister = await response.json();\r",
									"        // console.log('jsonDataCreateThingStateInfo',jsonDataAsgardHTTPeSimRegister)\r",
									"        let operationStatusAsgardHTTPeSimRegister = await jsonDataAsgardHTTPeSimRegister.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"Asgard HTTP(eSim) Register : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('Asgard HTTP(eSim) Register : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusAsgardHTTPeSimRegister).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"\r",
									"        // The requested operation was successfully.\r",
									"        pm.test('Asgard HTTP(eSim) Register : OperationStatus DeveloperMessage is ' + '\"' + resultDescriptionTheRequestedOperationWasSuccessfully + '\"', function () {\r",
									"            pm.expect(operationStatusAsgardHTTPeSimRegister).to.have.property('DeveloperMessage', resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"        });\r",
									"\r",
									"        await pm.environment.set(\"GetResponse_ThingToken\", jsonDataAsgardHTTPeSimRegister.ThingToken)\r",
									"        let keys2 = await fieldDataValue.AsgardHTTP.Value_AsgardHTTPeSim_Config_TST_F2_0_2_005_Username_Error + \":\" + fieldDataValue.AsgardHTTP.Value_AsgardHTTPeSim_Config_TST_F2_0_2_005_Password_Error; \r",
									"        // console.log(\"keys\", keys);   \r",
									"        let encodedKeys2 = await CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(keys2));\r",
									"        pm.environment.set(\"encodedKeys_Authorization_Config\", encodedKeys2)\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"Signin();\r",
									"setTimeout(async function(){await CreatePartner();}, 3000); \r",
									"setTimeout(async function(){await CreateAccount();}, 6000); \r",
									"setTimeout(async function(){await CreateThing();}, 8000); \r",
									"setTimeout(async function(){await CreateThingStateInfo();}, 9000); \r",
									"setTimeout(async function(){await CreateConfigGroup();}, 10000); \r",
									"setTimeout(async function(){await AsgardHTTPeSimRegister();}, 20000); \r",
									"setTimeout(async function(){}, 30000); //for wait value encodedKeys_Authorization_Config"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-ais-UserName",
								"type": "text",
								"value": "{{x_ais_UserName_AisPartner}}"
							},
							{
								"key": "x-ais-OrderRef",
								"value": "{{x_ais_OrderRef_ConfigHTTP_fail}}{{current_timestamp}}"
							},
							{
								"key": "x-ais-OrderDesc",
								"type": "text",
								"value": "{{x_ais_OrderDesc_ConfigHTTP}}"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{Basic}} {{encodedKeys_Authorization_Config}}"
							}
						],
						"url": {
							"raw": "{{url}}{{httpapis}}/api/config/sim/v1?Sensor=RefreshTime",
							"host": [
								"{{url}}{{httpapis}}"
							],
							"path": [
								"api",
								"config",
								"sim",
								"v1"
							],
							"query": [
								{
									"key": "Sensor",
									"value": "RefreshTime"
								}
							]
						},
						"description": "Type:Desire"
					},
					"response": []
				},
				{
					"name": "AsgardHTTPeSimConfig_TST_F2_0_2_006_Error_ThingStatusIdle",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var Basic = pm.environment.get(\"Basic\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to xAisOrderRef \"RemoveThing_\"\r",
									"var x_ais_OrderRef_RemoveThing = pm.globals.get(\"x_ais_OrderRef_RemoveThing\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"var x_ais_OrderDesc_RemoveThing = pm.globals.get(\"x_ais_OrderDesc_RemoveThing\");\r",
									"//get global variable to xAisOrderRef \"RemoveThingStateInfo_\"\r",
									"var x_ais_OrderRef_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderRef_RemoveThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThingStateInfo\"\r",
									"var x_ais_OrderDesc_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_RemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals ConfigGroup --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveConfigGroup_\"\r",
									"const x_ais_OrderRef_RemoveConfigGroup = pm.globals.get(\"x_ais_OrderRef_RemoveConfigGroup\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveConfigGroup\"\r",
									"const x_ais_OrderDesc_RemoveConfigGroup = pm.globals.get(\"x_ais_OrderDesc_RemoveConfigGroup\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals AsgardHTTP --------------//\r",
									"//get global variable to x_ais_OrderRef \"ConfigHTTP_\"\r",
									"var x_ais_OrderRef_ConfigHTTP = pm.globals.get(\"x_ais_OrderRef_ConfigHTTP\");\r",
									"//get global variable to x_ais_OrderRef \"ConfigHTTPfail_\"\r",
									"var x_ais_OrderRef_ConfigHTTP_fail = pm.globals.get(\"x_ais_OrderRef_ConfigHTTP_fail\");\r",
									"//get global variable to x_ais_OrderDesc \"Get Config from MG\"\r",
									"var x_ais_OrderDesc_ConfigHTTP = pm.globals.get(\"x_ais_OrderDesc_ConfigHTTP\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get url Remove --------------//\r",
									"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
									"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"var urlThingRemoveThing = pm.globals.get(\"urlThingRemoveThing\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"var urlThingRemoveThingStateInfo = pm.globals.get(\"urlThingRemoveThingStateInfo\");\r",
									"//get global variable to url \"/ConfigGroup/RemoveConfigGroup\"\r",
									"var urlConfigGroupRemoveConfigGroup = pm.globals.get(\"urlConfigGroupRemoveConfigGroup\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"RemovePartner is Success\"\r",
									"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
									"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
									"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
									"//get global variable to resultDescription \"RemoveThing is Success\"\r",
									"var resultDescriptionRemoveThing = pm.globals.get(\"resultDescriptionRemoveThing\");\r",
									"//get global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"var resultDescriptionRemoveThingStateInfo = pm.globals.get(\"resultDescriptionRemoveThingStateInfo\");\r",
									"//get global variable to resultDescription \"RemoveConfigGroup is Success\"\r",
									"var resultDescriptionRemoveConfigGroup = pm.globals.get(\"resultDescriptionRemoveConfigGroup\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 404\r",
									"var statusCodeNotFound = pm.globals.get(\"statusCodeNotFound\");\r",
									"//get global variable to resultCode \"40400\"\r",
									"var resultCodeNotFound = pm.globals.get(\"resultCodeNotFound\");\r",
									"//get global variable to resultDescription \"The requested operation could not be found.\"\r",
									"var resultDescriptionTheRequestedOperationCouldNotBeFound = pm.globals.get(\"resultDescriptionTheRequestedOperationCouldNotBeFound\");\r",
									"//------------------------------------------------------------//\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Asgard HTTP(eSim) Config : Status code is \" + statusCodeNotFound, function () {\r",
									"    pm.response.to.have.status(statusCodeNotFound);\r",
									"});\r",
									"\r",
									"pm.test('Asgard HTTP(eSim) Config : operationStatus code is '+'\"'+ resultCodeNotFound +'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeNotFound);\r",
									"});\r",
									"\r",
									"pm.test('Asgard HTTP(eSim) Config : OperationStatus DeveloperMessage is '+'\"'+ resultDescriptionTheRequestedOperationCouldNotBeFound+'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheRequestedOperationCouldNotBeFound);\r",
									"});\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// RemovePartner\r",
									" RemovePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemovePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemovePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemovePartner = {\r",
									"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemovePartner,\r",
									"            body: httpRequestRemovePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request RemovePartner');\r",
									"        let response = await reqPromise(optionsRemovePartner);\r",
									"        let jsonDataRemovePartner = await response.json();\r",
									"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
									"    \r",
									"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemovePartner is Success\r",
									"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// // RemoveAccount\r",
									"//  RemoveAccount = async () =>  {\r",
									"//     try {\r",
									"//         // header\r",
									"//         let headersOptRemoveAccount = {\r",
									"//             'Content-Type':ContentType_ApplicationJson,\r",
									"//             'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
									"//             'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
									"//             'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"//             'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"//             'Accept':Accept\r",
									"//         };\r",
									"        \r",
									"//         // body\r",
									"//         let httpRequestRemoveAccount = {\r",
									"//             mode: 'raw',\r",
									"//             raw: JSON.stringify({\r",
									"//                 \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"//                 \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
									"//             })\r",
									"//         };\r",
									"        \r",
									"//         let optionsRemoveAccount = {\r",
									"//             url: url + provisioningapis + urlAccountRemoveAccount,\r",
									"//             method: 'DELETE',\r",
									"//             header: headersOptRemoveAccount,\r",
									"//             body: httpRequestRemoveAccount\r",
									"//         };\r",
									"\r",
									"//         // console.log('request RemoveAccount');\r",
									"//         let response = await reqPromise(optionsRemoveAccount);\r",
									"//         let jsonDataRemoveAccount = await response.json();\r",
									"//         // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
									"    \r",
									"//         let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
									"\r",
									"//         //200\r",
									"//         pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
									"//             pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"//         });\r",
									"//         //20000\r",
									"//         pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"//             pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
									"//         });\r",
									"//         //RemoveAccount is Success\r",
									"//         pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
									"//             pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
									"//         });\r",
									"\r",
									"//     } catch (err) {\r",
									"//         console.log('err',err);\r",
									"//     }\r",
									"// }\r",
									"\r",
									"// RemoveThing\r",
									" RemoveThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThing = {\r",
									"            url: url + provisioningapis + urlThingRemoveThing,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThing,\r",
									"            body: httpRequestRemoveThing\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveThing');\r",
									"        let response = await reqPromise(optionsRemoveThing);\r",
									"        let jsonDataRemoveThing = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThing)\r",
									"    \r",
									"        let operationStatusRemoveThing = await jsonDataRemoveThing.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThing : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThing : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThing is Success\r",
									"        pm.test('RemoveThing : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThing+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Description', resultDescriptionRemoveThing);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThingStateInfo\r",
									" RemoveThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"            \r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\"),\r",
									"                \"stateType\": fieldDataValue.CreateThingStateInfo.Type_Report, //Report\r",
									"                \"stateKey\": fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP //AA\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingRemoveThingStateInfo,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThingStateInfo,\r",
									"            body: httpRequestRemoveThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('response RemoveThingStateInfo');\r",
									"        let response = await reqPromise(optionsRemoveThingStateInfo);\r",
									"        let jsonDataRemoveThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThingStateInfo)\r",
									"    \r",
									"        let operationStatusRemoveThingStateInfo = await jsonDataRemoveThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThingStateInfo is Success\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThingStateInfo+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Description', resultDescriptionRemoveThingStateInfo);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveConfigGroup\r",
									" RemoveConfigGroup = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveConfigGroup = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_RemoveConfigGroup + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_RemoveConfigGroup,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey': pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveConfigGroup = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ConfigGroupId\": pm.environment.get(\"GetResponse_ConfigGroupId\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveConfigGroup = {\r",
									"            url: url + provisioningapis + urlConfigGroupRemoveConfigGroup,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveConfigGroup,\r",
									"            body: httpRequestRemoveConfigGroup\r",
									"        };\r",
									"\r",
									"        // console.log('response RemoveConfigGroup');\r",
									"        let response = await reqPromise(optionsRemoveConfigGroup);\r",
									"        let jsonDataRemoveConfigGroup = await response.json();\r",
									"        // console.log('jsonDataRemoveConfigGroup',jsonDataRemoveConfigGroup)\r",
									"    \r",
									"        let operationStatusRemoveConfigGroup = await jsonDataRemoveConfigGroup.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveConfigGroup : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveConfigGroup : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveConfigGroup).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveConfigGroup is Success\r",
									"        pm.test('RemoveConfigGroup : OperationStatus Description is '+'\"'+ resultDescriptionRemoveConfigGroup+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveConfigGroup).to.have.property('Description', resultDescriptionRemoveConfigGroup);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"//---------------- LogDefaultValue --------------//\r",
									"//set variable to LogDefaultValue JSON.parse\r",
									"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
									"// console.log('LogDefaultValue',LogDefaultValue);\r",
									"//---------------- set globals Other --------------//\r",
									"\r",
									"var SearchLog = LogDefaultValue.SearchLog;\r",
									"// console.log('SearchLog',SearchLog);\r",
									"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
									"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
									"var kbn_version = SearchLog.header.kbn_version;\r",
									"var authorization = SearchLog.header.Authorization;\r",
									"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
									"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
									"var namespace = LogDefaultValue.Other.namespace;\r",
									"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
									"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
									"var header_x_ais_username = LogDefaultValue.Other.header_x_ais_username;\r",
									"var methodGet = LogDefaultValue.Other.methodGet;\r",
									"\r",
									"// Detail\r",
									"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
									"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
									"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
									"\r",
									"// Summary\r",
									"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
									"var identitySummary = \"\";\r",
									"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
									"\r",
									"// Asgard.Http.APIs\r",
									"var applicationName = LogDefaultValue.AsgardHTTP.applicationName;\r",
									"var cmdName = LogDefaultValue.AsgardHTTP.cmdNameConfig;\r",
									"var endPointNameRabbitMQ = LogDefaultValue.AsgardHTTP.endPointNameRabbitMQ;\r",
									"var containerId = LogDefaultValue.AsgardHTTP.containerId;\r",
									"var requestObjectUrlStaging = LogDefaultValue.AsgardHTTP.requestObjectUrlConfigMgStaging;\r",
									"var urlConfig  = LogDefaultValue.AsgardHTTP.urlConfigError;\r",
									"\r",
									"// Check CDR (Summary Log) and EDR (Detail Log)\r",
									"SearchLogFindTid = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSearchLogFindTid = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = x_ais_OrderRef_ConfigHTTP_fail + current_timestamp;\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestSearchLogFindTid = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"\r",
									"        let optionsSearchLogFindTid = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptSearchLogFindTid,\r",
									"            body: httpRequestSearchLogFindTid\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsSearchLogFindTid);\r",
									"        let jsonDataSearchLogFindTid = await response.json();\r",
									"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
									"        // console.log('hits',hits)\r",
									"  \r",
									"        // find tid\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            // let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"        \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            if(applicationNameValue == applicationName){\r",
									"                let tid = hits[i]._source.cauldron.tid;\r",
									"                pm.environment.set(\"tid\", tid);\r",
									"                break;\r",
									"           }\r",
									"        }\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"CheckLog = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCheckLog = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = pm.environment.get(\"tid\");\r",
									"\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestCheckLog = {\r",
									"            mode: 'raw',\r",
									"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"        let optionsCheckLog = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptCheckLog,\r",
									"            body: httpRequestCheckLog\r",
									"        }; \r",
									"        let response = await reqPromise(optionsCheckLog);\r",
									"        let jsonDataCheckLog = await response.json();\r",
									"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
									"        \r",
									"        // //200\r",
									"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });     \r",
									"        \r",
									"        let hits = jsonDataCheckLog.hits.hits\r",
									"        console.log('hits',hits)\r",
									"  \r",
									"        // find logType\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            //  let logType = hits[i]._source.cauldron.logType\r",
									"            let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"           \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            \r",
									"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
									"            // console.log('resultDataLog',resultDataLog)\r",
									"\r",
									"            let tidControl = x_ais_OrderRef_ConfigHTTP_fail  + current_timestamp;\r",
									"            // console.log(tidControl);\r",
									"            if(applicationNameValue == applicationName){\r",
									"                 \r",
									"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and Asgard.Http.APIs\r",
									"                    pm.test(\"Check Summary Log : Asgard_HTTP(eSim) Config\" , function () {\r",
									"                        console.log(\"======== Check Summary Log ( Expected = Actual) [Asgard_HTTP(eSim) Config] ==================\");\r",
									"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
									"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
									"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeNotFound);\r",
									"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionTheRequestedOperationCouldNotBeFound);\r",
									"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
									"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"identity : \" + JSON.stringify(resultDataLog.identity) + \" = \" + JSON.stringify(identitySummary));\r",
									"                        // console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
									"\r",
									"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
									"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
									"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeNotFound); \r",
									"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionTheRequestedOperationCouldNotBeFound); \r",
									"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
									"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
									"                        // pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
									"\r",
									"                        // check custom\r",
									"                        // \\\"custom\\\":{ \\\"endPointSummary\\\":[ { \\\"no\\\":\\\"1\\\", \\\"endPointName\\\":\\\"db.ThingsCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:Inquiry was Success\\\", \\\"processTime\\\":0.0012 } ] }\r",
									"\r",
									"                        let custom = resultDataLog.custom.endPointSummary;\r",
									"                        let countCustom = custom.length;\r",
									"                       \r",
									"                        // [\"db.ThingsCollection\"]\r",
									"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_Asgard_HTTP_eSim_Config_002_004_005_006;\r",
									"                        // [\"20000:Inquiry was Success\"]\r",
									"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_Asgard_HTTP_eSim_Config_002_004_005_006;\r",
									"                        let countCustomStep = dataEndPointName.length;\r",
									"\r",
									"                        console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep);\r",
									"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
									"                        \r",
									"                        for(let i=0;i<countCustomStep;i++){\r",
									"                            let no = custom[i].no;\r",
									"                            let valueEndPointName = custom[i].endPointName;\r",
									"                            let valueResponseStatus = custom[i].responseStatus;\r",
									"                            // console.log(\"i\",i);\r",
									"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
									"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
									"\r",
									"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString());\r",
									"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i]);\r",
									"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i]);\r",
									"\r",
									"                            pm.expect(no).to.eql((i+1).toString()); \r",
									"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
									"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]); \r",
									"                        }\r",
									"                    }); \r",
									"                }\r",
									"\r",
									"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and Asgard.Http.APIs\r",
									"\r",
									"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
									"                    // console.log('endPointNameValue ',endPointNameValue)\r",
									"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [Asgard_HTTP(eSim) Config]\", function () {\r",
									"                        console.log(\"======== Check Detail Log ( Expected = Actual) [Asgard_HTTP(eSim) Config] ==================\");\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
									"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
									"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
									"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.custom1.activityLog.processTime + \" = \" + resultDataLog.custom1.activityLog.processTime);\r",
									"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
									"\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
									"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
									"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
									"\r",
									"                        let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
									"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
									"                        let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
									"                            // console.log('jsonParseResponseObject',jsonParseResponseObject); \r",
									"                        let url = urlConfig; \r",
									"                        let x_ais_orderref = x_ais_OrderRef_ConfigHTTP_fail + current_timestamp;\r",
									"                        let x_ais_orderdesc = x_ais_OrderDesc_ConfigHTTP;\r",
									"                        let x_ais_userName = x_ais_UserName_AisPartner;\r",
									"                        let authorization = Basic + ' ' + pm.environment.get(\"encodedKeys_Authorization_Config\");\r",
									"                        let SensorKey = fieldDataValue.CreateThingStateInfo.SensorKey;\r",
									"                        let sensor = pm.environment.get(\"random_Sensor\");\r",
									"                        let timestamp = pm.environment.get(\"timestamp\");\r",
									"\r",
									"                        if( endPointNameValue == undefined){\r",
									"                            // check requestObject\r",
									"                            // \"requestObject\":\"{\\\"url\\\":\\\"/api/config/sim/v1\\\",\\\"method\\\":\\\"GET\\\",\\\"headers\\\":{\\\"Cache-Control\\\":\\\"no-cache\\\",\\\"Content-Type\\\":\\\"application/json\\\",\\\"Accept\\\":\\\"*/*\\\",\\\"Accept-Encoding\\\":\\\"gzip,deflate,br\\\",\\\"Authorization\\\":\\\"Basic ZmYxMjEwZjgtNGFjYi00YjNjLTkwMTMtODc0YWM0ZGIxZGVieHg6MS4yLjMuNA==\\\",\\\"Host\\\":\\\"mg-staging.sandais.com\\\",\\\"User-Agent\\\":\\\"PostmanRuntime/7.26.8\\\",\\\"Content-Length\\\":\\\"0\\\",\\\"x-real-ip\\\":\\\"58.8.214.174\\\",\\\"x-forwarded-for\\\":\\\"58.8.214.174\\\",\\\"x-forwarded-proto\\\":\\\"https\\\",\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"ConfigHTTPfail_202102152002008\\\",\\\"x-ais-orderdesc\\\":\\\"Get Config from MG\\\",\\\"postman-token\\\":\\\"a99d5f91-ea7c-4695-b941-0dea110169a2\\\",\\\"x-request-id\\\":\\\"cc1ffc3a-c815-4299-ac4a-9250d7064fa8\\\",\\\"x-b3-traceid\\\":\\\"55b1fe4d9548fdbb017552c523e0afcd\\\",\\\"x-b3-spanid\\\":\\\"017552c523e0afcd\\\",\\\"x-b3-sampled\\\":\\\"0\\\",\\\"x-ais-SessionId\\\":\\\"1613397270624\\\"},\\\"queryString\\\":{\\\"Sensor\\\":\\\"RefreshTime\\\"},\\\"routeParamteters\\\":{}}\"\r",
									"\r",
									"                            // \\\"requestObject\\\":\\\"{ \\\\\\\"url\\\\\\\":\\\\\\\"/api/config/sim/v1\\\\\\\", \\\\\\\"method\\\\\\\":\\\\\\\"GET\\\\\\\", \\\\\\\"headers\\\\\\\":{ \\\\\\\"Cache-Control\\\\\\\":\\\\\\\"no-cache\\\\\\\", \\\\\\\"Content-Type\\\\\\\":\\\\\\\"application/json\\\\\\\", \\\\\\\"Accept\\\\\\\":\\\\\\\"*/*\\\\\\\", \\\\\\\"Accept-Encoding\\\\\\\":\\\\\\\"gzip, deflate, br\\\\\\\", \\\\\\\"Authorization\\\\\\\":\\\\\\\"Basic ODVlNjM4ODQtNGQ0NS00MDM5LThhZDktOTUxNjM3NTE3MTM2eHg6MS4yLjMuNA==\\\\\\\", \\\\\\\"Host\\\\\\\":\\\\\\\"mg-iot.sandais.com\\\\\\\", \\\\\\\"User-Agent\\\\\\\":\\\\\\\"PostmanRuntime/7.26.8\\\\\\\", \\\\\\\"Content-Length\\\\\\\":\\\\\\\"0\\\\\\\", \\\\\\\"x-real-ip\\\\\\\":\\\\\\\"182.232.183.255\\\\\\\", \\\\\\\"x-forwarded-for\\\\\\\":\\\\\\\"182.232.183.255, 10.233.65.1\\\\\\\", \\\\\\\"x-forwarded-proto\\\\\\\":\\\\\\\"http\\\\\\\", \\\\\\\"x-ais-username\\\\\\\":\\\\\\\"AisPartner\\\\\\\", \\\\\\\"x-ais-orderref\\\\\\\":\\\\\\\"ConfigHTTPfail_202105112105188\\\\\\\", \\\\\\\"x-ais-orderdesc\\\\\\\":\\\\\\\"Get Config from MG\\\\\\\", \\\\\\\"postman-token\\\\\\\":\\\\\\\"fc0dbef0-be0d-4b02-8a4f-b796d2e91afd\\\\\\\", \\\\\\\"x-envoy-external-address\\\\\\\":\\\\\\\"10.233.65.1\\\\\\\", \\\\\\\"x-request-id\\\\\\\":\\\\\\\"f0b3b17b-b135-4bc4-85f5-51d62203cfcf\\\\\\\", \\\\\\\"x-envoy-original-path\\\\\\\":\\\\\\\"/httpapis/api/config/sim/v1?Sensor=RefreshTime\\\\\\\", \\\\\\\"x-b3-traceid\\\\\\\":\\\\\\\"984086a98d1868f0ae3708d37fd6ef53\\\\\\\", \\\\\\\"x-b3-spanid\\\\\\\":\\\\\\\"3f764052c4baa45b\\\\\\\", \\\\\\\"x-b3-parentspanid\\\\\\\":\\\\\\\"ae3708d37fd6ef53\\\\\\\", \\\\\\\"x-b3-sampled\\\\\\\":\\\\\\\"0\\\\\\\", \\\\\\\"x-ais-SessionId\\\\\\\":\\\\\\\"1620743596131\\\\\\\" }, \\\\\\\"queryString\\\\\\\":{ \\\\\\\"Sensor\\\\\\\":\\\\\\\"RefreshTime\\\\\\\" }, \\\\\\\"routeParamteters\\\\\\\":{ } }\\\"\r",
									"\r",
									"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
									"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodGet);\r",
									"                            console.log(\"headers.x_ais_userName : \" + jsonParseRequestObject.headers[header_x_ais_username] + \" = \" + x_ais_userName);\r",
									"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
									"                            console.log(\"headers.Authorization : \" + jsonParseRequestObject.headers.Authorization + \" = \" + authorization);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
									"                            pm.expect(jsonParseRequestObject.method).to.eql(methodGet);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_username]).to.eql(x_ais_userName);\r",
									"                            pm.expect(jsonParseRequestObject.headers.Authorization).to.eql(authorization);\r",
									"\r",
									"                            console.log(\"queryString.Sensor : \" + JSON.stringify(jsonParseRequestObject.queryString.Sensor) + \" = \" + JSON.stringify(\"RefreshTime\"));\r",
									"                            console.log(\"routeParamteters : \" + JSON.stringify(jsonParseRequestObject.routeParamteters) + \" = \" + JSON.stringify({}));\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.queryString.Sensor).to.eql(\"RefreshTime\"); \r",
									"                            pm.expect(jsonParseRequestObject.routeParamteters).to.eql({}); \r",
									"\r",
									"                            // check responseObject\r",
									"                            // \"responseObject\":\"{\\\"OperationStatus\\\":{\\\"Code\\\":\\\"40400\\\",\\\"DeveloperMessage\\\":\\\"The requested operation could not be found.\\\"}}\"\r",
									"\r",
									"                            console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeNotFound);\r",
									"                            console.log(\"response.OperationStatus.DeveloperMessage : \" + jsonParseResponseObject.OperationStatus.DeveloperMessage + \" = \" + resultDescriptionTheRequestedOperationCouldNotBeFound);\r",
									"\r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeNotFound);  \r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheRequestedOperationCouldNotBeFound);  \r",
									"                        }\r",
									"                    }); \r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"setTimeout(function(){SearchLogFindTid();}, 50000); \r",
									"setTimeout(function(){CheckLog();}, 70000); \r",
									"\r",
									"setTimeout(function(){RemovePartner();}, 80000); \r",
									"\r",
									"setTimeout(function(){\r",
									"pm.environment.unset(\"current_timestamp\");\r",
									"pm.environment.unset(\"AccessToken\");\r",
									"pm.environment.unset(\"random_number\");\r",
									"pm.environment.unset(\"PartnerName\");\r",
									"pm.environment.unset(\"MerchantContact\");\r",
									"pm.environment.unset(\"CPID\");\r",
									"pm.environment.unset(\"GetResponse_PartnerId\");\r",
									"pm.environment.unset(\"AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountId\");\r",
									"pm.environment.unset(\"random_IM\");\r",
									"pm.environment.unset(\"random_ICCID\");\r",
									"pm.environment.unset(\"ThingName\");\r",
									"pm.environment.unset(\"GetResponse_ThingID\");\r",
									"pm.environment.unset(\"GetResponse_IMSI\");\r",
									"pm.environment.unset(\"encodedKeys_Authorization_Register\");\r",
									"pm.environment.unset(\"encodedKeys_Authorization_Config\");\r",
									"pm.environment.unset(\"random_Sensor\");\r",
									"pm.environment.unset(\"GetResponse_ThingToken\");\r",
									"pm.environment.unset(\"tid\");\r",
									"pm.environment.unset(\"GetResponse_ConfigGroupId\");\r",
									"pm.environment.unset(\"ConfigGroupName\");\r",
									"}, 85000); \r",
									"setTimeout(async function(){}, 90000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var Username = pm.environment.get(\"Username\");\r",
									"var Password = pm.environment.get(\"Password\");\r",
									"\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"var httpapis = pm.environment.get(\"httpapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"//format YYYYMMDDHHMMSSS\r",
									"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
									"// console.log('currentTmestamp',currentTmestamp);\r",
									"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var Basic = pm.environment.get(\"Basic\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- statusCodeList --------------//\r",
									"//set variable to statusCodeList JSON.parse\r",
									"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
									"//set global variable to statusCode 200\r",
									"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
									"//set global variable to statusCode 201\r",
									"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
									"//set global variable to statusCode 404\r",
									"pm.globals.set(\"statusCodeNotFound\", statusCodeList.statusCodeNotFound);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultCodeList --------------//\r",
									"//set variable to resultCodeList JSON.parse\r",
									"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
									"//set global variable to resultCode \"20000\"\r",
									"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
									"//set global variable to resultCode \"20100\"\r",
									"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
									"//set global variable to resultCode \"40400\"\r",
									"pm.globals.set(\"resultCodeNotFound\", resultCodeList.resultCodeNotFound);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionSuccessList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
									"//set global variable to resultDescription \"SignInProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
									"//set global variable to resultDescription \"CreatePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
									"//set global variable to resultDescription \"CreateAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
									"//set global variable to resultDescription \"CreateThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThing\", resultDescriptionSuccessList.resultDescriptionCreateThing);\r",
									"//set global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThingStateInfo\", resultDescriptionSuccessList.resultDescriptionCreateThingStateInfo);\r",
									"//set global variable to resultDescription \"RemovePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
									"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
									"//set global variable to resultDescription \"RemoveThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThing\", resultDescriptionSuccessList.resultDescriptionRemoveThing);\r",
									"//set global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThingStateInfo\", resultDescriptionSuccessList.resultDescriptionRemoveThingStateInfo);\r",
									"//set global variable to resultDescription \"Register is Success\"\r",
									"pm.globals.set(\"resultDescriptionRegisterIsSuccess\", resultDescriptionSuccessList.resultDescriptionRegisterIsSuccess);\r",
									"//set global variable to resultDescription \"ConfigProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionConfigProcessIsSuccess\", resultDescriptionSuccessList.resultDescriptionConfigProcessIsSuccess);\r",
									"//set global variable to resultDescription \"CreateConfigGroup is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateConfigGroup\", resultDescriptionSuccessList.resultDescriptionCreateConfigGroup);\r",
									"//set global variable to resultDescription \"RemoveConfigGroup is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveConfigGroup\", resultDescriptionSuccessList.resultDescriptionRemoveConfigGroup);\r",
									"//set global variable to resultDescription \"The requested operation was successfully.\"\r",
									"pm.globals.set(\"resultDescriptionTheRequestedOperationWasSuccessfully\", resultDescriptionSuccessList.resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionErrorList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
									"//set global variable to resultDescription \"The requested operation could not be found.\"\r",
									"pm.globals.set(\"resultDescriptionTheRequestedOperationCouldNotBeFound\", resultDescriptionErrorList.resultDescriptionTheRequestedOperationCouldNotBeFound);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- HeaderList --------------//\r",
									"//set variable to HeaderList JSON.parse\r",
									"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
									"//---------------- set globals Other --------------//\r",
									"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
									"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
									"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
									"//set global variable to kbn-versio \"7.5.1\"\r",
									"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Signin_ --------------//\r",
									"//set global variable to x_ais_OrderRef \"Signin_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreatePartner --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
									"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
									"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
									"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreateAccount --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
									"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
									"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Thing --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThing\", HeaderList.Thing.x_ais_OrderRef_CreateThing);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThing\", HeaderList.Thing.x_ais_OrderDesc_CreateThing);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThing\", HeaderList.Thing.x_ais_OrderRef_RemoveThing);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThing\", HeaderList.Thing.x_ais_OrderDesc_RemoveThing);\r",
									"//set global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_RemoveThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_RemoveThingStateInfo);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals AsgardHTTP --------------//\r",
									"//set global variable to x_ais_OrderRef \"RegisHTTP_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RegisHTTP\", HeaderList.AsgardHTTP.x_ais_OrderRef_RegisHTTP);\r",
									"//set global variable to x_ais_OrderDesc \"Register Thing in MG\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RegisHTTP\", HeaderList.AsgardHTTP.x_ais_OrderDesc_RegisHTTP);\r",
									"//set global variable to x_ais_OrderRef \"ConfigHTTP_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ConfigHTTP\", HeaderList.AsgardHTTP.x_ais_OrderRef_ConfigHTTP);\r",
									"//set global variable to x_ais_OrderRef \"ConfigHTTPfail_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ConfigHTTP_fail\", HeaderList.AsgardHTTP.x_ais_OrderRef_ConfigHTTP_fail);\r",
									"//set global variable to x_ais_OrderDesc \"Get Config from MG\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_ConfigHTTP\", HeaderList.AsgardHTTP.x_ais_OrderDesc_ConfigHTTP);\r",
									"//set global variable to x_ais_OrderRef \"ReportHTTP_\"\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals ConfigGroup --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateConfigGroup_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateConfigGroup\", HeaderList.ConfigGroup.x_ais_OrderRef_CreateConfigGroup);\r",
									"//set global variable to x_ais_OrderDesc \"CreateConfigGroup\"\r",
									" pm.globals.set(\"x_ais_OrderDesc_CreateConfigGroup\", HeaderList.ConfigGroup.x_ais_OrderDesc_CreateConfigGroup);\r",
									"//set global variable to x_ais_OrderRef \"RemoveConfigGroup_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveConfigGroup\", HeaderList.ConfigGroup.x_ais_OrderRef_RemoveConfigGroup);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveConfigGroup\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveConfigGroup\", HeaderList.ConfigGroup.x_ais_OrderDesc_RemoveConfigGroup);\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"SignInProcess is Success\"\r",
									"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
									"//get global variable to resultDescription \"CreatePartner is Success\"\r",
									"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
									"//get global variable to resultDescription \"CreateAccount is Success\"\r",
									"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
									"//get global variable to resultDescription \"CreateThing is Success\"\r",
									"var resultDescriptionCreateThing = pm.globals.get(\"resultDescriptionCreateThing\");\r",
									"//get global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"var resultDescriptionCreateThingStateInfo = pm.globals.get(\"resultDescriptionCreateThingStateInfo\");\r",
									"//get global variable to resultDescription \"Register is Success\"\r",
									"var resultDescriptionRegisterIsSuccess = pm.globals.get(\"resultDescriptionRegisterIsSuccess\");\r",
									"//get global variable to resultDescription \"CreateConfigGroup is Success\"\r",
									"var resultDescriptionCreateConfigGroup = pm.globals.get(\"resultDescriptionCreateConfigGroup\");\r",
									"//get global variable to resultDescription \"The requested operation was successfully.\" \r",
									"var resultDescriptionTheRequestedOperationWasSuccessfully = pm.globals.get(\"resultDescriptionTheRequestedOperationWasSuccessfully\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- urlRouteList --------------//\r",
									"//set variable to urlRouteList JSON.parse\r",
									"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
									"//---------------- set url Create --------------//\r",
									"//set global variable to url \"/api/v1/auth/signin\"\r",
									"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
									"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
									"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"pm.globals.set(\"urlThingCreateThing\", urlRouteList.Thing.urlThingCreateThing);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"pm.globals.set(\"urlThingCreateThingStateInfo\", urlRouteList.Thing.urlThingCreateThingStateInfo);\r",
									"//set global variable to url \"/api/register/sim/v1\"\r",
									"pm.globals.set(\"urlAsgardHTTPeSimRegister\", urlRouteList.AsgardHTTPeSim.urlAsgardHTTPeSimRegister);\r",
									"//set global variable to url \"/api/config/sim/v1?Sensor\"\r",
									"pm.globals.set(\"urlAsgardHTTPeSimConfig\", urlRouteList.AsgardHTTPeSim.urlAsgardHTTPeSimConfig);\r",
									"//set global variable to url \"/ConfigGroup/CreateConfigGroup\"\r",
									"pm.globals.set(\"urlConfigGroupCreateConfigGroup\", urlRouteList.ConfigGroup.urlConfigGroupCreateConfigGroup);\r",
									"//---------------- get url Create --------------//\r",
									"//get global variable to url \"/api/v1/auth/signin\"\r",
									"var urlSignin = pm.globals.get(\"urlSignin\");\r",
									"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
									"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"var urlThingCreateThing = pm.globals.get(\"urlThingCreateThing\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"var urlThingCreateThingStateInfo = pm.globals.get(\"urlThingCreateThingStateInfo\");\r",
									"//get global variable to url \"/api/v1/Group/CreateGroup\"\r",
									"var urlGroupCreateGroup = pm.globals.get(\"urlGroupCreateGroup\");\r",
									"//get global variable to url \"/api/v1/Control/Thing\"\r",
									"var urlControlThing = pm.globals.get(\"urlControlThing\");\r",
									"//get global variable to url \"/api/register/sim/v1\"\r",
									"var urlAsgardHTTPeSimRegister = pm.globals.get(\"urlAsgardHTTPeSimRegister\");\r",
									"//get global variable to url \"/api/config/sim/v1?Sensor\"\r",
									"var urlAsgardHTTPeSimConfig = pm.globals.get(\"urlAsgardHTTPeSimConfig\");\r",
									"//get global variable to url \"/ConfigGroup/CreateConfigGroup\"\r",
									"var urlConfigGroupCreateConfigGroup = pm.globals.get(\"urlConfigGroupCreateConfigGroup\");\r",
									"//---------------- set url Remove --------------//\r",
									"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
									"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"pm.globals.set(\"urlThingRemoveThing\", urlRouteList.Thing.urlThingRemoveThing);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"pm.globals.set(\"urlThingRemoveThingStateInfo\", urlRouteList.Thing.urlThingRemoveThingStateInfo);\r",
									"//set global variable to url \"/ConfigGroup/RemoveConfigGroup\"\r",
									"pm.globals.set(\"urlConfigGroupRemoveConfigGroup\", urlRouteList.ConfigGroup.urlConfigGroupRemoveConfigGroup);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Signin_ --------------//\r",
									"//get global variable to x_ais_OrderRef \"Signin_\"\r",
									"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"var x_ais_OrderRef_CreateThing = pm.globals.get(\"x_ais_OrderRef_CreateThing\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"var x_ais_OrderDesc_CreateThing = pm.globals.get(\"x_ais_OrderDesc_CreateThing\");\r",
									"//get global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"var x_ais_OrderRef_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderRef_CreateThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"var x_ais_OrderDesc_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_CreateThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals AsgardHTTP --------------//\r",
									"//get global variable to x_ais_OrderRef \"RegisHTTP_\"\r",
									"var x_ais_OrderRef_RegisHTTP = pm.globals.get(\"x_ais_OrderRef_RegisHTTP\");\r",
									"//get global variable to x_ais_OrderDesc \"Register Thing in MG\"\r",
									"var x_ais_OrderDesc_RegisHTTP = pm.globals.get(\"x_ais_OrderDesc_RegisHTTP\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals ConfigGroup --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateConfigGroup_\"\r",
									"const x_ais_OrderRef_CreateConfigGroup = pm.globals.get(\"x_ais_OrderRef_CreateConfigGroup\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateConfigGroup\"\r",
									"const x_ais_OrderDesc_CreateConfigGroup = pm.globals.get(\"x_ais_OrderDesc_CreateConfigGroup\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get url Remove --------------//\r",
									"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
									"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
									"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// Signin get token\r",
									"Signin = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSignin = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_Signin + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_UserAuthentication,\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestSignin = {\r",
									"            mode: 'raw',\r",
									"            raw:\r",
									"                JSON.stringify({\r",
									"                    username: Username,\r",
									"                    password: Password\r",
									"                })\r",
									"        };\r",
									"\r",
									"        let optionsSignin = {\r",
									"            url: url + provisioningapis + urlSignin,\r",
									"            method: 'POST',\r",
									"            header: headersOptSignin,\r",
									"            body: httpRequestSignin\r",
									"        };\r",
									"        // console.log('request Signin');\r",
									"        let response = await reqPromise(optionsSignin);\r",
									"        let jsonDataSignin = await response.json();\r",
									"\r",
									"        // setAccessToken\r",
									"        await pm.environment.set(\"AccessToken\", jsonDataSignin.AccessToken);\r",
									"\r",
									"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('Signin : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // SignInProcess is Success\r",
									"        pm.test('Signin : OperationStatus Description is ' + '\"' + resultDescriptionSuccessSignIn + '\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
									"        });\r",
									"\r",
									"        //set random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //set PartnerName\r",
									"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
									"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
									"        //set MerchantContact\r",
									"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
									"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
									"        // set CPID\r",
									"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
									"        pm.environment.set(\"CPID\", CPIDValue)\r",
									"\r",
									"        //ConfigGroupName\r",
									"        let ConfigGroupNameValue = fieldDataValue.ConfigGroup.ConfigGroupNameValue; // \"Sensor_TestThingGroupName\"\r",
									"        pm.environment.set(\"ConfigGroupName\", ConfigGroupNameValue +pm.environment.get(\"random_number\"))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreatePartner\r",
									"CreatePartner = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreatePartner = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreatePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreatePartner,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreatePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
									"                \"PartnerType\": [\r",
									"                    \"Supplier\",\r",
									"                    \"Customer\"\r",
									"                ],\r",
									"                \"PartnerDetail\": {\r",
									"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
									"                    \"CPID\": pm.environment.get(\"CPID\")\r",
									"                },\r",
									"                \"Property\": {\r",
									"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreatePartner = {\r",
									"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreatePartner,\r",
									"            body: httpRequestCreatePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsCreatePartner);\r",
									"        let jsonDataCreatePartner = await response.json();\r",
									"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
									"\r",
									"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreatePartner : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreatePartner is Success\r",
									"        pm.test('CreatePartner : OperationStatus Description is ' + '\"' + resultDescriptionCreatePartner + '\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
									"        });\r",
									"\r",
									"        //GetResponse_PartnerId\r",
									"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
									"\r",
									"        //Accountname\r",
									"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
									"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateAccount\r",
									"CreateAccount = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateAccount = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateAccount,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreateAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateAccount = {\r",
									"            url: url + provisioningapis + urlAccountCreateAccount,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateAccount,\r",
									"            body: httpRequestCreateAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateAccount');\r",
									"        let response = await reqPromise(optionsCreateAccount);\r",
									"        let jsonDataCreateAccount = await response.json();\r",
									"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
									"\r",
									"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateAccount : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateAccount is Success\r",
									"        pm.test('CreateAccount : OperationStatus Description is ' + '\"' + resultDescriptionCreateAccount + '\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
									"        });\r",
									"        // GetResponse_AccountName\r",
									"        pm.environment.set(\"GetResponse_AccountName\", jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
									"        // GetResponse_AccountId\r",
									"        pm.environment.set(\"GetResponse_AccountId\", jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
									"        // random_IM\r",
									"        pm.environment.set(\"random_IM\", _.random(10000000, 99999999) + \" \" + _.random(1000000, 9999999))\r",
									"        // random_ICCID\r",
									"        pm.environment.set(\"random_ICCID\", _.random(1000000, 9999999) + \" \" + _.random(100000, 999999))\r",
									"        // random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //ThingName\r",
									"        let thingNameValue = fieldDataValue.Thing.ThingNameValue; // \"Sensor_TestThingName\"\r",
									"        pm.environment.set(\"ThingName\", thingNameValue + pm.environment.get(\"random_number\"))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThing\r",
									"CreateThing = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThing = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateThing + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateThing,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey': pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreateThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingName\": pm.environment.get(\"ThingName\"),\r",
									"                \"IMEI\": pm.environment.get(\"random_IM\"),\r",
									"                \"IMSI\": pm.environment.get(\"random_IM\"),\r",
									"                \"ICCID\": pm.environment.get(\"random_ICCID\"),\r",
									"                \"RouteUrl\": fieldDataValue.Thing.RouteUrlValue , //[\"http://10.12.3.4:2019/api/information/AddInformation\"]\r",
									"                \"RouteInfo\": {\r",
									"                    \"MIMO_ID\": fieldDataValue.Thing.RouteInfoMIMOIDValue , //\"606edada\"\r",
									"                    \"MIMO_SerialNo\": fieldDataValue.Thing.RouteInfoMIMOSerialNoValue //5466758878\r",
									"                },\r",
									"                \"RouteFlag\": {\r",
									"                    \"ThingName\": fieldDataValue.Thing.RouteFlagThingNameValue , //true\r",
									"                    \"ThingToken\": fieldDataValue.Thing.RouteFlagThingTokenValue, //true\r",
									"                    \"IMEI\": fieldDataValue.Thing.RouteFlagIMEIValue, //true\r",
									"                    \"ICCID\": fieldDataValue.Thing.RouteFlagICCIDValue, //true\r",
									"                    \"RouteInfo\": fieldDataValue.Thing.RouteFlagRouteInfoValue //true\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateThing = {\r",
									"            url: url + provisioningapis + urlThingCreateThing,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThing,\r",
									"            body: httpRequestCreateThing\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThing');\r",
									"        let response = await reqPromise(optionsCreateThing);\r",
									"        let jsonDataCreateThing = await response.json();\r",
									"        // console.log('jsonDataCreateThing',jsonDataCreateThing)\r",
									"\r",
									"        let operationStatusCreateThing = await jsonDataCreateThing.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateThing : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateThing : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateThing is Success\r",
									"        pm.test('CreateThing : OperationStatus Description is ' + '\"' + resultDescriptionCreateThing + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Description', resultDescriptionCreateThing);\r",
									"        });\r",
									"\r",
									"        pm.environment.set(\"GetResponse_ThingID\", jsonDataCreateThing.ThingInfo.ThingId)\r",
									"        pm.environment.set(\"GetResponse_IMSI\", jsonDataCreateThing.ThingInfo.IMSI)\r",
									"        \r",
									"        let keys = pm.environment.get(\"GetResponse_IMSI\") + \":\" + pm.environment.get(\"IpAddress\");\r",
									"        // console.log(\"keys\", keys);\r",
									"        let encodedKeys = CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(keys));\r",
									"        pm.environment.set(\"encodedKeys_Authorization_Register\", encodedKeys);\r",
									"\r",
									"        //Get Random Sensor \r",
									"        pm.environment.set(\"random_Sensor\", _.random(100, 999))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThingStateInfo\r",
									"CreateThingStateInfo = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThingStateInfo = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateThingStateInfo,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey': pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        // {\"AA\" : pm.environment.get(\"random_Sensor\")}\r",
									"        let sensorValue = {};\r",
									"        sensorValue[fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP] = pm.environment.get(\"random_Sensor\");\r",
									"        // console.log('sensorValue',sensorValue);\r",
									"        \r",
									"        let httpRequestCreateThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": [\r",
									"                    pm.environment.get(\"GetResponse_ThingID\")\r",
									"                ],\r",
									"                \"Type\": fieldDataValue.CreateThingStateInfo.Type_Report,\r",
									"                \"Sensor\": sensorValue\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingCreateThingStateInfo,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThingStateInfo,\r",
									"            body: httpRequestCreateThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThingStateInfo');\r",
									"        let response = await reqPromise(optionsCreateThingStateInfo);\r",
									"        let jsonDataCreateThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataCreateThingStateInfo',jsonDataCreateThingStateInfo)\r",
									"\r",
									"        let operationStatusCreateThingStateInfo = await jsonDataCreateThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"CreateThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //CreateThingStateInfo is Success\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Description is ' + '\"' + resultDescriptionCreateThingStateInfo + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Description', resultDescriptionCreateThingStateInfo);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateConfigGroup\r",
									"CreateConfigGroup = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateConfigGroup = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateConfigGroup + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateConfigGroup,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\")\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreateConfigGroup = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ConfigName\":  pm.environment.get(\"ConfigGroupName\"),\r",
									"                \"ThingId\": [pm.environment.get(\"GetResponse_ThingID\")],\r",
									"                \"ConfigInfo\": {\r",
									"                    \"RefreshTime\": fieldDataValue.ConfigGroup.RefreshTime , //\"On\"\r",
									"                    \"Max\": fieldDataValue.ConfigGroup.Max //\"99\"\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateConfigGroup = {\r",
									"            url: url + provisioningapis + urlConfigGroupCreateConfigGroup,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateConfigGroup,\r",
									"            body: httpRequestCreateConfigGroup\r",
									"        };\r",
									"\r",
									"        // console.log('response CreateConfigGroup');\r",
									"        let response = await reqPromise(optionsCreateConfigGroup);\r",
									"        let jsonDataCreateConfigGroup = await response.json();\r",
									"        // console.log('jsonDataCreateConfigGroup',jsonDataCreateConfigGroup)\r",
									"    \r",
									"        let operationStatusCreateConfigGroup = await jsonDataCreateConfigGroup.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateConfigGroup : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateConfigGroup : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateConfigGroup).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateConfigGroup is Success\r",
									"        pm.test('CreateConfigGroup : OperationStatus description is '+'\"'+ resultDescriptionCreateConfigGroup+'\"', function () {\r",
									"            pm.expect(operationStatusCreateConfigGroup).to.have.property('Description', resultDescriptionCreateConfigGroup);\r",
									"        });\r",
									"\r",
									"        pm.environment.set(\"GetResponse_ConfigGroupId\",jsonDataCreateConfigGroup.ConfigGroupInfo.ConfigGroupId)\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// AsgardHTTPeSimRegister\r",
									"AsgardHTTPeSimRegister = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptAsgardHTTPeSimRegister = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_RegisHTTP + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_RegisHTTP,\r",
									"            'Authorization': Basic + ' ' + pm.environment.get(\"encodedKeys_Authorization_Register\")\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestAsgardHTTPeSimRegister = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({})\r",
									"        };\r",
									"\r",
									"        let optionsAsgardHTTPeSimRegister = {\r",
									"            url: url + httpapis + urlAsgardHTTPeSimRegister,\r",
									"            method: 'POST',\r",
									"            header: headersOptAsgardHTTPeSimRegister,\r",
									"            body: httpRequestAsgardHTTPeSimRegister\r",
									"        };\r",
									"\r",
									"        // console.log('request AsgardHTTPEsimRegister');\r",
									"        let response = await reqPromise(optionsAsgardHTTPeSimRegister);\r",
									"        let jsonDataAsgardHTTPeSimRegister = await response.json();\r",
									"        // console.log('jsonDataCreateThingStateInfo',jsonDataAsgardHTTPeSimRegister)\r",
									"        let operationStatusAsgardHTTPeSimRegister = await jsonDataAsgardHTTPeSimRegister.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"Asgard HTTP(eSim) Register : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('Asgard HTTP(eSim) Register : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusAsgardHTTPeSimRegister).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"\r",
									"        // The requested operation was successfully.\r",
									"        pm.test('Asgard HTTP(eSim) Register : OperationStatus DeveloperMessage is ' + '\"' + resultDescriptionTheRequestedOperationWasSuccessfully + '\"', function () {\r",
									"            pm.expect(operationStatusAsgardHTTPeSimRegister).to.have.property('DeveloperMessage', resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"        });\r",
									"\r",
									"        await pm.environment.set(\"GetResponse_ThingToken\", jsonDataAsgardHTTPeSimRegister.ThingToken)\r",
									"        let keys2 = await pm.environment.get(\"GetResponse_ThingToken\")+ fieldDataValue.AsgardHTTP.Value_AsgardHTTPeSim_Config_TST_F2_0_2_002_Error + \":\" + pm.environment.get(\"IpAddress\");        \r",
									"        let encodedKeys2 = await CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(keys2));\r",
									"        pm.environment.set(\"encodedKeys_Authorization_Config\", encodedKeys2)\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveAccount\r",
									" RemoveAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemoveAccount = {\r",
									"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveAccount,\r",
									"            body: httpRequestRemoveAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveAccount');\r",
									"        let response = await reqPromise(optionsRemoveAccount);\r",
									"        let jsonDataRemoveAccount = await response.json();\r",
									"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
									"    \r",
									"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveAccount is Success\r",
									"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"Signin();\r",
									"setTimeout(async function(){await CreatePartner();}, 3000); \r",
									"setTimeout(async function(){await CreateAccount();}, 6000); \r",
									"setTimeout(async function(){await CreateThing();}, 8000); \r",
									"setTimeout(async function(){await CreateThingStateInfo();}, 9000); \r",
									"setTimeout(async function(){await CreateConfigGroup();}, 10000); \r",
									"setTimeout(async function(){await AsgardHTTPeSimRegister();}, 20000); \r",
									"setTimeout(async function(){}, 30000); //for wait value encodedKeys_Authorization_Config\r",
									"setTimeout(function(){RemoveAccount();}, 40000); "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-ais-UserName",
								"type": "text",
								"value": "{{x_ais_UserName_AisPartner}}"
							},
							{
								"key": "x-ais-OrderRef",
								"value": "{{x_ais_OrderRef_ConfigHTTP_fail}}{{current_timestamp}}"
							},
							{
								"key": "x-ais-OrderDesc",
								"type": "text",
								"value": "{{x_ais_OrderDesc_ConfigHTTP}}"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{Basic}} {{encodedKeys_Authorization_Config}}"
							}
						],
						"url": {
							"raw": "{{url}}{{httpapis}}/api/config/sim/v1?Sensor=RefreshTime",
							"host": [
								"{{url}}{{httpapis}}"
							],
							"path": [
								"api",
								"config",
								"sim",
								"v1"
							],
							"query": [
								{
									"key": "Sensor",
									"value": "RefreshTime"
								}
							]
						},
						"description": "Type:Desire"
					},
					"response": []
				},
				{
					"name": "AsgardHTTPeSimConfig_TST_F2_0_2_007_Error_AccountExpired",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var Basic = pm.environment.get(\"Basic\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to xAisOrderRef \"RemoveThing_\"\r",
									"var x_ais_OrderRef_RemoveThing = pm.globals.get(\"x_ais_OrderRef_RemoveThing\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"var x_ais_OrderDesc_RemoveThing = pm.globals.get(\"x_ais_OrderDesc_RemoveThing\");\r",
									"//get global variable to xAisOrderRef \"RemoveThingStateInfo_\"\r",
									"var x_ais_OrderRef_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderRef_RemoveThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThingStateInfo\"\r",
									"var x_ais_OrderDesc_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_RemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals ConfigGroup --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveConfigGroup_\"\r",
									"const x_ais_OrderRef_RemoveConfigGroup = pm.globals.get(\"x_ais_OrderRef_RemoveConfigGroup\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveConfigGroup\"\r",
									"const x_ais_OrderDesc_RemoveConfigGroup = pm.globals.get(\"x_ais_OrderDesc_RemoveConfigGroup\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals AsgardHTTP --------------//\r",
									"//get global variable to x_ais_OrderRef \"ConfigHTTP_\"\r",
									"var x_ais_OrderRef_ConfigHTTP = pm.globals.get(\"x_ais_OrderRef_ConfigHTTP\");\r",
									"//get global variable to x_ais_OrderRef \"ConfigHTTPfail_\"\r",
									"var x_ais_OrderRef_ConfigHTTP_fail = pm.globals.get(\"x_ais_OrderRef_ConfigHTTP_fail\");\r",
									"//get global variable to x_ais_OrderDesc \"Get Config from MG\"\r",
									"var x_ais_OrderDesc_ConfigHTTP = pm.globals.get(\"x_ais_OrderDesc_ConfigHTTP\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get url Remove --------------//\r",
									"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
									"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"var urlThingRemoveThing = pm.globals.get(\"urlThingRemoveThing\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"var urlThingRemoveThingStateInfo = pm.globals.get(\"urlThingRemoveThingStateInfo\");\r",
									"//get global variable to url \"/ConfigGroup/RemoveConfigGroup\"\r",
									"var urlConfigGroupRemoveConfigGroup = pm.globals.get(\"urlConfigGroupRemoveConfigGroup\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"RemovePartner is Success\"\r",
									"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
									"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
									"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
									"//get global variable to resultDescription \"RemoveThing is Success\"\r",
									"var resultDescriptionRemoveThing = pm.globals.get(\"resultDescriptionRemoveThing\");\r",
									"//get global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"var resultDescriptionRemoveThingStateInfo = pm.globals.get(\"resultDescriptionRemoveThingStateInfo\");\r",
									"//get global variable to resultDescription \"RemoveConfigGroup is Success\"\r",
									"var resultDescriptionRemoveConfigGroup = pm.globals.get(\"resultDescriptionRemoveConfigGroup\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 403\r",
									"var statusCodeForbidden = pm.globals.get(\"statusCodeForbidden\");\r",
									"//get global variable to resultCode \"40305\"\r",
									"var resultCodeTheOperationHasAlreadyExpired = pm.globals.get(\"resultCodeTheOperationHasAlreadyExpired\");\r",
									"//get global variable to resultDescription \"The operation has already expired.\"\r",
									"var resultDescriptionTheOperationHasAlreadyExpired = pm.globals.get(\"resultDescriptionTheOperationHasAlreadyExpired\");\r",
									"//------------------------------------------------------------//\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Asgard HTTP(eSim) Config : Status code is \" + statusCodeForbidden, function () {\r",
									"    pm.response.to.have.status(statusCodeForbidden);\r",
									"});\r",
									"\r",
									"pm.test('Asgard HTTP(eSim) Config : operationStatus code is '+'\"'+ resultCodeTheOperationHasAlreadyExpired +'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeTheOperationHasAlreadyExpired);\r",
									"});\r",
									"\r",
									"pm.test('Asgard HTTP(eSim) Config : operationStatus DeveloperMessage is '+'\"'+ resultDescriptionTheOperationHasAlreadyExpired+'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheOperationHasAlreadyExpired);\r",
									"});\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// RemovePartner\r",
									" RemovePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemovePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemovePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemovePartner = {\r",
									"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemovePartner,\r",
									"            body: httpRequestRemovePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request RemovePartner');\r",
									"        let response = await reqPromise(optionsRemovePartner);\r",
									"        let jsonDataRemovePartner = await response.json();\r",
									"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
									"    \r",
									"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemovePartner is Success\r",
									"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveAccount\r",
									" RemoveAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemoveAccount = {\r",
									"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveAccount,\r",
									"            body: httpRequestRemoveAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveAccount');\r",
									"        let response = await reqPromise(optionsRemoveAccount);\r",
									"        let jsonDataRemoveAccount = await response.json();\r",
									"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
									"    \r",
									"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveAccount is Success\r",
									"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThing\r",
									" RemoveThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThing = {\r",
									"            url: url + provisioningapis + urlThingRemoveThing,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThing,\r",
									"            body: httpRequestRemoveThing\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveThing');\r",
									"        let response = await reqPromise(optionsRemoveThing);\r",
									"        let jsonDataRemoveThing = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThing)\r",
									"    \r",
									"        let operationStatusRemoveThing = await jsonDataRemoveThing.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThing : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThing : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThing is Success\r",
									"        pm.test('RemoveThing : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThing+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Description', resultDescriptionRemoveThing);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThingStateInfo\r",
									" RemoveThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"            \r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\"),\r",
									"                \"stateType\": fieldDataValue.CreateThingStateInfo.Type_Report, //Report\r",
									"                \"stateKey\": fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP //AA\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingRemoveThingStateInfo,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThingStateInfo,\r",
									"            body: httpRequestRemoveThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('response RemoveThingStateInfo');\r",
									"        let response = await reqPromise(optionsRemoveThingStateInfo);\r",
									"        let jsonDataRemoveThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThingStateInfo)\r",
									"    \r",
									"        let operationStatusRemoveThingStateInfo = await jsonDataRemoveThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThingStateInfo is Success\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThingStateInfo+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Description', resultDescriptionRemoveThingStateInfo);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveConfigGroup\r",
									" RemoveConfigGroup = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveConfigGroup = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_RemoveConfigGroup + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_RemoveConfigGroup,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey': pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveConfigGroup = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ConfigGroupId\": pm.environment.get(\"GetResponse_ConfigGroupId\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveConfigGroup = {\r",
									"            url: url + provisioningapis + urlConfigGroupRemoveConfigGroup,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveConfigGroup,\r",
									"            body: httpRequestRemoveConfigGroup\r",
									"        };\r",
									"\r",
									"        // console.log('response RemoveConfigGroup');\r",
									"        let response = await reqPromise(optionsRemoveConfigGroup);\r",
									"        let jsonDataRemoveConfigGroup = await response.json();\r",
									"        // console.log('jsonDataRemoveConfigGroup',jsonDataRemoveConfigGroup)\r",
									"    \r",
									"        let operationStatusRemoveConfigGroup = await jsonDataRemoveConfigGroup.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveConfigGroup : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveConfigGroup : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveConfigGroup).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveConfigGroup is Success\r",
									"        pm.test('RemoveConfigGroup : OperationStatus Description is '+'\"'+ resultDescriptionRemoveConfigGroup+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveConfigGroup).to.have.property('Description', resultDescriptionRemoveConfigGroup);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"//---------------- LogDefaultValue --------------//\r",
									"//set variable to LogDefaultValue JSON.parse\r",
									"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
									"// console.log('LogDefaultValue',LogDefaultValue);\r",
									"//---------------- set globals Other --------------//\r",
									"\r",
									"var SearchLog = LogDefaultValue.SearchLog;\r",
									"// console.log('SearchLog',SearchLog);\r",
									"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
									"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
									"var kbn_version = SearchLog.header.kbn_version;\r",
									"var authorization = SearchLog.header.Authorization;\r",
									"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
									"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
									"var namespace = LogDefaultValue.Other.namespace;\r",
									"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
									"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
									"var header_x_ais_username = LogDefaultValue.Other.header_x_ais_username;\r",
									"var methodGet = LogDefaultValue.Other.methodGet;\r",
									"\r",
									"// Detail\r",
									"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
									"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
									"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
									"\r",
									"// Summary\r",
									"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
									"var identitySummary = \"\";\r",
									"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
									"\r",
									"// Asgard.Http.APIs\r",
									"var applicationName = LogDefaultValue.AsgardHTTP.applicationName;\r",
									"var cmdName = LogDefaultValue.AsgardHTTP.cmdNameConfig;\r",
									"var endPointNameRabbitMQ = LogDefaultValue.AsgardHTTP.endPointNameRabbitMQ;\r",
									"var containerId = LogDefaultValue.AsgardHTTP.containerId;\r",
									"var requestObjectUrlStaging = LogDefaultValue.AsgardHTTP.requestObjectUrlConfigMgStaging;\r",
									"var urlConfig  = LogDefaultValue.AsgardHTTP.urlConfigError;\r",
									"\r",
									"// Check CDR (Summary Log) and EDR (Detail Log)\r",
									"SearchLogFindTid = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSearchLogFindTid = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = x_ais_OrderRef_ConfigHTTP_fail + current_timestamp;\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestSearchLogFindTid = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"\r",
									"        let optionsSearchLogFindTid = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptSearchLogFindTid,\r",
									"            body: httpRequestSearchLogFindTid\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsSearchLogFindTid);\r",
									"        let jsonDataSearchLogFindTid = await response.json();\r",
									"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
									"        // console.log('hits',hits)\r",
									"  \r",
									"        // find tid\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            // let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"        \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            if(applicationNameValue == applicationName){\r",
									"                let tid = hits[i]._source.cauldron.tid;\r",
									"                pm.environment.set(\"tid\", tid);\r",
									"                break;\r",
									"           }\r",
									"        }\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"CheckLog = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCheckLog = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = pm.environment.get(\"tid\");\r",
									"\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestCheckLog = {\r",
									"            mode: 'raw',\r",
									"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"        let optionsCheckLog = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptCheckLog,\r",
									"            body: httpRequestCheckLog\r",
									"        }; \r",
									"        let response = await reqPromise(optionsCheckLog);\r",
									"        let jsonDataCheckLog = await response.json();\r",
									"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
									"        \r",
									"        // //200\r",
									"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });     \r",
									"        \r",
									"        let hits = jsonDataCheckLog.hits.hits\r",
									"        console.log('hits',hits)\r",
									"  \r",
									"        // find logType\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            //  let logType = hits[i]._source.cauldron.logType\r",
									"            let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"           \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            \r",
									"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
									"            // console.log('resultDataLog',resultDataLog)\r",
									"\r",
									"            let tidControl = x_ais_OrderRef_ConfigHTTP_fail  + current_timestamp;\r",
									"            // console.log(tidControl);\r",
									"            if(applicationNameValue == applicationName){\r",
									"                 \r",
									"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and Asgard.Http.APIs\r",
									"                    pm.test(\"Check Summary Log : Asgard_HTTP(eSim) Config\" , function () {\r",
									"                        console.log(\"======== Check Summary Log ( Expected = Actual) [Asgard_HTTP(eSim) Config] ==================\");\r",
									"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
									"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
									"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeTheOperationHasAlreadyExpired);\r",
									"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionTheOperationHasAlreadyExpired);\r",
									"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
									"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"identity : \" + JSON.stringify(resultDataLog.identity) + \" = \" + JSON.stringify(identitySummary));\r",
									"                        // console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
									"\r",
									"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
									"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
									"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeTheOperationHasAlreadyExpired); \r",
									"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionTheOperationHasAlreadyExpired); \r",
									"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
									"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
									"                        // pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
									"\r",
									"                        // check custom\r",
									"                        // \\\"custom\\\":{ \\\"endPointSummary\\\":[ { \\\"no\\\":\\\"1\\\", \\\"endPointName\\\":\\\"db.ThingsCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:Inquiry was Success\\\", \\\"processTime\\\":0.0005 }, { \\\"no\\\":\\\"2\\\", \\\"endPointName\\\":\\\"db.AccountsCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:Inquiry was Success\\\", \\\"processTime\\\":0.0003 } ] }\r",
									"\r",
									"                        let custom = resultDataLog.custom.endPointSummary;\r",
									"                        let countCustom = custom.length;\r",
									"                       \r",
									"                        // [\"db.ThingsCollection\",\"db.AccountsCollection\"]\r",
									"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_Asgard_HTTP_eSim_Config_007;\r",
									"                        // [\"20000:Inquiry was Success\",\"20000:Inquiry was Success\"]\r",
									"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_Asgard_HTTP_eSim_Config_007;\r",
									"                        let countCustomStep = dataEndPointName.length;\r",
									"\r",
									"                        console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep);\r",
									"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
									"                        \r",
									"                        for(let i=0;i<countCustomStep;i++){\r",
									"                            let no = custom[i].no;\r",
									"                            let valueEndPointName = custom[i].endPointName;\r",
									"                            let valueResponseStatus = custom[i].responseStatus;\r",
									"                            // console.log(\"i\",i);\r",
									"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
									"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
									"\r",
									"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString());\r",
									"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i]);\r",
									"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i]);\r",
									"\r",
									"                            pm.expect(no).to.eql((i+1).toString()); \r",
									"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
									"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]); \r",
									"                        }\r",
									"                    }); \r",
									"                }\r",
									"\r",
									"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and Asgard.Http.APIs\r",
									"\r",
									"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
									"                    // console.log('endPointNameValue ',endPointNameValue)\r",
									"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [Asgard_HTTP(eSim) Config]\", function () {\r",
									"                        console.log(\"======== Check Detail Log ( Expected = Actual) [Asgard_HTTP(eSim) Config] ==================\");\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
									"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
									"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
									"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.custom1.activityLog.processTime + \" = \" + resultDataLog.custom1.activityLog.processTime);\r",
									"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
									"\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
									"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
									"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
									"\r",
									"                        let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
									"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
									"                        let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
									"                            // console.log('jsonParseResponseObject',jsonParseResponseObject); \r",
									"                        let url = urlConfig; \r",
									"                        let x_ais_orderref = x_ais_OrderRef_ConfigHTTP_fail + current_timestamp;\r",
									"                        let x_ais_orderdesc = x_ais_OrderDesc_ConfigHTTP;\r",
									"                        let x_ais_userName = x_ais_UserName_AisPartner;\r",
									"                        let authorization = Basic + ' ' + pm.environment.get(\"encodedKeys_Authorization_Config\");\r",
									"                        let SensorKey = fieldDataValue.CreateThingStateInfo.SensorKey;\r",
									"                        let sensor = pm.environment.get(\"random_Sensor\");\r",
									"                        let timestamp = pm.environment.get(\"timestamp\");\r",
									"\r",
									"                        if( endPointNameValue == undefined){\r",
									"                            // check requestObject\r",
									"                            // \"requestObject\":\"{\\\"url\\\":\\\"/api/config/sim/v1\\\",\\\"method\\\":\\\"GET\\\",\\\"headers\\\":{\\\"Cache-Control\\\":\\\"no-cache\\\",\\\"Content-Type\\\":\\\"application/json\\\",\\\"Accept\\\":\\\"*/*\\\",\\\"Accept-Encoding\\\":\\\"gzip,deflate,br\\\",\\\"Authorization\\\":\\\"Basic ZmYxMjEwZjgtNGFjYi00YjNjLTkwMTMtODc0YWM0ZGIxZGVieHg6MS4yLjMuNA==\\\",\\\"Host\\\":\\\"mg-staging.sandais.com\\\",\\\"User-Agent\\\":\\\"PostmanRuntime/7.26.8\\\",\\\"Content-Length\\\":\\\"0\\\",\\\"x-real-ip\\\":\\\"58.8.214.174\\\",\\\"x-forwarded-for\\\":\\\"58.8.214.174\\\",\\\"x-forwarded-proto\\\":\\\"https\\\",\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"ConfigHTTPfail_202102152002008\\\",\\\"x-ais-orderdesc\\\":\\\"Get Config from MG\\\",\\\"postman-token\\\":\\\"a99d5f91-ea7c-4695-b941-0dea110169a2\\\",\\\"x-request-id\\\":\\\"cc1ffc3a-c815-4299-ac4a-9250d7064fa8\\\",\\\"x-b3-traceid\\\":\\\"55b1fe4d9548fdbb017552c523e0afcd\\\",\\\"x-b3-spanid\\\":\\\"017552c523e0afcd\\\",\\\"x-b3-sampled\\\":\\\"0\\\",\\\"x-ais-SessionId\\\":\\\"1613397270624\\\"},\\\"queryString\\\":{\\\"Sensor\\\":\\\"RefreshTime\\\"},\\\"routeParamteters\\\":{}}\"\r",
									"\r",
									"                            // \\\"requestObject\\\":\\\"{ \\\\\\\"url\\\\\\\":\\\\\\\"/api/config/sim/v1\\\\\\\", \\\\\\\"method\\\\\\\":\\\\\\\"GET\\\\\\\", \\\\\\\"headers\\\\\\\":{ \\\\\\\"Cache-Control\\\\\\\":\\\\\\\"no-cache\\\\\\\", \\\\\\\"Content-Type\\\\\\\":\\\\\\\"application/json\\\\\\\", \\\\\\\"Accept\\\\\\\":\\\\\\\"*/*\\\\\\\", \\\\\\\"Accept-Encoding\\\\\\\":\\\\\\\"gzip, deflate, br\\\\\\\", \\\\\\\"Authorization\\\\\\\":\\\\\\\"Basic ZDM5ZmJjNDktNDZhMi00YmFkLWEwNGItNWJiZWU2OWFlODkxOjEuMi4zLjQ=\\\\\\\", \\\\\\\"Host\\\\\\\":\\\\\\\"mg-iot.sandais.com\\\\\\\", \\\\\\\"User-Agent\\\\\\\":\\\\\\\"PostmanRuntime/7.26.8\\\\\\\", \\\\\\\"Content-Length\\\\\\\":\\\\\\\"0\\\\\\\", \\\\\\\"x-real-ip\\\\\\\":\\\\\\\"182.232.183.255\\\\\\\", \\\\\\\"x-forwarded-for\\\\\\\":\\\\\\\"182.232.183.255, 10.233.65.1\\\\\\\", \\\\\\\"x-forwarded-proto\\\\\\\":\\\\\\\"http\\\\\\\", \\\\\\\"x-ais-username\\\\\\\":\\\\\\\"AisPartner\\\\\\\", \\\\\\\"x-ais-orderref\\\\\\\":\\\\\\\"ConfigHTTPfail_202105112105477\\\\\\\", \\\\\\\"x-ais-orderdesc\\\\\\\":\\\\\\\"Get Config from MG\\\\\\\", \\\\\\\"postman-token\\\\\\\":\\\\\\\"ea800fb3-f0c8-45af-8fbb-90ec79165018\\\\\\\", \\\\\\\"x-envoy-external-address\\\\\\\":\\\\\\\"10.233.65.1\\\\\\\", \\\\\\\"x-request-id\\\\\\\":\\\\\\\"54e4c475-7942-4386-8e48-37a9eefdefbf\\\\\\\", \\\\\\\"x-envoy-original-path\\\\\\\":\\\\\\\"/httpapis/api/config/sim/v1?Sensor=RefreshTime\\\\\\\", \\\\\\\"x-b3-traceid\\\\\\\":\\\\\\\"08dcc7db567c7dbaa6b45ec538a9e904\\\\\\\", \\\\\\\"x-b3-spanid\\\\\\\":\\\\\\\"03141322056d07f1\\\\\\\", \\\\\\\"x-b3-parentspanid\\\\\\\":\\\\\\\"a6b45ec538a9e904\\\\\\\", \\\\\\\"x-b3-sampled\\\\\\\":\\\\\\\"0\\\\\\\", \\\\\\\"x-ais-SessionId\\\\\\\":\\\\\\\"1620744904236\\\\\\\" }, \\\\\\\"queryString\\\\\\\":{ \\\\\\\"Sensor\\\\\\\":\\\\\\\"RefreshTime\\\\\\\" }, \\\\\\\"routeParamteters\\\\\\\":{ } }\\\"\r",
									"\r",
									"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
									"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodGet);\r",
									"                            console.log(\"headers.x_ais_userName : \" + jsonParseRequestObject.headers[header_x_ais_username] + \" = \" + x_ais_userName);\r",
									"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
									"                            console.log(\"headers.Authorization : \" + jsonParseRequestObject.headers.Authorization + \" = \" + authorization);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
									"                            pm.expect(jsonParseRequestObject.method).to.eql(methodGet);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_username]).to.eql(x_ais_userName);\r",
									"                            pm.expect(jsonParseRequestObject.headers.Authorization).to.eql(authorization);\r",
									"\r",
									"                            console.log(\"queryString.Sensor : \" + JSON.stringify(jsonParseRequestObject.queryString.Sensor) + \" = \" + JSON.stringify(\"RefreshTime\"));\r",
									"                            console.log(\"routeParamteters : \" + JSON.stringify(jsonParseRequestObject.routeParamteters) + \" = \" + JSON.stringify({}));\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.queryString.Sensor).to.eql(\"RefreshTime\"); \r",
									"                            pm.expect(jsonParseRequestObject.routeParamteters).to.eql({}); \r",
									"\r",
									"                            // check responseObject\r",
									"                            // \"responseObject\":\"{\\\"OperationStatus\\\":{\\\"Code\\\":\\\"40305\\\",\\\"DeveloperMessage\\\":\\\"The operation has already expired.\\\"}}\"\r",
									"\r",
									"                            console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeTheOperationHasAlreadyExpired);\r",
									"                            console.log(\"response.OperationStatus.DeveloperMessage : \" + jsonParseResponseObject.OperationStatus.DeveloperMessage + \" = \" + resultDescriptionTheOperationHasAlreadyExpired);\r",
									"\r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeTheOperationHasAlreadyExpired);  \r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheOperationHasAlreadyExpired);  \r",
									"                        }\r",
									"                    }); \r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"setTimeout(function(){SearchLogFindTid();}, 40000); \r",
									"setTimeout(function(){CheckLog();}, 60000); \r",
									"\r",
									"setTimeout(function(){RemoveConfigGroup();}, 70000); \r",
									"setTimeout(function(){RemoveThingStateInfo();}, 80000); \r",
									"setTimeout(function(){RemoveThing();}, 90000); \r",
									"setTimeout(function(){RemoveAccount();}, 100000); \r",
									"setTimeout(function(){RemovePartner();}, 110000); \r",
									"\r",
									"setTimeout(function(){\r",
									"pm.environment.unset(\"current_timestamp\");\r",
									"pm.environment.unset(\"AccessToken\");\r",
									"pm.environment.unset(\"random_number\");\r",
									"pm.environment.unset(\"PartnerName\");\r",
									"pm.environment.unset(\"MerchantContact\");\r",
									"pm.environment.unset(\"CPID\");\r",
									"pm.environment.unset(\"GetResponse_PartnerId\");\r",
									"pm.environment.unset(\"AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountId\");\r",
									"pm.environment.unset(\"random_IM\");\r",
									"pm.environment.unset(\"random_ICCID\");\r",
									"pm.environment.unset(\"ThingName\");\r",
									"pm.environment.unset(\"GetResponse_ThingID\");\r",
									"pm.environment.unset(\"GetResponse_IMSI\");\r",
									"pm.environment.unset(\"encodedKeys_Authorization_Register\");\r",
									"pm.environment.unset(\"encodedKeys_Authorization_Config\");\r",
									"pm.environment.unset(\"random_Sensor\");\r",
									"pm.environment.unset(\"GetResponse_ThingToken\");\r",
									"pm.environment.unset(\"tid\");\r",
									"pm.environment.unset(\"GetResponse_ConfigGroupId\");\r",
									"pm.environment.unset(\"ConfigGroupName\");\r",
									"}, 115000); \r",
									"setTimeout(async function(){}, 120000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var Username = pm.environment.get(\"Username\");\r",
									"var Password = pm.environment.get(\"Password\");\r",
									"\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"var httpapis = pm.environment.get(\"httpapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"//format YYYYMMDDHHMMSSS\r",
									"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
									"// console.log('currentTmestamp',currentTmestamp);\r",
									"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var Basic = pm.environment.get(\"Basic\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- statusCodeList --------------//\r",
									"//set variable to statusCodeList JSON.parse\r",
									"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
									"//set global variable to statusCode 200\r",
									"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
									"//set global variable to statusCode 201\r",
									"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
									"//set global variable to statusCode 403\r",
									"pm.globals.set(\"statusCodeForbidden\", statusCodeList.statusCodeForbidden);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultCodeList --------------//\r",
									"//set variable to resultCodeList JSON.parse\r",
									"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
									"//set global variable to resultCode \"20000\"\r",
									"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
									"//set global variable to resultCode \"20100\"\r",
									"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
									"//set global variable to resultCode \"40305\"\r",
									"pm.globals.set(\"resultCodeTheOperationHasAlreadyExpired\", resultCodeList.resultCodeTheOperationHasAlreadyExpired);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionSuccessList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
									"//set global variable to resultDescription \"SignInProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
									"//set global variable to resultDescription \"CreatePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
									"//set global variable to resultDescription \"CreateAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
									"//set global variable to resultDescription \"CreateThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThing\", resultDescriptionSuccessList.resultDescriptionCreateThing);\r",
									"//set global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThingStateInfo\", resultDescriptionSuccessList.resultDescriptionCreateThingStateInfo);\r",
									"//set global variable to resultDescription \"RemovePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
									"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
									"//set global variable to resultDescription \"RemoveThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThing\", resultDescriptionSuccessList.resultDescriptionRemoveThing);\r",
									"//set global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThingStateInfo\", resultDescriptionSuccessList.resultDescriptionRemoveThingStateInfo);\r",
									"//set global variable to resultDescription \"Register is Success\"\r",
									"pm.globals.set(\"resultDescriptionRegisterIsSuccess\", resultDescriptionSuccessList.resultDescriptionRegisterIsSuccess);\r",
									"//set global variable to resultDescription \"ConfigProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionConfigProcessIsSuccess\", resultDescriptionSuccessList.resultDescriptionConfigProcessIsSuccess);\r",
									"//set global variable to resultDescription \"CreateConfigGroup is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateConfigGroup\", resultDescriptionSuccessList.resultDescriptionCreateConfigGroup);\r",
									"//set global variable to resultDescription \"RemoveConfigGroup is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveConfigGroup\", resultDescriptionSuccessList.resultDescriptionRemoveConfigGroup);\r",
									"//set global variable to resultDescription \"The requested operation was successfully.\"\r",
									"pm.globals.set(\"resultDescriptionTheRequestedOperationWasSuccessfully\", resultDescriptionSuccessList.resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionErrorList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
									"//set global variable to resultDescription \"The operation has already expired.\"\r",
									"pm.globals.set(\"resultDescriptionTheOperationHasAlreadyExpired\", resultDescriptionErrorList.resultDescriptionTheOperationHasAlreadyExpired);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- HeaderList --------------//\r",
									"//set variable to HeaderList JSON.parse\r",
									"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
									"//---------------- set globals Other --------------//\r",
									"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
									"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
									"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
									"//set global variable to kbn-versio \"7.5.1\"\r",
									"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Signin_ --------------//\r",
									"//set global variable to x_ais_OrderRef \"Signin_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreatePartner --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
									"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
									"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
									"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreateAccount --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
									"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
									"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Thing --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThing\", HeaderList.Thing.x_ais_OrderRef_CreateThing);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThing\", HeaderList.Thing.x_ais_OrderDesc_CreateThing);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThing\", HeaderList.Thing.x_ais_OrderRef_RemoveThing);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThing\", HeaderList.Thing.x_ais_OrderDesc_RemoveThing);\r",
									"//set global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_RemoveThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_RemoveThingStateInfo);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals AsgardHTTP --------------//\r",
									"//set global variable to x_ais_OrderRef \"RegisHTTP_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RegisHTTP\", HeaderList.AsgardHTTP.x_ais_OrderRef_RegisHTTP);\r",
									"//set global variable to x_ais_OrderDesc \"Register Thing in MG\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RegisHTTP\", HeaderList.AsgardHTTP.x_ais_OrderDesc_RegisHTTP);\r",
									"//set global variable to x_ais_OrderRef \"ConfigHTTP_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ConfigHTTP\", HeaderList.AsgardHTTP.x_ais_OrderRef_ConfigHTTP);\r",
									"//set global variable to x_ais_OrderRef \"ConfigHTTPfail_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ConfigHTTP_fail\", HeaderList.AsgardHTTP.x_ais_OrderRef_ConfigHTTP_fail);\r",
									"//set global variable to x_ais_OrderDesc \"Get Config from MG\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_ConfigHTTP\", HeaderList.AsgardHTTP.x_ais_OrderDesc_ConfigHTTP);\r",
									"//set global variable to x_ais_OrderRef \"ReportHTTP_\"\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals ConfigGroup --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateConfigGroup_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateConfigGroup\", HeaderList.ConfigGroup.x_ais_OrderRef_CreateConfigGroup);\r",
									"//set global variable to x_ais_OrderDesc \"CreateConfigGroup\"\r",
									" pm.globals.set(\"x_ais_OrderDesc_CreateConfigGroup\", HeaderList.ConfigGroup.x_ais_OrderDesc_CreateConfigGroup);\r",
									"//set global variable to x_ais_OrderRef \"RemoveConfigGroup_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveConfigGroup\", HeaderList.ConfigGroup.x_ais_OrderRef_RemoveConfigGroup);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveConfigGroup\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveConfigGroup\", HeaderList.ConfigGroup.x_ais_OrderDesc_RemoveConfigGroup);\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"SignInProcess is Success\"\r",
									"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
									"//get global variable to resultDescription \"CreatePartner is Success\"\r",
									"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
									"//get global variable to resultDescription \"CreateAccount is Success\"\r",
									"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
									"//get global variable to resultDescription \"CreateThing is Success\"\r",
									"var resultDescriptionCreateThing = pm.globals.get(\"resultDescriptionCreateThing\");\r",
									"//get global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"var resultDescriptionCreateThingStateInfo = pm.globals.get(\"resultDescriptionCreateThingStateInfo\");\r",
									"//get global variable to resultDescription \"Register is Success\"\r",
									"var resultDescriptionRegisterIsSuccess = pm.globals.get(\"resultDescriptionRegisterIsSuccess\");\r",
									"//get global variable to resultDescription \"CreateConfigGroup is Success\"\r",
									"var resultDescriptionCreateConfigGroup = pm.globals.get(\"resultDescriptionCreateConfigGroup\");\r",
									"//get global variable to resultDescription \"The requested operation was successfully.\" \r",
									"var resultDescriptionTheRequestedOperationWasSuccessfully = pm.globals.get(\"resultDescriptionTheRequestedOperationWasSuccessfully\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- urlRouteList --------------//\r",
									"//set variable to urlRouteList JSON.parse\r",
									"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
									"//---------------- set url Create --------------//\r",
									"//set global variable to url \"/api/v1/auth/signin\"\r",
									"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
									"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
									"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"pm.globals.set(\"urlThingCreateThing\", urlRouteList.Thing.urlThingCreateThing);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"pm.globals.set(\"urlThingCreateThingStateInfo\", urlRouteList.Thing.urlThingCreateThingStateInfo);\r",
									"//set global variable to url \"/api/register/sim/v1\"\r",
									"pm.globals.set(\"urlAsgardHTTPeSimRegister\", urlRouteList.AsgardHTTPeSim.urlAsgardHTTPeSimRegister);\r",
									"//set global variable to url \"/api/config/sim/v1?Sensor\"\r",
									"pm.globals.set(\"urlAsgardHTTPeSimConfig\", urlRouteList.AsgardHTTPeSim.urlAsgardHTTPeSimConfig);\r",
									"//set global variable to url \"/ConfigGroup/CreateConfigGroup\"\r",
									"pm.globals.set(\"urlConfigGroupCreateConfigGroup\", urlRouteList.ConfigGroup.urlConfigGroupCreateConfigGroup);\r",
									"//---------------- get url Create --------------//\r",
									"//get global variable to url \"/api/v1/auth/signin\"\r",
									"var urlSignin = pm.globals.get(\"urlSignin\");\r",
									"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
									"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"var urlThingCreateThing = pm.globals.get(\"urlThingCreateThing\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"var urlThingCreateThingStateInfo = pm.globals.get(\"urlThingCreateThingStateInfo\");\r",
									"//get global variable to url \"/api/v1/Group/CreateGroup\"\r",
									"var urlGroupCreateGroup = pm.globals.get(\"urlGroupCreateGroup\");\r",
									"//get global variable to url \"/api/v1/Control/Thing\"\r",
									"var urlControlThing = pm.globals.get(\"urlControlThing\");\r",
									"//get global variable to url \"/api/register/sim/v1\"\r",
									"var urlAsgardHTTPeSimRegister = pm.globals.get(\"urlAsgardHTTPeSimRegister\");\r",
									"//get global variable to url \"/api/config/sim/v1?Sensor\"\r",
									"var urlAsgardHTTPeSimConfig = pm.globals.get(\"urlAsgardHTTPeSimConfig\");\r",
									"//get global variable to url \"/ConfigGroup/CreateConfigGroup\"\r",
									"var urlConfigGroupCreateConfigGroup = pm.globals.get(\"urlConfigGroupCreateConfigGroup\");\r",
									"//---------------- set url Remove --------------//\r",
									"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
									"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"pm.globals.set(\"urlThingRemoveThing\", urlRouteList.Thing.urlThingRemoveThing);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"pm.globals.set(\"urlThingRemoveThingStateInfo\", urlRouteList.Thing.urlThingRemoveThingStateInfo);\r",
									"//set global variable to url \"/ConfigGroup/RemoveConfigGroup\"\r",
									"pm.globals.set(\"urlConfigGroupRemoveConfigGroup\", urlRouteList.ConfigGroup.urlConfigGroupRemoveConfigGroup);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Signin_ --------------//\r",
									"//get global variable to x_ais_OrderRef \"Signin_\"\r",
									"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"var x_ais_OrderRef_CreateThing = pm.globals.get(\"x_ais_OrderRef_CreateThing\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"var x_ais_OrderDesc_CreateThing = pm.globals.get(\"x_ais_OrderDesc_CreateThing\");\r",
									"//get global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"var x_ais_OrderRef_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderRef_CreateThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"var x_ais_OrderDesc_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_CreateThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals AsgardHTTP --------------//\r",
									"//get global variable to x_ais_OrderRef \"RegisHTTP_\"\r",
									"var x_ais_OrderRef_RegisHTTP = pm.globals.get(\"x_ais_OrderRef_RegisHTTP\");\r",
									"//get global variable to x_ais_OrderDesc \"Register Thing in MG\"\r",
									"var x_ais_OrderDesc_RegisHTTP = pm.globals.get(\"x_ais_OrderDesc_RegisHTTP\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals ConfigGroup --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateConfigGroup_\"\r",
									"const x_ais_OrderRef_CreateConfigGroup = pm.globals.get(\"x_ais_OrderRef_CreateConfigGroup\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateConfigGroup\"\r",
									"const x_ais_OrderDesc_CreateConfigGroup = pm.globals.get(\"x_ais_OrderDesc_CreateConfigGroup\");\r",
									"//------------------------------------------------------------//\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// Signin get token\r",
									"Signin = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSignin = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_Signin + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_UserAuthentication,\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestSignin = {\r",
									"            mode: 'raw',\r",
									"            raw:\r",
									"                JSON.stringify({\r",
									"                    username: Username,\r",
									"                    password: Password\r",
									"                })\r",
									"        };\r",
									"\r",
									"        let optionsSignin = {\r",
									"            url: url + provisioningapis + urlSignin,\r",
									"            method: 'POST',\r",
									"            header: headersOptSignin,\r",
									"            body: httpRequestSignin\r",
									"        };\r",
									"        // console.log('request Signin');\r",
									"        let response = await reqPromise(optionsSignin);\r",
									"        let jsonDataSignin = await response.json();\r",
									"\r",
									"        // setAccessToken\r",
									"        await pm.environment.set(\"AccessToken\", jsonDataSignin.AccessToken);\r",
									"\r",
									"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('Signin : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // SignInProcess is Success\r",
									"        pm.test('Signin : OperationStatus Description is ' + '\"' + resultDescriptionSuccessSignIn + '\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
									"        });\r",
									"\r",
									"        //set random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //set PartnerName\r",
									"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
									"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
									"        //set MerchantContact\r",
									"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
									"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
									"        // set CPID\r",
									"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
									"        pm.environment.set(\"CPID\", CPIDValue)\r",
									"\r",
									"        //ConfigGroupName\r",
									"        let ConfigGroupNameValue = fieldDataValue.ConfigGroup.ConfigGroupNameValue; // \"Sensor_TestThingGroupName\"\r",
									"        pm.environment.set(\"ConfigGroupName\", ConfigGroupNameValue +pm.environment.get(\"random_number\"))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreatePartner\r",
									"CreatePartner = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreatePartner = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreatePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreatePartner,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreatePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
									"                \"PartnerType\": [\r",
									"                    \"Supplier\",\r",
									"                    \"Customer\"\r",
									"                ],\r",
									"                \"PartnerDetail\": {\r",
									"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
									"                    \"CPID\": pm.environment.get(\"CPID\")\r",
									"                },\r",
									"                \"Property\": {\r",
									"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreatePartner = {\r",
									"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreatePartner,\r",
									"            body: httpRequestCreatePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsCreatePartner);\r",
									"        let jsonDataCreatePartner = await response.json();\r",
									"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
									"\r",
									"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreatePartner : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreatePartner is Success\r",
									"        pm.test('CreatePartner : OperationStatus Description is ' + '\"' + resultDescriptionCreatePartner + '\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
									"        });\r",
									"\r",
									"        //GetResponse_PartnerId\r",
									"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
									"\r",
									"        //Accountname\r",
									"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
									"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateAccount\r",
									"CreateAccount = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateAccount = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateAccount,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreateAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateAccount = {\r",
									"            url: url + provisioningapis + urlAccountCreateAccount,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateAccount,\r",
									"            body: httpRequestCreateAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateAccount');\r",
									"        let response = await reqPromise(optionsCreateAccount);\r",
									"        let jsonDataCreateAccount = await response.json();\r",
									"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
									"\r",
									"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateAccount : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateAccount is Success\r",
									"        pm.test('CreateAccount : OperationStatus Description is ' + '\"' + resultDescriptionCreateAccount + '\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
									"        });\r",
									"        // GetResponse_AccountName\r",
									"        pm.environment.set(\"GetResponse_AccountName\", jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
									"        // GetResponse_AccountId\r",
									"        pm.environment.set(\"GetResponse_AccountId\", jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
									"        // random_IM\r",
									"        pm.environment.set(\"random_IM\", _.random(10000000, 99999999) + \" \" + _.random(1000000, 9999999))\r",
									"        // random_ICCID\r",
									"        pm.environment.set(\"random_ICCID\", _.random(1000000, 9999999) + \" \" + _.random(100000, 999999))\r",
									"        // random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //ThingName\r",
									"        let thingNameValue = fieldDataValue.Thing.ThingNameValue; // \"Sensor_TestThingName\"\r",
									"        pm.environment.set(\"ThingName\", thingNameValue + pm.environment.get(\"random_number\"))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThing\r",
									"CreateThing = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThing = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateThing + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateThing,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey': pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreateThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingName\": pm.environment.get(\"ThingName\"),\r",
									"                \"IMEI\": pm.environment.get(\"random_IM\"),\r",
									"                \"IMSI\": pm.environment.get(\"random_IM\"),\r",
									"                \"ICCID\": pm.environment.get(\"random_ICCID\"),\r",
									"                \"RouteUrl\": fieldDataValue.Thing.RouteUrlValue , //[\"http://10.12.3.4:2019/api/information/AddInformation\"]\r",
									"                \"RouteInfo\": {\r",
									"                    \"MIMO_ID\": fieldDataValue.Thing.RouteInfoMIMOIDValue , //\"606edada\"\r",
									"                    \"MIMO_SerialNo\": fieldDataValue.Thing.RouteInfoMIMOSerialNoValue //5466758878\r",
									"                },\r",
									"                \"RouteFlag\": {\r",
									"                    \"ThingName\": fieldDataValue.Thing.RouteFlagThingNameValue , //true\r",
									"                    \"ThingToken\": fieldDataValue.Thing.RouteFlagThingTokenValue, //true\r",
									"                    \"IMEI\": fieldDataValue.Thing.RouteFlagIMEIValue, //true\r",
									"                    \"ICCID\": fieldDataValue.Thing.RouteFlagICCIDValue, //true\r",
									"                    \"RouteInfo\": fieldDataValue.Thing.RouteFlagRouteInfoValue //true\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateThing = {\r",
									"            url: url + provisioningapis + urlThingCreateThing,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThing,\r",
									"            body: httpRequestCreateThing\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThing');\r",
									"        let response = await reqPromise(optionsCreateThing);\r",
									"        let jsonDataCreateThing = await response.json();\r",
									"        // console.log('jsonDataCreateThing',jsonDataCreateThing)\r",
									"\r",
									"        let operationStatusCreateThing = await jsonDataCreateThing.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateThing : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateThing : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateThing is Success\r",
									"        pm.test('CreateThing : OperationStatus Description is ' + '\"' + resultDescriptionCreateThing + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Description', resultDescriptionCreateThing);\r",
									"        });\r",
									"\r",
									"        pm.environment.set(\"GetResponse_ThingID\", jsonDataCreateThing.ThingInfo.ThingId)\r",
									"        pm.environment.set(\"GetResponse_IMSI\", jsonDataCreateThing.ThingInfo.IMSI)\r",
									"        \r",
									"        let keys = pm.environment.get(\"GetResponse_IMSI\") + \":\" + pm.environment.get(\"IpAddress\");\r",
									"        // console.log(\"keys\", keys);\r",
									"        let encodedKeys = CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(keys));\r",
									"        pm.environment.set(\"encodedKeys_Authorization_Register\", encodedKeys);\r",
									"\r",
									"        //Get Random Sensor \r",
									"        pm.environment.set(\"random_Sensor\", _.random(100, 999))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThingStateInfo\r",
									"CreateThingStateInfo = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThingStateInfo = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateThingStateInfo,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey': pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        // {\"AA\" : pm.environment.get(\"random_Sensor\")}\r",
									"        let sensorValue = {};\r",
									"        sensorValue[fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP] = pm.environment.get(\"random_Sensor\");\r",
									"        // console.log('sensorValue',sensorValue);\r",
									"        \r",
									"        let httpRequestCreateThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": [\r",
									"                    pm.environment.get(\"GetResponse_ThingID\")\r",
									"                ],\r",
									"                \"Type\": fieldDataValue.CreateThingStateInfo.Type_Report,\r",
									"                \"Sensor\": sensorValue\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingCreateThingStateInfo,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThingStateInfo,\r",
									"            body: httpRequestCreateThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThingStateInfo');\r",
									"        let response = await reqPromise(optionsCreateThingStateInfo);\r",
									"        let jsonDataCreateThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataCreateThingStateInfo',jsonDataCreateThingStateInfo)\r",
									"\r",
									"        let operationStatusCreateThingStateInfo = await jsonDataCreateThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"CreateThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //CreateThingStateInfo is Success\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Description is ' + '\"' + resultDescriptionCreateThingStateInfo + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Description', resultDescriptionCreateThingStateInfo);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateConfigGroup\r",
									"CreateConfigGroup = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateConfigGroup = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateConfigGroup + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateConfigGroup,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\")\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreateConfigGroup = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ConfigName\":  pm.environment.get(\"ConfigGroupName\"),\r",
									"                \"ThingId\": [pm.environment.get(\"GetResponse_ThingID\")],\r",
									"                \"ConfigInfo\": {\r",
									"                    \"RefreshTime\": fieldDataValue.ConfigGroup.RefreshTime , //\"On\"\r",
									"                    \"Max\": fieldDataValue.ConfigGroup.Max //\"99\"\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateConfigGroup = {\r",
									"            url: url + provisioningapis + urlConfigGroupCreateConfigGroup,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateConfigGroup,\r",
									"            body: httpRequestCreateConfigGroup\r",
									"        };\r",
									"\r",
									"        // console.log('response CreateConfigGroup');\r",
									"        let response = await reqPromise(optionsCreateConfigGroup);\r",
									"        let jsonDataCreateConfigGroup = await response.json();\r",
									"        // console.log('jsonDataCreateConfigGroup',jsonDataCreateConfigGroup)\r",
									"    \r",
									"        let operationStatusCreateConfigGroup = await jsonDataCreateConfigGroup.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateConfigGroup : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateConfigGroup : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateConfigGroup).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateConfigGroup is Success\r",
									"        pm.test('CreateConfigGroup : OperationStatus description is '+'\"'+ resultDescriptionCreateConfigGroup+'\"', function () {\r",
									"            pm.expect(operationStatusCreateConfigGroup).to.have.property('Description', resultDescriptionCreateConfigGroup);\r",
									"        });\r",
									"\r",
									"        pm.environment.set(\"GetResponse_ConfigGroupId\",jsonDataCreateConfigGroup.ConfigGroupInfo.ConfigGroupId)\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// AsgardHTTPeSimRegister\r",
									"AsgardHTTPeSimRegister = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptAsgardHTTPeSimRegister = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_RegisHTTP + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_RegisHTTP,\r",
									"            'Authorization': Basic + ' ' + pm.environment.get(\"encodedKeys_Authorization_Register\")\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestAsgardHTTPeSimRegister = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({})\r",
									"        };\r",
									"\r",
									"        let optionsAsgardHTTPeSimRegister = {\r",
									"            url: url + httpapis + urlAsgardHTTPeSimRegister,\r",
									"            method: 'POST',\r",
									"            header: headersOptAsgardHTTPeSimRegister,\r",
									"            body: httpRequestAsgardHTTPeSimRegister\r",
									"        };\r",
									"\r",
									"        // console.log('request AsgardHTTPEsimRegister');\r",
									"        let response = await reqPromise(optionsAsgardHTTPeSimRegister);\r",
									"        let jsonDataAsgardHTTPeSimRegister = await response.json();\r",
									"        // console.log('jsonDataCreateThingStateInfo',jsonDataAsgardHTTPeSimRegister)\r",
									"        let operationStatusAsgardHTTPeSimRegister = await jsonDataAsgardHTTPeSimRegister.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"Asgard HTTP(eSim) Register : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('Asgard HTTP(eSim) Register : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusAsgardHTTPeSimRegister).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"\r",
									"        // The requested operation was successfully.\r",
									"        pm.test('Asgard HTTP(eSim) Register : OperationStatus DeveloperMessage is ' + '\"' + resultDescriptionTheRequestedOperationWasSuccessfully + '\"', function () {\r",
									"            pm.expect(operationStatusAsgardHTTPeSimRegister).to.have.property('DeveloperMessage', resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"        });\r",
									"\r",
									"        await pm.environment.set(\"GetResponse_ThingToken\", jsonDataAsgardHTTPeSimRegister.ThingToken)\r",
									"        let keys2 = await fieldDataValue.AsgardHTTP.Value_AsgardHTTPeSim_Config_TST_F2_0_2_007_Username_Error + \":\" + fieldDataValue.AsgardHTTP.Value_AsgardHTTPeSim_Config_TST_F2_0_2_007_Password_Error; \r",
									"        // console.log(\"keys\", keys);      \r",
									"        let encodedKeys2 = await CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(keys2));\r",
									"        pm.environment.set(\"encodedKeys_Authorization_Config\", encodedKeys2)\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"Signin();\r",
									"setTimeout(async function(){await CreatePartner();}, 3000); \r",
									"setTimeout(async function(){await CreateAccount();}, 6000); \r",
									"setTimeout(async function(){await CreateThing();}, 8000); \r",
									"setTimeout(async function(){await CreateThingStateInfo();}, 9000); \r",
									"setTimeout(async function(){await CreateConfigGroup();}, 10000); \r",
									"setTimeout(async function(){await AsgardHTTPeSimRegister();}, 20000); \r",
									"setTimeout(async function(){}, 30000); //for wait value encodedKeys_Authorization_Config"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-ais-UserName",
								"type": "text",
								"value": "{{x_ais_UserName_AisPartner}}"
							},
							{
								"key": "x-ais-OrderRef",
								"value": "{{x_ais_OrderRef_ConfigHTTP_fail}}{{current_timestamp}}"
							},
							{
								"key": "x-ais-OrderDesc",
								"type": "text",
								"value": "{{x_ais_OrderDesc_ConfigHTTP}}"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{Basic}} {{encodedKeys_Authorization_Config}}"
							}
						],
						"url": {
							"raw": "{{url}}{{httpapis}}/api/config/sim/v1?Sensor=RefreshTime",
							"host": [
								"{{url}}{{httpapis}}"
							],
							"path": [
								"api",
								"config",
								"sim",
								"v1"
							],
							"query": [
								{
									"key": "Sensor",
									"value": "RefreshTime"
								}
							]
						},
						"description": "Type:Desire"
					},
					"response": []
				}
			]
		},
		{
			"name": "Delta",
			"item": [
				{
					"name": "AsgardHTTPeSimDelta_TST_F3_1_1_001_Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var Basic = pm.environment.get(\"Basic\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to xAisOrderRef \"RemoveThing_\"\r",
									"var x_ais_OrderRef_RemoveThing = pm.globals.get(\"x_ais_OrderRef_RemoveThing\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"var x_ais_OrderDesc_RemoveThing = pm.globals.get(\"x_ais_OrderDesc_RemoveThing\");\r",
									"//get global variable to xAisOrderRef \"InquiryThing_\"\r",
									"var x_ais_OrderRef_InquiryThing = pm.globals.get(\"x_ais_OrderRef_InquiryThing\");\r",
									"//get global variable to x_ais_OrderDesc \"InquiryThing\"\r",
									"var x_ais_OrderDesc_InquiryThing = pm.globals.get(\"x_ais_OrderDesc_InquiryThing\");\r",
									"//get global variable to xAisOrderRef \"RemoveThingStateInfo_\"\r",
									"var x_ais_OrderRef_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderRef_RemoveThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThingStateInfo\"\r",
									"var x_ais_OrderDesc_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_RemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Group --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveGroup_\"\r",
									"var x_ais_OrderRef_RemoveGroup = pm.globals.get(\"x_ais_OrderRef_RemoveGroup\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveGroup\"\r",
									"var x_ais_OrderDesc_RemoveGroup = pm.globals.get(\"x_ais_OrderDesc_RemoveGroup\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals AsgardHTTP --------------//\r",
									"//get global variable to x_ais_OrderRef \"DeltaHTTP_\"\r",
									"var x_ais_OrderRef_DeltaHTTP = pm.globals.get(\"x_ais_OrderRef_DeltaHTTP\");\r",
									"//get global variable to x_ais_OrderDesc \"Get Delta from MG\"\r",
									"var x_ais_OrderDesc_DeltaHTTP = pm.globals.get(\"x_ais_OrderDesc_DeltaHTTP\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get url Remove --------------//\r",
									"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
									"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"var urlThingRemoveThing = pm.globals.get(\"urlThingRemoveThing\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"var urlThingRemoveThingStateInfo = pm.globals.get(\"urlThingRemoveThingStateInfo\");\r",
									"//---------------- get url Inquiry --------------//\r",
									"//get global variable to url \"/api/v1/Thing/InquiryThing\"\r",
									"var urlThingInquiryThing = pm.globals.get(\"urlThingInquiryThing\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"RemovePartner is Success\"\r",
									"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
									"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
									"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
									"//get global variable to resultDescription \"RemoveThing is Success\"\r",
									"var resultDescriptionRemoveThing = pm.globals.get(\"resultDescriptionRemoveThing\");\r",
									"//get global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"var resultDescriptionRemoveThingStateInfo = pm.globals.get(\"resultDescriptionRemoveThingStateInfo\");\r",
									"//get global variable to resultDescription \"InquiryThing is Success\"\r",
									"var resultDescriptionInquiryThing = pm.globals.get(\"resultDescriptionInquiryThing\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to resultDescription \"The requested operation was successfully.\"\r",
									"var resultDescriptionTheRequestedOperationWasSuccessfully = pm.globals.get(\"resultDescriptionTheRequestedOperationWasSuccessfully\");\r",
									"//------------------------------------------------------------//\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Asgard HTTP(eSim) Delta : Status code is \" + statusCodeSuccess, function () {\r",
									"    pm.response.to.have.status(statusCodeSuccess);\r",
									"});\r",
									"\r",
									"pm.test('Asgard HTTP(eSim) Delta : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeSuccess);\r",
									"});\r",
									"\r",
									"pm.test('Asgard HTTP(eSim) Delta : OperationStatus DeveloperMessage is '+'\"'+ resultDescriptionTheRequestedOperationWasSuccessfully+'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"});\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// RemovePartner\r",
									" RemovePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemovePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemovePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemovePartner = {\r",
									"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemovePartner,\r",
									"            body: httpRequestRemovePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request RemovePartner');\r",
									"        let response = await reqPromise(optionsRemovePartner);\r",
									"        let jsonDataRemovePartner = await response.json();\r",
									"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
									"    \r",
									"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemovePartner is Success\r",
									"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveAccount\r",
									" RemoveAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemoveAccount = {\r",
									"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveAccount,\r",
									"            body: httpRequestRemoveAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveAccount');\r",
									"        let response = await reqPromise(optionsRemoveAccount);\r",
									"        let jsonDataRemoveAccount = await response.json();\r",
									"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
									"    \r",
									"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveAccount is Success\r",
									"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThing\r",
									" RemoveThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThing = {\r",
									"            url: url + provisioningapis + urlThingRemoveThing,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThing,\r",
									"            body: httpRequestRemoveThing\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveThing');\r",
									"        let response = await reqPromise(optionsRemoveThing);\r",
									"        let jsonDataRemoveThing = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThing)\r",
									"    \r",
									"        let operationStatusRemoveThing = await jsonDataRemoveThing.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThing : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThing : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThing is Success\r",
									"        pm.test('RemoveThing : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThing+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Description', resultDescriptionRemoveThing);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThingStateInfo\r",
									" RemoveThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"            \r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\"),\r",
									"                \"stateType\": fieldDataValue.CreateThingStateInfo.Type_Report, //Report\r",
									"                \"stateKey\": fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP //AA\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingRemoveThingStateInfo,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThingStateInfo,\r",
									"            body: httpRequestRemoveThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('response RemoveThingStateInfo');\r",
									"        let response = await reqPromise(optionsRemoveThingStateInfo);\r",
									"        let jsonDataRemoveThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThingStateInfo)\r",
									"    \r",
									"        let operationStatusRemoveThingStateInfo = await jsonDataRemoveThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThingStateInfo is Success\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThingStateInfo+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Description', resultDescriptionRemoveThingStateInfo);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"//---------------- LogDefaultValue --------------//\r",
									"//set variable to LogDefaultValue JSON.parse\r",
									"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
									"// console.log('LogDefaultValue',LogDefaultValue);\r",
									"//---------------- set globals Other --------------//\r",
									"\r",
									"var SearchLog = LogDefaultValue.SearchLog;\r",
									"// console.log('SearchLog',SearchLog);\r",
									"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
									"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
									"var kbn_version = SearchLog.header.kbn_version;\r",
									"var authorization = SearchLog.header.Authorization;\r",
									"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
									"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
									"var namespace = LogDefaultValue.Other.namespace;\r",
									"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
									"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
									"var header_x_ais_username = LogDefaultValue.Other.header_x_ais_username;\r",
									"var methodGet = LogDefaultValue.Other.methodGet;\r",
									"\r",
									"// Detail\r",
									"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
									"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
									"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
									"\r",
									"// Summary\r",
									"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
									"\r",
									"// Asgard.Http.APIs\r",
									"var applicationName = LogDefaultValue.AsgardHTTP.applicationName;\r",
									"var cmdName = LogDefaultValue.AsgardHTTP.cmdNameDelta;\r",
									"var endPointNameRabbitMQ = LogDefaultValue.AsgardHTTP.endPointNameRabbitMQ;\r",
									"var containerId = LogDefaultValue.AsgardHTTP.containerId;\r",
									"var requestObjectUrlStaging = LogDefaultValue.AsgardHTTP.requestObjectUrlDeltaMgStaging;\r",
									"var urlDelta  = LogDefaultValue.AsgardHTTP.urlDelta;\r",
									"\r",
									"// Check CDR (Summary Log) and EDR (Detail Log)\r",
									"SearchLogFindTid = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSearchLogFindTid = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = x_ais_OrderRef_DeltaHTTP + current_timestamp;\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestSearchLogFindTid = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"\r",
									"        let optionsSearchLogFindTid = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptSearchLogFindTid,\r",
									"            body: httpRequestSearchLogFindTid\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsSearchLogFindTid);\r",
									"        let jsonDataSearchLogFindTid = await response.json();\r",
									"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
									"        // console.log('hits',hits)\r",
									"  \r",
									"        // find tid\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            // let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"        \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            if(applicationNameValue == applicationName){\r",
									"                let tid = hits[i]._source.cauldron.tid;\r",
									"                pm.environment.set(\"tid\", tid);\r",
									"                break;\r",
									"           }\r",
									"        }\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"CheckLog = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCheckLog = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = pm.environment.get(\"tid\");\r",
									"\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestCheckLog = {\r",
									"            mode: 'raw',\r",
									"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"        let optionsCheckLog = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptCheckLog,\r",
									"            body: httpRequestCheckLog\r",
									"        }; \r",
									"        let response = await reqPromise(optionsCheckLog);\r",
									"        let jsonDataCheckLog = await response.json();\r",
									"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
									"        \r",
									"        // //200\r",
									"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });     \r",
									"        \r",
									"        let hits = jsonDataCheckLog.hits.hits\r",
									"        console.log('hits',hits)\r",
									"  \r",
									"        // find logType\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            //  let logType = hits[i]._source.cauldron.logType\r",
									"            let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"           \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            \r",
									"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
									"            // console.log('resultDataLog',resultDataLog)\r",
									"\r",
									"            let tidControl = x_ais_OrderRef_DeltaHTTP  + current_timestamp;\r",
									"            // console.log(tidControl);\r",
									"            if(applicationNameValue == applicationName){\r",
									"                 \r",
									"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and Asgard.Http.APIs\r",
									"                    pm.test(\"Check Summary Log : Asgard_HTTP(eSim) Delta\" , function () {\r",
									"                        console.log(\"======== Check Summary Log ( Expected = Actual) [Asgard_HTTP(eSim) Delta] ==================\");\r",
									"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
									"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
									"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeSuccess);\r",
									"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
									"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        // console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
									"                        // console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
									"\r",
									"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
									"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
									"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeSuccess); \r",
									"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionTheRequestedOperationWasSuccessfully); \r",
									"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
									"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"\r",
									"                        let thingId = pm.environment.get(\"GetResponse_ThingID\");\r",
									"                        let imei = (pm.environment.get(\"random_IM\")).replace(\" \", \"\");\r",
									"                        let imsi = (pm.environment.get(\"GetResponse_IMSI\")).replace(\" \", \"\");\r",
									"                        let customUrl= urlCheckLog + requestObjectUrlStaging;\r",
									"\r",
									"                        // check identity\r",
									"                        // \"identity\":\"{\\\"Imei\\\":\\\"496151103122639\\\",\\\"ThingId\\\":\\\"6013965896d0ed0001f5a46d\\\",\\\"Imsi\\\":\\\"496151103122639\\\"}\"\r",
									"                        let dataSummaryIdentity = JSON.parse(resultDataLog.identity);\r",
									"\r",
									"                        console.log(\"identity.ThingId : \" + dataSummaryIdentity.ThingId + \" = \" + thingId);\r",
									"                        console.log(\"identity.Imei : \" + dataSummaryIdentity.Imei + \" = \" + imei);\r",
									"                        console.log(\"identity.Imsi : \" + dataSummaryIdentity.Imsi + \" = \" + imsi);\r",
									"\r",
									"                        pm.expect(dataSummaryIdentity.ThingId).to.eql(thingId); \r",
									"                        pm.expect(dataSummaryIdentity.Imei).to.eql(imei); \r",
									"                        pm.expect(dataSummaryIdentity.Imsi).to.eql(imsi); \r",
									"\r",
									"                        // check custom\r",
									"                        // \\\"custom\\\":{ \\\"customData\\\":{ \\\"Imsi\\\":[ \\\"507379743476439\\\" ], \\\"url\\\":\\\"mg-iot.sandais.com/api/delta/sim/v1/\\\", \\\"Imei\\\":[ \\\"507379743476439\\\" ], \\\"ThingID\\\":[ \\\"609a954913c24d000100e321\\\" ] }, \\\"endPointSummary\\\":[ { \\\"no\\\":\\\"1\\\", \\\"endPointName\\\":\\\"db.ThingsCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:InquirywasSuccess\\\", \\\"processTime\\\":0.0004 }, { \\\"no\\\":\\\"2\\\", \\\"endPointName\\\":\\\"db.AccountsCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:InquirywasSuccess\\\", \\\"processTime\\\":0.0002 }, { \\\"no\\\":\\\"3\\\", \\\"endPointName\\\":\\\"db.ThingsCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:InquirywasSuccess\\\", \\\"processTime\\\":0.0005 } ] }\r",
									"\r",
									"                        let customData = resultDataLog.custom.customData\r",
									"\r",
									"                        console.log(\"custom.url : \" + customData.url + \" = \" + customUrl);\r",
									"                        console.log(\"custom.Imei[0] : \" + customData.Imei[0] + \" = \" + imei);\r",
									"                        console.log(\"custom.Imsi[0] : \" + customData.Imsi[0] + \" = \" + imsi);\r",
									"                        console.log(\"custom.ThingID[0] : \" + customData.ThingID[0] + \" = \" + thingId);\r",
									"\r",
									"                        pm.expect(customData.url).to.eql(customUrl); \r",
									"                        pm.expect(customData.Imei[0]).to.eql(imei); \r",
									"                        pm.expect(customData.Imsi[0]).to.eql(imsi); \r",
									"                        pm.expect(customData.ThingID[0]).to.eql(thingId); \r",
									"\r",
									"                        let custom = resultDataLog.custom.endPointSummary;\r",
									"                        let countCustom = custom.length;\r",
									"                       \r",
									"                        // [\"db.ThingsCollection\",\"db.AccountsCollection\",\"db.ThingsCollection\"]\r",
									"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_Asgard_HTTP_eSim_Delta;\r",
									"                        // [\"20000:Inquiry was Success\",\"20000:Inquiry was Success\",\"20000:Inquiry was Success\"]\r",
									"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_Asgard_HTTP_eSim_Delta;\r",
									"                        let countCustomStep = dataEndPointName.length;\r",
									"\r",
									"                        console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep);\r",
									"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
									"                        \r",
									"                        for(let i=0;i<countCustomStep;i++){\r",
									"                            let no = custom[i].no;\r",
									"                            let valueEndPointName = custom[i].endPointName;\r",
									"                            let valueResponseStatus = custom[i].responseStatus;\r",
									"                            // console.log(\"i\",i);\r",
									"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
									"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
									"\r",
									"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString());\r",
									"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i]);\r",
									"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i]);\r",
									"\r",
									"                            pm.expect(no).to.eql((i+1).toString()); \r",
									"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
									"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]); \r",
									"                        }\r",
									"                    }); \r",
									"                }\r",
									"\r",
									"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and Asgard.Http.APIs\r",
									"\r",
									"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
									"                    // console.log('endPointNameValue ',endPointNameValue)\r",
									"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [Asgard_HTTP(eSim) Delta]\", function () {\r",
									"                        console.log(\"======== Check Detail Log ( Expected = Actual) [Asgard_HTTP(eSim) Delta] ==================\");\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
									"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
									"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
									"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.custom1.activityLog.processTime + \" = \" + resultDataLog.custom1.activityLog.processTime);\r",
									"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
									"\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
									"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
									"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
									"\r",
									"                        let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
									"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
									"                        let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
									"                            // console.log('jsonParseResponseObject',jsonParseResponseObject); \r",
									"                        let url = urlDelta; \r",
									"                        let x_ais_orderref = x_ais_OrderRef_DeltaHTTP + current_timestamp;\r",
									"                        let x_ais_orderdesc = x_ais_OrderDesc_DeltaHTTP;\r",
									"                        let x_ais_userName = x_ais_UserName_AisPartner;\r",
									"                        let authorization = Basic + ' ' + pm.environment.get(\"encodedKeys_Authorization_Delta\");\r",
									"                        let imei = (pm.environment.get(\"random_IM\")).replace(\" \", \"\");\r",
									"                        let imsi = (pm.environment.get(\"GetResponse_IMSI\")).replace(\" \", \"\");\r",
									"                        let thingId = pm.environment.get(\"GetResponse_ThingID\");\r",
									"                        let customUrl= urlCheckLog + requestObjectUrlStaging;\r",
									"                        let SensorKey = fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP;\r",
									"                        let sensor = pm.environment.get(\"random_Sensor_AsgardHTTP\");\r",
									"                        let timestamp = pm.environment.get(\"timestamp\");\r",
									"\r",
									"                        if( endPointNameValue == undefined){\r",
									"                            // check requestObject\r",
									"                            // \"requestObject\":\"{\\\"url\\\":\\\"/api/delta/sim/v1/\\\",\\\"method\\\":\\\"GET\\\",\\\"headers\\\":{\\\"Cache-Control\\\":\\\"no-cache\\\",\\\"Content-Type\\\":\\\"application/json\\\",\\\"Accept\\\":\\\"*/*\\\",\\\"Accept-Encoding\\\":\\\"gzip,deflate,br\\\",\\\"Authorization\\\":\\\"Basic ZjEwMWY2NGYtZWE0Ni00OGRjLThiNzUtYzk4MGVlYjg0ODU3OjEuMi4zLjQ=\\\",\\\"Host\\\":\\\"mg-staging.sandais.com\\\",\\\"User-Agent\\\":\\\"PostmanRuntime/7.26.8\\\",\\\"Content-Length\\\":\\\"0\\\",\\\"x-real-ip\\\":\\\"58.8.214.174\\\",\\\"x-forwarded-for\\\":\\\"58.8.214.174\\\",\\\"x-forwarded-proto\\\":\\\"https\\\",\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"DeltaHTTP_202102152202789\\\",\\\"x-ais-orderdesc\\\":\\\"Get Delta from MG\\\",\\\"postman-token\\\":\\\"99fb050f-69da-4658-8061-39b7879a5d21\\\",\\\"x-request-id\\\":\\\"26514a93-1c8e-4429-8e80-e6ec55645ec2\\\",\\\"x-b3-traceid\\\":\\\"18ef9bc70dea493f4036f7b14889a35a\\\",\\\"x-b3-spanid\\\":\\\"4036f7b14889a35a\\\",\\\"x-b3-sampled\\\":\\\"0\\\",\\\"x-ais-SessionId\\\":\\\"1613401990353\\\",\\\"identity\\\":\\\"{\\\\\\\"Imei\\\\\\\":\\\\\\\"588720509013627\\\\\\\",\\\\\\\"ThingId\\\\\\\":\\\\\\\"602a8f831f76320001a4eb43\\\\\\\",\\\\\\\"Imsi\\\\\\\":\\\\\\\"588720509013627\\\\\\\"}\\\",\\\"custom\\\":\\\"{\\\\\\\"Imsi\\\\\\\":[\\\\\\\"588720509013627\\\\\\\"],\\\\\\\"url\\\\\\\":\\\\\\\"mg-staging.sandais.com/api/delta/sim/v1/\\\\\\\",\\\\\\\"Imei\\\\\\\":[\\\\\\\"588720509013627\\\\\\\"],\\\\\\\"ThingID\\\\\\\":[\\\\\\\"602a8f831f76320001a4eb43\\\\\\\"]}\\\"},\\\"queryString\\\":{\\\"Sensor\\\":\\\"\\\"},\\\"routeParamteters\\\":{}}\"\r",
									"\r",
									"                            // \\\"requestObject\\\":\\\"{ \\\\\\\"url\\\\\\\":\\\\\\\"/api/delta/sim/v1/\\\\\\\", \\\\\\\"method\\\\\\\":\\\\\\\"GET\\\\\\\", \\\\\\\"headers\\\\\\\":{ \\\\\\\"Cache-Control\\\\\\\":\\\\\\\"no-cache\\\\\\\", \\\\\\\"Content-Type\\\\\\\":\\\\\\\"application/json\\\\\\\", \\\\\\\"Accept\\\\\\\":\\\\\\\"*/*\\\\\\\", \\\\\\\"Accept-Encoding\\\\\\\":\\\\\\\"gzip, deflate, br\\\\\\\", \\\\\\\"Authorization\\\\\\\":\\\\\\\"Basic NDgzOWI5ZmItNjQxYS00NDZhLWI3YTMtZDNkZWU5ODdiOGU0OjEuMi4zLjQ=\\\\\\\", \\\\\\\"Host\\\\\\\":\\\\\\\"mg-iot.sandais.com\\\\\\\", \\\\\\\"User-Agent\\\\\\\":\\\\\\\"PostmanRuntime/7.26.8\\\\\\\", \\\\\\\"Content-Length\\\\\\\":\\\\\\\"0\\\\\\\", \\\\\\\"x-real-ip\\\\\\\":\\\\\\\"182.232.183.255\\\\\\\", \\\\\\\"x-forwarded-for\\\\\\\":\\\\\\\"182.232.183.255, 10.233.64.0\\\\\\\", \\\\\\\"x-forwarded-proto\\\\\\\":\\\\\\\"http\\\\\\\", \\\\\\\"x-ais-username\\\\\\\":\\\\\\\"AisPartner\\\\\\\", \\\\\\\"x-ais-orderref\\\\\\\":\\\\\\\"DeltaHTTP_202105112205098\\\\\\\", \\\\\\\"x-ais-orderdesc\\\\\\\":\\\\\\\"Get Delta from MG\\\\\\\", \\\\\\\"postman-token\\\\\\\":\\\\\\\"b9385248-2000-4670-9764-354c07d6e575\\\\\\\", \\\\\\\"x-envoy-external-address\\\\\\\":\\\\\\\"10.233.64.0\\\\\\\", \\\\\\\"x-request-id\\\\\\\":\\\\\\\"86b99185-d2e9-4250-8fc5-c727591ca8bc\\\\\\\", \\\\\\\"x-envoy-original-path\\\\\\\":\\\\\\\"/httpapis/api/delta/sim/v1/?Sensor\\\\\\\", \\\\\\\"x-b3-traceid\\\\\\\":\\\\\\\"e93422934ffcd7f069d52bad38d36a31\\\\\\\", \\\\\\\"x-b3-spanid\\\\\\\":\\\\\\\"add1790d50a727d5\\\\\\\", \\\\\\\"x-b3-parentspanid\\\\\\\":\\\\\\\"69d52bad38d36a31\\\\\\\", \\\\\\\"x-b3-sampled\\\\\\\":\\\\\\\"0\\\\\\\", \\\\\\\"x-ais-SessionId\\\\\\\":\\\\\\\"1620745500854\\\\\\\", \\\\\\\"identity\\\\\\\":\\\\\\\"{ \\\\\\\\\\\\\\\"Imei\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"512099749992739\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"ThingId\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"609a9d06d8281500018682b8\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Imsi\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"512099749992739\\\\\\\\\\\\\\\" }\\\\\\\", \\\\\\\"custom\\\\\\\":\\\\\\\"{ \\\\\\\\\\\\\\\"Imsi\\\\\\\\\\\\\\\":[ \\\\\\\\\\\\\\\"512099749992739\\\\\\\\\\\\\\\" ], \\\\\\\\\\\\\\\"url\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"mg-iot.sandais.com/api/delta/sim/v1/\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Imei\\\\\\\\\\\\\\\":[ \\\\\\\\\\\\\\\"512099749992739\\\\\\\\\\\\\\\" ], \\\\\\\\\\\\\\\"ThingID\\\\\\\\\\\\\\\":[ \\\\\\\\\\\\\\\"609a9d06d8281500018682b8\\\\\\\\\\\\\\\" ] }\\\\\\\" }, \\\\\\\"queryString\\\\\\\":{ \\\\\\\"Sensor\\\\\\\":\\\\\\\"\\\\\\\" }, \\\\\\\"routeParamteters\\\\\\\":{ } }\\\",\r",
									"\r",
									"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
									"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodGet);\r",
									"                            console.log(\"headers.x_ais_userName : \" + jsonParseRequestObject.headers[header_x_ais_username] + \" = \" + x_ais_userName);\r",
									"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
									"                            console.log(\"headers.Authorization : \" + jsonParseRequestObject.headers.Authorization + \" = \" + authorization);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
									"                            pm.expect(jsonParseRequestObject.method).to.eql(methodGet);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_username]).to.eql(x_ais_userName);\r",
									"                            pm.expect(jsonParseRequestObject.headers.Authorization).to.eql(authorization);\r",
									"\r",
									"                            // check requestObject headers.identity\r",
									"                            let jsonParseRequestObjectHeadersIdentity = JSON.parse(jsonParseRequestObject.headers.identity);\r",
									"                            // console.log('jsonParseRequestObjectHeadersIdentity',jsonParseRequestObjectHeadersIdentity);\r",
									"\r",
									"                            console.log(\"headers.identity.Imei : \" + jsonParseRequestObjectHeadersIdentity.Imei + \" = \" + imei);\r",
									"                            console.log(\"headers.identity.Imsi : \" + jsonParseRequestObjectHeadersIdentity.Imsi + \" = \" + imsi);\r",
									"                            console.log(\"headers.identity.ThingId : \" + jsonParseRequestObjectHeadersIdentity.ThingId + \" = \" + thingId);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObjectHeadersIdentity.Imei).to.eql(imei);\r",
									"                            pm.expect(jsonParseRequestObjectHeadersIdentity.Imsi).to.eql(imsi);\r",
									"                            pm.expect(jsonParseRequestObjectHeadersIdentity.ThingId).to.eql(thingId);\r",
									"\r",
									"                            // check requestObject headers.custom\r",
									"                            let jsonParseRequestObjectHeadersCustom = JSON.parse(jsonParseRequestObject.headers.custom);\r",
									"                            // console.log('jsonParseRequestObjectHeadersCustom',jsonParseRequestObjectHeadersCustom);\r",
									"\r",
									"                            console.log(\"headers.custom.url : \" + jsonParseRequestObjectHeadersCustom.url + \" = \" + customUrl);\r",
									"                            console.log(\"headers.custom.Imei[0] : \" + jsonParseRequestObjectHeadersCustom.Imei[0] + \" = \" + imei);\r",
									"                            console.log(\"headers.custom.Imsi[0] : \" + jsonParseRequestObjectHeadersCustom.Imsi[0] + \" = \" + imsi);\r",
									"                            console.log(\"headers.custom.ThingID[0] : \" + jsonParseRequestObjectHeadersCustom.ThingID[0] + \" = \" + thingId);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObjectHeadersCustom.url).to.eql(customUrl);\r",
									"                            pm.expect(jsonParseRequestObjectHeadersCustom.Imei[0]).to.eql(imei);\r",
									"                            pm.expect(jsonParseRequestObjectHeadersCustom.Imsi[0]).to.eql(imsi);\r",
									"                            pm.expect(jsonParseRequestObjectHeadersCustom.ThingID[0]).to.eql(thingId);\r",
									"\r",
									"                            console.log(\"queryString.Sensor : \" + JSON.stringify(jsonParseRequestObject.queryString.Sensor) + \" = \" + JSON.stringify(\"\"));\r",
									"                            console.log(\"routeParamteters : \" + JSON.stringify(jsonParseRequestObject.routeParamteters) + \" = \" + JSON.stringify({}));\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.queryString.Sensor).to.eql(\"\"); \r",
									"                            pm.expect(jsonParseRequestObject.routeParamteters).to.eql({}); \r",
									"\r",
									"                            // check responseObject\r",
									"                            // \"responseObject\":\"{\\\"Delta\\\":{\\\"AA\\\":917},\\\"OperationStatus\\\":{\\\"Code\\\":\\\"20000\\\",\\\"DeveloperMessage\\\":\\\"The requested operation was successfully.\\\"}}\"\r",
									"                            console.log(\"response.Delta.\" + SensorKey + \" : \" + jsonParseResponseObject.Delta[SensorKey] + \" = \" + sensor);\r",
									"                            pm.expect(jsonParseResponseObject.Delta[SensorKey]).to.eql(sensor);  \r",
									"\r",
									"                            console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeSuccess);\r",
									"                            console.log(\"response.OperationStatus.DeveloperMessage : \" + jsonParseResponseObject.OperationStatus.DeveloperMessage + \" = \" + resultDescriptionTheRequestedOperationWasSuccessfully); \r",
									"\r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeSuccess);  \r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheRequestedOperationWasSuccessfully);  \r",
									"                        }\r",
									"                    }); \r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// InquiryThing\r",
									"InquiryThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptInquiryThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_InquiryThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_InquiryThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestInquiryThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsInquiryThing = {\r",
									"            url: url + provisioningapis + urlThingInquiryThing,\r",
									"            method: 'POST',\r",
									"            header: headersOptInquiryThing,\r",
									"            body: httpRequestInquiryThing\r",
									"        };\r",
									"\r",
									"        // console.log('request InquiryThing');\r",
									"        let response = await reqPromise(optionsInquiryThing);\r",
									"        let jsonDataInquiryThing = await response.json();\r",
									"        // console.log('jsonDataInquiryThing',jsonDataInquiryThing)\r",
									"    \r",
									"        let operationStatusInquiryThing = await jsonDataInquiryThing.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"InquiryThing : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('InquiryThing : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusInquiryThing).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //InquiryThing is Success\r",
									"        pm.test('InquiryThing : OperationStatus Description is '+'\"'+ resultDescriptionInquiryThing+'\"', function () {\r",
									"            pm.expect(operationStatusInquiryThing).to.have.property('Description', resultDescriptionInquiryThing);\r",
									"        });\r",
									"\r",
									"        //Check Data\r",
									"        let thingInfo = await jsonDataInquiryThing.ThingInfo;\r",
									"        console.log('thingInfo',thingInfo);\r",
									"\r",
									"        for(let i=0;i<thingInfo.length;i++){\r",
									"            pm.test('Verify DB Check Data : Delta [Sensor :{ \"'+  fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP + '\" : '+ pm.environment.get(\"random_Sensor_AsgardHTTP\") +' }]' , function () {\r",
									"                console.log(\"======== Verify DB Check Data ( Expected = Actual) [Asgard_HTTP(eSim) Delta] ==================\");\r",
									"                console.log(\"thingInfo[\"+ i +\"].StateInfo.Delta.\"+ fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP +\" : \" + thingInfo[i].StateInfo.Delta[fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP] + \" = \" + pm.environment.get(\"random_Sensor_AsgardHTTP\"));\r",
									"                console.log(\"thingInfo[\"+ i +\"].StateInfo.Desire.\"+ fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP +\" : \" + thingInfo[i].StateInfo.Desire[fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP] + \" = \" + pm.environment.get(\"random_Sensor_AsgardHTTP\"));\r",
									"\r",
									"                pm.expect(thingInfo[i].StateInfo.Delta).to.have.property(fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP, pm.environment.get(\"random_Sensor_AsgardHTTP\"));\r",
									"                pm.expect(thingInfo[i].StateInfo.Desire).to.have.property(fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP, pm.environment.get(\"random_Sensor_AsgardHTTP\"));\r",
									"            });\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"setTimeout(function(){SearchLogFindTid();}, 40000); \r",
									"setTimeout(function(){CheckLog();}, 60000); \r",
									"setTimeout(function(){InquiryThing();}, 70000); \r",
									"\r",
									"setTimeout(function(){RemoveThingStateInfo();}, 80000); \r",
									"setTimeout(function(){RemoveThing();}, 90000); \r",
									"setTimeout(function(){RemoveAccount();}, 100000); \r",
									"setTimeout(function(){RemovePartner();}, 110000); \r",
									"\r",
									"setTimeout(function(){\r",
									"pm.environment.unset(\"current_timestamp\");\r",
									"pm.environment.unset(\"AccessToken\");\r",
									"pm.environment.unset(\"random_number\");\r",
									"pm.environment.unset(\"PartnerName\");\r",
									"pm.environment.unset(\"MerchantContact\");\r",
									"pm.environment.unset(\"CPID\");\r",
									"pm.environment.unset(\"GetResponse_PartnerId\");\r",
									"pm.environment.unset(\"AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountId\");\r",
									"pm.environment.unset(\"random_IM\");\r",
									"pm.environment.unset(\"random_ICCID\");\r",
									"pm.environment.unset(\"ThingName\");\r",
									"pm.environment.unset(\"GetResponse_ThingID\");\r",
									"pm.environment.unset(\"GetResponse_IMSI\");\r",
									"pm.environment.unset(\"encodedKeys_Authorization_Register\");\r",
									"pm.environment.unset(\"encodedKeys_Authorization_Delta\");\r",
									"pm.environment.unset(\"random_Sensor\");\r",
									"pm.environment.unset(\"random_Sensor_AsgardHTTP\");\r",
									"pm.environment.unset(\"GetResponse_ThingToken\");\r",
									"pm.environment.unset(\"tid\");\r",
									"pm.environment.unset(\"SensorKey_AsgardHTTP\");\r",
									"pm.environment.unset(\"timestamp\");\r",
									"}, 115000); \r",
									"setTimeout(async function(){}, 120000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var Username = pm.environment.get(\"Username\");\r",
									"var Password = pm.environment.get(\"Password\");\r",
									"\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"var controlapis = pm.environment.get(\"controlapis\");\r",
									"var httpapis = pm.environment.get(\"httpapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"//format YYYYMMDDHHMMSSS\r",
									"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
									"// console.log('currentTmestamp',currentTmestamp);\r",
									"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var Basic = pm.environment.get(\"Basic\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- statusCodeList --------------//\r",
									"//set variable to statusCodeList JSON.parse\r",
									"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
									"//set global variable to statusCode 200\r",
									"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
									"//set global variable to statusCode 201\r",
									"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultCodeList --------------//\r",
									"//set variable to resultCodeList JSON.parse\r",
									"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
									"//set global variable to resultCode \"20000\"\r",
									"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
									"//set global variable to resultCode \"20100\"\r",
									"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionSuccessList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
									"//set global variable to resultDescription \"SignInProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
									"//set global variable to resultDescription \"CreatePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
									"//set global variable to resultDescription \"CreateAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
									"//set global variable to resultDescription \"CreateThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThing\", resultDescriptionSuccessList.resultDescriptionCreateThing);\r",
									"//set global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThingStateInfo\", resultDescriptionSuccessList.resultDescriptionCreateThingStateInfo);\r",
									"//set global variable to resultDescription \"RemovePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
									"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
									"//set global variable to resultDescription \"RemoveThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThing\", resultDescriptionSuccessList.resultDescriptionRemoveThing);\r",
									"//set global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThingStateInfo\", resultDescriptionSuccessList.resultDescriptionRemoveThingStateInfo);\r",
									"//set global variable to resultDescription \"ControlOneThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessControlOneThing\", resultDescriptionSuccessList.resultDescriptionSuccessControlOneThing);\r",
									"//set global variable to resultDescription \"Register is Success\"\r",
									"pm.globals.set(\"resultDescriptionRegisterIsSuccess\", resultDescriptionSuccessList.resultDescriptionRegisterIsSuccess);\r",
									"//set global variable to resultDescription \"DeltaProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionDeltaProcessIsSuccess\", resultDescriptionSuccessList.resultDescriptionDeltaProcessIsSuccess);\r",
									"//set global variable to resultDescription \"The requested operation was successfully.\"\r",
									"pm.globals.set(\"resultDescriptionTheRequestedOperationWasSuccessfully\", resultDescriptionSuccessList.resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"//set global variable to resultDescription \"InquiryThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionInquiryThing\", resultDescriptionSuccessList.resultDescriptionInquiryThing);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- HeaderList --------------//\r",
									"//set variable to HeaderList JSON.parse\r",
									"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
									"//---------------- set globals Other --------------//\r",
									"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
									"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
									"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
									"//set global variable to kbn-versio \"7.5.1\"\r",
									"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Signin_ --------------//\r",
									"//set global variable to x_ais_OrderRef \"Signin_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreatePartner --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
									"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
									"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
									"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreateAccount --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
									"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
									"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Thing --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThing\", HeaderList.Thing.x_ais_OrderRef_CreateThing);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThing\", HeaderList.Thing.x_ais_OrderDesc_CreateThing);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThing\", HeaderList.Thing.x_ais_OrderRef_RemoveThing);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThing\", HeaderList.Thing.x_ais_OrderDesc_RemoveThing);\r",
									"//set global variable to x_ais_OrderRef \"InquiryThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_InquiryThing\", HeaderList.Thing.x_ais_OrderRef_InquiryThing);\r",
									"//set global variable to x_ais_OrderDesc \"InquiryThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_InquiryThing\", HeaderList.Thing.x_ais_OrderDesc_InquiryThing);\r",
									"//set global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_RemoveThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_RemoveThingStateInfo);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Control --------------//\r",
									"//set global variable to x_ais_OrderRef \"ControlThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ControlThing\", HeaderList.Control.x_ais_OrderRef_ControlThing);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals AsgardHTTP --------------//\r",
									"//set global variable to x_ais_OrderRef \"RegisHTTP_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RegisHTTP\", HeaderList.AsgardHTTP.x_ais_OrderRef_RegisHTTP);\r",
									"//set global variable to x_ais_OrderDesc \"Register Thing in MG\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RegisHTTP\", HeaderList.AsgardHTTP.x_ais_OrderDesc_RegisHTTP);\r",
									"//set global variable to x_ais_OrderRef \"DeltaHTTP_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_DeltaHTTP\", HeaderList.AsgardHTTP.x_ais_OrderRef_DeltaHTTP);\r",
									"//set global variable to x_ais_OrderDesc \"Get Delta from MG\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_DeltaHTTP\", HeaderList.AsgardHTTP.x_ais_OrderDesc_DeltaHTTP);\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"SignInProcess is Success\"\r",
									"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
									"//get global variable to resultDescription \"CreatePartner is Success\"\r",
									"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
									"//get global variable to resultDescription \"CreateAccount is Success\"\r",
									"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
									"//get global variable to resultDescription \"CreateThing is Success\"\r",
									"var resultDescriptionCreateThing = pm.globals.get(\"resultDescriptionCreateThing\");\r",
									"//get global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"var resultDescriptionCreateThingStateInfo = pm.globals.get(\"resultDescriptionCreateThingStateInfo\");\r",
									"//get global variable to resultDescription \"ControlOneThing is Success\"\r",
									"var resultDescriptionSuccessControlOneThing = pm.globals.get(\"resultDescriptionSuccessControlOneThing\");\r",
									"//get global variable to resultDescription \"Register is Success\"\r",
									"var resultDescriptionRegisterIsSuccess = pm.globals.get(\"resultDescriptionRegisterIsSuccess\");\r",
									"//get global variable to resultDescription \"The requested operation was successfully.\"\r",
									"var resultDescriptionTheRequestedOperationWasSuccessfully = pm.globals.get(\"resultDescriptionTheRequestedOperationWasSuccessfully\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- urlRouteList --------------//\r",
									"//set variable to urlRouteList JSON.parse\r",
									"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
									"//---------------- set url Create --------------//\r",
									"//set global variable to url \"/api/v1/auth/signin\"\r",
									"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
									"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
									"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"pm.globals.set(\"urlThingCreateThing\", urlRouteList.Thing.urlThingCreateThing);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"pm.globals.set(\"urlThingCreateThingStateInfo\", urlRouteList.Thing.urlThingCreateThingStateInfo);\r",
									"//set global variable to url \"/api/v1/Control/Thing\"\r",
									"pm.globals.set(\"urlControlThing\", urlRouteList.Control.urlControlThing);\r",
									"//set global variable to url \"/api/register/sim/v1\"\r",
									"pm.globals.set(\"urlAsgardHTTPeSimRegister\", urlRouteList.AsgardHTTPeSim.urlAsgardHTTPeSimRegister);\r",
									"//set global variable to url \"/api/delta/sim/v1/?Sensor\"\r",
									"pm.globals.set(\"urlAsgardHTTPeSimDelta\", urlRouteList.AsgardHTTPeSim.urlAsgardHTTPeSimDelta);\r",
									"//---------------- get url Create --------------//\r",
									"//get global variable to url \"/api/v1/auth/signin\"\r",
									"var urlSignin = pm.globals.get(\"urlSignin\");\r",
									"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
									"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"var urlThingCreateThing = pm.globals.get(\"urlThingCreateThing\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"var urlThingCreateThingStateInfo = pm.globals.get(\"urlThingCreateThingStateInfo\");\r",
									"//get global variable to url \"/api/v1/Control/Thing\"\r",
									"var urlControlThing = pm.globals.get(\"urlControlThing\");\r",
									"//get global variable to url \"/api/register/sim/v1\"\r",
									"var urlAsgardHTTPeSimRegister = pm.globals.get(\"urlAsgardHTTPeSimRegister\");\r",
									"//get global variable to url \"/api/delta/sim/v1/?Sensor\"\r",
									"var urlAsgardHTTPeSimDelta = pm.globals.get(\"urlAsgardHTTPeSimDelta\");\r",
									"//---------------- set url Remove --------------//\r",
									"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
									"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"pm.globals.set(\"urlThingRemoveThing\", urlRouteList.Thing.urlThingRemoveThing);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"pm.globals.set(\"urlThingRemoveThingStateInfo\", urlRouteList.Thing.urlThingRemoveThingStateInfo);\r",
									"//---------------- set url Inquiry --------------//\r",
									"//set global variable to url \"/api/v1/Thing/InquiryThing\"\r",
									"pm.globals.set(\"urlThingInquiryThing\", urlRouteList.Thing.urlThingInquiryThing);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Signin_ --------------//\r",
									"//get global variable to x_ais_OrderRef \"Signin_\"\r",
									"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"var x_ais_OrderRef_CreateThing = pm.globals.get(\"x_ais_OrderRef_CreateThing\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"var x_ais_OrderDesc_CreateThing = pm.globals.get(\"x_ais_OrderDesc_CreateThing\");\r",
									"//get global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"var x_ais_OrderRef_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderRef_CreateThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"var x_ais_OrderDesc_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_CreateThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Control --------------//\r",
									"//get global variable to x_ais_OrderRef \"ControlThing_\"\r",
									"var x_ais_OrderRef_ControlThing = pm.globals.get(\"x_ais_OrderRef_ControlThing\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals AsgardHTTP --------------//\r",
									"//get global variable to x_ais_OrderRef \"RegisHTTP_\"\r",
									"var x_ais_OrderRef_RegisHTTP = pm.globals.get(\"x_ais_OrderRef_RegisHTTP\");\r",
									"//get global variable to x_ais_OrderDesc \"Register Thing in MG\"\r",
									"var x_ais_OrderDesc_RegisHTTP = pm.globals.get(\"x_ais_OrderDesc_RegisHTTP\");\r",
									"//------------------------------------------------------------//\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// Signin get token\r",
									"Signin = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSignin = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_Signin + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_UserAuthentication,\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestSignin = {\r",
									"            mode: 'raw',\r",
									"            raw:\r",
									"                JSON.stringify({\r",
									"                    username: Username,\r",
									"                    password: Password\r",
									"                })\r",
									"        };\r",
									"\r",
									"        let optionsSignin = {\r",
									"            url: url + provisioningapis + urlSignin,\r",
									"            method: 'POST',\r",
									"            header: headersOptSignin,\r",
									"            body: httpRequestSignin\r",
									"        };\r",
									"        // console.log('request Signin');\r",
									"        let response = await reqPromise(optionsSignin);\r",
									"        let jsonDataSignin = await response.json();\r",
									"\r",
									"        // setAccessToken\r",
									"        await pm.environment.set(\"AccessToken\", jsonDataSignin.AccessToken);\r",
									"\r",
									"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('Signin : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // SignInProcess is Success\r",
									"        pm.test('Signin : OperationStatus Description is ' + '\"' + resultDescriptionSuccessSignIn + '\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
									"        });\r",
									"\r",
									"        //set random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //set PartnerName\r",
									"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
									"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
									"        //set MerchantContact\r",
									"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
									"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
									"        // set CPID\r",
									"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
									"        pm.environment.set(\"CPID\", CPIDValue)\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreatePartner\r",
									"CreatePartner = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreatePartner = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreatePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreatePartner,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreatePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
									"                \"PartnerType\": [\r",
									"                    \"Supplier\",\r",
									"                    \"Customer\"\r",
									"                ],\r",
									"                \"PartnerDetail\": {\r",
									"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
									"                    \"CPID\": pm.environment.get(\"CPID\")\r",
									"                },\r",
									"                \"Property\": {\r",
									"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreatePartner = {\r",
									"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreatePartner,\r",
									"            body: httpRequestCreatePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsCreatePartner);\r",
									"        let jsonDataCreatePartner = await response.json();\r",
									"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
									"\r",
									"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreatePartner : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreatePartner is Success\r",
									"        pm.test('CreatePartner : OperationStatus Description is ' + '\"' + resultDescriptionCreatePartner + '\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
									"        });\r",
									"\r",
									"        //GetResponse_PartnerId\r",
									"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
									"\r",
									"        //Accountname\r",
									"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
									"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateAccount\r",
									"CreateAccount = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateAccount = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateAccount,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreateAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateAccount = {\r",
									"            url: url + provisioningapis + urlAccountCreateAccount,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateAccount,\r",
									"            body: httpRequestCreateAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateAccount');\r",
									"        let response = await reqPromise(optionsCreateAccount);\r",
									"        let jsonDataCreateAccount = await response.json();\r",
									"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
									"\r",
									"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateAccount : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateAccount is Success\r",
									"        pm.test('CreateAccount : OperationStatus Description is ' + '\"' + resultDescriptionCreateAccount + '\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
									"        });\r",
									"        // GetResponse_AccountName\r",
									"        pm.environment.set(\"GetResponse_AccountName\", jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
									"        // GetResponse_AccountId\r",
									"        pm.environment.set(\"GetResponse_AccountId\", jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
									"        // random_IM\r",
									"        pm.environment.set(\"random_IM\", _.random(10000000, 99999999) + \" \" + _.random(1000000, 9999999))\r",
									"        // random_ICCID\r",
									"        pm.environment.set(\"random_ICCID\", _.random(1000000, 9999999) + \" \" + _.random(100000, 999999))\r",
									"        // random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //ThingName\r",
									"        let thingNameValue = fieldDataValue.Thing.ThingNameValue; // \"Sensor_TestThingName\"\r",
									"        pm.environment.set(\"ThingName\", thingNameValue + pm.environment.get(\"random_number\"))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThing\r",
									"CreateThing = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThing = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateThing + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateThing,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey': pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreateThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingName\": pm.environment.get(\"ThingName\"),\r",
									"                \"IMEI\": pm.environment.get(\"random_IM\"),\r",
									"                \"IMSI\": pm.environment.get(\"random_IM\"),\r",
									"                \"ICCID\": pm.environment.get(\"random_ICCID\"),\r",
									"                \"RouteUrl\": fieldDataValue.Thing.RouteUrlValue , //[\"http://10.12.3.4:2019/api/information/AddInformation\"]\r",
									"                \"RouteInfo\": {\r",
									"                    \"MIMO_ID\": fieldDataValue.Thing.RouteInfoMIMOIDValue , //\"606edada\"\r",
									"                    \"MIMO_SerialNo\": fieldDataValue.Thing.RouteInfoMIMOSerialNoValue //5466758878\r",
									"                },\r",
									"                \"RouteFlag\": {\r",
									"                    \"ThingName\": fieldDataValue.Thing.RouteFlagThingNameValue , //true\r",
									"                    \"ThingToken\": fieldDataValue.Thing.RouteFlagThingTokenValue, //true\r",
									"                    \"IMEI\": fieldDataValue.Thing.RouteFlagIMEIValue, //true\r",
									"                    \"ICCID\": fieldDataValue.Thing.RouteFlagICCIDValue, //true\r",
									"                    \"RouteInfo\": fieldDataValue.Thing.RouteFlagRouteInfoValue //true\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateThing = {\r",
									"            url: url + provisioningapis + urlThingCreateThing,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThing,\r",
									"            body: httpRequestCreateThing\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThing');\r",
									"        let response = await reqPromise(optionsCreateThing);\r",
									"        let jsonDataCreateThing = await response.json();\r",
									"        // console.log('jsonDataCreateThing',jsonDataCreateThing)\r",
									"\r",
									"        let operationStatusCreateThing = await jsonDataCreateThing.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateThing : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateThing : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateThing is Success\r",
									"        pm.test('CreateThing : OperationStatus Description is ' + '\"' + resultDescriptionCreateThing + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Description', resultDescriptionCreateThing);\r",
									"        });\r",
									"\r",
									"        pm.environment.set(\"GetResponse_ThingID\", jsonDataCreateThing.ThingInfo.ThingId)\r",
									"        pm.environment.set(\"GetResponse_IMSI\", jsonDataCreateThing.ThingInfo.IMSI)\r",
									"        \r",
									"        let keys = pm.environment.get(\"GetResponse_IMSI\") + \":\" + pm.environment.get(\"IpAddress\");\r",
									"        // console.log(\"keys\", keys);\r",
									"        let encodedKeys = CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(keys));\r",
									"        pm.environment.set(\"encodedKeys_Authorization_Register\", encodedKeys);\r",
									"\r",
									"        //Get Random Sensor \r",
									"        pm.environment.set(\"random_Sensor\", _.random(100, 999))\r",
									"\r",
									"        //Get Random Sensor AsgardHTTP\r",
									"        pm.environment.set(\"random_Sensor_AsgardHTTP\", _.random(100, 999))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThingStateInfo\r",
									"CreateThingStateInfo = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThingStateInfo = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateThingStateInfo,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey': pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        // {\"AA\" : pm.environment.get(\"random_Sensor\")}\r",
									"        let sensorValue = {};\r",
									"        sensorValue[fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP] = pm.environment.get(\"random_Sensor\");\r",
									"        // console.log('sensorValue',sensorValue);\r",
									"        \r",
									"        let httpRequestCreateThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": [\r",
									"                    pm.environment.get(\"GetResponse_ThingID\")\r",
									"                ],\r",
									"                \"Type\": fieldDataValue.CreateThingStateInfo.Type_Report,\r",
									"                \"Sensor\": sensorValue\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingCreateThingStateInfo,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThingStateInfo,\r",
									"            body: httpRequestCreateThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThingStateInfo');\r",
									"        let response = await reqPromise(optionsCreateThingStateInfo);\r",
									"        let jsonDataCreateThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataCreateThingStateInfo',jsonDataCreateThingStateInfo)\r",
									"\r",
									"        let operationStatusCreateThingStateInfo = await jsonDataCreateThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"CreateThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //CreateThingStateInfo is Success\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Description is ' + '\"' + resultDescriptionCreateThingStateInfo + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Description', resultDescriptionCreateThingStateInfo);\r",
									"        });\r",
									"\r",
									"       \r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// ControlThing\r",
									"ControlThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptControlThing = {\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_ControlThing + current_timestamp,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Content-Type':ContentType_ApplicationJson\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        // {\"AA\" : pm.environment.get(\"random_Sensor_AsgardHTTP\")}\r",
									"        let sensorValue = {};\r",
									"        sensorValue[fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP] = pm.environment.get(\"random_Sensor_AsgardHTTP\");\r",
									"        // console.log('sensorValue',sensorValue);\r",
									"\r",
									"        let httpRequestControlThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\"),\r",
									"                \"Sensors\": sensorValue\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsControlThing = {\r",
									"            url: url + controlapis + urlControlThing,\r",
									"            method: 'POST',\r",
									"            header: headersOptControlThing,\r",
									"            body: httpRequestControlThing\r",
									"        };\r",
									"\r",
									"        // console.log('response ControlThing');\r",
									"        let response = await reqPromise(optionsControlThing);\r",
									"        let jsonDataControlThing = await response.json();\r",
									"        // console.log('jsonDataControlThing',jsonDataControlThing)\r",
									"    \r",
									"        let operationStatusControlThing = await jsonDataControlThing.operationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"ControlThing : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('ControlThing : OperationStatus code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusControlThing).to.have.property('code', resultCodeSuccess);\r",
									"        });\r",
									"        //ControlOneThing is Success\r",
									"        pm.test('ControlThing : OperationStatus description is '+'\"'+ resultDescriptionSuccessControlOneThing+'\"', function () {\r",
									"            pm.expect(operationStatusControlThing).to.have.property('description', resultDescriptionSuccessControlOneThing);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// AsgardHTTPeSimRegister\r",
									"AsgardHTTPeSimRegister = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptAsgardHTTPeSimRegister = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_RegisHTTP + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_RegisHTTP,\r",
									"            'Authorization': Basic + ' ' + pm.environment.get(\"encodedKeys_Authorization_Register\")\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestAsgardHTTPeSimRegister = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({})\r",
									"        };\r",
									"\r",
									"        let optionsAsgardHTTPeSimRegister = {\r",
									"            url: url + httpapis + urlAsgardHTTPeSimRegister,\r",
									"            method: 'POST',\r",
									"            header: headersOptAsgardHTTPeSimRegister,\r",
									"            body: httpRequestAsgardHTTPeSimRegister\r",
									"        };\r",
									"\r",
									"        // console.log('request AsgardHTTPEsimRegister');\r",
									"        let response = await reqPromise(optionsAsgardHTTPeSimRegister);\r",
									"        let jsonDataAsgardHTTPeSimRegister = await response.json();\r",
									"        // console.log('jsonDataCreateThingStateInfo',jsonDataAsgardHTTPeSimRegister)\r",
									"        let operationStatusAsgardHTTPeSimRegister = await jsonDataAsgardHTTPeSimRegister.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"Asgard HTTP(eSim) Register : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('Asgard HTTP(eSim) Register : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusAsgardHTTPeSimRegister).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"\r",
									"        // The requested operation was successfully.\r",
									"        pm.test('Asgard HTTP(eSim) Register : OperationStatus DeveloperMessage is ' + '\"' + resultDescriptionTheRequestedOperationWasSuccessfully + '\"', function () {\r",
									"            pm.expect(operationStatusAsgardHTTPeSimRegister).to.have.property('DeveloperMessage', resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"        });\r",
									"\r",
									"        await pm.environment.set(\"GetResponse_ThingToken\", jsonDataAsgardHTTPeSimRegister.ThingToken)\r",
									"        let keys2 = await pm.environment.get(\"GetResponse_ThingToken\") + \":\" + pm.environment.get(\"IpAddress\");        \r",
									"        let encodedKeys2 = await CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(keys2));\r",
									"        pm.environment.set(\"encodedKeys_Authorization_Delta\", encodedKeys2)\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"Signin();\r",
									"setTimeout(async function(){await CreatePartner();}, 3000); \r",
									"setTimeout(async function(){await CreateAccount();}, 6000); \r",
									"setTimeout(async function(){await CreateThing();}, 8000); \r",
									"setTimeout(async function(){await CreateThingStateInfo();}, 9000); \r",
									"setTimeout(async function(){await ControlThing();}, 10000); \r",
									"setTimeout(async function(){await AsgardHTTPeSimRegister();}, 20000); \r",
									"setTimeout(async function(){}, 30000); //for wait value encodedKeys_Authorization_Delta"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-ais-UserName",
								"type": "text",
								"value": "{{x_ais_UserName_AisPartner}}"
							},
							{
								"key": "x-ais-OrderRef",
								"value": "{{x_ais_OrderRef_DeltaHTTP}}{{current_timestamp}}"
							},
							{
								"key": "x-ais-OrderDesc",
								"type": "text",
								"value": "{{x_ais_OrderDesc_DeltaHTTP}}"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{Basic}} {{encodedKeys_Authorization_Delta}}"
							}
						],
						"url": {
							"raw": "{{url}}{{httpapis}}/api/delta/sim/v1/?Sensor=",
							"host": [
								"{{url}}{{httpapis}}"
							],
							"path": [
								"api",
								"delta",
								"sim",
								"v1",
								""
							],
							"query": [
								{
									"key": "Sensor",
									"value": ""
								}
							]
						},
						"description": "Type:Desire"
					},
					"response": []
				},
				{
					"name": "AsgardHTTPeSimDelta_TST_F3_0_2_002_Error_CouldNotBeFound",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var Basic = pm.environment.get(\"Basic\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to xAisOrderRef \"RemoveThing_\"\r",
									"var x_ais_OrderRef_RemoveThing = pm.globals.get(\"x_ais_OrderRef_RemoveThing\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"var x_ais_OrderDesc_RemoveThing = pm.globals.get(\"x_ais_OrderDesc_RemoveThing\");\r",
									"//get global variable to xAisOrderRef \"RemoveThingStateInfo_\"\r",
									"var x_ais_OrderRef_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderRef_RemoveThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThingStateInfo\"\r",
									"var x_ais_OrderDesc_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_RemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals AsgardHTTP --------------//\r",
									"//get global variable to x_ais_OrderRef \"DeltaHTTP_\"\r",
									"var x_ais_OrderRef_DeltaHTTP = pm.globals.get(\"x_ais_OrderRef_DeltaHTTP\");\r",
									"//get global variable to x_ais_OrderRef \"DeltaHTTPfail_\"\r",
									"var x_ais_OrderRef_DeltaHTTP_fail = pm.globals.get(\"x_ais_OrderRef_DeltaHTTP_fail\");\r",
									"//get global variable to x_ais_OrderDesc \"Get Delta from MG\"\r",
									"var x_ais_OrderDesc_DeltaHTTP = pm.globals.get(\"x_ais_OrderDesc_DeltaHTTP\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get url Remove --------------//\r",
									"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
									"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"var urlThingRemoveThing = pm.globals.get(\"urlThingRemoveThing\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"var urlThingRemoveThingStateInfo = pm.globals.get(\"urlThingRemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"RemovePartner is Success\"\r",
									"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
									"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
									"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
									"//get global variable to resultDescription \"RemoveThing is Success\"\r",
									"var resultDescriptionRemoveThing = pm.globals.get(\"resultDescriptionRemoveThing\");\r",
									"//get global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"var resultDescriptionRemoveThingStateInfo = pm.globals.get(\"resultDescriptionRemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 404\r",
									"var statusCodeNotFound = pm.globals.get(\"statusCodeNotFound\");\r",
									"//get global variable to resultCode \"40400\"\r",
									"var resultCodeNotFound = pm.globals.get(\"resultCodeNotFound\");\r",
									"//get global variable to resultDescription \"The requested operation could not be found.\"\r",
									"var resultDescriptionTheRequestedOperationCouldNotBeFound = pm.globals.get(\"resultDescriptionTheRequestedOperationCouldNotBeFound\");\r",
									"//------------------------------------------------------------//\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Asgard HTTP(eSim) Delta : Status code is \" + statusCodeNotFound, function () {\r",
									"    pm.response.to.have.status(statusCodeNotFound);\r",
									"});\r",
									"\r",
									"pm.test('Asgard HTTP(eSim) Delta : operationStatus code is '+'\"'+ resultCodeNotFound +'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeNotFound);\r",
									"});\r",
									"\r",
									"pm.test('Asgard HTTP(eSim) Delta : OperationStatus DeveloperMessage is '+'\"'+ resultDescriptionTheRequestedOperationCouldNotBeFound+'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheRequestedOperationCouldNotBeFound);\r",
									"});\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// RemovePartner\r",
									" RemovePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemovePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemovePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemovePartner = {\r",
									"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemovePartner,\r",
									"            body: httpRequestRemovePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request RemovePartner');\r",
									"        let response = await reqPromise(optionsRemovePartner);\r",
									"        let jsonDataRemovePartner = await response.json();\r",
									"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
									"    \r",
									"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemovePartner is Success\r",
									"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveAccount\r",
									" RemoveAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemoveAccount = {\r",
									"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveAccount,\r",
									"            body: httpRequestRemoveAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveAccount');\r",
									"        let response = await reqPromise(optionsRemoveAccount);\r",
									"        let jsonDataRemoveAccount = await response.json();\r",
									"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
									"    \r",
									"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveAccount is Success\r",
									"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThing\r",
									" RemoveThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThing = {\r",
									"            url: url + provisioningapis + urlThingRemoveThing,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThing,\r",
									"            body: httpRequestRemoveThing\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveThing');\r",
									"        let response = await reqPromise(optionsRemoveThing);\r",
									"        let jsonDataRemoveThing = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThing)\r",
									"    \r",
									"        let operationStatusRemoveThing = await jsonDataRemoveThing.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThing : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThing : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThing is Success\r",
									"        pm.test('RemoveThing : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThing+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Description', resultDescriptionRemoveThing);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThingStateInfo\r",
									" RemoveThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"            \r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\"),\r",
									"                \"stateType\": fieldDataValue.CreateThingStateInfo.Type_Report, //Report\r",
									"                \"stateKey\": fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP //AA\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingRemoveThingStateInfo,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThingStateInfo,\r",
									"            body: httpRequestRemoveThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('response RemoveThingStateInfo');\r",
									"        let response = await reqPromise(optionsRemoveThingStateInfo);\r",
									"        let jsonDataRemoveThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThingStateInfo)\r",
									"    \r",
									"        let operationStatusRemoveThingStateInfo = await jsonDataRemoveThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThingStateInfo is Success\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThingStateInfo+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Description', resultDescriptionRemoveThingStateInfo);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"//---------------- LogDefaultValue --------------//\r",
									"//set variable to LogDefaultValue JSON.parse\r",
									"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
									"// console.log('LogDefaultValue',LogDefaultValue);\r",
									"//---------------- set globals Other --------------//\r",
									"\r",
									"var SearchLog = LogDefaultValue.SearchLog;\r",
									"// console.log('SearchLog',SearchLog);\r",
									"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
									"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
									"var kbn_version = SearchLog.header.kbn_version;\r",
									"var authorization = SearchLog.header.Authorization;\r",
									"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
									"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
									"var namespace = LogDefaultValue.Other.namespace;\r",
									"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
									"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
									"var header_x_ais_username = LogDefaultValue.Other.header_x_ais_username;\r",
									"var methodGet = LogDefaultValue.Other.methodGet;\r",
									"\r",
									"// Detail\r",
									"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
									"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
									"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
									"\r",
									"// Summary\r",
									"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
									"var identitySummary = \"\";\r",
									"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
									"\r",
									"// Asgard.Http.APIs\r",
									"var applicationName = LogDefaultValue.AsgardHTTP.applicationName;\r",
									"var cmdName = LogDefaultValue.AsgardHTTP.cmdNameDelta;\r",
									"var endPointNameRabbitMQ = LogDefaultValue.AsgardHTTP.endPointNameRabbitMQ;\r",
									"var containerId = LogDefaultValue.AsgardHTTP.containerId;\r",
									"var requestObjectUrlStaging = LogDefaultValue.AsgardHTTP.requestObjectUrlDeltaMgStaging;\r",
									"var urlDelta  = LogDefaultValue.AsgardHTTP.urlDelta;\r",
									"\r",
									"// Check CDR (Summary Log) and EDR (Detail Log)\r",
									"SearchLogFindTid = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSearchLogFindTid = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = x_ais_OrderRef_DeltaHTTP_fail + current_timestamp;\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestSearchLogFindTid = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"\r",
									"        let optionsSearchLogFindTid = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptSearchLogFindTid,\r",
									"            body: httpRequestSearchLogFindTid\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsSearchLogFindTid);\r",
									"        let jsonDataSearchLogFindTid = await response.json();\r",
									"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
									"        // console.log('hits',hits)\r",
									"  \r",
									"        // find tid\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            // let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"        \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            if(applicationNameValue == applicationName){\r",
									"                let tid = hits[i]._source.cauldron.tid;\r",
									"                pm.environment.set(\"tid\", tid);\r",
									"                break;\r",
									"           }\r",
									"        }\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"CheckLog = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCheckLog = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = pm.environment.get(\"tid\");\r",
									"\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestCheckLog = {\r",
									"            mode: 'raw',\r",
									"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"        let optionsCheckLog = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptCheckLog,\r",
									"            body: httpRequestCheckLog\r",
									"        }; \r",
									"        let response = await reqPromise(optionsCheckLog);\r",
									"        let jsonDataCheckLog = await response.json();\r",
									"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
									"        \r",
									"        // //200\r",
									"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });     \r",
									"        \r",
									"        let hits = jsonDataCheckLog.hits.hits\r",
									"        console.log('hits',hits)\r",
									"  \r",
									"        // find logType\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            //  let logType = hits[i]._source.cauldron.logType\r",
									"            let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"           \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            \r",
									"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
									"            // console.log('resultDataLog',resultDataLog)\r",
									"\r",
									"            let tidControl = x_ais_OrderRef_DeltaHTTP_fail  + current_timestamp;\r",
									"            // console.log(tidControl);\r",
									"            if(applicationNameValue == applicationName){\r",
									"                 \r",
									"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and Asgard.Http.APIs\r",
									"                    pm.test(\"Check Summary Log : Asgard_HTTP(eSim) Delta\" , function () {\r",
									"                        console.log(\"======== Check Summary Log ( Expected = Actual) [Asgard_HTTP(eSim) Delta] ==================\");\r",
									"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
									"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
									"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeNotFound);\r",
									"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionTheRequestedOperationCouldNotBeFound);\r",
									"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
									"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"identity : \" + JSON.stringify(resultDataLog.identity) + \" = \" + JSON.stringify(identitySummary));\r",
									"                        console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
									"\r",
									"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
									"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
									"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeNotFound); \r",
									"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionTheRequestedOperationCouldNotBeFound); \r",
									"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
									"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
									"                        // pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
									"\r",
									"                        // check custom\r",
									"                        // \\\"custom\\\":{ \\\"endPointSummary\\\":[ { \\\"no\\\":\\\"1\\\", \\\"endPointName\\\":\\\"db.ThingsCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:Inquiry was Success\\\", \\\"processTime\\\":0.0008 } ] }\r",
									"\r",
									"                        let custom = resultDataLog.custom.endPointSummary;\r",
									"                        let countCustom = custom.length;\r",
									"                       \r",
									"                        // [\"db.ThingsCollection\"]\r",
									"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_Asgard_HTTP_eSim_Delta_002_004_005_006;\r",
									"                        // [\"20000:Inquiry was Success\"]\r",
									"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_Asgard_HTTP_eSim_Delta_002_004_005_006;\r",
									"                        let countCustomStep = dataEndPointName.length;\r",
									"\r",
									"                        console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep);\r",
									"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
									"                        \r",
									"                        for(let i=0;i<countCustomStep;i++){\r",
									"                            let no = custom[i].no;\r",
									"                            let valueEndPointName = custom[i].endPointName;\r",
									"                            let valueResponseStatus = custom[i].responseStatus;\r",
									"                            // console.log(\"i\",i);\r",
									"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
									"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
									"\r",
									"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString());\r",
									"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i]);\r",
									"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i]);\r",
									"\r",
									"                            pm.expect(no).to.eql((i+1).toString()); \r",
									"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
									"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]); \r",
									"                        }\r",
									"                    }); \r",
									"                }\r",
									"\r",
									"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and Asgard.Http.APIs\r",
									"\r",
									"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
									"                    // console.log('endPointNameValue ',endPointNameValue)\r",
									"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [Asgard_HTTP(eSim) Delta]\", function () {\r",
									"                        console.log(\"======== Check Detail Log ( Expected = Actual) [Asgard_HTTP(eSim) Delta] ==================\");\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
									"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
									"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
									"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.custom1.activityLog.processTime + \" = \" + resultDataLog.custom1.activityLog.processTime);\r",
									"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
									"\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
									"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
									"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
									"\r",
									"                        let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
									"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
									"                        let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
									"                            // console.log('jsonParseResponseObject',jsonParseResponseObject); \r",
									"                        let url = urlDelta; \r",
									"                        let x_ais_orderref = x_ais_OrderRef_DeltaHTTP_fail + current_timestamp;\r",
									"                        let x_ais_orderdesc = x_ais_OrderDesc_DeltaHTTP;\r",
									"                        let x_ais_userName = x_ais_UserName_AisPartner;\r",
									"                        let authorization = Basic + ' ' + pm.environment.get(\"encodedKeys_Authorization_Delta\");\r",
									"                        let SensorKey = fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP;\r",
									"                        let sensor = pm.environment.get(\"random_Sensor\");\r",
									"                        let timestamp = pm.environment.get(\"timestamp\");\r",
									"\r",
									"                        if( endPointNameValue == undefined){\r",
									"                            // check requestObject\r",
									"                            // \"requestObject\":\"{\\\"url\\\":\\\"/api/delta/sim/v1/\\\",\\\"method\\\":\\\"GET\\\",\\\"headers\\\":{\\\"Cache-Control\\\":\\\"no-cache\\\",\\\"Content-Type\\\":\\\"application/json\\\",\\\"Accept\\\":\\\"*/*\\\",\\\"Accept-Encoding\\\":\\\"gzip,deflate,br\\\",\\\"Authorization\\\":\\\"Basic MzgxMTJmNzYtYmVjZC00NTUwLTllZDMtY2UxMzNkYjhmOGRkeHg6MS4yLjMuNA==\\\",\\\"Host\\\":\\\"mg-staging.sandais.com\\\",\\\"User-Agent\\\":\\\"PostmanRuntime/7.26.8\\\",\\\"Content-Length\\\":\\\"0\\\",\\\"x-real-ip\\\":\\\"58.8.214.174\\\",\\\"x-forwarded-for\\\":\\\"58.8.214.174\\\",\\\"x-forwarded-proto\\\":\\\"https\\\",\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"DeltaHTTPfail_202102152202712\\\",\\\"x-ais-orderdesc\\\":\\\"Get Delta from MG\\\",\\\"postman-token\\\":\\\"79b55c96-1b2c-4594-afc9-9301895d4e54\\\",\\\"x-request-id\\\":\\\"f14d2d5c-bc4c-4484-9fd2-d1bdd5397a4e\\\",\\\"x-b3-traceid\\\":\\\"fd5ae6c9a217811d7c54f49c21f5ffcc\\\",\\\"x-b3-spanid\\\":\\\"7c54f49c21f5ffcc\\\",\\\"x-b3-sampled\\\":\\\"0\\\",\\\"x-ais-SessionId\\\":\\\"1613403150250\\\"},\\\"queryString\\\":{\\\"Sensor\\\":\\\"\\\"},\\\"routeParamteters\\\":{}}\"\r",
									"\r",
									"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
									"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodGet);\r",
									"                            console.log(\"headers.x_ais_userName : \" + jsonParseRequestObject.headers[header_x_ais_username] + \" = \" + x_ais_userName);\r",
									"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
									"                            console.log(\"headers.Authorization : \" + jsonParseRequestObject.headers.Authorization + \" = \" + authorization);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
									"                            pm.expect(jsonParseRequestObject.method).to.eql(methodGet);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_username]).to.eql(x_ais_userName);\r",
									"                            pm.expect(jsonParseRequestObject.headers.Authorization).to.eql(authorization);\r",
									"\r",
									"                            console.log(\"queryString.Sensor : \" + JSON.stringify(jsonParseRequestObject.queryString.Sensor) + \" = \" + JSON.stringify(\"\"));\r",
									"                            console.log(\"routeParamteters : \" + JSON.stringify(jsonParseRequestObject.routeParamteters) + \" = \" + JSON.stringify({}));\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.queryString.Sensor).to.eql(\"\"); \r",
									"                            pm.expect(jsonParseRequestObject.routeParamteters).to.eql({}); \r",
									"\r",
									"                            // check responseObject\r",
									"                            // \"responseObject\":\"{\\\"OperationStatus\\\":{\\\"Code\\\":\\\"40400\\\",\\\"DeveloperMessage\\\":\\\"The requested operation could not be found.\\\"}}\"\r",
									"\r",
									"                            console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeNotFound);\r",
									"                            console.log(\"response.OperationStatus.DeveloperMessage : \" + jsonParseResponseObject.OperationStatus.DeveloperMessage + \" = \" + resultDescriptionTheRequestedOperationCouldNotBeFound);\r",
									"\r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeNotFound);  \r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheRequestedOperationCouldNotBeFound);  \r",
									"                        }\r",
									"                    }); \r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"setTimeout(function(){SearchLogFindTid();}, 40000); \r",
									"setTimeout(function(){CheckLog();}, 60000); \r",
									"\r",
									"setTimeout(function(){RemoveThingStateInfo();}, 70000); \r",
									"setTimeout(function(){RemoveThing();}, 80000); \r",
									"setTimeout(function(){RemoveAccount();}, 90000); \r",
									"setTimeout(function(){RemovePartner();}, 100000); \r",
									"\r",
									"setTimeout(function(){\r",
									"pm.environment.unset(\"current_timestamp\");\r",
									"pm.environment.unset(\"AccessToken\");\r",
									"pm.environment.unset(\"random_number\");\r",
									"pm.environment.unset(\"PartnerName\");\r",
									"pm.environment.unset(\"MerchantContact\");\r",
									"pm.environment.unset(\"CPID\");\r",
									"pm.environment.unset(\"GetResponse_PartnerId\");\r",
									"pm.environment.unset(\"AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountId\");\r",
									"pm.environment.unset(\"random_IM\");\r",
									"pm.environment.unset(\"random_ICCID\");\r",
									"pm.environment.unset(\"ThingName\");\r",
									"pm.environment.unset(\"GetResponse_ThingID\");\r",
									"pm.environment.unset(\"GetResponse_IMSI\");\r",
									"pm.environment.unset(\"encodedKeys_Authorization_Register\");\r",
									"pm.environment.unset(\"encodedKeys_Authorization_Delta\");\r",
									"pm.environment.unset(\"random_Sensor\");\r",
									"pm.environment.unset(\"random_Sensor_AsgardHTTP\");\r",
									"pm.environment.unset(\"GetResponse_ThingToken\");\r",
									"pm.environment.unset(\"tid\");\r",
									"pm.environment.unset(\"SensorKey_AsgardHTTP\");\r",
									"pm.environment.unset(\"timestamp\");\r",
									"}, 105000); \r",
									"setTimeout(async function(){}, 110000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var Username = pm.environment.get(\"Username\");\r",
									"var Password = pm.environment.get(\"Password\");\r",
									"\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"var controlapis = pm.environment.get(\"controlapis\");\r",
									"var httpapis = pm.environment.get(\"httpapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"//format YYYYMMDDHHMMSSS\r",
									"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
									"// console.log('currentTmestamp',currentTmestamp);\r",
									"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var Basic = pm.environment.get(\"Basic\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- statusCodeList --------------//\r",
									"//set variable to statusCodeList JSON.parse\r",
									"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
									"//set global variable to statusCode 200\r",
									"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
									"//set global variable to statusCode 201\r",
									"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
									"//set global variable to statusCode 404\r",
									"pm.globals.set(\"statusCodeNotFound\", statusCodeList.statusCodeNotFound);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultCodeList --------------//\r",
									"//set variable to resultCodeList JSON.parse\r",
									"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
									"//set global variable to resultCode \"20000\"\r",
									"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
									"//set global variable to resultCode \"20100\"\r",
									"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
									"//set global variable to resultCode \"40400\"\r",
									"pm.globals.set(\"resultCodeNotFound\", resultCodeList.resultCodeNotFound);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionSuccessList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
									"//set global variable to resultDescription \"SignInProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
									"//set global variable to resultDescription \"CreatePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
									"//set global variable to resultDescription \"CreateAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
									"//set global variable to resultDescription \"CreateThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThing\", resultDescriptionSuccessList.resultDescriptionCreateThing);\r",
									"//set global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThingStateInfo\", resultDescriptionSuccessList.resultDescriptionCreateThingStateInfo);\r",
									"//set global variable to resultDescription \"RemovePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
									"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
									"//set global variable to resultDescription \"RemoveThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThing\", resultDescriptionSuccessList.resultDescriptionRemoveThing);\r",
									"//set global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThingStateInfo\", resultDescriptionSuccessList.resultDescriptionRemoveThingStateInfo);\r",
									"//set global variable to resultDescription \"ControlOneThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessControlOneThing\", resultDescriptionSuccessList.resultDescriptionSuccessControlOneThing);\r",
									"//set global variable to resultDescription \"Register is Success\"\r",
									"pm.globals.set(\"resultDescriptionRegisterIsSuccess\", resultDescriptionSuccessList.resultDescriptionRegisterIsSuccess);\r",
									"//set global variable to resultDescription \"DeltaProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionDeltaProcessIsSuccess\", resultDescriptionSuccessList.resultDescriptionDeltaProcessIsSuccess);\r",
									"//set global variable to resultDescription \"The requested operation was successfully.\"\r",
									"pm.globals.set(\"resultDescriptionTheRequestedOperationWasSuccessfully\", resultDescriptionSuccessList.resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionErrorList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
									"//set global variable to resultDescription \"The requested operation could not be found.\"\r",
									"pm.globals.set(\"resultDescriptionTheRequestedOperationCouldNotBeFound\", resultDescriptionErrorList.resultDescriptionTheRequestedOperationCouldNotBeFound);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- HeaderList --------------//\r",
									"//set variable to HeaderList JSON.parse\r",
									"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
									"//---------------- set globals Other --------------//\r",
									"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
									"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
									"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
									"//set global variable to kbn-versio \"7.5.1\"\r",
									"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Signin_ --------------//\r",
									"//set global variable to x_ais_OrderRef \"Signin_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreatePartner --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
									"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
									"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
									"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreateAccount --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
									"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
									"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Thing --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThing\", HeaderList.Thing.x_ais_OrderRef_CreateThing);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThing\", HeaderList.Thing.x_ais_OrderDesc_CreateThing);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThing\", HeaderList.Thing.x_ais_OrderRef_RemoveThing);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThing\", HeaderList.Thing.x_ais_OrderDesc_RemoveThing);\r",
									"//set global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_RemoveThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_RemoveThingStateInfo);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Control --------------//\r",
									"//set global variable to x_ais_OrderRef \"ControlThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ControlThing\", HeaderList.Control.x_ais_OrderRef_ControlThing);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals AsgardHTTP --------------//\r",
									"//set global variable to x_ais_OrderRef \"RegisHTTP_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RegisHTTP\", HeaderList.AsgardHTTP.x_ais_OrderRef_RegisHTTP);\r",
									"//set global variable to x_ais_OrderDesc \"Register Thing in MG\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RegisHTTP\", HeaderList.AsgardHTTP.x_ais_OrderDesc_RegisHTTP);\r",
									"//set global variable to x_ais_OrderRef \"DeltaHTTP_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_DeltaHTTP\", HeaderList.AsgardHTTP.x_ais_OrderRef_DeltaHTTP);\r",
									"//set global variable to x_ais_OrderRef \"DeltaHTTPfail_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_DeltaHTTP_fail\", HeaderList.AsgardHTTP.x_ais_OrderRef_DeltaHTTP_fail);\r",
									"//set global variable to x_ais_OrderDesc \"Get Delta from MG\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_DeltaHTTP\", HeaderList.AsgardHTTP.x_ais_OrderDesc_DeltaHTTP);\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"SignInProcess is Success\"\r",
									"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
									"//get global variable to resultDescription \"CreatePartner is Success\"\r",
									"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
									"//get global variable to resultDescription \"CreateAccount is Success\"\r",
									"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
									"//get global variable to resultDescription \"CreateThing is Success\"\r",
									"var resultDescriptionCreateThing = pm.globals.get(\"resultDescriptionCreateThing\");\r",
									"//get global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"var resultDescriptionCreateThingStateInfo = pm.globals.get(\"resultDescriptionCreateThingStateInfo\");\r",
									"//get global variable to resultDescription \"ControlOneThing is Success\"\r",
									"var resultDescriptionSuccessControlOneThing = pm.globals.get(\"resultDescriptionSuccessControlOneThing\");\r",
									"//get global variable to resultDescription \"Register is Success\"\r",
									"var resultDescriptionRegisterIsSuccess = pm.globals.get(\"resultDescriptionRegisterIsSuccess\");\r",
									"//get global variable to resultDescription \"The requested operation was successfully.\"\r",
									"var resultDescriptionTheRequestedOperationWasSuccessfully = pm.globals.get(\"resultDescriptionTheRequestedOperationWasSuccessfully\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- urlRouteList --------------//\r",
									"//set variable to urlRouteList JSON.parse\r",
									"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
									"//---------------- set url Create --------------//\r",
									"//set global variable to url \"/api/v1/auth/signin\"\r",
									"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
									"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
									"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"pm.globals.set(\"urlThingCreateThing\", urlRouteList.Thing.urlThingCreateThing);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"pm.globals.set(\"urlThingCreateThingStateInfo\", urlRouteList.Thing.urlThingCreateThingStateInfo);\r",
									"//set global variable to url \"/api/v1/Control/Thing\"\r",
									"pm.globals.set(\"urlControlThing\", urlRouteList.Control.urlControlThing);\r",
									"//set global variable to url \"/api/register/sim/v1\"\r",
									"pm.globals.set(\"urlAsgardHTTPeSimRegister\", urlRouteList.AsgardHTTPeSim.urlAsgardHTTPeSimRegister);\r",
									"//set global variable to url \"/api/delta/sim/v1/?Sensor\"\r",
									"pm.globals.set(\"urlAsgardHTTPeSimDelta\", urlRouteList.AsgardHTTPeSim.urlAsgardHTTPeSimDelta);\r",
									"//---------------- get url Create --------------//\r",
									"//get global variable to url \"/api/v1/auth/signin\"\r",
									"var urlSignin = pm.globals.get(\"urlSignin\");\r",
									"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
									"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"var urlThingCreateThing = pm.globals.get(\"urlThingCreateThing\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"var urlThingCreateThingStateInfo = pm.globals.get(\"urlThingCreateThingStateInfo\");\r",
									"//get global variable to url \"/api/v1/Control/Thing\"\r",
									"var urlControlThing = pm.globals.get(\"urlControlThing\");\r",
									"//get global variable to url \"/api/register/sim/v1\"\r",
									"var urlAsgardHTTPeSimRegister = pm.globals.get(\"urlAsgardHTTPeSimRegister\");\r",
									"//get global variable to url \"/api/delta/sim/v1/?Sensor\"\r",
									"var urlAsgardHTTPeSimDelta = pm.globals.get(\"urlAsgardHTTPeSimDelta\");\r",
									"//---------------- set url Remove --------------//\r",
									"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
									"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"pm.globals.set(\"urlThingRemoveThing\", urlRouteList.Thing.urlThingRemoveThing);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"pm.globals.set(\"urlThingRemoveThingStateInfo\", urlRouteList.Thing.urlThingRemoveThingStateInfo);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Signin_ --------------//\r",
									"//get global variable to x_ais_OrderRef \"Signin_\"\r",
									"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"var x_ais_OrderRef_CreateThing = pm.globals.get(\"x_ais_OrderRef_CreateThing\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"var x_ais_OrderDesc_CreateThing = pm.globals.get(\"x_ais_OrderDesc_CreateThing\");\r",
									"//get global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"var x_ais_OrderRef_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderRef_CreateThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"var x_ais_OrderDesc_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_CreateThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Control --------------//\r",
									"//get global variable to x_ais_OrderRef \"ControlThing_\"\r",
									"var x_ais_OrderRef_ControlThing = pm.globals.get(\"x_ais_OrderRef_ControlThing\");\r",
									"//get global variable to x_ais_OrderRef \"ControlThingfail_\"\r",
									"var x_ais_OrderRef_ControlThing_fail = pm.globals.get(\"x_ais_OrderRef_ControlThing_fail\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals AsgardHTTP --------------//\r",
									"//get global variable to x_ais_OrderRef \"RegisHTTP_\"\r",
									"var x_ais_OrderRef_RegisHTTP = pm.globals.get(\"x_ais_OrderRef_RegisHTTP\");\r",
									"//get global variable to x_ais_OrderDesc \"Register Thing in MG\"\r",
									"var x_ais_OrderDesc_RegisHTTP = pm.globals.get(\"x_ais_OrderDesc_RegisHTTP\");\r",
									"//------------------------------------------------------------//\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// Signin get token\r",
									"Signin = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSignin = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_Signin + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_UserAuthentication,\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestSignin = {\r",
									"            mode: 'raw',\r",
									"            raw:\r",
									"                JSON.stringify({\r",
									"                    username: Username,\r",
									"                    password: Password\r",
									"                })\r",
									"        };\r",
									"\r",
									"        let optionsSignin = {\r",
									"            url: url + provisioningapis + urlSignin,\r",
									"            method: 'POST',\r",
									"            header: headersOptSignin,\r",
									"            body: httpRequestSignin\r",
									"        };\r",
									"        // console.log('request Signin');\r",
									"        let response = await reqPromise(optionsSignin);\r",
									"        let jsonDataSignin = await response.json();\r",
									"\r",
									"        // setAccessToken\r",
									"        await pm.environment.set(\"AccessToken\", jsonDataSignin.AccessToken);\r",
									"\r",
									"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('Signin : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // SignInProcess is Success\r",
									"        pm.test('Signin : OperationStatus Description is ' + '\"' + resultDescriptionSuccessSignIn + '\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
									"        });\r",
									"\r",
									"        //set random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //set PartnerName\r",
									"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
									"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
									"        //set MerchantContact\r",
									"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
									"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
									"        // set CPID\r",
									"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
									"        pm.environment.set(\"CPID\", CPIDValue)\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreatePartner\r",
									"CreatePartner = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreatePartner = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreatePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreatePartner,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreatePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
									"                \"PartnerType\": [\r",
									"                    \"Supplier\",\r",
									"                    \"Customer\"\r",
									"                ],\r",
									"                \"PartnerDetail\": {\r",
									"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
									"                    \"CPID\": pm.environment.get(\"CPID\")\r",
									"                },\r",
									"                \"Property\": {\r",
									"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreatePartner = {\r",
									"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreatePartner,\r",
									"            body: httpRequestCreatePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsCreatePartner);\r",
									"        let jsonDataCreatePartner = await response.json();\r",
									"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
									"\r",
									"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreatePartner : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreatePartner is Success\r",
									"        pm.test('CreatePartner : OperationStatus Description is ' + '\"' + resultDescriptionCreatePartner + '\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
									"        });\r",
									"\r",
									"        //GetResponse_PartnerId\r",
									"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
									"\r",
									"        //Accountname\r",
									"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
									"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateAccount\r",
									"CreateAccount = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateAccount = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateAccount,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreateAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateAccount = {\r",
									"            url: url + provisioningapis + urlAccountCreateAccount,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateAccount,\r",
									"            body: httpRequestCreateAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateAccount');\r",
									"        let response = await reqPromise(optionsCreateAccount);\r",
									"        let jsonDataCreateAccount = await response.json();\r",
									"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
									"\r",
									"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateAccount : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateAccount is Success\r",
									"        pm.test('CreateAccount : OperationStatus Description is ' + '\"' + resultDescriptionCreateAccount + '\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
									"        });\r",
									"        // GetResponse_AccountName\r",
									"        pm.environment.set(\"GetResponse_AccountName\", jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
									"        // GetResponse_AccountId\r",
									"        pm.environment.set(\"GetResponse_AccountId\", jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
									"        // random_IM\r",
									"        pm.environment.set(\"random_IM\", _.random(10000000, 99999999) + \" \" + _.random(1000000, 9999999))\r",
									"        // random_ICCID\r",
									"        pm.environment.set(\"random_ICCID\", _.random(1000000, 9999999) + \" \" + _.random(100000, 999999))\r",
									"        // random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //ThingName\r",
									"        let thingNameValue = fieldDataValue.Thing.ThingNameValue; // \"Sensor_TestThingName\"\r",
									"        pm.environment.set(\"ThingName\", thingNameValue + pm.environment.get(\"random_number\"))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThing\r",
									"CreateThing = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThing = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateThing + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateThing,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey': pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreateThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingName\": pm.environment.get(\"ThingName\"),\r",
									"                \"IMEI\": pm.environment.get(\"random_IM\"),\r",
									"                \"IMSI\": pm.environment.get(\"random_IM\"),\r",
									"                \"ICCID\": pm.environment.get(\"random_ICCID\"),\r",
									"                \"RouteUrl\": fieldDataValue.Thing.RouteUrlValue , //[\"http://10.12.3.4:2019/api/information/AddInformation\"]\r",
									"                \"RouteInfo\": {\r",
									"                    \"MIMO_ID\": fieldDataValue.Thing.RouteInfoMIMOIDValue , //\"606edada\"\r",
									"                    \"MIMO_SerialNo\": fieldDataValue.Thing.RouteInfoMIMOSerialNoValue //5466758878\r",
									"                },\r",
									"                \"RouteFlag\": {\r",
									"                    \"ThingName\": fieldDataValue.Thing.RouteFlagThingNameValue , //true\r",
									"                    \"ThingToken\": fieldDataValue.Thing.RouteFlagThingTokenValue, //true\r",
									"                    \"IMEI\": fieldDataValue.Thing.RouteFlagIMEIValue, //true\r",
									"                    \"ICCID\": fieldDataValue.Thing.RouteFlagICCIDValue, //true\r",
									"                    \"RouteInfo\": fieldDataValue.Thing.RouteFlagRouteInfoValue //true\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateThing = {\r",
									"            url: url + provisioningapis + urlThingCreateThing,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThing,\r",
									"            body: httpRequestCreateThing\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThing');\r",
									"        let response = await reqPromise(optionsCreateThing);\r",
									"        let jsonDataCreateThing = await response.json();\r",
									"        // console.log('jsonDataCreateThing',jsonDataCreateThing)\r",
									"\r",
									"        let operationStatusCreateThing = await jsonDataCreateThing.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateThing : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateThing : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateThing is Success\r",
									"        pm.test('CreateThing : OperationStatus Description is ' + '\"' + resultDescriptionCreateThing + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Description', resultDescriptionCreateThing);\r",
									"        });\r",
									"\r",
									"        pm.environment.set(\"GetResponse_ThingID\", jsonDataCreateThing.ThingInfo.ThingId)\r",
									"        pm.environment.set(\"GetResponse_IMSI\", jsonDataCreateThing.ThingInfo.IMSI)\r",
									"        \r",
									"        let keys = pm.environment.get(\"GetResponse_IMSI\") + \":\" + pm.environment.get(\"IpAddress\");\r",
									"        // console.log(\"keys\", keys);\r",
									"        let encodedKeys = CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(keys));\r",
									"        pm.environment.set(\"encodedKeys_Authorization_Register\", encodedKeys);\r",
									"\r",
									"        //Get Random Sensor \r",
									"        pm.environment.set(\"random_Sensor\", _.random(100, 999))\r",
									"\r",
									"        //Get Random Sensor AsgardHTTP\r",
									"        pm.environment.set(\"random_Sensor_AsgardHTTP\", _.random(100, 999))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThingStateInfo\r",
									"CreateThingStateInfo = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThingStateInfo = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateThingStateInfo,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey': pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        // {\"AA\" : pm.environment.get(\"random_Sensor\")}\r",
									"        let sensorValue = {};\r",
									"        sensorValue[fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP] = pm.environment.get(\"random_Sensor\");\r",
									"        // console.log('sensorValue',sensorValue);\r",
									"        \r",
									"        let httpRequestCreateThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": [\r",
									"                    pm.environment.get(\"GetResponse_ThingID\")\r",
									"                ],\r",
									"                \"Type\": fieldDataValue.CreateThingStateInfo.Type_Report,\r",
									"                \"Sensor\": sensorValue\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingCreateThingStateInfo,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThingStateInfo,\r",
									"            body: httpRequestCreateThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThingStateInfo');\r",
									"        let response = await reqPromise(optionsCreateThingStateInfo);\r",
									"        let jsonDataCreateThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataCreateThingStateInfo',jsonDataCreateThingStateInfo)\r",
									"\r",
									"        let operationStatusCreateThingStateInfo = await jsonDataCreateThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"CreateThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //CreateThingStateInfo is Success\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Description is ' + '\"' + resultDescriptionCreateThingStateInfo + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Description', resultDescriptionCreateThingStateInfo);\r",
									"        });\r",
									"\r",
									"       \r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// ControlThing\r",
									"ControlThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptControlThing = {\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_ControlThing + current_timestamp,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Content-Type':ContentType_ApplicationJson\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        // {\"AA\" : pm.environment.get(\"random_Sensor_AsgardHTTP\")}\r",
									"        let sensorValue = {};\r",
									"        sensorValue[fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP] = pm.environment.get(\"random_Sensor_AsgardHTTP\");\r",
									"        // console.log('sensorValue',sensorValue);\r",
									"\r",
									"        let httpRequestControlThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\"),\r",
									"                \"Sensors\": sensorValue\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsControlThing = {\r",
									"            url: url + controlapis + urlControlThing,\r",
									"            method: 'POST',\r",
									"            header: headersOptControlThing,\r",
									"            body: httpRequestControlThing\r",
									"        };\r",
									"\r",
									"        // console.log('response ControlThing');\r",
									"        let response = await reqPromise(optionsControlThing);\r",
									"        let jsonDataControlThing = await response.json();\r",
									"        // console.log('jsonDataControlThing',jsonDataControlThing)\r",
									"    \r",
									"        let operationStatusControlThing = await jsonDataControlThing.operationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"ControlThing : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('ControlThing : OperationStatus code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusControlThing).to.have.property('code', resultCodeSuccess);\r",
									"        });\r",
									"        //ControlOneThing is Success\r",
									"        pm.test('ControlThing : OperationStatus description is '+'\"'+ resultDescriptionSuccessControlOneThing+'\"', function () {\r",
									"            pm.expect(operationStatusControlThing).to.have.property('description', resultDescriptionSuccessControlOneThing);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// AsgardHTTPeSimRegister\r",
									"AsgardHTTPeSimRegister = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptAsgardHTTPeSimRegister = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_RegisHTTP + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_RegisHTTP,\r",
									"            'Authorization': Basic + ' ' + pm.environment.get(\"encodedKeys_Authorization_Register\")\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestAsgardHTTPeSimRegister = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({})\r",
									"        };\r",
									"\r",
									"        let optionsAsgardHTTPeSimRegister = {\r",
									"            url: url + httpapis + urlAsgardHTTPeSimRegister,\r",
									"            method: 'POST',\r",
									"            header: headersOptAsgardHTTPeSimRegister,\r",
									"            body: httpRequestAsgardHTTPeSimRegister\r",
									"        };\r",
									"\r",
									"        // console.log('request AsgardHTTPEsimRegister');\r",
									"        let response = await reqPromise(optionsAsgardHTTPeSimRegister);\r",
									"        let jsonDataAsgardHTTPeSimRegister = await response.json();\r",
									"        // console.log('jsonDataCreateThingStateInfo',jsonDataAsgardHTTPeSimRegister)\r",
									"        let operationStatusAsgardHTTPeSimRegister = await jsonDataAsgardHTTPeSimRegister.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"Asgard HTTP(eSim) Register : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('Asgard HTTP(eSim) Register : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusAsgardHTTPeSimRegister).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"\r",
									"        // The requested operation was successfully.\r",
									"        pm.test('Asgard HTTP(eSim) Register : OperationStatus DeveloperMessage is ' + '\"' + resultDescriptionTheRequestedOperationWasSuccessfully + '\"', function () {\r",
									"            pm.expect(operationStatusAsgardHTTPeSimRegister).to.have.property('DeveloperMessage', resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"        });\r",
									"\r",
									"        await pm.environment.set(\"GetResponse_ThingToken\", jsonDataAsgardHTTPeSimRegister.ThingToken)\r",
									"        let keys2 = await pm.environment.get(\"GetResponse_ThingToken\") + fieldDataValue.AsgardHTTP.Value_AsgardHTTPeSim_Delta_TST_F3_0_2_002_Error + \":\" + pm.environment.get(\"IpAddress\");        \r",
									"        let encodedKeys2 = await CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(keys2));\r",
									"        pm.environment.set(\"encodedKeys_Authorization_Delta\", encodedKeys2)\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"Signin();\r",
									"setTimeout(async function(){await CreatePartner();}, 3000); \r",
									"setTimeout(async function(){await CreateAccount();}, 6000); \r",
									"setTimeout(async function(){await CreateThing();}, 8000); \r",
									"setTimeout(async function(){await CreateThingStateInfo();}, 9000); \r",
									"setTimeout(async function(){await ControlThing();}, 10000); \r",
									"setTimeout(async function(){await AsgardHTTPeSimRegister();}, 20000); \r",
									"setTimeout(async function(){}, 30000); //for wait value encodedKeys_Authorization_Delta"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-ais-UserName",
								"type": "text",
								"value": "{{x_ais_UserName_AisPartner}}"
							},
							{
								"key": "x-ais-OrderRef",
								"value": "{{x_ais_OrderRef_DeltaHTTP_fail}}{{current_timestamp}}"
							},
							{
								"key": "x-ais-OrderDesc",
								"type": "text",
								"value": "{{x_ais_OrderDesc_DeltaHTTP}}"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{Basic}} {{encodedKeys_Authorization_Delta}}"
							}
						],
						"url": {
							"raw": "{{url}}{{httpapis}}/api/delta/sim/v1/?Sensor=",
							"host": [
								"{{url}}{{httpapis}}"
							],
							"path": [
								"api",
								"delta",
								"sim",
								"v1",
								""
							],
							"query": [
								{
									"key": "Sensor",
									"value": ""
								}
							]
						},
						"description": "Type:Desire"
					},
					"response": []
				},
				{
					"name": "AsgardHTTPeSimDelta_TST_F3_0_2_003_TokenUntrustedOrInvalid.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var Basic = pm.environment.get(\"Basic\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to xAisOrderRef \"RemoveThing_\"\r",
									"var x_ais_OrderRef_RemoveThing = pm.globals.get(\"x_ais_OrderRef_RemoveThing\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"var x_ais_OrderDesc_RemoveThing = pm.globals.get(\"x_ais_OrderDesc_RemoveThing\");\r",
									"//get global variable to xAisOrderRef \"RemoveThingStateInfo_\"\r",
									"var x_ais_OrderRef_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderRef_RemoveThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThingStateInfo\"\r",
									"var x_ais_OrderDesc_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_RemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals AsgardHTTP --------------//\r",
									"//get global variable to x_ais_OrderRef \"DeltaHTTP_\"\r",
									"var x_ais_OrderRef_DeltaHTTP = pm.globals.get(\"x_ais_OrderRef_DeltaHTTP\");\r",
									"//get global variable to x_ais_OrderRef \"DeltaHTTPfail_\"\r",
									"var x_ais_OrderRef_DeltaHTTP_fail = pm.globals.get(\"x_ais_OrderRef_DeltaHTTP_fail\");\r",
									"//get global variable to x_ais_OrderDesc \"Get Delta from MG\"\r",
									"var x_ais_OrderDesc_DeltaHTTP = pm.globals.get(\"x_ais_OrderDesc_DeltaHTTP\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get url Remove --------------//\r",
									"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
									"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"var urlThingRemoveThing = pm.globals.get(\"urlThingRemoveThing\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"var urlThingRemoveThingStateInfo = pm.globals.get(\"urlThingRemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"RemovePartner is Success\"\r",
									"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
									"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
									"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
									"//get global variable to resultDescription \"RemoveThing is Success\"\r",
									"var resultDescriptionRemoveThing = pm.globals.get(\"resultDescriptionRemoveThing\");\r",
									"//get global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"var resultDescriptionRemoveThingStateInfo = pm.globals.get(\"resultDescriptionRemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 401\r",
									"var statusCodeUnauthorized = pm.globals.get(\"statusCodeUnauthorized\");\r",
									"//get global variable to resultCode \"40103\"\r",
									"var resultCodeTheTokenIsUntrustedOrInvalid = pm.globals.get(\"resultCodeTheTokenIsUntrustedOrInvalid\");\r",
									"//get global variable to resultDescription \"The token is Untrusted or Invalid.\"\r",
									"var resultDescriptionTheTokenIsUntrustedOrInvalid = pm.globals.get(\"resultDescriptionTheTokenIsUntrustedOrInvalid\");\r",
									"//------------------------------------------------------------//\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Asgard HTTP(eSim) Delta : Status code is \" + statusCodeUnauthorized, function () {\r",
									"    pm.response.to.have.status(statusCodeUnauthorized);\r",
									"});\r",
									"\r",
									"pm.test('Asgard HTTP(eSim) Delta : OperationStatus code is '+'\"'+ resultCodeTheTokenIsUntrustedOrInvalid +'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeTheTokenIsUntrustedOrInvalid);\r",
									"});\r",
									"\r",
									"pm.test('Asgard HTTP(eSim) Delta : OperationStatus DeveloperMessage is '+'\"'+ resultDescriptionTheTokenIsUntrustedOrInvalid+'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheTokenIsUntrustedOrInvalid);\r",
									"});\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// RemovePartner\r",
									" RemovePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemovePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemovePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemovePartner = {\r",
									"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemovePartner,\r",
									"            body: httpRequestRemovePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request RemovePartner');\r",
									"        let response = await reqPromise(optionsRemovePartner);\r",
									"        let jsonDataRemovePartner = await response.json();\r",
									"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
									"    \r",
									"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemovePartner is Success\r",
									"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveAccount\r",
									" RemoveAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemoveAccount = {\r",
									"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveAccount,\r",
									"            body: httpRequestRemoveAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveAccount');\r",
									"        let response = await reqPromise(optionsRemoveAccount);\r",
									"        let jsonDataRemoveAccount = await response.json();\r",
									"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
									"    \r",
									"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveAccount is Success\r",
									"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThing\r",
									" RemoveThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThing = {\r",
									"            url: url + provisioningapis + urlThingRemoveThing,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThing,\r",
									"            body: httpRequestRemoveThing\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveThing');\r",
									"        let response = await reqPromise(optionsRemoveThing);\r",
									"        let jsonDataRemoveThing = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThing)\r",
									"    \r",
									"        let operationStatusRemoveThing = await jsonDataRemoveThing.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThing : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThing : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThing is Success\r",
									"        pm.test('RemoveThing : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThing+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Description', resultDescriptionRemoveThing);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThingStateInfo\r",
									" RemoveThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"            \r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\"),\r",
									"                \"stateType\": fieldDataValue.CreateThingStateInfo.Type_Report, //Report\r",
									"                \"stateKey\": fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP //AA\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingRemoveThingStateInfo,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThingStateInfo,\r",
									"            body: httpRequestRemoveThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('response RemoveThingStateInfo');\r",
									"        let response = await reqPromise(optionsRemoveThingStateInfo);\r",
									"        let jsonDataRemoveThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThingStateInfo)\r",
									"    \r",
									"        let operationStatusRemoveThingStateInfo = await jsonDataRemoveThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThingStateInfo is Success\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThingStateInfo+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Description', resultDescriptionRemoveThingStateInfo);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"//---------------- LogDefaultValue --------------//\r",
									"//set variable to LogDefaultValue JSON.parse\r",
									"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
									"// console.log('LogDefaultValue',LogDefaultValue);\r",
									"//---------------- set globals Other --------------//\r",
									"\r",
									"var SearchLog = LogDefaultValue.SearchLog;\r",
									"// console.log('SearchLog',SearchLog);\r",
									"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
									"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
									"var kbn_version = SearchLog.header.kbn_version;\r",
									"var authorization = SearchLog.header.Authorization;\r",
									"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
									"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
									"var namespace = LogDefaultValue.Other.namespace;\r",
									"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
									"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
									"var header_x_ais_username = LogDefaultValue.Other.header_x_ais_username;\r",
									"var methodGet = LogDefaultValue.Other.methodGet;\r",
									"\r",
									"// Detail\r",
									"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
									"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
									"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
									"\r",
									"// Summary\r",
									"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
									"var identitySummary = \"\";\r",
									"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
									"\r",
									"// Asgard.Http.APIs\r",
									"var applicationName = LogDefaultValue.AsgardHTTP.applicationName;\r",
									"var cmdName = LogDefaultValue.AsgardHTTP.cmdNameDelta;\r",
									"var endPointNameRabbitMQ = LogDefaultValue.AsgardHTTP.endPointNameRabbitMQ;\r",
									"var containerId = LogDefaultValue.AsgardHTTP.containerId;\r",
									"var requestObjectUrlStaging = LogDefaultValue.AsgardHTTP.requestObjectUrlDeltaMgStaging;\r",
									"var urlDelta  = LogDefaultValue.AsgardHTTP.urlDelta;\r",
									"\r",
									"// Check CDR (Summary Log) and EDR (Detail Log)\r",
									"SearchLogFindTid = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSearchLogFindTid = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = x_ais_OrderRef_DeltaHTTP_fail + current_timestamp;\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestSearchLogFindTid = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"\r",
									"        let optionsSearchLogFindTid = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptSearchLogFindTid,\r",
									"            body: httpRequestSearchLogFindTid\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsSearchLogFindTid);\r",
									"        let jsonDataSearchLogFindTid = await response.json();\r",
									"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
									"        // console.log('hits',hits)\r",
									"  \r",
									"        // find tid\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            // let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"        \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            if(applicationNameValue == applicationName){\r",
									"                let tid = hits[i]._source.cauldron.tid;\r",
									"                pm.environment.set(\"tid\", tid);\r",
									"                break;\r",
									"           }\r",
									"        }\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"CheckLog = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCheckLog = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = pm.environment.get(\"tid\");\r",
									"\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestCheckLog = {\r",
									"            mode: 'raw',\r",
									"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"        let optionsCheckLog = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptCheckLog,\r",
									"            body: httpRequestCheckLog\r",
									"        }; \r",
									"        let response = await reqPromise(optionsCheckLog);\r",
									"        let jsonDataCheckLog = await response.json();\r",
									"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
									"        \r",
									"        // //200\r",
									"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });     \r",
									"        \r",
									"        let hits = jsonDataCheckLog.hits.hits\r",
									"        console.log('hits',hits)\r",
									"  \r",
									"        // find logType\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            //  let logType = hits[i]._source.cauldron.logType\r",
									"            let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"           \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            \r",
									"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
									"            // console.log('resultDataLog',resultDataLog)\r",
									"\r",
									"            let tidControl = x_ais_OrderRef_DeltaHTTP_fail  + current_timestamp;\r",
									"            // console.log(tidControl);\r",
									"            if(applicationNameValue == applicationName){\r",
									"                 \r",
									"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and Asgard.Http.APIs\r",
									"                    pm.test(\"Check Summary Log : Asgard_HTTP(eSim) Delta\" , function () {\r",
									"                        console.log(\"======== Check Summary Log ( Expected = Actual) [Asgard_HTTP(eSim) Delta] ==================\");\r",
									"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
									"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
									"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeTheTokenIsUntrustedOrInvalid);\r",
									"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionTheTokenIsUntrustedOrInvalid);\r",
									"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
									"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"identity : \" + JSON.stringify(resultDataLog.identity) + \" = \" + JSON.stringify(identitySummary));\r",
									"                        console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
									"\r",
									"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
									"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
									"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeTheTokenIsUntrustedOrInvalid); \r",
									"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionTheTokenIsUntrustedOrInvalid); \r",
									"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
									"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
									"                        pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
									"                    }); \r",
									"                }\r",
									"\r",
									"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and Asgard.Http.APIs\r",
									"\r",
									"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
									"                    // console.log('endPointNameValue ',endPointNameValue)\r",
									"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [Asgard_HTTP(eSim) Delta]\", function () {\r",
									"                        console.log(\"======== Check Detail Log ( Expected = Actual) [Asgard_HTTP(eSim) Delta] ==================\");\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
									"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
									"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
									"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.custom1.activityLog.processTime + \" = \" + resultDataLog.custom1.activityLog.processTime);\r",
									"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
									"\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
									"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
									"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
									"\r",
									"                        let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
									"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
									"                        let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
									"                            // console.log('jsonParseResponseObject',jsonParseResponseObject); \r",
									"                        let url = urlDelta; \r",
									"                        let x_ais_orderref = x_ais_OrderRef_DeltaHTTP_fail + current_timestamp;\r",
									"                        let x_ais_orderdesc = x_ais_OrderDesc_DeltaHTTP;\r",
									"                        let x_ais_userName = x_ais_UserName_AisPartner;\r",
									"                        // let authorization = Basic + ' ' + pm.environment.get(\"encodedKeys_Authorization_Delta\");\r",
									"                        let SensorKey = fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP;\r",
									"                        let sensor = pm.environment.get(\"random_Sensor\");\r",
									"                        let timestamp = pm.environment.get(\"timestamp\");\r",
									"\r",
									"                        if( endPointNameValue == undefined){\r",
									"                            // check requestObject\r",
									"                            // \"requestObject\":\"{\\\"url\\\":\\\"/api/delta/sim/v1/\\\",\\\"method\\\":\\\"GET\\\",\\\"headers\\\":{\\\"Cache-Control\\\":\\\"no-cache\\\",\\\"Content-Type\\\":\\\"application/json\\\",\\\"Accept\\\":\\\"*/*\\\",\\\"Accept-Encoding\\\":\\\"gzip,deflate,br\\\",\\\"Host\\\":\\\"mg-staging.sandais.com\\\",\\\"User-Agent\\\":\\\"PostmanRuntime/7.26.8\\\",\\\"Content-Length\\\":\\\"0\\\",\\\"x-real-ip\\\":\\\"58.8.214.174\\\",\\\"x-forwarded-for\\\":\\\"58.8.214.174\\\",\\\"x-forwarded-proto\\\":\\\"https\\\",\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"DeltaHTTPfail_202102152202488\\\",\\\"x-ais-orderdesc\\\":\\\"Get Delta from MG\\\",\\\"postman-token\\\":\\\"39c73573-b859-4b25-ba64-fcd730a64e31\\\",\\\"x-request-id\\\":\\\"bdbd82e1-bd55-4d55-867b-7309c7409cca\\\",\\\"x-b3-traceid\\\":\\\"70a08c1720dd610ede46b83096397592\\\",\\\"x-b3-spanid\\\":\\\"de46b83096397592\\\",\\\"x-b3-sampled\\\":\\\"0\\\",\\\"x-ais-SessionId\\\":\\\"1613404656995\\\"},\\\"queryString\\\":{\\\"Sensor\\\":\\\"\\\"},\\\"routeParamteters\\\":{}}\"\r",
									"\r",
									"                            // \\\"requestObject\\\":\\\"{ \\\\\\\"url\\\\\\\":\\\\\\\"/api/delta/sim/v1/\\\\\\\", \\\\\\\"method\\\\\\\":\\\\\\\"GET\\\\\\\", \\\\\\\"headers\\\\\\\":{ \\\\\\\"Cache-Control\\\\\\\":\\\\\\\"no-cache\\\\\\\", \\\\\\\"Content-Type\\\\\\\":\\\\\\\"application/json\\\\\\\", \\\\\\\"Accept\\\\\\\":\\\\\\\"*/*\\\\\\\", \\\\\\\"Accept-Encoding\\\\\\\":\\\\\\\"gzip, deflate, br\\\\\\\", \\\\\\\"Host\\\\\\\":\\\\\\\"mg-iot.sandais.com\\\\\\\", \\\\\\\"User-Agent\\\\\\\":\\\\\\\"PostmanRuntime/7.26.8\\\\\\\", \\\\\\\"Content-Length\\\\\\\":\\\\\\\"0\\\\\\\", \\\\\\\"x-real-ip\\\\\\\":\\\\\\\"182.232.183.255\\\\\\\", \\\\\\\"x-forwarded-for\\\\\\\":\\\\\\\"182.232.183.255, 10.233.65.1\\\\\\\", \\\\\\\"x-forwarded-proto\\\\\\\":\\\\\\\"http\\\\\\\", \\\\\\\"x-ais-username\\\\\\\":\\\\\\\"AisPartner\\\\\\\", \\\\\\\"x-ais-orderref\\\\\\\":\\\\\\\"DeltaHTTPfail_202105112205002\\\\\\\", \\\\\\\"x-ais-orderdesc\\\\\\\":\\\\\\\"Get Delta from MG\\\\\\\", \\\\\\\"postman-token\\\\\\\":\\\\\\\"a5cdd79f-dbdd-492e-adfc-54a41da53552\\\\\\\", \\\\\\\"x-envoy-external-address\\\\\\\":\\\\\\\"10.233.65.1\\\\\\\", \\\\\\\"x-request-id\\\\\\\":\\\\\\\"c4b36973-bc3d-41ff-920d-76b95e30fc39\\\\\\\", \\\\\\\"x-envoy-original-path\\\\\\\":\\\\\\\"/httpapis/api/delta/sim/v1/?Sensor\\\\\\\", \\\\\\\"x-b3-traceid\\\\\\\":\\\\\\\"9fbf5210cf06b982fc6d90fc15bc4edd\\\\\\\", \\\\\\\"x-b3-spanid\\\\\\\":\\\\\\\"b29bc1adac7d7cf3\\\\\\\", \\\\\\\"x-b3-parentspanid\\\\\\\":\\\\\\\"fc6d90fc15bc4edd\\\\\\\", \\\\\\\"x-b3-sampled\\\\\\\":\\\\\\\"0\\\\\\\", \\\\\\\"x-ais-SessionId\\\\\\\":\\\\\\\"1620746320793\\\\\\\" }, \\\\\\\"queryString\\\\\\\":{ \\\\\\\"Sensor\\\\\\\":\\\\\\\"\\\\\\\" }, \\\\\\\"routeParamteters\\\\\\\":{ } }\\\"\r",
									"\r",
									"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
									"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodGet);\r",
									"                            console.log(\"headers.x_ais_userName : \" + jsonParseRequestObject.headers[header_x_ais_username] + \" = \" + x_ais_userName);\r",
									"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
									"                            // console.log(\"headers.Authorization : \" + jsonParseRequestObject.headers.Authorization + \" = \" + authorization);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
									"                            pm.expect(jsonParseRequestObject.method).to.eql(methodGet);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_username]).to.eql(x_ais_userName);\r",
									"                            // pm.expect(jsonParseRequestObject.headers.Authorization).to.eql(authorization);\r",
									"\r",
									"                            console.log(\"queryString.Sensor : \" + JSON.stringify(jsonParseRequestObject.queryString.Sensor) + \" = \" + JSON.stringify(\"\"));\r",
									"                            console.log(\"routeParamteters : \" + JSON.stringify(jsonParseRequestObject.routeParamteters) + \" = \" + JSON.stringify({}));\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.queryString.Sensor).to.eql(\"\"); \r",
									"                            pm.expect(jsonParseRequestObject.routeParamteters).to.eql({}); \r",
									"\r",
									"                            // check responseObject\r",
									"                            // \"responseObject\":\"{\\\"OperationStatus\\\":{\\\"Code\\\":\\\"40103\\\",\\\"DeveloperMessage\\\":\\\"The token is Untrusted or Invalid.\\\"}}\"\r",
									"\r",
									"                            console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeTheTokenIsUntrustedOrInvalid);\r",
									"                            console.log(\"response.OperationStatus.DeveloperMessage : \" + jsonParseResponseObject.OperationStatus.DeveloperMessage + \" = \" + resultDescriptionTheTokenIsUntrustedOrInvalid); \r",
									"\r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeTheTokenIsUntrustedOrInvalid);  \r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheTokenIsUntrustedOrInvalid);  \r",
									"                        }\r",
									"                    }); \r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"setTimeout(function(){SearchLogFindTid();}, 40000); \r",
									"setTimeout(function(){CheckLog();}, 60000); \r",
									"\r",
									"setTimeout(function(){RemoveThingStateInfo();}, 70000); \r",
									"setTimeout(function(){RemoveThing();}, 80000); \r",
									"setTimeout(function(){RemoveAccount();}, 90000); \r",
									"setTimeout(function(){RemovePartner();}, 100000); \r",
									"\r",
									"setTimeout(function(){\r",
									"pm.environment.unset(\"current_timestamp\");\r",
									"pm.environment.unset(\"AccessToken\");\r",
									"pm.environment.unset(\"random_number\");\r",
									"pm.environment.unset(\"PartnerName\");\r",
									"pm.environment.unset(\"MerchantContact\");\r",
									"pm.environment.unset(\"CPID\");\r",
									"pm.environment.unset(\"GetResponse_PartnerId\");\r",
									"pm.environment.unset(\"AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountId\");\r",
									"pm.environment.unset(\"random_IM\");\r",
									"pm.environment.unset(\"random_ICCID\");\r",
									"pm.environment.unset(\"ThingName\");\r",
									"pm.environment.unset(\"GetResponse_ThingID\");\r",
									"pm.environment.unset(\"GetResponse_IMSI\");\r",
									"pm.environment.unset(\"encodedKeys_Authorization_Register\");\r",
									"pm.environment.unset(\"encodedKeys_Authorization_Delta\");\r",
									"pm.environment.unset(\"random_Sensor\");\r",
									"pm.environment.unset(\"random_Sensor_AsgardHTTP\");\r",
									"pm.environment.unset(\"GetResponse_ThingToken\");\r",
									"pm.environment.unset(\"tid\");\r",
									"pm.environment.unset(\"SensorKey_AsgardHTTP\");\r",
									"pm.environment.unset(\"timestamp\");\r",
									"}, 105000); \r",
									"setTimeout(async function(){}, 110000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var Username = pm.environment.get(\"Username\");\r",
									"var Password = pm.environment.get(\"Password\");\r",
									"\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"var controlapis = pm.environment.get(\"controlapis\");\r",
									"var httpapis = pm.environment.get(\"httpapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"//format YYYYMMDDHHMMSSS\r",
									"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
									"// console.log('currentTmestamp',currentTmestamp);\r",
									"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var Basic = pm.environment.get(\"Basic\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- statusCodeList --------------//\r",
									"//set variable to statusCodeList JSON.parse\r",
									"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
									"//set global variable to statusCode 200\r",
									"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
									"//set global variable to statusCode 201\r",
									"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
									"//set global variable to statusCode 401\r",
									"pm.globals.set(\"statusCodeUnauthorized\", statusCodeList.statusCodeUnauthorized);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultCodeList --------------//\r",
									"//set variable to resultCodeList JSON.parse\r",
									"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
									"//set global variable to resultCode \"20000\"\r",
									"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
									"//set global variable to resultCode \"20100\"\r",
									"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
									"//set global variable to resultCode \"40103\"\r",
									"pm.globals.set(\"resultCodeTheTokenIsUntrustedOrInvalid\", resultCodeList.resultCodeTheTokenIsUntrustedOrInvalid);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionSuccessList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
									"//set global variable to resultDescription \"SignInProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
									"//set global variable to resultDescription \"CreatePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
									"//set global variable to resultDescription \"CreateAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
									"//set global variable to resultDescription \"CreateThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThing\", resultDescriptionSuccessList.resultDescriptionCreateThing);\r",
									"//set global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThingStateInfo\", resultDescriptionSuccessList.resultDescriptionCreateThingStateInfo);\r",
									"//set global variable to resultDescription \"RemovePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
									"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
									"//set global variable to resultDescription \"RemoveThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThing\", resultDescriptionSuccessList.resultDescriptionRemoveThing);\r",
									"//set global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThingStateInfo\", resultDescriptionSuccessList.resultDescriptionRemoveThingStateInfo);\r",
									"//set global variable to resultDescription \"ControlOneThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessControlOneThing\", resultDescriptionSuccessList.resultDescriptionSuccessControlOneThing);\r",
									"//set global variable to resultDescription \"Register is Success\"\r",
									"pm.globals.set(\"resultDescriptionRegisterIsSuccess\", resultDescriptionSuccessList.resultDescriptionRegisterIsSuccess);\r",
									"//set global variable to resultDescription \"DeltaProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionDeltaProcessIsSuccess\", resultDescriptionSuccessList.resultDescriptionDeltaProcessIsSuccess);\r",
									"//set global variable to resultDescription \"The requested operation was successfully.\"\r",
									"pm.globals.set(\"resultDescriptionTheRequestedOperationWasSuccessfully\", resultDescriptionSuccessList.resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionErrorList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
									"//set global variable to resultDescription \"The token is Untrusted or Invalid.\"\r",
									"pm.globals.set(\"resultDescriptionTheTokenIsUntrustedOrInvalid\", resultDescriptionErrorList.resultDescriptionTheTokenIsUntrustedOrInvalid);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- HeaderList --------------//\r",
									"//set variable to HeaderList JSON.parse\r",
									"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
									"//---------------- set globals Other --------------//\r",
									"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
									"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
									"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
									"//set global variable to kbn-versio \"7.5.1\"\r",
									"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Signin_ --------------//\r",
									"//set global variable to x_ais_OrderRef \"Signin_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreatePartner --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
									"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
									"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
									"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreateAccount --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
									"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
									"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Thing --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThing\", HeaderList.Thing.x_ais_OrderRef_CreateThing);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThing\", HeaderList.Thing.x_ais_OrderDesc_CreateThing);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThing\", HeaderList.Thing.x_ais_OrderRef_RemoveThing);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThing\", HeaderList.Thing.x_ais_OrderDesc_RemoveThing);\r",
									"//set global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_RemoveThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_RemoveThingStateInfo);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Control --------------//\r",
									"//set global variable to x_ais_OrderRef \"ControlThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ControlThing\", HeaderList.Control.x_ais_OrderRef_ControlThing);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals AsgardHTTP --------------//\r",
									"//set global variable to x_ais_OrderRef \"RegisHTTP_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RegisHTTP\", HeaderList.AsgardHTTP.x_ais_OrderRef_RegisHTTP);\r",
									"//set global variable to x_ais_OrderDesc \"Register Thing in MG\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RegisHTTP\", HeaderList.AsgardHTTP.x_ais_OrderDesc_RegisHTTP);\r",
									"//set global variable to x_ais_OrderRef \"DeltaHTTP_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_DeltaHTTP\", HeaderList.AsgardHTTP.x_ais_OrderRef_DeltaHTTP);\r",
									"//set global variable to x_ais_OrderRef \"DeltaHTTPfail_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_DeltaHTTP_fail\", HeaderList.AsgardHTTP.x_ais_OrderRef_DeltaHTTP_fail);\r",
									"//set global variable to x_ais_OrderDesc \"Get Delta from MG\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_DeltaHTTP\", HeaderList.AsgardHTTP.x_ais_OrderDesc_DeltaHTTP);\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"SignInProcess is Success\"\r",
									"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
									"//get global variable to resultDescription \"CreatePartner is Success\"\r",
									"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
									"//get global variable to resultDescription \"CreateAccount is Success\"\r",
									"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
									"//get global variable to resultDescription \"CreateThing is Success\"\r",
									"var resultDescriptionCreateThing = pm.globals.get(\"resultDescriptionCreateThing\");\r",
									"//get global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"var resultDescriptionCreateThingStateInfo = pm.globals.get(\"resultDescriptionCreateThingStateInfo\");\r",
									"//get global variable to resultDescription \"ControlOneThing is Success\"\r",
									"var resultDescriptionSuccessControlOneThing = pm.globals.get(\"resultDescriptionSuccessControlOneThing\");\r",
									"//get global variable to resultDescription \"Register is Success\"\r",
									"var resultDescriptionRegisterIsSuccess = pm.globals.get(\"resultDescriptionRegisterIsSuccess\");\r",
									"//get global variable to resultDescription \"The requested operation was successfully.\"\r",
									"var resultDescriptionTheRequestedOperationWasSuccessfully = pm.globals.get(\"resultDescriptionTheRequestedOperationWasSuccessfully\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- urlRouteList --------------//\r",
									"//set variable to urlRouteList JSON.parse\r",
									"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
									"//---------------- set url Create --------------//\r",
									"//set global variable to url \"/api/v1/auth/signin\"\r",
									"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
									"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
									"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"pm.globals.set(\"urlThingCreateThing\", urlRouteList.Thing.urlThingCreateThing);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"pm.globals.set(\"urlThingCreateThingStateInfo\", urlRouteList.Thing.urlThingCreateThingStateInfo);\r",
									"//set global variable to url \"/api/v1/Control/Thing\"\r",
									"pm.globals.set(\"urlControlThing\", urlRouteList.Control.urlControlThing);\r",
									"//set global variable to url \"/api/register/sim/v1\"\r",
									"pm.globals.set(\"urlAsgardHTTPeSimRegister\", urlRouteList.AsgardHTTPeSim.urlAsgardHTTPeSimRegister);\r",
									"//set global variable to url \"/api/delta/sim/v1/?Sensor\"\r",
									"pm.globals.set(\"urlAsgardHTTPeSimDelta\", urlRouteList.AsgardHTTPeSim.urlAsgardHTTPeSimDelta);\r",
									"//---------------- get url Create --------------//\r",
									"//get global variable to url \"/api/v1/auth/signin\"\r",
									"var urlSignin = pm.globals.get(\"urlSignin\");\r",
									"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
									"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"var urlThingCreateThing = pm.globals.get(\"urlThingCreateThing\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"var urlThingCreateThingStateInfo = pm.globals.get(\"urlThingCreateThingStateInfo\");\r",
									"//get global variable to url \"/api/v1/Control/Thing\"\r",
									"var urlControlThing = pm.globals.get(\"urlControlThing\");\r",
									"//get global variable to url \"/api/register/sim/v1\"\r",
									"var urlAsgardHTTPeSimRegister = pm.globals.get(\"urlAsgardHTTPeSimRegister\");\r",
									"//get global variable to url \"/api/delta/sim/v1/?Sensor\"\r",
									"var urlAsgardHTTPeSimDelta = pm.globals.get(\"urlAsgardHTTPeSimDelta\");\r",
									"//---------------- set url Remove --------------//\r",
									"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
									"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"pm.globals.set(\"urlThingRemoveThing\", urlRouteList.Thing.urlThingRemoveThing);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"pm.globals.set(\"urlThingRemoveThingStateInfo\", urlRouteList.Thing.urlThingRemoveThingStateInfo);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Signin_ --------------//\r",
									"//get global variable to x_ais_OrderRef \"Signin_\"\r",
									"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"var x_ais_OrderRef_CreateThing = pm.globals.get(\"x_ais_OrderRef_CreateThing\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"var x_ais_OrderDesc_CreateThing = pm.globals.get(\"x_ais_OrderDesc_CreateThing\");\r",
									"//get global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"var x_ais_OrderRef_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderRef_CreateThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"var x_ais_OrderDesc_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_CreateThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Control --------------//\r",
									"//get global variable to x_ais_OrderRef \"ControlThing_\"\r",
									"var x_ais_OrderRef_ControlThing = pm.globals.get(\"x_ais_OrderRef_ControlThing\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals AsgardHTTP --------------//\r",
									"//get global variable to x_ais_OrderRef \"RegisHTTP_\"\r",
									"var x_ais_OrderRef_RegisHTTP = pm.globals.get(\"x_ais_OrderRef_RegisHTTP\");\r",
									"//get global variable to x_ais_OrderDesc \"Register Thing in MG\"\r",
									"var x_ais_OrderDesc_RegisHTTP = pm.globals.get(\"x_ais_OrderDesc_RegisHTTP\");\r",
									"//------------------------------------------------------------//\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// Signin get token\r",
									"Signin = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSignin = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_Signin + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_UserAuthentication,\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestSignin = {\r",
									"            mode: 'raw',\r",
									"            raw:\r",
									"                JSON.stringify({\r",
									"                    username: Username,\r",
									"                    password: Password\r",
									"                })\r",
									"        };\r",
									"\r",
									"        let optionsSignin = {\r",
									"            url: url + provisioningapis + urlSignin,\r",
									"            method: 'POST',\r",
									"            header: headersOptSignin,\r",
									"            body: httpRequestSignin\r",
									"        };\r",
									"        // console.log('request Signin');\r",
									"        let response = await reqPromise(optionsSignin);\r",
									"        let jsonDataSignin = await response.json();\r",
									"\r",
									"        // setAccessToken\r",
									"        await pm.environment.set(\"AccessToken\", jsonDataSignin.AccessToken);\r",
									"\r",
									"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('Signin : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // SignInProcess is Success\r",
									"        pm.test('Signin : OperationStatus Description is ' + '\"' + resultDescriptionSuccessSignIn + '\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
									"        });\r",
									"\r",
									"        //set random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //set PartnerName\r",
									"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
									"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
									"        //set MerchantContact\r",
									"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
									"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
									"        // set CPID\r",
									"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
									"        pm.environment.set(\"CPID\", CPIDValue)\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreatePartner\r",
									"CreatePartner = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreatePartner = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreatePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreatePartner,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreatePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
									"                \"PartnerType\": [\r",
									"                    \"Supplier\",\r",
									"                    \"Customer\"\r",
									"                ],\r",
									"                \"PartnerDetail\": {\r",
									"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
									"                    \"CPID\": pm.environment.get(\"CPID\")\r",
									"                },\r",
									"                \"Property\": {\r",
									"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreatePartner = {\r",
									"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreatePartner,\r",
									"            body: httpRequestCreatePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsCreatePartner);\r",
									"        let jsonDataCreatePartner = await response.json();\r",
									"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
									"\r",
									"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreatePartner : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreatePartner is Success\r",
									"        pm.test('CreatePartner : OperationStatus Description is ' + '\"' + resultDescriptionCreatePartner + '\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
									"        });\r",
									"\r",
									"        //GetResponse_PartnerId\r",
									"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
									"\r",
									"        //Accountname\r",
									"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
									"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateAccount\r",
									"CreateAccount = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateAccount = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateAccount,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreateAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateAccount = {\r",
									"            url: url + provisioningapis + urlAccountCreateAccount,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateAccount,\r",
									"            body: httpRequestCreateAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateAccount');\r",
									"        let response = await reqPromise(optionsCreateAccount);\r",
									"        let jsonDataCreateAccount = await response.json();\r",
									"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
									"\r",
									"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateAccount : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateAccount is Success\r",
									"        pm.test('CreateAccount : OperationStatus Description is ' + '\"' + resultDescriptionCreateAccount + '\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
									"        });\r",
									"        // GetResponse_AccountName\r",
									"        pm.environment.set(\"GetResponse_AccountName\", jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
									"        // GetResponse_AccountId\r",
									"        pm.environment.set(\"GetResponse_AccountId\", jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
									"        // random_IM\r",
									"        pm.environment.set(\"random_IM\", _.random(10000000, 99999999) + \" \" + _.random(1000000, 9999999))\r",
									"        // random_ICCID\r",
									"        pm.environment.set(\"random_ICCID\", _.random(1000000, 9999999) + \" \" + _.random(100000, 999999))\r",
									"        // random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //ThingName\r",
									"        let thingNameValue = fieldDataValue.Thing.ThingNameValue; // \"Sensor_TestThingName\"\r",
									"        pm.environment.set(\"ThingName\", thingNameValue + pm.environment.get(\"random_number\"))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThing\r",
									"CreateThing = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThing = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateThing + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateThing,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey': pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreateThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingName\": pm.environment.get(\"ThingName\"),\r",
									"                \"IMEI\": pm.environment.get(\"random_IM\"),\r",
									"                \"IMSI\": pm.environment.get(\"random_IM\"),\r",
									"                \"ICCID\": pm.environment.get(\"random_ICCID\"),\r",
									"                \"RouteUrl\": fieldDataValue.Thing.RouteUrlValue , //[\"http://10.12.3.4:2019/api/information/AddInformation\"]\r",
									"                \"RouteInfo\": {\r",
									"                    \"MIMO_ID\": fieldDataValue.Thing.RouteInfoMIMOIDValue , //\"606edada\"\r",
									"                    \"MIMO_SerialNo\": fieldDataValue.Thing.RouteInfoMIMOSerialNoValue //5466758878\r",
									"                },\r",
									"                \"RouteFlag\": {\r",
									"                    \"ThingName\": fieldDataValue.Thing.RouteFlagThingNameValue , //true\r",
									"                    \"ThingToken\": fieldDataValue.Thing.RouteFlagThingTokenValue, //true\r",
									"                    \"IMEI\": fieldDataValue.Thing.RouteFlagIMEIValue, //true\r",
									"                    \"ICCID\": fieldDataValue.Thing.RouteFlagICCIDValue, //true\r",
									"                    \"RouteInfo\": fieldDataValue.Thing.RouteFlagRouteInfoValue //true\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateThing = {\r",
									"            url: url + provisioningapis + urlThingCreateThing,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThing,\r",
									"            body: httpRequestCreateThing\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThing');\r",
									"        let response = await reqPromise(optionsCreateThing);\r",
									"        let jsonDataCreateThing = await response.json();\r",
									"        // console.log('jsonDataCreateThing',jsonDataCreateThing)\r",
									"\r",
									"        let operationStatusCreateThing = await jsonDataCreateThing.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateThing : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateThing : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateThing is Success\r",
									"        pm.test('CreateThing : OperationStatus Description is ' + '\"' + resultDescriptionCreateThing + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Description', resultDescriptionCreateThing);\r",
									"        });\r",
									"\r",
									"        pm.environment.set(\"GetResponse_ThingID\", jsonDataCreateThing.ThingInfo.ThingId)\r",
									"        pm.environment.set(\"GetResponse_IMSI\", jsonDataCreateThing.ThingInfo.IMSI)\r",
									"        \r",
									"        let keys = pm.environment.get(\"GetResponse_IMSI\") + \":\" + pm.environment.get(\"IpAddress\");\r",
									"        // console.log(\"keys\", keys);\r",
									"        let encodedKeys = CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(keys));\r",
									"        pm.environment.set(\"encodedKeys_Authorization_Register\", encodedKeys);\r",
									"\r",
									"        //Get Random Sensor \r",
									"        pm.environment.set(\"random_Sensor\", _.random(100, 999))\r",
									"\r",
									"        //Get Random Sensor AsgardHTTP\r",
									"        pm.environment.set(\"random_Sensor_AsgardHTTP\", _.random(100, 999))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThingStateInfo\r",
									"CreateThingStateInfo = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThingStateInfo = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateThingStateInfo,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey': pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        // {\"AA\" : pm.environment.get(\"random_Sensor\")}\r",
									"        let sensorValue = {};\r",
									"        sensorValue[fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP] = pm.environment.get(\"random_Sensor\");\r",
									"        // console.log('sensorValue',sensorValue);\r",
									"        \r",
									"        let httpRequestCreateThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": [\r",
									"                    pm.environment.get(\"GetResponse_ThingID\")\r",
									"                ],\r",
									"                \"Type\": fieldDataValue.CreateThingStateInfo.Type_Report,\r",
									"                \"Sensor\": sensorValue\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingCreateThingStateInfo,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThingStateInfo,\r",
									"            body: httpRequestCreateThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThingStateInfo');\r",
									"        let response = await reqPromise(optionsCreateThingStateInfo);\r",
									"        let jsonDataCreateThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataCreateThingStateInfo',jsonDataCreateThingStateInfo)\r",
									"\r",
									"        let operationStatusCreateThingStateInfo = await jsonDataCreateThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"CreateThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //CreateThingStateInfo is Success\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Description is ' + '\"' + resultDescriptionCreateThingStateInfo + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Description', resultDescriptionCreateThingStateInfo);\r",
									"        });\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// ControlThing\r",
									"ControlThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptControlThing = {\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_ControlThing + current_timestamp,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Content-Type':ContentType_ApplicationJson\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        // {\"AA\" : pm.environment.get(\"random_Sensor_AsgardHTTP\")}\r",
									"        let sensorValue = {};\r",
									"        sensorValue[fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP] = pm.environment.get(\"random_Sensor_AsgardHTTP\");\r",
									"        // console.log('sensorValue',sensorValue);\r",
									"\r",
									"        let httpRequestControlThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\"),\r",
									"                \"Sensors\": sensorValue\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsControlThing = {\r",
									"            url: url + controlapis + urlControlThing,\r",
									"            method: 'POST',\r",
									"            header: headersOptControlThing,\r",
									"            body: httpRequestControlThing\r",
									"        };\r",
									"\r",
									"        // console.log('response ControlThing');\r",
									"        let response = await reqPromise(optionsControlThing);\r",
									"        let jsonDataControlThing = await response.json();\r",
									"        // console.log('jsonDataControlThing',jsonDataControlThing)\r",
									"    \r",
									"        let operationStatusControlThing = await jsonDataControlThing.operationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"ControlThing : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('ControlThing : OperationStatus code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusControlThing).to.have.property('code', resultCodeSuccess);\r",
									"        });\r",
									"        //ControlOneThing is Success\r",
									"        pm.test('ControlThing : OperationStatus description is '+'\"'+ resultDescriptionSuccessControlOneThing+'\"', function () {\r",
									"            pm.expect(operationStatusControlThing).to.have.property('description', resultDescriptionSuccessControlOneThing);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// AsgardHTTPeSimRegister\r",
									"AsgardHTTPeSimRegister = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptAsgardHTTPeSimRegister = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_RegisHTTP + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_RegisHTTP,\r",
									"            'Authorization': Basic + ' ' + pm.environment.get(\"encodedKeys_Authorization_Register\")\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestAsgardHTTPeSimRegister = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({})\r",
									"        };\r",
									"\r",
									"        let optionsAsgardHTTPeSimRegister = {\r",
									"            url: url + httpapis + urlAsgardHTTPeSimRegister,\r",
									"            method: 'POST',\r",
									"            header: headersOptAsgardHTTPeSimRegister,\r",
									"            body: httpRequestAsgardHTTPeSimRegister\r",
									"        };\r",
									"\r",
									"        // console.log('request AsgardHTTPEsimRegister');\r",
									"        let response = await reqPromise(optionsAsgardHTTPeSimRegister);\r",
									"        let jsonDataAsgardHTTPeSimRegister = await response.json();\r",
									"        // console.log('jsonDataCreateThingStateInfo',jsonDataAsgardHTTPeSimRegister)\r",
									"        let operationStatusAsgardHTTPeSimRegister = await jsonDataAsgardHTTPeSimRegister.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"Asgard HTTP(eSim) Register : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('Asgard HTTP(eSim) Register : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusAsgardHTTPeSimRegister).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"\r",
									"        // The requested operation was successfully.\r",
									"        pm.test('Asgard HTTP(eSim) Register : OperationStatus DeveloperMessage is ' + '\"' + resultDescriptionTheRequestedOperationWasSuccessfully + '\"', function () {\r",
									"            pm.expect(operationStatusAsgardHTTPeSimRegister).to.have.property('DeveloperMessage', resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"        });\r",
									"        await pm.environment.set(\"GetResponse_ThingToken\", jsonDataAsgardHTTPeSimRegister.ThingToken)\r",
									"        let keys2 = await pm.environment.get(\"GetResponse_ThingToken\") + \":\" + pm.environment.get(\"IpAddress\");        \r",
									"        let encodedKeys2 = await CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(keys2));\r",
									"        pm.environment.set(\"encodedKeys_Authorization_Delta\", encodedKeys2)\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"Signin();\r",
									"setTimeout(async function(){await CreatePartner();}, 3000); \r",
									"setTimeout(async function(){await CreateAccount();}, 6000); \r",
									"setTimeout(async function(){await CreateThing();}, 8000); \r",
									"setTimeout(async function(){await CreateThingStateInfo();}, 9000); \r",
									"setTimeout(async function(){await ControlThing();}, 10000); \r",
									"setTimeout(async function(){await AsgardHTTPeSimRegister();}, 20000); \r",
									"setTimeout(async function(){}, 30000); //for wait value encodedKeys_Authorization_Delta"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-ais-UserName",
								"type": "text",
								"value": "{{x_ais_UserName_AisPartner}}"
							},
							{
								"key": "x-ais-OrderRef",
								"value": "{{x_ais_OrderRef_DeltaHTTP_fail}}{{current_timestamp}}"
							},
							{
								"key": "x-ais-OrderDesc",
								"type": "text",
								"value": "{{x_ais_OrderDesc_DeltaHTTP}}"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{Basic}} {{encodedKeys_Authorization_Delta}}",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{url}}{{httpapis}}/api/delta/sim/v1/?Sensor=",
							"host": [
								"{{url}}{{httpapis}}"
							],
							"path": [
								"api",
								"delta",
								"sim",
								"v1",
								""
							],
							"query": [
								{
									"key": "Sensor",
									"value": ""
								}
							]
						},
						"description": "Type:Desire"
					},
					"response": []
				},
				{
					"name": "AsgardHTTPeSimDelta_TST_F3_0_2_004_Error_AccountIdNotfound",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var Basic = pm.environment.get(\"Basic\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to xAisOrderRef \"RemoveThing_\"\r",
									"var x_ais_OrderRef_RemoveThing = pm.globals.get(\"x_ais_OrderRef_RemoveThing\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"var x_ais_OrderDesc_RemoveThing = pm.globals.get(\"x_ais_OrderDesc_RemoveThing\");\r",
									"//get global variable to xAisOrderRef \"RemoveThingStateInfo_\"\r",
									"var x_ais_OrderRef_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderRef_RemoveThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThingStateInfo\"\r",
									"var x_ais_OrderDesc_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_RemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals AsgardHTTP --------------//\r",
									"//get global variable to x_ais_OrderRef \"DeltaHTTP_\"\r",
									"var x_ais_OrderRef_DeltaHTTP = pm.globals.get(\"x_ais_OrderRef_DeltaHTTP\");\r",
									"//get global variable to x_ais_OrderRef \"DeltaHTTPfail_\"\r",
									"var x_ais_OrderRef_DeltaHTTP_fail = pm.globals.get(\"x_ais_OrderRef_DeltaHTTP_fail\");\r",
									"//get global variable to x_ais_OrderDesc \"Get Delta from MG\"\r",
									"var x_ais_OrderDesc_DeltaHTTP = pm.globals.get(\"x_ais_OrderDesc_DeltaHTTP\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get url Remove --------------//\r",
									"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
									"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"var urlThingRemoveThing = pm.globals.get(\"urlThingRemoveThing\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"var urlThingRemoveThingStateInfo = pm.globals.get(\"urlThingRemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"RemovePartner is Success\"\r",
									"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
									"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
									"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
									"//get global variable to resultDescription \"RemoveThing is Success\"\r",
									"var resultDescriptionRemoveThing = pm.globals.get(\"resultDescriptionRemoveThing\");\r",
									"//get global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"var resultDescriptionRemoveThingStateInfo = pm.globals.get(\"resultDescriptionRemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 404\r",
									"var statusCodeNotFound = pm.globals.get(\"statusCodeNotFound\");\r",
									"//get global variable to resultCode \"40400\"\r",
									"var resultCodeNotFound = pm.globals.get(\"resultCodeNotFound\");\r",
									"//get global variable to resultDescription \"The requested operation could not be found.\"\r",
									"var resultDescriptionTheRequestedOperationCouldNotBeFound = pm.globals.get(\"resultDescriptionTheRequestedOperationCouldNotBeFound\");\r",
									"//------------------------------------------------------------//\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Asgard HTTP(eSim) Delta : Status code is \" + statusCodeNotFound, function () {\r",
									"    pm.response.to.have.status(statusCodeNotFound);\r",
									"});\r",
									"\r",
									"pm.test('Asgard HTTP(eSim) Delta : operationStatus code is '+'\"'+ resultCodeNotFound +'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeNotFound);\r",
									"});\r",
									"\r",
									"pm.test('Asgard HTTP(eSim) Delta : operationStatus DeveloperMessage is '+'\"'+ resultDescriptionTheRequestedOperationCouldNotBeFound+'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheRequestedOperationCouldNotBeFound);\r",
									"});\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// RemovePartner\r",
									" RemovePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemovePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemovePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemovePartner = {\r",
									"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemovePartner,\r",
									"            body: httpRequestRemovePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request RemovePartner');\r",
									"        let response = await reqPromise(optionsRemovePartner);\r",
									"        let jsonDataRemovePartner = await response.json();\r",
									"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
									"    \r",
									"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemovePartner is Success\r",
									"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveAccount\r",
									" RemoveAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemoveAccount = {\r",
									"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveAccount,\r",
									"            body: httpRequestRemoveAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveAccount');\r",
									"        let response = await reqPromise(optionsRemoveAccount);\r",
									"        let jsonDataRemoveAccount = await response.json();\r",
									"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
									"    \r",
									"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveAccount is Success\r",
									"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThing\r",
									" RemoveThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThing = {\r",
									"            url: url + provisioningapis + urlThingRemoveThing,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThing,\r",
									"            body: httpRequestRemoveThing\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveThing');\r",
									"        let response = await reqPromise(optionsRemoveThing);\r",
									"        let jsonDataRemoveThing = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThing)\r",
									"    \r",
									"        let operationStatusRemoveThing = await jsonDataRemoveThing.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThing : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThing : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThing is Success\r",
									"        pm.test('RemoveThing : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThing+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Description', resultDescriptionRemoveThing);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThingStateInfo\r",
									" RemoveThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"            \r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\"),\r",
									"                \"stateType\": fieldDataValue.CreateThingStateInfo.Type_Report, //Report\r",
									"                \"stateKey\": fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP //AA\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingRemoveThingStateInfo,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThingStateInfo,\r",
									"            body: httpRequestRemoveThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('response RemoveThingStateInfo');\r",
									"        let response = await reqPromise(optionsRemoveThingStateInfo);\r",
									"        let jsonDataRemoveThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThingStateInfo)\r",
									"    \r",
									"        let operationStatusRemoveThingStateInfo = await jsonDataRemoveThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThingStateInfo is Success\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThingStateInfo+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Description', resultDescriptionRemoveThingStateInfo);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"//---------------- LogDefaultValue --------------//\r",
									"//set variable to LogDefaultValue JSON.parse\r",
									"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
									"// console.log('LogDefaultValue',LogDefaultValue);\r",
									"//---------------- set globals Other --------------//\r",
									"\r",
									"var SearchLog = LogDefaultValue.SearchLog;\r",
									"// console.log('SearchLog',SearchLog);\r",
									"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
									"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
									"var kbn_version = SearchLog.header.kbn_version;\r",
									"var authorization = SearchLog.header.Authorization;\r",
									"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
									"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
									"var namespace = LogDefaultValue.Other.namespace;\r",
									"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
									"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
									"var header_x_ais_username = LogDefaultValue.Other.header_x_ais_username;\r",
									"var methodGet = LogDefaultValue.Other.methodGet;\r",
									"\r",
									"// Detail\r",
									"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
									"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
									"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
									"\r",
									"// Summary\r",
									"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
									"var identitySummary = \"\";\r",
									"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
									"\r",
									"// Asgard.Http.APIs\r",
									"var applicationName = LogDefaultValue.AsgardHTTP.applicationName;\r",
									"var cmdName = LogDefaultValue.AsgardHTTP.cmdNameDelta;\r",
									"var endPointNameRabbitMQ = LogDefaultValue.AsgardHTTP.endPointNameRabbitMQ;\r",
									"var containerId = LogDefaultValue.AsgardHTTP.containerId;\r",
									"var requestObjectUrlStaging = LogDefaultValue.AsgardHTTP.requestObjectUrlDeltaMgStaging;\r",
									"var urlDelta  = LogDefaultValue.AsgardHTTP.urlDelta;\r",
									"\r",
									"// Check CDR (Summary Log) and EDR (Detail Log)\r",
									"SearchLogFindTid = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSearchLogFindTid = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = x_ais_OrderRef_DeltaHTTP_fail + current_timestamp;\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestSearchLogFindTid = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"\r",
									"        let optionsSearchLogFindTid = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptSearchLogFindTid,\r",
									"            body: httpRequestSearchLogFindTid\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsSearchLogFindTid);\r",
									"        let jsonDataSearchLogFindTid = await response.json();\r",
									"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
									"        // console.log('hits',hits)\r",
									"  \r",
									"        // find tid\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            // let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"        \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            if(applicationNameValue == applicationName){\r",
									"                let tid = hits[i]._source.cauldron.tid;\r",
									"                pm.environment.set(\"tid\", tid);\r",
									"                break;\r",
									"           }\r",
									"        }\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"CheckLog = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCheckLog = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = pm.environment.get(\"tid\");\r",
									"\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestCheckLog = {\r",
									"            mode: 'raw',\r",
									"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"        let optionsCheckLog = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptCheckLog,\r",
									"            body: httpRequestCheckLog\r",
									"        }; \r",
									"        let response = await reqPromise(optionsCheckLog);\r",
									"        let jsonDataCheckLog = await response.json();\r",
									"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
									"        \r",
									"        // //200\r",
									"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });     \r",
									"        \r",
									"        let hits = jsonDataCheckLog.hits.hits\r",
									"        console.log('hits',hits)\r",
									"  \r",
									"        // find logType\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            //  let logType = hits[i]._source.cauldron.logType\r",
									"            let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"           \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            \r",
									"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
									"            // console.log('resultDataLog',resultDataLog)\r",
									"\r",
									"            let tidControl = x_ais_OrderRef_DeltaHTTP_fail  + current_timestamp;\r",
									"            // console.log(tidControl);\r",
									"            if(applicationNameValue == applicationName){\r",
									"                 \r",
									"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and Asgard.Http.APIs\r",
									"                    pm.test(\"Check Summary Log : Asgard_HTTP(eSim) Delta\" , function () {\r",
									"                        console.log(\"======== Check Summary Log ( Expected = Actual) [Asgard_HTTP(eSim) Delta] ==================\");\r",
									"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
									"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
									"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeNotFound);\r",
									"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionTheRequestedOperationCouldNotBeFound);\r",
									"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
									"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"identity : \" + JSON.stringify(resultDataLog.identity) + \" = \" + JSON.stringify(identitySummary));\r",
									"                        // console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
									"\r",
									"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
									"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
									"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeNotFound); \r",
									"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionTheRequestedOperationCouldNotBeFound); \r",
									"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
									"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
									"                        // pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
									"\r",
									"                        // check custom\r",
									"                        // \\\"custom\\\":{ \\\"endPointSummary\\\":[ { \\\"no\\\":\\\"1\\\", \\\"endPointName\\\":\\\"db.ThingsCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:Inquiry was Success\\\", \\\"processTime\\\":0.0008 } ] }\r",
									"\r",
									"                        let custom = resultDataLog.custom.endPointSummary;\r",
									"                        let countCustom = custom.length;\r",
									"                       \r",
									"                        // [\"db.ThingsCollection\"]\r",
									"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_Asgard_HTTP_eSim_Delta_002_004_005_006;\r",
									"                        // [\"20000:Inquiry was Success\"]\r",
									"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_Asgard_HTTP_eSim_Delta_002_004_005_006;\r",
									"                        let countCustomStep = dataEndPointName.length;\r",
									"\r",
									"                        console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep);\r",
									"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
									"                        \r",
									"                        for(let i=0;i<countCustomStep;i++){\r",
									"                            let no = custom[i].no;\r",
									"                            let valueEndPointName = custom[i].endPointName;\r",
									"                            let valueResponseStatus = custom[i].responseStatus;\r",
									"                            // console.log(\"i\",i);\r",
									"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
									"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
									"\r",
									"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString());\r",
									"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i]);\r",
									"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i]);\r",
									"\r",
									"                            pm.expect(no).to.eql((i+1).toString()); \r",
									"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
									"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]); \r",
									"                        }\r",
									"                    }); \r",
									"                }\r",
									"\r",
									"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and Asgard.Http.APIs\r",
									"\r",
									"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
									"                    // console.log('endPointNameValue ',endPointNameValue)\r",
									"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [Asgard_HTTP(eSim) Delta]\", function () {\r",
									"                        console.log(\"======== Check Detail Log ( Expected = Actual) [Asgard_HTTP(eSim) Delta] ==================\");\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
									"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
									"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
									"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.custom1.activityLog.processTime + \" = \" + resultDataLog.custom1.activityLog.processTime);\r",
									"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
									"\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
									"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
									"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
									"\r",
									"                        let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
									"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
									"                        let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
									"                            // console.log('jsonParseResponseObject',jsonParseResponseObject); \r",
									"                        let url = urlDelta; \r",
									"                        let x_ais_orderref = x_ais_OrderRef_DeltaHTTP_fail + current_timestamp;\r",
									"                        let x_ais_orderdesc = x_ais_OrderDesc_DeltaHTTP;\r",
									"                        let x_ais_userName = x_ais_UserName_AisPartner;\r",
									"                        let authorization = Basic + ' ' + pm.environment.get(\"encodedKeys_Authorization_Delta\");\r",
									"                        let SensorKey = fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP;\r",
									"                        let sensor = pm.environment.get(\"random_Sensor\");\r",
									"                        let timestamp = pm.environment.get(\"timestamp\");\r",
									"\r",
									"                        if( endPointNameValue == undefined){\r",
									"                            // check requestObject\r",
									"                            // \"requestObject\":\"{\\\"url\\\":\\\"/api/delta/sim/v1/\\\",\\\"method\\\":\\\"GET\\\",\\\"headers\\\":{\\\"Cache-Control\\\":\\\"no-cache\\\",\\\"Content-Type\\\":\\\"application/json\\\",\\\"Accept\\\":\\\"*/*\\\",\\\"Accept-Encoding\\\":\\\"gzip,deflate,br\\\",\\\"Authorization\\\":\\\"Basic MzgxMTJmNzYtYmVjZC00NTUwLTllZDMtY2UxMzNkYjhmOGRkeHg6MS4yLjMuNA==\\\",\\\"Host\\\":\\\"mg-staging.sandais.com\\\",\\\"User-Agent\\\":\\\"PostmanRuntime/7.26.8\\\",\\\"Content-Length\\\":\\\"0\\\",\\\"x-real-ip\\\":\\\"58.8.214.174\\\",\\\"x-forwarded-for\\\":\\\"58.8.214.174\\\",\\\"x-forwarded-proto\\\":\\\"https\\\",\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"DeltaHTTPfail_202102152202712\\\",\\\"x-ais-orderdesc\\\":\\\"Get Delta from MG\\\",\\\"postman-token\\\":\\\"79b55c96-1b2c-4594-afc9-9301895d4e54\\\",\\\"x-request-id\\\":\\\"f14d2d5c-bc4c-4484-9fd2-d1bdd5397a4e\\\",\\\"x-b3-traceid\\\":\\\"fd5ae6c9a217811d7c54f49c21f5ffcc\\\",\\\"x-b3-spanid\\\":\\\"7c54f49c21f5ffcc\\\",\\\"x-b3-sampled\\\":\\\"0\\\",\\\"x-ais-SessionId\\\":\\\"1613403150250\\\"},\\\"queryString\\\":{\\\"Sensor\\\":\\\"\\\"},\\\"routeParamteters\\\":{}}\"\r",
									"\r",
									"                            // \\\"requestObject\\\":\\\"{ \\\\\\\"url\\\\\\\":\\\\\\\"/api/delta/sim/v1/\\\\\\\", \\\\\\\"method\\\\\\\":\\\\\\\"GET\\\\\\\", \\\\\\\"headers\\\\\\\":{ \\\\\\\"Cache-Control\\\\\\\":\\\\\\\"no-cache\\\\\\\", \\\\\\\"Content-Type\\\\\\\":\\\\\\\"application/json\\\\\\\", \\\\\\\"Accept\\\\\\\":\\\\\\\"*/*\\\\\\\", \\\\\\\"Accept-Encoding\\\\\\\":\\\\\\\"gzip, deflate, br\\\\\\\", \\\\\\\"Authorization\\\\\\\":\\\\\\\"Basic NTU1ZjM1ZjctNjZlZC00NjBhLWEzYzItNjhlZjI0NGYxYWI1OjEuMi4zLjQ=\\\\\\\", \\\\\\\"Host\\\\\\\":\\\\\\\"mg-iot.sandais.com\\\\\\\", \\\\\\\"User-Agent\\\\\\\":\\\\\\\"PostmanRuntime/7.26.8\\\\\\\", \\\\\\\"Content-Length\\\\\\\":\\\\\\\"0\\\\\\\", \\\\\\\"x-real-ip\\\\\\\":\\\\\\\"182.232.183.255\\\\\\\", \\\\\\\"x-forwarded-for\\\\\\\":\\\\\\\"182.232.183.255, 10.233.67.0\\\\\\\", \\\\\\\"x-forwarded-proto\\\\\\\":\\\\\\\"http\\\\\\\", \\\\\\\"x-ais-username\\\\\\\":\\\\\\\"AisPartner\\\\\\\", \\\\\\\"x-ais-orderref\\\\\\\":\\\\\\\"DeltaHTTPfail_202105112205813\\\\\\\", \\\\\\\"x-ais-orderdesc\\\\\\\":\\\\\\\"Get Delta from MG\\\\\\\", \\\\\\\"postman-token\\\\\\\":\\\\\\\"c7febc01-6e78-4e14-b8b4-128d2b3a8c8b\\\\\\\", \\\\\\\"x-envoy-external-address\\\\\\\":\\\\\\\"10.233.67.0\\\\\\\", \\\\\\\"x-request-id\\\\\\\":\\\\\\\"3f9794bc-a703-4da6-95f7-2463d45eb1ca\\\\\\\", \\\\\\\"x-envoy-original-path\\\\\\\":\\\\\\\"/httpapis/api/delta/sim/v1/?Sensor\\\\\\\", \\\\\\\"x-b3-traceid\\\\\\\":\\\\\\\"6f7a59a86846a8eb782d31f1043c4b57\\\\\\\", \\\\\\\"x-b3-spanid\\\\\\\":\\\\\\\"3bd9c574bd169eff\\\\\\\", \\\\\\\"x-b3-parentspanid\\\\\\\":\\\\\\\"782d31f1043c4b57\\\\\\\", \\\\\\\"x-b3-sampled\\\\\\\":\\\\\\\"0\\\\\\\", \\\\\\\"x-ais-SessionId\\\\\\\":\\\\\\\"1620747296461\\\\\\\" }, \\\\\\\"queryString\\\\\\\":{ \\\\\\\"Sensor\\\\\\\":\\\\\\\"\\\\\\\" }, \\\\\\\"routeParamteters\\\\\\\":{ } }\\\"\r",
									"\r",
									"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
									"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodGet);\r",
									"                            console.log(\"headers.x_ais_userName : \" + jsonParseRequestObject.headers[header_x_ais_username] + \" = \" + x_ais_userName);\r",
									"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
									"                            console.log(\"headers.Authorization : \" + jsonParseRequestObject.headers.Authorization + \" = \" + authorization);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
									"                            pm.expect(jsonParseRequestObject.method).to.eql(methodGet);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_username]).to.eql(x_ais_userName);\r",
									"                            pm.expect(jsonParseRequestObject.headers.Authorization).to.eql(authorization);\r",
									"\r",
									"                            console.log(\"queryString.Sensor : \" + JSON.stringify(jsonParseRequestObject.queryString.Sensor) + \" = \" + JSON.stringify(\"\"));\r",
									"                            console.log(\"routeParamteters : \" + JSON.stringify(jsonParseRequestObject.routeParamteters) + \" = \" + JSON.stringify({}));\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.queryString.Sensor).to.eql(\"\"); \r",
									"                            pm.expect(jsonParseRequestObject.routeParamteters).to.eql({}); \r",
									"\r",
									"                            // check responseObject\r",
									"                            // \"responseObject\":\"{\\\"OperationStatus\\\":{\\\"Code\\\":\\\"40400\\\",\\\"DeveloperMessage\\\":\\\"The requested operation could not be found.\\\"}}\"\r",
									"\r",
									"                            console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeNotFound);\r",
									"                            console.log(\"response.OperationStatus.DeveloperMessage : \" + jsonParseResponseObject.OperationStatus.DeveloperMessage + \" = \" + resultDescriptionTheRequestedOperationCouldNotBeFound); \r",
									"\r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeNotFound);  \r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheRequestedOperationCouldNotBeFound);  \r",
									"                        }\r",
									"                    }); \r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"setTimeout(function(){SearchLogFindTid();}, 50000); \r",
									"setTimeout(function(){CheckLog();}, 70000); \r",
									"\r",
									"setTimeout(function(){RemoveAccount();}, 80000); \r",
									"setTimeout(function(){RemovePartner();}, 90000); \r",
									"\r",
									"setTimeout(function(){\r",
									"pm.environment.unset(\"current_timestamp\");\r",
									"pm.environment.unset(\"AccessToken\");\r",
									"pm.environment.unset(\"random_number\");\r",
									"pm.environment.unset(\"PartnerName\");\r",
									"pm.environment.unset(\"MerchantContact\");\r",
									"pm.environment.unset(\"CPID\");\r",
									"pm.environment.unset(\"GetResponse_PartnerId\");\r",
									"pm.environment.unset(\"AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountId\");\r",
									"pm.environment.unset(\"random_IM\");\r",
									"pm.environment.unset(\"random_ICCID\");\r",
									"pm.environment.unset(\"ThingName\");\r",
									"pm.environment.unset(\"GetResponse_ThingID\");\r",
									"pm.environment.unset(\"GetResponse_IMSI\");\r",
									"pm.environment.unset(\"encodedKeys_Authorization_Register\");\r",
									"pm.environment.unset(\"encodedKeys_Authorization_Delta\");\r",
									"pm.environment.unset(\"random_Sensor\");\r",
									"pm.environment.unset(\"random_Sensor_AsgardHTTP\");\r",
									"pm.environment.unset(\"GetResponse_ThingToken\");\r",
									"pm.environment.unset(\"tid\");\r",
									"pm.environment.unset(\"SensorKey_AsgardHTTP\");\r",
									"pm.environment.unset(\"timestamp\");\r",
									"}, 105000); \r",
									"setTimeout(async function(){}, 110000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var Username = pm.environment.get(\"Username\");\r",
									"var Password = pm.environment.get(\"Password\");\r",
									"\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"var controlapis = pm.environment.get(\"controlapis\");\r",
									"var httpapis = pm.environment.get(\"httpapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"//format YYYYMMDDHHMMSSS\r",
									"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
									"// console.log('currentTmestamp',currentTmestamp);\r",
									"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var Basic = pm.environment.get(\"Basic\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- statusCodeList --------------//\r",
									"//set variable to statusCodeList JSON.parse\r",
									"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
									"//set global variable to statusCode 200\r",
									"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
									"//set global variable to statusCode 201\r",
									"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
									"//set global variable to statusCode 404\r",
									"pm.globals.set(\"statusCodeNotFound\", statusCodeList.statusCodeNotFound);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultCodeList --------------//\r",
									"//set variable to resultCodeList JSON.parse\r",
									"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
									"//set global variable to resultCode \"20000\"\r",
									"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
									"//set global variable to resultCode \"20100\"\r",
									"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
									"//set global variable to resultCode \"40400\"\r",
									"pm.globals.set(\"resultCodeNotFound\", resultCodeList.resultCodeNotFound);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionSuccessList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
									"//set global variable to resultDescription \"SignInProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
									"//set global variable to resultDescription \"CreatePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
									"//set global variable to resultDescription \"CreateAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
									"//set global variable to resultDescription \"CreateThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThing\", resultDescriptionSuccessList.resultDescriptionCreateThing);\r",
									"//set global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThingStateInfo\", resultDescriptionSuccessList.resultDescriptionCreateThingStateInfo);\r",
									"//set global variable to resultDescription \"RemovePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
									"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
									"//set global variable to resultDescription \"RemoveThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThing\", resultDescriptionSuccessList.resultDescriptionRemoveThing);\r",
									"//set global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThingStateInfo\", resultDescriptionSuccessList.resultDescriptionRemoveThingStateInfo);\r",
									"//set global variable to resultDescription \"ControlOneThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessControlOneThing\", resultDescriptionSuccessList.resultDescriptionSuccessControlOneThing);\r",
									"//set global variable to resultDescription \"Register is Success\"\r",
									"pm.globals.set(\"resultDescriptionRegisterIsSuccess\", resultDescriptionSuccessList.resultDescriptionRegisterIsSuccess);\r",
									"//set global variable to resultDescription \"DeltaProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionDeltaProcessIsSuccess\", resultDescriptionSuccessList.resultDescriptionDeltaProcessIsSuccess);\r",
									"//set global variable to resultDescription \"The requested operation was successfully.\"\r",
									"pm.globals.set(\"resultDescriptionTheRequestedOperationWasSuccessfully\", resultDescriptionSuccessList.resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"//set global variable to resultDescription \"RemoveThingFromAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThingFromAccount\", resultDescriptionSuccessList.resultDescriptionRemoveThingFromAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionErrorList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
									"//set global variable to resultDescription \"The requested operation could not be found.\"\r",
									"pm.globals.set(\"resultDescriptionTheRequestedOperationCouldNotBeFound\", resultDescriptionErrorList.resultDescriptionTheRequestedOperationCouldNotBeFound);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- HeaderList --------------//\r",
									"//set variable to HeaderList JSON.parse\r",
									"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
									"//---------------- set globals Other --------------//\r",
									"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
									"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
									"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
									"//set global variable to kbn-versio \"7.5.1\"\r",
									"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Signin_ --------------//\r",
									"//set global variable to x_ais_OrderRef \"Signin_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreatePartner --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
									"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
									"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
									"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreateAccount --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
									"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
									"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Thing --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThing\", HeaderList.Thing.x_ais_OrderRef_CreateThing);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThing\", HeaderList.Thing.x_ais_OrderDesc_CreateThing);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThing\", HeaderList.Thing.x_ais_OrderRef_RemoveThing);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThing\", HeaderList.Thing.x_ais_OrderDesc_RemoveThing);\r",
									"//set global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_RemoveThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_RemoveThingStateInfo);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThingFromAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThingFromAccount\", HeaderList.Thing.x_ais_OrderRef_RemoveThingFromAccount);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThingFromAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThingFromAccount\", HeaderList.Thing.x_ais_OrderDesc_RemoveThingFromAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Control --------------//\r",
									"//set global variable to x_ais_OrderRef \"ControlThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ControlThing\", HeaderList.Control.x_ais_OrderRef_ControlThing);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals AsgardHTTP --------------//\r",
									"//set global variable to x_ais_OrderRef \"RegisHTTP_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RegisHTTP\", HeaderList.AsgardHTTP.x_ais_OrderRef_RegisHTTP);\r",
									"//set global variable to x_ais_OrderDesc \"Register Thing in MG\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RegisHTTP\", HeaderList.AsgardHTTP.x_ais_OrderDesc_RegisHTTP);\r",
									"//set global variable to x_ais_OrderRef \"DeltaHTTP_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_DeltaHTTP\", HeaderList.AsgardHTTP.x_ais_OrderRef_DeltaHTTP);\r",
									"//set global variable to x_ais_OrderRef \"DeltaHTTPfail_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_DeltaHTTP_fail\", HeaderList.AsgardHTTP.x_ais_OrderRef_DeltaHTTP_fail);\r",
									"//set global variable to x_ais_OrderDesc \"Get Delta from MG\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_DeltaHTTP\", HeaderList.AsgardHTTP.x_ais_OrderDesc_DeltaHTTP);\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"SignInProcess is Success\"\r",
									"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
									"//get global variable to resultDescription \"CreatePartner is Success\"\r",
									"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
									"//get global variable to resultDescription \"CreateAccount is Success\"\r",
									"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
									"//get global variable to resultDescription \"CreateThing is Success\"\r",
									"var resultDescriptionCreateThing = pm.globals.get(\"resultDescriptionCreateThing\");\r",
									"//get global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"var resultDescriptionCreateThingStateInfo = pm.globals.get(\"resultDescriptionCreateThingStateInfo\");\r",
									"//get global variable to resultDescription \"ControlOneThing is Success\"\r",
									"var resultDescriptionSuccessControlOneThing = pm.globals.get(\"resultDescriptionSuccessControlOneThing\");\r",
									"//get global variable to resultDescription \"Register is Success\"\r",
									"var resultDescriptionRegisterIsSuccess = pm.globals.get(\"resultDescriptionRegisterIsSuccess\");\r",
									"//get global variable to resultDescription \"The requested operation was successfully.\"\r",
									"var resultDescriptionTheRequestedOperationWasSuccessfully = pm.globals.get(\"resultDescriptionTheRequestedOperationWasSuccessfully\");\r",
									"//get global variable to resultDescription \"RemoveThingFromAccount is Success\"\r",
									"var resultDescriptionRemoveThingFromAccount = pm.globals.get(\"resultDescriptionRemoveThingFromAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- urlRouteList --------------//\r",
									"//set variable to urlRouteList JSON.parse\r",
									"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
									"//---------------- set url Create --------------//\r",
									"//set global variable to url \"/api/v1/auth/signin\"\r",
									"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
									"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
									"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"pm.globals.set(\"urlThingCreateThing\", urlRouteList.Thing.urlThingCreateThing);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"pm.globals.set(\"urlThingCreateThingStateInfo\", urlRouteList.Thing.urlThingCreateThingStateInfo);\r",
									"//set global variable to url \"/api/v1/Control/Thing\"\r",
									"pm.globals.set(\"urlControlThing\", urlRouteList.Control.urlControlThing);\r",
									"//set global variable to url \"/api/register/sim/v1\"\r",
									"pm.globals.set(\"urlAsgardHTTPeSimRegister\", urlRouteList.AsgardHTTPeSim.urlAsgardHTTPeSimRegister);\r",
									"//set global variable to url \"/api/delta/sim/v1/?Sensor\"\r",
									"pm.globals.set(\"urlAsgardHTTPeSimDelta\", urlRouteList.AsgardHTTPeSim.urlAsgardHTTPeSimDelta);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThingFromAccount\"\r",
									"pm.globals.set(\"urlAccountRemoveThingFromAccount\", urlRouteList.Thing.urlAccountRemoveThingFromAccount);\r",
									"//---------------- get url Create --------------//\r",
									"//get global variable to url \"/api/v1/auth/signin\"\r",
									"var urlSignin = pm.globals.get(\"urlSignin\");\r",
									"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
									"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"var urlThingCreateThing = pm.globals.get(\"urlThingCreateThing\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"var urlThingCreateThingStateInfo = pm.globals.get(\"urlThingCreateThingStateInfo\");\r",
									"//get global variable to url \"/api/v1/Group/CreateGroup\"\r",
									"var urlGroupCreateGroup = pm.globals.get(\"urlGroupCreateGroup\");\r",
									"//get global variable to url \"/api/v1/Control/Thing\"\r",
									"var urlControlThing = pm.globals.get(\"urlControlThing\");\r",
									"//get global variable to url \"/api/register/sim/v1\"\r",
									"var urlAsgardHTTPeSimRegister = pm.globals.get(\"urlAsgardHTTPeSimRegister\");\r",
									"//get global variable to url \"/api/delta/sim/v1/?Sensor\"\r",
									"var urlAsgardHTTPeSimDelta = pm.globals.get(\"urlAsgardHTTPeSimDelta\");\r",
									"//---------------- set url Remove --------------//\r",
									"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
									"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"pm.globals.set(\"urlThingRemoveThing\", urlRouteList.Thing.urlThingRemoveThing);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"pm.globals.set(\"urlThingRemoveThingStateInfo\", urlRouteList.Thing.urlThingRemoveThingStateInfo);\r",
									"//---------------- get url Remove --------------//\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThingFromAccount\"\r",
									"var urlAccountRemoveThingFromAccount = pm.globals.get(\"urlAccountRemoveThingFromAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Signin_ --------------//\r",
									"//get global variable to x_ais_OrderRef \"Signin_\"\r",
									"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"var x_ais_OrderRef_CreateThing = pm.globals.get(\"x_ais_OrderRef_CreateThing\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"var x_ais_OrderDesc_CreateThing = pm.globals.get(\"x_ais_OrderDesc_CreateThing\");\r",
									"//get global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"var x_ais_OrderRef_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderRef_CreateThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"var x_ais_OrderDesc_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_CreateThingStateInfo\");\r",
									"//get global variable to x_ais_OrderRef \"RemoveThingFromAccount_\"\r",
									"var x_ais_OrderRef_RemoveThingFromAccount = pm.globals.get(\"x_ais_OrderRef_RemoveThingFromAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThingFromAccount\"\r",
									"var x_ais_OrderDesc_RemoveThingFromAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveThingFromAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Control --------------//\r",
									"//get global variable to x_ais_OrderRef \"ControlThing_\"\r",
									"var x_ais_OrderRef_ControlThing = pm.globals.get(\"x_ais_OrderRef_ControlThing\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals AsgardHTTP --------------//\r",
									"//get global variable to x_ais_OrderRef \"RegisHTTP_\"\r",
									"var x_ais_OrderRef_RegisHTTP = pm.globals.get(\"x_ais_OrderRef_RegisHTTP\");\r",
									"//get global variable to x_ais_OrderDesc \"Register Thing in MG\"\r",
									"var x_ais_OrderDesc_RegisHTTP = pm.globals.get(\"x_ais_OrderDesc_RegisHTTP\");\r",
									"//------------------------------------------------------------//\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// Signin get token\r",
									"Signin = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSignin = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_Signin + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_UserAuthentication,\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestSignin = {\r",
									"            mode: 'raw',\r",
									"            raw:\r",
									"                JSON.stringify({\r",
									"                    username: Username,\r",
									"                    password: Password\r",
									"                })\r",
									"        };\r",
									"\r",
									"        let optionsSignin = {\r",
									"            url: url + provisioningapis + urlSignin,\r",
									"            method: 'POST',\r",
									"            header: headersOptSignin,\r",
									"            body: httpRequestSignin\r",
									"        };\r",
									"        // console.log('request Signin');\r",
									"        let response = await reqPromise(optionsSignin);\r",
									"        let jsonDataSignin = await response.json();\r",
									"\r",
									"        // setAccessToken\r",
									"        await pm.environment.set(\"AccessToken\", jsonDataSignin.AccessToken);\r",
									"\r",
									"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('Signin : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // SignInProcess is Success\r",
									"        pm.test('Signin : OperationStatus Description is ' + '\"' + resultDescriptionSuccessSignIn + '\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
									"        });\r",
									"\r",
									"        //set random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //set PartnerName\r",
									"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
									"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
									"        //set MerchantContact\r",
									"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
									"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
									"        // set CPID\r",
									"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
									"        pm.environment.set(\"CPID\", CPIDValue)\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreatePartner\r",
									"CreatePartner = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreatePartner = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreatePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreatePartner,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreatePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
									"                \"PartnerType\": [\r",
									"                    \"Supplier\",\r",
									"                    \"Customer\"\r",
									"                ],\r",
									"                \"PartnerDetail\": {\r",
									"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
									"                    \"CPID\": pm.environment.get(\"CPID\")\r",
									"                },\r",
									"                \"Property\": {\r",
									"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreatePartner = {\r",
									"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreatePartner,\r",
									"            body: httpRequestCreatePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsCreatePartner);\r",
									"        let jsonDataCreatePartner = await response.json();\r",
									"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
									"\r",
									"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreatePartner : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreatePartner is Success\r",
									"        pm.test('CreatePartner : OperationStatus Description is ' + '\"' + resultDescriptionCreatePartner + '\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
									"        });\r",
									"\r",
									"        //GetResponse_PartnerId\r",
									"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
									"\r",
									"        //Accountname\r",
									"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
									"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateAccount\r",
									"CreateAccount = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateAccount = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateAccount,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreateAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateAccount = {\r",
									"            url: url + provisioningapis + urlAccountCreateAccount,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateAccount,\r",
									"            body: httpRequestCreateAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateAccount');\r",
									"        let response = await reqPromise(optionsCreateAccount);\r",
									"        let jsonDataCreateAccount = await response.json();\r",
									"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
									"\r",
									"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateAccount : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateAccount is Success\r",
									"        pm.test('CreateAccount : OperationStatus Description is ' + '\"' + resultDescriptionCreateAccount + '\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
									"        });\r",
									"        // GetResponse_AccountName\r",
									"        pm.environment.set(\"GetResponse_AccountName\", jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
									"        // GetResponse_AccountId\r",
									"        pm.environment.set(\"GetResponse_AccountId\", jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
									"        // random_IM\r",
									"        pm.environment.set(\"random_IM\", _.random(10000000, 99999999) + \" \" + _.random(1000000, 9999999))\r",
									"        // random_ICCID\r",
									"        pm.environment.set(\"random_ICCID\", _.random(1000000, 9999999) + \" \" + _.random(100000, 999999))\r",
									"        // random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //ThingName\r",
									"        let thingNameValue = fieldDataValue.Thing.ThingNameValue; // \"Sensor_TestThingName\"\r",
									"        pm.environment.set(\"ThingName\", thingNameValue + pm.environment.get(\"random_number\"))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThing\r",
									"CreateThing = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThing = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateThing + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateThing,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey': pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreateThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingName\": pm.environment.get(\"ThingName\"),\r",
									"                \"IMEI\": pm.environment.get(\"random_IM\"),\r",
									"                \"IMSI\": pm.environment.get(\"random_IM\"),\r",
									"                \"ICCID\": pm.environment.get(\"random_ICCID\"),\r",
									"                \"RouteUrl\": fieldDataValue.Thing.RouteUrlValue , //[\"http://10.12.3.4:2019/api/information/AddInformation\"]\r",
									"                \"RouteInfo\": {\r",
									"                    \"MIMO_ID\": fieldDataValue.Thing.RouteInfoMIMOIDValue , //\"606edada\"\r",
									"                    \"MIMO_SerialNo\": fieldDataValue.Thing.RouteInfoMIMOSerialNoValue //5466758878\r",
									"                },\r",
									"                \"RouteFlag\": {\r",
									"                    \"ThingName\": fieldDataValue.Thing.RouteFlagThingNameValue , //true\r",
									"                    \"ThingToken\": fieldDataValue.Thing.RouteFlagThingTokenValue, //true\r",
									"                    \"IMEI\": fieldDataValue.Thing.RouteFlagIMEIValue, //true\r",
									"                    \"ICCID\": fieldDataValue.Thing.RouteFlagICCIDValue, //true\r",
									"                    \"RouteInfo\": fieldDataValue.Thing.RouteFlagRouteInfoValue //true\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateThing = {\r",
									"            url: url + provisioningapis + urlThingCreateThing,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThing,\r",
									"            body: httpRequestCreateThing\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThing');\r",
									"        let response = await reqPromise(optionsCreateThing);\r",
									"        let jsonDataCreateThing = await response.json();\r",
									"        // console.log('jsonDataCreateThing',jsonDataCreateThing)\r",
									"\r",
									"        let operationStatusCreateThing = await jsonDataCreateThing.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateThing : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateThing : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateThing is Success\r",
									"        pm.test('CreateThing : OperationStatus Description is ' + '\"' + resultDescriptionCreateThing + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Description', resultDescriptionCreateThing);\r",
									"        });\r",
									"\r",
									"        pm.environment.set(\"GetResponse_ThingID\", jsonDataCreateThing.ThingInfo.ThingId)\r",
									"        pm.environment.set(\"GetResponse_IMSI\", jsonDataCreateThing.ThingInfo.IMSI)\r",
									"        \r",
									"        let keys = pm.environment.get(\"GetResponse_IMSI\") + \":\" + pm.environment.get(\"IpAddress\");\r",
									"        // console.log(\"keys\", keys);\r",
									"        let encodedKeys = CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(keys));\r",
									"        pm.environment.set(\"encodedKeys_Authorization_Register\", encodedKeys);\r",
									"\r",
									"        //Get Random Sensor \r",
									"        pm.environment.set(\"random_Sensor\", _.random(100, 999))\r",
									"        \r",
									"        //Get Random Sensor AsgardHTTP\r",
									"        pm.environment.set(\"random_Sensor_AsgardHTTP\", _.random(100, 999))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThingStateInfo\r",
									"CreateThingStateInfo = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThingStateInfo = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateThingStateInfo,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey': pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        // {\"AA\" : pm.environment.get(\"random_Sensor\")}\r",
									"        let sensorValue = {};\r",
									"        sensorValue[fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP] = pm.environment.get(\"random_Sensor\");\r",
									"        // console.log('sensorValue',sensorValue);\r",
									"        \r",
									"        let httpRequestCreateThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": [\r",
									"                    pm.environment.get(\"GetResponse_ThingID\")\r",
									"                ],\r",
									"                \"Type\": fieldDataValue.CreateThingStateInfo.Type_Report,\r",
									"                \"Sensor\": sensorValue\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingCreateThingStateInfo,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThingStateInfo,\r",
									"            body: httpRequestCreateThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThingStateInfo');\r",
									"        let response = await reqPromise(optionsCreateThingStateInfo);\r",
									"        let jsonDataCreateThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataCreateThingStateInfo',jsonDataCreateThingStateInfo)\r",
									"\r",
									"        let operationStatusCreateThingStateInfo = await jsonDataCreateThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"CreateThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //CreateThingStateInfo is Success\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Description is ' + '\"' + resultDescriptionCreateThingStateInfo + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Description', resultDescriptionCreateThingStateInfo);\r",
									"        });\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// ControlThing\r",
									"ControlThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptControlThing = {\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_ControlThing + current_timestamp,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Content-Type':ContentType_ApplicationJson\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        // {\"AA\" : pm.environment.get(\"random_Sensor_AsgardHTTP\")}\r",
									"        let sensorValue = {};\r",
									"        sensorValue[fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP] = pm.environment.get(\"random_Sensor_AsgardHTTP\");\r",
									"        // console.log('sensorValue',sensorValue);\r",
									"\r",
									"        let httpRequestControlThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\"),\r",
									"                \"Sensors\": sensorValue\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsControlThing = {\r",
									"            url: url + controlapis + urlControlThing,\r",
									"            method: 'POST',\r",
									"            header: headersOptControlThing,\r",
									"            body: httpRequestControlThing\r",
									"        };\r",
									"\r",
									"        // console.log('response ControlThing');\r",
									"        let response = await reqPromise(optionsControlThing);\r",
									"        let jsonDataControlThing = await response.json();\r",
									"        // console.log('jsonDataControlThing',jsonDataControlThing)\r",
									"    \r",
									"        let operationStatusControlThing = await jsonDataControlThing.operationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"ControlThing : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('ControlThing : OperationStatus code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusControlThing).to.have.property('code', resultCodeSuccess);\r",
									"        });\r",
									"        //ControlOneThing is Success\r",
									"        pm.test('ControlThing : OperationStatus description is '+'\"'+ resultDescriptionSuccessControlOneThing+'\"', function () {\r",
									"            pm.expect(operationStatusControlThing).to.have.property('description', resultDescriptionSuccessControlOneThing);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// AsgardHTTPeSimRegister\r",
									"AsgardHTTPeSimRegister = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptAsgardHTTPeSimRegister = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_RegisHTTP + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_RegisHTTP,\r",
									"            'Authorization': Basic + ' ' + pm.environment.get(\"encodedKeys_Authorization_Register\")\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestAsgardHTTPeSimRegister = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({})\r",
									"        };\r",
									"\r",
									"        let optionsAsgardHTTPeSimRegister = {\r",
									"            url: url + httpapis + urlAsgardHTTPeSimRegister,\r",
									"            method: 'POST',\r",
									"            header: headersOptAsgardHTTPeSimRegister,\r",
									"            body: httpRequestAsgardHTTPeSimRegister\r",
									"        };\r",
									"\r",
									"        // console.log('request AsgardHTTPEsimRegister');\r",
									"        let response = await reqPromise(optionsAsgardHTTPeSimRegister);\r",
									"        let jsonDataAsgardHTTPeSimRegister = await response.json();\r",
									"        // console.log('jsonDataCreateThingStateInfo',jsonDataAsgardHTTPeSimRegister)\r",
									"        let operationStatusAsgardHTTPeSimRegister = await jsonDataAsgardHTTPeSimRegister.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"Asgard HTTP(eSim) Register : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('Asgard HTTP(eSim) Register : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusAsgardHTTPeSimRegister).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"\r",
									"        // The requested operation was successfully.\r",
									"        pm.test('Asgard HTTP(eSim) Register : OperationStatus DeveloperMessage is ' + '\"' + resultDescriptionTheRequestedOperationWasSuccessfully + '\"', function () {\r",
									"            pm.expect(operationStatusAsgardHTTPeSimRegister).to.have.property('DeveloperMessage', resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"        });\r",
									"\r",
									"        await pm.environment.set(\"GetResponse_ThingToken\", jsonDataAsgardHTTPeSimRegister.ThingToken)\r",
									"        let keys2 = await pm.environment.get(\"GetResponse_ThingToken\") + \":\" + pm.environment.get(\"IpAddress\");        \r",
									"        let encodedKeys2 = await CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(keys2));\r",
									"        pm.environment.set(\"encodedKeys_Authorization_Delta\", encodedKeys2)\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThingFromAccount\r",
									"RemoveThingFromAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThingFromAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThingFromAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThingFromAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThingFromAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": [pm.environment.get(\"GetResponse_ThingID\")]\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThingFromAccount = {\r",
									"            url: url + provisioningapis + urlAccountRemoveThingFromAccount,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThingFromAccount,\r",
									"            body: httpRequestRemoveThingFromAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveThingFromAccount');\r",
									"        let response = await reqPromise(optionsRemoveThingFromAccount);\r",
									"        let jsonDataRemoveThingFromAccount = await response.json();\r",
									"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
									"    \r",
									"        let operationStatusRemoveThingFromAccount = await jsonDataRemoveThingFromAccount.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThingFromAccount : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThingFromAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingFromAccount).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThingFromAccount is Success\r",
									"        pm.test('RemoveThingFromAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThingFromAccount+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingFromAccount).to.have.property('Description', resultDescriptionRemoveThingFromAccount);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"Signin();\r",
									"setTimeout(async function(){await CreatePartner();}, 3000); \r",
									"setTimeout(async function(){await CreateAccount();}, 6000); \r",
									"setTimeout(async function(){await CreateThing();}, 8000); \r",
									"setTimeout(async function(){await CreateThingStateInfo();}, 9000); \r",
									"setTimeout(async function(){await ControlThing();}, 10000); \r",
									"setTimeout(async function(){await AsgardHTTPeSimRegister();}, 20000); \r",
									"setTimeout(async function(){}, 30000); //for wait value encodedKeys_Authorization_Delta\r",
									"setTimeout(async function(){await RemoveThingFromAccount();}, 40000); "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-ais-UserName",
								"type": "text",
								"value": "{{x_ais_UserName_AisPartner}}"
							},
							{
								"key": "x-ais-OrderRef",
								"value": "{{x_ais_OrderRef_DeltaHTTP_fail}}{{current_timestamp}}"
							},
							{
								"key": "x-ais-OrderDesc",
								"type": "text",
								"value": "{{x_ais_OrderDesc_DeltaHTTP}}"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{Basic}} {{encodedKeys_Authorization_Delta}}"
							}
						],
						"url": {
							"raw": "{{url}}{{httpapis}}/api/delta/sim/v1/?Sensor=",
							"host": [
								"{{url}}{{httpapis}}"
							],
							"path": [
								"api",
								"delta",
								"sim",
								"v1",
								""
							],
							"query": [
								{
									"key": "Sensor",
									"value": ""
								}
							]
						},
						"description": "Type:Desire"
					},
					"response": []
				},
				{
					"name": "AsgardHTTPeSimDelta_TST_F3_0_2_005_Error_ThingtokenAlreadyExist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var Basic = pm.environment.get(\"Basic\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to xAisOrderRef \"RemoveThing_\"\r",
									"var x_ais_OrderRef_RemoveThing = pm.globals.get(\"x_ais_OrderRef_RemoveThing\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"var x_ais_OrderDesc_RemoveThing = pm.globals.get(\"x_ais_OrderDesc_RemoveThing\");\r",
									"//get global variable to xAisOrderRef \"RemoveThingStateInfo_\"\r",
									"var x_ais_OrderRef_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderRef_RemoveThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThingStateInfo\"\r",
									"var x_ais_OrderDesc_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_RemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals AsgardHTTP --------------//\r",
									"//get global variable to x_ais_OrderRef \"DeltaHTTP_\"\r",
									"var x_ais_OrderRef_DeltaHTTP = pm.globals.get(\"x_ais_OrderRef_DeltaHTTP\");\r",
									"//get global variable to x_ais_OrderRef \"DeltaHTTPfail_\"\r",
									"var x_ais_OrderRef_DeltaHTTP_fail = pm.globals.get(\"x_ais_OrderRef_DeltaHTTP_fail\");\r",
									"//get global variable to x_ais_OrderDesc \"Get Delta from MG\"\r",
									"var x_ais_OrderDesc_DeltaHTTP = pm.globals.get(\"x_ais_OrderDesc_DeltaHTTP\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get url Remove --------------//\r",
									"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
									"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"var urlThingRemoveThing = pm.globals.get(\"urlThingRemoveThing\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"var urlThingRemoveThingStateInfo = pm.globals.get(\"urlThingRemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"RemovePartner is Success\"\r",
									"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
									"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
									"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
									"//get global variable to resultDescription \"RemoveThing is Success\"\r",
									"var resultDescriptionRemoveThing = pm.globals.get(\"resultDescriptionRemoveThing\");\r",
									"//get global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"var resultDescriptionRemoveThingStateInfo = pm.globals.get(\"resultDescriptionRemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 403\r",
									"var statusCodeForbidden = pm.globals.get(\"statusCodeForbidden\");\r",
									"//get global variable to resultCode \"40301\"\r",
									"var resultCodeTheClientRequestedAlreadyExists = pm.globals.get(\"resultCodeTheClientRequestedAlreadyExists\");\r",
									"//get global variable to resultDescription \"The thingToken requested already exists.\"\r",
									"var resultDescriptionTheThingTokenRequestedAlreadyExists = pm.globals.get(\"resultDescriptionTheThingTokenRequestedAlreadyExists\");\r",
									"//------------------------------------------------------------//\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Asgard HTTP(eSim) Delta : Status code is \" + statusCodeForbidden, function () {\r",
									"    pm.response.to.have.status(statusCodeForbidden);\r",
									"});\r",
									"\r",
									"pm.test('Asgard HTTP(eSim) Delta : operationStatus code is '+'\"'+ resultCodeTheClientRequestedAlreadyExists +'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeTheClientRequestedAlreadyExists);\r",
									"});\r",
									"\r",
									"pm.test('Asgard HTTP(eSim) Delta : operationStatus DeveloperMessage is '+'\"'+ resultDescriptionTheThingTokenRequestedAlreadyExists+'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheThingTokenRequestedAlreadyExists);\r",
									"});\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// RemovePartner\r",
									" RemovePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemovePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemovePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemovePartner = {\r",
									"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemovePartner,\r",
									"            body: httpRequestRemovePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request RemovePartner');\r",
									"        let response = await reqPromise(optionsRemovePartner);\r",
									"        let jsonDataRemovePartner = await response.json();\r",
									"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
									"    \r",
									"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemovePartner is Success\r",
									"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveAccount\r",
									" RemoveAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemoveAccount = {\r",
									"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveAccount,\r",
									"            body: httpRequestRemoveAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveAccount');\r",
									"        let response = await reqPromise(optionsRemoveAccount);\r",
									"        let jsonDataRemoveAccount = await response.json();\r",
									"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
									"    \r",
									"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveAccount is Success\r",
									"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThing\r",
									" RemoveThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThing = {\r",
									"            url: url + provisioningapis + urlThingRemoveThing,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThing,\r",
									"            body: httpRequestRemoveThing\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveThing');\r",
									"        let response = await reqPromise(optionsRemoveThing);\r",
									"        let jsonDataRemoveThing = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThing)\r",
									"    \r",
									"        let operationStatusRemoveThing = await jsonDataRemoveThing.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThing : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThing : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThing is Success\r",
									"        pm.test('RemoveThing : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThing+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Description', resultDescriptionRemoveThing);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThingStateInfo\r",
									" RemoveThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"            \r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\"),\r",
									"                \"stateType\": fieldDataValue.CreateThingStateInfo.Type_Report, //Report\r",
									"                \"stateKey\": fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP //AA\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingRemoveThingStateInfo,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThingStateInfo,\r",
									"            body: httpRequestRemoveThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('response RemoveThingStateInfo');\r",
									"        let response = await reqPromise(optionsRemoveThingStateInfo);\r",
									"        let jsonDataRemoveThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThingStateInfo)\r",
									"    \r",
									"        let operationStatusRemoveThingStateInfo = await jsonDataRemoveThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThingStateInfo is Success\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThingStateInfo+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Description', resultDescriptionRemoveThingStateInfo);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"//---------------- LogDefaultValue --------------//\r",
									"//set variable to LogDefaultValue JSON.parse\r",
									"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
									"// console.log('LogDefaultValue',LogDefaultValue);\r",
									"//---------------- set globals Other --------------//\r",
									"\r",
									"var SearchLog = LogDefaultValue.SearchLog;\r",
									"// console.log('SearchLog',SearchLog);\r",
									"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
									"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
									"var kbn_version = SearchLog.header.kbn_version;\r",
									"var authorization = SearchLog.header.Authorization;\r",
									"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
									"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
									"var namespace = LogDefaultValue.Other.namespace;\r",
									"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
									"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
									"var header_x_ais_username = LogDefaultValue.Other.header_x_ais_username;\r",
									"var methodGet = LogDefaultValue.Other.methodGet;\r",
									"\r",
									"// Detail\r",
									"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
									"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
									"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
									"\r",
									"// Summary\r",
									"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
									"var identitySummary = \"\";\r",
									"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
									"\r",
									"// Asgard.Http.APIs\r",
									"var applicationName = LogDefaultValue.AsgardHTTP.applicationName;\r",
									"var cmdName = LogDefaultValue.AsgardHTTP.cmdNameDelta;\r",
									"var endPointNameRabbitMQ = LogDefaultValue.AsgardHTTP.endPointNameRabbitMQ;\r",
									"var containerId = LogDefaultValue.AsgardHTTP.containerId;\r",
									"var requestObjectUrlStaging = LogDefaultValue.AsgardHTTP.requestObjectUrlDeltaMgStaging;\r",
									"var urlDelta  = LogDefaultValue.AsgardHTTP.urlDelta;\r",
									"\r",
									"// Check CDR (Summary Log) and EDR (Detail Log)\r",
									"SearchLogFindTid = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSearchLogFindTid = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = x_ais_OrderRef_DeltaHTTP_fail + current_timestamp;\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestSearchLogFindTid = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"\r",
									"        let optionsSearchLogFindTid = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptSearchLogFindTid,\r",
									"            body: httpRequestSearchLogFindTid\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsSearchLogFindTid);\r",
									"        let jsonDataSearchLogFindTid = await response.json();\r",
									"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
									"        // console.log('hits',hits)\r",
									"  \r",
									"        // find tid\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            // let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"        \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            if(applicationNameValue == applicationName){\r",
									"                let tid = hits[i]._source.cauldron.tid;\r",
									"                pm.environment.set(\"tid\", tid);\r",
									"                break;\r",
									"           }\r",
									"        }\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"CheckLog = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCheckLog = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = pm.environment.get(\"tid\");\r",
									"\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestCheckLog = {\r",
									"            mode: 'raw',\r",
									"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"        let optionsCheckLog = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptCheckLog,\r",
									"            body: httpRequestCheckLog\r",
									"        }; \r",
									"        let response = await reqPromise(optionsCheckLog);\r",
									"        let jsonDataCheckLog = await response.json();\r",
									"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
									"        \r",
									"        // //200\r",
									"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });     \r",
									"        \r",
									"        let hits = jsonDataCheckLog.hits.hits\r",
									"        console.log('hits',hits)\r",
									"  \r",
									"        // find logType\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            //  let logType = hits[i]._source.cauldron.logType\r",
									"            let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"           \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            \r",
									"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
									"            // console.log('resultDataLog',resultDataLog)\r",
									"\r",
									"            let tidControl = x_ais_OrderRef_DeltaHTTP_fail  + current_timestamp;\r",
									"            // console.log(tidControl);\r",
									"            if(applicationNameValue == applicationName){\r",
									"                 \r",
									"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and Asgard.Http.APIs\r",
									"                    pm.test(\"Check Summary Log : Asgard_HTTP(eSim) Delta\" , function () {\r",
									"                        console.log(\"======== Check Summary Log ( Expected = Actual) [Asgard_HTTP(eSim) Delta] ==================\");\r",
									"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
									"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
									"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeTheClientRequestedAlreadyExists);\r",
									"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionTheThingTokenRequestedAlreadyExists);\r",
									"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
									"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"identity : \" + JSON.stringify(resultDataLog.identity) + \" = \" + JSON.stringify(identitySummary));\r",
									"                        // console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
									"\r",
									"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
									"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
									"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeTheClientRequestedAlreadyExists); \r",
									"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionTheThingTokenRequestedAlreadyExists); \r",
									"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
									"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
									"                        // pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
									"\r",
									"                        // check custom\r",
									"                        // \\\"custom\\\":{ \\\"endPointSummary\\\":[ { \\\"no\\\":\\\"1\\\", \\\"endPointName\\\":\\\"db.ThingsCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:Inquiry was Success\\\", \\\"processTime\\\":0.0008 } ] }\r",
									"\r",
									"                        let custom = resultDataLog.custom.endPointSummary;\r",
									"                        let countCustom = custom.length;\r",
									"                       \r",
									"                        // [\"db.ThingsCollection\"]\r",
									"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_Asgard_HTTP_eSim_Delta_002_004_005_006;\r",
									"                        // [\"20000:Inquiry was Success\"]\r",
									"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_Asgard_HTTP_eSim_Delta_002_004_005_006;\r",
									"                        let countCustomStep = dataEndPointName.length;\r",
									"\r",
									"                        console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep);\r",
									"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
									"                        \r",
									"                        for(let i=0;i<countCustomStep;i++){\r",
									"                            let no = custom[i].no;\r",
									"                            let valueEndPointName = custom[i].endPointName;\r",
									"                            let valueResponseStatus = custom[i].responseStatus;\r",
									"                            // console.log(\"i\",i);\r",
									"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
									"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
									"\r",
									"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString());\r",
									"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i]);\r",
									"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i]);\r",
									"\r",
									"                            pm.expect(no).to.eql((i+1).toString()); \r",
									"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
									"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]); \r",
									"                        }\r",
									"                    }); \r",
									"                }\r",
									"\r",
									"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and Asgard.Http.APIs\r",
									"\r",
									"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
									"                    // console.log('endPointNameValue ',endPointNameValue)\r",
									"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [Asgard_HTTP(eSim) Delta]\", function () {\r",
									"                        console.log(\"======== Check Detail Log ( Expected = Actual) [Asgard_HTTP(eSim) Delta] ==================\");\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
									"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
									"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
									"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.custom1.activityLog.processTime + \" = \" + resultDataLog.custom1.activityLog.processTime);\r",
									"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
									"\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
									"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
									"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
									"\r",
									"                        let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
									"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
									"                        let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
									"                            // console.log('jsonParseResponseObject',jsonParseResponseObject); \r",
									"                        let url = urlDelta; \r",
									"                        let x_ais_orderref = x_ais_OrderRef_DeltaHTTP_fail + current_timestamp;\r",
									"                        let x_ais_orderdesc = x_ais_OrderDesc_DeltaHTTP;\r",
									"                        let x_ais_userName = x_ais_UserName_AisPartner;\r",
									"                        let authorization = Basic + ' ' + pm.environment.get(\"encodedKeys_Authorization_Delta\");\r",
									"                        let SensorKey = fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP;\r",
									"                        let sensor = pm.environment.get(\"random_Sensor\");\r",
									"                        let timestamp = pm.environment.get(\"timestamp\");\r",
									"\r",
									"                        if( endPointNameValue == undefined){\r",
									"                            // check requestObject\r",
									"                            // \"requestObject\":\"{\\\"url\\\":\\\"/api/delta/sim/v1/\\\",\\\"method\\\":\\\"GET\\\",\\\"headers\\\":{\\\"Cache-Control\\\":\\\"no-cache\\\",\\\"Content-Type\\\":\\\"application/json\\\",\\\"Accept\\\":\\\"*/*\\\",\\\"Accept-Encoding\\\":\\\"gzip,deflate,br\\\",\\\"Authorization\\\":\\\"Basic MzgxMTJmNzYtYmVjZC00NTUwLTllZDMtY2UxMzNkYjhmOGRkeHg6MS4yLjMuNA==\\\",\\\"Host\\\":\\\"mg-staging.sandais.com\\\",\\\"User-Agent\\\":\\\"PostmanRuntime/7.26.8\\\",\\\"Content-Length\\\":\\\"0\\\",\\\"x-real-ip\\\":\\\"58.8.214.174\\\",\\\"x-forwarded-for\\\":\\\"58.8.214.174\\\",\\\"x-forwarded-proto\\\":\\\"https\\\",\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"DeltaHTTPfail_202102152202712\\\",\\\"x-ais-orderdesc\\\":\\\"Get Delta from MG\\\",\\\"postman-token\\\":\\\"79b55c96-1b2c-4594-afc9-9301895d4e54\\\",\\\"x-request-id\\\":\\\"f14d2d5c-bc4c-4484-9fd2-d1bdd5397a4e\\\",\\\"x-b3-traceid\\\":\\\"fd5ae6c9a217811d7c54f49c21f5ffcc\\\",\\\"x-b3-spanid\\\":\\\"7c54f49c21f5ffcc\\\",\\\"x-b3-sampled\\\":\\\"0\\\",\\\"x-ais-SessionId\\\":\\\"1613403150250\\\"},\\\"queryString\\\":{\\\"Sensor\\\":\\\"\\\"},\\\"routeParamteters\\\":{}}\"\r",
									"\r",
									"                            // \\\"requestObject\\\":\\\"{ \\\\\\\"url\\\\\\\":\\\\\\\"/api/delta/sim/v1/\\\\\\\", \\\\\\\"method\\\\\\\":\\\\\\\"GET\\\\\\\", \\\\\\\"headers\\\\\\\":{ \\\\\\\"Cache-Control\\\\\\\":\\\\\\\"no-cache\\\\\\\", \\\\\\\"Content-Type\\\\\\\":\\\\\\\"application/json\\\\\\\", \\\\\\\"Accept\\\\\\\":\\\\\\\"*/*\\\\\\\", \\\\\\\"Accept-Encoding\\\\\\\":\\\\\\\"gzip, deflate, br\\\\\\\", \\\\\\\"Authorization\\\\\\\":\\\\\\\"Basic Mzk4NjMxNzMtZDFjMC00OWZhLTk5N2UtOWZlOTBjYzdjMWE0OjEuMi4zLjQ=\\\\\\\", \\\\\\\"Host\\\\\\\":\\\\\\\"mg-iot.sandais.com\\\\\\\", \\\\\\\"User-Agent\\\\\\\":\\\\\\\"PostmanRuntime/7.26.8\\\\\\\", \\\\\\\"Content-Length\\\\\\\":\\\\\\\"0\\\\\\\", \\\\\\\"x-real-ip\\\\\\\":\\\\\\\"182.232.183.255\\\\\\\", \\\\\\\"x-forwarded-for\\\\\\\":\\\\\\\"182.232.183.255, 10.233.67.0\\\\\\\", \\\\\\\"x-forwarded-proto\\\\\\\":\\\\\\\"http\\\\\\\", \\\\\\\"x-ais-username\\\\\\\":\\\\\\\"AisPartner\\\\\\\", \\\\\\\"x-ais-orderref\\\\\\\":\\\\\\\"DeltaHTTPfail_202105112205194\\\\\\\", \\\\\\\"x-ais-orderdesc\\\\\\\":\\\\\\\"Get Delta from MG\\\\\\\", \\\\\\\"postman-token\\\\\\\":\\\\\\\"bbf854ac-bb85-4c37-a9ef-e7fc9a9bf629\\\\\\\", \\\\\\\"x-envoy-external-address\\\\\\\":\\\\\\\"10.233.67.0\\\\\\\", \\\\\\\"x-request-id\\\\\\\":\\\\\\\"0cf1dd4d-8d3e-41e6-a905-7401dc8ef0c5\\\\\\\", \\\\\\\"x-envoy-original-path\\\\\\\":\\\\\\\"/httpapis/api/delta/sim/v1/?Sensor\\\\\\\", \\\\\\\"x-b3-traceid\\\\\\\":\\\\\\\"9786021198d11953e64ec46e35c0c269\\\\\\\", \\\\\\\"x-b3-spanid\\\\\\\":\\\\\\\"9e1d4b0a5f7961e5\\\\\\\", \\\\\\\"x-b3-parentspanid\\\\\\\":\\\\\\\"e64ec46e35c0c269\\\\\\\", \\\\\\\"x-b3-sampled\\\\\\\":\\\\\\\"0\\\\\\\", \\\\\\\"x-ais-SessionId\\\\\\\":\\\\\\\"1620747436930\\\\\\\" }, \\\\\\\"queryString\\\\\\\":{ \\\\\\\"Sensor\\\\\\\":\\\\\\\"\\\\\\\" }, \\\\\\\"routeParamteters\\\\\\\":{ } }\\\"\r",
									"\r",
									"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
									"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodGet);\r",
									"                            console.log(\"headers.x_ais_userName : \" + jsonParseRequestObject.headers[header_x_ais_username] + \" = \" + x_ais_userName);\r",
									"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
									"                            console.log(\"headers.Authorization : \" + jsonParseRequestObject.headers.Authorization + \" = \" + authorization);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
									"                            pm.expect(jsonParseRequestObject.method).to.eql(methodGet);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_username]).to.eql(x_ais_userName);\r",
									"                            pm.expect(jsonParseRequestObject.headers.Authorization).to.eql(authorization);\r",
									"\r",
									"                            console.log(\"queryString.Sensor : \" + JSON.stringify(jsonParseRequestObject.queryString.Sensor) + \" = \" + JSON.stringify(\"\"));\r",
									"                            console.log(\"routeParamteters : \" + JSON.stringify(jsonParseRequestObject.routeParamteters) + \" = \" + JSON.stringify({}));\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.queryString.Sensor).to.eql(\"\"); \r",
									"                            pm.expect(jsonParseRequestObject.routeParamteters).to.eql({}); \r",
									"\r",
									"                            // check responseObject\r",
									"                            // \"responseObject\":\"{\\\"OperationStatus\\\":{\\\"Code\\\":\\\"40301\\\",\\\"DeveloperMessage\\\":\\\"The thingToken requested already exists.\\\"}}\"\r",
									"\r",
									"                            console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeTheClientRequestedAlreadyExists);\r",
									"                            console.log(\"response.OperationStatus.DeveloperMessage : \" + jsonParseResponseObject.OperationStatus.DeveloperMessage + \" = \" + resultDescriptionTheThingTokenRequestedAlreadyExists);\r",
									"\r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeTheClientRequestedAlreadyExists);  \r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheThingTokenRequestedAlreadyExists);  \r",
									"                        }\r",
									"                    }); \r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"setTimeout(function(){SearchLogFindTid();}, 40000); \r",
									"setTimeout(function(){CheckLog();}, 60000); \r",
									"\r",
									"setTimeout(function(){RemoveThingStateInfo();}, 70000); \r",
									"setTimeout(function(){RemoveThing();}, 80000); \r",
									"setTimeout(function(){RemoveAccount();}, 90000); \r",
									"setTimeout(function(){RemovePartner();}, 100000); \r",
									"\r",
									"setTimeout(function(){\r",
									"pm.environment.unset(\"current_timestamp\");\r",
									"pm.environment.unset(\"AccessToken\");\r",
									"pm.environment.unset(\"random_number\");\r",
									"pm.environment.unset(\"PartnerName\");\r",
									"pm.environment.unset(\"MerchantContact\");\r",
									"pm.environment.unset(\"CPID\");\r",
									"pm.environment.unset(\"GetResponse_PartnerId\");\r",
									"pm.environment.unset(\"AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountId\");\r",
									"pm.environment.unset(\"random_IM\");\r",
									"pm.environment.unset(\"random_ICCID\");\r",
									"pm.environment.unset(\"ThingName\");\r",
									"pm.environment.unset(\"GetResponse_ThingID\");\r",
									"pm.environment.unset(\"GetResponse_IMSI\");\r",
									"pm.environment.unset(\"encodedKeys_Authorization_Register\");\r",
									"pm.environment.unset(\"encodedKeys_Authorization_Delta\");\r",
									"pm.environment.unset(\"random_Sensor\");\r",
									"pm.environment.unset(\"random_Sensor_AsgardHTTP\");\r",
									"pm.environment.unset(\"GetResponse_ThingToken\");\r",
									"pm.environment.unset(\"tid\");\r",
									"pm.environment.unset(\"SensorKey_AsgardHTTP\");\r",
									"pm.environment.unset(\"timestamp\");\r",
									"}, 105000); \r",
									"setTimeout(async function(){}, 110000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var Username = pm.environment.get(\"Username\");\r",
									"var Password = pm.environment.get(\"Password\");\r",
									"\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"var controlapis = pm.environment.get(\"controlapis\");\r",
									"var httpapis = pm.environment.get(\"httpapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"//format YYYYMMDDHHMMSSS\r",
									"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
									"// console.log('currentTmestamp',currentTmestamp);\r",
									"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var Basic = pm.environment.get(\"Basic\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- statusCodeList --------------//\r",
									"//set variable to statusCodeList JSON.parse\r",
									"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
									"//set global variable to statusCode 200\r",
									"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
									"//set global variable to statusCode 201\r",
									"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
									"//set global variable to statusCode 403\r",
									"pm.globals.set(\"statusCodeForbidden\", statusCodeList.statusCodeForbidden);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultCodeList --------------//\r",
									"//set variable to resultCodeList JSON.parse\r",
									"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
									"//set global variable to resultCode \"20000\"\r",
									"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
									"//set global variable to resultCode \"20100\"\r",
									"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
									"//set global variable to resultCode \"40301\"\r",
									"pm.globals.set(\"resultCodeTheClientRequestedAlreadyExists\", resultCodeList.resultCodeTheClientRequestedAlreadyExists);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionSuccessList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
									"//set global variable to resultDescription \"SignInProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
									"//set global variable to resultDescription \"CreatePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
									"//set global variable to resultDescription \"CreateAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
									"//set global variable to resultDescription \"CreateThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThing\", resultDescriptionSuccessList.resultDescriptionCreateThing);\r",
									"//set global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThingStateInfo\", resultDescriptionSuccessList.resultDescriptionCreateThingStateInfo);\r",
									"//set global variable to resultDescription \"RemovePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
									"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
									"//set global variable to resultDescription \"RemoveThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThing\", resultDescriptionSuccessList.resultDescriptionRemoveThing);\r",
									"//set global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThingStateInfo\", resultDescriptionSuccessList.resultDescriptionRemoveThingStateInfo);\r",
									"//set global variable to resultDescription \"ControlOneThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessControlOneThing\", resultDescriptionSuccessList.resultDescriptionSuccessControlOneThing);\r",
									"//set global variable to resultDescription \"Register is Success\"\r",
									"pm.globals.set(\"resultDescriptionRegisterIsSuccess\", resultDescriptionSuccessList.resultDescriptionRegisterIsSuccess);\r",
									"//set global variable to resultDescription \"DeltaProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionDeltaProcessIsSuccess\", resultDescriptionSuccessList.resultDescriptionDeltaProcessIsSuccess);\r",
									"//set global variable to resultDescription \"The requested operation was successfully.\"\r",
									"pm.globals.set(\"resultDescriptionTheRequestedOperationWasSuccessfully\", resultDescriptionSuccessList.resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionErrorList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
									"//set global variable to resultDescription \"The thingToken requested already exists.\"\r",
									"pm.globals.set(\"resultDescriptionTheThingTokenRequestedAlreadyExists\", resultDescriptionErrorList.resultDescriptionTheThingTokenRequestedAlreadyExists);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- HeaderList --------------//\r",
									"//set variable to HeaderList JSON.parse\r",
									"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
									"//---------------- set globals Other --------------//\r",
									"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
									"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
									"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
									"//set global variable to kbn-versio \"7.5.1\"\r",
									"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Signin_ --------------//\r",
									"//set global variable to x_ais_OrderRef \"Signin_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreatePartner --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
									"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
									"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
									"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreateAccount --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
									"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
									"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Thing --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThing\", HeaderList.Thing.x_ais_OrderRef_CreateThing);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThing\", HeaderList.Thing.x_ais_OrderDesc_CreateThing);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThing\", HeaderList.Thing.x_ais_OrderRef_RemoveThing);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThing\", HeaderList.Thing.x_ais_OrderDesc_RemoveThing);\r",
									"//set global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_RemoveThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_RemoveThingStateInfo);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Control --------------//\r",
									"//set global variable to x_ais_OrderRef \"ControlThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ControlThing\", HeaderList.Control.x_ais_OrderRef_ControlThing);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals AsgardHTTP --------------//\r",
									"//set global variable to x_ais_OrderRef \"RegisHTTP_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RegisHTTP\", HeaderList.AsgardHTTP.x_ais_OrderRef_RegisHTTP);\r",
									"//set global variable to x_ais_OrderDesc \"Register Thing in MG\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RegisHTTP\", HeaderList.AsgardHTTP.x_ais_OrderDesc_RegisHTTP);\r",
									"//set global variable to x_ais_OrderRef \"DeltaHTTP_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_DeltaHTTP\", HeaderList.AsgardHTTP.x_ais_OrderRef_DeltaHTTP);\r",
									"//set global variable to x_ais_OrderRef \"DeltaHTTPfail_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_DeltaHTTP_fail\", HeaderList.AsgardHTTP.x_ais_OrderRef_DeltaHTTP_fail);\r",
									"//set global variable to x_ais_OrderDesc \"Get Delta from MG\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_DeltaHTTP\", HeaderList.AsgardHTTP.x_ais_OrderDesc_DeltaHTTP);\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"SignInProcess is Success\"\r",
									"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
									"//get global variable to resultDescription \"CreatePartner is Success\"\r",
									"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
									"//get global variable to resultDescription \"CreateAccount is Success\"\r",
									"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
									"//get global variable to resultDescription \"CreateThing is Success\"\r",
									"var resultDescriptionCreateThing = pm.globals.get(\"resultDescriptionCreateThing\");\r",
									"//get global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"var resultDescriptionCreateThingStateInfo = pm.globals.get(\"resultDescriptionCreateThingStateInfo\");\r",
									"//get global variable to resultDescription \"ControlOneThing is Success\"\r",
									"var resultDescriptionSuccessControlOneThing = pm.globals.get(\"resultDescriptionSuccessControlOneThing\");\r",
									"//get global variable to resultDescription \"Register is Success\"\r",
									"var resultDescriptionRegisterIsSuccess = pm.globals.get(\"resultDescriptionRegisterIsSuccess\");\r",
									"//get global variable to resultDescription \"The requested operation was successfully.\"\r",
									"var resultDescriptionTheRequestedOperationWasSuccessfully = pm.globals.get(\"resultDescriptionTheRequestedOperationWasSuccessfully\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- urlRouteList --------------//\r",
									"//set variable to urlRouteList JSON.parse\r",
									"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
									"//---------------- set url Create --------------//\r",
									"//set global variable to url \"/api/v1/auth/signin\"\r",
									"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
									"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
									"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"pm.globals.set(\"urlThingCreateThing\", urlRouteList.Thing.urlThingCreateThing);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"pm.globals.set(\"urlThingCreateThingStateInfo\", urlRouteList.Thing.urlThingCreateThingStateInfo);\r",
									"//set global variable to url \"/api/v1/Control/Thing\"\r",
									"pm.globals.set(\"urlControlThing\", urlRouteList.Control.urlControlThing);\r",
									"//set global variable to url \"/api/register/sim/v1\"\r",
									"pm.globals.set(\"urlAsgardHTTPeSimRegister\", urlRouteList.AsgardHTTPeSim.urlAsgardHTTPeSimRegister);\r",
									"//set global variable to url \"/api/delta/sim/v1/?Sensor\"\r",
									"pm.globals.set(\"urlAsgardHTTPeSimDelta\", urlRouteList.AsgardHTTPeSim.urlAsgardHTTPeSimDelta);\r",
									"//---------------- get url Create --------------//\r",
									"//get global variable to url \"/api/v1/auth/signin\"\r",
									"var urlSignin = pm.globals.get(\"urlSignin\");\r",
									"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
									"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"var urlThingCreateThing = pm.globals.get(\"urlThingCreateThing\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"var urlThingCreateThingStateInfo = pm.globals.get(\"urlThingCreateThingStateInfo\");\r",
									"//get global variable to url \"/api/v1/Control/Thing\"\r",
									"var urlControlThing = pm.globals.get(\"urlControlThing\");\r",
									"//get global variable to url \"/api/register/sim/v1\"\r",
									"var urlAsgardHTTPeSimRegister = pm.globals.get(\"urlAsgardHTTPeSimRegister\");\r",
									"//get global variable to url \"/api/delta/sim/v1/?Sensor\"\r",
									"var urlAsgardHTTPeSimDelta = pm.globals.get(\"urlAsgardHTTPeSimDelta\");\r",
									"//---------------- set url Remove --------------//\r",
									"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
									"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"pm.globals.set(\"urlThingRemoveThing\", urlRouteList.Thing.urlThingRemoveThing);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"pm.globals.set(\"urlThingRemoveThingStateInfo\", urlRouteList.Thing.urlThingRemoveThingStateInfo);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Signin_ --------------//\r",
									"//get global variable to x_ais_OrderRef \"Signin_\"\r",
									"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"var x_ais_OrderRef_CreateThing = pm.globals.get(\"x_ais_OrderRef_CreateThing\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"var x_ais_OrderDesc_CreateThing = pm.globals.get(\"x_ais_OrderDesc_CreateThing\");\r",
									"//get global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"var x_ais_OrderRef_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderRef_CreateThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"var x_ais_OrderDesc_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_CreateThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Control --------------//\r",
									"//get global variable to x_ais_OrderRef \"ControlThing_\"\r",
									"var x_ais_OrderRef_ControlThing = pm.globals.get(\"x_ais_OrderRef_ControlThing\");\r",
									"//get global variable to x_ais_OrderRef \"ControlThingfail_\"\r",
									"var x_ais_OrderRef_ControlThing_fail = pm.globals.get(\"x_ais_OrderRef_ControlThing_fail\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals AsgardHTTP --------------//\r",
									"//get global variable to x_ais_OrderRef \"RegisHTTP_\"\r",
									"var x_ais_OrderRef_RegisHTTP = pm.globals.get(\"x_ais_OrderRef_RegisHTTP\");\r",
									"//get global variable to x_ais_OrderDesc \"Register Thing in MG\"\r",
									"var x_ais_OrderDesc_RegisHTTP = pm.globals.get(\"x_ais_OrderDesc_RegisHTTP\");\r",
									"//------------------------------------------------------------//\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// Signin get token\r",
									"Signin = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSignin = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_Signin + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_UserAuthentication,\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestSignin = {\r",
									"            mode: 'raw',\r",
									"            raw:\r",
									"                JSON.stringify({\r",
									"                    username: Username,\r",
									"                    password: Password\r",
									"                })\r",
									"        };\r",
									"\r",
									"        let optionsSignin = {\r",
									"            url: url + provisioningapis + urlSignin,\r",
									"            method: 'POST',\r",
									"            header: headersOptSignin,\r",
									"            body: httpRequestSignin\r",
									"        };\r",
									"        // console.log('request Signin');\r",
									"        let response = await reqPromise(optionsSignin);\r",
									"        let jsonDataSignin = await response.json();\r",
									"\r",
									"        // setAccessToken\r",
									"        await pm.environment.set(\"AccessToken\", jsonDataSignin.AccessToken);\r",
									"\r",
									"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('Signin : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // SignInProcess is Success\r",
									"        pm.test('Signin : OperationStatus Description is ' + '\"' + resultDescriptionSuccessSignIn + '\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
									"        });\r",
									"\r",
									"        //set random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //set PartnerName\r",
									"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
									"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
									"        //set MerchantContact\r",
									"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
									"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
									"        // set CPID\r",
									"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
									"        pm.environment.set(\"CPID\", CPIDValue)\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreatePartner\r",
									"CreatePartner = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreatePartner = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreatePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreatePartner,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreatePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
									"                \"PartnerType\": [\r",
									"                    \"Supplier\",\r",
									"                    \"Customer\"\r",
									"                ],\r",
									"                \"PartnerDetail\": {\r",
									"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
									"                    \"CPID\": pm.environment.get(\"CPID\")\r",
									"                },\r",
									"                \"Property\": {\r",
									"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreatePartner = {\r",
									"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreatePartner,\r",
									"            body: httpRequestCreatePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsCreatePartner);\r",
									"        let jsonDataCreatePartner = await response.json();\r",
									"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
									"\r",
									"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreatePartner : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreatePartner is Success\r",
									"        pm.test('CreatePartner : OperationStatus Description is ' + '\"' + resultDescriptionCreatePartner + '\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
									"        });\r",
									"\r",
									"        //GetResponse_PartnerId\r",
									"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
									"\r",
									"        //Accountname\r",
									"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
									"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateAccount\r",
									"CreateAccount = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateAccount = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateAccount,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreateAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateAccount = {\r",
									"            url: url + provisioningapis + urlAccountCreateAccount,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateAccount,\r",
									"            body: httpRequestCreateAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateAccount');\r",
									"        let response = await reqPromise(optionsCreateAccount);\r",
									"        let jsonDataCreateAccount = await response.json();\r",
									"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
									"\r",
									"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateAccount : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateAccount is Success\r",
									"        pm.test('CreateAccount : OperationStatus Description is ' + '\"' + resultDescriptionCreateAccount + '\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
									"        });\r",
									"        // GetResponse_AccountName\r",
									"        pm.environment.set(\"GetResponse_AccountName\", jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
									"        // GetResponse_AccountId\r",
									"        pm.environment.set(\"GetResponse_AccountId\", jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
									"        // random_IM\r",
									"        pm.environment.set(\"random_IM\", _.random(10000000, 99999999) + \" \" + _.random(1000000, 9999999))\r",
									"        // random_ICCID\r",
									"        pm.environment.set(\"random_ICCID\", _.random(1000000, 9999999) + \" \" + _.random(100000, 999999))\r",
									"        // random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //ThingName\r",
									"        let thingNameValue = fieldDataValue.Thing.ThingNameValue; // \"Sensor_TestThingName\"\r",
									"        pm.environment.set(\"ThingName\", thingNameValue + pm.environment.get(\"random_number\"))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThing\r",
									"CreateThing = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThing = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateThing + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateThing,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey': pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreateThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingName\": pm.environment.get(\"ThingName\"),\r",
									"                \"IMEI\": pm.environment.get(\"random_IM\"),\r",
									"                \"IMSI\": pm.environment.get(\"random_IM\"),\r",
									"                \"ICCID\": pm.environment.get(\"random_ICCID\"),\r",
									"                \"RouteUrl\": fieldDataValue.Thing.RouteUrlValue , //[\"http://10.12.3.4:2019/api/information/AddInformation\"]\r",
									"                \"RouteInfo\": {\r",
									"                    \"MIMO_ID\": fieldDataValue.Thing.RouteInfoMIMOIDValue , //\"606edada\"\r",
									"                    \"MIMO_SerialNo\": fieldDataValue.Thing.RouteInfoMIMOSerialNoValue //5466758878\r",
									"                },\r",
									"                \"RouteFlag\": {\r",
									"                    \"ThingName\": fieldDataValue.Thing.RouteFlagThingNameValue , //true\r",
									"                    \"ThingToken\": fieldDataValue.Thing.RouteFlagThingTokenValue, //true\r",
									"                    \"IMEI\": fieldDataValue.Thing.RouteFlagIMEIValue, //true\r",
									"                    \"ICCID\": fieldDataValue.Thing.RouteFlagICCIDValue, //true\r",
									"                    \"RouteInfo\": fieldDataValue.Thing.RouteFlagRouteInfoValue //true\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateThing = {\r",
									"            url: url + provisioningapis + urlThingCreateThing,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThing,\r",
									"            body: httpRequestCreateThing\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThing');\r",
									"        let response = await reqPromise(optionsCreateThing);\r",
									"        let jsonDataCreateThing = await response.json();\r",
									"        // console.log('jsonDataCreateThing',jsonDataCreateThing)\r",
									"\r",
									"        let operationStatusCreateThing = await jsonDataCreateThing.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateThing : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateThing : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateThing is Success\r",
									"        pm.test('CreateThing : OperationStatus Description is ' + '\"' + resultDescriptionCreateThing + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Description', resultDescriptionCreateThing);\r",
									"        });\r",
									"\r",
									"        pm.environment.set(\"GetResponse_ThingID\", jsonDataCreateThing.ThingInfo.ThingId)\r",
									"        pm.environment.set(\"GetResponse_IMSI\", jsonDataCreateThing.ThingInfo.IMSI)\r",
									"        \r",
									"        let keys = pm.environment.get(\"GetResponse_IMSI\") + \":\" + pm.environment.get(\"IpAddress\");\r",
									"        // console.log(\"keys\", keys);\r",
									"        let encodedKeys = CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(keys));\r",
									"        pm.environment.set(\"encodedKeys_Authorization_Register\", encodedKeys);\r",
									"\r",
									"        //Get Random Sensor \r",
									"        pm.environment.set(\"random_Sensor\", _.random(100, 999))\r",
									"\r",
									"        //Get Random Sensor AsgardHTTP\r",
									"        pm.environment.set(\"random_Sensor_AsgardHTTP\", _.random(100, 999))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThingStateInfo\r",
									"CreateThingStateInfo = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThingStateInfo = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateThingStateInfo,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey': pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        // {\"AA\" : pm.environment.get(\"random_Sensor\")}\r",
									"        let sensorValue = {};\r",
									"        sensorValue[fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP] = pm.environment.get(\"random_Sensor\");\r",
									"        // console.log('sensorValue',sensorValue);\r",
									"        \r",
									"        let httpRequestCreateThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": [\r",
									"                    pm.environment.get(\"GetResponse_ThingID\")\r",
									"                ],\r",
									"                \"Type\": fieldDataValue.CreateThingStateInfo.Type_Report,\r",
									"                \"Sensor\": sensorValue\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingCreateThingStateInfo,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThingStateInfo,\r",
									"            body: httpRequestCreateThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThingStateInfo');\r",
									"        let response = await reqPromise(optionsCreateThingStateInfo);\r",
									"        let jsonDataCreateThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataCreateThingStateInfo',jsonDataCreateThingStateInfo)\r",
									"\r",
									"        let operationStatusCreateThingStateInfo = await jsonDataCreateThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"CreateThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //CreateThingStateInfo is Success\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Description is ' + '\"' + resultDescriptionCreateThingStateInfo + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Description', resultDescriptionCreateThingStateInfo);\r",
									"        });\r",
									"\r",
									"       \r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// ControlThing\r",
									"ControlThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptControlThing = {\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_ControlThing + current_timestamp,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Content-Type':ContentType_ApplicationJson\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        // {\"AA\" : pm.environment.get(\"random_Sensor_AsgardHTTP\")}\r",
									"        let sensorValue = {};\r",
									"        sensorValue[fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP] = pm.environment.get(\"random_Sensor_AsgardHTTP\");\r",
									"        // console.log('sensorValue',sensorValue);\r",
									"\r",
									"        let httpRequestControlThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\"),\r",
									"                \"Sensors\": sensorValue\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsControlThing = {\r",
									"            url: url + controlapis + urlControlThing,\r",
									"            method: 'POST',\r",
									"            header: headersOptControlThing,\r",
									"            body: httpRequestControlThing\r",
									"        };\r",
									"\r",
									"        // console.log('response ControlThing');\r",
									"        let response = await reqPromise(optionsControlThing);\r",
									"        let jsonDataControlThing = await response.json();\r",
									"        // console.log('jsonDataControlThing',jsonDataControlThing)\r",
									"    \r",
									"        let operationStatusControlThing = await jsonDataControlThing.operationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"ControlThing : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('ControlThing : OperationStatus code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusControlThing).to.have.property('code', resultCodeSuccess);\r",
									"        });\r",
									"        //ControlOneThing is Success\r",
									"        pm.test('ControlThing : OperationStatus description is '+'\"'+ resultDescriptionSuccessControlOneThing+'\"', function () {\r",
									"            pm.expect(operationStatusControlThing).to.have.property('description', resultDescriptionSuccessControlOneThing);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// AsgardHTTPeSimRegister\r",
									"AsgardHTTPeSimRegister = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptAsgardHTTPeSimRegister = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_RegisHTTP + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_RegisHTTP,\r",
									"            'Authorization': Basic + ' ' + pm.environment.get(\"encodedKeys_Authorization_Register\")\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestAsgardHTTPeSimRegister = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({})\r",
									"        };\r",
									"\r",
									"        let optionsAsgardHTTPeSimRegister = {\r",
									"            url: url + httpapis + urlAsgardHTTPeSimRegister,\r",
									"            method: 'POST',\r",
									"            header: headersOptAsgardHTTPeSimRegister,\r",
									"            body: httpRequestAsgardHTTPeSimRegister\r",
									"        };\r",
									"\r",
									"        // console.log('request AsgardHTTPEsimRegister');\r",
									"        let response = await reqPromise(optionsAsgardHTTPeSimRegister);\r",
									"        let jsonDataAsgardHTTPeSimRegister = await response.json();\r",
									"        // console.log('jsonDataCreateThingStateInfo',jsonDataAsgardHTTPeSimRegister)\r",
									"        let operationStatusAsgardHTTPeSimRegister = await jsonDataAsgardHTTPeSimRegister.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"Asgard HTTP(eSim) Register : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('Asgard HTTP(eSim) Register : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusAsgardHTTPeSimRegister).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"\r",
									"        // The requested operation was successfully.\r",
									"        pm.test('Asgard HTTP(eSim) Register : OperationStatus DeveloperMessage is ' + '\"' + resultDescriptionTheRequestedOperationWasSuccessfully + '\"', function () {\r",
									"            pm.expect(operationStatusAsgardHTTPeSimRegister).to.have.property('DeveloperMessage', resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"        });\r",
									"\r",
									"        await pm.environment.set(\"GetResponse_ThingToken\", jsonDataAsgardHTTPeSimRegister.ThingToken)\r",
									"        let keys2 = await await fieldDataValue.AsgardHTTP.Value_AsgardHTTPeSim_Delta_TST_F3_0_2_005_Username_Error + \":\" + fieldDataValue.AsgardHTTP.Value_AsgardHTTPeSim_Delta_TST_F3_0_2_005_Password_Error;      \r",
									"        let encodedKeys2 = await CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(keys2));\r",
									"        pm.environment.set(\"encodedKeys_Authorization_Delta\", encodedKeys2)\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"Signin();\r",
									"setTimeout(async function(){await CreatePartner();}, 3000); \r",
									"setTimeout(async function(){await CreateAccount();}, 6000); \r",
									"setTimeout(async function(){await CreateThing();}, 8000); \r",
									"setTimeout(async function(){await CreateThingStateInfo();}, 9000); \r",
									"setTimeout(async function(){await ControlThing();}, 10000); \r",
									"setTimeout(async function(){await AsgardHTTPeSimRegister();}, 20000); \r",
									"setTimeout(async function(){}, 30000); //for wait value encodedKeys_Authorization_Delta"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-ais-UserName",
								"type": "text",
								"value": "{{x_ais_UserName_AisPartner}}"
							},
							{
								"key": "x-ais-OrderRef",
								"value": "{{x_ais_OrderRef_DeltaHTTP_fail}}{{current_timestamp}}"
							},
							{
								"key": "x-ais-OrderDesc",
								"type": "text",
								"value": "{{x_ais_OrderDesc_DeltaHTTP}}"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{Basic}} {{encodedKeys_Authorization_Delta}}"
							}
						],
						"url": {
							"raw": "{{url}}{{httpapis}}/api/delta/sim/v1/?Sensor=",
							"host": [
								"{{url}}{{httpapis}}"
							],
							"path": [
								"api",
								"delta",
								"sim",
								"v1",
								""
							],
							"query": [
								{
									"key": "Sensor",
									"value": ""
								}
							]
						},
						"description": "Type:Desire"
					},
					"response": []
				},
				{
					"name": "AsgardHTTPeSimDelta_TST_F3_0_2_006_Error_ThingStatusIdle",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var Basic = pm.environment.get(\"Basic\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to xAisOrderRef \"RemoveThing_\"\r",
									"var x_ais_OrderRef_RemoveThing = pm.globals.get(\"x_ais_OrderRef_RemoveThing\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"var x_ais_OrderDesc_RemoveThing = pm.globals.get(\"x_ais_OrderDesc_RemoveThing\");\r",
									"//get global variable to xAisOrderRef \"RemoveThingStateInfo_\"\r",
									"var x_ais_OrderRef_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderRef_RemoveThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThingStateInfo\"\r",
									"var x_ais_OrderDesc_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_RemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals AsgardHTTP --------------//\r",
									"//get global variable to x_ais_OrderRef \"DeltaHTTP_\"\r",
									"var x_ais_OrderRef_DeltaHTTP = pm.globals.get(\"x_ais_OrderRef_DeltaHTTP\");\r",
									"//get global variable to x_ais_OrderRef \"DeltaHTTPfail_\"\r",
									"var x_ais_OrderRef_DeltaHTTP_fail = pm.globals.get(\"x_ais_OrderRef_DeltaHTTP_fail\");\r",
									"//get global variable to x_ais_OrderDesc \"Get Delta from MG\"\r",
									"var x_ais_OrderDesc_DeltaHTTP = pm.globals.get(\"x_ais_OrderDesc_DeltaHTTP\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get url Remove --------------//\r",
									"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
									"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"var urlThingRemoveThing = pm.globals.get(\"urlThingRemoveThing\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"var urlThingRemoveThingStateInfo = pm.globals.get(\"urlThingRemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"RemovePartner is Success\"\r",
									"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
									"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
									"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
									"//get global variable to resultDescription \"RemoveThing is Success\"\r",
									"var resultDescriptionRemoveThing = pm.globals.get(\"resultDescriptionRemoveThing\");\r",
									"//get global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"var resultDescriptionRemoveThingStateInfo = pm.globals.get(\"resultDescriptionRemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 404\r",
									"var statusCodeNotFound = pm.globals.get(\"statusCodeNotFound\");\r",
									"//get global variable to resultCode \"40400\"\r",
									"var resultCodeNotFound = pm.globals.get(\"resultCodeNotFound\");\r",
									"//get global variable to resultDescription \"The requested operation could not be found.\"\r",
									"var resultDescriptionTheRequestedOperationCouldNotBeFound = pm.globals.get(\"resultDescriptionTheRequestedOperationCouldNotBeFound\");\r",
									"//------------------------------------------------------------//\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Asgard HTTP(eSim) Delta : Status code is \" + statusCodeNotFound, function () {\r",
									"    pm.response.to.have.status(statusCodeNotFound);\r",
									"});\r",
									"\r",
									"pm.test('Asgard HTTP(eSim) Delta : operationStatus code is '+'\"'+ resultCodeNotFound +'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeNotFound);\r",
									"});\r",
									"\r",
									"pm.test('Asgard HTTP(eSim) Delta : OperationStatus DeveloperMessage is '+'\"'+ resultDescriptionTheRequestedOperationCouldNotBeFound+'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheRequestedOperationCouldNotBeFound);\r",
									"});\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// RemovePartner\r",
									" RemovePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemovePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemovePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemovePartner = {\r",
									"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemovePartner,\r",
									"            body: httpRequestRemovePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request RemovePartner');\r",
									"        let response = await reqPromise(optionsRemovePartner);\r",
									"        let jsonDataRemovePartner = await response.json();\r",
									"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
									"    \r",
									"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemovePartner is Success\r",
									"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveAccount\r",
									" RemoveAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemoveAccount = {\r",
									"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveAccount,\r",
									"            body: httpRequestRemoveAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveAccount');\r",
									"        let response = await reqPromise(optionsRemoveAccount);\r",
									"        let jsonDataRemoveAccount = await response.json();\r",
									"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
									"    \r",
									"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveAccount is Success\r",
									"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThing\r",
									" RemoveThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThing = {\r",
									"            url: url + provisioningapis + urlThingRemoveThing,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThing,\r",
									"            body: httpRequestRemoveThing\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveThing');\r",
									"        let response = await reqPromise(optionsRemoveThing);\r",
									"        let jsonDataRemoveThing = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThing)\r",
									"    \r",
									"        let operationStatusRemoveThing = await jsonDataRemoveThing.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThing : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThing : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThing is Success\r",
									"        pm.test('RemoveThing : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThing+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Description', resultDescriptionRemoveThing);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThingStateInfo\r",
									" RemoveThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"            \r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\"),\r",
									"                \"stateType\": fieldDataValue.CreateThingStateInfo.Type_Report, //Report\r",
									"                \"stateKey\": fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP //AA\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingRemoveThingStateInfo,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThingStateInfo,\r",
									"            body: httpRequestRemoveThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('response RemoveThingStateInfo');\r",
									"        let response = await reqPromise(optionsRemoveThingStateInfo);\r",
									"        let jsonDataRemoveThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThingStateInfo)\r",
									"    \r",
									"        let operationStatusRemoveThingStateInfo = await jsonDataRemoveThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThingStateInfo is Success\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThingStateInfo+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Description', resultDescriptionRemoveThingStateInfo);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"//---------------- LogDefaultValue --------------//\r",
									"//set variable to LogDefaultValue JSON.parse\r",
									"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
									"// console.log('LogDefaultValue',LogDefaultValue);\r",
									"//---------------- set globals Other --------------//\r",
									"\r",
									"var SearchLog = LogDefaultValue.SearchLog;\r",
									"// console.log('SearchLog',SearchLog);\r",
									"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
									"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
									"var kbn_version = SearchLog.header.kbn_version;\r",
									"var authorization = SearchLog.header.Authorization;\r",
									"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
									"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
									"var namespace = LogDefaultValue.Other.namespace;\r",
									"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
									"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
									"var header_x_ais_username = LogDefaultValue.Other.header_x_ais_username;\r",
									"var methodGet = LogDefaultValue.Other.methodGet;\r",
									"\r",
									"// Detail\r",
									"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
									"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
									"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
									"\r",
									"// Summary\r",
									"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
									"var identitySummary = \"\";\r",
									"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
									"\r",
									"// Asgard.Http.APIs\r",
									"var applicationName = LogDefaultValue.AsgardHTTP.applicationName;\r",
									"var cmdName = LogDefaultValue.AsgardHTTP.cmdNameDelta;\r",
									"var endPointNameRabbitMQ = LogDefaultValue.AsgardHTTP.endPointNameRabbitMQ;\r",
									"var containerId = LogDefaultValue.AsgardHTTP.containerId;\r",
									"var requestObjectUrlStaging = LogDefaultValue.AsgardHTTP.requestObjectUrlDeltaMgStaging;\r",
									"var urlDelta  = LogDefaultValue.AsgardHTTP.urlDelta;\r",
									"\r",
									"// Check CDR (Summary Log) and EDR (Detail Log)\r",
									"SearchLogFindTid = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSearchLogFindTid = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = x_ais_OrderRef_DeltaHTTP_fail + current_timestamp;\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestSearchLogFindTid = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"\r",
									"        let optionsSearchLogFindTid = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptSearchLogFindTid,\r",
									"            body: httpRequestSearchLogFindTid\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsSearchLogFindTid);\r",
									"        let jsonDataSearchLogFindTid = await response.json();\r",
									"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
									"        // console.log('hits',hits)\r",
									"  \r",
									"        // find tid\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            // let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"        \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            if(applicationNameValue == applicationName){\r",
									"                let tid = hits[i]._source.cauldron.tid;\r",
									"                pm.environment.set(\"tid\", tid);\r",
									"                break;\r",
									"           }\r",
									"        }\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"CheckLog = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCheckLog = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = pm.environment.get(\"tid\");\r",
									"\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestCheckLog = {\r",
									"            mode: 'raw',\r",
									"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"        let optionsCheckLog = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptCheckLog,\r",
									"            body: httpRequestCheckLog\r",
									"        }; \r",
									"        let response = await reqPromise(optionsCheckLog);\r",
									"        let jsonDataCheckLog = await response.json();\r",
									"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
									"        \r",
									"        // //200\r",
									"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });     \r",
									"        \r",
									"        let hits = jsonDataCheckLog.hits.hits\r",
									"        console.log('hits',hits)\r",
									"  \r",
									"        // find logType\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            //  let logType = hits[i]._source.cauldron.logType\r",
									"            let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"           \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            \r",
									"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
									"            // console.log('resultDataLog',resultDataLog)\r",
									"\r",
									"            let tidControl = x_ais_OrderRef_DeltaHTTP_fail  + current_timestamp;\r",
									"            // console.log(tidControl);\r",
									"            if(applicationNameValue == applicationName){\r",
									"                 \r",
									"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and Asgard.Http.APIs\r",
									"                    pm.test(\"Check Summary Log : Asgard_HTTP(eSim) Delta\" , function () {\r",
									"                        console.log(\"======== Check Summary Log ( Expected = Actual) [Asgard_HTTP(eSim) Delta] ==================\");\r",
									"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
									"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
									"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeNotFound);\r",
									"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionTheRequestedOperationCouldNotBeFound);\r",
									"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
									"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"identity : \" + JSON.stringify(resultDataLog.identity) + \" = \" + JSON.stringify(identitySummary));\r",
									"                        // console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
									"\r",
									"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
									"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
									"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeNotFound); \r",
									"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionTheRequestedOperationCouldNotBeFound); \r",
									"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
									"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
									"                        // pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
									"\r",
									"                        // check custom\r",
									"                        // \\\"custom\\\":{ \\\"endPointSummary\\\":[ { \\\"no\\\":\\\"1\\\", \\\"endPointName\\\":\\\"db.ThingsCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:Inquiry was Success\\\", \\\"processTime\\\":0.0008 } ] }\r",
									"\r",
									"                        let custom = resultDataLog.custom.endPointSummary;\r",
									"                        let countCustom = custom.length;\r",
									"                       \r",
									"                        // [\"db.ThingsCollection\"]\r",
									"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_Asgard_HTTP_eSim_Delta_002_004_005_006;\r",
									"                        // [\"20000:Inquiry was Success\"]\r",
									"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_Asgard_HTTP_eSim_Delta_002_004_005_006;\r",
									"                        let countCustomStep = dataEndPointName.length;\r",
									"\r",
									"                        console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep);\r",
									"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
									"                        \r",
									"                        for(let i=0;i<countCustomStep;i++){\r",
									"                            let no = custom[i].no;\r",
									"                            let valueEndPointName = custom[i].endPointName;\r",
									"                            let valueResponseStatus = custom[i].responseStatus;\r",
									"                            // console.log(\"i\",i);\r",
									"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
									"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
									"\r",
									"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString());\r",
									"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i]);\r",
									"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i]);\r",
									"\r",
									"                            pm.expect(no).to.eql((i+1).toString()); \r",
									"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
									"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]); \r",
									"                        }\r",
									"                    }); \r",
									"                }\r",
									"\r",
									"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and Asgard.Http.APIs\r",
									"\r",
									"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
									"                    // console.log('endPointNameValue ',endPointNameValue)\r",
									"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [Asgard_HTTP(eSim) Delta]\", function () {\r",
									"                        console.log(\"======== Check Detail Log ( Expected = Actual) [Asgard_HTTP(eSim) Delta] ==================\");\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
									"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
									"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
									"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.custom1.activityLog.processTime + \" = \" + resultDataLog.custom1.activityLog.processTime);\r",
									"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
									"\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
									"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
									"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
									"\r",
									"                        let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
									"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
									"                        let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
									"                            // console.log('jsonParseResponseObject',jsonParseResponseObject); \r",
									"                        let url = urlDelta; \r",
									"                        let x_ais_orderref = x_ais_OrderRef_DeltaHTTP_fail + current_timestamp;\r",
									"                        let x_ais_orderdesc = x_ais_OrderDesc_DeltaHTTP;\r",
									"                        let x_ais_userName = x_ais_UserName_AisPartner;\r",
									"                        let authorization = Basic + ' ' + pm.environment.get(\"encodedKeys_Authorization_Delta\");\r",
									"                        let SensorKey = fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP;\r",
									"                        let sensor = pm.environment.get(\"random_Sensor\");\r",
									"                        let timestamp = pm.environment.get(\"timestamp\");\r",
									"\r",
									"                        if( endPointNameValue == undefined){\r",
									"                            // check requestObject\r",
									"                            // \"requestObject\":\"{\\\"url\\\":\\\"/api/delta/sim/v1/\\\",\\\"method\\\":\\\"GET\\\",\\\"headers\\\":{\\\"Cache-Control\\\":\\\"no-cache\\\",\\\"Content-Type\\\":\\\"application/json\\\",\\\"Accept\\\":\\\"*/*\\\",\\\"Accept-Encoding\\\":\\\"gzip,deflate,br\\\",\\\"Authorization\\\":\\\"Basic MzgxMTJmNzYtYmVjZC00NTUwLTllZDMtY2UxMzNkYjhmOGRkeHg6MS4yLjMuNA==\\\",\\\"Host\\\":\\\"mg-staging.sandais.com\\\",\\\"User-Agent\\\":\\\"PostmanRuntime/7.26.8\\\",\\\"Content-Length\\\":\\\"0\\\",\\\"x-real-ip\\\":\\\"58.8.214.174\\\",\\\"x-forwarded-for\\\":\\\"58.8.214.174\\\",\\\"x-forwarded-proto\\\":\\\"https\\\",\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"DeltaHTTPfail_202102152202712\\\",\\\"x-ais-orderdesc\\\":\\\"Get Delta from MG\\\",\\\"postman-token\\\":\\\"79b55c96-1b2c-4594-afc9-9301895d4e54\\\",\\\"x-request-id\\\":\\\"f14d2d5c-bc4c-4484-9fd2-d1bdd5397a4e\\\",\\\"x-b3-traceid\\\":\\\"fd5ae6c9a217811d7c54f49c21f5ffcc\\\",\\\"x-b3-spanid\\\":\\\"7c54f49c21f5ffcc\\\",\\\"x-b3-sampled\\\":\\\"0\\\",\\\"x-ais-SessionId\\\":\\\"1613403150250\\\"},\\\"queryString\\\":{\\\"Sensor\\\":\\\"\\\"},\\\"routeParamteters\\\":{}}\"\r",
									"\r",
									"                            // \\\"requestObject\\\":\\\"{ \\\\\\\"url\\\\\\\":\\\\\\\"/api/delta/sim/v1/\\\\\\\", \\\\\\\"method\\\\\\\":\\\\\\\"GET\\\\\\\", \\\\\\\"headers\\\\\\\":{ \\\\\\\"Cache-Control\\\\\\\":\\\\\\\"no-cache\\\\\\\", \\\\\\\"Content-Type\\\\\\\":\\\\\\\"application/json\\\\\\\", \\\\\\\"Accept\\\\\\\":\\\\\\\"*/*\\\\\\\", \\\\\\\"Accept-Encoding\\\\\\\":\\\\\\\"gzip, deflate, br\\\\\\\", \\\\\\\"Authorization\\\\\\\":\\\\\\\"Basic NGU5ZmI5ODMtZDdiMi00YTI0LTgwMGMtMzVkMzZlYWQ1ODAweHg6MS4yLjMuNA==\\\\\\\", \\\\\\\"Host\\\\\\\":\\\\\\\"mg-iot.sandais.com\\\\\\\", \\\\\\\"User-Agent\\\\\\\":\\\\\\\"PostmanRuntime/7.26.8\\\\\\\", \\\\\\\"Content-Length\\\\\\\":\\\\\\\"0\\\\\\\", \\\\\\\"x-real-ip\\\\\\\":\\\\\\\"182.232.183.255\\\\\\\", \\\\\\\"x-forwarded-for\\\\\\\":\\\\\\\"182.232.183.255, 10.233.66.0\\\\\\\", \\\\\\\"x-forwarded-proto\\\\\\\":\\\\\\\"http\\\\\\\", \\\\\\\"x-ais-username\\\\\\\":\\\\\\\"AisPartner\\\\\\\", \\\\\\\"x-ais-orderref\\\\\\\":\\\\\\\"DeltaHTTPfail_202105112205051\\\\\\\", \\\\\\\"x-ais-orderdesc\\\\\\\":\\\\\\\"Get Delta from MG\\\\\\\", \\\\\\\"postman-token\\\\\\\":\\\\\\\"db2fa224-c56d-4a02-b4ff-ab267ebe1735\\\\\\\", \\\\\\\"x-envoy-external-address\\\\\\\":\\\\\\\"10.233.66.0\\\\\\\", \\\\\\\"x-request-id\\\\\\\":\\\\\\\"779aed16-85da-4ee0-83bf-b338b841fdb8\\\\\\\", \\\\\\\"x-envoy-original-path\\\\\\\":\\\\\\\"/httpapis/api/delta/sim/v1/?Sensor\\\\\\\", \\\\\\\"x-b3-traceid\\\\\\\":\\\\\\\"ca718854b9348ef602a7c7043a65485e\\\\\\\", \\\\\\\"x-b3-spanid\\\\\\\":\\\\\\\"091e59ff7f6ce73a\\\\\\\", \\\\\\\"x-b3-parentspanid\\\\\\\":\\\\\\\"02a7c7043a65485e\\\\\\\", \\\\\\\"x-b3-sampled\\\\\\\":\\\\\\\"0\\\\\\\", \\\\\\\"x-ais-SessionId\\\\\\\":\\\\\\\"1620747693915\\\\\\\" }, \\\\\\\"queryString\\\\\\\":{ \\\\\\\"Sensor\\\\\\\":\\\\\\\"\\\\\\\" }, \\\\\\\"routeParamteters\\\\\\\":{ } }\\\"\r",
									"\r",
									"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
									"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodGet);\r",
									"                            console.log(\"headers.x_ais_userName : \" + jsonParseRequestObject.headers[header_x_ais_username] + \" = \" + x_ais_userName);\r",
									"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
									"                            console.log(\"headers.Authorization : \" + jsonParseRequestObject.headers.Authorization + \" = \" + authorization);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
									"                            pm.expect(jsonParseRequestObject.method).to.eql(methodGet);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_username]).to.eql(x_ais_userName);\r",
									"                            pm.expect(jsonParseRequestObject.headers.Authorization).to.eql(authorization);\r",
									"\r",
									"                            console.log(\"queryString.Sensor : \" + JSON.stringify(jsonParseRequestObject.queryString.Sensor) + \" = \" + JSON.stringify(\"\"));\r",
									"                            console.log(\"routeParamteters : \" + JSON.stringify(jsonParseRequestObject.routeParamteters) + \" = \" + JSON.stringify({}));\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.queryString.Sensor).to.eql(\"\"); \r",
									"                            pm.expect(jsonParseRequestObject.routeParamteters).to.eql({}); \r",
									"\r",
									"                            // check responseObject\r",
									"                            // \"responseObject\":\"{\\\"OperationStatus\\\":{\\\"Code\\\":\\\"40400\\\",\\\"DeveloperMessage\\\":\\\"The requested operation could not be found.\\\"}}\"\r",
									"\r",
									"                            console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeNotFound);\r",
									"                            console.log(\"response.OperationStatus.DeveloperMessage : \" + jsonParseResponseObject.OperationStatus.DeveloperMessage + \" = \" + resultDescriptionTheRequestedOperationCouldNotBeFound);\r",
									"\r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeNotFound);  \r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheRequestedOperationCouldNotBeFound);  \r",
									"                        }\r",
									"                    }); \r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"setTimeout(function(){SearchLogFindTid();}, 50000); \r",
									"setTimeout(function(){CheckLog();}, 70000); \r",
									" \r",
									"setTimeout(function(){RemovePartner();}, 80000); \r",
									"\r",
									"setTimeout(function(){\r",
									"pm.environment.unset(\"current_timestamp\");\r",
									"pm.environment.unset(\"AccessToken\");\r",
									"pm.environment.unset(\"random_number\");\r",
									"pm.environment.unset(\"PartnerName\");\r",
									"pm.environment.unset(\"MerchantContact\");\r",
									"pm.environment.unset(\"CPID\");\r",
									"pm.environment.unset(\"GetResponse_PartnerId\");\r",
									"pm.environment.unset(\"AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountId\");\r",
									"pm.environment.unset(\"random_IM\");\r",
									"pm.environment.unset(\"random_ICCID\");\r",
									"pm.environment.unset(\"ThingName\");\r",
									"pm.environment.unset(\"GetResponse_ThingID\");\r",
									"pm.environment.unset(\"GetResponse_IMSI\");\r",
									"pm.environment.unset(\"encodedKeys_Authorization_Register\");\r",
									"pm.environment.unset(\"encodedKeys_Authorization_Delta\");\r",
									"pm.environment.unset(\"random_Sensor\");\r",
									"pm.environment.unset(\"random_Sensor_AsgardHTTP\");\r",
									"pm.environment.unset(\"GetResponse_ThingToken\");\r",
									"pm.environment.unset(\"tid\");\r",
									"pm.environment.unset(\"SensorKey_AsgardHTTP\");\r",
									"pm.environment.unset(\"timestamp\");\r",
									"}, 85000); \r",
									"setTimeout(async function(){}, 90000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var Username = pm.environment.get(\"Username\");\r",
									"var Password = pm.environment.get(\"Password\");\r",
									"\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"var controlapis = pm.environment.get(\"controlapis\");\r",
									"var httpapis = pm.environment.get(\"httpapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"//format YYYYMMDDHHMMSSS\r",
									"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
									"// console.log('currentTmestamp',currentTmestamp);\r",
									"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var Basic = pm.environment.get(\"Basic\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- statusCodeList --------------//\r",
									"//set variable to statusCodeList JSON.parse\r",
									"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
									"//set global variable to statusCode 200\r",
									"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
									"//set global variable to statusCode 201\r",
									"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
									"//set global variable to statusCode 404\r",
									"pm.globals.set(\"statusCodeNotFound\", statusCodeList.statusCodeNotFound);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultCodeList --------------//\r",
									"//set variable to resultCodeList JSON.parse\r",
									"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
									"//set global variable to resultCode \"20000\"\r",
									"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
									"//set global variable to resultCode \"20100\"\r",
									"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
									"//set global variable to resultCode \"40400\"\r",
									"pm.globals.set(\"resultCodeNotFound\", resultCodeList.resultCodeNotFound);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionSuccessList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
									"//set global variable to resultDescription \"SignInProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
									"//set global variable to resultDescription \"CreatePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
									"//set global variable to resultDescription \"CreateAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
									"//set global variable to resultDescription \"CreateThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThing\", resultDescriptionSuccessList.resultDescriptionCreateThing);\r",
									"//set global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThingStateInfo\", resultDescriptionSuccessList.resultDescriptionCreateThingStateInfo);\r",
									"//set global variable to resultDescription \"RemovePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
									"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
									"//set global variable to resultDescription \"RemoveThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThing\", resultDescriptionSuccessList.resultDescriptionRemoveThing);\r",
									"//set global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThingStateInfo\", resultDescriptionSuccessList.resultDescriptionRemoveThingStateInfo);\r",
									"//set global variable to resultDescription \"ControlOneThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessControlOneThing\", resultDescriptionSuccessList.resultDescriptionSuccessControlOneThing);\r",
									"//set global variable to resultDescription \"Register is Success\"\r",
									"pm.globals.set(\"resultDescriptionRegisterIsSuccess\", resultDescriptionSuccessList.resultDescriptionRegisterIsSuccess);\r",
									"//set global variable to resultDescription \"DeltaProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionDeltaProcessIsSuccess\", resultDescriptionSuccessList.resultDescriptionDeltaProcessIsSuccess);\r",
									"//set global variable to resultDescription \"The requested operation was successfully.\"\r",
									"pm.globals.set(\"resultDescriptionTheRequestedOperationWasSuccessfully\", resultDescriptionSuccessList.resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionErrorList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
									"//set global variable to resultDescription \"The requested operation could not be found.\"\r",
									"pm.globals.set(\"resultDescriptionTheRequestedOperationCouldNotBeFound\", resultDescriptionErrorList.resultDescriptionTheRequestedOperationCouldNotBeFound);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- HeaderList --------------//\r",
									"//set variable to HeaderList JSON.parse\r",
									"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
									"//---------------- set globals Other --------------//\r",
									"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
									"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
									"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
									"//set global variable to kbn-versio \"7.5.1\"\r",
									"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Signin_ --------------//\r",
									"//set global variable to x_ais_OrderRef \"Signin_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreatePartner --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
									"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
									"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
									"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreateAccount --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
									"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
									"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Thing --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThing\", HeaderList.Thing.x_ais_OrderRef_CreateThing);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThing\", HeaderList.Thing.x_ais_OrderDesc_CreateThing);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThing\", HeaderList.Thing.x_ais_OrderRef_RemoveThing);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThing\", HeaderList.Thing.x_ais_OrderDesc_RemoveThing);\r",
									"//set global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_RemoveThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_RemoveThingStateInfo);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Control --------------//\r",
									"//set global variable to x_ais_OrderRef \"ControlThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ControlThing\", HeaderList.Control.x_ais_OrderRef_ControlThing);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals AsgardHTTP --------------//\r",
									"//set global variable to x_ais_OrderRef \"RegisHTTP_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RegisHTTP\", HeaderList.AsgardHTTP.x_ais_OrderRef_RegisHTTP);\r",
									"//set global variable to x_ais_OrderDesc \"Register Thing in MG\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RegisHTTP\", HeaderList.AsgardHTTP.x_ais_OrderDesc_RegisHTTP);\r",
									"//set global variable to x_ais_OrderRef \"DeltaHTTP_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_DeltaHTTP\", HeaderList.AsgardHTTP.x_ais_OrderRef_DeltaHTTP);\r",
									"//set global variable to x_ais_OrderRef \"DeltaHTTPfail_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_DeltaHTTP_fail\", HeaderList.AsgardHTTP.x_ais_OrderRef_DeltaHTTP_fail);\r",
									"//set global variable to x_ais_OrderDesc \"Get Delta from MG\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_DeltaHTTP\", HeaderList.AsgardHTTP.x_ais_OrderDesc_DeltaHTTP);\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"SignInProcess is Success\"\r",
									"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
									"//get global variable to resultDescription \"CreatePartner is Success\"\r",
									"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
									"//get global variable to resultDescription \"CreateAccount is Success\"\r",
									"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
									"//get global variable to resultDescription \"CreateThing is Success\"\r",
									"var resultDescriptionCreateThing = pm.globals.get(\"resultDescriptionCreateThing\");\r",
									"//get global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"var resultDescriptionCreateThingStateInfo = pm.globals.get(\"resultDescriptionCreateThingStateInfo\");\r",
									"//get global variable to resultDescription \"ControlOneThing is Success\"\r",
									"var resultDescriptionSuccessControlOneThing = pm.globals.get(\"resultDescriptionSuccessControlOneThing\");\r",
									"//get global variable to resultDescription \"Register is Success\"\r",
									"var resultDescriptionRegisterIsSuccess = pm.globals.get(\"resultDescriptionRegisterIsSuccess\");\r",
									"//get global variable to resultDescription \"The requested operation was successfully.\"\r",
									"var resultDescriptionTheRequestedOperationWasSuccessfully = pm.globals.get(\"resultDescriptionTheRequestedOperationWasSuccessfully\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- urlRouteList --------------//\r",
									"//set variable to urlRouteList JSON.parse\r",
									"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
									"//---------------- set url Create --------------//\r",
									"//set global variable to url \"/api/v1/auth/signin\"\r",
									"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
									"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
									"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"pm.globals.set(\"urlThingCreateThing\", urlRouteList.Thing.urlThingCreateThing);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"pm.globals.set(\"urlThingCreateThingStateInfo\", urlRouteList.Thing.urlThingCreateThingStateInfo);\r",
									"//set global variable to url \"/api/v1/Control/Thing\"\r",
									"pm.globals.set(\"urlControlThing\", urlRouteList.Control.urlControlThing);\r",
									"//set global variable to url \"/api/register/sim/v1\"\r",
									"pm.globals.set(\"urlAsgardHTTPeSimRegister\", urlRouteList.AsgardHTTPeSim.urlAsgardHTTPeSimRegister);\r",
									"//set global variable to url \"/api/delta/sim/v1/?Sensor\"\r",
									"pm.globals.set(\"urlAsgardHTTPeSimDelta\", urlRouteList.AsgardHTTPeSim.urlAsgardHTTPeSimDelta);\r",
									"//---------------- get url Create --------------//\r",
									"//get global variable to url \"/api/v1/auth/signin\"\r",
									"var urlSignin = pm.globals.get(\"urlSignin\");\r",
									"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
									"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"var urlThingCreateThing = pm.globals.get(\"urlThingCreateThing\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"var urlThingCreateThingStateInfo = pm.globals.get(\"urlThingCreateThingStateInfo\");\r",
									"//get global variable to url \"/api/v1/Control/Thing\"\r",
									"var urlControlThing = pm.globals.get(\"urlControlThing\");\r",
									"//get global variable to url \"/api/register/sim/v1\"\r",
									"var urlAsgardHTTPeSimRegister = pm.globals.get(\"urlAsgardHTTPeSimRegister\");\r",
									"//get global variable to url \"/api/delta/sim/v1/?Sensor\"\r",
									"var urlAsgardHTTPeSimDelta = pm.globals.get(\"urlAsgardHTTPeSimDelta\");\r",
									"//---------------- set url Remove --------------//\r",
									"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
									"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"pm.globals.set(\"urlThingRemoveThing\", urlRouteList.Thing.urlThingRemoveThing);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"pm.globals.set(\"urlThingRemoveThingStateInfo\", urlRouteList.Thing.urlThingRemoveThingStateInfo);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Signin_ --------------//\r",
									"//get global variable to x_ais_OrderRef \"Signin_\"\r",
									"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"var x_ais_OrderRef_CreateThing = pm.globals.get(\"x_ais_OrderRef_CreateThing\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"var x_ais_OrderDesc_CreateThing = pm.globals.get(\"x_ais_OrderDesc_CreateThing\");\r",
									"//get global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"var x_ais_OrderRef_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderRef_CreateThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"var x_ais_OrderDesc_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_CreateThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Control --------------//\r",
									"//get global variable to x_ais_OrderRef \"ControlThing_\"\r",
									"var x_ais_OrderRef_ControlThing = pm.globals.get(\"x_ais_OrderRef_ControlThing\");\r",
									"//get global variable to x_ais_OrderRef \"ControlThingfail_\"\r",
									"var x_ais_OrderRef_ControlThing_fail = pm.globals.get(\"x_ais_OrderRef_ControlThing_fail\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals AsgardHTTP --------------//\r",
									"//get global variable to x_ais_OrderRef \"RegisHTTP_\"\r",
									"var x_ais_OrderRef_RegisHTTP = pm.globals.get(\"x_ais_OrderRef_RegisHTTP\");\r",
									"//get global variable to x_ais_OrderDesc \"Register Thing in MG\"\r",
									"var x_ais_OrderDesc_RegisHTTP = pm.globals.get(\"x_ais_OrderDesc_RegisHTTP\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get url Remove --------------//\r",
									"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
									"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
									"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// Signin get token\r",
									"Signin = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSignin = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_Signin + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_UserAuthentication,\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestSignin = {\r",
									"            mode: 'raw',\r",
									"            raw:\r",
									"                JSON.stringify({\r",
									"                    username: Username,\r",
									"                    password: Password\r",
									"                })\r",
									"        };\r",
									"\r",
									"        let optionsSignin = {\r",
									"            url: url + provisioningapis + urlSignin,\r",
									"            method: 'POST',\r",
									"            header: headersOptSignin,\r",
									"            body: httpRequestSignin\r",
									"        };\r",
									"        // console.log('request Signin');\r",
									"        let response = await reqPromise(optionsSignin);\r",
									"        let jsonDataSignin = await response.json();\r",
									"\r",
									"        // setAccessToken\r",
									"        await pm.environment.set(\"AccessToken\", jsonDataSignin.AccessToken);\r",
									"\r",
									"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('Signin : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // SignInProcess is Success\r",
									"        pm.test('Signin : OperationStatus Description is ' + '\"' + resultDescriptionSuccessSignIn + '\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
									"        });\r",
									"\r",
									"        //set random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //set PartnerName\r",
									"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
									"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
									"        //set MerchantContact\r",
									"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
									"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
									"        // set CPID\r",
									"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
									"        pm.environment.set(\"CPID\", CPIDValue)\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreatePartner\r",
									"CreatePartner = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreatePartner = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreatePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreatePartner,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreatePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
									"                \"PartnerType\": [\r",
									"                    \"Supplier\",\r",
									"                    \"Customer\"\r",
									"                ],\r",
									"                \"PartnerDetail\": {\r",
									"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
									"                    \"CPID\": pm.environment.get(\"CPID\")\r",
									"                },\r",
									"                \"Property\": {\r",
									"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreatePartner = {\r",
									"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreatePartner,\r",
									"            body: httpRequestCreatePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsCreatePartner);\r",
									"        let jsonDataCreatePartner = await response.json();\r",
									"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
									"\r",
									"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreatePartner : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreatePartner is Success\r",
									"        pm.test('CreatePartner : OperationStatus Description is ' + '\"' + resultDescriptionCreatePartner + '\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
									"        });\r",
									"\r",
									"        //GetResponse_PartnerId\r",
									"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
									"\r",
									"        //Accountname\r",
									"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
									"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateAccount\r",
									"CreateAccount = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateAccount = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateAccount,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreateAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateAccount = {\r",
									"            url: url + provisioningapis + urlAccountCreateAccount,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateAccount,\r",
									"            body: httpRequestCreateAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateAccount');\r",
									"        let response = await reqPromise(optionsCreateAccount);\r",
									"        let jsonDataCreateAccount = await response.json();\r",
									"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
									"\r",
									"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateAccount : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateAccount is Success\r",
									"        pm.test('CreateAccount : OperationStatus Description is ' + '\"' + resultDescriptionCreateAccount + '\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
									"        });\r",
									"        // GetResponse_AccountName\r",
									"        pm.environment.set(\"GetResponse_AccountName\", jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
									"        // GetResponse_AccountId\r",
									"        pm.environment.set(\"GetResponse_AccountId\", jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
									"        // random_IM\r",
									"        pm.environment.set(\"random_IM\", _.random(10000000, 99999999) + \" \" + _.random(1000000, 9999999))\r",
									"        // random_ICCID\r",
									"        pm.environment.set(\"random_ICCID\", _.random(1000000, 9999999) + \" \" + _.random(100000, 999999))\r",
									"        // random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //ThingName\r",
									"        let thingNameValue = fieldDataValue.Thing.ThingNameValue; // \"Sensor_TestThingName\"\r",
									"        pm.environment.set(\"ThingName\", thingNameValue + pm.environment.get(\"random_number\"))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThing\r",
									"CreateThing = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThing = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateThing + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateThing,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey': pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreateThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingName\": pm.environment.get(\"ThingName\"),\r",
									"                \"IMEI\": pm.environment.get(\"random_IM\"),\r",
									"                \"IMSI\": pm.environment.get(\"random_IM\"),\r",
									"                \"ICCID\": pm.environment.get(\"random_ICCID\"),\r",
									"                \"RouteUrl\": fieldDataValue.Thing.RouteUrlValue , //[\"http://10.12.3.4:2019/api/information/AddInformation\"]\r",
									"                \"RouteInfo\": {\r",
									"                    \"MIMO_ID\": fieldDataValue.Thing.RouteInfoMIMOIDValue , //\"606edada\"\r",
									"                    \"MIMO_SerialNo\": fieldDataValue.Thing.RouteInfoMIMOSerialNoValue //5466758878\r",
									"                },\r",
									"                \"RouteFlag\": {\r",
									"                    \"ThingName\": fieldDataValue.Thing.RouteFlagThingNameValue , //true\r",
									"                    \"ThingToken\": fieldDataValue.Thing.RouteFlagThingTokenValue, //true\r",
									"                    \"IMEI\": fieldDataValue.Thing.RouteFlagIMEIValue, //true\r",
									"                    \"ICCID\": fieldDataValue.Thing.RouteFlagICCIDValue, //true\r",
									"                    \"RouteInfo\": fieldDataValue.Thing.RouteFlagRouteInfoValue //true\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateThing = {\r",
									"            url: url + provisioningapis + urlThingCreateThing,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThing,\r",
									"            body: httpRequestCreateThing\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThing');\r",
									"        let response = await reqPromise(optionsCreateThing);\r",
									"        let jsonDataCreateThing = await response.json();\r",
									"        // console.log('jsonDataCreateThing',jsonDataCreateThing)\r",
									"\r",
									"        let operationStatusCreateThing = await jsonDataCreateThing.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateThing : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateThing : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateThing is Success\r",
									"        pm.test('CreateThing : OperationStatus Description is ' + '\"' + resultDescriptionCreateThing + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Description', resultDescriptionCreateThing);\r",
									"        });\r",
									"\r",
									"        pm.environment.set(\"GetResponse_ThingID\", jsonDataCreateThing.ThingInfo.ThingId)\r",
									"        pm.environment.set(\"GetResponse_IMSI\", jsonDataCreateThing.ThingInfo.IMSI)\r",
									"        \r",
									"        let keys = pm.environment.get(\"GetResponse_IMSI\") + \":\" + pm.environment.get(\"IpAddress\");\r",
									"        // console.log(\"keys\", keys);\r",
									"        let encodedKeys = CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(keys));\r",
									"        pm.environment.set(\"encodedKeys_Authorization_Register\", encodedKeys);\r",
									"\r",
									"        //Get Random Sensor \r",
									"        pm.environment.set(\"random_Sensor\", _.random(100, 999))\r",
									"\r",
									"        //Get Random Sensor AsgardHTTP\r",
									"        pm.environment.set(\"random_Sensor_AsgardHTTP\", _.random(100, 999))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThingStateInfo\r",
									"CreateThingStateInfo = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThingStateInfo = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateThingStateInfo,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey': pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        // {\"AA\" : pm.environment.get(\"random_Sensor\")}\r",
									"        let sensorValue = {};\r",
									"        sensorValue[fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP] = pm.environment.get(\"random_Sensor\");\r",
									"        // console.log('sensorValue',sensorValue);\r",
									"        \r",
									"        let httpRequestCreateThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": [\r",
									"                    pm.environment.get(\"GetResponse_ThingID\")\r",
									"                ],\r",
									"                \"Type\": fieldDataValue.CreateThingStateInfo.Type_Report,\r",
									"                \"Sensor\": sensorValue\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingCreateThingStateInfo,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThingStateInfo,\r",
									"            body: httpRequestCreateThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThingStateInfo');\r",
									"        let response = await reqPromise(optionsCreateThingStateInfo);\r",
									"        let jsonDataCreateThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataCreateThingStateInfo',jsonDataCreateThingStateInfo)\r",
									"\r",
									"        let operationStatusCreateThingStateInfo = await jsonDataCreateThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"CreateThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //CreateThingStateInfo is Success\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Description is ' + '\"' + resultDescriptionCreateThingStateInfo + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Description', resultDescriptionCreateThingStateInfo);\r",
									"        });\r",
									"\r",
									"       \r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// ControlThing\r",
									"ControlThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptControlThing = {\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_ControlThing + current_timestamp,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Content-Type':ContentType_ApplicationJson\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        // {\"AA\" : pm.environment.get(\"random_Sensor_AsgardHTTP\")}\r",
									"        let sensorValue = {};\r",
									"        sensorValue[fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP] = pm.environment.get(\"random_Sensor_AsgardHTTP\");\r",
									"        // console.log('sensorValue',sensorValue);\r",
									"\r",
									"        let httpRequestControlThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\"),\r",
									"                \"Sensors\": sensorValue\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsControlThing = {\r",
									"            url: url + controlapis + urlControlThing,\r",
									"            method: 'POST',\r",
									"            header: headersOptControlThing,\r",
									"            body: httpRequestControlThing\r",
									"        };\r",
									"\r",
									"        // console.log('response ControlThing');\r",
									"        let response = await reqPromise(optionsControlThing);\r",
									"        let jsonDataControlThing = await response.json();\r",
									"        // console.log('jsonDataControlThing',jsonDataControlThing)\r",
									"    \r",
									"        let operationStatusControlThing = await jsonDataControlThing.operationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"ControlThing : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('ControlThing : OperationStatus code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusControlThing).to.have.property('code', resultCodeSuccess);\r",
									"        });\r",
									"        //ControlOneThing is Success\r",
									"        pm.test('ControlThing : OperationStatus description is '+'\"'+ resultDescriptionSuccessControlOneThing+'\"', function () {\r",
									"            pm.expect(operationStatusControlThing).to.have.property('description', resultDescriptionSuccessControlOneThing);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// AsgardHTTPeSimRegister\r",
									"AsgardHTTPeSimRegister = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptAsgardHTTPeSimRegister = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_RegisHTTP + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_RegisHTTP,\r",
									"            'Authorization': Basic + ' ' + pm.environment.get(\"encodedKeys_Authorization_Register\")\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestAsgardHTTPeSimRegister = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({})\r",
									"        };\r",
									"\r",
									"        let optionsAsgardHTTPeSimRegister = {\r",
									"            url: url + httpapis + urlAsgardHTTPeSimRegister,\r",
									"            method: 'POST',\r",
									"            header: headersOptAsgardHTTPeSimRegister,\r",
									"            body: httpRequestAsgardHTTPeSimRegister\r",
									"        };\r",
									"\r",
									"        // console.log('request AsgardHTTPEsimRegister');\r",
									"        let response = await reqPromise(optionsAsgardHTTPeSimRegister);\r",
									"        let jsonDataAsgardHTTPeSimRegister = await response.json();\r",
									"        // console.log('jsonDataCreateThingStateInfo',jsonDataAsgardHTTPeSimRegister)\r",
									"        let operationStatusAsgardHTTPeSimRegister = await jsonDataAsgardHTTPeSimRegister.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"Asgard HTTP(eSim) Register : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('Asgard HTTP(eSim) Register : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusAsgardHTTPeSimRegister).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"\r",
									"        // The requested operation was successfully.\r",
									"        pm.test('Asgard HTTP(eSim) Register : OperationStatus DeveloperMessage is ' + '\"' + resultDescriptionTheRequestedOperationWasSuccessfully + '\"', function () {\r",
									"            pm.expect(operationStatusAsgardHTTPeSimRegister).to.have.property('DeveloperMessage', resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"        });\r",
									"\r",
									"        await pm.environment.set(\"GetResponse_ThingToken\", jsonDataAsgardHTTPeSimRegister.ThingToken)\r",
									"        let keys2 = await pm.environment.get(\"GetResponse_ThingToken\") + fieldDataValue.AsgardHTTP.Value_AsgardHTTPeSim_Delta_TST_F3_0_2_002_Error + \":\" + pm.environment.get(\"IpAddress\");        \r",
									"        let encodedKeys2 = await CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(keys2));\r",
									"        pm.environment.set(\"encodedKeys_Authorization_Delta\", encodedKeys2)\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveAccount\r",
									" RemoveAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemoveAccount = {\r",
									"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveAccount,\r",
									"            body: httpRequestRemoveAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveAccount');\r",
									"        let response = await reqPromise(optionsRemoveAccount);\r",
									"        let jsonDataRemoveAccount = await response.json();\r",
									"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
									"    \r",
									"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveAccount is Success\r",
									"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"Signin();\r",
									"setTimeout(async function(){await CreatePartner();}, 3000); \r",
									"setTimeout(async function(){await CreateAccount();}, 6000); \r",
									"setTimeout(async function(){await CreateThing();}, 8000); \r",
									"setTimeout(async function(){await CreateThingStateInfo();}, 9000); \r",
									"setTimeout(async function(){await ControlThing();}, 10000); \r",
									"setTimeout(async function(){await AsgardHTTPeSimRegister();}, 20000); \r",
									"setTimeout(async function(){}, 30000); //for wait value encodedKeys_Authorization_Delta\r",
									"setTimeout(function(){RemoveAccount();}, 40000); "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-ais-UserName",
								"type": "text",
								"value": "{{x_ais_UserName_AisPartner}}"
							},
							{
								"key": "x-ais-OrderRef",
								"value": "{{x_ais_OrderRef_DeltaHTTP_fail}}{{current_timestamp}}"
							},
							{
								"key": "x-ais-OrderDesc",
								"type": "text",
								"value": "{{x_ais_OrderDesc_DeltaHTTP}}"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{Basic}} {{encodedKeys_Authorization_Delta}}"
							}
						],
						"url": {
							"raw": "{{url}}{{httpapis}}/api/delta/sim/v1/?Sensor=",
							"host": [
								"{{url}}{{httpapis}}"
							],
							"path": [
								"api",
								"delta",
								"sim",
								"v1",
								""
							],
							"query": [
								{
									"key": "Sensor",
									"value": ""
								}
							]
						},
						"description": "Type:Desire"
					},
					"response": []
				},
				{
					"name": "AsgardHTTPeSimDelta_TST_F3_0_2_007_Error_AccountExpired",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var Basic = pm.environment.get(\"Basic\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to xAisOrderRef \"RemoveThing_\"\r",
									"var x_ais_OrderRef_RemoveThing = pm.globals.get(\"x_ais_OrderRef_RemoveThing\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"var x_ais_OrderDesc_RemoveThing = pm.globals.get(\"x_ais_OrderDesc_RemoveThing\");\r",
									"//get global variable to xAisOrderRef \"RemoveThingStateInfo_\"\r",
									"var x_ais_OrderRef_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderRef_RemoveThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThingStateInfo\"\r",
									"var x_ais_OrderDesc_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_RemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals AsgardHTTP --------------//\r",
									"//get global variable to x_ais_OrderRef \"DeltaHTTP_\"\r",
									"var x_ais_OrderRef_DeltaHTTP = pm.globals.get(\"x_ais_OrderRef_DeltaHTTP\");\r",
									"//get global variable to x_ais_OrderRef \"DeltaHTTPfail_\"\r",
									"var x_ais_OrderRef_DeltaHTTP_fail = pm.globals.get(\"x_ais_OrderRef_DeltaHTTP_fail\");\r",
									"//get global variable to x_ais_OrderDesc \"Get Delta from MG\"\r",
									"var x_ais_OrderDesc_DeltaHTTP = pm.globals.get(\"x_ais_OrderDesc_DeltaHTTP\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get url Remove --------------//\r",
									"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
									"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"var urlThingRemoveThing = pm.globals.get(\"urlThingRemoveThing\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"var urlThingRemoveThingStateInfo = pm.globals.get(\"urlThingRemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"RemovePartner is Success\"\r",
									"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
									"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
									"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
									"//get global variable to resultDescription \"RemoveThing is Success\"\r",
									"var resultDescriptionRemoveThing = pm.globals.get(\"resultDescriptionRemoveThing\");\r",
									"//get global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"var resultDescriptionRemoveThingStateInfo = pm.globals.get(\"resultDescriptionRemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 403\r",
									"var statusCodeForbidden = pm.globals.get(\"statusCodeForbidden\");\r",
									"//get global variable to resultCode \"40305\"\r",
									"var resultCodeTheOperationHasAlreadyExpired = pm.globals.get(\"resultCodeTheOperationHasAlreadyExpired\");\r",
									"//get global variable to resultDescription \"The operation has already expired.\"\r",
									"var resultDescriptionTheOperationHasAlreadyExpired = pm.globals.get(\"resultDescriptionTheOperationHasAlreadyExpired\");\r",
									"//------------------------------------------------------------//\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Asgard HTTP(eSim) Delta : Status code is \" + statusCodeForbidden, function () {\r",
									"    pm.response.to.have.status(statusCodeForbidden);\r",
									"});\r",
									"\r",
									"pm.test('Asgard HTTP(eSim) Delta : operationStatus code is '+'\"'+ resultCodeTheOperationHasAlreadyExpired +'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeTheOperationHasAlreadyExpired);\r",
									"});\r",
									"\r",
									"pm.test('Asgard HTTP(eSim) Delta : operationStatus DeveloperMessage is '+'\"'+ resultDescriptionTheOperationHasAlreadyExpired+'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheOperationHasAlreadyExpired);\r",
									"});\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// RemovePartner\r",
									" RemovePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemovePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemovePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemovePartner = {\r",
									"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemovePartner,\r",
									"            body: httpRequestRemovePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request RemovePartner');\r",
									"        let response = await reqPromise(optionsRemovePartner);\r",
									"        let jsonDataRemovePartner = await response.json();\r",
									"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
									"    \r",
									"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemovePartner is Success\r",
									"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveAccount\r",
									" RemoveAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemoveAccount = {\r",
									"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveAccount,\r",
									"            body: httpRequestRemoveAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveAccount');\r",
									"        let response = await reqPromise(optionsRemoveAccount);\r",
									"        let jsonDataRemoveAccount = await response.json();\r",
									"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
									"    \r",
									"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveAccount is Success\r",
									"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThing\r",
									" RemoveThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThing = {\r",
									"            url: url + provisioningapis + urlThingRemoveThing,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThing,\r",
									"            body: httpRequestRemoveThing\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveThing');\r",
									"        let response = await reqPromise(optionsRemoveThing);\r",
									"        let jsonDataRemoveThing = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThing)\r",
									"    \r",
									"        let operationStatusRemoveThing = await jsonDataRemoveThing.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThing : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThing : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThing is Success\r",
									"        pm.test('RemoveThing : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThing+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Description', resultDescriptionRemoveThing);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThingStateInfo\r",
									" RemoveThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"            \r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\"),\r",
									"                \"stateType\": fieldDataValue.CreateThingStateInfo.Type_Report, //Report\r",
									"                \"stateKey\": fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP //AA\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingRemoveThingStateInfo,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThingStateInfo,\r",
									"            body: httpRequestRemoveThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('response RemoveThingStateInfo');\r",
									"        let response = await reqPromise(optionsRemoveThingStateInfo);\r",
									"        let jsonDataRemoveThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThingStateInfo)\r",
									"    \r",
									"        let operationStatusRemoveThingStateInfo = await jsonDataRemoveThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThingStateInfo is Success\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThingStateInfo+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Description', resultDescriptionRemoveThingStateInfo);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"//---------------- LogDefaultValue --------------//\r",
									"//set variable to LogDefaultValue JSON.parse\r",
									"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
									"// console.log('LogDefaultValue',LogDefaultValue);\r",
									"//---------------- set globals Other --------------//\r",
									"\r",
									"var SearchLog = LogDefaultValue.SearchLog;\r",
									"// console.log('SearchLog',SearchLog);\r",
									"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
									"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
									"var kbn_version = SearchLog.header.kbn_version;\r",
									"var authorization = SearchLog.header.Authorization;\r",
									"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
									"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
									"var namespace = LogDefaultValue.Other.namespace;\r",
									"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
									"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
									"var header_x_ais_username = LogDefaultValue.Other.header_x_ais_username;\r",
									"var methodGet = LogDefaultValue.Other.methodGet;\r",
									"\r",
									"// Detail\r",
									"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
									"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
									"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
									"\r",
									"// Summary\r",
									"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
									"var identitySummary = \"\";\r",
									"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
									"\r",
									"// Asgard.Http.APIs\r",
									"var applicationName = LogDefaultValue.AsgardHTTP.applicationName;\r",
									"var cmdName = LogDefaultValue.AsgardHTTP.cmdNameDelta;\r",
									"var endPointNameRabbitMQ = LogDefaultValue.AsgardHTTP.endPointNameRabbitMQ;\r",
									"var containerId = LogDefaultValue.AsgardHTTP.containerId;\r",
									"var requestObjectUrlStaging = LogDefaultValue.AsgardHTTP.requestObjectUrlDeltaMgStaging;\r",
									"var urlDelta  = LogDefaultValue.AsgardHTTP.urlDelta;\r",
									"\r",
									"// Check CDR (Summary Log) and EDR (Detail Log)\r",
									"SearchLogFindTid = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSearchLogFindTid = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = x_ais_OrderRef_DeltaHTTP_fail + current_timestamp;\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestSearchLogFindTid = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"\r",
									"        let optionsSearchLogFindTid = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptSearchLogFindTid,\r",
									"            body: httpRequestSearchLogFindTid\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsSearchLogFindTid);\r",
									"        let jsonDataSearchLogFindTid = await response.json();\r",
									"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
									"        // console.log('hits',hits)\r",
									"  \r",
									"        // find tid\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            // let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"        \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            if(applicationNameValue == applicationName){\r",
									"                let tid = hits[i]._source.cauldron.tid;\r",
									"                pm.environment.set(\"tid\", tid);\r",
									"                break;\r",
									"           }\r",
									"        }\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"CheckLog = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCheckLog = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = pm.environment.get(\"tid\");\r",
									"\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestCheckLog = {\r",
									"            mode: 'raw',\r",
									"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"        let optionsCheckLog = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptCheckLog,\r",
									"            body: httpRequestCheckLog\r",
									"        }; \r",
									"        let response = await reqPromise(optionsCheckLog);\r",
									"        let jsonDataCheckLog = await response.json();\r",
									"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
									"        \r",
									"        // //200\r",
									"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });     \r",
									"        \r",
									"        let hits = jsonDataCheckLog.hits.hits\r",
									"        console.log('hits',hits)\r",
									"  \r",
									"        // find logType\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            //  let logType = hits[i]._source.cauldron.logType\r",
									"            let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"           \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            \r",
									"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
									"            // console.log('resultDataLog',resultDataLog)\r",
									"\r",
									"            let tidControl = x_ais_OrderRef_DeltaHTTP_fail  + current_timestamp;\r",
									"            // console.log(tidControl);\r",
									"            if(applicationNameValue == applicationName){\r",
									"                 \r",
									"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and Asgard.Http.APIs\r",
									"                    pm.test(\"Check Summary Log : Asgard_HTTP(eSim) Delta\" , function () {\r",
									"                        console.log(\"======== Check Summary Log ( Expected = Actual) [Asgard_HTTP(eSim) Delta] ==================\");\r",
									"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
									"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
									"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeTheOperationHasAlreadyExpired);\r",
									"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionTheOperationHasAlreadyExpired);\r",
									"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
									"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"identity : \" + JSON.stringify(resultDataLog.identity) + \" = \" + JSON.stringify(identitySummary));\r",
									"                        // console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
									"\r",
									"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
									"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
									"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeTheOperationHasAlreadyExpired); \r",
									"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionTheOperationHasAlreadyExpired); \r",
									"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
									"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
									"                        // pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
									"\r",
									"                        // check custom\r",
									"                        // \\\"custom\\\":{ \\\"endPointSummary\\\":[ { \\\"no\\\":\\\"1\\\", \\\"endPointName\\\":\\\"db.ThingsCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:Inquiry was Success\\\", \\\"processTime\\\":0.0005 }, { \\\"no\\\":\\\"2\\\", \\\"endPointName\\\":\\\"db.AccountsCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:Inquiry was Success\\\", \\\"processTime\\\":0.0003 } ] }\r",
									"\r",
									"                        let custom = resultDataLog.custom.endPointSummary;\r",
									"                        let countCustom = custom.length;\r",
									"                       \r",
									"                        // [\"db.ThingsCollection\",\"db.AccountsCollection\"]\r",
									"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_Asgard_HTTP_eSim_Delta_007;\r",
									"                        // [\"20000:Inquiry was Success\",\"20000:Inquiry was Success\"]\r",
									"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_Asgard_HTTP_eSim_Delta_007;\r",
									"                        let countCustomStep = dataEndPointName.length;\r",
									"\r",
									"                        console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep);\r",
									"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
									"                        \r",
									"                        for(let i=0;i<countCustomStep;i++){\r",
									"                            let no = custom[i].no;\r",
									"                            let valueEndPointName = custom[i].endPointName;\r",
									"                            let valueResponseStatus = custom[i].responseStatus;\r",
									"                            // console.log(\"i\",i);\r",
									"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
									"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
									"\r",
									"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString());\r",
									"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i]);\r",
									"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i]);\r",
									"\r",
									"                            pm.expect(no).to.eql((i+1).toString()); \r",
									"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
									"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]); \r",
									"                        }\r",
									"                    }); \r",
									"                }\r",
									"\r",
									"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and Asgard.Http.APIs\r",
									"\r",
									"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
									"                    // console.log('endPointNameValue ',endPointNameValue)\r",
									"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [Asgard_HTTP(eSim) Delta]\", function () {\r",
									"                        console.log(\"======== Check Detail Log ( Expected = Actual) [Asgard_HTTP(eSim) Delta] ==================\");\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
									"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
									"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
									"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.custom1.activityLog.processTime + \" = \" + resultDataLog.custom1.activityLog.processTime);\r",
									"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
									"\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
									"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
									"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
									"\r",
									"                        let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
									"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
									"                        let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
									"                            // console.log('jsonParseResponseObject',jsonParseResponseObject); \r",
									"                        let url = urlDelta; \r",
									"                        let x_ais_orderref = x_ais_OrderRef_DeltaHTTP_fail + current_timestamp;\r",
									"                        let x_ais_orderdesc = x_ais_OrderDesc_DeltaHTTP;\r",
									"                        let x_ais_userName = x_ais_UserName_AisPartner;\r",
									"                        let authorization = Basic + ' ' + pm.environment.get(\"encodedKeys_Authorization_Delta\");\r",
									"                        let SensorKey = fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP;\r",
									"                        let sensor = pm.environment.get(\"random_Sensor\");\r",
									"                        let timestamp = pm.environment.get(\"timestamp\");\r",
									"\r",
									"                        if( endPointNameValue == undefined){\r",
									"                            // check requestObject\r",
									"                            // \"requestObject\":\"{\\\"url\\\":\\\"/api/delta/sim/v1/\\\",\\\"method\\\":\\\"GET\\\",\\\"headers\\\":{\\\"Cache-Control\\\":\\\"no-cache\\\",\\\"Content-Type\\\":\\\"application/json\\\",\\\"Accept\\\":\\\"*/*\\\",\\\"Accept-Encoding\\\":\\\"gzip,deflate,br\\\",\\\"Authorization\\\":\\\"Basic MzgxMTJmNzYtYmVjZC00NTUwLTllZDMtY2UxMzNkYjhmOGRkeHg6MS4yLjMuNA==\\\",\\\"Host\\\":\\\"mg-staging.sandais.com\\\",\\\"User-Agent\\\":\\\"PostmanRuntime/7.26.8\\\",\\\"Content-Length\\\":\\\"0\\\",\\\"x-real-ip\\\":\\\"58.8.214.174\\\",\\\"x-forwarded-for\\\":\\\"58.8.214.174\\\",\\\"x-forwarded-proto\\\":\\\"https\\\",\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"DeltaHTTPfail_202102152202712\\\",\\\"x-ais-orderdesc\\\":\\\"Get Delta from MG\\\",\\\"postman-token\\\":\\\"79b55c96-1b2c-4594-afc9-9301895d4e54\\\",\\\"x-request-id\\\":\\\"f14d2d5c-bc4c-4484-9fd2-d1bdd5397a4e\\\",\\\"x-b3-traceid\\\":\\\"fd5ae6c9a217811d7c54f49c21f5ffcc\\\",\\\"x-b3-spanid\\\":\\\"7c54f49c21f5ffcc\\\",\\\"x-b3-sampled\\\":\\\"0\\\",\\\"x-ais-SessionId\\\":\\\"1613403150250\\\"},\\\"queryString\\\":{\\\"Sensor\\\":\\\"\\\"},\\\"routeParamteters\\\":{}}\"\r",
									"\r",
									"                            // \\\"requestObject\\\":\\\"{ \\\\\\\"url\\\\\\\":\\\\\\\"/api/delta/sim/v1/\\\\\\\", \\\\\\\"method\\\\\\\":\\\\\\\"GET\\\\\\\", \\\\\\\"headers\\\\\\\":{ \\\\\\\"Cache-Control\\\\\\\":\\\\\\\"no-cache\\\\\\\", \\\\\\\"Content-Type\\\\\\\":\\\\\\\"application/json\\\\\\\", \\\\\\\"Accept\\\\\\\":\\\\\\\"*/*\\\\\\\", \\\\\\\"Accept-Encoding\\\\\\\":\\\\\\\"gzip, deflate, br\\\\\\\", \\\\\\\"Authorization\\\\\\\":\\\\\\\"Basic ZDM5ZmJjNDktNDZhMi00YmFkLWEwNGItNWJiZWU2OWFlODkxOjEuMi4zLjQ=\\\\\\\", \\\\\\\"Host\\\\\\\":\\\\\\\"mg-iot.sandais.com\\\\\\\", \\\\\\\"User-Agent\\\\\\\":\\\\\\\"PostmanRuntime/7.26.8\\\\\\\", \\\\\\\"Content-Length\\\\\\\":\\\\\\\"0\\\\\\\", \\\\\\\"x-real-ip\\\\\\\":\\\\\\\"182.232.183.255\\\\\\\", \\\\\\\"x-forwarded-for\\\\\\\":\\\\\\\"182.232.183.255, 10.233.68.0\\\\\\\", \\\\\\\"x-forwarded-proto\\\\\\\":\\\\\\\"http\\\\\\\", \\\\\\\"x-ais-username\\\\\\\":\\\\\\\"AisPartner\\\\\\\", \\\\\\\"x-ais-orderref\\\\\\\":\\\\\\\"DeltaHTTPfail_202105112205862\\\\\\\", \\\\\\\"x-ais-orderdesc\\\\\\\":\\\\\\\"Get Delta from MG\\\\\\\", \\\\\\\"postman-token\\\\\\\":\\\\\\\"b1aec7b9-d62c-491f-81e3-bd4de1f64323\\\\\\\", \\\\\\\"x-envoy-external-address\\\\\\\":\\\\\\\"10.233.68.0\\\\\\\", \\\\\\\"x-request-id\\\\\\\":\\\\\\\"1ce7e88a-e4e1-4a34-8307-88ec2faf3bca\\\\\\\", \\\\\\\"x-envoy-original-path\\\\\\\":\\\\\\\"/httpapis/api/delta/sim/v1/?Sensor\\\\\\\", \\\\\\\"x-b3-traceid\\\\\\\":\\\\\\\"cf302d47ced351b8d59ea177ab5de943\\\\\\\", \\\\\\\"x-b3-spanid\\\\\\\":\\\\\\\"cf4048eb20f70d7d\\\\\\\", \\\\\\\"x-b3-parentspanid\\\\\\\":\\\\\\\"d59ea177ab5de943\\\\\\\", \\\\\\\"x-b3-sampled\\\\\\\":\\\\\\\"0\\\\\\\", \\\\\\\"x-ais-SessionId\\\\\\\":\\\\\\\"1620746248622\\\\\\\" }, \\\\\\\"queryString\\\\\\\":{ \\\\\\\"Sensor\\\\\\\":\\\\\\\"\\\\\\\" }, \\\\\\\"routeParamteters\\\\\\\":{ } }\\\"\r",
									"\r",
									"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
									"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodGet);\r",
									"                            console.log(\"headers.x_ais_userName : \" + jsonParseRequestObject.headers[header_x_ais_username] + \" = \" + x_ais_userName);\r",
									"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
									"                            console.log(\"headers.Authorization : \" + jsonParseRequestObject.headers.Authorization + \" = \" + authorization);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
									"                            pm.expect(jsonParseRequestObject.method).to.eql(methodGet);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_username]).to.eql(x_ais_userName);\r",
									"                            pm.expect(jsonParseRequestObject.headers.Authorization).to.eql(authorization);\r",
									"\r",
									"                            console.log(\"queryString.Sensor : \" + JSON.stringify(jsonParseRequestObject.queryString.Sensor) + \" = \" + JSON.stringify(\"\"));\r",
									"                            console.log(\"routeParamteters : \" + JSON.stringify(jsonParseRequestObject.routeParamteters) + \" = \" + JSON.stringify({}));\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.queryString.Sensor).to.eql(\"\"); \r",
									"                            pm.expect(jsonParseRequestObject.routeParamteters).to.eql({}); \r",
									"\r",
									"                            // check responseObject\r",
									"                            // \"responseObject\":\"{\\\"OperationStatus\\\":{\\\"Code\\\":\\\"40305\\\",\\\"DeveloperMessage\\\":\\\"The operation has already expired.\\\"}}\"\r",
									"\r",
									"                            console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeTheOperationHasAlreadyExpired);\r",
									"                            console.log(\"response.OperationStatus.DeveloperMessage : \" + jsonParseResponseObject.OperationStatus.DeveloperMessage + \" = \" + resultDescriptionTheOperationHasAlreadyExpired);\r",
									"\r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeTheOperationHasAlreadyExpired);  \r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheOperationHasAlreadyExpired);  \r",
									"                        }\r",
									"                    }); \r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"setTimeout(function(){SearchLogFindTid();}, 40000); \r",
									"setTimeout(function(){CheckLog();}, 60000); \r",
									"\r",
									"setTimeout(function(){RemoveThingStateInfo();}, 70000); \r",
									"setTimeout(function(){RemoveThing();}, 80000); \r",
									"setTimeout(function(){RemoveAccount();}, 90000); \r",
									"setTimeout(function(){RemovePartner();}, 100000); \r",
									"\r",
									"setTimeout(function(){\r",
									"pm.environment.unset(\"current_timestamp\");\r",
									"pm.environment.unset(\"AccessToken\");\r",
									"pm.environment.unset(\"random_number\");\r",
									"pm.environment.unset(\"PartnerName\");\r",
									"pm.environment.unset(\"MerchantContact\");\r",
									"pm.environment.unset(\"CPID\");\r",
									"pm.environment.unset(\"GetResponse_PartnerId\");\r",
									"pm.environment.unset(\"AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountId\");\r",
									"pm.environment.unset(\"random_IM\");\r",
									"pm.environment.unset(\"random_ICCID\");\r",
									"pm.environment.unset(\"ThingName\");\r",
									"pm.environment.unset(\"GetResponse_ThingID\");\r",
									"pm.environment.unset(\"GetResponse_IMSI\");\r",
									"pm.environment.unset(\"encodedKeys_Authorization_Register\");\r",
									"pm.environment.unset(\"encodedKeys_Authorization_Delta\");\r",
									"pm.environment.unset(\"random_Sensor\");\r",
									"pm.environment.unset(\"random_Sensor_AsgardHTTP\");\r",
									"pm.environment.unset(\"GetResponse_ThingToken\");\r",
									"pm.environment.unset(\"tid\");\r",
									"pm.environment.unset(\"SensorKey_AsgardHTTP\");\r",
									"pm.environment.unset(\"timestamp\");\r",
									"}, 105000); \r",
									"setTimeout(async function(){}, 110000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var Username = pm.environment.get(\"Username\");\r",
									"var Password = pm.environment.get(\"Password\");\r",
									"\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"var controlapis = pm.environment.get(\"controlapis\");\r",
									"var httpapis = pm.environment.get(\"httpapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"//format YYYYMMDDHHMMSSS\r",
									"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
									"// console.log('currentTmestamp',currentTmestamp);\r",
									"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var Basic = pm.environment.get(\"Basic\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- statusCodeList --------------//\r",
									"//set variable to statusCodeList JSON.parse\r",
									"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
									"//set global variable to statusCode 200\r",
									"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
									"//set global variable to statusCode 201\r",
									"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
									"//set global variable to statusCode 403\r",
									"pm.globals.set(\"statusCodeForbidden\", statusCodeList.statusCodeForbidden);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultCodeList --------------//\r",
									"//set variable to resultCodeList JSON.parse\r",
									"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
									"//set global variable to resultCode \"20000\"\r",
									"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
									"//set global variable to resultCode \"20100\"\r",
									"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
									"//set global variable to resultCode \"40305\"\r",
									"pm.globals.set(\"resultCodeTheOperationHasAlreadyExpired\", resultCodeList.resultCodeTheOperationHasAlreadyExpired);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionSuccessList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
									"//set global variable to resultDescription \"SignInProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
									"//set global variable to resultDescription \"CreatePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
									"//set global variable to resultDescription \"CreateAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
									"//set global variable to resultDescription \"CreateThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThing\", resultDescriptionSuccessList.resultDescriptionCreateThing);\r",
									"//set global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThingStateInfo\", resultDescriptionSuccessList.resultDescriptionCreateThingStateInfo);\r",
									"//set global variable to resultDescription \"RemovePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
									"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
									"//set global variable to resultDescription \"RemoveThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThing\", resultDescriptionSuccessList.resultDescriptionRemoveThing);\r",
									"//set global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThingStateInfo\", resultDescriptionSuccessList.resultDescriptionRemoveThingStateInfo);\r",
									"//set global variable to resultDescription \"ControlOneThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessControlOneThing\", resultDescriptionSuccessList.resultDescriptionSuccessControlOneThing);\r",
									"//set global variable to resultDescription \"Register is Success\"\r",
									"pm.globals.set(\"resultDescriptionRegisterIsSuccess\", resultDescriptionSuccessList.resultDescriptionRegisterIsSuccess);\r",
									"//set global variable to resultDescription \"DeltaProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionDeltaProcessIsSuccess\", resultDescriptionSuccessList.resultDescriptionDeltaProcessIsSuccess);\r",
									"//set global variable to resultDescription \"The requested operation was successfully.\"\r",
									"pm.globals.set(\"resultDescriptionTheRequestedOperationWasSuccessfully\", resultDescriptionSuccessList.resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionErrorList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
									"//set global variable to resultDescription \"The operation has already expired.\"\r",
									"pm.globals.set(\"resultDescriptionTheOperationHasAlreadyExpired\", resultDescriptionErrorList.resultDescriptionTheOperationHasAlreadyExpired);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- HeaderList --------------//\r",
									"//set variable to HeaderList JSON.parse\r",
									"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
									"//---------------- set globals Other --------------//\r",
									"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
									"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
									"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
									"//set global variable to kbn-versio \"7.5.1\"\r",
									"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Signin_ --------------//\r",
									"//set global variable to x_ais_OrderRef \"Signin_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreatePartner --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
									"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
									"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
									"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreateAccount --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
									"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
									"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Thing --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThing\", HeaderList.Thing.x_ais_OrderRef_CreateThing);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThing\", HeaderList.Thing.x_ais_OrderDesc_CreateThing);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThing\", HeaderList.Thing.x_ais_OrderRef_RemoveThing);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThing\", HeaderList.Thing.x_ais_OrderDesc_RemoveThing);\r",
									"//set global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_RemoveThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_RemoveThingStateInfo);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Control --------------//\r",
									"//set global variable to x_ais_OrderRef \"ControlThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ControlThing\", HeaderList.Control.x_ais_OrderRef_ControlThing);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals AsgardHTTP --------------//\r",
									"//set global variable to x_ais_OrderRef \"RegisHTTP_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RegisHTTP\", HeaderList.AsgardHTTP.x_ais_OrderRef_RegisHTTP);\r",
									"//set global variable to x_ais_OrderDesc \"Register Thing in MG\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RegisHTTP\", HeaderList.AsgardHTTP.x_ais_OrderDesc_RegisHTTP);\r",
									"//set global variable to x_ais_OrderRef \"DeltaHTTP_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_DeltaHTTP\", HeaderList.AsgardHTTP.x_ais_OrderRef_DeltaHTTP);\r",
									"//set global variable to x_ais_OrderRef \"DeltaHTTPfail_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_DeltaHTTP_fail\", HeaderList.AsgardHTTP.x_ais_OrderRef_DeltaHTTP_fail);\r",
									"//set global variable to x_ais_OrderDesc \"Get Delta from MG\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_DeltaHTTP\", HeaderList.AsgardHTTP.x_ais_OrderDesc_DeltaHTTP);\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"SignInProcess is Success\"\r",
									"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
									"//get global variable to resultDescription \"CreatePartner is Success\"\r",
									"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
									"//get global variable to resultDescription \"CreateAccount is Success\"\r",
									"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
									"//get global variable to resultDescription \"CreateThing is Success\"\r",
									"var resultDescriptionCreateThing = pm.globals.get(\"resultDescriptionCreateThing\");\r",
									"//get global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"var resultDescriptionCreateThingStateInfo = pm.globals.get(\"resultDescriptionCreateThingStateInfo\");\r",
									"//get global variable to resultDescription \"ControlOneThing is Success\"\r",
									"var resultDescriptionSuccessControlOneThing = pm.globals.get(\"resultDescriptionSuccessControlOneThing\");\r",
									"//get global variable to resultDescription \"Register is Success\"\r",
									"var resultDescriptionRegisterIsSuccess = pm.globals.get(\"resultDescriptionRegisterIsSuccess\");\r",
									"//get global variable to resultDescription \"The requested operation was successfully.\"\r",
									"var resultDescriptionTheRequestedOperationWasSuccessfully = pm.globals.get(\"resultDescriptionTheRequestedOperationWasSuccessfully\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- urlRouteList --------------//\r",
									"//set variable to urlRouteList JSON.parse\r",
									"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
									"//---------------- set url Create --------------//\r",
									"//set global variable to url \"/api/v1/auth/signin\"\r",
									"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
									"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
									"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"pm.globals.set(\"urlThingCreateThing\", urlRouteList.Thing.urlThingCreateThing);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"pm.globals.set(\"urlThingCreateThingStateInfo\", urlRouteList.Thing.urlThingCreateThingStateInfo);\r",
									"//set global variable to url \"/api/v1/Control/Thing\"\r",
									"pm.globals.set(\"urlControlThing\", urlRouteList.Control.urlControlThing);\r",
									"//set global variable to url \"/api/register/sim/v1\"\r",
									"pm.globals.set(\"urlAsgardHTTPeSimRegister\", urlRouteList.AsgardHTTPeSim.urlAsgardHTTPeSimRegister);\r",
									"//set global variable to url \"/api/delta/sim/v1/?Sensor\"\r",
									"pm.globals.set(\"urlAsgardHTTPeSimDelta\", urlRouteList.AsgardHTTPeSim.urlAsgardHTTPeSimDelta);\r",
									"//---------------- get url Create --------------//\r",
									"//get global variable to url \"/api/v1/auth/signin\"\r",
									"var urlSignin = pm.globals.get(\"urlSignin\");\r",
									"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
									"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"var urlThingCreateThing = pm.globals.get(\"urlThingCreateThing\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"var urlThingCreateThingStateInfo = pm.globals.get(\"urlThingCreateThingStateInfo\");\r",
									"//get global variable to url \"/api/v1/Control/Thing\"\r",
									"var urlControlThing = pm.globals.get(\"urlControlThing\");\r",
									"//get global variable to url \"/api/register/sim/v1\"\r",
									"var urlAsgardHTTPeSimRegister = pm.globals.get(\"urlAsgardHTTPeSimRegister\");\r",
									"//get global variable to url \"/api/delta/sim/v1/?Sensor\"\r",
									"var urlAsgardHTTPeSimDelta = pm.globals.get(\"urlAsgardHTTPeSimDelta\");\r",
									"//---------------- set url Remove --------------//\r",
									"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
									"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"pm.globals.set(\"urlThingRemoveThing\", urlRouteList.Thing.urlThingRemoveThing);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"pm.globals.set(\"urlThingRemoveThingStateInfo\", urlRouteList.Thing.urlThingRemoveThingStateInfo);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Signin_ --------------//\r",
									"//get global variable to x_ais_OrderRef \"Signin_\"\r",
									"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"var x_ais_OrderRef_CreateThing = pm.globals.get(\"x_ais_OrderRef_CreateThing\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"var x_ais_OrderDesc_CreateThing = pm.globals.get(\"x_ais_OrderDesc_CreateThing\");\r",
									"//get global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"var x_ais_OrderRef_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderRef_CreateThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"var x_ais_OrderDesc_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_CreateThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Control --------------//\r",
									"//get global variable to x_ais_OrderRef \"ControlThing_\"\r",
									"var x_ais_OrderRef_ControlThing = pm.globals.get(\"x_ais_OrderRef_ControlThing\");\r",
									"//get global variable to x_ais_OrderRef \"ControlThingfail_\"\r",
									"var x_ais_OrderRef_ControlThing_fail = pm.globals.get(\"x_ais_OrderRef_ControlThing_fail\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals AsgardHTTP --------------//\r",
									"//get global variable to x_ais_OrderRef \"RegisHTTP_\"\r",
									"var x_ais_OrderRef_RegisHTTP = pm.globals.get(\"x_ais_OrderRef_RegisHTTP\");\r",
									"//get global variable to x_ais_OrderDesc \"Register Thing in MG\"\r",
									"var x_ais_OrderDesc_RegisHTTP = pm.globals.get(\"x_ais_OrderDesc_RegisHTTP\");\r",
									"//------------------------------------------------------------//\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// Signin get token\r",
									"Signin = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSignin = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_Signin + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_UserAuthentication,\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestSignin = {\r",
									"            mode: 'raw',\r",
									"            raw:\r",
									"                JSON.stringify({\r",
									"                    username: Username,\r",
									"                    password: Password\r",
									"                })\r",
									"        };\r",
									"\r",
									"        let optionsSignin = {\r",
									"            url: url + provisioningapis + urlSignin,\r",
									"            method: 'POST',\r",
									"            header: headersOptSignin,\r",
									"            body: httpRequestSignin\r",
									"        };\r",
									"        // console.log('request Signin');\r",
									"        let response = await reqPromise(optionsSignin);\r",
									"        let jsonDataSignin = await response.json();\r",
									"\r",
									"        // setAccessToken\r",
									"        await pm.environment.set(\"AccessToken\", jsonDataSignin.AccessToken);\r",
									"\r",
									"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('Signin : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // SignInProcess is Success\r",
									"        pm.test('Signin : OperationStatus Description is ' + '\"' + resultDescriptionSuccessSignIn + '\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
									"        });\r",
									"\r",
									"        //set random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //set PartnerName\r",
									"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
									"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
									"        //set MerchantContact\r",
									"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
									"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
									"        // set CPID\r",
									"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
									"        pm.environment.set(\"CPID\", CPIDValue)\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreatePartner\r",
									"CreatePartner = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreatePartner = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreatePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreatePartner,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreatePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
									"                \"PartnerType\": [\r",
									"                    \"Supplier\",\r",
									"                    \"Customer\"\r",
									"                ],\r",
									"                \"PartnerDetail\": {\r",
									"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
									"                    \"CPID\": pm.environment.get(\"CPID\")\r",
									"                },\r",
									"                \"Property\": {\r",
									"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreatePartner = {\r",
									"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreatePartner,\r",
									"            body: httpRequestCreatePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsCreatePartner);\r",
									"        let jsonDataCreatePartner = await response.json();\r",
									"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
									"\r",
									"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreatePartner : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreatePartner is Success\r",
									"        pm.test('CreatePartner : OperationStatus Description is ' + '\"' + resultDescriptionCreatePartner + '\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
									"        });\r",
									"\r",
									"        //GetResponse_PartnerId\r",
									"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
									"\r",
									"        //Accountname\r",
									"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
									"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateAccount\r",
									"CreateAccount = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateAccount = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateAccount,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreateAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateAccount = {\r",
									"            url: url + provisioningapis + urlAccountCreateAccount,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateAccount,\r",
									"            body: httpRequestCreateAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateAccount');\r",
									"        let response = await reqPromise(optionsCreateAccount);\r",
									"        let jsonDataCreateAccount = await response.json();\r",
									"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
									"\r",
									"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateAccount : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateAccount is Success\r",
									"        pm.test('CreateAccount : OperationStatus Description is ' + '\"' + resultDescriptionCreateAccount + '\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
									"        });\r",
									"        // GetResponse_AccountName\r",
									"        pm.environment.set(\"GetResponse_AccountName\", jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
									"        // GetResponse_AccountId\r",
									"        pm.environment.set(\"GetResponse_AccountId\", jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
									"        // random_IM\r",
									"        pm.environment.set(\"random_IM\", _.random(10000000, 99999999) + \" \" + _.random(1000000, 9999999))\r",
									"        // random_ICCID\r",
									"        pm.environment.set(\"random_ICCID\", _.random(1000000, 9999999) + \" \" + _.random(100000, 999999))\r",
									"        // random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //ThingName\r",
									"        let thingNameValue = fieldDataValue.Thing.ThingNameValue; // \"Sensor_TestThingName\"\r",
									"        pm.environment.set(\"ThingName\", thingNameValue + pm.environment.get(\"random_number\"))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThing\r",
									"CreateThing = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThing = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateThing + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateThing,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey': pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreateThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingName\": pm.environment.get(\"ThingName\"),\r",
									"                \"IMEI\": pm.environment.get(\"random_IM\"),\r",
									"                \"IMSI\": pm.environment.get(\"random_IM\"),\r",
									"                \"ICCID\": pm.environment.get(\"random_ICCID\"),\r",
									"                \"RouteUrl\": fieldDataValue.Thing.RouteUrlValue , //[\"http://10.12.3.4:2019/api/information/AddInformation\"]\r",
									"                \"RouteInfo\": {\r",
									"                    \"MIMO_ID\": fieldDataValue.Thing.RouteInfoMIMOIDValue , //\"606edada\"\r",
									"                    \"MIMO_SerialNo\": fieldDataValue.Thing.RouteInfoMIMOSerialNoValue //5466758878\r",
									"                },\r",
									"                \"RouteFlag\": {\r",
									"                    \"ThingName\": fieldDataValue.Thing.RouteFlagThingNameValue , //true\r",
									"                    \"ThingToken\": fieldDataValue.Thing.RouteFlagThingTokenValue, //true\r",
									"                    \"IMEI\": fieldDataValue.Thing.RouteFlagIMEIValue, //true\r",
									"                    \"ICCID\": fieldDataValue.Thing.RouteFlagICCIDValue, //true\r",
									"                    \"RouteInfo\": fieldDataValue.Thing.RouteFlagRouteInfoValue //true\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateThing = {\r",
									"            url: url + provisioningapis + urlThingCreateThing,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThing,\r",
									"            body: httpRequestCreateThing\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThing');\r",
									"        let response = await reqPromise(optionsCreateThing);\r",
									"        let jsonDataCreateThing = await response.json();\r",
									"        // console.log('jsonDataCreateThing',jsonDataCreateThing)\r",
									"\r",
									"        let operationStatusCreateThing = await jsonDataCreateThing.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateThing : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateThing : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateThing is Success\r",
									"        pm.test('CreateThing : OperationStatus Description is ' + '\"' + resultDescriptionCreateThing + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Description', resultDescriptionCreateThing);\r",
									"        });\r",
									"\r",
									"        pm.environment.set(\"GetResponse_ThingID\", jsonDataCreateThing.ThingInfo.ThingId)\r",
									"        pm.environment.set(\"GetResponse_IMSI\", jsonDataCreateThing.ThingInfo.IMSI)\r",
									"        \r",
									"        let keys = pm.environment.get(\"GetResponse_IMSI\") + \":\" + pm.environment.get(\"IpAddress\");\r",
									"        // console.log(\"keys\", keys);\r",
									"        let encodedKeys = CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(keys));\r",
									"        pm.environment.set(\"encodedKeys_Authorization_Register\", encodedKeys);\r",
									"\r",
									"        //Get Random Sensor \r",
									"        pm.environment.set(\"random_Sensor\", _.random(100, 999))\r",
									"\r",
									"        //Get Random Sensor AsgardHTTP\r",
									"        pm.environment.set(\"random_Sensor_AsgardHTTP\", _.random(100, 999))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThingStateInfo\r",
									"CreateThingStateInfo = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThingStateInfo = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateThingStateInfo,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey': pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        // {\"AA\" : pm.environment.get(\"random_Sensor\")}\r",
									"        let sensorValue = {};\r",
									"        sensorValue[fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP] = pm.environment.get(\"random_Sensor\");\r",
									"        // console.log('sensorValue',sensorValue);\r",
									"        \r",
									"        let httpRequestCreateThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": [\r",
									"                    pm.environment.get(\"GetResponse_ThingID\")\r",
									"                ],\r",
									"                \"Type\": fieldDataValue.CreateThingStateInfo.Type_Report,\r",
									"                \"Sensor\": sensorValue\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingCreateThingStateInfo,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThingStateInfo,\r",
									"            body: httpRequestCreateThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThingStateInfo');\r",
									"        let response = await reqPromise(optionsCreateThingStateInfo);\r",
									"        let jsonDataCreateThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataCreateThingStateInfo',jsonDataCreateThingStateInfo)\r",
									"\r",
									"        let operationStatusCreateThingStateInfo = await jsonDataCreateThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"CreateThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //CreateThingStateInfo is Success\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Description is ' + '\"' + resultDescriptionCreateThingStateInfo + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Description', resultDescriptionCreateThingStateInfo);\r",
									"        });\r",
									"\r",
									"       \r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// ControlThing\r",
									"ControlThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptControlThing = {\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_ControlThing + current_timestamp,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Content-Type':ContentType_ApplicationJson\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        // {\"AA\" : pm.environment.get(\"random_Sensor_AsgardHTTP\")}\r",
									"        let sensorValue = {};\r",
									"        sensorValue[fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP] = pm.environment.get(\"random_Sensor_AsgardHTTP\");\r",
									"        // console.log('sensorValue',sensorValue);\r",
									"\r",
									"        let httpRequestControlThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\"),\r",
									"                \"Sensors\": sensorValue\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsControlThing = {\r",
									"            url: url + controlapis + urlControlThing,\r",
									"            method: 'POST',\r",
									"            header: headersOptControlThing,\r",
									"            body: httpRequestControlThing\r",
									"        };\r",
									"\r",
									"        // console.log('response ControlThing');\r",
									"        let response = await reqPromise(optionsControlThing);\r",
									"        let jsonDataControlThing = await response.json();\r",
									"        // console.log('jsonDataControlThing',jsonDataControlThing)\r",
									"    \r",
									"        let operationStatusControlThing = await jsonDataControlThing.operationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"ControlThing : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('ControlThing : OperationStatus code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusControlThing).to.have.property('code', resultCodeSuccess);\r",
									"        });\r",
									"        //ControlOneThing is Success\r",
									"        pm.test('ControlThing : OperationStatus description is '+'\"'+ resultDescriptionSuccessControlOneThing+'\"', function () {\r",
									"            pm.expect(operationStatusControlThing).to.have.property('description', resultDescriptionSuccessControlOneThing);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// AsgardHTTPeSimRegister\r",
									"AsgardHTTPeSimRegister = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptAsgardHTTPeSimRegister = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_RegisHTTP + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_RegisHTTP,\r",
									"            'Authorization': Basic + ' ' + pm.environment.get(\"encodedKeys_Authorization_Register\")\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestAsgardHTTPeSimRegister = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({})\r",
									"        };\r",
									"\r",
									"        let optionsAsgardHTTPeSimRegister = {\r",
									"            url: url + httpapis + urlAsgardHTTPeSimRegister,\r",
									"            method: 'POST',\r",
									"            header: headersOptAsgardHTTPeSimRegister,\r",
									"            body: httpRequestAsgardHTTPeSimRegister\r",
									"        };\r",
									"\r",
									"        // console.log('request AsgardHTTPEsimRegister');\r",
									"        let response = await reqPromise(optionsAsgardHTTPeSimRegister);\r",
									"        let jsonDataAsgardHTTPeSimRegister = await response.json();\r",
									"        // console.log('jsonDataCreateThingStateInfo',jsonDataAsgardHTTPeSimRegister)\r",
									"        let operationStatusAsgardHTTPeSimRegister = await jsonDataAsgardHTTPeSimRegister.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"Asgard HTTP(eSim) Register : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('Asgard HTTP(eSim) Register : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusAsgardHTTPeSimRegister).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"\r",
									"        // The requested operation was successfully.\r",
									"        pm.test('Asgard HTTP(eSim) Register : OperationStatus DeveloperMessage is ' + '\"' + resultDescriptionTheRequestedOperationWasSuccessfully + '\"', function () {\r",
									"            pm.expect(operationStatusAsgardHTTPeSimRegister).to.have.property('DeveloperMessage', resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"        });\r",
									"\r",
									"        await pm.environment.set(\"GetResponse_ThingToken\", jsonDataAsgardHTTPeSimRegister.ThingToken)\r",
									"        let keys2 = await await fieldDataValue.AsgardHTTP.Value_AsgardHTTPeSim_Delta_TST_F3_0_2_007_Username_Error + \":\" + fieldDataValue.AsgardHTTP.Value_AsgardHTTPeSim_Delta_TST_F3_0_2_007_Password_Error;     \r",
									"        let encodedKeys2 = await CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(keys2));\r",
									"        pm.environment.set(\"encodedKeys_Authorization_Delta\", encodedKeys2)\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"Signin();\r",
									"setTimeout(async function(){await CreatePartner();}, 3000); \r",
									"setTimeout(async function(){await CreateAccount();}, 6000); \r",
									"setTimeout(async function(){await CreateThing();}, 8000); \r",
									"setTimeout(async function(){await CreateThingStateInfo();}, 9000); \r",
									"setTimeout(async function(){await ControlThing();}, 10000); \r",
									"setTimeout(async function(){await AsgardHTTPeSimRegister();}, 20000); \r",
									"setTimeout(async function(){}, 30000); //for wait value encodedKeys_Authorization_Delta"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-ais-UserName",
								"type": "text",
								"value": "{{x_ais_UserName_AisPartner}}"
							},
							{
								"key": "x-ais-OrderRef",
								"value": "{{x_ais_OrderRef_DeltaHTTP_fail}}{{current_timestamp}}"
							},
							{
								"key": "x-ais-OrderDesc",
								"type": "text",
								"value": "{{x_ais_OrderDesc_DeltaHTTP}}"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{Basic}} {{encodedKeys_Authorization_Delta}}"
							}
						],
						"url": {
							"raw": "{{url}}{{httpapis}}/api/delta/sim/v1/?Sensor=",
							"host": [
								"{{url}}{{httpapis}}"
							],
							"path": [
								"api",
								"delta",
								"sim",
								"v1",
								""
							],
							"query": [
								{
									"key": "Sensor",
									"value": ""
								}
							]
						},
						"description": "Type:Desire"
					},
					"response": []
				}
			]
		},
		{
			"name": "Register",
			"item": [
				{
					"name": "AsgardHTTPeSimRegister_TST_F4_1_1_001_Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var Basic = pm.environment.get(\"Basic\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to xAisOrderRef \"RemoveThing_\"\r",
									"var x_ais_OrderRef_RemoveThing = pm.globals.get(\"x_ais_OrderRef_RemoveThing\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"var x_ais_OrderDesc_RemoveThing = pm.globals.get(\"x_ais_OrderDesc_RemoveThing\");\r",
									"//get global variable to xAisOrderRef \"InquiryThing_\"\r",
									"var x_ais_OrderRef_InquiryThing = pm.globals.get(\"x_ais_OrderRef_InquiryThing\");\r",
									"//get global variable to x_ais_OrderDesc \"InquiryThing\"\r",
									"var x_ais_OrderDesc_InquiryThing = pm.globals.get(\"x_ais_OrderDesc_InquiryThing\");\r",
									"//get global variable to xAisOrderRef \"RemoveThingStateInfo_\"\r",
									"var x_ais_OrderRef_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderRef_RemoveThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThingStateInfo\"\r",
									"var x_ais_OrderDesc_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_RemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals AsgardHTTP --------------//\r",
									"//get global variable to x_ais_OrderRef \"RegisHTTP_\"\r",
									"var x_ais_OrderRef_RegisHTTP = pm.globals.get(\"x_ais_OrderRef_RegisHTTP\");\r",
									"//get global variable to x_ais_OrderDesc \"Register Thing in MG\"\r",
									"var x_ais_OrderDesc_RegisHTTP = pm.globals.get(\"x_ais_OrderDesc_RegisHTTP\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get url Remove --------------//\r",
									"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
									"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"var urlThingRemoveThing = pm.globals.get(\"urlThingRemoveThing\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"var urlThingRemoveThingStateInfo = pm.globals.get(\"urlThingRemoveThingStateInfo\");\r",
									"//---------------- get url Inquiry --------------//\r",
									"//get global variable to url \"/api/v1/Thing/InquiryThingr\"\r",
									"var urlThingInquiryThing = pm.globals.get(\"urlThingInquiryThing\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"RemovePartner is Success\"\r",
									"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
									"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
									"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
									"//get global variable to resultDescription \"RemoveThing is Success\"\r",
									"var resultDescriptionRemoveThing = pm.globals.get(\"resultDescriptionRemoveThing\");\r",
									"//get global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"var resultDescriptionRemoveThingStateInfo = pm.globals.get(\"resultDescriptionRemoveThingStateInfo\");\r",
									"//get global variable to resultDescription \"InquiryThing is Success\"\r",
									"var resultDescriptionInquiryThing = pm.globals.get(\"resultDescriptionInquiryThing\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to resultDescription \"The requested operation was successfully.\"\r",
									"var resultDescriptionTheRequestedOperationWasSuccessfully = pm.globals.get(\"resultDescriptionTheRequestedOperationWasSuccessfully\");\r",
									"//------------------------------------------------------------//\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"// ThingToken\r",
									"pm.environment.set(\"GetResponse_ThingToken\", jsonData.ThingToken)\r",
									"\r",
									"pm.test(\"Asgard HTTP(eSim) Register : Status code is \" + statusCodeSuccess, function () {\r",
									"    pm.response.to.have.status(statusCodeSuccess);\r",
									"});\r",
									"\r",
									"pm.test('Asgard HTTP(eSim) Register : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeSuccess);\r",
									"});\r",
									"\r",
									"pm.test('Asgard HTTP(eSim) Register : OperationStatus DeveloperMessage is '+'\"'+ resultDescriptionTheRequestedOperationWasSuccessfully+'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"});\r",
									"\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// RemovePartner\r",
									" RemovePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemovePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemovePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemovePartner = {\r",
									"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemovePartner,\r",
									"            body: httpRequestRemovePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request RemovePartner');\r",
									"        let response = await reqPromise(optionsRemovePartner);\r",
									"        let jsonDataRemovePartner = await response.json();\r",
									"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
									"    \r",
									"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemovePartner is Success\r",
									"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveAccount\r",
									" RemoveAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemoveAccount = {\r",
									"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveAccount,\r",
									"            body: httpRequestRemoveAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveAccount');\r",
									"        let response = await reqPromise(optionsRemoveAccount);\r",
									"        let jsonDataRemoveAccount = await response.json();\r",
									"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
									"    \r",
									"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveAccount is Success\r",
									"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThing\r",
									" RemoveThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThing = {\r",
									"            url: url + provisioningapis + urlThingRemoveThing,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThing,\r",
									"            body: httpRequestRemoveThing\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveThing');\r",
									"        let response = await reqPromise(optionsRemoveThing);\r",
									"        let jsonDataRemoveThing = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThing)\r",
									"    \r",
									"        let operationStatusRemoveThing = await jsonDataRemoveThing.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThing : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThing : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThing is Success\r",
									"        pm.test('RemoveThing : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThing+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Description', resultDescriptionRemoveThing);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThingStateInfo\r",
									" RemoveThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"            \r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\"),\r",
									"                \"stateType\": fieldDataValue.CreateThingStateInfo.Type_Report, //Report\r",
									"                \"stateKey\": fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP //AA\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingRemoveThingStateInfo,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThingStateInfo,\r",
									"            body: httpRequestRemoveThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('response RemoveThingStateInfo');\r",
									"        let response = await reqPromise(optionsRemoveThingStateInfo);\r",
									"        let jsonDataRemoveThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThingStateInfo)\r",
									"    \r",
									"        let operationStatusRemoveThingStateInfo = await jsonDataRemoveThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThingStateInfo is Success\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThingStateInfo+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Description', resultDescriptionRemoveThingStateInfo);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"//---------------- LogDefaultValue --------------//\r",
									"//set variable to LogDefaultValue JSON.parse\r",
									"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
									"// console.log('LogDefaultValue',LogDefaultValue);\r",
									"//---------------- set globals Other --------------//\r",
									"\r",
									"var SearchLog = LogDefaultValue.SearchLog;\r",
									"// console.log('SearchLog',SearchLog);\r",
									"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
									"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
									"var kbn_version = SearchLog.header.kbn_version;\r",
									"var authorization = SearchLog.header.Authorization;\r",
									"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
									"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
									"var namespace = LogDefaultValue.Other.namespace;\r",
									"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
									"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
									"var header_x_ais_username = LogDefaultValue.Other.header_x_ais_username;\r",
									"var methodPost = LogDefaultValue.Other.methodPost;\r",
									"\r",
									"// Detail\r",
									"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
									"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
									"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
									"\r",
									"// Summary\r",
									"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
									"\r",
									"// Asgard.Http.APIs\r",
									"var applicationName = LogDefaultValue.AsgardHTTP.applicationName;\r",
									"var cmdName = LogDefaultValue.AsgardHTTP.cmdNameRegister;\r",
									"var containerId = LogDefaultValue.AsgardHTTP.containerId;\r",
									"var requestObjectUrlStaging = LogDefaultValue.AsgardHTTP.requestObjectUrlRegisterMgStaging;\r",
									"var urlRegister = LogDefaultValue.AsgardHTTP.urlRegister;\r",
									"\r",
									"// Check CDR (Summary Log) and EDR (Detail Log)\r",
									"SearchLogFindTid = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSearchLogFindTid = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = pm.environment.get(\"GetResponse_ThingToken\"); \r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestSearchLogFindTid = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"phrase\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"\r",
									"        let optionsSearchLogFindTid = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptSearchLogFindTid,\r",
									"            body: httpRequestSearchLogFindTid\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsSearchLogFindTid);\r",
									"        let jsonDataSearchLogFindTid = await response.json();\r",
									"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
									"        // console.log('hits',hits)\r",
									"  \r",
									"        // find tid\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            // let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"        \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            if(applicationNameValue == applicationName){\r",
									"                let tid = hits[i]._source.cauldron.tid;\r",
									"                pm.environment.set(\"tid\", tid);\r",
									"                break;\r",
									"           }\r",
									"        }\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"CheckLog = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCheckLog = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = pm.environment.get(\"tid\");\r",
									"\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        // console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestCheckLog = {\r",
									"            mode: 'raw',\r",
									"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"phrase\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"        let optionsCheckLog = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptCheckLog,\r",
									"            body: httpRequestCheckLog\r",
									"        }; \r",
									"        let response = await reqPromise(optionsCheckLog);\r",
									"        let jsonDataCheckLog = await response.json();\r",
									"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
									"        \r",
									"        // //200\r",
									"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });     \r",
									"        \r",
									"        let hits = jsonDataCheckLog.hits.hits\r",
									"        // console.log('hits',hits)\r",
									"  \r",
									"        // find logType\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            //  let logType = hits[i]._source.cauldron.logType\r",
									"            let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"           \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            \r",
									"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
									"            // console.log('resultDataLog',resultDataLog)\r",
									"\r",
									"            let tidControl = x_ais_OrderRef_RegisHTTP  + current_timestamp;\r",
									"            // console.log(tidControl);\r",
									"            if(applicationNameValue == applicationName){\r",
									"                 \r",
									"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and Asgard.Http.APIs\r",
									"                    pm.test(\"Check Summary Log : Asgard_HTTP(eSim) Register\" , function () {\r",
									"                        console.log(\"======== Check Summary Log ( Expected = Actual) [Asgard_HTTP(eSim) Register] ==================\");\r",
									"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
									"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
									"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeSuccess);\r",
									"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
									"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        // console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
									"                        // console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
									"\r",
									"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
									"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
									"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeSuccess); \r",
									"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionTheRequestedOperationWasSuccessfully); \r",
									"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
									"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"\r",
									"                        let thingId = pm.environment.get(\"GetResponse_ThingID\");\r",
									"                        let imei = (pm.environment.get(\"random_IM\")).replace(\" \", \"\");\r",
									"                        let imsi = (pm.environment.get(\"GetResponse_IMSI\")).replace(\" \", \"\");\r",
									"                        let customUrl= urlCheckLog + requestObjectUrlStaging;\r",
									"\r",
									"                        // check identity\r",
									"                        // \\\"identity\\\":\\\"{ \\\\\\\"Imei\\\\\\\":\\\\\\\"339602035695317\\\\\\\", \\\\\\\"ThingId\\\\\\\":\\\\\\\"609aa913d828150001868e98\\\\\\\", \\\\\\\"Imsi\\\\\\\":\\\\\\\"339602035695317\\\\\\\" }\\\"\r",
									"                        let dataSummaryIdentity = JSON.parse(resultDataLog.identity);\r",
									"\r",
									"                        console.log(\"identity.ThingId : \" + dataSummaryIdentity.ThingId + \" = \" + thingId);\r",
									"                        console.log(\"identity.Imei : \" + dataSummaryIdentity.Imei + \" = \" + imei);\r",
									"                        console.log(\"identity.Imsi : \" + dataSummaryIdentity.Imsi + \" = \" + imsi);\r",
									"\r",
									"                        pm.expect(dataSummaryIdentity.ThingId).to.eql(thingId); \r",
									"                        pm.expect(dataSummaryIdentity.Imei).to.eql(imei); \r",
									"                        pm.expect(dataSummaryIdentity.Imsi).to.eql(imsi); \r",
									"\r",
									"                        // check custom\r",
									"                        // \\\"custom\\\":{ \\\"customData\\\":{ \\\"Imsi\\\":[ \\\"175754174875018\\\" ], \\\"url\\\":\\\"mg-iot.sandais.com/api/register/sim/v1\\\", \\\"Imei\\\":[ \\\"175754174875018\\\" ], \\\"ThingId\\\":[ \\\"60c6d7c902fd0b000144cd40\\\" ] }, \\\"endPointSummary\\\":[ { \\\"no\\\":\\\"1\\\", \\\"endPointName\\\":\\\"db.ThingsCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:Inquiry was Success\\\", \\\"processTime\\\":0.0005 }, { \\\"no\\\":\\\"2\\\", \\\"endPointName\\\":\\\"db.AccountsCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:Inquiry was Success\\\", \\\"processTime\\\":0.0003 }, { \\\"no\\\":\\\"3\\\", \\\"endPointName\\\":\\\"db.ThingsCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:UpdateThing was Success\\\", \\\"processTime\\\":0.0009 } ] }\r",
									"\r",
									"                        let customData = resultDataLog.custom.customData\r",
									"\r",
									"                        console.log(\"custom.url : \" + customData.url + \" = \" + customUrl);\r",
									"                        console.log(\"custom.Imei[0] : \" + customData.Imei[0] + \" = \" + imei);\r",
									"                        console.log(\"custom.Imsi[0] : \" + customData.Imsi[0] + \" = \" + imsi);\r",
									"                        console.log(\"custom.ThingId[0] : \" + customData.ThingId[0] + \" = \" + thingId);\r",
									"\r",
									"                        pm.expect(customData.url).to.eql(customUrl); \r",
									"                        pm.expect(customData.Imei[0]).to.eql(imei); \r",
									"                        pm.expect(customData.Imsi[0]).to.eql(imsi); \r",
									"                        pm.expect(customData.ThingId[0]).to.eql(thingId); \r",
									"\r",
									"                        let custom = resultDataLog.custom.endPointSummary;\r",
									"                        let countCustom = custom.length;\r",
									"                       \r",
									"                        // [\"db.ThingsCollection\",\"db.AccountsCollection\",\"db.ThingsCollection\"]\r",
									"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_Asgard_HTTP_eSim_Register;\r",
									"                        // [\"20000:Inquiry was Success\",\"20000:Inquiry was Success\",\"20000:UpdateThing was Success\"]\r",
									"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_Asgard_HTTP_eSim_Register;\r",
									"                        let countCustomStep = dataEndPointName.length;\r",
									"\r",
									"                        console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep);\r",
									"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
									"                        \r",
									"                        for(let i=0;i<countCustomStep;i++){\r",
									"                            let no = custom[i].no;\r",
									"                            let valueEndPointName = custom[i].endPointName;\r",
									"                            let valueResponseStatus = custom[i].responseStatus;\r",
									"                            // console.log(\"i\",i);\r",
									"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
									"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
									"\r",
									"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString());\r",
									"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i]);\r",
									"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i]);\r",
									"\r",
									"                            pm.expect(no).to.eql((i+1).toString()); \r",
									"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
									"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]); \r",
									"                        }\r",
									"                    }); \r",
									"                }\r",
									"\r",
									"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and Asgard.Http.APIs\r",
									"\r",
									"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
									"                    // console.log('endPointNameValue ',endPointNameValue)\r",
									"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [Asgard_HTTP(eSim) Register]\", function () {\r",
									"                        console.log(\"======== Check Detail Log ( Expected = Actual) [Asgard_HTTP(eSim) Register] ==================\");\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
									"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
									"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
									"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.custom1.activityLog.processTime + \" = \" + resultDataLog.custom1.activityLog.processTime);\r",
									"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
									"\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
									"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
									"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
									"\r",
									"                        if( endPointNameValue == undefined){\r",
									"                            // check requestObject\r",
									"                            // \"requestObject\":\"{\\\"url\\\":\\\"/api/register/sim/v1\\\",\\\"method\\\":\\\"POST\\\",\\\"headers\\\":{\\\"Cache-Control\\\":\\\"no-cache\\\",\\\"Content-Type\\\":\\\"application/json\\\",\\\"Accept\\\":\\\"*/*\\\",\\\"Accept-Encoding\\\":\\\"gzip,deflate,br\\\",\\\"Authorization\\\":\\\"Basic NDk2MTUxMTAzMTIyNjM5OjEuMi4zLjQ=\\\",\\\"Host\\\":\\\"mg-staging.sandais.com\\\",\\\"User-Agent\\\":\\\"PostmanRuntime/7.26.8\\\",\\\"Content-Length\\\":\\\"2\\\",\\\"x-real-ip\\\":\\\"171.96.174.10\\\",\\\"x-forwarded-for\\\":\\\"171.96.174.10\\\",\\\"x-forwarded-proto\\\":\\\"https\\\",\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"RegisHTTP_202101291201997\\\",\\\"x-ais-orderdesc\\\":\\\"Register Thing in MG\\\",\\\"postman-token\\\":\\\"83bc76b4-8538-4a10-94fc-8b9cc1143ec8\\\",\\\"x-request-id\\\":\\\"bbf6c560-8bea-4d53-87d8-28a3f3664d37\\\",\\\"x-b3-traceid\\\":\\\"eb252eaef48d4ec507b32acd0a8dc573\\\",\\\"x-b3-spanid\\\":\\\"07b32acd0a8dc573\\\",\\\"x-b3-sampled\\\":\\\"0\\\",\\\"x-ais-SessionId\\\":\\\"1611896410502\\\",\\\"identity\\\":\\\"{\\\\\\\"Imei\\\\\\\":\\\\\\\"496151103122639\\\\\\\",\\\\\\\"ThingId\\\\\\\":\\\\\\\"6013965896d0ed0001f5a46d\\\\\\\",\\\\\\\"Imsi\\\\\\\":\\\\\\\"496151103122639\\\\\\\"}\\\",\\\"custom\\\":\\\"{\\\\\\\"Imsi\\\\\\\":[\\\\\\\"496151103122639\\\\\\\"],\\\\\\\"url\\\\\\\":\\\\\\\"mg-staging.sandais.com/api/register/sim/v1\\\\\\\",\\\\\\\"Imei\\\\\\\":[\\\\\\\"496151103122639\\\\\\\"],\\\\\\\"ThingId\\\\\\\":[\\\\\\\"6013965896d0ed0001f5a46d\\\\\\\"]}\\\"},\\\"queryString\\\":{},\\\"routeParamteters\\\":{},\\\"body\\\":{}}\"\r",
									"\r",
									"                            // \\\"requestObject\\\":\\\"{ \\\\\\\"url\\\\\\\":\\\\\\\"/api/register/sim/v1\\\\\\\", \\\\\\\"method\\\\\\\":\\\\\\\"POST\\\\\\\", \\\\\\\"headers\\\\\\\":{ \\\\\\\"Cache-Control\\\\\\\":\\\\\\\"no-cache\\\\\\\", \\\\\\\"Content-Type\\\\\\\":\\\\\\\"application/json\\\\\\\", \\\\\\\"Accept\\\\\\\":\\\\\\\"*/*\\\\\\\", \\\\\\\"Accept-Encoding\\\\\\\":\\\\\\\"gzip, deflate, br\\\\\\\", \\\\\\\"Authorization\\\\\\\":\\\\\\\"Basic MzM5NjAyMDM1Njk1MzE3OjEuMi4zLjQ=\\\\\\\", \\\\\\\"Host\\\\\\\":\\\\\\\"mg-iot.sandais.com\\\\\\\", \\\\\\\"User-Agent\\\\\\\":\\\\\\\"PostmanRuntime/7.26.8\\\\\\\", \\\\\\\"Content-Length\\\\\\\":\\\\\\\"2\\\\\\\", \\\\\\\"x-real-ip\\\\\\\":\\\\\\\"182.232.183.255\\\\\\\", \\\\\\\"x-forwarded-for\\\\\\\":\\\\\\\"182.232.183.255, 10.233.65.1\\\\\\\", \\\\\\\"x-forwarded-proto\\\\\\\":\\\\\\\"http\\\\\\\", \\\\\\\"x-ais-username\\\\\\\":\\\\\\\"AisPartner\\\\\\\", \\\\\\\"x-ais-orderref\\\\\\\":\\\\\\\"RegisHTTP_202105112205812\\\\\\\", \\\\\\\"x-ais-orderdesc\\\\\\\":\\\\\\\"Register Thing in MG\\\\\\\", \\\\\\\"postman-token\\\\\\\":\\\\\\\"0b9416dc-f5eb-44ec-88e7-4bfcdc586ff2\\\\\\\", \\\\\\\"x-envoy-external-address\\\\\\\":\\\\\\\"10.233.65.1\\\\\\\", \\\\\\\"x-request-id\\\\\\\":\\\\\\\"e202b615-0c45-4ff7-8dde-bdf033bdb3ac\\\\\\\", \\\\\\\"x-envoy-original-path\\\\\\\":\\\\\\\"/httpapis/api/register/sim/v1\\\\\\\", \\\\\\\"x-b3-traceid\\\\\\\":\\\\\\\"3027ac35c789f3422c347f76eb6f6ae3\\\\\\\", \\\\\\\"x-b3-spanid\\\\\\\":\\\\\\\"48a0ceffdd1d7eeb\\\\\\\", \\\\\\\"x-b3-parentspanid\\\\\\\":\\\\\\\"2c347f76eb6f6ae3\\\\\\\", \\\\\\\"x-b3-sampled\\\\\\\":\\\\\\\"0\\\\\\\", \\\\\\\"x-ais-SessionId\\\\\\\":\\\\\\\"1620748575534\\\\\\\", \\\\\\\"identity\\\\\\\":\\\\\\\"{ \\\\\\\\\\\\\\\"Imei\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"339602035695317\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"ThingId\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"609aa913d828150001868e98\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Imsi\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"339602035695317\\\\\\\\\\\\\\\" }\\\\\\\", \\\\\\\"custom\\\\\\\":\\\\\\\"{ \\\\\\\\\\\\\\\"Imsi\\\\\\\\\\\\\\\":[ \\\\\\\\\\\\\\\"339602035695317\\\\\\\\\\\\\\\" ], \\\\\\\\\\\\\\\"url\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"mg-iot.sandais.com/api/register/sim/v1\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Imei\\\\\\\\\\\\\\\":[ \\\\\\\\\\\\\\\"339602035695317\\\\\\\\\\\\\\\" ], \\\\\\\\\\\\\\\"ThingId\\\\\\\\\\\\\\\":[ \\\\\\\\\\\\\\\"609aa913d828150001868e98\\\\\\\\\\\\\\\" ] }\\\\\\\" }, \\\\\\\"queryString\\\\\\\":{ }, \\\\\\\"routeParamteters\\\\\\\":{ }, \\\\\\\"body\\\\\\\":{ } }\\\"\r",
									"\r",
									"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
									"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
									"\r",
									"                            let url = urlRegister; \r",
									"                            let x_ais_orderref = x_ais_OrderRef_RegisHTTP + current_timestamp;\r",
									"                            let x_ais_orderdesc = x_ais_OrderDesc_RegisHTTP;\r",
									"                            let x_ais_userName = x_ais_UserName_AisPartner;\r",
									"                            let authorization = Basic + ' ' + pm.environment.get(\"encodedKeys_Authorization_Register\");\r",
									"                            let imei = (pm.environment.get(\"random_IM\")).replace(\" \", \"\");\r",
									"                            let imsi = (pm.environment.get(\"GetResponse_IMSI\")).replace(\" \", \"\");\r",
									"                            let thingId = pm.environment.get(\"GetResponse_ThingID\");\r",
									"                            let customUrl= urlCheckLog + requestObjectUrlStaging;\r",
									"                            \r",
									"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
									"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
									"                            console.log(\"headers.x_ais_userName : \" + jsonParseRequestObject.headers[header_x_ais_username] + \" = \" + x_ais_userName);\r",
									"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
									"                            console.log(\"headers.Authorization : \" + jsonParseRequestObject.headers.Authorization + \" = \" + authorization);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
									"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_username]).to.eql(x_ais_userName);\r",
									"                            pm.expect(jsonParseRequestObject.headers.Authorization).to.eql(authorization);\r",
									"\r",
									"                            // check requestObject headers.identity\r",
									"                            let jsonParseRequestObjectHeadersIdentity = JSON.parse(jsonParseRequestObject.headers.identity);\r",
									"                            // console.log('jsonParseRequestObjectHeadersIdentity',jsonParseRequestObjectHeadersIdentity);\r",
									"\r",
									"                            console.log(\"headers.identity.Imei : \" + jsonParseRequestObjectHeadersIdentity.Imei + \" = \" + imei);\r",
									"                            console.log(\"headers.identity.Imsi : \" + jsonParseRequestObjectHeadersIdentity.Imsi + \" = \" + imsi);\r",
									"                            console.log(\"headers.identity.ThingId : \" + jsonParseRequestObjectHeadersIdentity.ThingId + \" = \" + thingId);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObjectHeadersIdentity.Imei).to.eql(imei);\r",
									"                            pm.expect(jsonParseRequestObjectHeadersIdentity.Imsi).to.eql(imsi);\r",
									"                            pm.expect(jsonParseRequestObjectHeadersIdentity.ThingId).to.eql(thingId);\r",
									"\r",
									"                            // check requestObject headers.custom\r",
									"                            let jsonParseRequestObjectHeadersCustom = JSON.parse(jsonParseRequestObject.headers.custom);\r",
									"                            // console.log('jsonParseRequestObjectHeadersCustom',jsonParseRequestObjectHeadersCustom);\r",
									"\r",
									"                            console.log(\"headers.custom.url : \" + jsonParseRequestObjectHeadersCustom.url + \" = \" + customUrl);\r",
									"                            console.log(\"headers.custom.Imei[0] : \" + jsonParseRequestObjectHeadersCustom.Imei[0] + \" = \" + imei);\r",
									"                            console.log(\"headers.custom.Imsi[0] : \" + jsonParseRequestObjectHeadersCustom.Imsi[0] + \" = \" + imsi);\r",
									"                            console.log(\"headers.custom.ThingId[0] : \" + jsonParseRequestObjectHeadersCustom.ThingId[0] + \" = \" + thingId);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObjectHeadersCustom.url).to.eql(customUrl);\r",
									"                            pm.expect(jsonParseRequestObjectHeadersCustom.Imei[0]).to.eql(imei);\r",
									"                            pm.expect(jsonParseRequestObjectHeadersCustom.Imsi[0]).to.eql(imsi);\r",
									"                            pm.expect(jsonParseRequestObjectHeadersCustom.ThingId[0]).to.eql(thingId);\r",
									"\r",
									"                            console.log(\"queryString : \" + JSON.stringify(jsonParseRequestObject.queryString) + \" = \" + JSON.stringify({}));\r",
									"                            console.log(\"routeParamteters : \" + JSON.stringify(jsonParseRequestObject.routeParamteters) + \" = \" + JSON.stringify({}));\r",
									"                            console.log(\"body : \" + JSON.stringify(jsonParseRequestObject.body) + \" = \" + JSON.stringify({}));\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.queryString).to.eql({}); \r",
									"                            pm.expect(jsonParseRequestObject.routeParamteters).to.eql({}); \r",
									"                            pm.expect(jsonParseRequestObject.body).to.eql({}); \r",
									"\r",
									"                            // check responseObject\r",
									"                            // responseObject: \"{\"ThingToken\":\"12091e64-7f14-45bc-b1c2-b74216aecda9\",\"OperationStatus\":{\"Code\":\"20000\",\"DeveloperMessage\":\"The requested operation was successfully.\"}}\"\r",
									"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
									"                            // console.log('jsonParseResponseObject',jsonParseResponseObject); \r",
									"\r",
									"                            console.log(\"response.ThingToken : \" + jsonParseResponseObject.ThingToken + \" = \" + pm.environment.get(\"GetResponse_ThingToken\"));\r",
									"                            pm.expect(jsonParseResponseObject.ThingToken).to.eql(pm.environment.get(\"GetResponse_ThingToken\"));  \r",
									"\r",
									"                            console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeSuccess);\r",
									"                            console.log(\"response.OperationStatus.DeveloperMessage : \" + jsonParseResponseObject.OperationStatus.DeveloperMessage + \" = \" + resultDescriptionTheRequestedOperationWasSuccessfully); \r",
									"\r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeSuccess);  \r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheRequestedOperationWasSuccessfully);  \r",
									"                        }\r",
									"                    }); \r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// InquiryThing\r",
									"InquiryThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptInquiryThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_InquiryThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_InquiryThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestInquiryThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsInquiryThing = {\r",
									"            url: url + provisioningapis + urlThingInquiryThing,\r",
									"            method: 'POST',\r",
									"            header: headersOptInquiryThing,\r",
									"            body: httpRequestInquiryThing\r",
									"        };\r",
									"\r",
									"        // console.log('request InquiryThing');\r",
									"        let response = await reqPromise(optionsInquiryThing);\r",
									"        let jsonDataInquiryThing = await response.json();\r",
									"        // console.log('jsonDataInquiryThing',jsonDataInquiryThing)\r",
									"    \r",
									"        let operationStatusInquiryThing = await jsonDataInquiryThing.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"InquiryThing : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('InquiryThing : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusInquiryThing).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //InquiryThing is Success\r",
									"        pm.test('InquiryThing : OperationStatus Description is '+'\"'+ resultDescriptionInquiryThing+'\"', function () {\r",
									"            pm.expect(operationStatusInquiryThing).to.have.property('Description', resultDescriptionInquiryThing);\r",
									"        });\r",
									"\r",
									"        //Check Data\r",
									"        let thingInfo = await jsonDataInquiryThing.ThingInfo;\r",
									"        console.log('thingInfo',thingInfo);\r",
									"\r",
									"        for(let i=0;i<thingInfo.length;i++){\r",
									"            pm.test('Verify DB Check Data : Register [\"ThingToken\" : \"'+  pm.environment.get(\"GetResponse_ThingToken\") +'\"]' , function () {\r",
									"                console.log(\"======== Verify DB Check Data ( Expected = Actual) [Asgard_HTTP(eSim) Register] ==================\");\r",
									"                console.log(\"ThingInfo[\"+ i +\"].ThingToken : \" + thingInfo[i].ThingToken + \" = \" + pm.environment.get(\"GetResponse_ThingToken\"));\r",
									"                \r",
									"                pm.expect(thingInfo[i]).to.have.property('ThingToken', pm.environment.get(\"GetResponse_ThingToken\"));\r",
									"            });\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"setTimeout(function(){SearchLogFindTid();}, 30000); \r",
									"setTimeout(function(){CheckLog();}, 50000); \r",
									"setTimeout(function(){InquiryThing();}, 60000); \r",
									"\r",
									"setTimeout(function(){RemoveThingStateInfo();}, 70000); \r",
									"setTimeout(function(){RemoveThing();}, 80000); \r",
									"setTimeout(function(){RemoveAccount();}, 90000); \r",
									"setTimeout(function(){RemovePartner();}, 100000); \r",
									"\r",
									"setTimeout(function(){\r",
									"pm.environment.unset(\"current_timestamp\");\r",
									"pm.environment.unset(\"AccessToken\");\r",
									"pm.environment.unset(\"random_number\");\r",
									"pm.environment.unset(\"PartnerName\");\r",
									"pm.environment.unset(\"MerchantContact\");\r",
									"pm.environment.unset(\"CPID\");\r",
									"pm.environment.unset(\"GetResponse_PartnerId\");\r",
									"pm.environment.unset(\"AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountId\");\r",
									"pm.environment.unset(\"random_IM\");\r",
									"pm.environment.unset(\"random_ICCID\");\r",
									"pm.environment.unset(\"ThingName\");\r",
									"pm.environment.unset(\"GetResponse_ThingInfo_ThingToken\");\r",
									"pm.environment.unset(\"GetResponse_ThingID\");\r",
									"pm.environment.unset(\"GetResponse_IMSI\");\r",
									"pm.environment.unset(\"encodedKeys_Authorization_Register\");\r",
									"pm.environment.unset(\"random_Sensor\");\r",
									"pm.environment.unset(\"random_Sensor_AsgardHTTP\");\r",
									"pm.environment.unset(\"GetResponse_ThingToken\");\r",
									"pm.environment.unset(\"tid\");\r",
									"}, 105000); \r",
									"setTimeout(async function(){}, 110000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var Username = pm.environment.get(\"Username\");\r",
									"var Password = pm.environment.get(\"Password\");\r",
									"\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"var controlapis = pm.environment.get(\"controlapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"//format YYYYMMDDHHMMSSS\r",
									"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
									"// console.log('currentTmestamp',currentTmestamp);\r",
									"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- statusCodeList --------------//\r",
									"//set variable to statusCodeList JSON.parse\r",
									"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
									"//set global variable to statusCode 200\r",
									"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
									"//set global variable to statusCode 201\r",
									"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultCodeList --------------//\r",
									"//set variable to resultCodeList JSON.parse\r",
									"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
									"//set global variable to resultCode \"20000\"\r",
									"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
									"//set global variable to resultCode \"20100\"\r",
									"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionSuccessList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
									"//set global variable to resultDescription \"SignInProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
									"//set global variable to resultDescription \"CreatePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
									"//set global variable to resultDescription \"CreateAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
									"//set global variable to resultDescription \"CreateThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThing\", resultDescriptionSuccessList.resultDescriptionCreateThing);\r",
									"//set global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThingStateInfo\", resultDescriptionSuccessList.resultDescriptionCreateThingStateInfo);\r",
									"//set global variable to resultDescription \"RemovePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
									"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
									"//set global variable to resultDescription \"RemoveThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThing\", resultDescriptionSuccessList.resultDescriptionRemoveThing);\r",
									"//set global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThingStateInfo\", resultDescriptionSuccessList.resultDescriptionRemoveThingStateInfo);\r",
									"//set global variable to resultDescription \"ControlOneThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessControlOneThing\", resultDescriptionSuccessList.resultDescriptionSuccessControlOneThing);\r",
									"//set global variable to resultDescription \"Register is Success\"\r",
									" pm.globals.set(\"resultDescriptionRegisterIsSuccess\", resultDescriptionSuccessList.resultDescriptionRegisterIsSuccess);\r",
									"//set global variable to resultDescription \"The requested operation was successfully.\"\r",
									"pm.globals.set(\"resultDescriptionTheRequestedOperationWasSuccessfully\", resultDescriptionSuccessList.resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"//set global variable to resultDescription \"InquiryThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionInquiryThing\", resultDescriptionSuccessList.resultDescriptionInquiryThing);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- HeaderList --------------//\r",
									"//set variable to HeaderList JSON.parse\r",
									"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
									"//---------------- set globals Other --------------//\r",
									"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
									"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
									"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
									"//set global variable to kbn-versio \"7.5.1\"\r",
									"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Signin_ --------------//\r",
									"//set global variable to x_ais_OrderRef \"Signin_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreatePartner --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
									"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
									"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
									"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreateAccount --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
									"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
									"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Thing --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThing\", HeaderList.Thing.x_ais_OrderRef_CreateThing);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThing\", HeaderList.Thing.x_ais_OrderDesc_CreateThing);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThing\", HeaderList.Thing.x_ais_OrderRef_RemoveThing);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThing\", HeaderList.Thing.x_ais_OrderDesc_RemoveThing);\r",
									"//set global variable to x_ais_OrderRef \"InquiryThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_InquiryThing\", HeaderList.Thing.x_ais_OrderRef_InquiryThing);\r",
									"//set global variable to x_ais_OrderDesc \"InquiryThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_InquiryThing\", HeaderList.Thing.x_ais_OrderDesc_InquiryThing);\r",
									"//set global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_RemoveThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_RemoveThingStateInfo);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Control --------------//\r",
									"//set global variable to x_ais_OrderRef \"ControlThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ControlThing\", HeaderList.Control.x_ais_OrderRef_ControlThing);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals AsgardHTTP --------------//\r",
									"//set global variable to x_ais_OrderRef \"RegisHTTP_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RegisHTTP\", HeaderList.AsgardHTTP.x_ais_OrderRef_RegisHTTP);\r",
									"//set global variable to x_ais_OrderDesc \"Register Thing in MG\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RegisHTTP\", HeaderList.AsgardHTTP.x_ais_OrderDesc_RegisHTTP);\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"SignInProcess is Success\"\r",
									"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
									"//get global variable to resultDescription \"CreatePartner is Success\"\r",
									"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
									"//get global variable to resultDescription \"CreateAccount is Success\"\r",
									"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
									"//get global variable to resultDescription \"CreateThing is Success\"\r",
									"var resultDescriptionCreateThing = pm.globals.get(\"resultDescriptionCreateThing\");\r",
									"//get global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"var resultDescriptionCreateThingStateInfo = pm.globals.get(\"resultDescriptionCreateThingStateInfo\");\r",
									"//get global variable to resultDescription \"ControlOneThing is Success\"\r",
									"var resultDescriptionSuccessControlOneThing = pm.globals.get(\"resultDescriptionSuccessControlOneThing\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- urlRouteList --------------//\r",
									"//set variable to urlRouteList JSON.parse\r",
									"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
									"//---------------- set url Create --------------//\r",
									"//set global variable to url \"/api/v1/auth/signin\"\r",
									"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
									"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
									"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"pm.globals.set(\"urlThingCreateThing\", urlRouteList.Thing.urlThingCreateThing);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"pm.globals.set(\"urlThingCreateThingStateInfo\", urlRouteList.Thing.urlThingCreateThingStateInfo);\r",
									"//set global variable to url \"/api/v1/Control/Thing\"\r",
									"pm.globals.set(\"urlControlThing\", urlRouteList.Control.urlControlThing);\r",
									"//---------------- get url Create --------------//\r",
									"//get global variable to url \"/api/v1/auth/signin\"\r",
									"var urlSignin = pm.globals.get(\"urlSignin\");\r",
									"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
									"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"var urlThingCreateThing = pm.globals.get(\"urlThingCreateThing\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"var urlThingCreateThingStateInfo = pm.globals.get(\"urlThingCreateThingStateInfo\");\r",
									"//get global variable to url \"/api/v1/Control/Thing\"\r",
									"var urlControlThing = pm.globals.get(\"urlControlThing\");\r",
									"//---------------- set url Remove --------------//\r",
									"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
									"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"pm.globals.set(\"urlThingRemoveThing\", urlRouteList.Thing.urlThingRemoveThing);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"pm.globals.set(\"urlThingRemoveThingStateInfo\", urlRouteList.Thing.urlThingRemoveThingStateInfo);\r",
									"//---------------- set url Inquiry --------------//\r",
									"//set global variable to url \"/api/v1/Thing/InquiryThing\"\r",
									"pm.globals.set(\"urlThingInquiryThing\", urlRouteList.Thing.urlThingInquiryThing);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Signin_ --------------//\r",
									"//get global variable to x_ais_OrderRef \"Signin_\"\r",
									"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"var x_ais_OrderRef_CreateThing = pm.globals.get(\"x_ais_OrderRef_CreateThing\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"var x_ais_OrderDesc_CreateThing = pm.globals.get(\"x_ais_OrderDesc_CreateThing\");\r",
									"//get global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"var x_ais_OrderRef_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderRef_CreateThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"var x_ais_OrderDesc_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_CreateThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Control --------------//\r",
									"//get global variable to x_ais_OrderRef \"ControlThing_\"\r",
									"var x_ais_OrderRef_ControlThing = pm.globals.get(\"x_ais_OrderRef_ControlThing\");\r",
									"//------------------------------------------------------------//\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// Signin get token\r",
									"Signin = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSignin = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_Signin + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_UserAuthentication,\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestSignin = {\r",
									"            mode: 'raw',\r",
									"            raw:\r",
									"                JSON.stringify({\r",
									"                    username: Username,\r",
									"                    password: Password\r",
									"                })\r",
									"        };\r",
									"\r",
									"        let optionsSignin = {\r",
									"            url: url + provisioningapis + urlSignin,\r",
									"            method: 'POST',\r",
									"            header: headersOptSignin,\r",
									"            body: httpRequestSignin\r",
									"        };\r",
									"        // console.log('request Signin');\r",
									"        let response = await reqPromise(optionsSignin);\r",
									"        let jsonDataSignin = await response.json();\r",
									"\r",
									"        // setAccessToken\r",
									"        await pm.environment.set(\"AccessToken\", jsonDataSignin.AccessToken);\r",
									"\r",
									"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('Signin : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // SignInProcess is Success\r",
									"        pm.test('Signin : OperationStatus Description is ' + '\"' + resultDescriptionSuccessSignIn + '\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
									"        });\r",
									"\r",
									"        //set random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //set PartnerName\r",
									"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
									"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
									"        //set MerchantContact\r",
									"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
									"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
									"        // set CPID\r",
									"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
									"        pm.environment.set(\"CPID\", CPIDValue)\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreatePartner\r",
									"CreatePartner = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreatePartner = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreatePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreatePartner,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreatePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
									"                \"PartnerType\": [\r",
									"                    \"Supplier\",\r",
									"                    \"Customer\"\r",
									"                ],\r",
									"                \"PartnerDetail\": {\r",
									"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
									"                    \"CPID\": pm.environment.get(\"CPID\")\r",
									"                },\r",
									"                \"Property\": {\r",
									"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreatePartner = {\r",
									"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreatePartner,\r",
									"            body: httpRequestCreatePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsCreatePartner);\r",
									"        let jsonDataCreatePartner = await response.json();\r",
									"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
									"\r",
									"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreatePartner : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreatePartner is Success\r",
									"        pm.test('CreatePartner : OperationStatus Description is ' + '\"' + resultDescriptionCreatePartner + '\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
									"        });\r",
									"\r",
									"        //GetResponse_PartnerId\r",
									"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
									"\r",
									"        //Accountname\r",
									"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
									"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateAccount\r",
									"CreateAccount = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateAccount = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateAccount,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreateAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateAccount = {\r",
									"            url: url + provisioningapis + urlAccountCreateAccount,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateAccount,\r",
									"            body: httpRequestCreateAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateAccount');\r",
									"        let response = await reqPromise(optionsCreateAccount);\r",
									"        let jsonDataCreateAccount = await response.json();\r",
									"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
									"\r",
									"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateAccount : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateAccount is Success\r",
									"        pm.test('CreateAccount : OperationStatus Description is ' + '\"' + resultDescriptionCreateAccount + '\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
									"        });\r",
									"        // GetResponse_AccountName\r",
									"        pm.environment.set(\"GetResponse_AccountName\", jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
									"        // GetResponse_AccountId\r",
									"        pm.environment.set(\"GetResponse_AccountId\", jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
									"        // random_IM\r",
									"        pm.environment.set(\"random_IM\", _.random(10000000, 99999999) + \" \" + _.random(1000000, 9999999))\r",
									"        // random_ICCID\r",
									"        pm.environment.set(\"random_ICCID\", _.random(1000000, 9999999) + \" \" + _.random(100000, 999999))\r",
									"        // random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //ThingName\r",
									"        let thingNameValue = fieldDataValue.Thing.ThingNameValue; // \"Sensor_TestThingName\"\r",
									"        pm.environment.set(\"ThingName\", thingNameValue + pm.environment.get(\"random_number\"))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThing\r",
									"CreateThing = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThing = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateThing + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateThing,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey': pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreateThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingName\": pm.environment.get(\"ThingName\"),\r",
									"                \"IMEI\": pm.environment.get(\"random_IM\"),\r",
									"                \"IMSI\": pm.environment.get(\"random_IM\"),\r",
									"                \"ICCID\": pm.environment.get(\"random_ICCID\"),\r",
									"                \"RouteUrl\": fieldDataValue.Thing.RouteUrlValue , //[\"http://10.12.3.4:2019/api/information/AddInformation\"]\r",
									"                \"RouteInfo\": {\r",
									"                    \"MIMO_ID\": fieldDataValue.Thing.RouteInfoMIMOIDValue , //\"606edada\"\r",
									"                    \"MIMO_SerialNo\": fieldDataValue.Thing.RouteInfoMIMOSerialNoValue //5466758878\r",
									"                },\r",
									"                \"RouteFlag\": {\r",
									"                    \"ThingName\": fieldDataValue.Thing.RouteFlagThingNameValue , //true\r",
									"                    \"ThingToken\": fieldDataValue.Thing.RouteFlagThingTokenValue, //true\r",
									"                    \"IMEI\": fieldDataValue.Thing.RouteFlagIMEIValue, //true\r",
									"                    \"ICCID\": fieldDataValue.Thing.RouteFlagICCIDValue, //true\r",
									"                    \"RouteInfo\": fieldDataValue.Thing.RouteFlagRouteInfoValue //true\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateThing = {\r",
									"            url: url + provisioningapis + urlThingCreateThing,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThing,\r",
									"            body: httpRequestCreateThing\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThing');\r",
									"        let response = await reqPromise(optionsCreateThing);\r",
									"        let jsonDataCreateThing = await response.json();\r",
									"        // console.log('jsonDataCreateThing',jsonDataCreateThing)\r",
									"\r",
									"        let operationStatusCreateThing = await jsonDataCreateThing.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateThing : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateThing : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateThing is Success\r",
									"        pm.test('CreateThing : OperationStatus Description is ' + '\"' + resultDescriptionCreateThing + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Description', resultDescriptionCreateThing);\r",
									"        });\r",
									"\r",
									"        pm.environment.set(\"GetResponse_ThingInfo_ThingToken\", jsonDataCreateThing.ThingInfo.ThingToken)\r",
									"        pm.environment.set(\"GetResponse_ThingID\", jsonDataCreateThing.ThingInfo.ThingId)\r",
									"        pm.environment.set(\"GetResponse_IMSI\", jsonDataCreateThing.ThingInfo.IMSI)\r",
									"        \r",
									"        let keys = pm.environment.get(\"GetResponse_IMSI\") + \":\" + pm.environment.get(\"IpAddress\");\r",
									"        // console.log(\"keys\", keys);\r",
									"        let encodedKeys = CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(keys));\r",
									"        pm.environment.set(\"encodedKeys_Authorization_Register\", encodedKeys);\r",
									"\r",
									"        //Get Random Sensor \r",
									"        pm.environment.set(\"random_Sensor\", _.random(100, 999))\r",
									"\r",
									"        //Get Random Sensor AsgardHTTP\r",
									"        pm.environment.set(\"random_Sensor_AsgardHTTP\", _.random(100, 999))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThingStateInfo\r",
									"CreateThingStateInfo = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThingStateInfo = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateThingStateInfo,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey': pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        // {\"AA\" : pm.environment.get(\"random_Sensor\")}\r",
									"        let sensorValue = {};\r",
									"        sensorValue[fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP] = pm.environment.get(\"random_Sensor\");\r",
									"        // console.log('sensorValue',sensorValue);\r",
									"        \r",
									"        let httpRequestCreateThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": [\r",
									"                    pm.environment.get(\"GetResponse_ThingID\")\r",
									"                ],\r",
									"                \"Type\": fieldDataValue.CreateThingStateInfo.Type_Report,\r",
									"                \"Sensor\": sensorValue\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingCreateThingStateInfo,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThingStateInfo,\r",
									"            body: httpRequestCreateThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThingStateInfo');\r",
									"        let response = await reqPromise(optionsCreateThingStateInfo);\r",
									"        let jsonDataCreateThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataCreateThingStateInfo',jsonDataCreateThingStateInfo)\r",
									"\r",
									"        let operationStatusCreateThingStateInfo = await jsonDataCreateThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"CreateThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //CreateThingStateInfo is Success\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Description is ' + '\"' + resultDescriptionCreateThingStateInfo + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Description', resultDescriptionCreateThingStateInfo);\r",
									"        });\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// ControlThing\r",
									"ControlThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptControlThing = {\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_ControlThing + current_timestamp,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Content-Type':ContentType_ApplicationJson\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        // {\"AA\" : pm.environment.get(\"random_Sensor_AsgardHTTP\")}\r",
									"        let sensorValue = {};\r",
									"        sensorValue[fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP] = pm.environment.get(\"random_Sensor_AsgardHTTP\");\r",
									"        // console.log('sensorValue',sensorValue);\r",
									"\r",
									"        let httpRequestControlThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\"),\r",
									"                \"Sensors\": sensorValue\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsControlThing = {\r",
									"            url: url + controlapis + urlControlThing,\r",
									"            method: 'POST',\r",
									"            header: headersOptControlThing,\r",
									"            body: httpRequestControlThing\r",
									"        };\r",
									"\r",
									"        // console.log('response ControlThing');\r",
									"        let response = await reqPromise(optionsControlThing);\r",
									"        let jsonDataControlThing = await response.json();\r",
									"        // console.log('jsonDataControlThing',jsonDataControlThing)\r",
									"    \r",
									"        let operationStatusControlThing = await jsonDataControlThing.operationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"ControlThing : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('ControlThing : OperationStatus code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusControlThing).to.have.property('code', resultCodeSuccess);\r",
									"        });\r",
									"        //ControlOneThing is Success\r",
									"        pm.test('ControlThing : OperationStatus description is '+'\"'+ resultDescriptionSuccessControlOneThing+'\"', function () {\r",
									"            pm.expect(operationStatusControlThing).to.have.property('description', resultDescriptionSuccessControlOneThing);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"Signin();\r",
									"setTimeout(async function(){await CreatePartner();}, 3000); \r",
									"setTimeout(async function(){await CreateAccount();}, 6000); \r",
									"setTimeout(async function(){await CreateThing();}, 8000); \r",
									"setTimeout(async function(){await CreateThingStateInfo();}, 9000); \r",
									"setTimeout(async function(){await ControlThing();}, 10000); \r",
									"setTimeout(async function(){}, 20000); //for wait"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-ais-UserName",
								"value": "{{x_ais_UserName_AisPartner}}",
								"type": "text"
							},
							{
								"key": "x-ais-OrderRef",
								"value": "{{x_ais_OrderRef_RegisHTTP}}{{current_timestamp}}"
							},
							{
								"key": "x-ais-OrderDesc",
								"value": "{{x_ais_OrderDesc_RegisHTTP}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{Basic}} {{encodedKeys_Authorization_Register}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}{{httpapis}}/api/register/sim/v1",
							"host": [
								"{{url}}{{httpapis}}"
							],
							"path": [
								"api",
								"register",
								"sim",
								"v1"
							]
						},
						"description": "Type:Desire"
					},
					"response": []
				},
				{
					"name": "AsgardHTTPeSimRegister_TST_F4_0_2_002_Error_CouldNotBeFound",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var Basic = pm.environment.get(\"Basic\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to xAisOrderRef \"RemoveThing_\"\r",
									"var x_ais_OrderRef_RemoveThing = pm.globals.get(\"x_ais_OrderRef_RemoveThing\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"var x_ais_OrderDesc_RemoveThing = pm.globals.get(\"x_ais_OrderDesc_RemoveThing\");\r",
									"//get global variable to xAisOrderRef \"RemoveThingStateInfo_\"\r",
									"var x_ais_OrderRef_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderRef_RemoveThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThingStateInfo\"\r",
									"var x_ais_OrderDesc_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_RemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals AsgardHTTP --------------//\r",
									"//get global variable to x_ais_OrderRef \"RegisHTTP_\"\r",
									"var x_ais_OrderRef_RegisHTTP = pm.globals.get(\"x_ais_OrderRef_RegisHTTP\");\r",
									"//get global variable to x_ais_OrderRef \"RegisHTTPfail_\"\r",
									"var x_ais_OrderRef_RegisHTTP_fail = pm.globals.get(\"x_ais_OrderRef_RegisHTTP_fail\");\r",
									"//get global variable to x_ais_OrderDesc \"Register Thing in MG\"\r",
									"var x_ais_OrderDesc_RegisHTTP = pm.globals.get(\"x_ais_OrderDesc_RegisHTTP\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get url Remove --------------//\r",
									"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
									"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"var urlThingRemoveThing = pm.globals.get(\"urlThingRemoveThing\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"var urlThingRemoveThingStateInfo = pm.globals.get(\"urlThingRemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"RemovePartner is Success\"\r",
									"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
									"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
									"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
									"//get global variable to resultDescription \"RemoveThing is Success\"\r",
									"var resultDescriptionRemoveThing = pm.globals.get(\"resultDescriptionRemoveThing\");\r",
									"//get global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"var resultDescriptionRemoveThingStateInfo = pm.globals.get(\"resultDescriptionRemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 404\r",
									"var statusCodeNotFound = pm.globals.get(\"statusCodeNotFound\");\r",
									"//get global variable to resultCode \"40400\"\r",
									"var resultCodeNotFound = pm.globals.get(\"resultCodeNotFound\");\r",
									"//get global variable to resultDescription \"The requested operation could not be found.\"\r",
									"var resultDescriptionTheRequestedOperationCouldNotBeFound = pm.globals.get(\"resultDescriptionTheRequestedOperationCouldNotBeFound\");\r",
									"//------------------------------------------------------------//\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Asgard HTTP(eSim) Register : Status code is \" + statusCodeNotFound, function () {\r",
									"    pm.response.to.have.status(statusCodeNotFound);\r",
									"});\r",
									"\r",
									"pm.test('Asgard HTTP(eSim) Register : operationStatus code is '+'\"'+ resultCodeNotFound +'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeNotFound);\r",
									"});\r",
									"\r",
									"pm.test('Asgard HTTP(eSim) Register : operationStatus DeveloperMessage is '+'\"'+ resultDescriptionTheRequestedOperationCouldNotBeFound+'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheRequestedOperationCouldNotBeFound);\r",
									"});\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// RemovePartner\r",
									" RemovePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemovePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemovePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemovePartner = {\r",
									"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemovePartner,\r",
									"            body: httpRequestRemovePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request RemovePartner');\r",
									"        let response = await reqPromise(optionsRemovePartner);\r",
									"        let jsonDataRemovePartner = await response.json();\r",
									"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
									"    \r",
									"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemovePartner is Success\r",
									"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveAccount\r",
									" RemoveAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemoveAccount = {\r",
									"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveAccount,\r",
									"            body: httpRequestRemoveAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveAccount');\r",
									"        let response = await reqPromise(optionsRemoveAccount);\r",
									"        let jsonDataRemoveAccount = await response.json();\r",
									"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
									"    \r",
									"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveAccount is Success\r",
									"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThing\r",
									" RemoveThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThing = {\r",
									"            url: url + provisioningapis + urlThingRemoveThing,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThing,\r",
									"            body: httpRequestRemoveThing\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveThing');\r",
									"        let response = await reqPromise(optionsRemoveThing);\r",
									"        let jsonDataRemoveThing = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThing)\r",
									"    \r",
									"        let operationStatusRemoveThing = await jsonDataRemoveThing.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThing : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThing : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThing is Success\r",
									"        pm.test('RemoveThing : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThing+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Description', resultDescriptionRemoveThing);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThingStateInfo\r",
									" RemoveThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"            \r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\"),\r",
									"                \"stateType\": fieldDataValue.CreateThingStateInfo.Type_Report, //Report\r",
									"                \"stateKey\": fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP //AA\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingRemoveThingStateInfo,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThingStateInfo,\r",
									"            body: httpRequestRemoveThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('response RemoveThingStateInfo');\r",
									"        let response = await reqPromise(optionsRemoveThingStateInfo);\r",
									"        let jsonDataRemoveThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThingStateInfo)\r",
									"    \r",
									"        let operationStatusRemoveThingStateInfo = await jsonDataRemoveThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThingStateInfo is Success\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThingStateInfo+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Description', resultDescriptionRemoveThingStateInfo);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"//---------------- LogDefaultValue --------------//\r",
									"//set variable to LogDefaultValue JSON.parse\r",
									"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
									"// console.log('LogDefaultValue',LogDefaultValue);\r",
									"//---------------- set globals Other --------------//\r",
									"\r",
									"var SearchLog = LogDefaultValue.SearchLog;\r",
									"// console.log('SearchLog',SearchLog);\r",
									"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
									"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
									"var kbn_version = SearchLog.header.kbn_version;\r",
									"var authorization = SearchLog.header.Authorization;\r",
									"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
									"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
									"var namespace = LogDefaultValue.Other.namespace;\r",
									"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
									"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
									"var header_x_ais_username = LogDefaultValue.Other.header_x_ais_username;\r",
									"var methodPost = LogDefaultValue.Other.methodPost;\r",
									"\r",
									"// Detail\r",
									"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
									"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
									"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
									"\r",
									"// Summary\r",
									"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
									"\r",
									"// Asgard.Http.APIs\r",
									"var applicationName = LogDefaultValue.AsgardHTTP.applicationName;\r",
									"var cmdName = LogDefaultValue.AsgardHTTP.cmdNameRegister;\r",
									"var containerId = LogDefaultValue.AsgardHTTP.containerId;\r",
									"var requestObjectUrlStaging = LogDefaultValue.AsgardHTTP.requestObjectUrlRegisterMgStaging;\r",
									"var urlRegister = LogDefaultValue.AsgardHTTP.urlRegister;\r",
									"\r",
									"// Check CDR (Summary Log) and EDR (Detail Log)\r",
									"SearchLogFindTid = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSearchLogFindTid = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = x_ais_OrderRef_RegisHTTP_fail + current_timestamp; \r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestSearchLogFindTid = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"phrase\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"\r",
									"        let optionsSearchLogFindTid = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptSearchLogFindTid,\r",
									"            body: httpRequestSearchLogFindTid\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsSearchLogFindTid);\r",
									"        let jsonDataSearchLogFindTid = await response.json();\r",
									"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
									"        // console.log('hits',hits)\r",
									"  \r",
									"        // find tid\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            // let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"        \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            if(applicationNameValue == applicationName){\r",
									"                let tid = hits[i]._source.cauldron.tid;\r",
									"                pm.environment.set(\"tid\", tid);\r",
									"                break;\r",
									"           }\r",
									"        }\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"CheckLog = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCheckLog = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = pm.environment.get(\"tid\");\r",
									"\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        // console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestCheckLog = {\r",
									"            mode: 'raw',\r",
									"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"phrase\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"        let optionsCheckLog = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptCheckLog,\r",
									"            body: httpRequestCheckLog\r",
									"        }; \r",
									"        let response = await reqPromise(optionsCheckLog);\r",
									"        let jsonDataCheckLog = await response.json();\r",
									"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
									"        \r",
									"        // //200\r",
									"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });     \r",
									"        \r",
									"        let hits = jsonDataCheckLog.hits.hits\r",
									"        console.log('hits',hits)\r",
									"  \r",
									"        // find logType\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            //  let logType = hits[i]._source.cauldron.logType\r",
									"            let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"           \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            \r",
									"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
									"            // console.log('resultDataLog',resultDataLog)\r",
									"\r",
									"            let tidControl = x_ais_OrderRef_RegisHTTP_fail  + current_timestamp;\r",
									"            // console.log(tidControl);\r",
									"            if(applicationNameValue == applicationName){\r",
									"                 \r",
									"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and Asgard.Http.APIs\r",
									"                    pm.test(\"Check Summary Log : Asgard_HTTP(eSim) Register\" , function () {\r",
									"                        console.log(\"======== Check Summary Log ( Expected = Actual) [Asgard_HTTP(eSim) Register] ==================\");\r",
									"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
									"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
									"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeNotFound);\r",
									"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionTheRequestedOperationCouldNotBeFound);\r",
									"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
									"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        // console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
									"                        // console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
									"\r",
									"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
									"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
									"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeNotFound); \r",
									"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionTheRequestedOperationCouldNotBeFound); \r",
									"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
									"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"\r",
									"                        let thingId = null;\r",
									"                        let imei = null;\r",
									"                        let imsi = (pm.environment.get(\"GetResponse_IMSI\")).replace(\" \", \"\") + fieldDataValue.AsgardHTTP.Value_AsgardHTTPeSim_Register_TST_F4_0_2_002_Error;\r",
									"                        let customUrl= urlCheckLog + requestObjectUrlStaging;\r",
									"\r",
									"                        // check identity\r",
									"                        // \"identity\":\"{\\\"Imei\\\":\\\"null\\\",\\\"ThingId\\\":\\\"null\\\",\\\"Imsi\\\":\\\"496151103122639xx\\\"}\"\r",
									"                        let dataSummaryIdentity = JSON.parse(resultDataLog.identity);\r",
									"\r",
									"                        console.log(\"identity.ThingId : \" + dataSummaryIdentity.ThingId + \" = \" + thingId);\r",
									"                        console.log(\"identity.Imei : \" + dataSummaryIdentity.Imei + \" = \" + imei);\r",
									"                        console.log(\"identity.Imsi : \" + dataSummaryIdentity.Imsi + \" = \" + imsi);\r",
									"\r",
									"                        pm.expect(dataSummaryIdentity.ThingId).to.eql(thingId); \r",
									"                        pm.expect(dataSummaryIdentity.Imei).to.eql(imei); \r",
									"                        pm.expect(dataSummaryIdentity.Imsi).to.eql(imsi); \r",
									"\r",
									"                        // check custom\r",
									"                        // \\\"custom\\\":{ \\\"customData\\\":{ \\\"Imsi\\\":[ \\\"243524602138015xx\\\" ], \\\"url\\\":\\\"mg-iot.sandais.com/api/register/sim/v1\\\", \\\"Imei\\\":null, \\\"ThingId\\\":null }, \\\"endPointSummary\\\":[ { \\\"no\\\":\\\"1\\\", \\\"endPointName\\\":\\\"db.ThingsCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:Inquiry was Success\\\", \\\"processTime\\\":0.0018 } ] }\r",
									"\r",
									"                        let customData = resultDataLog.custom.customData\r",
									"\r",
									"                        console.log(\"custom.url : \" + customData.url + \" = \" + customUrl);\r",
									"                        console.log(\"custom.Imei : \" + customData.Imei + \" = \" + imei);\r",
									"                        console.log(\"custom.Imsi[0] : \" + customData.Imsi[0] + \" = \" + imsi);\r",
									"                        console.log(\"custom.ThingId : \" + customData.ThingId + \" = \" + thingId);\r",
									"\r",
									"                        pm.expect(customData.url).to.eql(customUrl); \r",
									"                        pm.expect(customData.Imei).to.eql(imei); \r",
									"                        pm.expect(customData.Imsi[0]).to.eql(imsi); \r",
									"                        pm.expect(customData.ThingId).to.eql(thingId); \r",
									"\r",
									"                        let custom = resultDataLog.custom.endPointSummary;\r",
									"                        let countCustom = custom.length;\r",
									"                       \r",
									"                        // [\"db.ThingsCollection\"]\r",
									"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_Asgard_HTTP_eSim_Register_002_004_005_006;\r",
									"                        // [\"20000:Inquiry was Success\"]\r",
									"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_Asgard_HTTP_eSim_Register_002_004_005_006;\r",
									"                        let countCustomStep = dataEndPointName.length;\r",
									"\r",
									"                        console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep);\r",
									"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
									"                        \r",
									"                        for(let i=0;i<countCustomStep;i++){\r",
									"                            let no = custom[i].no;\r",
									"                            let valueEndPointName = custom[i].endPointName;\r",
									"                            let valueResponseStatus = custom[i].responseStatus;\r",
									"                            // console.log(\"i\",i);\r",
									"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
									"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
									"\r",
									"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString());\r",
									"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i]);\r",
									"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i]);\r",
									"\r",
									"                            pm.expect(no).to.eql((i+1).toString()); \r",
									"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
									"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]); \r",
									"                        }\r",
									"                    }); \r",
									"                }\r",
									"\r",
									"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and Asgard.Http.APIs\r",
									"\r",
									"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
									"                    // console.log('endPointNameValue ',endPointNameValue)\r",
									"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [Asgard_HTTP(eSim) Register]\", function () {\r",
									"                        console.log(\"======== Check Detail Log ( Expected = Actual) [Asgard_HTTP(eSim) Register] ==================\");\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
									"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
									"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
									"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.custom1.activityLog.processTime + \" = \" + resultDataLog.custom1.activityLog.processTime);\r",
									"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
									"\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
									"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
									"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
									"\r",
									"                        if( endPointNameValue == undefined){\r",
									"                            // check requestObject\r",
									"                            // \"requestObject\":\"{\\\"url\\\":\\\"/api/register/sim/v1\\\",\\\"method\\\":\\\"POST\\\",\\\"headers\\\":{\\\"Cache-Control\\\":\\\"no-cache\\\",\\\"Content-Type\\\":\\\"application/json\\\",\\\"Accept\\\":\\\"*/*\\\",\\\"Accept-Encoding\\\":\\\"gzip,deflate,br\\\",\\\"Authorization\\\":\\\"Basic NDk2MTUxMTAzMTIyNjM5OjEuMi4zLjQ=\\\",\\\"Host\\\":\\\"mg-staging.sandais.com\\\",\\\"User-Agent\\\":\\\"PostmanRuntime/7.26.8\\\",\\\"Content-Length\\\":\\\"2\\\",\\\"x-real-ip\\\":\\\"171.96.174.10\\\",\\\"x-forwarded-for\\\":\\\"171.96.174.10\\\",\\\"x-forwarded-proto\\\":\\\"https\\\",\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"RegisHTTP_202101291201997\\\",\\\"x-ais-orderdesc\\\":\\\"Register Thing in MG\\\",\\\"postman-token\\\":\\\"83bc76b4-8538-4a10-94fc-8b9cc1143ec8\\\",\\\"x-request-id\\\":\\\"bbf6c560-8bea-4d53-87d8-28a3f3664d37\\\",\\\"x-b3-traceid\\\":\\\"eb252eaef48d4ec507b32acd0a8dc573\\\",\\\"x-b3-spanid\\\":\\\"07b32acd0a8dc573\\\",\\\"x-b3-sampled\\\":\\\"0\\\",\\\"x-ais-SessionId\\\":\\\"1611896410502\\\",\\\"identity\\\":\\\"{\\\\\\\"Imei\\\\\\\":null,\\\\\\\"ThingId\\\\\\\":null,\\\\\\\"Imsi\\\\\\\":\\\\\\\"496151103122639xx\\\\\\\"}\\\",\\\"custom\\\":\\\"{\\\\\\\"Imsi\\\\\\\":[\\\\\\\"496151103122639xx\\\\\\\"],\\\\\\\"url\\\\\\\":\\\\\\\"mg-staging.sandais.com/api/register/sim/v1\\\\\\\",\\\\\\\"Imei\\\\\\\":null,\\\\\\\"ThingId\\\\\\\":null}\\\"},\\\"queryString\\\":{},\\\"routeParamteters\\\":{},\\\"body\\\":{}}\"\r",
									"\r",
									"                            // \\\"requestObject\\\":\\\"{ \\\\\\\"url\\\\\\\":\\\\\\\"/api/register/sim/v1\\\\\\\", \\\\\\\"method\\\\\\\":\\\\\\\"POST\\\\\\\", \\\\\\\"headers\\\\\\\":{ \\\\\\\"Cache-Control\\\\\\\":\\\\\\\"no-cache\\\\\\\", \\\\\\\"Content-Type\\\\\\\":\\\\\\\"application/json\\\\\\\", \\\\\\\"Accept\\\\\\\":\\\\\\\"*/*\\\\\\\", \\\\\\\"Accept-Encoding\\\\\\\":\\\\\\\"gzip, deflate, br\\\\\\\", \\\\\\\"Authorization\\\\\\\":\\\\\\\"Basic NjI2ODA3Mzg3OTQ3MDkzeHg6MS4yLjMuNA==\\\\\\\", \\\\\\\"Host\\\\\\\":\\\\\\\"mg-iot.sandais.com\\\\\\\", \\\\\\\"User-Agent\\\\\\\":\\\\\\\"PostmanRuntime/7.26.8\\\\\\\", \\\\\\\"Content-Length\\\\\\\":\\\\\\\"2\\\\\\\", \\\\\\\"x-real-ip\\\\\\\":\\\\\\\"182.232.183.255\\\\\\\", \\\\\\\"x-forwarded-for\\\\\\\":\\\\\\\"182.232.183.255, 10.233.68.0\\\\\\\", \\\\\\\"x-forwarded-proto\\\\\\\":\\\\\\\"http\\\\\\\", \\\\\\\"x-ais-username\\\\\\\":\\\\\\\"AisPartner\\\\\\\", \\\\\\\"x-ais-orderref\\\\\\\":\\\\\\\"RegisHTTPfail_202105112305633\\\\\\\", \\\\\\\"x-ais-orderdesc\\\\\\\":\\\\\\\"Register Thing in MG\\\\\\\", \\\\\\\"postman-token\\\\\\\":\\\\\\\"ec24155d-036c-42c7-b471-f7260a548d35\\\\\\\", \\\\\\\"x-envoy-external-address\\\\\\\":\\\\\\\"10.233.68.0\\\\\\\", \\\\\\\"x-request-id\\\\\\\":\\\\\\\"10b784e7-3109-4876-b2e7-c79e86065871\\\\\\\", \\\\\\\"x-envoy-original-path\\\\\\\":\\\\\\\"/httpapis/api/register/sim/v1\\\\\\\", \\\\\\\"x-b3-traceid\\\\\\\":\\\\\\\"c57af100b4ef97c2a6ff276bfe38aa9b\\\\\\\", \\\\\\\"x-b3-spanid\\\\\\\":\\\\\\\"72fdc9da9a35de24\\\\\\\", \\\\\\\"x-b3-parentspanid\\\\\\\":\\\\\\\"a6ff276bfe38aa9b\\\\\\\", \\\\\\\"x-b3-sampled\\\\\\\":\\\\\\\"0\\\\\\\", \\\\\\\"x-ais-SessionId\\\\\\\":\\\\\\\"1620749565350\\\\\\\", \\\\\\\"identity\\\\\\\":\\\\\\\"{ \\\\\\\\\\\\\\\"Imei\\\\\\\\\\\\\\\":null, \\\\\\\\\\\\\\\"ThingId\\\\\\\\\\\\\\\":null, \\\\\\\\\\\\\\\"Imsi\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"626807387947093xx\\\\\\\\\\\\\\\" }\\\\\\\", \\\\\\\"custom\\\\\\\":\\\\\\\"{ \\\\\\\\\\\\\\\"Imsi\\\\\\\\\\\\\\\":[ \\\\\\\\\\\\\\\"626807387947093xx\\\\\\\\\\\\\\\" ], \\\\\\\\\\\\\\\"url\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"mg-iot.sandais.com/api/register/sim/v1\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Imei\\\\\\\\\\\\\\\":null, \\\\\\\\\\\\\\\"ThingId\\\\\\\\\\\\\\\":null }\\\\\\\" }, \\\\\\\"queryString\\\\\\\":{ }, \\\\\\\"routeParamteters\\\\\\\":{ }, \\\\\\\"body\\\\\\\":{ } }\\\"\r",
									"\r",
									"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
									"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
									"\r",
									"                            let url = urlRegister; \r",
									"                            let x_ais_orderref = x_ais_OrderRef_RegisHTTP_fail + current_timestamp;\r",
									"                            let x_ais_orderdesc = x_ais_OrderDesc_RegisHTTP;\r",
									"                            let x_ais_userName = x_ais_UserName_AisPartner;\r",
									"                            let authorization = Basic + ' ' + pm.environment.get(\"encodedKeys_Authorization_Register\");\r",
									"                            let imei = null;\r",
									"                            let imsi = (pm.environment.get(\"GetResponse_IMSI\")).replace(\" \", \"\") + fieldDataValue.AsgardHTTP.Value_AsgardHTTPeSim_Register_TST_F4_0_2_002_Error;\r",
									"                            let thingId = null;\r",
									"                            let customUrl= urlCheckLog + requestObjectUrlStaging;\r",
									"\r",
									"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
									"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
									"                            console.log(\"headers.x_ais_userName : \" + jsonParseRequestObject.headers[header_x_ais_username] + \" = \" + x_ais_userName);\r",
									"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
									"                            console.log(\"headers.Authorization : \" + jsonParseRequestObject.headers.Authorization + \" = \" + authorization);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
									"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_username]).to.eql(x_ais_userName);\r",
									"                            pm.expect(jsonParseRequestObject.headers.Authorization).to.eql(authorization);\r",
									"\r",
									"                            // check requestObject headers.identity\r",
									"                            let jsonParseRequestObjectHeadersIdentity = JSON.parse(jsonParseRequestObject.headers.identity);\r",
									"                            // console.log('jsonParseRequestObjectHeadersIdentity',jsonParseRequestObjectHeadersIdentity);\r",
									"\r",
									"                            console.log(\"headers.identity.Imei : \" + jsonParseRequestObjectHeadersIdentity.Imei + \" = \" + imei);\r",
									"                            console.log(\"headers.identity.Imsi : \" + jsonParseRequestObjectHeadersIdentity.Imsi + \" = \" + imsi);\r",
									"                            console.log(\"headers.identity.ThingId : \" + jsonParseRequestObjectHeadersIdentity.ThingId + \" = \" + thingId);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObjectHeadersIdentity.Imei).to.eql(imei);\r",
									"                            pm.expect(jsonParseRequestObjectHeadersIdentity.Imsi).to.eql(imsi);\r",
									"                            pm.expect(jsonParseRequestObjectHeadersIdentity.ThingId).to.eql(thingId);\r",
									"\r",
									"                            // check requestObject headers.custom\r",
									"                            let jsonParseRequestObjectHeadersCustom = JSON.parse(jsonParseRequestObject.headers.custom);\r",
									"                            // console.log('jsonParseRequestObjectHeadersCustom',jsonParseRequestObjectHeadersCustom);\r",
									"\r",
									"                            console.log(\"headers.custom.url : \" + jsonParseRequestObjectHeadersCustom.url + \" = \" + customUrl);\r",
									"                            console.log(\"headers.custom.Imei : \" + jsonParseRequestObjectHeadersCustom.Imei + \" = \" + imei);\r",
									"                            console.log(\"headers.custom.Imsi[0] : \" + jsonParseRequestObjectHeadersCustom.Imsi[0] + \" = \" + imsi);\r",
									"                            console.log(\"headers.custom.ThingId : \" + jsonParseRequestObjectHeadersCustom.ThingId + \" = \" + thingId);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObjectHeadersCustom.url).to.eql(customUrl);\r",
									"                            pm.expect(jsonParseRequestObjectHeadersCustom.Imei).to.eql(imei);\r",
									"                            pm.expect(jsonParseRequestObjectHeadersCustom.Imsi[0]).to.eql(imsi);\r",
									"                            pm.expect(jsonParseRequestObjectHeadersCustom.ThingId).to.eql(thingId);\r",
									"\r",
									"                            console.log(\"queryString : \" + JSON.stringify(jsonParseRequestObject.queryString) + \" = \" + JSON.stringify({}));\r",
									"                            console.log(\"routeParamteters : \" + JSON.stringify(jsonParseRequestObject.routeParamteters) + \" = \" + JSON.stringify({}));\r",
									"                            console.log(\"body : \" + JSON.stringify(jsonParseRequestObject.body) + \" = \" + JSON.stringify({}));\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.queryString).to.eql({}); \r",
									"                            pm.expect(jsonParseRequestObject.routeParamteters).to.eql({}); \r",
									"                            pm.expect(jsonParseRequestObject.body).to.eql({}); \r",
									"\r",
									"                            // check responseObject\r",
									"                            // responseObject: \"{\"OperationStatus\":{\"Code\":\"40400\",\"DeveloperMessage\":\"The requested operation could not be found.\"}}\"\r",
									"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
									"                            // console.log('jsonParseResponseObject',jsonParseResponseObject); \r",
									"\r",
									"                            console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeNotFound);\r",
									"                            console.log(\"response.OperationStatus.DeveloperMessage : \" + jsonParseResponseObject.OperationStatus.DeveloperMessage + \" = \" + resultDescriptionTheRequestedOperationCouldNotBeFound); \r",
									"\r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeNotFound);  \r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheRequestedOperationCouldNotBeFound);  \r",
									"                        }\r",
									"                    }); \r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"setTimeout(function(){SearchLogFindTid();}, 30000); \r",
									"setTimeout(function(){CheckLog();}, 50000); \r",
									"\r",
									"setTimeout(function(){RemoveThingStateInfo();}, 70000); \r",
									"setTimeout(function(){RemoveThing();}, 80000); \r",
									"setTimeout(function(){RemoveAccount();}, 90000); \r",
									"setTimeout(function(){RemovePartner();}, 100000); \r",
									"\r",
									"setTimeout(function(){\r",
									"pm.environment.unset(\"current_timestamp\");\r",
									"pm.environment.unset(\"AccessToken\");\r",
									"pm.environment.unset(\"random_number\");\r",
									"pm.environment.unset(\"PartnerName\");\r",
									"pm.environment.unset(\"MerchantContact\");\r",
									"pm.environment.unset(\"CPID\");\r",
									"pm.environment.unset(\"GetResponse_PartnerId\");\r",
									"pm.environment.unset(\"AccountName\");\r",
									"pm.environment.unset(\"GetResponse_ThingInfo_ThingToken\");\r",
									"pm.environment.unset(\"GetResponse_AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountId\");\r",
									"pm.environment.unset(\"random_IM\");\r",
									"pm.environment.unset(\"random_ICCID\");\r",
									"pm.environment.unset(\"ThingName\");\r",
									"pm.environment.unset(\"GetResponse_ThingID\");\r",
									"pm.environment.unset(\"GetResponse_IMSI\");\r",
									"pm.environment.unset(\"encodedKeys_Authorization_Register\");\r",
									"pm.environment.unset(\"random_Sensor\");\r",
									"pm.environment.unset(\"random_Sensor_AsgardHTTP\");\r",
									"pm.environment.unset(\"tid\");\r",
									"}, 105000); \r",
									"setTimeout(async function(){}, 110000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var Username = pm.environment.get(\"Username\");\r",
									"var Password = pm.environment.get(\"Password\");\r",
									"\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"var controlapis = pm.environment.get(\"controlapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"//format YYYYMMDDHHMMSSS\r",
									"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
									"// console.log('currentTmestamp',currentTmestamp);\r",
									"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- statusCodeList --------------//\r",
									"//set variable to statusCodeList JSON.parse\r",
									"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
									"//set global variable to statusCode 200\r",
									"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
									"//set global variable to statusCode 201\r",
									"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
									"//set global variable to statusCode 404\r",
									"pm.globals.set(\"statusCodeNotFound\", statusCodeList.statusCodeNotFound);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultCodeList --------------//\r",
									"//set variable to resultCodeList JSON.parse\r",
									"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
									"//set global variable to resultCode \"20000\"\r",
									"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
									"//set global variable to resultCode \"20100\"\r",
									"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
									"//set global variable to resultCode \"40400\"\r",
									"pm.globals.set(\"resultCodeNotFound\", resultCodeList.resultCodeNotFound);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionSuccessList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
									"//set global variable to resultDescription \"SignInProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
									"//set global variable to resultDescription \"CreatePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
									"//set global variable to resultDescription \"CreateAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
									"//set global variable to resultDescription \"CreateThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThing\", resultDescriptionSuccessList.resultDescriptionCreateThing);\r",
									"//set global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThingStateInfo\", resultDescriptionSuccessList.resultDescriptionCreateThingStateInfo);\r",
									"//set global variable to resultDescription \"RemovePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
									"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
									"//set global variable to resultDescription \"RemoveThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThing\", resultDescriptionSuccessList.resultDescriptionRemoveThing);\r",
									"//set global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThingStateInfo\", resultDescriptionSuccessList.resultDescriptionRemoveThingStateInfo);\r",
									"//set global variable to resultDescription \"ControlOneThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessControlOneThing\", resultDescriptionSuccessList.resultDescriptionSuccessControlOneThing);\r",
									"//set global variable to resultDescription \"Register is Success\"\r",
									"pm.globals.set(\"resultDescriptionRegisterIsSuccess\", resultDescriptionSuccessList.resultDescriptionRegisterIsSuccess);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionErrorList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
									"//set global variable to resultDescription \"The requested operation could not be found.\"\r",
									"pm.globals.set(\"resultDescriptionTheRequestedOperationCouldNotBeFound\", resultDescriptionErrorList.resultDescriptionTheRequestedOperationCouldNotBeFound);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- HeaderList --------------//\r",
									"//set variable to HeaderList JSON.parse\r",
									"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
									"//---------------- set globals Other --------------//\r",
									"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
									"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
									"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
									"//set global variable to kbn-versio \"7.5.1\"\r",
									"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Signin_ --------------//\r",
									"//set global variable to x_ais_OrderRef \"Signin_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreatePartner --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
									"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
									"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
									"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreateAccount --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
									"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
									"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Thing --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThing\", HeaderList.Thing.x_ais_OrderRef_CreateThing);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThing\", HeaderList.Thing.x_ais_OrderDesc_CreateThing);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThing\", HeaderList.Thing.x_ais_OrderRef_RemoveThing);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThing\", HeaderList.Thing.x_ais_OrderDesc_RemoveThing);\r",
									"//set global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_RemoveThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_RemoveThingStateInfo);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Control --------------//\r",
									"//set global variable to x_ais_OrderRef \"ControlThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ControlThing\", HeaderList.Control.x_ais_OrderRef_ControlThing);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals AsgardHTTP --------------//\r",
									"//set global variable to x_ais_OrderRef \"RegisHTTP_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RegisHTTP\", HeaderList.AsgardHTTP.x_ais_OrderRef_RegisHTTP);\r",
									"//set global variable to x_ais_OrderRef \"RegisHTTPfail_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RegisHTTP_fail\", HeaderList.AsgardHTTP.x_ais_OrderRef_RegisHTTP_fail);\r",
									"//set global variable to x_ais_OrderDesc \"Register Thing in MG\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RegisHTTP\", HeaderList.AsgardHTTP.x_ais_OrderDesc_RegisHTTP);\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"SignInProcess is Success\"\r",
									"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
									"//get global variable to resultDescription \"CreatePartner is Success\"\r",
									"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
									"//get global variable to resultDescription \"CreateAccount is Success\"\r",
									"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
									"//get global variable to resultDescription \"CreateThing is Success\"\r",
									"var resultDescriptionCreateThing = pm.globals.get(\"resultDescriptionCreateThing\");\r",
									"//get global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"var resultDescriptionCreateThingStateInfo = pm.globals.get(\"resultDescriptionCreateThingStateInfo\");\r",
									"//get global variable to resultDescription \"ControlOneThing is Success\"\r",
									"var resultDescriptionSuccessControlOneThing = pm.globals.get(\"resultDescriptionSuccessControlOneThing\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- urlRouteList --------------//\r",
									"//set variable to urlRouteList JSON.parse\r",
									"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
									"//---------------- set url Create --------------//\r",
									"//set global variable to url \"/api/v1/auth/signin\"\r",
									"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
									"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
									"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"pm.globals.set(\"urlThingCreateThing\", urlRouteList.Thing.urlThingCreateThing);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"pm.globals.set(\"urlThingCreateThingStateInfo\", urlRouteList.Thing.urlThingCreateThingStateInfo);\r",
									"//set global variable to url \"/api/v1/Control/Thing\"\r",
									"pm.globals.set(\"urlControlThing\", urlRouteList.Control.urlControlThing);\r",
									"//---------------- get url Create --------------//\r",
									"//get global variable to url \"/api/v1/auth/signin\"\r",
									"var urlSignin = pm.globals.get(\"urlSignin\");\r",
									"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
									"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"var urlThingCreateThing = pm.globals.get(\"urlThingCreateThing\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"var urlThingCreateThingStateInfo = pm.globals.get(\"urlThingCreateThingStateInfo\");\r",
									"//get global variable to url \"/api/v1/Control/Thing\"\r",
									"var urlControlThing = pm.globals.get(\"urlControlThing\");\r",
									"//---------------- set url Remove --------------//\r",
									"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
									"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"pm.globals.set(\"urlThingRemoveThing\", urlRouteList.Thing.urlThingRemoveThing);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"pm.globals.set(\"urlThingRemoveThingStateInfo\", urlRouteList.Thing.urlThingRemoveThingStateInfo);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Signin_ --------------//\r",
									"//get global variable to x_ais_OrderRef \"Signin_\"\r",
									"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"var x_ais_OrderRef_CreateThing = pm.globals.get(\"x_ais_OrderRef_CreateThing\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"var x_ais_OrderDesc_CreateThing = pm.globals.get(\"x_ais_OrderDesc_CreateThing\");\r",
									"//get global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"var x_ais_OrderRef_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderRef_CreateThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"var x_ais_OrderDesc_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_CreateThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Control --------------//\r",
									"//get global variable to x_ais_OrderRef \"ControlThing_\"\r",
									"var x_ais_OrderRef_ControlThing = pm.globals.get(\"x_ais_OrderRef_ControlThing\");\r",
									"//------------------------------------------------------------//\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// Signin get token\r",
									"Signin = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSignin = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_Signin + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_UserAuthentication,\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestSignin = {\r",
									"            mode: 'raw',\r",
									"            raw:\r",
									"                JSON.stringify({\r",
									"                    username: Username,\r",
									"                    password: Password\r",
									"                })\r",
									"        };\r",
									"\r",
									"        let optionsSignin = {\r",
									"            url: url + provisioningapis + urlSignin,\r",
									"            method: 'POST',\r",
									"            header: headersOptSignin,\r",
									"            body: httpRequestSignin\r",
									"        };\r",
									"        // console.log('request Signin');\r",
									"        let response = await reqPromise(optionsSignin);\r",
									"        let jsonDataSignin = await response.json();\r",
									"\r",
									"        // setAccessToken\r",
									"        await pm.environment.set(\"AccessToken\", jsonDataSignin.AccessToken);\r",
									"\r",
									"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('Signin : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // SignInProcess is Success\r",
									"        pm.test('Signin : OperationStatus Description is ' + '\"' + resultDescriptionSuccessSignIn + '\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
									"        });\r",
									"\r",
									"        //set random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //set PartnerName\r",
									"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
									"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
									"        //set MerchantContact\r",
									"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
									"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
									"        // set CPID\r",
									"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
									"        pm.environment.set(\"CPID\", CPIDValue)\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreatePartner\r",
									"CreatePartner = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreatePartner = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreatePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreatePartner,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreatePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
									"                \"PartnerType\": [\r",
									"                    \"Supplier\",\r",
									"                    \"Customer\"\r",
									"                ],\r",
									"                \"PartnerDetail\": {\r",
									"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
									"                    \"CPID\": pm.environment.get(\"CPID\")\r",
									"                },\r",
									"                \"Property\": {\r",
									"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreatePartner = {\r",
									"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreatePartner,\r",
									"            body: httpRequestCreatePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsCreatePartner);\r",
									"        let jsonDataCreatePartner = await response.json();\r",
									"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
									"\r",
									"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreatePartner : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreatePartner is Success\r",
									"        pm.test('CreatePartner : OperationStatus Description is ' + '\"' + resultDescriptionCreatePartner + '\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
									"        });\r",
									"\r",
									"        //GetResponse_PartnerId\r",
									"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
									"\r",
									"        //Accountname\r",
									"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
									"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateAccount\r",
									"CreateAccount = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateAccount = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateAccount,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreateAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateAccount = {\r",
									"            url: url + provisioningapis + urlAccountCreateAccount,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateAccount,\r",
									"            body: httpRequestCreateAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateAccount');\r",
									"        let response = await reqPromise(optionsCreateAccount);\r",
									"        let jsonDataCreateAccount = await response.json();\r",
									"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
									"\r",
									"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateAccount : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateAccount is Success\r",
									"        pm.test('CreateAccount : OperationStatus Description is ' + '\"' + resultDescriptionCreateAccount + '\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
									"        });\r",
									"        // GetResponse_AccountName\r",
									"        pm.environment.set(\"GetResponse_AccountName\", jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
									"        // GetResponse_AccountId\r",
									"        pm.environment.set(\"GetResponse_AccountId\", jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
									"        // random_IM\r",
									"        pm.environment.set(\"random_IM\", _.random(10000000, 99999999) + \" \" + _.random(1000000, 9999999))\r",
									"        // random_ICCID\r",
									"        pm.environment.set(\"random_ICCID\", _.random(1000000, 9999999) + \" \" + _.random(100000, 999999))\r",
									"        // random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //ThingName\r",
									"        let thingNameValue = fieldDataValue.Thing.ThingNameValue; // \"Sensor_TestThingName\"\r",
									"        pm.environment.set(\"ThingName\", thingNameValue + pm.environment.get(\"random_number\"))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThing\r",
									"CreateThing = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThing = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateThing + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateThing,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey': pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreateThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingName\": pm.environment.get(\"ThingName\"),\r",
									"                \"IMEI\": pm.environment.get(\"random_IM\"),\r",
									"                \"IMSI\": pm.environment.get(\"random_IM\"),\r",
									"                \"ICCID\": pm.environment.get(\"random_ICCID\"),\r",
									"                \"RouteUrl\": fieldDataValue.Thing.RouteUrlValue , //[\"http://10.12.3.4:2019/api/information/AddInformation\"]\r",
									"                \"RouteInfo\": {\r",
									"                    \"MIMO_ID\": fieldDataValue.Thing.RouteInfoMIMOIDValue , //\"606edada\"\r",
									"                    \"MIMO_SerialNo\": fieldDataValue.Thing.RouteInfoMIMOSerialNoValue //5466758878\r",
									"                },\r",
									"                \"RouteFlag\": {\r",
									"                    \"ThingName\": fieldDataValue.Thing.RouteFlagThingNameValue , //true\r",
									"                    \"ThingToken\": fieldDataValue.Thing.RouteFlagThingTokenValue, //true\r",
									"                    \"IMEI\": fieldDataValue.Thing.RouteFlagIMEIValue, //true\r",
									"                    \"ICCID\": fieldDataValue.Thing.RouteFlagICCIDValue, //true\r",
									"                    \"RouteInfo\": fieldDataValue.Thing.RouteFlagRouteInfoValue //true\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateThing = {\r",
									"            url: url + provisioningapis + urlThingCreateThing,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThing,\r",
									"            body: httpRequestCreateThing\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThing');\r",
									"        let response = await reqPromise(optionsCreateThing);\r",
									"        let jsonDataCreateThing = await response.json();\r",
									"        // console.log('jsonDataCreateThing',jsonDataCreateThing)\r",
									"\r",
									"        let operationStatusCreateThing = await jsonDataCreateThing.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateThing : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateThing : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateThing is Success\r",
									"        pm.test('CreateThing : OperationStatus Description is ' + '\"' + resultDescriptionCreateThing + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Description', resultDescriptionCreateThing);\r",
									"        });\r",
									"        \r",
									"        pm.environment.set(\"GetResponse_ThingInfo_ThingToken\", jsonDataCreateThing.ThingInfo.ThingToken)\r",
									"        pm.environment.set(\"GetResponse_ThingID\", jsonDataCreateThing.ThingInfo.ThingId)\r",
									"        pm.environment.set(\"GetResponse_IMSI\", jsonDataCreateThing.ThingInfo.IMSI)\r",
									"        \r",
									"        //Username ไม่ถูก\r",
									"        let keys = pm.environment.get(\"GetResponse_IMSI\") + fieldDataValue.AsgardHTTP.Value_AsgardHTTPeSim_Register_TST_F4_0_2_002_Error + \":\" + pm.environment.get(\"IpAddress\");\r",
									"        // console.log(\"keys\", keys);\r",
									"        let encodedKeys = CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(keys));\r",
									"        pm.environment.set(\"encodedKeys_Authorization_Register\", encodedKeys);\r",
									"\r",
									"        //Get Random Sensor \r",
									"        pm.environment.set(\"random_Sensor\", _.random(100, 999))\r",
									"\r",
									"        //Get Random Sensor AsgardHTTP\r",
									"        pm.environment.set(\"random_Sensor_AsgardHTTP\", _.random(100, 999))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThingStateInfo\r",
									"CreateThingStateInfo = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThingStateInfo = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateThingStateInfo,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey': pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        // {\"AA\" : pm.environment.get(\"random_Sensor\")}\r",
									"        let sensorValue = {};\r",
									"        sensorValue[fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP] = pm.environment.get(\"random_Sensor\");\r",
									"        // console.log('sensorValue',sensorValue);\r",
									"        \r",
									"        let httpRequestCreateThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": [\r",
									"                    pm.environment.get(\"GetResponse_ThingID\")\r",
									"                ],\r",
									"                \"Type\": fieldDataValue.CreateThingStateInfo.Type_Report,\r",
									"                \"Sensor\": sensorValue\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingCreateThingStateInfo,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThingStateInfo,\r",
									"            body: httpRequestCreateThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThingStateInfo');\r",
									"        let response = await reqPromise(optionsCreateThingStateInfo);\r",
									"        let jsonDataCreateThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataCreateThingStateInfo',jsonDataCreateThingStateInfo)\r",
									"\r",
									"        let operationStatusCreateThingStateInfo = await jsonDataCreateThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"CreateThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //CreateThingStateInfo is Success\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Description is ' + '\"' + resultDescriptionCreateThingStateInfo + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Description', resultDescriptionCreateThingStateInfo);\r",
									"        });\r",
									"\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// ControlThing\r",
									"ControlThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptControlThing = {\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_ControlThing + current_timestamp,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Content-Type':ContentType_ApplicationJson\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        // {\"AA\" : pm.environment.get(\"random_Sensor_AsgardHTTP\")}\r",
									"        let sensorValue = {};\r",
									"        sensorValue[fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP] = pm.environment.get(\"random_Sensor_AsgardHTTP\");\r",
									"        // console.log('sensorValue',sensorValue);\r",
									"\r",
									"        let httpRequestControlThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\"),\r",
									"                \"Sensors\": sensorValue\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsControlThing = {\r",
									"            url: url + controlapis + urlControlThing,\r",
									"            method: 'POST',\r",
									"            header: headersOptControlThing,\r",
									"            body: httpRequestControlThing\r",
									"        };\r",
									"\r",
									"        // console.log('response ControlThing');\r",
									"        let response = await reqPromise(optionsControlThing);\r",
									"        let jsonDataControlThing = await response.json();\r",
									"        // console.log('jsonDataControlThing',jsonDataControlThing)\r",
									"    \r",
									"        let operationStatusControlThing = await jsonDataControlThing.operationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"ControlThing : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('ControlThing : OperationStatus code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusControlThing).to.have.property('code', resultCodeSuccess);\r",
									"        });\r",
									"        //ControlOneThing is Success\r",
									"        pm.test('ControlThing : OperationStatus description is '+'\"'+ resultDescriptionSuccessControlOneThing+'\"', function () {\r",
									"            pm.expect(operationStatusControlThing).to.have.property('description', resultDescriptionSuccessControlOneThing);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"Signin();\r",
									"setTimeout(async function(){await CreatePartner();}, 3000); \r",
									"setTimeout(async function(){await CreateAccount();}, 6000); \r",
									"setTimeout(async function(){await CreateThing();}, 8000); \r",
									"setTimeout(async function(){await CreateThingStateInfo();}, 9000); \r",
									"setTimeout(async function(){await ControlThing();}, 10000); \r",
									"setTimeout(async function(){}, 20000); //for wait"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-ais-UserName",
								"value": "{{x_ais_UserName_AisPartner}}",
								"type": "text"
							},
							{
								"key": "x-ais-OrderRef",
								"value": "{{x_ais_OrderRef_RegisHTTP_fail}}{{current_timestamp}}"
							},
							{
								"key": "x-ais-OrderDesc",
								"value": "{{x_ais_OrderDesc_RegisHTTP}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{Basic}} {{encodedKeys_Authorization_Register}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}{{httpapis}}/api/register/sim/v1",
							"host": [
								"{{url}}{{httpapis}}"
							],
							"path": [
								"api",
								"register",
								"sim",
								"v1"
							]
						},
						"description": "Type:Desire"
					},
					"response": []
				},
				{
					"name": "AsgardHTTPeSimRegister_TST_F4_0_2_003_TokenUntrustedOrInvalid.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var Basic = pm.environment.get(\"Basic\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to xAisOrderRef \"RemoveThing_\"\r",
									"var x_ais_OrderRef_RemoveThing = pm.globals.get(\"x_ais_OrderRef_RemoveThing\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"var x_ais_OrderDesc_RemoveThing = pm.globals.get(\"x_ais_OrderDesc_RemoveThing\");\r",
									"//get global variable to xAisOrderRef \"RemoveThingStateInfo_\"\r",
									"var x_ais_OrderRef_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderRef_RemoveThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThingStateInfo\"\r",
									"var x_ais_OrderDesc_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_RemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals AsgardHTTP --------------//\r",
									"//get global variable to x_ais_OrderRef \"RegisHTTP_\"\r",
									"var x_ais_OrderRef_RegisHTTP = pm.globals.get(\"x_ais_OrderRef_RegisHTTP\");\r",
									"//get global variable to x_ais_OrderRef \"RegisHTTPfail_\"\r",
									"var x_ais_OrderRef_RegisHTTP_fail = pm.globals.get(\"x_ais_OrderRef_RegisHTTP_fail\");\r",
									"//get global variable to x_ais_OrderDesc \"Register Thing in MG\"\r",
									"var x_ais_OrderDesc_RegisHTTP = pm.globals.get(\"x_ais_OrderDesc_RegisHTTP\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get url Remove --------------//\r",
									"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
									"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"var urlThingRemoveThing = pm.globals.get(\"urlThingRemoveThing\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"var urlThingRemoveThingStateInfo = pm.globals.get(\"urlThingRemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"RemovePartner is Success\"\r",
									"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
									"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
									"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
									"//get global variable to resultDescription \"RemoveThing is Success\"\r",
									"var resultDescriptionRemoveThing = pm.globals.get(\"resultDescriptionRemoveThing\");\r",
									"//get global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"var resultDescriptionRemoveThingStateInfo = pm.globals.get(\"resultDescriptionRemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 401\r",
									"var statusCodeUnauthorized = pm.globals.get(\"statusCodeUnauthorized\");\r",
									"//get global variable to resultCode \"40103\"\r",
									"var resultCodeTheTokenIsUntrustedOrInvalid = pm.globals.get(\"resultCodeTheTokenIsUntrustedOrInvalid\");\r",
									"//get global variable to resultDescription \"The token is Untrusted or Invalid.\"\r",
									"var resultDescriptionTheTokenIsUntrustedOrInvalid = pm.globals.get(\"resultDescriptionTheTokenIsUntrustedOrInvalid\");\r",
									"//------------------------------------------------------------//\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Asgard HTTP(eSim) Register : Status code is \" + statusCodeUnauthorized, function () {\r",
									"    pm.response.to.have.status(statusCodeUnauthorized);\r",
									"});\r",
									"\r",
									"pm.test('Asgard HTTP(eSim) Register : OperationStatus code is '+'\"'+ resultCodeTheTokenIsUntrustedOrInvalid +'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeTheTokenIsUntrustedOrInvalid);\r",
									"});\r",
									"\r",
									"pm.test('Asgard HTTP(eSim) Register : OperationStatus DeveloperMessage is '+'\"'+ resultDescriptionTheTokenIsUntrustedOrInvalid+'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheTokenIsUntrustedOrInvalid);\r",
									"});\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// RemovePartner\r",
									" RemovePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemovePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemovePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemovePartner = {\r",
									"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemovePartner,\r",
									"            body: httpRequestRemovePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request RemovePartner');\r",
									"        let response = await reqPromise(optionsRemovePartner);\r",
									"        let jsonDataRemovePartner = await response.json();\r",
									"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
									"    \r",
									"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemovePartner is Success\r",
									"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveAccount\r",
									" RemoveAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemoveAccount = {\r",
									"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveAccount,\r",
									"            body: httpRequestRemoveAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveAccount');\r",
									"        let response = await reqPromise(optionsRemoveAccount);\r",
									"        let jsonDataRemoveAccount = await response.json();\r",
									"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
									"    \r",
									"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveAccount is Success\r",
									"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThing\r",
									" RemoveThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThing = {\r",
									"            url: url + provisioningapis + urlThingRemoveThing,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThing,\r",
									"            body: httpRequestRemoveThing\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveThing');\r",
									"        let response = await reqPromise(optionsRemoveThing);\r",
									"        let jsonDataRemoveThing = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThing)\r",
									"    \r",
									"        let operationStatusRemoveThing = await jsonDataRemoveThing.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThing : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThing : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThing is Success\r",
									"        pm.test('RemoveThing : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThing+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Description', resultDescriptionRemoveThing);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThingStateInfo\r",
									" RemoveThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"            \r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\"),\r",
									"                \"stateType\": fieldDataValue.CreateThingStateInfo.Type_Report, //Report\r",
									"                \"stateKey\": fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP //AA\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingRemoveThingStateInfo,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThingStateInfo,\r",
									"            body: httpRequestRemoveThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('response RemoveThingStateInfo');\r",
									"        let response = await reqPromise(optionsRemoveThingStateInfo);\r",
									"        let jsonDataRemoveThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThingStateInfo)\r",
									"    \r",
									"        let operationStatusRemoveThingStateInfo = await jsonDataRemoveThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThingStateInfo is Success\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThingStateInfo+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Description', resultDescriptionRemoveThingStateInfo);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"//---------------- LogDefaultValue --------------//\r",
									"//set variable to LogDefaultValue JSON.parse\r",
									"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
									"// console.log('LogDefaultValue',LogDefaultValue);\r",
									"//---------------- set globals Other --------------//\r",
									"var SearchLog = LogDefaultValue.SearchLog;\r",
									"// console.log('SearchLog',SearchLog);\r",
									"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
									"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
									"var kbn_version = SearchLog.header.kbn_version;\r",
									"var authorization = SearchLog.header.Authorization;\r",
									"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
									"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
									"var namespace = LogDefaultValue.Other.namespace;\r",
									"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
									"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
									"var header_x_ais_username = LogDefaultValue.Other.header_x_ais_username;\r",
									"var methodPost = LogDefaultValue.Other.methodPost;\r",
									"\r",
									"// Detail\r",
									"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
									"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
									"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
									"\r",
									"// Summary\r",
									"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
									"var identitySummary = \"\";\r",
									"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
									"// Asgard.Http.APIs\r",
									"var applicationName = LogDefaultValue.AsgardHTTP.applicationName;\r",
									"var cmdName = LogDefaultValue.AsgardHTTP.cmdNameRegister;\r",
									"var containerId = LogDefaultValue.AsgardHTTP.containerId;\r",
									"var requestObjectUrlStaging = LogDefaultValue.AsgardHTTP.requestObjectUrlRegisterMgStaging;\r",
									"var urlRegister = LogDefaultValue.AsgardHTTP.urlRegister;\r",
									"\r",
									"// Check CDR (Summary Log) and EDR (Detail Log)\r",
									"SearchLogFindTid = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSearchLogFindTid = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = x_ais_OrderRef_RegisHTTP_fail+ current_timestamp; \r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestSearchLogFindTid = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"phrase\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"\r",
									"        let optionsSearchLogFindTid = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptSearchLogFindTid,\r",
									"            body: httpRequestSearchLogFindTid\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsSearchLogFindTid);\r",
									"        let jsonDataSearchLogFindTid = await response.json();\r",
									"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
									"        // console.log('hits',hits)\r",
									"  \r",
									"        // find tid\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            // let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"        \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            if(applicationNameValue == applicationName){\r",
									"                let tid = hits[i]._source.cauldron.tid;\r",
									"                pm.environment.set(\"tid\", tid);\r",
									"                break;\r",
									"           }\r",
									"        }\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"CheckLog = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCheckLog = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = pm.environment.get(\"tid\");\r",
									"\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        // console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestCheckLog = {\r",
									"            mode: 'raw',\r",
									"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"phrase\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"        let optionsCheckLog = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptCheckLog,\r",
									"            body: httpRequestCheckLog\r",
									"        }; \r",
									"        let response = await reqPromise(optionsCheckLog);\r",
									"        let jsonDataCheckLog = await response.json();\r",
									"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
									"        \r",
									"        // //200\r",
									"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });     \r",
									"        \r",
									"        let hits = jsonDataCheckLog.hits.hits\r",
									"        console.log('hits',hits)\r",
									"  \r",
									"        // find logType\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            //  let logType = hits[i]._source.cauldron.logType\r",
									"            let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"           \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            \r",
									"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
									"            // console.log('resultDataLog',resultDataLog)\r",
									"\r",
									"            let tidControl = x_ais_OrderRef_RegisHTTP_fail  + current_timestamp;\r",
									"            // console.log(tidControl);\r",
									"            if(applicationNameValue == applicationName){\r",
									"                 \r",
									"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and Asgard.Http.APIs\r",
									"                    pm.test(\"Check Summary Log : Asgard_HTTP(eSim) Register\" , function () {\r",
									"                        console.log(\"======== Check Summary Log ( Expected = Actual) [Asgard_HTTP(eSim) Register] ==================\");\r",
									"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
									"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
									"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeTheTokenIsUntrustedOrInvalid);\r",
									"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionTheTokenIsUntrustedOrInvalid);\r",
									"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
									"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"identity : \" + JSON.stringify(resultDataLog.identity) + \" = \" + JSON.stringify(identitySummary));\r",
									"                        console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
									"\r",
									"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
									"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
									"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeTheTokenIsUntrustedOrInvalid); \r",
									"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionTheTokenIsUntrustedOrInvalid); \r",
									"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
									"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.identity).to.eql(identitySummary); \r",
									"                        pm.expect(resultDataLog.custom).to.eql(customSummary);                     \r",
									"                    }); \r",
									"                }\r",
									"\r",
									"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and Asgard.Http.APIs\r",
									"\r",
									"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
									"                    // console.log('endPointNameValue ',endPointNameValue)\r",
									"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [Asgard_HTTP(eSim) Register]\", function () {\r",
									"                        console.log(\"======== Check Detail Log ( Expected = Actual) [Asgard_HTTP(eSim) Register] ==================\");\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
									"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
									"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
									"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.custom1.activityLog.processTime + \" = \" + resultDataLog.custom1.activityLog.processTime);\r",
									"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
									"\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
									"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
									"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
									"\r",
									"                        if( endPointNameValue == undefined){\r",
									"                            // check requestObject\r",
									"                            // \"requestObject\":\"{\\\"url\\\":\\\"/api/register/sim/v1\\\",\\\"method\\\":\\\"POST\\\",\\\"headers\\\":{\\\"Cache-Control\\\":\\\"no-cache\\\",\\\"Content-Type\\\":\\\"application/json\\\",\\\"Accept\\\":\\\"*/*\\\",\\\"Accept-Encoding\\\":\\\"gzip,deflate,br\\\",\\\"Host\\\":\\\"mg-staging.sandais.com\\\",\\\"User-Agent\\\":\\\"PostmanRuntime/7.26.8\\\",\\\"Content-Length\\\":\\\"2\\\",\\\"x-real-ip\\\":\\\"58.8.214.174\\\",\\\"x-forwarded-for\\\":\\\"58.8.214.174\\\",\\\"x-forwarded-proto\\\":\\\"https\\\",\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"RegisHTTP_202102151002772\\\",\\\"x-ais-orderdesc\\\":\\\"Register Thing in MG\\\",\\\"postman-token\\\":\\\"68ba8c12-bc0a-4d6f-aa2b-6159c410dd6c\\\",\\\"x-request-id\\\":\\\"4cd5e8a2-7ec7-4264-9c5b-a285b9265767\\\",\\\"x-b3-traceid\\\":\\\"b6e486d94180c42980911e7fe0ba8569\\\",\\\"x-b3-spanid\\\":\\\"80911e7fe0ba8569\\\",\\\"x-b3-sampled\\\":\\\"0\\\",\\\"x-ais-SessionId\\\":\\\"1613359754802\\\"},\\\"queryString\\\":{},\\\"routeParamteters\\\":{},\\\"body\\\":{}}\"\r",
									"\r",
									"                            // \\\"requestObject\\\":\\\"{ \\\\\\\"url\\\\\\\":\\\\\\\"/api/register/sim/v1\\\\\\\", \\\\\\\"method\\\\\\\":\\\\\\\"POST\\\\\\\", \\\\\\\"headers\\\\\\\":{ \\\\\\\"Cache-Control\\\\\\\":\\\\\\\"no-cache\\\\\\\", \\\\\\\"Content-Type\\\\\\\":\\\\\\\"application/json\\\\\\\", \\\\\\\"Accept\\\\\\\":\\\\\\\"*/*\\\\\\\", \\\\\\\"Accept-Encoding\\\\\\\":\\\\\\\"gzip, deflate, br\\\\\\\", \\\\\\\"Host\\\\\\\":\\\\\\\"mg-iot.sandais.com\\\\\\\", \\\\\\\"User-Agent\\\\\\\":\\\\\\\"PostmanRuntime/7.26.8\\\\\\\", \\\\\\\"Content-Length\\\\\\\":\\\\\\\"2\\\\\\\", \\\\\\\"x-real-ip\\\\\\\":\\\\\\\"182.232.183.255\\\\\\\", \\\\\\\"x-forwarded-for\\\\\\\":\\\\\\\"182.232.183.255, 10.233.65.1\\\\\\\", \\\\\\\"x-forwarded-proto\\\\\\\":\\\\\\\"http\\\\\\\", \\\\\\\"x-ais-username\\\\\\\":\\\\\\\"AisPartner\\\\\\\", \\\\\\\"x-ais-orderref\\\\\\\":\\\\\\\"RegisHTTPfail_202105112305627\\\\\\\", \\\\\\\"x-ais-orderdesc\\\\\\\":\\\\\\\"Register Thing in MG\\\\\\\", \\\\\\\"postman-token\\\\\\\":\\\\\\\"8f40379c-0821-4ca9-8a88-3b8dff85b178\\\\\\\", \\\\\\\"x-envoy-external-address\\\\\\\":\\\\\\\"10.233.65.1\\\\\\\", \\\\\\\"x-request-id\\\\\\\":\\\\\\\"435081a6-c37e-46a1-980b-2005978db619\\\\\\\", \\\\\\\"x-envoy-original-path\\\\\\\":\\\\\\\"/httpapis/api/register/sim/v1\\\\\\\", \\\\\\\"x-b3-traceid\\\\\\\":\\\\\\\"6f4f4dca351b5846a775b5b928261d92\\\\\\\", \\\\\\\"x-b3-spanid\\\\\\\":\\\\\\\"e574b62a93699f34\\\\\\\", \\\\\\\"x-b3-parentspanid\\\\\\\":\\\\\\\"a775b5b928261d92\\\\\\\", \\\\\\\"x-b3-sampled\\\\\\\":\\\\\\\"0\\\\\\\", \\\\\\\"x-ais-SessionId\\\\\\\":\\\\\\\"1620750055346\\\\\\\" }, \\\\\\\"queryString\\\\\\\":{ }, \\\\\\\"routeParamteters\\\\\\\":{ }, \\\\\\\"body\\\\\\\":{ } }\\\"\r",
									"\r",
									"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
									"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
									"\r",
									"                            let url = urlRegister; \r",
									"                            let x_ais_orderref = x_ais_OrderRef_RegisHTTP_fail + current_timestamp;\r",
									"                            let x_ais_orderdesc = x_ais_OrderDesc_RegisHTTP;\r",
									"                            let x_ais_userName = x_ais_UserName_AisPartner;\r",
									"                            \r",
									"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
									"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
									"                            console.log(\"headers.x_ais_userName : \" + jsonParseRequestObject.headers[header_x_ais_username] + \" = \" + x_ais_userName);\r",
									"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
									"                            // console.log(\"headers.Authorization : \" + jsonParseRequestObject.headers.Authorization + \" = \" + authorization);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
									"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_username]).to.eql(x_ais_userName);\r",
									"                            // pm.expect(jsonParseRequestObject.headers.Authorization).to.eql(authorization);\r",
									"\r",
									"                            console.log(\"queryString : \" + JSON.stringify(jsonParseRequestObject.queryString) + \" = \" + JSON.stringify({}));\r",
									"                            console.log(\"routeParamteters : \" + JSON.stringify(jsonParseRequestObject.routeParamteters) + \" = \" + JSON.stringify({}));\r",
									"                            console.log(\"body : \" + JSON.stringify(jsonParseRequestObject.body) + \" = \" + JSON.stringify({}));\r",
									"                           \r",
									"                            pm.expect(jsonParseRequestObject.queryString).to.eql({}); \r",
									"                            pm.expect(jsonParseRequestObject.routeParamteters).to.eql({}); \r",
									"                            pm.expect(jsonParseRequestObject.body).to.eql({}); \r",
									"\r",
									"                            // check responseObject\r",
									"                            // responseObject: \"{\"ThingToken\":null,\"OperationStatus\":{\"Code\":\"40103\",\"DeveloperMessage\":\"The token is Untrusted or Invalid.\"}}\"\r",
									"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
									"                            // console.log('jsonParseResponseObject',jsonParseResponseObject); \r",
									"\r",
									"                            console.log(\"response.OperationStatus.ThingToken : \" + jsonParseResponseObject.ThingToken + \" = \" + null);\r",
									"                            pm.expect(jsonParseResponseObject.ThingToken).to.eql(null);  \r",
									"\r",
									"                            console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeTheTokenIsUntrustedOrInvalid);\r",
									"                            console.log(\"response.OperationStatus.DeveloperMessage : \" + jsonParseResponseObject.OperationStatus.DeveloperMessage + \" = \" + resultDescriptionTheTokenIsUntrustedOrInvalid); \r",
									"\r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeTheTokenIsUntrustedOrInvalid);  \r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheTokenIsUntrustedOrInvalid);  \r",
									"                        }\r",
									"                    }); \r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"setTimeout(function(){SearchLogFindTid();}, 30000); \r",
									"setTimeout(function(){CheckLog();}, 50000); \r",
									"\r",
									"setTimeout(function(){RemoveThingStateInfo();}, 70000); \r",
									"setTimeout(function(){RemoveThing();}, 80000); \r",
									"setTimeout(function(){RemoveAccount();}, 90000); \r",
									"setTimeout(function(){RemovePartner();}, 100000); \r",
									"\r",
									"setTimeout(function(){\r",
									"pm.environment.unset(\"current_timestamp\");\r",
									"pm.environment.unset(\"AccessToken\");\r",
									"pm.environment.unset(\"random_number\");\r",
									"pm.environment.unset(\"PartnerName\");\r",
									"pm.environment.unset(\"MerchantContact\");\r",
									"pm.environment.unset(\"CPID\");\r",
									"pm.environment.unset(\"GetResponse_PartnerId\");\r",
									"pm.environment.unset(\"AccountName\");\r",
									"pm.environment.unset(\"GetResponse_ThingInfo_ThingToken\");\r",
									"pm.environment.unset(\"GetResponse_AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountId\");\r",
									"pm.environment.unset(\"random_IM\");\r",
									"pm.environment.unset(\"random_ICCID\");\r",
									"pm.environment.unset(\"ThingName\");\r",
									"pm.environment.unset(\"GetResponse_ThingID\");\r",
									"pm.environment.unset(\"GetResponse_IMSI\");\r",
									"pm.environment.unset(\"encodedKeys_Authorization_Register\");\r",
									"pm.environment.unset(\"random_Sensor\");\r",
									"pm.environment.unset(\"random_Sensor_AsgardHTTP\");\r",
									"pm.environment.unset(\"GetResponse_ThingToken\");\r",
									"pm.environment.unset(\"tid\");\r",
									"}, 105000); \r",
									"setTimeout(async function(){}, 110000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var Username = pm.environment.get(\"Username\");\r",
									"var Password = pm.environment.get(\"Password\");\r",
									"\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"var controlapis = pm.environment.get(\"controlapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"//format YYYYMMDDHHMMSSS\r",
									"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
									"// console.log('currentTmestamp',currentTmestamp);\r",
									"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- statusCodeList --------------//\r",
									"//set variable to statusCodeList JSON.parse\r",
									"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
									"//set global variable to statusCode 200\r",
									"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
									"//set global variable to statusCode 201\r",
									"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
									"//set global variable to statusCode 401\r",
									"pm.globals.set(\"statusCodeUnauthorized\", statusCodeList.statusCodeUnauthorized);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultCodeList --------------//\r",
									"//set variable to resultCodeList JSON.parse\r",
									"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
									"//set global variable to resultCode \"20000\"\r",
									"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
									"//set global variable to resultCode \"20100\"\r",
									"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
									"//set global variable to resultCode \"40103\"\r",
									"pm.globals.set(\"resultCodeTheTokenIsUntrustedOrInvalid\", resultCodeList.resultCodeTheTokenIsUntrustedOrInvalid);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionSuccessList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
									"//set global variable to resultDescription \"SignInProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
									"//set global variable to resultDescription \"CreatePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
									"//set global variable to resultDescription \"CreateAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
									"//set global variable to resultDescription \"CreateThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThing\", resultDescriptionSuccessList.resultDescriptionCreateThing);\r",
									"//set global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThingStateInfo\", resultDescriptionSuccessList.resultDescriptionCreateThingStateInfo);\r",
									"//set global variable to resultDescription \"RemovePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
									"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
									"//set global variable to resultDescription \"RemoveThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThing\", resultDescriptionSuccessList.resultDescriptionRemoveThing);\r",
									"//set global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThingStateInfo\", resultDescriptionSuccessList.resultDescriptionRemoveThingStateInfo);\r",
									"//set global variable to resultDescription \"ControlOneThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessControlOneThing\", resultDescriptionSuccessList.resultDescriptionSuccessControlOneThing);\r",
									"//set global variable to resultDescription \"Register is Success\"\r",
									"pm.globals.set(\"resultDescriptionRegisterIsSuccess\", resultDescriptionSuccessList.resultDescriptionRegisterIsSuccess);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionErrorList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
									"//set global variable to resultDescription \"The token is Untrusted or Invalid.\"\r",
									"pm.globals.set(\"resultDescriptionTheTokenIsUntrustedOrInvalid\", resultDescriptionErrorList.resultDescriptionTheTokenIsUntrustedOrInvalid);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- HeaderList --------------//\r",
									"//set variable to HeaderList JSON.parse\r",
									"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
									"//---------------- set globals Other --------------//\r",
									"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
									"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
									"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
									"//set global variable to kbn-versio \"7.5.1\"\r",
									"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Signin_ --------------//\r",
									"//set global variable to x_ais_OrderRef \"Signin_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreatePartner --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
									"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
									"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
									"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreateAccount --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
									"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
									"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Thing --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThing\", HeaderList.Thing.x_ais_OrderRef_CreateThing);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThing\", HeaderList.Thing.x_ais_OrderDesc_CreateThing);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThing\", HeaderList.Thing.x_ais_OrderRef_RemoveThing);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThing\", HeaderList.Thing.x_ais_OrderDesc_RemoveThing);\r",
									"//set global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_RemoveThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_RemoveThingStateInfo);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Control --------------//\r",
									"//set global variable to x_ais_OrderRef \"ControlThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ControlThing\", HeaderList.Control.x_ais_OrderRef_ControlThing);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals AsgardHTTP --------------//\r",
									"//set global variable to x_ais_OrderRef \"RegisHTTP_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RegisHTTP\", HeaderList.AsgardHTTP.x_ais_OrderRef_RegisHTTP);\r",
									"//set global variable to x_ais_OrderRef \"RegisHTTPfail_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RegisHTTP_fail\", HeaderList.AsgardHTTP.x_ais_OrderRef_RegisHTTP_fail);\r",
									"//set global variable to x_ais_OrderDesc \"Register Thing in MG\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RegisHTTP\", HeaderList.AsgardHTTP.x_ais_OrderDesc_RegisHTTP);\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"SignInProcess is Success\"\r",
									"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
									"//get global variable to resultDescription \"CreatePartner is Success\"\r",
									"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
									"//get global variable to resultDescription \"CreateAccount is Success\"\r",
									"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
									"//get global variable to resultDescription \"CreateThing is Success\"\r",
									"var resultDescriptionCreateThing = pm.globals.get(\"resultDescriptionCreateThing\");\r",
									"//get global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"var resultDescriptionCreateThingStateInfo = pm.globals.get(\"resultDescriptionCreateThingStateInfo\");\r",
									"//get global variable to resultDescription \"ControlOneThing is Success\"\r",
									"var resultDescriptionSuccessControlOneThing = pm.globals.get(\"resultDescriptionSuccessControlOneThing\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- urlRouteList --------------//\r",
									"//set variable to urlRouteList JSON.parse\r",
									"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
									"//---------------- set url Create --------------//\r",
									"//set global variable to url \"/api/v1/auth/signin\"\r",
									"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
									"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
									"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"pm.globals.set(\"urlThingCreateThing\", urlRouteList.Thing.urlThingCreateThing);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"pm.globals.set(\"urlThingCreateThingStateInfo\", urlRouteList.Thing.urlThingCreateThingStateInfo);\r",
									"//set global variable to url \"/api/v1/Control/Thing\"\r",
									"pm.globals.set(\"urlControlThing\", urlRouteList.Control.urlControlThing);\r",
									"//---------------- get url Create --------------//\r",
									"//get global variable to url \"/api/v1/auth/signin\"\r",
									"var urlSignin = pm.globals.get(\"urlSignin\");\r",
									"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
									"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"var urlThingCreateThing = pm.globals.get(\"urlThingCreateThing\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"var urlThingCreateThingStateInfo = pm.globals.get(\"urlThingCreateThingStateInfo\");\r",
									"//get global variable to url \"/api/v1/Control/Thing\"\r",
									"var urlControlThing = pm.globals.get(\"urlControlThing\");\r",
									"//---------------- set url Remove --------------//\r",
									"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
									"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"pm.globals.set(\"urlThingRemoveThing\", urlRouteList.Thing.urlThingRemoveThing);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"pm.globals.set(\"urlThingRemoveThingStateInfo\", urlRouteList.Thing.urlThingRemoveThingStateInfo);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Signin_ --------------//\r",
									"//get global variable to x_ais_OrderRef \"Signin_\"\r",
									"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"var x_ais_OrderRef_CreateThing = pm.globals.get(\"x_ais_OrderRef_CreateThing\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"var x_ais_OrderDesc_CreateThing = pm.globals.get(\"x_ais_OrderDesc_CreateThing\");\r",
									"//get global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"var x_ais_OrderRef_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderRef_CreateThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"var x_ais_OrderDesc_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_CreateThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Control --------------//\r",
									"//get global variable to x_ais_OrderRef \"ControlThing_\"\r",
									"var x_ais_OrderRef_ControlThing = pm.globals.get(\"x_ais_OrderRef_ControlThing\");\r",
									"//------------------------------------------------------------//\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// Signin get token\r",
									"Signin = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSignin = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_Signin + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_UserAuthentication,\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestSignin = {\r",
									"            mode: 'raw',\r",
									"            raw:\r",
									"                JSON.stringify({\r",
									"                    username: Username,\r",
									"                    password: Password\r",
									"                })\r",
									"        };\r",
									"\r",
									"        let optionsSignin = {\r",
									"            url: url + provisioningapis + urlSignin,\r",
									"            method: 'POST',\r",
									"            header: headersOptSignin,\r",
									"            body: httpRequestSignin\r",
									"        };\r",
									"        // console.log('request Signin');\r",
									"        let response = await reqPromise(optionsSignin);\r",
									"        let jsonDataSignin = await response.json();\r",
									"\r",
									"        // setAccessToken\r",
									"        await pm.environment.set(\"AccessToken\", jsonDataSignin.AccessToken);\r",
									"\r",
									"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('Signin : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // SignInProcess is Success\r",
									"        pm.test('Signin : OperationStatus Description is ' + '\"' + resultDescriptionSuccessSignIn + '\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
									"        });\r",
									"\r",
									"        //set random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //set PartnerName\r",
									"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
									"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
									"        //set MerchantContact\r",
									"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
									"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
									"        // set CPID\r",
									"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
									"        pm.environment.set(\"CPID\", CPIDValue)\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreatePartner\r",
									"CreatePartner = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreatePartner = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreatePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreatePartner,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreatePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
									"                \"PartnerType\": [\r",
									"                    \"Supplier\",\r",
									"                    \"Customer\"\r",
									"                ],\r",
									"                \"PartnerDetail\": {\r",
									"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
									"                    \"CPID\": pm.environment.get(\"CPID\")\r",
									"                },\r",
									"                \"Property\": {\r",
									"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreatePartner = {\r",
									"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreatePartner,\r",
									"            body: httpRequestCreatePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsCreatePartner);\r",
									"        let jsonDataCreatePartner = await response.json();\r",
									"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
									"\r",
									"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreatePartner : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreatePartner is Success\r",
									"        pm.test('CreatePartner : OperationStatus Description is ' + '\"' + resultDescriptionCreatePartner + '\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
									"        });\r",
									"\r",
									"        //GetResponse_PartnerId\r",
									"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
									"\r",
									"        //Accountname\r",
									"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
									"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateAccount\r",
									"CreateAccount = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateAccount = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateAccount,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreateAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateAccount = {\r",
									"            url: url + provisioningapis + urlAccountCreateAccount,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateAccount,\r",
									"            body: httpRequestCreateAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateAccount');\r",
									"        let response = await reqPromise(optionsCreateAccount);\r",
									"        let jsonDataCreateAccount = await response.json();\r",
									"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
									"\r",
									"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateAccount : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateAccount is Success\r",
									"        pm.test('CreateAccount : OperationStatus Description is ' + '\"' + resultDescriptionCreateAccount + '\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
									"        });\r",
									"        // GetResponse_AccountName\r",
									"        pm.environment.set(\"GetResponse_AccountName\", jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
									"        // GetResponse_AccountId\r",
									"        pm.environment.set(\"GetResponse_AccountId\", jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
									"        // random_IM\r",
									"        pm.environment.set(\"random_IM\", _.random(10000000, 99999999) + \" \" + _.random(1000000, 9999999))\r",
									"        // random_ICCID\r",
									"        pm.environment.set(\"random_ICCID\", _.random(1000000, 9999999) + \" \" + _.random(100000, 999999))\r",
									"        // random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //ThingName\r",
									"        let thingNameValue = fieldDataValue.Thing.ThingNameValue; // \"Sensor_TestThingName\"\r",
									"        pm.environment.set(\"ThingName\", thingNameValue + pm.environment.get(\"random_number\"))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThing\r",
									"CreateThing = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThing = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateThing + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateThing,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey': pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreateThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingName\": pm.environment.get(\"ThingName\"),\r",
									"                \"IMEI\": pm.environment.get(\"random_IM\"),\r",
									"                \"IMSI\": pm.environment.get(\"random_IM\"),\r",
									"                \"ICCID\": pm.environment.get(\"random_ICCID\"),\r",
									"                \"RouteUrl\": fieldDataValue.Thing.RouteUrlValue , //[\"http://10.12.3.4:2019/api/information/AddInformation\"]\r",
									"                \"RouteInfo\": {\r",
									"                    \"MIMO_ID\": fieldDataValue.Thing.RouteInfoMIMOIDValue , //\"606edada\"\r",
									"                    \"MIMO_SerialNo\": fieldDataValue.Thing.RouteInfoMIMOSerialNoValue //5466758878\r",
									"                },\r",
									"                \"RouteFlag\": {\r",
									"                    \"ThingName\": fieldDataValue.Thing.RouteFlagThingNameValue , //true\r",
									"                    \"ThingToken\": fieldDataValue.Thing.RouteFlagThingTokenValue, //true\r",
									"                    \"IMEI\": fieldDataValue.Thing.RouteFlagIMEIValue, //true\r",
									"                    \"ICCID\": fieldDataValue.Thing.RouteFlagICCIDValue, //true\r",
									"                    \"RouteInfo\": fieldDataValue.Thing.RouteFlagRouteInfoValue //true\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateThing = {\r",
									"            url: url + provisioningapis + urlThingCreateThing,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThing,\r",
									"            body: httpRequestCreateThing\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThing');\r",
									"        let response = await reqPromise(optionsCreateThing);\r",
									"        let jsonDataCreateThing = await response.json();\r",
									"        // console.log('jsonDataCreateThing',jsonDataCreateThing)\r",
									"\r",
									"        let operationStatusCreateThing = await jsonDataCreateThing.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateThing : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateThing : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateThing is Success\r",
									"        pm.test('CreateThing : OperationStatus Description is ' + '\"' + resultDescriptionCreateThing + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Description', resultDescriptionCreateThing);\r",
									"        });\r",
									"\r",
									"        pm.environment.set(\"GetResponse_ThingInfo_ThingToken\", jsonDataCreateThing.ThingInfo.ThingToken)\r",
									"        pm.environment.set(\"GetResponse_ThingID\", jsonDataCreateThing.ThingInfo.ThingId)\r",
									"        pm.environment.set(\"GetResponse_IMSI\", jsonDataCreateThing.ThingInfo.IMSI)\r",
									"        \r",
									"        //ไม่ใส่ Authorization\r",
									"        let keys = pm.environment.get(\"GetResponse_IMSI\") + \"test\"+ \":\" + pm.environment.get(\"IpAddress\");\r",
									"        // console.log(\"keys\", keys);\r",
									"        let encodedKeys = CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(keys));\r",
									"        pm.environment.set(\"encodedKeys_Authorization_Register\", encodedKeys);\r",
									"\r",
									"        //Get Random Sensor \r",
									"        pm.environment.set(\"random_Sensor\", _.random(100, 999))\r",
									"\r",
									"        //Get Random Sensor AsgardHTTP\r",
									"        pm.environment.set(\"random_Sensor_AsgardHTTP\", _.random(100, 999))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThingStateInfo\r",
									"CreateThingStateInfo = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThingStateInfo = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateThingStateInfo,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey': pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        // {\"AA\" : pm.environment.get(\"random_Sensor\")}\r",
									"        let sensorValue = {};\r",
									"        sensorValue[fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP] = pm.environment.get(\"random_Sensor\");\r",
									"        // console.log('sensorValue',sensorValue);\r",
									"        \r",
									"        let httpRequestCreateThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": [\r",
									"                    pm.environment.get(\"GetResponse_ThingID\")\r",
									"                ],\r",
									"                \"Type\": fieldDataValue.CreateThingStateInfo.Type_Report,\r",
									"                \"Sensor\": sensorValue\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingCreateThingStateInfo,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThingStateInfo,\r",
									"            body: httpRequestCreateThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThingStateInfo');\r",
									"        let response = await reqPromise(optionsCreateThingStateInfo);\r",
									"        let jsonDataCreateThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataCreateThingStateInfo',jsonDataCreateThingStateInfo)\r",
									"\r",
									"        let operationStatusCreateThingStateInfo = await jsonDataCreateThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"CreateThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //CreateThingStateInfo is Success\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Description is ' + '\"' + resultDescriptionCreateThingStateInfo + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Description', resultDescriptionCreateThingStateInfo);\r",
									"        });\r",
									"\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// ControlThing\r",
									"ControlThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptControlThing = {\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_ControlThing + current_timestamp,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Content-Type':ContentType_ApplicationJson\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        // {\"AA\" : pm.environment.get(\"random_Sensor_AsgardHTTP\")}\r",
									"        let sensorValue = {};\r",
									"        sensorValue[fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP] = pm.environment.get(\"random_Sensor_AsgardHTTP\");\r",
									"        // console.log('sensorValue',sensorValue);\r",
									"\r",
									"        let httpRequestControlThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\"),\r",
									"                \"Sensors\": sensorValue\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsControlThing = {\r",
									"            url: url + controlapis + urlControlThing,\r",
									"            method: 'POST',\r",
									"            header: headersOptControlThing,\r",
									"            body: httpRequestControlThing\r",
									"        };\r",
									"\r",
									"        // console.log('response ControlThing');\r",
									"        let response = await reqPromise(optionsControlThing);\r",
									"        let jsonDataControlThing = await response.json();\r",
									"        // console.log('jsonDataControlThing',jsonDataControlThing)\r",
									"    \r",
									"        let operationStatusControlThing = await jsonDataControlThing.operationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"ControlThing : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('ControlThing : OperationStatus code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusControlThing).to.have.property('code', resultCodeSuccess);\r",
									"        });\r",
									"        //ControlOneThing is Success\r",
									"        pm.test('ControlThing : OperationStatus description is '+'\"'+ resultDescriptionSuccessControlOneThing+'\"', function () {\r",
									"            pm.expect(operationStatusControlThing).to.have.property('description', resultDescriptionSuccessControlOneThing);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"Signin();\r",
									"setTimeout(async function(){await CreatePartner();}, 3000); \r",
									"setTimeout(async function(){await CreateAccount();}, 6000); \r",
									"setTimeout(async function(){await CreateThing();}, 8000); \r",
									"setTimeout(async function(){await CreateThingStateInfo();}, 9000); \r",
									"setTimeout(async function(){await ControlThing();}, 10000); \r",
									"setTimeout(async function(){}, 20000); //for wait"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-ais-UserName",
								"type": "text",
								"value": "{{x_ais_UserName_AisPartner}}"
							},
							{
								"key": "x-ais-OrderRef",
								"value": "{{x_ais_OrderRef_RegisHTTP_fail}}{{current_timestamp}}"
							},
							{
								"key": "x-ais-OrderDesc",
								"type": "text",
								"value": "{{x_ais_OrderDesc_RegisHTTP}}"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{Basic}} {{encodedKeys_Authorization_Register}}",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}{{httpapis}}/api/register/sim/v1",
							"host": [
								"{{url}}{{httpapis}}"
							],
							"path": [
								"api",
								"register",
								"sim",
								"v1"
							]
						},
						"description": "Type:Desire"
					},
					"response": []
				},
				{
					"name": "AsgardHTTPeSimRegister_TST_F4_0_2_004_Error_AccountIdNotfound",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var Username = pm.environment.get(\"Username\");\r",
									"var Password = pm.environment.get(\"Password\");\r",
									"\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"var controlapis = pm.environment.get(\"controlapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"//format YYYYMMDDHHMMSSS\r",
									"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
									"// console.log('currentTmestamp',currentTmestamp);\r",
									"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- statusCodeList --------------//\r",
									"//set variable to statusCodeList JSON.parse\r",
									"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
									"//set global variable to statusCode 200\r",
									"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
									"//set global variable to statusCode 201\r",
									"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
									"//set global variable to statusCode 404\r",
									"pm.globals.set(\"statusCodeNotFound\", statusCodeList.statusCodeNotFound);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultCodeList --------------//\r",
									"//set variable to resultCodeList JSON.parse\r",
									"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
									"//set global variable to resultCode \"20000\"\r",
									"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
									"//set global variable to resultCode \"20100\"\r",
									"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
									"//set global variable to resultCode \"40300\"\r",
									"pm.globals.set(\"resultCodeForbiddenMissingOrInvalidParameter\", resultCodeList.resultCodeForbiddenMissingOrInvalidParameter);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionSuccessList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
									"//set global variable to resultDescription \"SignInProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
									"//set global variable to resultDescription \"CreatePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
									"//set global variable to resultDescription \"CreateAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
									"//set global variable to resultDescription \"CreateThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThing\", resultDescriptionSuccessList.resultDescriptionCreateThing);\r",
									"//set global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThingStateInfo\", resultDescriptionSuccessList.resultDescriptionCreateThingStateInfo);\r",
									"//set global variable to resultDescription \"RemovePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
									"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
									"//set global variable to resultDescription \"RemoveThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThing\", resultDescriptionSuccessList.resultDescriptionRemoveThing);\r",
									"//set global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThingStateInfo\", resultDescriptionSuccessList.resultDescriptionRemoveThingStateInfo);\r",
									"//set global variable to resultDescription \"ControlOneThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessControlOneThing\", resultDescriptionSuccessList.resultDescriptionSuccessControlOneThing);\r",
									"//set global variable to resultDescription \"Register is Success\"\r",
									"pm.globals.set(\"resultDescriptionRegisterIsSuccess\", resultDescriptionSuccessList.resultDescriptionRegisterIsSuccess);\r",
									"//set global variable to resultDescription \"RemoveThingFromAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThingFromAccount\", resultDescriptionSuccessList.resultDescriptionRemoveThingFromAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionErrorList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
									"//set global variable to resultDescription \"The Parameter Imsi/ThingToken is Missing Or Invalid\"\r",
									"pm.globals.set(\"resultDescriptionErrorTheParameterImsiThingTokenIsMissingOrInvalid\", resultDescriptionErrorList.resultDescriptionErrorTheParameterImsiThingTokenIsMissingOrInvalid);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- HeaderList --------------//\r",
									"//set variable to HeaderList JSON.parse\r",
									"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
									"//---------------- set globals Other --------------//\r",
									"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
									"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
									"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
									"//set global variable to kbn-versio \"7.5.1\"\r",
									"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Signin_ --------------//\r",
									"//set global variable to x_ais_OrderRef \"Signin_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreatePartner --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
									"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
									"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
									"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreateAccount --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
									"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
									"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Thing --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThing\", HeaderList.Thing.x_ais_OrderRef_CreateThing);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThing\", HeaderList.Thing.x_ais_OrderDesc_CreateThing);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThing\", HeaderList.Thing.x_ais_OrderRef_RemoveThing);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThing\", HeaderList.Thing.x_ais_OrderDesc_RemoveThing);\r",
									"//set global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_RemoveThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_RemoveThingStateInfo);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThingFromAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThingFromAccount\", HeaderList.Thing.x_ais_OrderRef_RemoveThingFromAccount);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThingFromAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThingFromAccount\", HeaderList.Thing.x_ais_OrderDesc_RemoveThingFromAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Control --------------//\r",
									"//set global variable to x_ais_OrderRef \"ControlThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ControlThing\", HeaderList.Control.x_ais_OrderRef_ControlThing);\r",
									"//set global variable to x_ais_OrderRef \"ControlThingfail_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ControlThing_fail\", HeaderList.Control.x_ais_OrderRef_ControlThing_fail);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals AsgardHTTP --------------//\r",
									"//set global variable to x_ais_OrderRef \"RegisHTTP_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RegisHTTP\", HeaderList.AsgardHTTP.x_ais_OrderRef_RegisHTTP);\r",
									"//set global variable to x_ais_OrderRef \"RegisHTTPfail_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RegisHTTP_fail\", HeaderList.AsgardHTTP.x_ais_OrderRef_RegisHTTP_fail);\r",
									"//set global variable to x_ais_OrderDesc \"Register Thing in MG\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RegisHTTP\", HeaderList.AsgardHTTP.x_ais_OrderDesc_RegisHTTP);\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"SignInProcess is Success\"\r",
									"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
									"//get global variable to resultDescription \"CreatePartner is Success\"\r",
									"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
									"//get global variable to resultDescription \"CreateAccount is Success\"\r",
									"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
									"//get global variable to resultDescription \"CreateThing is Success\"\r",
									"var resultDescriptionCreateThing = pm.globals.get(\"resultDescriptionCreateThing\");\r",
									"//get global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"var resultDescriptionCreateThingStateInfo = pm.globals.get(\"resultDescriptionCreateThingStateInfo\");\r",
									"//get global variable to resultDescription \"ControlOneThing is Success\"\r",
									"var resultDescriptionSuccessControlOneThing = pm.globals.get(\"resultDescriptionSuccessControlOneThing\");\r",
									"//get global variable to resultDescription \"RemoveThingFromAccount is Success\"\r",
									"var resultDescriptionRemoveThingFromAccount = pm.globals.get(\"resultDescriptionRemoveThingFromAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- urlRouteList --------------//\r",
									"//set variable to urlRouteList JSON.parse\r",
									"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
									"//---------------- set url Create --------------//\r",
									"//set global variable to url \"/api/v1/auth/signin\"\r",
									"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
									"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
									"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"pm.globals.set(\"urlThingCreateThing\", urlRouteList.Thing.urlThingCreateThing);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"pm.globals.set(\"urlThingCreateThingStateInfo\", urlRouteList.Thing.urlThingCreateThingStateInfo);\r",
									"//set global variable to url \"/api/v1/Control/Thing\"\r",
									"pm.globals.set(\"urlControlThing\", urlRouteList.Control.urlControlThing);\r",
									"//---------------- get url Create --------------//\r",
									"//get global variable to url \"/api/v1/auth/signin\"\r",
									"var urlSignin = pm.globals.get(\"urlSignin\");\r",
									"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
									"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"var urlThingCreateThing = pm.globals.get(\"urlThingCreateThing\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"var urlThingCreateThingStateInfo = pm.globals.get(\"urlThingCreateThingStateInfo\");\r",
									"//get global variable to url \"/api/v1/Control/Thing\"\r",
									"var urlControlThing = pm.globals.get(\"urlControlThing\");\r",
									"//---------------- set url Remove --------------//\r",
									"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
									"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"pm.globals.set(\"urlThingRemoveThing\", urlRouteList.Thing.urlThingRemoveThing);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"pm.globals.set(\"urlThingRemoveThingStateInfo\", urlRouteList.Thing.urlThingRemoveThingStateInfo);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThingFromAccount\"\r",
									"pm.globals.set(\"urlAccountRemoveThingFromAccount\", urlRouteList.Thing.urlAccountRemoveThingFromAccount);\r",
									"//---------------- get url Remove --------------//\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThingFromAccount\"\r",
									"var urlAccountRemoveThingFromAccount = pm.globals.get(\"urlAccountRemoveThingFromAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Signin_ --------------//\r",
									"//get global variable to x_ais_OrderRef \"Signin_\"\r",
									"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"var x_ais_OrderRef_CreateThing = pm.globals.get(\"x_ais_OrderRef_CreateThing\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"var x_ais_OrderDesc_CreateThing = pm.globals.get(\"x_ais_OrderDesc_CreateThing\");\r",
									"//get global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"var x_ais_OrderRef_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderRef_CreateThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"var x_ais_OrderDesc_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_CreateThingStateInfo\");\r",
									"//get global variable to x_ais_OrderRef \"RemoveThingFromAccount_\"\r",
									"var x_ais_OrderRef_RemoveThingFromAccount = pm.globals.get(\"x_ais_OrderRef_RemoveThingFromAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThingFromAccount\"\r",
									"var x_ais_OrderDesc_RemoveThingFromAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveThingFromAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Control --------------//\r",
									"//get global variable to x_ais_OrderRef \"ControlThing_\"\r",
									"var x_ais_OrderRef_ControlThing = pm.globals.get(\"x_ais_OrderRef_ControlThing\");\r",
									"//------------------------------------------------------------//\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// Signin get token\r",
									"Signin = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSignin = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_Signin + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_UserAuthentication,\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestSignin = {\r",
									"            mode: 'raw',\r",
									"            raw:\r",
									"                JSON.stringify({\r",
									"                    username: Username,\r",
									"                    password: Password\r",
									"                })\r",
									"        };\r",
									"\r",
									"        let optionsSignin = {\r",
									"            url: url + provisioningapis + urlSignin,\r",
									"            method: 'POST',\r",
									"            header: headersOptSignin,\r",
									"            body: httpRequestSignin\r",
									"        };\r",
									"        // console.log('request Signin');\r",
									"        let response = await reqPromise(optionsSignin);\r",
									"        let jsonDataSignin = await response.json();\r",
									"\r",
									"        // setAccessToken\r",
									"        await pm.environment.set(\"AccessToken\", jsonDataSignin.AccessToken);\r",
									"\r",
									"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('Signin : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // SignInProcess is Success\r",
									"        pm.test('Signin : OperationStatus Description is ' + '\"' + resultDescriptionSuccessSignIn + '\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
									"        });\r",
									"\r",
									"        //set random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //set PartnerName\r",
									"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
									"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
									"        //set MerchantContact\r",
									"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
									"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
									"        // set CPID\r",
									"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
									"        pm.environment.set(\"CPID\", CPIDValue)\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreatePartner\r",
									"CreatePartner = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreatePartner = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreatePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreatePartner,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreatePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
									"                \"PartnerType\": [\r",
									"                    \"Supplier\",\r",
									"                    \"Customer\"\r",
									"                ],\r",
									"                \"PartnerDetail\": {\r",
									"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
									"                    \"CPID\": pm.environment.get(\"CPID\")\r",
									"                },\r",
									"                \"Property\": {\r",
									"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreatePartner = {\r",
									"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreatePartner,\r",
									"            body: httpRequestCreatePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsCreatePartner);\r",
									"        let jsonDataCreatePartner = await response.json();\r",
									"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
									"\r",
									"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreatePartner : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreatePartner is Success\r",
									"        pm.test('CreatePartner : OperationStatus Description is ' + '\"' + resultDescriptionCreatePartner + '\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
									"        });\r",
									"\r",
									"        //GetResponse_PartnerId\r",
									"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
									"\r",
									"        //Accountname\r",
									"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
									"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateAccount\r",
									"CreateAccount = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateAccount = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateAccount,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreateAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateAccount = {\r",
									"            url: url + provisioningapis + urlAccountCreateAccount,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateAccount,\r",
									"            body: httpRequestCreateAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateAccount');\r",
									"        let response = await reqPromise(optionsCreateAccount);\r",
									"        let jsonDataCreateAccount = await response.json();\r",
									"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
									"\r",
									"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateAccount : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateAccount is Success\r",
									"        pm.test('CreateAccount : OperationStatus Description is ' + '\"' + resultDescriptionCreateAccount + '\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
									"        });\r",
									"        // GetResponse_AccountName\r",
									"        pm.environment.set(\"GetResponse_AccountName\", jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
									"        // GetResponse_AccountId\r",
									"        pm.environment.set(\"GetResponse_AccountId\", jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
									"        // random_IM\r",
									"        pm.environment.set(\"random_IM\", _.random(10000000, 99999999) + \" \" + _.random(1000000, 9999999))\r",
									"        // random_ICCID\r",
									"        pm.environment.set(\"random_ICCID\", _.random(1000000, 9999999) + \" \" + _.random(100000, 999999))\r",
									"        // random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //ThingName\r",
									"        let thingNameValue = fieldDataValue.Thing.ThingNameValue; // \"Sensor_TestThingName\"\r",
									"        pm.environment.set(\"ThingName\", thingNameValue + pm.environment.get(\"random_number\"))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThing\r",
									"CreateThing = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThing = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateThing + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateThing,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey': pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreateThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingName\": pm.environment.get(\"ThingName\"),\r",
									"                \"IMEI\": pm.environment.get(\"random_IM\"),\r",
									"                \"IMSI\": pm.environment.get(\"random_IM\"),\r",
									"                \"ICCID\": pm.environment.get(\"random_ICCID\"),\r",
									"                \"RouteUrl\": fieldDataValue.Thing.RouteUrlValue , //[\"http://10.12.3.4:2019/api/information/AddInformation\"]\r",
									"                \"RouteInfo\": {\r",
									"                    \"MIMO_ID\": fieldDataValue.Thing.RouteInfoMIMOIDValue , //\"606edada\"\r",
									"                    \"MIMO_SerialNo\": fieldDataValue.Thing.RouteInfoMIMOSerialNoValue //5466758878\r",
									"                },\r",
									"                \"RouteFlag\": {\r",
									"                    \"ThingName\": fieldDataValue.Thing.RouteFlagThingNameValue , //true\r",
									"                    \"ThingToken\": fieldDataValue.Thing.RouteFlagThingTokenValue, //true\r",
									"                    \"IMEI\": fieldDataValue.Thing.RouteFlagIMEIValue, //true\r",
									"                    \"ICCID\": fieldDataValue.Thing.RouteFlagICCIDValue, //true\r",
									"                    \"RouteInfo\": fieldDataValue.Thing.RouteFlagRouteInfoValue //true\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateThing = {\r",
									"            url: url + provisioningapis + urlThingCreateThing,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThing,\r",
									"            body: httpRequestCreateThing\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThing');\r",
									"        let response = await reqPromise(optionsCreateThing);\r",
									"        let jsonDataCreateThing = await response.json();\r",
									"        // console.log('jsonDataCreateThing',jsonDataCreateThing)\r",
									"\r",
									"        let operationStatusCreateThing = await jsonDataCreateThing.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateThing : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateThing : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateThing is Success\r",
									"        pm.test('CreateThing : OperationStatus Description is ' + '\"' + resultDescriptionCreateThing + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Description', resultDescriptionCreateThing);\r",
									"        });\r",
									"\r",
									"        pm.environment.set(\"GetResponse_ThingInfo_ThingToken\", jsonDataCreateThing.ThingInfo.ThingToken)\r",
									"        pm.environment.set(\"GetResponse_ThingID\", jsonDataCreateThing.ThingInfo.ThingId)\r",
									"        pm.environment.set(\"GetResponse_IMSI\", jsonDataCreateThing.ThingInfo.IMSI)\r",
									"        \r",
									"        let keys = pm.environment.get(\"GetResponse_IMSI\") + \":\" + pm.environment.get(\"IpAddress\");\r",
									"        // console.log(\"keys\", keys);\r",
									"        let encodedKeys = CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(keys));\r",
									"        pm.environment.set(\"encodedKeys_Authorization_Register\", encodedKeys);\r",
									"\r",
									"        //Get Random Sensor \r",
									"        pm.environment.set(\"random_Sensor\", _.random(100, 999))\r",
									"\r",
									"        //Get Random Sensor AsgardHTTP\r",
									"        pm.environment.set(\"random_Sensor_AsgardHTTP\", _.random(100, 999))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThingStateInfo\r",
									"CreateThingStateInfo = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThingStateInfo = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateThingStateInfo,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey': pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        // {\"AA\" : pm.environment.get(\"random_Sensor\")}\r",
									"        let sensorValue = {};\r",
									"        sensorValue[fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP] = pm.environment.get(\"random_Sensor\");\r",
									"        // console.log('sensorValue',sensorValue);\r",
									"        \r",
									"        let httpRequestCreateThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": [\r",
									"                    pm.environment.get(\"GetResponse_ThingID\")\r",
									"                ],\r",
									"                \"Type\": fieldDataValue.CreateThingStateInfo.Type_Report,\r",
									"                \"Sensor\": sensorValue\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingCreateThingStateInfo,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThingStateInfo,\r",
									"            body: httpRequestCreateThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThingStateInfo');\r",
									"        let response = await reqPromise(optionsCreateThingStateInfo);\r",
									"        let jsonDataCreateThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataCreateThingStateInfo',jsonDataCreateThingStateInfo)\r",
									"\r",
									"        let operationStatusCreateThingStateInfo = await jsonDataCreateThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"CreateThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //CreateThingStateInfo is Success\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Description is ' + '\"' + resultDescriptionCreateThingStateInfo + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Description', resultDescriptionCreateThingStateInfo);\r",
									"        });\r",
									"\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// ControlThing\r",
									"ControlThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptControlThing = {\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_ControlThing + current_timestamp,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Content-Type':ContentType_ApplicationJson\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        // {\"AA\" : pm.environment.get(\"random_Sensor_AsgardHTTP\")}\r",
									"        let sensorValue = {};\r",
									"        sensorValue[fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP] = pm.environment.get(\"random_Sensor_AsgardHTTP\");\r",
									"        // console.log('sensorValue',sensorValue);\r",
									"\r",
									"        let httpRequestControlThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\"),\r",
									"                \"Sensors\": sensorValue\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsControlThing = {\r",
									"            url: url + controlapis + urlControlThing,\r",
									"            method: 'POST',\r",
									"            header: headersOptControlThing,\r",
									"            body: httpRequestControlThing\r",
									"        };\r",
									"\r",
									"        // console.log('response ControlThing');\r",
									"        let response = await reqPromise(optionsControlThing);\r",
									"        let jsonDataControlThing = await response.json();\r",
									"        // console.log('jsonDataControlThing',jsonDataControlThing)\r",
									"    \r",
									"        let operationStatusControlThing = await jsonDataControlThing.operationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"ControlThing : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('ControlThing : OperationStatus code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusControlThing).to.have.property('code', resultCodeSuccess);\r",
									"        });\r",
									"        //ControlOneThing is Success\r",
									"        pm.test('ControlThing : OperationStatus description is '+'\"'+ resultDescriptionSuccessControlOneThing+'\"', function () {\r",
									"            pm.expect(operationStatusControlThing).to.have.property('description', resultDescriptionSuccessControlOneThing);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThingFromAccount\r",
									"RemoveThingFromAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThingFromAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThingFromAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThingFromAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThingFromAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": [pm.environment.get(\"GetResponse_ThingID\")]\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThingFromAccount = {\r",
									"            url: url + provisioningapis + urlAccountRemoveThingFromAccount,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThingFromAccount,\r",
									"            body: httpRequestRemoveThingFromAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveThingFromAccount');\r",
									"        let response = await reqPromise(optionsRemoveThingFromAccount);\r",
									"        let jsonDataRemoveThingFromAccount = await response.json();\r",
									"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
									"    \r",
									"        let operationStatusRemoveThingFromAccount = await jsonDataRemoveThingFromAccount.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThingFromAccount : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThingFromAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingFromAccount).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThingFromAccount is Success\r",
									"        pm.test('RemoveThingFromAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThingFromAccount+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingFromAccount).to.have.property('Description', resultDescriptionRemoveThingFromAccount);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"Signin();\r",
									"setTimeout(async function(){await CreatePartner();}, 3000); \r",
									"setTimeout(async function(){await CreateAccount();}, 6000); \r",
									"setTimeout(async function(){await CreateThing();}, 8000); \r",
									"setTimeout(async function(){await CreateThingStateInfo();}, 9000); \r",
									"setTimeout(async function(){await ControlThing();}, 10000); \r",
									"setTimeout(async function(){}, 20000); //for wait\r",
									"setTimeout(async function (){await RemoveThingFromAccount();}, 30000); "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var Basic = pm.environment.get(\"Basic\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to xAisOrderRef \"RemoveThing_\"\r",
									"var x_ais_OrderRef_RemoveThing = pm.globals.get(\"x_ais_OrderRef_RemoveThing\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"var x_ais_OrderDesc_RemoveThing = pm.globals.get(\"x_ais_OrderDesc_RemoveThing\");\r",
									"//get global variable to xAisOrderRef \"RemoveThingStateInfo_\"\r",
									"var x_ais_OrderRef_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderRef_RemoveThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThingStateInfo\"\r",
									"var x_ais_OrderDesc_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_RemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals AsgardHTTP --------------//\r",
									"//get global variable to x_ais_OrderRef \"RegisHTTP_\"\r",
									"var x_ais_OrderRef_RegisHTTP = pm.globals.get(\"x_ais_OrderRef_RegisHTTP\");\r",
									"//get global variable to x_ais_OrderRef \"RegisHTTPfail_\"\r",
									"var x_ais_OrderRef_RegisHTTP_fail = pm.globals.get(\"x_ais_OrderRef_RegisHTTP_fail\");\r",
									"//get global variable to x_ais_OrderDesc \"Register Thing in MG\"\r",
									"var x_ais_OrderDesc_RegisHTTP = pm.globals.get(\"x_ais_OrderDesc_RegisHTTP\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get url Remove --------------//\r",
									"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
									"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"var urlThingRemoveThing = pm.globals.get(\"urlThingRemoveThing\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"var urlThingRemoveThingStateInfo = pm.globals.get(\"urlThingRemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"RemovePartner is Success\"\r",
									"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
									"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
									"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
									"//get global variable to resultDescription \"RemoveThing is Success\"\r",
									"var resultDescriptionRemoveThing = pm.globals.get(\"resultDescriptionRemoveThing\");\r",
									"//get global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"var resultDescriptionRemoveThingStateInfo = pm.globals.get(\"resultDescriptionRemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 404\r",
									"var statusCodeNotFound = pm.globals.get(\"statusCodeNotFound\");\r",
									"//get global variable to resultCode \"40400\"\r",
									"var resultCodeNotFound = pm.globals.get(\"resultCodeNotFound\");\r",
									"//get global variable to resultDescription \"The requested operation could not be found.\"\r",
									"var resultDescriptionTheRequestedOperationCouldNotBeFound = pm.globals.get(\"resultDescriptionTheRequestedOperationCouldNotBeFound\");\r",
									"//------------------------------------------------------------//\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Asgard HTTP(eSim) Register : Status code is \" + statusCodeNotFound, function () {\r",
									"    pm.response.to.have.status(statusCodeNotFound);\r",
									"});\r",
									"\r",
									"pm.test('Asgard HTTP(eSim) Register : operationStatus code is '+'\"'+ resultCodeNotFound +'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeNotFound);\r",
									"});\r",
									"\r",
									"pm.test('Asgard HTTP(eSim) Register : operationStatus DeveloperMessage is '+'\"'+ resultDescriptionTheRequestedOperationCouldNotBeFound+'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheRequestedOperationCouldNotBeFound);\r",
									"});\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// RemovePartner\r",
									" RemovePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemovePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemovePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemovePartner = {\r",
									"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemovePartner,\r",
									"            body: httpRequestRemovePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request RemovePartner');\r",
									"        let response = await reqPromise(optionsRemovePartner);\r",
									"        let jsonDataRemovePartner = await response.json();\r",
									"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
									"    \r",
									"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemovePartner is Success\r",
									"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveAccount\r",
									" RemoveAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemoveAccount = {\r",
									"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveAccount,\r",
									"            body: httpRequestRemoveAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveAccount');\r",
									"        let response = await reqPromise(optionsRemoveAccount);\r",
									"        let jsonDataRemoveAccount = await response.json();\r",
									"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
									"    \r",
									"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveAccount is Success\r",
									"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThing\r",
									" RemoveThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThing = {\r",
									"            url: url + provisioningapis + urlThingRemoveThing,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThing,\r",
									"            body: httpRequestRemoveThing\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveThing');\r",
									"        let response = await reqPromise(optionsRemoveThing);\r",
									"        let jsonDataRemoveThing = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThing)\r",
									"    \r",
									"        let operationStatusRemoveThing = await jsonDataRemoveThing.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThing : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThing : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThing is Success\r",
									"        pm.test('RemoveThing : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThing+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Description', resultDescriptionRemoveThing);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThingStateInfo\r",
									" RemoveThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"            \r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\"),\r",
									"                \"stateType\": fieldDataValue.CreateThingStateInfo.Type_Report, //Report\r",
									"                \"stateKey\": fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP //AA\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingRemoveThingStateInfo,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThingStateInfo,\r",
									"            body: httpRequestRemoveThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('response RemoveThingStateInfo');\r",
									"        let response = await reqPromise(optionsRemoveThingStateInfo);\r",
									"        let jsonDataRemoveThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThingStateInfo)\r",
									"    \r",
									"        let operationStatusRemoveThingStateInfo = await jsonDataRemoveThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThingStateInfo is Success\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThingStateInfo+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Description', resultDescriptionRemoveThingStateInfo);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"//---------------- LogDefaultValue --------------//\r",
									"//set variable to LogDefaultValue JSON.parse\r",
									"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
									"// console.log('LogDefaultValue',LogDefaultValue);\r",
									"//---------------- set globals Other --------------//\r",
									"\r",
									"var SearchLog = LogDefaultValue.SearchLog;\r",
									"// console.log('SearchLog',SearchLog);\r",
									"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
									"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
									"var kbn_version = SearchLog.header.kbn_version;\r",
									"var authorization = SearchLog.header.Authorization;\r",
									"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
									"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
									"var namespace = LogDefaultValue.Other.namespace;\r",
									"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
									"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
									"var header_x_ais_username = LogDefaultValue.Other.header_x_ais_username;\r",
									"var methodPost = LogDefaultValue.Other.methodPost;\r",
									"// var methodGet = LogDefaultValue.Other.methodGet;\r",
									"\r",
									"// Detail\r",
									"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
									"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
									"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
									"\r",
									"// Summary\r",
									"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
									"\r",
									"// Asgard.Http.APIs\r",
									"var applicationName = LogDefaultValue.AsgardHTTP.applicationName;\r",
									"var cmdName = LogDefaultValue.AsgardHTTP.cmdNameRegister;\r",
									"var containerId = LogDefaultValue.AsgardHTTP.containerId;\r",
									"var requestObjectUrlStaging = LogDefaultValue.AsgardHTTP.requestObjectUrlRegisterMgStaging;\r",
									"var urlRegister = LogDefaultValue.AsgardHTTP.urlRegister;\r",
									"\r",
									"// Check CDR (Summary Log) and EDR (Detail Log)\r",
									"SearchLogFindTid = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSearchLogFindTid = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = x_ais_OrderRef_RegisHTTP_fail+ current_timestamp; \r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestSearchLogFindTid = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"phrase\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"\r",
									"        let optionsSearchLogFindTid = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptSearchLogFindTid,\r",
									"            body: httpRequestSearchLogFindTid\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsSearchLogFindTid);\r",
									"        let jsonDataSearchLogFindTid = await response.json();\r",
									"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
									"        // console.log('hits',hits)\r",
									"  \r",
									"        // find tid\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            // let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"        \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            if(applicationNameValue == applicationName){\r",
									"                let tid = hits[i]._source.cauldron.tid;\r",
									"                pm.environment.set(\"tid\", tid);\r",
									"                break;\r",
									"           }\r",
									"        }\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"CheckLog = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCheckLog = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = pm.environment.get(\"tid\");\r",
									"\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        // console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestCheckLog = {\r",
									"            mode: 'raw',\r",
									"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"phrase\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"        let optionsCheckLog = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptCheckLog,\r",
									"            body: httpRequestCheckLog\r",
									"        }; \r",
									"        let response = await reqPromise(optionsCheckLog);\r",
									"        let jsonDataCheckLog = await response.json();\r",
									"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
									"        \r",
									"        // //200\r",
									"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });     \r",
									"        \r",
									"        let hits = jsonDataCheckLog.hits.hits\r",
									"        console.log('hits',hits)\r",
									"  \r",
									"        // find logType\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            //  let logType = hits[i]._source.cauldron.logType\r",
									"            let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"           \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            \r",
									"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
									"            // console.log('resultDataLog',resultDataLog)\r",
									"\r",
									"            let tidControl = x_ais_OrderRef_RegisHTTP_fail  + current_timestamp;\r",
									"            // console.log(tidControl);\r",
									"            if(applicationNameValue == applicationName){\r",
									"                 \r",
									"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and Asgard.Http.APIs\r",
									"                    pm.test(\"Check Summary Log : Asgard_HTTP(eSim) Register\" , function () {\r",
									"                        console.log(\"======== Check Summary Log ( Expected = Actual) [Asgard_HTTP(eSim) Register] ==================\");\r",
									"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
									"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
									"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeNotFound);\r",
									"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionTheRequestedOperationCouldNotBeFound);\r",
									"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
									"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        // console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
									"                        // console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
									"\r",
									"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
									"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
									"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeNotFound); \r",
									"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionTheRequestedOperationCouldNotBeFound); \r",
									"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
									"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"\r",
									"                        let thingId = pm.environment.get(\"GetResponse_ThingID\");\r",
									"                        let imei = (pm.environment.get(\"random_IM\")).replace(\" \", \"\");\r",
									"                        let imsi = (pm.environment.get(\"GetResponse_IMSI\")).replace(\" \", \"\");\r",
									"                        let customUrl= urlCheckLog + requestObjectUrlStaging;\r",
									"\r",
									"                        // check identity\r",
									"                        // \"identity\":\"{\\\"Imei\\\":\\\"496151103122639\\\",\\\"ThingId\\\":\\\"6013965896d0ed0001f5a46d\\\",\\\"Imsi\\\":\\\"496151103122639\\\"}\"\r",
									"                        let dataSummaryIdentity = JSON.parse(resultDataLog.identity);\r",
									"\r",
									"                        console.log(\"identity.ThingId : \" + dataSummaryIdentity.ThingId + \" = \" + thingId);\r",
									"                        console.log(\"identity.Imei : \" + dataSummaryIdentity.Imei + \" = \" + imei);\r",
									"                        console.log(\"identity.Imsi : \" + dataSummaryIdentity.Imsi + \" = \" + imsi);\r",
									"\r",
									"                        pm.expect(dataSummaryIdentity.ThingId).to.eql(thingId); \r",
									"                        pm.expect(dataSummaryIdentity.Imei).to.eql(imei); \r",
									"                        pm.expect(dataSummaryIdentity.Imsi).to.eql(imsi); \r",
									"\r",
									"                        // check custom\r",
									"                        // \\\"custom\\\":{ \\\"customData\\\":{ \\\"Imsi\\\":[ \\\"562765119674059\\\" ], \\\"url\\\":\\\"mg-iot.sandais.com/api/register/sim/v1\\\", \\\"Imei\\\":[ \\\"562765119674059\\\" ], \\\"ThingId\\\":[ \\\"609ab143d82815000186964b\\\" ] }, \\\"endPointSummary\\\":[ { \\\"no\\\":\\\"1\\\", \\\"endPointName\\\":\\\"db.ThingsCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:Inquiry was Success\\\", \\\"processTime\\\":0.0004 } ] }\r",
									"\r",
									"                        let customData = resultDataLog.custom.customData\r",
									"\r",
									"                        console.log(\"custom.url : \" + customData.url + \" = \" + customUrl);\r",
									"                        console.log(\"custom.Imei[0] : \" + customData.Imei[0] + \" = \" + imei);\r",
									"                        console.log(\"custom.Imsi[0] : \" + customData.Imsi[0] + \" = \" + imsi);\r",
									"                        console.log(\"custom.ThingId[0] : \" + customData.ThingId[0] + \" = \" + thingId);\r",
									"\r",
									"                        pm.expect(customData.url).to.eql(customUrl); \r",
									"                        pm.expect(customData.Imei[0]).to.eql(imei); \r",
									"                        pm.expect(customData.Imsi[0]).to.eql(imsi); \r",
									"                        pm.expect(customData.ThingId[0]).to.eql(thingId); \r",
									"\r",
									"                        let custom = resultDataLog.custom.endPointSummary;\r",
									"                        let countCustom = custom.length;\r",
									"                       \r",
									"                        // [\"db.ThingsCollection\"]\r",
									"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_Asgard_HTTP_eSim_Register_002_004_005_006;\r",
									"                        // [\"20000:Inquiry was Success\"]\r",
									"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_Asgard_HTTP_eSim_Register_002_004_005_006;\r",
									"                        let countCustomStep = dataEndPointName.length;\r",
									"\r",
									"                        console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep);\r",
									"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
									"                        \r",
									"                        for(let i=0;i<countCustomStep;i++){\r",
									"                            let no = custom[i].no;\r",
									"                            let valueEndPointName = custom[i].endPointName;\r",
									"                            let valueResponseStatus = custom[i].responseStatus;\r",
									"                            // console.log(\"i\",i);\r",
									"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
									"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
									"\r",
									"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString());\r",
									"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i]);\r",
									"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i]);\r",
									"\r",
									"                            pm.expect(no).to.eql((i+1).toString()); \r",
									"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
									"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]); \r",
									"                        }\r",
									"                    }); \r",
									"                }\r",
									"\r",
									"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and Asgard.Http.APIs\r",
									"\r",
									"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
									"                    // console.log('endPointNameValue ',endPointNameValue)\r",
									"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [Asgard_HTTP(eSim) Register]\", function () {\r",
									"                        console.log(\"======== Check Detail Log ( Expected = Actual) [Asgard_HTTP(eSim) Register] ==================\");\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
									"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
									"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
									"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.custom1.activityLog.processTime + \" = \" + resultDataLog.custom1.activityLog.processTime);\r",
									"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
									"\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
									"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
									"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
									"\r",
									"                        if( endPointNameValue == undefined){\r",
									"                            // check requestObject\r",
									"                            // \"requestObject\":\"{\\\"url\\\":\\\"/api/register/sim/v1\\\",\\\"method\\\":\\\"POST\\\",\\\"headers\\\":{\\\"Cache-Control\\\":\\\"no-cache\\\",\\\"Content-Type\\\":\\\"application/json\\\",\\\"Accept\\\":\\\"*/*\\\",\\\"Accept-Encoding\\\":\\\"gzip,deflate,br\\\",\\\"Authorization\\\":\\\"Basic NDk2MTUxMTAzMTIyNjM5OjEuMi4zLjQ=\\\",\\\"Host\\\":\\\"mg-staging.sandais.com\\\",\\\"User-Agent\\\":\\\"PostmanRuntime/7.26.8\\\",\\\"Content-Length\\\":\\\"2\\\",\\\"x-real-ip\\\":\\\"171.96.174.10\\\",\\\"x-forwarded-for\\\":\\\"171.96.174.10\\\",\\\"x-forwarded-proto\\\":\\\"https\\\",\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"RegisHTTP_202101291201997\\\",\\\"x-ais-orderdesc\\\":\\\"Register Thing in MG\\\",\\\"postman-token\\\":\\\"83bc76b4-8538-4a10-94fc-8b9cc1143ec8\\\",\\\"x-request-id\\\":\\\"bbf6c560-8bea-4d53-87d8-28a3f3664d37\\\",\\\"x-b3-traceid\\\":\\\"eb252eaef48d4ec507b32acd0a8dc573\\\",\\\"x-b3-spanid\\\":\\\"07b32acd0a8dc573\\\",\\\"x-b3-sampled\\\":\\\"0\\\",\\\"x-ais-SessionId\\\":\\\"1611896410502\\\",\\\"identity\\\":\\\"{\\\\\\\"Imei\\\\\\\":null,\\\\\\\"ThingId\\\\\\\":null,\\\\\\\"Imsi\\\\\\\":\\\\\\\"496151103122639xx\\\\\\\"}\\\",\\\"custom\\\":\\\"{\\\\\\\"Imsi\\\\\\\":[\\\\\\\"496151103122639xx\\\\\\\"],\\\\\\\"url\\\\\\\":\\\\\\\"mg-staging.sandais.com/api/register/sim/v1\\\\\\\",\\\\\\\"Imei\\\\\\\":null,\\\\\\\"ThingId\\\\\\\":null}\\\"},\\\"queryString\\\":{},\\\"routeParamteters\\\":{},\\\"body\\\":{}}\"\r",
									"\r",
									"                            // \\\"requestObject\\\":\\\"{ \\\\\\\"url\\\\\\\":\\\\\\\"/api/register/sim/v1\\\\\\\", \\\\\\\"method\\\\\\\":\\\\\\\"POST\\\\\\\", \\\\\\\"headers\\\\\\\":{ \\\\\\\"Cache-Control\\\\\\\":\\\\\\\"no-cache\\\\\\\", \\\\\\\"Content-Type\\\\\\\":\\\\\\\"application/json\\\\\\\", \\\\\\\"Accept\\\\\\\":\\\\\\\"*/*\\\\\\\", \\\\\\\"Accept-Encoding\\\\\\\":\\\\\\\"gzip, deflate, br\\\\\\\", \\\\\\\"Authorization\\\\\\\":\\\\\\\"Basic NTYyNzY1MTE5Njc0MDU5OjEuMi4zLjQ=\\\\\\\", \\\\\\\"Host\\\\\\\":\\\\\\\"mg-iot.sandais.com\\\\\\\", \\\\\\\"User-Agent\\\\\\\":\\\\\\\"PostmanRuntime/7.26.8\\\\\\\", \\\\\\\"Content-Length\\\\\\\":\\\\\\\"2\\\\\\\", \\\\\\\"x-real-ip\\\\\\\":\\\\\\\"182.232.183.255\\\\\\\", \\\\\\\"x-forwarded-for\\\\\\\":\\\\\\\"182.232.183.255, 10.233.66.0\\\\\\\", \\\\\\\"x-forwarded-proto\\\\\\\":\\\\\\\"http\\\\\\\", \\\\\\\"x-ais-username\\\\\\\":\\\\\\\"AisPartner\\\\\\\", \\\\\\\"x-ais-orderref\\\\\\\":\\\\\\\"RegisHTTPfail_202105112305655\\\\\\\", \\\\\\\"x-ais-orderdesc\\\\\\\":\\\\\\\"Register Thing in MG\\\\\\\", \\\\\\\"postman-token\\\\\\\":\\\\\\\"711adacc-789d-4d15-9c9e-acb23584bd8f\\\\\\\", \\\\\\\"x-envoy-external-address\\\\\\\":\\\\\\\"10.233.66.0\\\\\\\", \\\\\\\"x-request-id\\\\\\\":\\\\\\\"ea40386d-5aa8-4744-9c84-393a906df187\\\\\\\", \\\\\\\"x-envoy-original-path\\\\\\\":\\\\\\\"/httpapis/api/register/sim/v1\\\\\\\", \\\\\\\"x-b3-traceid\\\\\\\":\\\\\\\"1642c2c44dc5d853f51da65894ab8de2\\\\\\\", \\\\\\\"x-b3-spanid\\\\\\\":\\\\\\\"3d9517bed98649f5\\\\\\\", \\\\\\\"x-b3-parentspanid\\\\\\\":\\\\\\\"f51da65894ab8de2\\\\\\\", \\\\\\\"x-b3-sampled\\\\\\\":\\\\\\\"0\\\\\\\", \\\\\\\"x-ais-SessionId\\\\\\\":\\\\\\\"1620750681513\\\\\\\", \\\\\\\"identity\\\\\\\":\\\\\\\"{ \\\\\\\\\\\\\\\"Imei\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"562765119674059\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"ThingId\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"609ab143d82815000186964b\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Imsi\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"562765119674059\\\\\\\\\\\\\\\" }\\\\\\\", \\\\\\\"custom\\\\\\\":\\\\\\\"{ \\\\\\\\\\\\\\\"Imsi\\\\\\\\\\\\\\\":[ \\\\\\\\\\\\\\\"562765119674059\\\\\\\\\\\\\\\" ], \\\\\\\\\\\\\\\"url\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"mg-iot.sandais.com/api/register/sim/v1\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Imei\\\\\\\\\\\\\\\":[ \\\\\\\\\\\\\\\"562765119674059\\\\\\\\\\\\\\\" ], \\\\\\\\\\\\\\\"ThingId\\\\\\\\\\\\\\\":[ \\\\\\\\\\\\\\\"609ab143d82815000186964b\\\\\\\\\\\\\\\" ] }\\\\\\\" }, \\\\\\\"queryString\\\\\\\":{ }, \\\\\\\"routeParamteters\\\\\\\":{ }, \\\\\\\"body\\\\\\\":{ } }\\\"\r",
									"\r",
									"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
									"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
									"\r",
									"                            let url = urlRegister; \r",
									"                            let x_ais_orderref = x_ais_OrderRef_RegisHTTP_fail + current_timestamp;\r",
									"                            let x_ais_orderdesc = x_ais_OrderDesc_RegisHTTP;\r",
									"                            let x_ais_userName = x_ais_UserName_AisPartner;\r",
									"                            let authorization = Basic + ' ' + pm.environment.get(\"encodedKeys_Authorization_Register\");\r",
									"                            let imei = (pm.environment.get(\"random_IM\")).replace(\" \", \"\");\r",
									"                            let imsi = (pm.environment.get(\"GetResponse_IMSI\")).replace(\" \", \"\");\r",
									"                            let thingId = pm.environment.get(\"GetResponse_ThingID\");\r",
									"                            let customUrl= urlCheckLog + requestObjectUrlStaging;\r",
									"\r",
									"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
									"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
									"                            console.log(\"headers.x_ais_userName : \" + jsonParseRequestObject.headers[header_x_ais_username] + \" = \" + x_ais_userName);\r",
									"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
									"                            console.log(\"headers.Authorization : \" + jsonParseRequestObject.headers.Authorization + \" = \" + authorization);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
									"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_username]).to.eql(x_ais_userName);\r",
									"                            pm.expect(jsonParseRequestObject.headers.Authorization).to.eql(authorization);\r",
									"\r",
									"                            // check requestObject headers.identity\r",
									"                            let jsonParseRequestObjectHeadersIdentity = JSON.parse(jsonParseRequestObject.headers.identity);\r",
									"                            // console.log('jsonParseRequestObjectHeadersIdentity',jsonParseRequestObjectHeadersIdentity);\r",
									"\r",
									"                            console.log(\"headers.identity.Imei : \" + jsonParseRequestObjectHeadersIdentity.Imei + \" = \" + imei);\r",
									"                            console.log(\"headers.identity.Imsi : \" + jsonParseRequestObjectHeadersIdentity.Imsi + \" = \" + imsi);\r",
									"                            console.log(\"headers.identity.ThingId : \" + jsonParseRequestObjectHeadersIdentity.ThingId + \" = \" + thingId);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObjectHeadersIdentity.Imei).to.eql(imei);\r",
									"                            pm.expect(jsonParseRequestObjectHeadersIdentity.Imsi).to.eql(imsi);\r",
									"                            pm.expect(jsonParseRequestObjectHeadersIdentity.ThingId).to.eql(thingId);\r",
									"\r",
									"                            // check requestObject headers.custom\r",
									"                            let jsonParseRequestObjectHeadersCustom = JSON.parse(jsonParseRequestObject.headers.custom);\r",
									"                            // console.log('jsonParseRequestObjectHeadersCustom',jsonParseRequestObjectHeadersCustom);\r",
									"\r",
									"                            console.log(\"headers.custom.url : \" + jsonParseRequestObjectHeadersCustom.url + \" = \" + customUrl);\r",
									"                            console.log(\"headers.custom.Imei[0] : \" + jsonParseRequestObjectHeadersCustom.Imei[0] + \" = \" + imei);\r",
									"                            console.log(\"headers.custom.Imsi[0] : \" + jsonParseRequestObjectHeadersCustom.Imsi[0] + \" = \" + imsi);\r",
									"                            console.log(\"headers.custom.ThingId[0] : \" + jsonParseRequestObjectHeadersCustom.ThingId[0] + \" = \" + thingId);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObjectHeadersCustom.url).to.eql(customUrl);\r",
									"                            pm.expect(jsonParseRequestObjectHeadersCustom.Imei[0]).to.eql(imei);\r",
									"                            pm.expect(jsonParseRequestObjectHeadersCustom.Imsi[0]).to.eql(imsi);\r",
									"                            pm.expect(jsonParseRequestObjectHeadersCustom.ThingId[0]).to.eql(thingId);\r",
									"                            \r",
									"                            console.log(\"queryString : \" + JSON.stringify(jsonParseRequestObject.queryString) + \" = \" + JSON.stringify({}));\r",
									"                            console.log(\"routeParamteters : \" + JSON.stringify(jsonParseRequestObject.routeParamteters) + \" = \" + JSON.stringify({}));\r",
									"                            console.log(\"body : \" + JSON.stringify(jsonParseRequestObject.body) + \" = \" + JSON.stringify({}));\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.queryString).to.eql({}); \r",
									"                            pm.expect(jsonParseRequestObject.routeParamteters).to.eql({}); \r",
									"                            pm.expect(jsonParseRequestObject.body).to.eql({}); \r",
									"\r",
									"                            // check responseObject\r",
									"                            // responseObject: \"{\"OperationStatus\":{\"Code\":\"40400\",\"DeveloperMessage\":\"The requested operation could not be found.\"}}\"\r",
									"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
									"                            // console.log('jsonParseResponseObject',jsonParseResponseObject); \r",
									"\r",
									"                            console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeNotFound);\r",
									"                            console.log(\"response.OperationStatus.DeveloperMessage : \" + jsonParseResponseObject.OperationStatus.DeveloperMessage + \" = \" + resultDescriptionTheRequestedOperationCouldNotBeFound); \r",
									"\r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeNotFound);  \r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheRequestedOperationCouldNotBeFound);  \r",
									"                        }\r",
									"                    }); \r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"setTimeout(function(){SearchLogFindTid();}, 40000); \r",
									"setTimeout(function(){CheckLog();}, 60000); \r",
									"\r",
									"setTimeout(function(){RemoveAccount();}, 80000); \r",
									"setTimeout(function(){RemovePartner();}, 90000); \r",
									"\r",
									"setTimeout(function(){\r",
									"pm.environment.unset(\"current_timestamp\");\r",
									"pm.environment.unset(\"AccessToken\");\r",
									"pm.environment.unset(\"random_number\");\r",
									"pm.environment.unset(\"PartnerName\");\r",
									"pm.environment.unset(\"MerchantContact\");\r",
									"pm.environment.unset(\"CPID\");\r",
									"pm.environment.unset(\"GetResponse_PartnerId\");\r",
									"pm.environment.unset(\"AccountName\");\r",
									"pm.environment.unset(\"GetResponse_ThingInfo_ThingToken\");\r",
									"pm.environment.unset(\"GetResponse_AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountId\");\r",
									"pm.environment.unset(\"random_IM\");\r",
									"pm.environment.unset(\"random_ICCID\");\r",
									"pm.environment.unset(\"ThingName\");\r",
									"pm.environment.unset(\"GetResponse_ThingID\");\r",
									"pm.environment.unset(\"GetResponse_IMSI\");\r",
									"pm.environment.unset(\"encodedKeys_Authorization_Register\");\r",
									"pm.environment.unset(\"random_Sensor\");\r",
									"pm.environment.unset(\"random_Sensor_AsgardHTTP\");\r",
									"pm.environment.unset(\"GetResponse_ThingToken\");\r",
									"pm.environment.unset(\"tid\");\r",
									"}, 95000); \r",
									"setTimeout(async function(){}, 100000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-ais-UserName",
								"type": "text",
								"value": "{{x_ais_UserName_AisPartner}}"
							},
							{
								"key": "x-ais-OrderRef",
								"value": "{{x_ais_OrderRef_RegisHTTP_fail}}{{current_timestamp}}"
							},
							{
								"key": "x-ais-OrderDesc",
								"type": "text",
								"value": "{{x_ais_OrderDesc_RegisHTTP}}"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{Basic}} {{encodedKeys_Authorization_Register}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}{{httpapis}}/api/register/sim/v1",
							"host": [
								"{{url}}{{httpapis}}"
							],
							"path": [
								"api",
								"register",
								"sim",
								"v1"
							]
						},
						"description": "Type:Desire"
					},
					"response": []
				},
				{
					"name": "AsgardHTTPeSimRegister_TST_F4_0_2_005_Error_ThingtokenAlreadyExist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var Basic = pm.environment.get(\"Basic\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to xAisOrderRef \"RemoveThing_\"\r",
									"var x_ais_OrderRef_RemoveThing = pm.globals.get(\"x_ais_OrderRef_RemoveThing\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"var x_ais_OrderDesc_RemoveThing = pm.globals.get(\"x_ais_OrderDesc_RemoveThing\");\r",
									"//get global variable to xAisOrderRef \"RemoveThingStateInfo_\"\r",
									"var x_ais_OrderRef_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderRef_RemoveThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThingStateInfo\"\r",
									"var x_ais_OrderDesc_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_RemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals AsgardHTTP --------------//\r",
									"//get global variable to x_ais_OrderRef \"RegisHTTP_\"\r",
									"var x_ais_OrderRef_RegisHTTP = pm.globals.get(\"x_ais_OrderRef_RegisHTTP\");\r",
									"//get global variable to x_ais_OrderRef \"RegisHTTPfail_\"\r",
									"var x_ais_OrderRef_RegisHTTP_fail = pm.globals.get(\"x_ais_OrderRef_RegisHTTP_fail\");\r",
									"//get global variable to x_ais_OrderDesc \"Register Thing in MG\"\r",
									"var x_ais_OrderDesc_RegisHTTP = pm.globals.get(\"x_ais_OrderDesc_RegisHTTP\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get url Remove --------------//\r",
									"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
									"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"var urlThingRemoveThing = pm.globals.get(\"urlThingRemoveThing\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"var urlThingRemoveThingStateInfo = pm.globals.get(\"urlThingRemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"RemovePartner is Success\"\r",
									"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
									"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
									"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
									"//get global variable to resultDescription \"RemoveThing is Success\"\r",
									"var resultDescriptionRemoveThing = pm.globals.get(\"resultDescriptionRemoveThing\");\r",
									"//get global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"var resultDescriptionRemoveThingStateInfo = pm.globals.get(\"resultDescriptionRemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 403\r",
									"var statusCodeForbidden = pm.globals.get(\"statusCodeForbidden\");\r",
									"//get global variable to resultCode \"40301\"\r",
									"var resultCodeTheClientRequestedAlreadyExists = pm.globals.get(\"resultCodeTheClientRequestedAlreadyExists\");\r",
									"//get global variable to resultDescription \"The ThingIdentifier requested already exists.\"\r",
									"var resultDescriptionTheThingIdentifierRequestedAlreadyExists = pm.globals.get(\"resultDescriptionTheThingIdentifierRequestedAlreadyExists\");\r",
									"//------------------------------------------------------------//\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Asgard HTTP(eSim) Register : Status code is \" + statusCodeForbidden, function () {\r",
									"    pm.response.to.have.status(statusCodeForbidden);\r",
									"});\r",
									"\r",
									"pm.test('Asgard HTTP(eSim) Register : operationStatus code is '+'\"'+ resultCodeTheClientRequestedAlreadyExists +'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeTheClientRequestedAlreadyExists);\r",
									"});\r",
									"\r",
									"pm.test('Asgard HTTP(eSim) Register : operationStatus DeveloperMessage is '+'\"'+ resultDescriptionTheThingIdentifierRequestedAlreadyExists+'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheThingIdentifierRequestedAlreadyExists);\r",
									"});\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// RemovePartner\r",
									" RemovePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemovePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemovePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemovePartner = {\r",
									"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemovePartner,\r",
									"            body: httpRequestRemovePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request RemovePartner');\r",
									"        let response = await reqPromise(optionsRemovePartner);\r",
									"        let jsonDataRemovePartner = await response.json();\r",
									"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
									"    \r",
									"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemovePartner is Success\r",
									"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveAccount\r",
									" RemoveAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemoveAccount = {\r",
									"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveAccount,\r",
									"            body: httpRequestRemoveAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveAccount');\r",
									"        let response = await reqPromise(optionsRemoveAccount);\r",
									"        let jsonDataRemoveAccount = await response.json();\r",
									"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
									"    \r",
									"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveAccount is Success\r",
									"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThing\r",
									" RemoveThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThing = {\r",
									"            url: url + provisioningapis + urlThingRemoveThing,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThing,\r",
									"            body: httpRequestRemoveThing\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveThing');\r",
									"        let response = await reqPromise(optionsRemoveThing);\r",
									"        let jsonDataRemoveThing = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThing)\r",
									"    \r",
									"        let operationStatusRemoveThing = await jsonDataRemoveThing.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThing : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThing : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThing is Success\r",
									"        pm.test('RemoveThing : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThing+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Description', resultDescriptionRemoveThing);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThingStateInfo\r",
									" RemoveThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"            \r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\"),\r",
									"                \"stateType\": fieldDataValue.CreateThingStateInfo.Type_Report, //Report\r",
									"                \"stateKey\": fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP //AA\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingRemoveThingStateInfo,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThingStateInfo,\r",
									"            body: httpRequestRemoveThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('response RemoveThingStateInfo');\r",
									"        let response = await reqPromise(optionsRemoveThingStateInfo);\r",
									"        let jsonDataRemoveThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThingStateInfo)\r",
									"    \r",
									"        let operationStatusRemoveThingStateInfo = await jsonDataRemoveThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThingStateInfo is Success\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThingStateInfo+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Description', resultDescriptionRemoveThingStateInfo);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"//---------------- LogDefaultValue --------------//\r",
									"//set variable to LogDefaultValue JSON.parse\r",
									"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
									"// console.log('LogDefaultValue',LogDefaultValue);\r",
									"//---------------- set globals Other --------------//\r",
									"\r",
									"var SearchLog = LogDefaultValue.SearchLog;\r",
									"// console.log('SearchLog',SearchLog);\r",
									"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
									"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
									"var kbn_version = SearchLog.header.kbn_version;\r",
									"var authorization = SearchLog.header.Authorization;\r",
									"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
									"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
									"var namespace = LogDefaultValue.Other.namespace;\r",
									"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
									"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
									"var header_x_ais_username = LogDefaultValue.Other.header_x_ais_username;\r",
									"var methodPost = LogDefaultValue.Other.methodPost;\r",
									"// var methodGet = LogDefaultValue.Other.methodGet;\r",
									"\r",
									"// Detail\r",
									"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
									"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
									"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
									"\r",
									"// Summary\r",
									"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
									"\r",
									"// Asgard.Http.APIs\r",
									"var applicationName = LogDefaultValue.AsgardHTTP.applicationName;\r",
									"var cmdName = LogDefaultValue.AsgardHTTP.cmdNameRegister;\r",
									"var containerId = LogDefaultValue.AsgardHTTP.containerId;\r",
									"var requestObjectUrlStaging = LogDefaultValue.AsgardHTTP.requestObjectUrlRegisterMgStaging;\r",
									"var urlRegister = LogDefaultValue.AsgardHTTP.urlRegister;\r",
									"\r",
									"// Check CDR (Summary Log) and EDR (Detail Log)\r",
									"SearchLogFindTid = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSearchLogFindTid = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = pm.globals.get(\"x_ais_OrderRef_RegisHTTP_fail\")+ current_timestamp; \r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestSearchLogFindTid = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"phrase\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"\r",
									"        let optionsSearchLogFindTid = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptSearchLogFindTid,\r",
									"            body: httpRequestSearchLogFindTid\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsSearchLogFindTid);\r",
									"        let jsonDataSearchLogFindTid = await response.json();\r",
									"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
									"        console.log('hits',hits)\r",
									"  \r",
									"        // find tid\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            // let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"        \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            if(applicationNameValue == applicationName){\r",
									"                let tid = hits[i]._source.cauldron.tid;\r",
									"                pm.environment.set(\"tid\", tid);\r",
									"                break;\r",
									"           }\r",
									"        }\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"CheckLog = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCheckLog = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = pm.environment.get(\"tid\");\r",
									"\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestCheckLog = {\r",
									"            mode: 'raw',\r",
									"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"phrase\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"        let optionsCheckLog = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptCheckLog,\r",
									"            body: httpRequestCheckLog\r",
									"        }; \r",
									"        let response = await reqPromise(optionsCheckLog);\r",
									"        let jsonDataCheckLog = await response.json();\r",
									"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
									"        \r",
									"        // //200\r",
									"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });     \r",
									"        \r",
									"        let hits = jsonDataCheckLog.hits.hits\r",
									"        console.log('hits',hits)\r",
									"  \r",
									"        // find logType\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            //  let logType = hits[i]._source.cauldron.logType\r",
									"            let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"           \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            \r",
									"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
									"            // console.log('resultDataLog',resultDataLog)\r",
									"\r",
									"            let tidControl = pm.globals.get(\"x_ais_OrderRef_RegisHTTP_fail\")  + current_timestamp;\r",
									"            // console.log(tidControl);\r",
									"            if(applicationNameValue == applicationName){\r",
									"                 \r",
									"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and Asgard.Http.APIs\r",
									"                    pm.test(\"Check Summary Log : Asgard_HTTP(eSim) Register\" , function () {\r",
									"                        console.log(\"======== Check Summary Log ( Expected = Actual) [Asgard_HTTP(eSim) Register] ==================\");\r",
									"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
									"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
									"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeTheClientRequestedAlreadyExists);\r",
									"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionTheThingIdentifierRequestedAlreadyExists);\r",
									"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
									"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        // console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
									"                        // console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
									"\r",
									"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
									"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
									"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeTheClientRequestedAlreadyExists); \r",
									"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionTheThingIdentifierRequestedAlreadyExists); \r",
									"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
									"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"\r",
									"                        let thingId = fieldDataValue.AsgardHTTP.Value_AsgardHTTPeSim_Register_TST_F4_0_2_005_ThingId_Error;\r",
									"                        let imei = fieldDataValue.AsgardHTTP.Value_AsgardHTTPeSim_Register_TST_F4_0_2_005_Imei_Error;\r",
									"                        let imsi = fieldDataValue.AsgardHTTP.Value_AsgardHTTPeSim_Register_TST_F4_0_2_005_Imsi_Error;\r",
									"                        let customUrl= urlCheckLog + requestObjectUrlStaging;\r",
									"\r",
									"                        // check identity\r",
									"                        // \"identity\":\"{\\\"Imei\\\":\\\"201181773649395\\\",\\\"ThingId\\\":\\\"6024ca1351fbb50001e5426b\\\",\\\"Imsi\\\":\\\"201181773649395\\\"}\"\r",
									"                        let dataSummaryIdentity = JSON.parse(resultDataLog.identity);\r",
									"\r",
									"                        console.log(\"identity.ThingId : \" + dataSummaryIdentity.ThingId + \" = \" + thingId);\r",
									"                        console.log(\"identity.Imei : \" + dataSummaryIdentity.Imei + \" = \" + imei);\r",
									"                        console.log(\"identity.Imsi : \" + dataSummaryIdentity.Imsi + \" = \" + imsi);\r",
									"\r",
									"                        pm.expect(dataSummaryIdentity.ThingId).to.eql(thingId); \r",
									"                        pm.expect(dataSummaryIdentity.Imei).to.eql(imei); \r",
									"                        pm.expect(dataSummaryIdentity.Imsi).to.eql(imsi); \r",
									"\r",
									"                        // check custom\r",
									"                        // \\\"custom\\\":{ \\\"customData\\\":{ \\\"Imsi\\\":[ \\\"1000100011606009\\\" ], \\\"url\\\":\\\"mg-iot.sandais.com/api/register/sim/v1\\\", \\\"Imei\\\":[ \\\"100010001606009\\\" ], \\\"ThingId\\\":[ \\\"5f7191dc226bf9000127a096\\\" ] }, \\\"endPointSummary\\\":[ { \\\"no\\\":\\\"1\\\", \\\"endPointName\\\":\\\"db.ThingsCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:Inquiry was Success\\\", \\\"processTime\\\":0.0003 } ] }\r",
									"\r",
									"                        let customData = resultDataLog.custom.customData\r",
									"\r",
									"                        console.log(\"custom.url : \" + customData.url + \" = \" + customUrl);\r",
									"                        console.log(\"custom.Imei[0] : \" + customData.Imei[0] + \" = \" + imei);\r",
									"                        console.log(\"custom.Imsi[0] : \" + customData.Imsi[0] + \" = \" + imsi);\r",
									"                        console.log(\"custom.ThingId[0] : \" + customData.ThingId[0] + \" = \" + thingId);\r",
									"\r",
									"                        pm.expect(customData.url).to.eql(customUrl); \r",
									"                        pm.expect(customData.Imei[0]).to.eql(imei); \r",
									"                        pm.expect(customData.Imsi[0]).to.eql(imsi); \r",
									"                        pm.expect(customData.ThingId[0]).to.eql(thingId); \r",
									"\r",
									"                        let custom = resultDataLog.custom.endPointSummary;\r",
									"                        let countCustom = custom.length;\r",
									"                       \r",
									"                        // [\"db.ThingsCollection\"]\r",
									"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_Asgard_HTTP_eSim_Register_002_004_005_006;\r",
									"                        // [\"20000:Inquiry was Success\"]\r",
									"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_Asgard_HTTP_eSim_Register_002_004_005_006;\r",
									"                        let countCustomStep = dataEndPointName.length;\r",
									"\r",
									"                        console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep);\r",
									"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
									"                        \r",
									"                        for(let i=0;i<countCustomStep;i++){\r",
									"                            let no = custom[i].no;\r",
									"                            let valueEndPointName = custom[i].endPointName;\r",
									"                            let valueResponseStatus = custom[i].responseStatus;\r",
									"                            // console.log(\"i\",i);\r",
									"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
									"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
									"\r",
									"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString());\r",
									"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i]);\r",
									"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i]);\r",
									"\r",
									"                            pm.expect(no).to.eql((i+1).toString()); \r",
									"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
									"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]); \r",
									"                        }\r",
									"                    }); \r",
									"                }\r",
									"\r",
									"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and Asgard.Http.APIs\r",
									"\r",
									"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
									"                    // console.log('endPointNameValue ',endPointNameValue)\r",
									"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [Asgard_HTTP(eSim) Register]\", function () {\r",
									"                        console.log(\"======== Check Detail Log ( Expected = Actual) [Asgard_HTTP(eSim) Register] ==================\");\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
									"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
									"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
									"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.custom1.activityLog.processTime + \" = \" + resultDataLog.custom1.activityLog.processTime);\r",
									"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
									"\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
									"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
									"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
									"\r",
									"                        if( endPointNameValue == undefined){\r",
									"                            // check requestObject\r",
									"                            // \"requestObject\":\"{\\\"url\\\":\\\"/api/register/sim/v1\\\",\\\"method\\\":\\\"POST\\\",\\\"headers\\\":{\\\"Cache-Control\\\":\\\"no-cache\\\",\\\"Content-Type\\\":\\\"application/json\\\",\\\"Accept\\\":\\\"*/*\\\",\\\"Accept-Encoding\\\":\\\"gzip,deflate,br\\\",\\\"Authorization\\\":\\\"Basic NDk2MTUxMTAzMTIyNjM5OjEuMi4zLjQ=\\\",\\\"Host\\\":\\\"mg-staging.sandais.com\\\",\\\"User-Agent\\\":\\\"PostmanRuntime/7.26.8\\\",\\\"Content-Length\\\":\\\"2\\\",\\\"x-real-ip\\\":\\\"171.96.174.10\\\",\\\"x-forwarded-for\\\":\\\"171.96.174.10\\\",\\\"x-forwarded-proto\\\":\\\"https\\\",\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"RegisHTTP_202101291201997\\\",\\\"x-ais-orderdesc\\\":\\\"Register Thing in MG\\\",\\\"postman-token\\\":\\\"83bc76b4-8538-4a10-94fc-8b9cc1143ec8\\\",\\\"x-request-id\\\":\\\"bbf6c560-8bea-4d53-87d8-28a3f3664d37\\\",\\\"x-b3-traceid\\\":\\\"eb252eaef48d4ec507b32acd0a8dc573\\\",\\\"x-b3-spanid\\\":\\\"07b32acd0a8dc573\\\",\\\"x-b3-sampled\\\":\\\"0\\\",\\\"x-ais-SessionId\\\":\\\"1611896410502\\\",\\\"identity\\\":\\\"{\\\\\\\"Imei\\\\\\\":null,\\\\\\\"ThingId\\\\\\\":null,\\\\\\\"Imsi\\\\\\\":\\\\\\\"496151103122639xx\\\\\\\"}\\\",\\\"custom\\\":\\\"{\\\\\\\"Imsi\\\\\\\":[\\\\\\\"496151103122639xx\\\\\\\"],\\\\\\\"url\\\\\\\":\\\\\\\"mg-staging.sandais.com/api/register/sim/v1\\\\\\\",\\\\\\\"Imei\\\\\\\":null,\\\\\\\"ThingId\\\\\\\":null}\\\"},\\\"queryString\\\":{},\\\"routeParamteters\\\":{},\\\"body\\\":{}}\"\r",
									"\r",
									"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
									"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
									"\r",
									"                            let url = urlRegister; \r",
									"                            let x_ais_orderref = x_ais_OrderRef_RegisHTTP_fail + current_timestamp;\r",
									"                            let x_ais_orderdesc = x_ais_OrderDesc_RegisHTTP;\r",
									"                            let x_ais_userName = x_ais_UserName_AisPartner;\r",
									"                            let authorization = Basic + ' ' + pm.environment.get(\"encodedKeys_Authorization_Register\");\r",
									"                            let imei = fieldDataValue.AsgardHTTP.Value_AsgardHTTPeSim_Register_TST_F4_0_2_005_Imei_Error;\r",
									"                            let imsi = fieldDataValue.AsgardHTTP.Value_AsgardHTTPeSim_Register_TST_F4_0_2_005_Imsi_Error;\r",
									"                            let thingId = fieldDataValue.AsgardHTTP.Value_AsgardHTTPeSim_Register_TST_F4_0_2_005_ThingId_Error;\r",
									"                            let customUrl= urlCheckLog + requestObjectUrlStaging;\r",
									"\r",
									"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
									"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
									"                            console.log(\"headers.x_ais_userName : \" + jsonParseRequestObject.headers[header_x_ais_username] + \" = \" + x_ais_userName);\r",
									"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
									"                            console.log(\"headers.Authorization : \" + jsonParseRequestObject.headers.Authorization + \" = \" + authorization);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
									"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_username]).to.eql(x_ais_userName);\r",
									"                            pm.expect(jsonParseRequestObject.headers.Authorization).to.eql(authorization);\r",
									"\r",
									"                            // check requestObject headers.identity\r",
									"                            let jsonParseRequestObjectHeadersIdentity = JSON.parse(jsonParseRequestObject.headers.identity);\r",
									"                            // console.log('jsonParseRequestObjectHeadersIdentity',jsonParseRequestObjectHeadersIdentity);\r",
									"\r",
									"                            console.log(\"headers.identity.Imei : \" + jsonParseRequestObjectHeadersIdentity.Imei + \" = \" + imei);\r",
									"                            console.log(\"headers.identity.Imsi : \" + jsonParseRequestObjectHeadersIdentity.Imsi + \" = \" + imsi);\r",
									"                            console.log(\"headers.identity.ThingId : \" + jsonParseRequestObjectHeadersIdentity.ThingId + \" = \" + thingId);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObjectHeadersIdentity.Imei).to.eql(imei);\r",
									"                            pm.expect(jsonParseRequestObjectHeadersIdentity.Imsi).to.eql(imsi);\r",
									"                            pm.expect(jsonParseRequestObjectHeadersIdentity.ThingId).to.eql(thingId);\r",
									"\r",
									"                            // check requestObject headers.custom\r",
									"                            let jsonParseRequestObjectHeadersCustom = JSON.parse(jsonParseRequestObject.headers.custom);\r",
									"                            // console.log('jsonParseRequestObjectHeadersCustom',jsonParseRequestObjectHeadersCustom);\r",
									"\r",
									"                            console.log(\"headers.custom.url : \" + jsonParseRequestObjectHeadersCustom.url + \" = \" + customUrl);\r",
									"                            console.log(\"headers.custom.Imei[0] : \" + jsonParseRequestObjectHeadersCustom.Imei[0] + \" = \" + imei);\r",
									"                            console.log(\"headers.custom.Imsi[0] : \" + jsonParseRequestObjectHeadersCustom.Imsi[0] + \" = \" + imsi);\r",
									"                            console.log(\"headers.custom.ThingId[0] : \" + jsonParseRequestObjectHeadersCustom.ThingId[0] + \" = \" + thingId);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObjectHeadersCustom.url).to.eql(customUrl);\r",
									"                            pm.expect(jsonParseRequestObjectHeadersCustom.Imei[0]).to.eql(imei);\r",
									"                            pm.expect(jsonParseRequestObjectHeadersCustom.Imsi[0]).to.eql(imsi);\r",
									"                            pm.expect(jsonParseRequestObjectHeadersCustom.ThingId[0]).to.eql(thingId);\r",
									"\r",
									"                            console.log(\"queryString : \" + JSON.stringify(jsonParseRequestObject.queryString) + \" = \" + JSON.stringify({}));\r",
									"                            console.log(\"routeParamteters : \" + JSON.stringify(jsonParseRequestObject.routeParamteters) + \" = \" + JSON.stringify({}));\r",
									"                            console.log(\"body : \" + JSON.stringify(jsonParseRequestObject.body) + \" = \" + JSON.stringify({}));\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.queryString).to.eql({}); \r",
									"                            pm.expect(jsonParseRequestObject.routeParamteters).to.eql({}); \r",
									"                            pm.expect(jsonParseRequestObject.body).to.eql({}); \r",
									"\r",
									"                            // check responseObject\r",
									"                            // responseObject: \"{\"OperationStatus\":{\"Code\":\"40301\",\"DeveloperMessage\":\"The ThingIdentifier requested already exists.\"}}\"\r",
									"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
									"                            // console.log('jsonParseResponseObject',jsonParseResponseObject); \r",
									"\r",
									"                            console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeTheClientRequestedAlreadyExists);\r",
									"                            console.log(\"response.OperationStatus.DeveloperMessage : \" + jsonParseResponseObject.OperationStatus.DeveloperMessage + \" = \" + resultDescriptionTheThingIdentifierRequestedAlreadyExists); \r",
									"\r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeTheClientRequestedAlreadyExists);  \r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheThingIdentifierRequestedAlreadyExists);  \r",
									"                        }\r",
									"                    }); \r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"setTimeout(function(){SearchLogFindTid();}, 6000); \r",
									"setTimeout(function(){CheckLog();}, 9000); \r",
									"\r",
									"// setTimeout(function(){RemoveThingStateInfo();}, 15000); \r",
									"// setTimeout(function(){RemoveThing();}, 20000); \r",
									"// setTimeout(function(){RemoveAccount();}, 25000); \r",
									"// setTimeout(function(){RemovePartner();}, 30000); \r",
									"\r",
									"setTimeout(function(){\r",
									"pm.environment.unset(\"current_timestamp\");\r",
									"pm.environment.unset(\"AccessToken\");\r",
									"pm.environment.unset(\"random_number\");\r",
									"pm.environment.unset(\"PartnerName\");\r",
									"pm.environment.unset(\"MerchantContact\");\r",
									"pm.environment.unset(\"CPID\");\r",
									"pm.environment.unset(\"GetResponse_PartnerId\");\r",
									"pm.environment.unset(\"AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountId\");\r",
									"pm.environment.unset(\"random_IM\");\r",
									"pm.environment.unset(\"random_ICCID\");\r",
									"pm.environment.unset(\"ThingName\");\r",
									"pm.environment.unset(\"GetResponse_ThingID\");\r",
									"pm.environment.unset(\"GetResponse_IMSI\");\r",
									"pm.environment.unset(\"encodedKeys_Authorization_Register\");\r",
									"pm.environment.unset(\"random_Sensor\");\r",
									"pm.environment.unset(\"random_Sensor_AsgardHTTP\");\r",
									"pm.environment.unset(\"GetResponse_ThingToken\");\r",
									"pm.environment.unset(\"tid\");\r",
									"}, 15000); \r",
									"setTimeout(async function(){}, 20000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var Username = pm.environment.get(\"Username\");\r",
									"var Password = pm.environment.get(\"Password\");\r",
									"\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"var controlapis = pm.environment.get(\"controlapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"//format YYYYMMDDHHMMSSS\r",
									"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
									"// console.log('currentTmestamp',currentTmestamp);\r",
									"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- statusCodeList --------------//\r",
									"//set variable to statusCodeList JSON.parse\r",
									"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
									"//set global variable to statusCode 200\r",
									"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
									"//set global variable to statusCode 201\r",
									"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
									"//set global variable to statusCode 403\r",
									"pm.globals.set(\"statusCodeForbidden\", statusCodeList.statusCodeForbidden);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultCodeList --------------//\r",
									"//set variable to resultCodeList JSON.parse\r",
									"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
									"//set global variable to resultCode \"20000\"\r",
									"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
									"//set global variable to resultCode \"20100\"\r",
									"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
									"//set global variable to resultCode \"40301\"\r",
									"pm.globals.set(\"resultCodeTheClientRequestedAlreadyExists\", resultCodeList.resultCodeTheClientRequestedAlreadyExists);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionSuccessList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
									"//set global variable to resultDescription \"SignInProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
									"//set global variable to resultDescription \"CreatePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
									"//set global variable to resultDescription \"CreateAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
									"//set global variable to resultDescription \"CreateThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThing\", resultDescriptionSuccessList.resultDescriptionCreateThing);\r",
									"//set global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThingStateInfo\", resultDescriptionSuccessList.resultDescriptionCreateThingStateInfo);\r",
									"//set global variable to resultDescription \"RemovePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
									"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
									"//set global variable to resultDescription \"RemoveThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThing\", resultDescriptionSuccessList.resultDescriptionRemoveThing);\r",
									"//set global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThingStateInfo\", resultDescriptionSuccessList.resultDescriptionRemoveThingStateInfo);\r",
									"//set global variable to resultDescription \"ControlOneThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessControlOneThing\", resultDescriptionSuccessList.resultDescriptionSuccessControlOneThing);\r",
									"//set global variable to resultDescription \"Register is Success\"\r",
									"pm.globals.set(\"resultDescriptionRegisterIsSuccess\", resultDescriptionSuccessList.resultDescriptionRegisterIsSuccess);\r",
									"//set global variable to resultDescription \"InquiryThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionInquiryThing\", resultDescriptionSuccessList.resultDescriptionInquiryThing);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionErrorList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
									"//set global variable to resultDescription \"The ThingIdentifier requested already exists.\"\r",
									"pm.globals.set(\"resultDescriptionTheThingIdentifierRequestedAlreadyExists\", resultDescriptionErrorList.resultDescriptionTheThingIdentifierRequestedAlreadyExists);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- HeaderList --------------//\r",
									"//set variable to HeaderList JSON.parse\r",
									"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
									"//---------------- set globals Other --------------//\r",
									"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
									"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
									"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
									"//set global variable to kbn-versio \"7.5.1\"\r",
									"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Signin_ --------------//\r",
									"//set global variable to x_ais_OrderRef \"Signin_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreatePartner --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
									"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
									"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
									"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreateAccount --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
									"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
									"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Thing --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThing\", HeaderList.Thing.x_ais_OrderRef_CreateThing);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThing\", HeaderList.Thing.x_ais_OrderDesc_CreateThing);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThing\", HeaderList.Thing.x_ais_OrderRef_RemoveThing);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThing\", HeaderList.Thing.x_ais_OrderDesc_RemoveThing);\r",
									"//set global variable to x_ais_OrderRef \"InquiryThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_InquiryThing\", HeaderList.Thing.x_ais_OrderRef_InquiryThing);\r",
									"//set global variable to x_ais_OrderDesc \"InquiryThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_InquiryThing\", HeaderList.Thing.x_ais_OrderDesc_InquiryThing);\r",
									"//set global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_RemoveThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_RemoveThingStateInfo);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Control --------------//\r",
									"//set global variable to x_ais_OrderRef \"ControlThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ControlThing\", HeaderList.Control.x_ais_OrderRef_ControlThing);\r",
									"//set global variable to x_ais_OrderRef \"ControlThingfail_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ControlThing_fail\", HeaderList.Control.x_ais_OrderRef_ControlThing_fail);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals AsgardHTTP --------------//\r",
									"//set global variable to x_ais_OrderRef \"RegisHTTP_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RegisHTTP\", HeaderList.AsgardHTTP.x_ais_OrderRef_RegisHTTP);\r",
									"//set global variable to x_ais_OrderRef \"RegisHTTPfail_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RegisHTTP_fail\", HeaderList.AsgardHTTP.x_ais_OrderRef_RegisHTTP_fail);\r",
									"//set global variable to x_ais_OrderDesc \"Register Thing in MG\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RegisHTTP\", HeaderList.AsgardHTTP.x_ais_OrderDesc_RegisHTTP);\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"SignInProcess is Success\"\r",
									"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
									"//get global variable to resultDescription \"CreatePartner is Success\"\r",
									"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
									"//get global variable to resultDescription \"CreateAccount is Success\"\r",
									"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
									"//get global variable to resultDescription \"CreateThing is Success\"\r",
									"var resultDescriptionCreateThing = pm.globals.get(\"resultDescriptionCreateThing\");\r",
									"//get global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"var resultDescriptionCreateThingStateInfo = pm.globals.get(\"resultDescriptionCreateThingStateInfo\");\r",
									"//get global variable to resultDescription \"ControlOneThing is Success\"\r",
									"var resultDescriptionSuccessControlOneThing = pm.globals.get(\"resultDescriptionSuccessControlOneThing\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- urlRouteList --------------//\r",
									"//set variable to urlRouteList JSON.parse\r",
									"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
									"//---------------- set url Create --------------//\r",
									"//set global variable to url \"/api/v1/auth/signin\"\r",
									"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
									"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
									"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"pm.globals.set(\"urlThingCreateThing\", urlRouteList.Thing.urlThingCreateThing);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"pm.globals.set(\"urlThingCreateThingStateInfo\", urlRouteList.Thing.urlThingCreateThingStateInfo);\r",
									"//set global variable to url \"/api/v1/Control/Thing\"\r",
									"pm.globals.set(\"urlControlThing\", urlRouteList.Control.urlControlThing);\r",
									"//---------------- get url Create --------------//\r",
									"//get global variable to url \"/api/v1/auth/signin\"\r",
									"var urlSignin = pm.globals.get(\"urlSignin\");\r",
									"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
									"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"var urlThingCreateThing = pm.globals.get(\"urlThingCreateThing\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"var urlThingCreateThingStateInfo = pm.globals.get(\"urlThingCreateThingStateInfo\");\r",
									"//get global variable to url \"/api/v1/Control/Thing\"\r",
									"var urlControlThing = pm.globals.get(\"urlControlThing\");\r",
									"//---------------- set url Remove --------------//\r",
									"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
									"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"pm.globals.set(\"urlThingRemoveThing\", urlRouteList.Thing.urlThingRemoveThing);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"pm.globals.set(\"urlThingRemoveThingStateInfo\", urlRouteList.Thing.urlThingRemoveThingStateInfo);\r",
									"//---------------- set url Inquiry --------------//\r",
									"//set global variable to url \"/api/v1/Thing/InquiryThing\"\r",
									"pm.globals.set(\"urlThingInquiryThing\", urlRouteList.Thing.urlThingInquiryThing);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Signin_ --------------//\r",
									"//get global variable to x_ais_OrderRef \"Signin_\"\r",
									"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"var x_ais_OrderRef_CreateThing = pm.globals.get(\"x_ais_OrderRef_CreateThing\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"var x_ais_OrderDesc_CreateThing = pm.globals.get(\"x_ais_OrderDesc_CreateThing\");\r",
									"//get global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"var x_ais_OrderRef_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderRef_CreateThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"var x_ais_OrderDesc_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_CreateThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Control --------------//\r",
									"//get global variable to x_ais_OrderRef \"ControlThing_\"\r",
									"var x_ais_OrderRef_ControlThing = pm.globals.get(\"x_ais_OrderRef_ControlThing\");\r",
									"//------------------------------------------------------------//\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// Signin get token\r",
									"Signin = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSignin = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_Signin + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_UserAuthentication,\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestSignin = {\r",
									"            mode: 'raw',\r",
									"            raw:\r",
									"                JSON.stringify({\r",
									"                    username: Username,\r",
									"                    password: Password\r",
									"                })\r",
									"        };\r",
									"\r",
									"        let optionsSignin = {\r",
									"            url: url + provisioningapis + urlSignin,\r",
									"            method: 'POST',\r",
									"            header: headersOptSignin,\r",
									"            body: httpRequestSignin\r",
									"        };\r",
									"        // console.log('request Signin');\r",
									"        let response = await reqPromise(optionsSignin);\r",
									"        let jsonDataSignin = await response.json();\r",
									"\r",
									"        // setAccessToken\r",
									"        await pm.environment.set(\"AccessToken\", jsonDataSignin.AccessToken);\r",
									"\r",
									"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('Signin : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // SignInProcess is Success\r",
									"        pm.test('Signin : OperationStatus Description is ' + '\"' + resultDescriptionSuccessSignIn + '\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
									"        });\r",
									"\r",
									"        //set random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //set PartnerName\r",
									"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
									"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
									"        //set MerchantContact\r",
									"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
									"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
									"        // set CPID\r",
									"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
									"        pm.environment.set(\"CPID\", CPIDValue)\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreatePartner\r",
									"CreatePartner = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreatePartner = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreatePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreatePartner,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreatePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
									"                \"PartnerType\": [\r",
									"                    \"Supplier\",\r",
									"                    \"Customer\"\r",
									"                ],\r",
									"                \"PartnerDetail\": {\r",
									"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
									"                    \"CPID\": pm.environment.get(\"CPID\")\r",
									"                },\r",
									"                \"Property\": {\r",
									"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreatePartner = {\r",
									"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreatePartner,\r",
									"            body: httpRequestCreatePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsCreatePartner);\r",
									"        let jsonDataCreatePartner = await response.json();\r",
									"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
									"\r",
									"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreatePartner : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreatePartner is Success\r",
									"        pm.test('CreatePartner : OperationStatus Description is ' + '\"' + resultDescriptionCreatePartner + '\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
									"        });\r",
									"\r",
									"        //GetResponse_PartnerId\r",
									"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
									"\r",
									"        //Accountname\r",
									"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
									"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateAccount\r",
									"CreateAccount = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateAccount = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateAccount,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreateAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateAccount = {\r",
									"            url: url + provisioningapis + urlAccountCreateAccount,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateAccount,\r",
									"            body: httpRequestCreateAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateAccount');\r",
									"        let response = await reqPromise(optionsCreateAccount);\r",
									"        let jsonDataCreateAccount = await response.json();\r",
									"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
									"\r",
									"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateAccount : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateAccount is Success\r",
									"        pm.test('CreateAccount : OperationStatus Description is ' + '\"' + resultDescriptionCreateAccount + '\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
									"        });\r",
									"        // GetResponse_AccountName\r",
									"        pm.environment.set(\"GetResponse_AccountName\", jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
									"        // GetResponse_AccountId\r",
									"        pm.environment.set(\"GetResponse_AccountId\", jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
									"        // random_IM\r",
									"        pm.environment.set(\"random_IM\", _.random(10000000, 99999999) + \" \" + _.random(1000000, 9999999))\r",
									"        // random_ICCID\r",
									"        pm.environment.set(\"random_ICCID\", _.random(1000000, 9999999) + \" \" + _.random(100000, 999999))\r",
									"        // random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //ThingName\r",
									"        let thingNameValue = fieldDataValue.Thing.ThingNameValue; // \"Sensor_TestThingName\"\r",
									"        pm.environment.set(\"ThingName\", thingNameValue + pm.environment.get(\"random_number\"))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThing\r",
									"CreateThing = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThing = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateThing + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateThing,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey': pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreateThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingName\": pm.environment.get(\"ThingName\"),\r",
									"                \"IMEI\": pm.environment.get(\"random_IM\"),\r",
									"                \"IMSI\": pm.environment.get(\"random_IM\"),\r",
									"                \"ICCID\": pm.environment.get(\"random_ICCID\"),\r",
									"                \"RouteUrl\": fieldDataValue.Thing.RouteUrlValue , //[\"http://10.12.3.4:2019/api/information/AddInformation\"]\r",
									"                \"RouteInfo\": {\r",
									"                    \"MIMO_ID\": fieldDataValue.Thing.RouteInfoMIMOIDValue , //\"606edada\"\r",
									"                    \"MIMO_SerialNo\": fieldDataValue.Thing.RouteInfoMIMOSerialNoValue //5466758878\r",
									"                },\r",
									"                \"RouteFlag\": {\r",
									"                    \"ThingName\": fieldDataValue.Thing.RouteFlagThingNameValue , //true\r",
									"                    \"ThingToken\": fieldDataValue.Thing.RouteFlagThingTokenValue, //true\r",
									"                    \"IMEI\": fieldDataValue.Thing.RouteFlagIMEIValue, //true\r",
									"                    \"ICCID\": fieldDataValue.Thing.RouteFlagICCIDValue, //true\r",
									"                    \"RouteInfo\": fieldDataValue.Thing.RouteFlagRouteInfoValue //true\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateThing = {\r",
									"            url: url + provisioningapis + urlThingCreateThing,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThing,\r",
									"            body: httpRequestCreateThing\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThing');\r",
									"        let response = await reqPromise(optionsCreateThing);\r",
									"        let jsonDataCreateThing = await response.json();\r",
									"        // console.log('jsonDataCreateThing',jsonDataCreateThing)\r",
									"\r",
									"        let operationStatusCreateThing = await jsonDataCreateThing.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateThing : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateThing : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateThing is Success\r",
									"        pm.test('CreateThing : OperationStatus Description is ' + '\"' + resultDescriptionCreateThing + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Description', resultDescriptionCreateThing);\r",
									"        });\r",
									"\r",
									"        pm.environment.set(\"GetResponse_ThingID\", jsonDataCreateThing.ThingInfo.ThingId)\r",
									"        pm.environment.set(\"GetResponse_IMSI\", jsonDataCreateThing.ThingInfo.IMSI)\r",
									"        \r",
									"        let keys = fieldDataValue.AsgardHTTP.Value_AsgardHTTPeSim_Register_TST_F4_0_2_005_Username_Errors + \":\" + fieldDataValue.AsgardHTTP.Value_AsgardHTTPeSim_Register_TST_F4_0_2_005_Password_Error;\r",
									"        // console.log(\"keys\", keys);\r",
									"        let encodedKeys = CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(keys));\r",
									"        pm.environment.set(\"encodedKeys_Authorization_Register\", encodedKeys);\r",
									"\r",
									"        //Get Random Sensor \r",
									"        pm.environment.set(\"random_Sensor\", _.random(100, 999))\r",
									"\r",
									"        //Get Random Sensor AsgardHTTP\r",
									"        pm.environment.set(\"random_Sensor_AsgardHTTP\", _.random(100, 999))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThingStateInfo\r",
									"CreateThingStateInfo = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThingStateInfo = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateThingStateInfo,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey': pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        // {\"AA\" : pm.environment.get(\"random_Sensor\")}\r",
									"        let sensorValue = {};\r",
									"        sensorValue[fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP] = pm.environment.get(\"random_Sensor\");\r",
									"        // console.log('sensorValue',sensorValue);\r",
									"        \r",
									"        let httpRequestCreateThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": [\r",
									"                    pm.environment.get(\"GetResponse_ThingID\")\r",
									"                ],\r",
									"                \"Type\": fieldDataValue.CreateThingStateInfo.Type_Report,\r",
									"                \"Sensor\": sensorValue\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingCreateThingStateInfo,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThingStateInfo,\r",
									"            body: httpRequestCreateThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThingStateInfo');\r",
									"        let response = await reqPromise(optionsCreateThingStateInfo);\r",
									"        let jsonDataCreateThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataCreateThingStateInfo',jsonDataCreateThingStateInfo)\r",
									"\r",
									"        let operationStatusCreateThingStateInfo = await jsonDataCreateThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"CreateThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //CreateThingStateInfo is Success\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Description is ' + '\"' + resultDescriptionCreateThingStateInfo + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Description', resultDescriptionCreateThingStateInfo);\r",
									"        });\r",
									"\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// ControlThing\r",
									"ControlThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptControlThing = {\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_ControlThing + current_timestamp,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Content-Type':ContentType_ApplicationJson\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        // {\"AA\" : pm.environment.get(\"random_Sensor_AsgardHTTP\")}\r",
									"        let sensorValue = {};\r",
									"        sensorValue[fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP] = pm.environment.get(\"random_Sensor_AsgardHTTP\");\r",
									"        // console.log('sensorValue',sensorValue);\r",
									"\r",
									"        let httpRequestControlThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\"),\r",
									"                \"Sensors\": sensorValue\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsControlThing = {\r",
									"            url: url + controlapis + urlControlThing,\r",
									"            method: 'POST',\r",
									"            header: headersOptControlThing,\r",
									"            body: httpRequestControlThing\r",
									"        };\r",
									"\r",
									"        // console.log('response ControlThing');\r",
									"        let response = await reqPromise(optionsControlThing);\r",
									"        let jsonDataControlThing = await response.json();\r",
									"        // console.log('jsonDataControlThing',jsonDataControlThing)\r",
									"    \r",
									"        let operationStatusControlThing = await jsonDataControlThing.operationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"ControlThing : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('ControlThing : OperationStatus code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusControlThing).to.have.property('code', resultCodeSuccess);\r",
									"        });\r",
									"        //ControlOneThing is Success\r",
									"        pm.test('ControlThing : OperationStatus description is '+'\"'+ resultDescriptionSuccessControlOneThing+'\"', function () {\r",
									"            pm.expect(operationStatusControlThing).to.have.property('description', resultDescriptionSuccessControlOneThing);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// Signin();\r",
									"// setTimeout(async function () { await CreatePartner(); }, 1000);\r",
									"// setTimeout(async function () { await CreateAccount(); }, 2500);\r",
									"// setTimeout(async function () { await CreateThing(); }, 3000);\r",
									"// setTimeout(async function () { await CreateThingStateInfo(); }, 4500); \r",
									"// setTimeout(async function () { await ControlThing(); }, 5000); \r",
									"\r",
									"let keys = fieldDataValue.AsgardHTTP.Value_AsgardHTTPeSim_Register_TST_F4_0_2_005_Username_Error + \":\" + fieldDataValue.AsgardHTTP.Value_AsgardHTTPeSim_Register_TST_F4_0_2_005_Password_Error;\r",
									"// console.log(\"keys\", keys);\r",
									"let encodedKeys = CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(keys));\r",
									"pm.environment.set(\"encodedKeys_Authorization_Register\", encodedKeys);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-ais-UserName",
								"type": "text",
								"value": "{{x_ais_UserName_AisPartner}}"
							},
							{
								"key": "x-ais-OrderRef",
								"value": "{{x_ais_OrderRef_RegisHTTP_fail}}{{current_timestamp}}"
							},
							{
								"key": "x-ais-OrderDesc",
								"type": "text",
								"value": "{{x_ais_OrderDesc_RegisHTTP}}"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{Basic}} {{encodedKeys_Authorization_Register}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}{{httpapis}}/api/register/sim/v1",
							"host": [
								"{{url}}{{httpapis}}"
							],
							"path": [
								"api",
								"register",
								"sim",
								"v1"
							]
						},
						"description": "Type:Desire"
					},
					"response": []
				},
				{
					"name": "AsgardHTTPeSimRegister_TST_F4_0_2_006_Error_ThingStatusIdle",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var Basic = pm.environment.get(\"Basic\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to xAisOrderRef \"RemoveThing_\"\r",
									"var x_ais_OrderRef_RemoveThing = pm.globals.get(\"x_ais_OrderRef_RemoveThing\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"var x_ais_OrderDesc_RemoveThing = pm.globals.get(\"x_ais_OrderDesc_RemoveThing\");\r",
									"//get global variable to xAisOrderRef \"RemoveThingStateInfo_\"\r",
									"var x_ais_OrderRef_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderRef_RemoveThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThingStateInfo\"\r",
									"var x_ais_OrderDesc_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_RemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals AsgardHTTP --------------//\r",
									"//get global variable to x_ais_OrderRef \"RegisHTTP_\"\r",
									"var x_ais_OrderRef_RegisHTTP = pm.globals.get(\"x_ais_OrderRef_RegisHTTP\");\r",
									"//get global variable to x_ais_OrderRef \"RegisHTTPfail_\"\r",
									"var x_ais_OrderRef_RegisHTTP_fail = pm.globals.get(\"x_ais_OrderRef_RegisHTTP_fail\");\r",
									"//get global variable to x_ais_OrderDesc \"Register Thing in MG\"\r",
									"var x_ais_OrderDesc_RegisHTTP = pm.globals.get(\"x_ais_OrderDesc_RegisHTTP\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get url Remove --------------//\r",
									"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
									"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"var urlThingRemoveThing = pm.globals.get(\"urlThingRemoveThing\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"var urlThingRemoveThingStateInfo = pm.globals.get(\"urlThingRemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"RemovePartner is Success\"\r",
									"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
									"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
									"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
									"//get global variable to resultDescription \"RemoveThing is Success\"\r",
									"var resultDescriptionRemoveThing = pm.globals.get(\"resultDescriptionRemoveThing\");\r",
									"//get global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"var resultDescriptionRemoveThingStateInfo = pm.globals.get(\"resultDescriptionRemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 404\r",
									"var statusCodeNotFound = pm.globals.get(\"statusCodeNotFound\");\r",
									"//get global variable to resultCode \"40400\"\r",
									"var resultCodeNotFound = pm.globals.get(\"resultCodeNotFound\");\r",
									"//get global variable to resultDescription \"The requested operation could not be found.\"\r",
									"var resultDescriptionTheRequestedOperationCouldNotBeFound = pm.globals.get(\"resultDescriptionTheRequestedOperationCouldNotBeFound\");\r",
									"//------------------------------------------------------------//\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Asgard HTTP(eSim) Register : Status code is \" + statusCodeNotFound, function () {\r",
									"    pm.response.to.have.status(statusCodeNotFound);\r",
									"});\r",
									"\r",
									"pm.test('Asgard HTTP(eSim) Register : operationStatus code is '+'\"'+ resultCodeNotFound +'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeNotFound);\r",
									"});\r",
									"\r",
									"pm.test('Asgard HTTP(eSim) Register : operationStatus DeveloperMessage is '+'\"'+ resultDescriptionTheRequestedOperationCouldNotBeFound+'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheRequestedOperationCouldNotBeFound);\r",
									"});\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// RemovePartner\r",
									" RemovePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemovePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemovePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemovePartner = {\r",
									"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemovePartner,\r",
									"            body: httpRequestRemovePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request RemovePartner');\r",
									"        let response = await reqPromise(optionsRemovePartner);\r",
									"        let jsonDataRemovePartner = await response.json();\r",
									"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
									"    \r",
									"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemovePartner is Success\r",
									"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// // RemoveAccount\r",
									"//  RemoveAccount = async () =>  {\r",
									"//     try {\r",
									"//         // header\r",
									"//         let headersOptRemoveAccount = {\r",
									"//             'Content-Type':ContentType_ApplicationJson,\r",
									"//             'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
									"//             'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
									"//             'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"//             'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"//             'Accept':Accept\r",
									"//         };\r",
									"        \r",
									"//         // body\r",
									"//         let httpRequestRemoveAccount = {\r",
									"//             mode: 'raw',\r",
									"//             raw: JSON.stringify({\r",
									"//                 \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"//                 \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
									"//             })\r",
									"//         };\r",
									"        \r",
									"//         let optionsRemoveAccount = {\r",
									"//             url: url + provisioningapis + urlAccountRemoveAccount,\r",
									"//             method: 'DELETE',\r",
									"//             header: headersOptRemoveAccount,\r",
									"//             body: httpRequestRemoveAccount\r",
									"//         };\r",
									"\r",
									"//         // console.log('request RemoveAccount');\r",
									"//         let response = await reqPromise(optionsRemoveAccount);\r",
									"//         let jsonDataRemoveAccount = await response.json();\r",
									"//         // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
									"    \r",
									"//         let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
									"\r",
									"//         //200\r",
									"//         pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
									"//             pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"//         });\r",
									"//         //20000\r",
									"//         pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"//             pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
									"//         });\r",
									"//         //RemoveAccount is Success\r",
									"//         pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
									"//             pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
									"//         });\r",
									"\r",
									"//     } catch (err) {\r",
									"//         console.log('err',err);\r",
									"//     }\r",
									"// }\r",
									"\r",
									"// RemoveThing\r",
									" RemoveThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThing = {\r",
									"            url: url + provisioningapis + urlThingRemoveThing,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThing,\r",
									"            body: httpRequestRemoveThing\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveThing');\r",
									"        let response = await reqPromise(optionsRemoveThing);\r",
									"        let jsonDataRemoveThing = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThing)\r",
									"    \r",
									"        let operationStatusRemoveThing = await jsonDataRemoveThing.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThing : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThing : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThing is Success\r",
									"        pm.test('RemoveThing : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThing+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Description', resultDescriptionRemoveThing);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThingStateInfo\r",
									" RemoveThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"            \r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\"),\r",
									"                \"stateType\": fieldDataValue.CreateThingStateInfo.Type_Report, //Report\r",
									"                \"stateKey\": fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP //AA\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingRemoveThingStateInfo,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThingStateInfo,\r",
									"            body: httpRequestRemoveThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('response RemoveThingStateInfo');\r",
									"        let response = await reqPromise(optionsRemoveThingStateInfo);\r",
									"        let jsonDataRemoveThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThingStateInfo)\r",
									"    \r",
									"        let operationStatusRemoveThingStateInfo = await jsonDataRemoveThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThingStateInfo is Success\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThingStateInfo+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Description', resultDescriptionRemoveThingStateInfo);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"//---------------- LogDefaultValue --------------//\r",
									"//set variable to LogDefaultValue JSON.parse\r",
									"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
									"// console.log('LogDefaultValue',LogDefaultValue);\r",
									"//---------------- set globals Other --------------//\r",
									"var SearchLog = LogDefaultValue.SearchLog;\r",
									"// console.log('SearchLog',SearchLog);\r",
									"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
									"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
									"var kbn_version = SearchLog.header.kbn_version;\r",
									"var authorization = SearchLog.header.Authorization;\r",
									"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
									"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
									"var namespace = LogDefaultValue.Other.namespace;\r",
									"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
									"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
									"var header_x_ais_username = LogDefaultValue.Other.header_x_ais_username;\r",
									"var methodPost = LogDefaultValue.Other.methodPost;\r",
									"\r",
									"// Detail\r",
									"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
									"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
									"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
									"\r",
									"// Summary\r",
									"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
									"\r",
									"// Asgard.Http.APIs\r",
									"var applicationName = LogDefaultValue.AsgardHTTP.applicationName;\r",
									"var cmdName = LogDefaultValue.AsgardHTTP.cmdNameRegister;\r",
									"var containerId = LogDefaultValue.AsgardHTTP.containerId;\r",
									"var requestObjectUrlStaging = LogDefaultValue.AsgardHTTP.requestObjectUrlRegisterMgStaging;\r",
									"var urlRegister = LogDefaultValue.AsgardHTTP.urlRegister;\r",
									"\r",
									"// Check CDR (Summary Log) and EDR (Detail Log)\r",
									"SearchLogFindTid = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSearchLogFindTid = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = x_ais_OrderRef_RegisHTTP_fail+ current_timestamp; \r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestSearchLogFindTid = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"phrase\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"\r",
									"        let optionsSearchLogFindTid = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptSearchLogFindTid,\r",
									"            body: httpRequestSearchLogFindTid\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsSearchLogFindTid);\r",
									"        let jsonDataSearchLogFindTid = await response.json();\r",
									"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
									"        // console.log('hits',hits)\r",
									"  \r",
									"        // find tid\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            // let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"        \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            if(applicationNameValue == applicationName){\r",
									"                let tid = hits[i]._source.cauldron.tid;\r",
									"                pm.environment.set(\"tid\", tid);\r",
									"                break;\r",
									"           }\r",
									"        }\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"CheckLog = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCheckLog = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = pm.environment.get(\"tid\");\r",
									"\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        // console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestCheckLog = {\r",
									"            mode: 'raw',\r",
									"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"phrase\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"        let optionsCheckLog = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptCheckLog,\r",
									"            body: httpRequestCheckLog\r",
									"        }; \r",
									"        let response = await reqPromise(optionsCheckLog);\r",
									"        let jsonDataCheckLog = await response.json();\r",
									"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
									"        \r",
									"        // //200\r",
									"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });     \r",
									"        \r",
									"        let hits = jsonDataCheckLog.hits.hits\r",
									"        console.log('hits',hits)\r",
									"  \r",
									"        // find logType\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            //  let logType = hits[i]._source.cauldron.logType\r",
									"            let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"           \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            \r",
									"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
									"            // console.log('resultDataLog',resultDataLog)\r",
									"\r",
									"            let tidControl = x_ais_OrderRef_RegisHTTP_fail  + current_timestamp;\r",
									"            // console.log(tidControl);\r",
									"            if(applicationNameValue == applicationName){\r",
									"                 \r",
									"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and Asgard.Http.APIs\r",
									"                    pm.test(\"Check Summary Log : Asgard_HTTP(eSim) Register\" , function () {\r",
									"                        console.log(\"======== Check Summary Log ( Expected = Actual) [Asgard_HTTP(eSim) Register] ==================\");\r",
									"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
									"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
									"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeNotFound);\r",
									"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionTheRequestedOperationCouldNotBeFound);\r",
									"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
									"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        // console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
									"                        // console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
									"\r",
									"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
									"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
									"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeNotFound); \r",
									"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionTheRequestedOperationCouldNotBeFound); \r",
									"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
									"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"\r",
									"                        let thingId = pm.environment.get(\"GetResponse_ThingID\");\r",
									"                        let imei = (pm.environment.get(\"random_IM\")).replace(\" \", \"\");\r",
									"                        let imsi = (pm.environment.get(\"GetResponse_IMSI\")).replace(\" \", \"\");\r",
									"                        let customUrl= urlCheckLog + requestObjectUrlStaging;\r",
									"\r",
									"                        // check identity\r",
									"                        // \"identity\":\"{\\\"Imei\\\":\\\"496151103122639\\\",\\\"ThingId\\\":\\\"6013965896d0ed0001f5a46d\\\",\\\"Imsi\\\":\\\"496151103122639\\\"}\"\r",
									"                        let dataSummaryIdentity = JSON.parse(resultDataLog.identity);\r",
									"\r",
									"                        console.log(\"identity.ThingId : \" + dataSummaryIdentity.ThingId + \" = \" + thingId);\r",
									"                        console.log(\"identity.Imei : \" + dataSummaryIdentity.Imei + \" = \" + imei);\r",
									"                        console.log(\"identity.Imsi : \" + dataSummaryIdentity.Imsi + \" = \" + imsi);\r",
									"\r",
									"                        pm.expect(dataSummaryIdentity.ThingId).to.eql(thingId); \r",
									"                        pm.expect(dataSummaryIdentity.Imei).to.eql(imei); \r",
									"                        pm.expect(dataSummaryIdentity.Imsi).to.eql(imsi); \r",
									"\r",
									"                        // check custom\r",
									"                        // \\\"custom\\\":{ \\\"customData\\\":{ \\\"Imsi\\\":[ \\\"612246604277085\\\" ], \\\"url\\\":\\\"mg-iot.sandais.com/api/register/sim/v1\\\", \\\"Imei\\\":[ \\\"612246604277085\\\" ], \\\"ThingId\\\":[ \\\"609ab31bd828150001869738\\\" ] }, \\\"endPointSummary\\\":[ { \\\"no\\\":\\\"1\\\", \\\"endPointName\\\":\\\"db.ThingsCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:Inquiry was Success\\\", \\\"processTime\\\":0.0003 } ] }\r",
									"\r",
									"                        let customData = resultDataLog.custom.customData\r",
									"\r",
									"                        console.log(\"custom.url : \" + customData.url + \" = \" + customUrl);\r",
									"                        console.log(\"custom.Imei[0] : \" + customData.Imei[0] + \" = \" + imei);\r",
									"                        console.log(\"custom.Imsi[0] : \" + customData.Imsi[0] + \" = \" + imsi);\r",
									"                        console.log(\"custom.ThingId[0] : \" + customData.ThingId[0] + \" = \" + thingId);\r",
									"\r",
									"                        pm.expect(customData.url).to.eql(customUrl); \r",
									"                        pm.expect(customData.Imei[0]).to.eql(imei); \r",
									"                        pm.expect(customData.Imsi[0]).to.eql(imsi); \r",
									"                        pm.expect(customData.ThingId[0]).to.eql(thingId); \r",
									"\r",
									"                        let custom = resultDataLog.custom.endPointSummary;\r",
									"                        let countCustom = custom.length;\r",
									"                       \r",
									"                        // [\"db.ThingsCollection\"]\r",
									"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_Asgard_HTTP_eSim_Register_002_004_005_006;\r",
									"                        // [\"20000:Inquiry was Success\"]\r",
									"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_Asgard_HTTP_eSim_Register_002_004_005_006;\r",
									"                        let countCustomStep = dataEndPointName.length;\r",
									"\r",
									"                        console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep);\r",
									"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
									"                        \r",
									"                        for(let i=0;i<countCustomStep;i++){\r",
									"                            let no = custom[i].no;\r",
									"                            let valueEndPointName = custom[i].endPointName;\r",
									"                            let valueResponseStatus = custom[i].responseStatus;\r",
									"                            // console.log(\"i\",i);\r",
									"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
									"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
									"\r",
									"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString());\r",
									"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i]);\r",
									"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i]);\r",
									"\r",
									"                            pm.expect(no).to.eql((i+1).toString()); \r",
									"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
									"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]); \r",
									"                        }                        \r",
									"                    }); \r",
									"                }\r",
									"\r",
									"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and Asgard.Http.APIs\r",
									"\r",
									"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
									"                    // console.log('endPointNameValue ',endPointNameValue)\r",
									"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [Asgard_HTTP(eSim) Register]\", function () {\r",
									"                        console.log(\"======== Check Detail Log ( Expected = Actual) [Asgard_HTTP(eSim) Register] ==================\");\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
									"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
									"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
									"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.custom1.activityLog.processTime + \" = \" + resultDataLog.custom1.activityLog.processTime);\r",
									"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
									"\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
									"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
									"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
									"\r",
									"                        if( endPointNameValue == undefined){\r",
									"                            // check requestObject\r",
									"                            // \"requestObject\":\"{\\\"url\\\":\\\"/api/register/sim/v1\\\",\\\"method\\\":\\\"POST\\\",\\\"headers\\\":{\\\"Cache-Control\\\":\\\"no-cache\\\",\\\"Content-Type\\\":\\\"application/json\\\",\\\"Accept\\\":\\\"*/*\\\",\\\"Accept-Encoding\\\":\\\"gzip,deflate,br\\\",\\\"Authorization\\\":\\\"Basic NDk2MTUxMTAzMTIyNjM5OjEuMi4zLjQ=\\\",\\\"Host\\\":\\\"mg-staging.sandais.com\\\",\\\"User-Agent\\\":\\\"PostmanRuntime/7.26.8\\\",\\\"Content-Length\\\":\\\"2\\\",\\\"x-real-ip\\\":\\\"171.96.174.10\\\",\\\"x-forwarded-for\\\":\\\"171.96.174.10\\\",\\\"x-forwarded-proto\\\":\\\"https\\\",\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"RegisHTTP_202101291201997\\\",\\\"x-ais-orderdesc\\\":\\\"Register Thing in MG\\\",\\\"postman-token\\\":\\\"83bc76b4-8538-4a10-94fc-8b9cc1143ec8\\\",\\\"x-request-id\\\":\\\"bbf6c560-8bea-4d53-87d8-28a3f3664d37\\\",\\\"x-b3-traceid\\\":\\\"eb252eaef48d4ec507b32acd0a8dc573\\\",\\\"x-b3-spanid\\\":\\\"07b32acd0a8dc573\\\",\\\"x-b3-sampled\\\":\\\"0\\\",\\\"x-ais-SessionId\\\":\\\"1611896410502\\\",\\\"identity\\\":\\\"{\\\\\\\"Imei\\\\\\\":null,\\\\\\\"ThingId\\\\\\\":null,\\\\\\\"Imsi\\\\\\\":\\\\\\\"496151103122639xx\\\\\\\"}\\\",\\\"custom\\\":\\\"{\\\\\\\"Imsi\\\\\\\":[\\\\\\\"496151103122639xx\\\\\\\"],\\\\\\\"url\\\\\\\":\\\\\\\"mg-staging.sandais.com/api/register/sim/v1\\\\\\\",\\\\\\\"Imei\\\\\\\":null,\\\\\\\"ThingId\\\\\\\":null}\\\"},\\\"queryString\\\":{},\\\"routeParamteters\\\":{},\\\"body\\\":{}}\"\r",
									"\r",
									"                            // \\\"requestObject\\\":\\\"{ \\\\\\\"url\\\\\\\":\\\\\\\"/api/register/sim/v1\\\\\\\", \\\\\\\"method\\\\\\\":\\\\\\\"POST\\\\\\\", \\\\\\\"headers\\\\\\\":{ \\\\\\\"Cache-Control\\\\\\\":\\\\\\\"no-cache\\\\\\\", \\\\\\\"Content-Type\\\\\\\":\\\\\\\"application/json\\\\\\\", \\\\\\\"Accept\\\\\\\":\\\\\\\"*/*\\\\\\\", \\\\\\\"Accept-Encoding\\\\\\\":\\\\\\\"gzip, deflate, br\\\\\\\", \\\\\\\"Authorization\\\\\\\":\\\\\\\"Basic NjEyMjQ2NjA0Mjc3MDg1OjEuMi4zLjQ=\\\\\\\", \\\\\\\"Host\\\\\\\":\\\\\\\"mg-iot.sandais.com\\\\\\\", \\\\\\\"User-Agent\\\\\\\":\\\\\\\"PostmanRuntime/7.26.8\\\\\\\", \\\\\\\"Content-Length\\\\\\\":\\\\\\\"2\\\\\\\", \\\\\\\"x-real-ip\\\\\\\":\\\\\\\"182.232.183.255\\\\\\\", \\\\\\\"x-forwarded-for\\\\\\\":\\\\\\\"182.232.183.255, 10.233.66.0\\\\\\\", \\\\\\\"x-forwarded-proto\\\\\\\":\\\\\\\"http\\\\\\\", \\\\\\\"x-ais-username\\\\\\\":\\\\\\\"AisPartner\\\\\\\", \\\\\\\"x-ais-orderref\\\\\\\":\\\\\\\"RegisHTTPfail_202105112305525\\\\\\\", \\\\\\\"x-ais-orderdesc\\\\\\\":\\\\\\\"Register Thing in MG\\\\\\\", \\\\\\\"postman-token\\\\\\\":\\\\\\\"dae41a87-4198-44b4-bad3-9a2a0ea936b3\\\\\\\", \\\\\\\"x-envoy-external-address\\\\\\\":\\\\\\\"10.233.66.0\\\\\\\", \\\\\\\"x-request-id\\\\\\\":\\\\\\\"77a3bb16-ff16-4bb7-954a-e9e19e14c354\\\\\\\", \\\\\\\"x-envoy-original-path\\\\\\\":\\\\\\\"/httpapis/api/register/sim/v1\\\\\\\", \\\\\\\"x-b3-traceid\\\\\\\":\\\\\\\"2698b4c483e6bdb2342e0a80d28553d6\\\\\\\", \\\\\\\"x-b3-spanid\\\\\\\":\\\\\\\"896eb1b7d40d6455\\\\\\\", \\\\\\\"x-b3-parentspanid\\\\\\\":\\\\\\\"342e0a80d28553d6\\\\\\\", \\\\\\\"x-b3-sampled\\\\\\\":\\\\\\\"0\\\\\\\", \\\\\\\"x-ais-SessionId\\\\\\\":\\\\\\\"1620751153382\\\\\\\", \\\\\\\"identity\\\\\\\":\\\\\\\"{ \\\\\\\\\\\\\\\"Imei\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"612246604277085\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"ThingId\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"609ab31bd828150001869738\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Imsi\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"612246604277085\\\\\\\\\\\\\\\" }\\\\\\\", \\\\\\\"custom\\\\\\\":\\\\\\\"{ \\\\\\\\\\\\\\\"Imsi\\\\\\\\\\\\\\\":[ \\\\\\\\\\\\\\\"612246604277085\\\\\\\\\\\\\\\" ], \\\\\\\\\\\\\\\"url\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"mg-iot.sandais.com/api/register/sim/v1\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Imei\\\\\\\\\\\\\\\":[ \\\\\\\\\\\\\\\"612246604277085\\\\\\\\\\\\\\\" ], \\\\\\\\\\\\\\\"ThingId\\\\\\\\\\\\\\\":[ \\\\\\\\\\\\\\\"609ab31bd828150001869738\\\\\\\\\\\\\\\" ] }\\\\\\\" }, \\\\\\\"queryString\\\\\\\":{ }, \\\\\\\"routeParamteters\\\\\\\":{ }, \\\\\\\"body\\\\\\\":{ } }\\\"\r",
									"\r",
									"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
									"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
									"\r",
									"                            let url = urlRegister; \r",
									"                            let x_ais_orderref = x_ais_OrderRef_RegisHTTP_fail + current_timestamp;\r",
									"                            let x_ais_orderdesc = x_ais_OrderDesc_RegisHTTP;\r",
									"                            let x_ais_userName = x_ais_UserName_AisPartner;\r",
									"                            let authorization = Basic + ' ' + pm.environment.get(\"encodedKeys_Authorization_Register\");\r",
									"                            let imei = (pm.environment.get(\"random_IM\")).replace(\" \", \"\");\r",
									"                            let imsi = (pm.environment.get(\"GetResponse_IMSI\")).replace(\" \", \"\");\r",
									"                            let thingId = pm.environment.get(\"GetResponse_ThingID\");\r",
									"                            let customUrl= urlCheckLog + requestObjectUrlStaging;\r",
									"\r",
									"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
									"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
									"                            console.log(\"headers.x_ais_userName : \" + jsonParseRequestObject.headers[header_x_ais_username] + \" = \" + x_ais_userName);\r",
									"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
									"                            console.log(\"headers.Authorization : \" + jsonParseRequestObject.headers.Authorization + \" = \" + authorization);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
									"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_username]).to.eql(x_ais_userName);\r",
									"                            pm.expect(jsonParseRequestObject.headers.Authorization).to.eql(authorization);\r",
									"\r",
									"                            // check requestObject headers.identity\r",
									"                            let jsonParseRequestObjectHeadersIdentity = JSON.parse(jsonParseRequestObject.headers.identity);\r",
									"                            // console.log('jsonParseRequestObjectHeadersIdentity',jsonParseRequestObjectHeadersIdentity);\r",
									"\r",
									"                            console.log(\"headers.identity.Imei : \" + jsonParseRequestObjectHeadersIdentity.Imei + \" = \" + imei);\r",
									"                            console.log(\"headers.identity.Imsi : \" + jsonParseRequestObjectHeadersIdentity.Imsi + \" = \" + imsi);\r",
									"                            console.log(\"headers.identity.ThingId : \" + jsonParseRequestObjectHeadersIdentity.ThingId + \" = \" + thingId);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObjectHeadersIdentity.Imei).to.eql(imei);\r",
									"                            pm.expect(jsonParseRequestObjectHeadersIdentity.Imsi).to.eql(imsi);\r",
									"                            pm.expect(jsonParseRequestObjectHeadersIdentity.ThingId).to.eql(thingId);\r",
									"\r",
									"                            // check requestObject headers.custom\r",
									"                            let jsonParseRequestObjectHeadersCustom = JSON.parse(jsonParseRequestObject.headers.custom);\r",
									"                            // console.log('jsonParseRequestObjectHeadersCustom',jsonParseRequestObjectHeadersCustom);\r",
									"\r",
									"                            console.log(\"headers.custom.url : \" + jsonParseRequestObjectHeadersCustom.url + \" = \" + customUrl);\r",
									"                            console.log(\"headers.custom.Imei[0] : \" + jsonParseRequestObjectHeadersCustom.Imei[0] + \" = \" + imei);\r",
									"                            console.log(\"headers.custom.Imsi[0] : \" + jsonParseRequestObjectHeadersCustom.Imsi[0] + \" = \" + imsi);\r",
									"                            console.log(\"headers.custom.ThingId[0] : \" + jsonParseRequestObjectHeadersCustom.ThingId[0] + \" = \" + thingId);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObjectHeadersCustom.url).to.eql(customUrl);\r",
									"                            pm.expect(jsonParseRequestObjectHeadersCustom.Imei[0]).to.eql(imei);\r",
									"                            pm.expect(jsonParseRequestObjectHeadersCustom.Imsi[0]).to.eql(imsi);\r",
									"                            pm.expect(jsonParseRequestObjectHeadersCustom.ThingId[0]).to.eql(thingId);\r",
									"\r",
									"                            console.log(\"queryString : \" + JSON.stringify(jsonParseRequestObject.queryString) + \" = \" + JSON.stringify({}));\r",
									"                            console.log(\"routeParamteters : \" + JSON.stringify(jsonParseRequestObject.routeParamteters) + \" = \" + JSON.stringify({}));\r",
									"                            console.log(\"body : \" + JSON.stringify(jsonParseRequestObject.body) + \" = \" + JSON.stringify({}));\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.queryString).to.eql({}); \r",
									"                            pm.expect(jsonParseRequestObject.routeParamteters).to.eql({}); \r",
									"                            pm.expect(jsonParseRequestObject.body).to.eql({}); \r",
									"\r",
									"                            // check responseObject\r",
									"                            // responseObject: \"{\"OperationStatus\":{\"Code\":\"40400\",\"DeveloperMessage\":\"The requested operation could not be found.\"}}\"\r",
									"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
									"                            // console.log('jsonParseResponseObject',jsonParseResponseObject); \r",
									"\r",
									"                            console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeNotFound);\r",
									"                            console.log(\"response.OperationStatus.DeveloperMessage : \" + jsonParseResponseObject.OperationStatus.DeveloperMessage + \" = \" + resultDescriptionTheRequestedOperationCouldNotBeFound); \r",
									"\r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeNotFound);  \r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheRequestedOperationCouldNotBeFound);  \r",
									"                        }\r",
									"                    }); \r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"setTimeout(function(){SearchLogFindTid();}, 40000); \r",
									"setTimeout(function(){CheckLog();}, 60000); \r",
									"\r",
									"setTimeout(function(){RemovePartner();}, 70000); \r",
									"\r",
									"setTimeout(function(){\r",
									"pm.environment.unset(\"current_timestamp\");\r",
									"pm.environment.unset(\"AccessToken\");\r",
									"pm.environment.unset(\"random_number\");\r",
									"pm.environment.unset(\"PartnerName\");\r",
									"pm.environment.unset(\"MerchantContact\");\r",
									"pm.environment.unset(\"CPID\");\r",
									"pm.environment.unset(\"GetResponse_PartnerId\");\r",
									"pm.environment.unset(\"AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountId\");\r",
									"pm.environment.unset(\"random_IM\");\r",
									"pm.environment.unset(\"random_ICCID\");\r",
									"pm.environment.unset(\"ThingName\");\r",
									"pm.environment.unset(\"GetResponse_ThingID\");\r",
									"pm.environment.unset(\"GetResponse_IMSI\");\r",
									"pm.environment.unset(\"encodedKeys_Authorization_Register\");\r",
									"pm.environment.unset(\"random_Sensor\");\r",
									"pm.environment.unset(\"random_Sensor_AsgardHTTP\");\r",
									"pm.environment.unset(\"GetResponse_ThingToken\");\r",
									"pm.environment.unset(\"tid\");\r",
									"}, 75000); \r",
									"setTimeout(async function(){}, 80000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var Username = pm.environment.get(\"Username\");\r",
									"var Password = pm.environment.get(\"Password\");\r",
									"\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"var controlapis = pm.environment.get(\"controlapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"//format YYYYMMDDHHMMSSS\r",
									"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
									"// console.log('currentTmestamp',currentTmestamp);\r",
									"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- statusCodeList --------------//\r",
									"//set variable to statusCodeList JSON.parse\r",
									"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
									"//set global variable to statusCode 200\r",
									"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
									"//set global variable to statusCode 201\r",
									"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
									"//set global variable to statusCode 403\r",
									"pm.globals.set(\"statusCodeForbidden\", statusCodeList.statusCodeForbidden);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultCodeList --------------//\r",
									"//set variable to resultCodeList JSON.parse\r",
									"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
									"//set global variable to resultCode \"20000\"\r",
									"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
									"//set global variable to resultCode \"20100\"\r",
									"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
									"//set global variable to resultCode \"40300\"\r",
									"pm.globals.set(\"resultCodeForbiddenMissingOrInvalidParameter\", resultCodeList.resultCodeForbiddenMissingOrInvalidParameter);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionSuccessList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
									"//set global variable to resultDescription \"SignInProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
									"//set global variable to resultDescription \"CreatePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
									"//set global variable to resultDescription \"CreateAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
									"//set global variable to resultDescription \"CreateThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThing\", resultDescriptionSuccessList.resultDescriptionCreateThing);\r",
									"//set global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThingStateInfo\", resultDescriptionSuccessList.resultDescriptionCreateThingStateInfo);\r",
									"//set global variable to resultDescription \"RemovePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
									"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
									"//set global variable to resultDescription \"RemoveThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThing\", resultDescriptionSuccessList.resultDescriptionRemoveThing);\r",
									"//set global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThingStateInfo\", resultDescriptionSuccessList.resultDescriptionRemoveThingStateInfo);\r",
									"//set global variable to resultDescription \"ControlOneThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessControlOneThing\", resultDescriptionSuccessList.resultDescriptionSuccessControlOneThing);\r",
									"//set global variable to resultDescription \"Register is Success\"\r",
									"pm.globals.set(\"resultDescriptionRegisterIsSuccess\", resultDescriptionSuccessList.resultDescriptionRegisterIsSuccess);\r",
									"//set global variable to resultDescription \"InquiryThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionInquiryThing\", resultDescriptionSuccessList.resultDescriptionInquiryThing);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionErrorList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
									"//set global variable to resultDescription \"The Parameter Imsi/ThingToken is Missing Or Invalid\"\r",
									"pm.globals.set(\"resultDescriptionErrorTheParameterImsiThingTokenIsMissingOrInvalid\", resultDescriptionErrorList.resultDescriptionErrorTheParameterImsiThingTokenIsMissingOrInvalid);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- HeaderList --------------//\r",
									"//set variable to HeaderList JSON.parse\r",
									"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
									"//---------------- set globals Other --------------//\r",
									"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
									"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
									"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
									"//set global variable to kbn-versio \"7.5.1\"\r",
									"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Signin_ --------------//\r",
									"//set global variable to x_ais_OrderRef \"Signin_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreatePartner --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
									"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
									"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
									"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreateAccount --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
									"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
									"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Thing --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThing\", HeaderList.Thing.x_ais_OrderRef_CreateThing);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThing\", HeaderList.Thing.x_ais_OrderDesc_CreateThing);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThing\", HeaderList.Thing.x_ais_OrderRef_RemoveThing);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThing\", HeaderList.Thing.x_ais_OrderDesc_RemoveThing);\r",
									"//set global variable to x_ais_OrderRef \"InquiryThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_InquiryThing\", HeaderList.Thing.x_ais_OrderRef_InquiryThing);\r",
									"//set global variable to x_ais_OrderDesc \"InquiryThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_InquiryThing\", HeaderList.Thing.x_ais_OrderDesc_InquiryThing);\r",
									"//set global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_RemoveThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_RemoveThingStateInfo);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Control --------------//\r",
									"//set global variable to x_ais_OrderRef \"ControlThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ControlThing\", HeaderList.Control.x_ais_OrderRef_ControlThing);\r",
									"//set global variable to x_ais_OrderRef \"ControlThingfail_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ControlThing_fail\", HeaderList.Control.x_ais_OrderRef_ControlThing_fail);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals AsgardHTTP --------------//\r",
									"//set global variable to x_ais_OrderRef \"RegisHTTP_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RegisHTTP\", HeaderList.AsgardHTTP.x_ais_OrderRef_RegisHTTP);\r",
									"//set global variable to x_ais_OrderRef \"RegisHTTPfail_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RegisHTTP_fail\", HeaderList.AsgardHTTP.x_ais_OrderRef_RegisHTTP_fail);\r",
									"//set global variable to x_ais_OrderDesc \"Register Thing in MG\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RegisHTTP\", HeaderList.AsgardHTTP.x_ais_OrderDesc_RegisHTTP);\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"SignInProcess is Success\"\r",
									"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
									"//get global variable to resultDescription \"CreatePartner is Success\"\r",
									"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
									"//get global variable to resultDescription \"CreateAccount is Success\"\r",
									"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
									"//get global variable to resultDescription \"CreateThing is Success\"\r",
									"var resultDescriptionCreateThing = pm.globals.get(\"resultDescriptionCreateThing\");\r",
									"//get global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"var resultDescriptionCreateThingStateInfo = pm.globals.get(\"resultDescriptionCreateThingStateInfo\");\r",
									"//get global variable to resultDescription \"ControlOneThing is Success\"\r",
									"var resultDescriptionSuccessControlOneThing = pm.globals.get(\"resultDescriptionSuccessControlOneThing\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- urlRouteList --------------//\r",
									"//set variable to urlRouteList JSON.parse\r",
									"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
									"//---------------- set url Create --------------//\r",
									"//set global variable to url \"/api/v1/auth/signin\"\r",
									"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
									"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
									"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"pm.globals.set(\"urlThingCreateThing\", urlRouteList.Thing.urlThingCreateThing);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"pm.globals.set(\"urlThingCreateThingStateInfo\", urlRouteList.Thing.urlThingCreateThingStateInfo);\r",
									"//set global variable to url \"/api/v1/Control/Thing\"\r",
									"pm.globals.set(\"urlControlThing\", urlRouteList.Control.urlControlThing);\r",
									"//---------------- get url Create --------------//\r",
									"//get global variable to url \"/api/v1/auth/signin\"\r",
									"var urlSignin = pm.globals.get(\"urlSignin\");\r",
									"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
									"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"var urlThingCreateThing = pm.globals.get(\"urlThingCreateThing\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"var urlThingCreateThingStateInfo = pm.globals.get(\"urlThingCreateThingStateInfo\");\r",
									"//get global variable to url \"/api/v1/Control/Thing\"\r",
									"var urlControlThing = pm.globals.get(\"urlControlThing\");\r",
									"//---------------- set url Remove --------------//\r",
									"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
									"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"pm.globals.set(\"urlThingRemoveThing\", urlRouteList.Thing.urlThingRemoveThing);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"pm.globals.set(\"urlThingRemoveThingStateInfo\", urlRouteList.Thing.urlThingRemoveThingStateInfo);\r",
									"//---------------- set url Inquiry --------------//\r",
									"//set global variable to url \"/api/v1/Thing/InquiryThing\"\r",
									"pm.globals.set(\"urlThingInquiryThing\", urlRouteList.Thing.urlThingInquiryThing);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Signin_ --------------//\r",
									"//get global variable to x_ais_OrderRef \"Signin_\"\r",
									"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"var x_ais_OrderRef_CreateThing = pm.globals.get(\"x_ais_OrderRef_CreateThing\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"var x_ais_OrderDesc_CreateThing = pm.globals.get(\"x_ais_OrderDesc_CreateThing\");\r",
									"//get global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"var x_ais_OrderRef_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderRef_CreateThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"var x_ais_OrderDesc_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_CreateThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Control --------------//\r",
									"//get global variable to x_ais_OrderRef \"ControlThing_\"\r",
									"var x_ais_OrderRef_ControlThing = pm.globals.get(\"x_ais_OrderRef_ControlThing\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get url Remove --------------//\r",
									"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
									"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
									"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// Signin get token\r",
									"Signin = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSignin = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_Signin + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_UserAuthentication,\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestSignin = {\r",
									"            mode: 'raw',\r",
									"            raw:\r",
									"                JSON.stringify({\r",
									"                    username: Username,\r",
									"                    password: Password\r",
									"                })\r",
									"        };\r",
									"\r",
									"        let optionsSignin = {\r",
									"            url: url + provisioningapis + urlSignin,\r",
									"            method: 'POST',\r",
									"            header: headersOptSignin,\r",
									"            body: httpRequestSignin\r",
									"        };\r",
									"        // console.log('request Signin');\r",
									"        let response = await reqPromise(optionsSignin);\r",
									"        let jsonDataSignin = await response.json();\r",
									"\r",
									"        // setAccessToken\r",
									"        await pm.environment.set(\"AccessToken\", jsonDataSignin.AccessToken);\r",
									"\r",
									"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('Signin : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // SignInProcess is Success\r",
									"        pm.test('Signin : OperationStatus Description is ' + '\"' + resultDescriptionSuccessSignIn + '\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
									"        });\r",
									"\r",
									"        //set random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //set PartnerName\r",
									"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
									"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
									"        //set MerchantContact\r",
									"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
									"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
									"        // set CPID\r",
									"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
									"        pm.environment.set(\"CPID\", CPIDValue)\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreatePartner\r",
									"CreatePartner = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreatePartner = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreatePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreatePartner,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreatePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
									"                \"PartnerType\": [\r",
									"                    \"Supplier\",\r",
									"                    \"Customer\"\r",
									"                ],\r",
									"                \"PartnerDetail\": {\r",
									"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
									"                    \"CPID\": pm.environment.get(\"CPID\")\r",
									"                },\r",
									"                \"Property\": {\r",
									"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreatePartner = {\r",
									"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreatePartner,\r",
									"            body: httpRequestCreatePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsCreatePartner);\r",
									"        let jsonDataCreatePartner = await response.json();\r",
									"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
									"\r",
									"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreatePartner : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreatePartner is Success\r",
									"        pm.test('CreatePartner : OperationStatus Description is ' + '\"' + resultDescriptionCreatePartner + '\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
									"        });\r",
									"\r",
									"        //GetResponse_PartnerId\r",
									"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
									"\r",
									"        //Accountname\r",
									"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
									"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateAccount\r",
									"CreateAccount = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateAccount = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateAccount,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreateAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateAccount = {\r",
									"            url: url + provisioningapis + urlAccountCreateAccount,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateAccount,\r",
									"            body: httpRequestCreateAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateAccount');\r",
									"        let response = await reqPromise(optionsCreateAccount);\r",
									"        let jsonDataCreateAccount = await response.json();\r",
									"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
									"\r",
									"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateAccount : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateAccount is Success\r",
									"        pm.test('CreateAccount : OperationStatus Description is ' + '\"' + resultDescriptionCreateAccount + '\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
									"        });\r",
									"        // GetResponse_AccountName\r",
									"        pm.environment.set(\"GetResponse_AccountName\", jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
									"        // GetResponse_AccountId\r",
									"        pm.environment.set(\"GetResponse_AccountId\", jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
									"        // random_IM\r",
									"        pm.environment.set(\"random_IM\", _.random(10000000, 99999999) + \" \" + _.random(1000000, 9999999))\r",
									"        // random_ICCID\r",
									"        pm.environment.set(\"random_ICCID\", _.random(1000000, 9999999) + \" \" + _.random(100000, 999999))\r",
									"        // random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //ThingName\r",
									"        let thingNameValue = fieldDataValue.Thing.ThingNameValue; // \"Sensor_TestThingName\"\r",
									"        pm.environment.set(\"ThingName\", thingNameValue + pm.environment.get(\"random_number\"))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThing\r",
									"CreateThing = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThing = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateThing + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateThing,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey': pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreateThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingName\": pm.environment.get(\"ThingName\"),\r",
									"                \"IMEI\": pm.environment.get(\"random_IM\"),\r",
									"                \"IMSI\": pm.environment.get(\"random_IM\"),\r",
									"                \"ICCID\": pm.environment.get(\"random_ICCID\"),\r",
									"                \"RouteUrl\": fieldDataValue.Thing.RouteUrlValue , //[\"http://10.12.3.4:2019/api/information/AddInformation\"]\r",
									"                \"RouteInfo\": {\r",
									"                    \"MIMO_ID\": fieldDataValue.Thing.RouteInfoMIMOIDValue , //\"606edada\"\r",
									"                    \"MIMO_SerialNo\": fieldDataValue.Thing.RouteInfoMIMOSerialNoValue //5466758878\r",
									"                },\r",
									"                \"RouteFlag\": {\r",
									"                    \"ThingName\": fieldDataValue.Thing.RouteFlagThingNameValue , //true\r",
									"                    \"ThingToken\": fieldDataValue.Thing.RouteFlagThingTokenValue, //true\r",
									"                    \"IMEI\": fieldDataValue.Thing.RouteFlagIMEIValue, //true\r",
									"                    \"ICCID\": fieldDataValue.Thing.RouteFlagICCIDValue, //true\r",
									"                    \"RouteInfo\": fieldDataValue.Thing.RouteFlagRouteInfoValue //true\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateThing = {\r",
									"            url: url + provisioningapis + urlThingCreateThing,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThing,\r",
									"            body: httpRequestCreateThing\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThing');\r",
									"        let response = await reqPromise(optionsCreateThing);\r",
									"        let jsonDataCreateThing = await response.json();\r",
									"        // console.log('jsonDataCreateThing',jsonDataCreateThing)\r",
									"\r",
									"        let operationStatusCreateThing = await jsonDataCreateThing.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateThing : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateThing : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateThing is Success\r",
									"        pm.test('CreateThing : OperationStatus Description is ' + '\"' + resultDescriptionCreateThing + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Description', resultDescriptionCreateThing);\r",
									"        });\r",
									"\r",
									"        pm.environment.set(\"GetResponse_ThingID\", jsonDataCreateThing.ThingInfo.ThingId)\r",
									"        pm.environment.set(\"GetResponse_IMSI\", jsonDataCreateThing.ThingInfo.IMSI)\r",
									"        \r",
									"        let keys = pm.environment.get(\"GetResponse_IMSI\") + \":\" + pm.environment.get(\"IpAddress\");\r",
									"        // console.log(\"keys\", keys);\r",
									"        let encodedKeys = CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(keys));\r",
									"        pm.environment.set(\"encodedKeys_Authorization_Register\", encodedKeys);\r",
									"\r",
									"        //Get Random Sensor \r",
									"        pm.environment.set(\"random_Sensor\", _.random(100, 999))\r",
									"\r",
									"        //Get Random Sensor AsgardHTTP\r",
									"        pm.environment.set(\"random_Sensor_AsgardHTTP\", _.random(100, 999))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThingStateInfo\r",
									"CreateThingStateInfo = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThingStateInfo = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateThingStateInfo,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey': pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        // {\"AA\" : pm.environment.get(\"random_Sensor\")}\r",
									"        let sensorValue = {};\r",
									"        sensorValue[fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP] = pm.environment.get(\"random_Sensor\");\r",
									"        // console.log('sensorValue',sensorValue);\r",
									"        \r",
									"        let httpRequestCreateThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": [\r",
									"                    pm.environment.get(\"GetResponse_ThingID\")\r",
									"                ],\r",
									"                \"Type\": fieldDataValue.CreateThingStateInfo.Type_Report,\r",
									"                \"Sensor\": sensorValue\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingCreateThingStateInfo,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThingStateInfo,\r",
									"            body: httpRequestCreateThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThingStateInfo');\r",
									"        let response = await reqPromise(optionsCreateThingStateInfo);\r",
									"        let jsonDataCreateThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataCreateThingStateInfo',jsonDataCreateThingStateInfo)\r",
									"\r",
									"        let operationStatusCreateThingStateInfo = await jsonDataCreateThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"CreateThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //CreateThingStateInfo is Success\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Description is ' + '\"' + resultDescriptionCreateThingStateInfo + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Description', resultDescriptionCreateThingStateInfo);\r",
									"        });\r",
									"\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// ControlThing\r",
									"ControlThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptControlThing = {\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_ControlThing + current_timestamp,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Content-Type':ContentType_ApplicationJson\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        // {\"AA\" : pm.environment.get(\"random_Sensor_AsgardHTTP\")}\r",
									"        let sensorValue = {};\r",
									"        sensorValue[fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP] = pm.environment.get(\"random_Sensor_AsgardHTTP\");\r",
									"        // console.log('sensorValue',sensorValue);\r",
									"\r",
									"        let httpRequestControlThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\"),\r",
									"                \"Sensors\": sensorValue\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsControlThing = {\r",
									"            url: url + controlapis + urlControlThing,\r",
									"            method: 'POST',\r",
									"            header: headersOptControlThing,\r",
									"            body: httpRequestControlThing\r",
									"        };\r",
									"\r",
									"        // console.log('response ControlThing');\r",
									"        let response = await reqPromise(optionsControlThing);\r",
									"        let jsonDataControlThing = await response.json();\r",
									"        // console.log('jsonDataControlThing',jsonDataControlThing)\r",
									"    \r",
									"        let operationStatusControlThing = await jsonDataControlThing.operationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"ControlThing : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('ControlThing : OperationStatus code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusControlThing).to.have.property('code', resultCodeSuccess);\r",
									"        });\r",
									"        //ControlOneThing is Success\r",
									"        pm.test('ControlThing : OperationStatus description is '+'\"'+ resultDescriptionSuccessControlOneThing+'\"', function () {\r",
									"            pm.expect(operationStatusControlThing).to.have.property('description', resultDescriptionSuccessControlOneThing);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"// RemoveAccount\r",
									" RemoveAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemoveAccount = {\r",
									"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveAccount,\r",
									"            body: httpRequestRemoveAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveAccount');\r",
									"        let response = await reqPromise(optionsRemoveAccount);\r",
									"        let jsonDataRemoveAccount = await response.json();\r",
									"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
									"    \r",
									"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveAccount is Success\r",
									"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"Signin();\r",
									"setTimeout(async function(){await CreatePartner();}, 3000); \r",
									"setTimeout(async function(){await CreateAccount();}, 6000); \r",
									"setTimeout(async function(){await CreateThing();}, 8000); \r",
									"setTimeout(async function(){await CreateThingStateInfo();}, 9000); \r",
									"setTimeout(async function(){await ControlThing();}, 10000); \r",
									"setTimeout(async function(){}, 20000); //for wait\r",
									"setTimeout(function(){RemoveAccount();}, 30000); "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-ais-UserName",
								"type": "text",
								"value": "{{x_ais_UserName_AisPartner}}"
							},
							{
								"key": "x-ais-OrderRef",
								"value": "{{x_ais_OrderRef_RegisHTTP_fail}}{{current_timestamp}}"
							},
							{
								"key": "x-ais-OrderDesc",
								"type": "text",
								"value": "{{x_ais_OrderDesc_RegisHTTP}}"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{Basic}} {{encodedKeys_Authorization_Register}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}{{httpapis}}/api/register/sim/v1",
							"host": [
								"{{url}}{{httpapis}}"
							],
							"path": [
								"api",
								"register",
								"sim",
								"v1"
							]
						},
						"description": "Type:Desire"
					},
					"response": []
				},
				{
					"name": "AsgardHTTPeSimRegister_TST_F4_0_2_007_Error_AccountExpired",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var Basic = pm.environment.get(\"Basic\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to xAisOrderRef \"RemoveThing_\"\r",
									"var x_ais_OrderRef_RemoveThing = pm.globals.get(\"x_ais_OrderRef_RemoveThing\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"var x_ais_OrderDesc_RemoveThing = pm.globals.get(\"x_ais_OrderDesc_RemoveThing\");\r",
									"//get global variable to xAisOrderRef \"RemoveThingStateInfo_\"\r",
									"var x_ais_OrderRef_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderRef_RemoveThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThingStateInfo\"\r",
									"var x_ais_OrderDesc_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_RemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals AsgardHTTP --------------//\r",
									"//get global variable to x_ais_OrderRef \"RegisHTTP_\"\r",
									"var x_ais_OrderRef_RegisHTTP = pm.globals.get(\"x_ais_OrderRef_RegisHTTP\");\r",
									"//get global variable to x_ais_OrderRef \"RegisHTTPfail_\"\r",
									"var x_ais_OrderRef_RegisHTTP_fail = pm.globals.get(\"x_ais_OrderRef_RegisHTTP_fail\");\r",
									"//get global variable to x_ais_OrderDesc \"Register Thing in MG\"\r",
									"var x_ais_OrderDesc_RegisHTTP = pm.globals.get(\"x_ais_OrderDesc_RegisHTTP\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get url Remove --------------//\r",
									"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
									"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"var urlThingRemoveThing = pm.globals.get(\"urlThingRemoveThing\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"var urlThingRemoveThingStateInfo = pm.globals.get(\"urlThingRemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"RemovePartner is Success\"\r",
									"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
									"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
									"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
									"//get global variable to resultDescription \"RemoveThing is Success\"\r",
									"var resultDescriptionRemoveThing = pm.globals.get(\"resultDescriptionRemoveThing\");\r",
									"//get global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"var resultDescriptionRemoveThingStateInfo = pm.globals.get(\"resultDescriptionRemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 403\r",
									"var statusCodeForbidden = pm.globals.get(\"statusCodeForbidden\");\r",
									"//get global variable to resultCode \"40305\"\r",
									"var resultCodeTheOperationHasAlreadyExpired = pm.globals.get(\"resultCodeTheOperationHasAlreadyExpired\");\r",
									"//get global variable to resultDescription \"The operation has already expired.\"\r",
									"var resultDescriptionTheOperationHasAlreadyExpired = pm.globals.get(\"resultDescriptionTheOperationHasAlreadyExpired\");\r",
									"//------------------------------------------------------------//\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Asgard HTTP(eSim) Register : Status code is \" + statusCodeForbidden, function () {\r",
									"    pm.response.to.have.status(statusCodeForbidden);\r",
									"});\r",
									"\r",
									"pm.test('Asgard HTTP(eSim) Register : operationStatus code is '+'\"'+ resultCodeTheOperationHasAlreadyExpired +'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeTheOperationHasAlreadyExpired);\r",
									"});\r",
									"\r",
									"pm.test('Asgard HTTP(eSim) Register : operationStatus DeveloperMessage is '+'\"'+ resultDescriptionTheOperationHasAlreadyExpired+'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheOperationHasAlreadyExpired);\r",
									"});\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// RemovePartner\r",
									" RemovePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemovePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemovePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemovePartner = {\r",
									"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemovePartner,\r",
									"            body: httpRequestRemovePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request RemovePartner');\r",
									"        let response = await reqPromise(optionsRemovePartner);\r",
									"        let jsonDataRemovePartner = await response.json();\r",
									"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
									"    \r",
									"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemovePartner is Success\r",
									"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveAccount\r",
									" RemoveAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemoveAccount = {\r",
									"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveAccount,\r",
									"            body: httpRequestRemoveAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveAccount');\r",
									"        let response = await reqPromise(optionsRemoveAccount);\r",
									"        let jsonDataRemoveAccount = await response.json();\r",
									"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
									"    \r",
									"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveAccount is Success\r",
									"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThing\r",
									" RemoveThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThing = {\r",
									"            url: url + provisioningapis + urlThingRemoveThing,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThing,\r",
									"            body: httpRequestRemoveThing\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveThing');\r",
									"        let response = await reqPromise(optionsRemoveThing);\r",
									"        let jsonDataRemoveThing = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThing)\r",
									"    \r",
									"        let operationStatusRemoveThing = await jsonDataRemoveThing.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThing : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThing : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThing is Success\r",
									"        pm.test('RemoveThing : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThing+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Description', resultDescriptionRemoveThing);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThingStateInfo\r",
									" RemoveThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"            \r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\"),\r",
									"                \"stateType\": fieldDataValue.CreateThingStateInfo.Type_Report, //Report\r",
									"                \"stateKey\": fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP //AA\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingRemoveThingStateInfo,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThingStateInfo,\r",
									"            body: httpRequestRemoveThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('response RemoveThingStateInfo');\r",
									"        let response = await reqPromise(optionsRemoveThingStateInfo);\r",
									"        let jsonDataRemoveThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThingStateInfo)\r",
									"    \r",
									"        let operationStatusRemoveThingStateInfo = await jsonDataRemoveThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThingStateInfo is Success\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThingStateInfo+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Description', resultDescriptionRemoveThingStateInfo);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"//---------------- LogDefaultValue --------------//\r",
									"//set variable to LogDefaultValue JSON.parse\r",
									"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
									"// console.log('LogDefaultValue',LogDefaultValue);\r",
									"//---------------- set globals Other --------------//\r",
									"\r",
									"var SearchLog = LogDefaultValue.SearchLog;\r",
									"// console.log('SearchLog',SearchLog);\r",
									"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
									"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
									"var kbn_version = SearchLog.header.kbn_version;\r",
									"var authorization = SearchLog.header.Authorization;\r",
									"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
									"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
									"var namespace = LogDefaultValue.Other.namespace;\r",
									"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
									"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
									"var header_x_ais_username = LogDefaultValue.Other.header_x_ais_username;\r",
									"var methodPost = LogDefaultValue.Other.methodPost;\r",
									"\r",
									"// Detail\r",
									"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
									"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
									"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
									"\r",
									"// Summary\r",
									"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
									"\r",
									"// Asgard.Http.APIs\r",
									"var applicationName = LogDefaultValue.AsgardHTTP.applicationName;\r",
									"var cmdName = LogDefaultValue.AsgardHTTP.cmdNameRegister;\r",
									"var containerId = LogDefaultValue.AsgardHTTP.containerId;\r",
									"var requestObjectUrlStaging = LogDefaultValue.AsgardHTTP.requestObjectUrlRegisterMgStaging;\r",
									"var urlRegister = LogDefaultValue.AsgardHTTP.urlRegister;\r",
									"\r",
									"// Check CDR (Summary Log) and EDR (Detail Log)\r",
									"SearchLogFindTid = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSearchLogFindTid = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = x_ais_OrderRef_RegisHTTP_fail+ current_timestamp; \r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestSearchLogFindTid = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"phrase\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"\r",
									"        let optionsSearchLogFindTid = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptSearchLogFindTid,\r",
									"            body: httpRequestSearchLogFindTid\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsSearchLogFindTid);\r",
									"        let jsonDataSearchLogFindTid = await response.json();\r",
									"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
									"        // console.log('hits',hits)\r",
									"  \r",
									"        // find tid\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            // let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"        \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            if(applicationNameValue == applicationName){\r",
									"                let tid = hits[i]._source.cauldron.tid;\r",
									"                pm.environment.set(\"tid\", tid);\r",
									"                break;\r",
									"           }\r",
									"        }\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"CheckLog = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCheckLog = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = pm.environment.get(\"tid\");\r",
									"\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        // console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestCheckLog = {\r",
									"            mode: 'raw',\r",
									"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"phrase\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"        let optionsCheckLog = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptCheckLog,\r",
									"            body: httpRequestCheckLog\r",
									"        }; \r",
									"        let response = await reqPromise(optionsCheckLog);\r",
									"        let jsonDataCheckLog = await response.json();\r",
									"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
									"        \r",
									"        // //200\r",
									"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });     \r",
									"        \r",
									"        let hits = jsonDataCheckLog.hits.hits\r",
									"        console.log('hits',hits)\r",
									"  \r",
									"        // find logType\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            //  let logType = hits[i]._source.cauldron.logType\r",
									"            let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"           \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            \r",
									"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
									"            // console.log('resultDataLog',resultDataLog)\r",
									"\r",
									"            let tidControl = x_ais_OrderRef_RegisHTTP_fail  + current_timestamp;\r",
									"            // console.log(tidControl);\r",
									"            if(applicationNameValue == applicationName){\r",
									"                 \r",
									"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and Asgard.Http.APIs\r",
									"                    pm.test(\"Check Summary Log : Asgard_HTTP(eSim) Register\" , function () {\r",
									"                        console.log(\"======== Check Summary Log ( Expected = Actual) [Asgard_HTTP(eSim) Register] ==================\");\r",
									"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
									"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
									"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeTheOperationHasAlreadyExpired);\r",
									"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionTheOperationHasAlreadyExpired);\r",
									"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
									"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        // console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
									"                        // console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
									"\r",
									"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
									"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
									"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeTheOperationHasAlreadyExpired); \r",
									"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionTheOperationHasAlreadyExpired); \r",
									"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
									"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"\r",
									"                        let thingId = fieldDataValue.AsgardHTTP.Value_AsgardHTTPeSim_Register_TST_F4_0_2_007_ThingId_Error;\r",
									"                        let imei = fieldDataValue.AsgardHTTP.Value_AsgardHTTPeSim_Register_TST_F4_0_2_007_Imei_Error;\r",
									"                        let imsi = fieldDataValue.AsgardHTTP.Value_AsgardHTTPeSim_Register_TST_F4_0_2_007_Imsi_Error;\r",
									"                        let customUrl= urlCheckLog + requestObjectUrlStaging;\r",
									"\r",
									"                        // check identity\r",
									"                        // \"identity\":\"{\\\"Imei\\\":\\\"496151103122639\\\",\\\"ThingId\\\":\\\"6013965896d0ed0001f5a46d\\\",\\\"Imsi\\\":\\\"496151103122639\\\"}\"\r",
									"                        let dataSummaryIdentity = JSON.parse(resultDataLog.identity);\r",
									"\r",
									"                        console.log(\"identity.ThingId : \" + dataSummaryIdentity.ThingId + \" = \" + thingId);\r",
									"                        console.log(\"identity.Imei : \" + dataSummaryIdentity.Imei + \" = \" + imei);\r",
									"                        console.log(\"identity.Imsi : \" + dataSummaryIdentity.Imsi + \" = \" + imsi);\r",
									"\r",
									"                        pm.expect(dataSummaryIdentity.ThingId).to.eql(thingId); \r",
									"                        pm.expect(dataSummaryIdentity.Imei).to.eql(imei); \r",
									"                        pm.expect(dataSummaryIdentity.Imsi).to.eql(imsi); \r",
									"\r",
									"                        // check custom\r",
									"                        // \\\"custom\\\":{ \\\"customData\\\":{ \\\"Imsi\\\":[ \\\"100010001607111\\\" ], \\\"url\\\":\\\"mg-iot.sandais.com/api/register/sim/v1\\\", \\\"Imei\\\":[ \\\"10001001607111\\\" ], \\\"ThingId\\\":[ \\\"601390a847fd1e00018b0d52\\\" ] }, \\\"endPointSummary\\\":[ { \\\"no\\\":\\\"1\\\", \\\"endPointName\\\":\\\"db.ThingsCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:Inquiry was Success\\\", \\\"processTime\\\":0.0004 }, { \\\"no\\\":\\\"2\\\", \\\"endPointName\\\":\\\"db.AccountsCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:Inquiry was Success\\\", \\\"processTime\\\":0.0002 } ] }\r",
									"\r",
									"                        let customData = resultDataLog.custom.customData\r",
									"\r",
									"                        console.log(\"custom.url : \" + customData.url + \" = \" + customUrl);\r",
									"                        console.log(\"custom.Imei[0] : \" + customData.Imei[0] + \" = \" + imei);\r",
									"                        console.log(\"custom.Imsi[0] : \" + customData.Imsi[0] + \" = \" + imsi);\r",
									"                        console.log(\"custom.ThingId[0] : \" + customData.ThingId[0] + \" = \" + thingId);\r",
									"\r",
									"                        pm.expect(customData.url).to.eql(customUrl); \r",
									"                        pm.expect(customData.Imei[0]).to.eql(imei); \r",
									"                        pm.expect(customData.Imsi[0]).to.eql(imsi); \r",
									"                        pm.expect(customData.ThingId[0]).to.eql(thingId);\r",
									"\r",
									"                        let custom = resultDataLog.custom.endPointSummary;\r",
									"                        let countCustom = custom.length;\r",
									"                       \r",
									"                        // [\"db.ThingsCollection\",\"db.AccountsCollection\"]\r",
									"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_Asgard_HTTP_eSim_Register_007;\r",
									"                        // [\"20000:Inquiry was Success\",\"20000:Inquiry was Success\"]\r",
									"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_Asgard_HTTP_eSim_Register_007;\r",
									"                        let countCustomStep = dataEndPointName.length;\r",
									"\r",
									"                        console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep);\r",
									"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
									"                        \r",
									"                        for(let i=0;i<countCustomStep;i++){\r",
									"                            let no = custom[i].no;\r",
									"                            let valueEndPointName = custom[i].endPointName;\r",
									"                            let valueResponseStatus = custom[i].responseStatus;\r",
									"                            // console.log(\"i\",i);\r",
									"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
									"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
									"\r",
									"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString());\r",
									"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i]);\r",
									"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i]);\r",
									"\r",
									"                            pm.expect(no).to.eql((i+1).toString()); \r",
									"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
									"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]); \r",
									"                        }\r",
									"                    }); \r",
									"                }\r",
									"\r",
									"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and Asgard.Http.APIs\r",
									"\r",
									"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
									"                    // console.log('endPointNameValue ',endPointNameValue)\r",
									"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [Asgard_HTTP(eSim) Register]\", function () {\r",
									"                        console.log(\"======== Check Detail Log ( Expected = Actual) [Asgard_HTTP(eSim) Register] ==================\");\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
									"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
									"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
									"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.custom1.activityLog.processTime + \" = \" + resultDataLog.custom1.activityLog.processTime);\r",
									"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
									"\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
									"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
									"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
									"\r",
									"                        if( endPointNameValue == undefined){\r",
									"                            // check requestObject\r",
									"                            // \"requestObject\":\"{\\\"url\\\":\\\"/api/register/sim/v1\\\",\\\"method\\\":\\\"POST\\\",\\\"headers\\\":{\\\"Cache-Control\\\":\\\"no-cache\\\",\\\"Content-Type\\\":\\\"application/json\\\",\\\"Accept\\\":\\\"*/*\\\",\\\"Accept-Encoding\\\":\\\"gzip,deflate,br\\\",\\\"Authorization\\\":\\\"Basic NDk2MTUxMTAzMTIyNjM5OjEuMi4zLjQ=\\\",\\\"Host\\\":\\\"mg-staging.sandais.com\\\",\\\"User-Agent\\\":\\\"PostmanRuntime/7.26.8\\\",\\\"Content-Length\\\":\\\"2\\\",\\\"x-real-ip\\\":\\\"171.96.174.10\\\",\\\"x-forwarded-for\\\":\\\"171.96.174.10\\\",\\\"x-forwarded-proto\\\":\\\"https\\\",\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"RegisHTTP_202101291201997\\\",\\\"x-ais-orderdesc\\\":\\\"Register Thing in MG\\\",\\\"postman-token\\\":\\\"83bc76b4-8538-4a10-94fc-8b9cc1143ec8\\\",\\\"x-request-id\\\":\\\"bbf6c560-8bea-4d53-87d8-28a3f3664d37\\\",\\\"x-b3-traceid\\\":\\\"eb252eaef48d4ec507b32acd0a8dc573\\\",\\\"x-b3-spanid\\\":\\\"07b32acd0a8dc573\\\",\\\"x-b3-sampled\\\":\\\"0\\\",\\\"x-ais-SessionId\\\":\\\"1611896410502\\\",\\\"identity\\\":\\\"{\\\\\\\"Imei\\\\\\\":null,\\\\\\\"ThingId\\\\\\\":null,\\\\\\\"Imsi\\\\\\\":\\\\\\\"496151103122639xx\\\\\\\"}\\\",\\\"custom\\\":\\\"{\\\\\\\"Imsi\\\\\\\":[\\\\\\\"496151103122639xx\\\\\\\"],\\\\\\\"url\\\\\\\":\\\\\\\"mg-staging.sandais.com/api/register/sim/v1\\\\\\\",\\\\\\\"Imei\\\\\\\":null,\\\\\\\"ThingId\\\\\\\":null}\\\"},\\\"queryString\\\":{},\\\"routeParamteters\\\":{},\\\"body\\\":{}}\"\r",
									"\r",
									"                            // \\\"requestObject\\\":\\\"{ \\\\\\\"url\\\\\\\":\\\\\\\"/api/register/sim/v1\\\\\\\", \\\\\\\"method\\\\\\\":\\\\\\\"POST\\\\\\\", \\\\\\\"headers\\\\\\\":{ \\\\\\\"Cache-Control\\\\\\\":\\\\\\\"no-cache\\\\\\\", \\\\\\\"Content-Type\\\\\\\":\\\\\\\"application/json\\\\\\\", \\\\\\\"Accept\\\\\\\":\\\\\\\"*/*\\\\\\\", \\\\\\\"Accept-Encoding\\\\\\\":\\\\\\\"gzip, deflate, br\\\\\\\", \\\\\\\"Authorization\\\\\\\":\\\\\\\"Basic MTAwMDEwMDAxNjA3MTExOjEuMi4zLjQ=\\\\\\\", \\\\\\\"Host\\\\\\\":\\\\\\\"mg-iot.sandais.com\\\\\\\", \\\\\\\"User-Agent\\\\\\\":\\\\\\\"PostmanRuntime/7.26.8\\\\\\\", \\\\\\\"Content-Length\\\\\\\":\\\\\\\"2\\\\\\\", \\\\\\\"x-real-ip\\\\\\\":\\\\\\\"182.232.183.255\\\\\\\", \\\\\\\"x-forwarded-for\\\\\\\":\\\\\\\"182.232.183.255, 10.233.67.0\\\\\\\", \\\\\\\"x-forwarded-proto\\\\\\\":\\\\\\\"http\\\\\\\", \\\\\\\"x-ais-username\\\\\\\":\\\\\\\"AisPartner\\\\\\\", \\\\\\\"x-ais-orderref\\\\\\\":\\\\\\\"RegisHTTPfail_202105112305646\\\\\\\", \\\\\\\"x-ais-orderdesc\\\\\\\":\\\\\\\"Register Thing in MG\\\\\\\", \\\\\\\"postman-token\\\\\\\":\\\\\\\"d17510fe-5c95-4469-a566-ee159edf27f7\\\\\\\", \\\\\\\"x-envoy-external-address\\\\\\\":\\\\\\\"10.233.67.0\\\\\\\", \\\\\\\"x-request-id\\\\\\\":\\\\\\\"f9223a83-5066-4961-be96-1a5fe71044eb\\\\\\\", \\\\\\\"x-envoy-original-path\\\\\\\":\\\\\\\"/httpapis/api/register/sim/v1\\\\\\\", \\\\\\\"x-b3-traceid\\\\\\\":\\\\\\\"a0b28884d6dfb030de810767d279da92\\\\\\\", \\\\\\\"x-b3-spanid\\\\\\\":\\\\\\\"f2306eef46bcfdf3\\\\\\\", \\\\\\\"x-b3-parentspanid\\\\\\\":\\\\\\\"de810767d279da92\\\\\\\", \\\\\\\"x-b3-sampled\\\\\\\":\\\\\\\"0\\\\\\\", \\\\\\\"x-ais-SessionId\\\\\\\":\\\\\\\"1620752294628\\\\\\\", \\\\\\\"identity\\\\\\\":\\\\\\\"{ \\\\\\\\\\\\\\\"Imei\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"10001001607111\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"ThingId\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"601390a847fd1e00018b0d52\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Imsi\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"100010001607111\\\\\\\\\\\\\\\" }\\\\\\\", \\\\\\\"custom\\\\\\\":\\\\\\\"{ \\\\\\\\\\\\\\\"Imsi\\\\\\\\\\\\\\\":[ \\\\\\\\\\\\\\\"100010001607111\\\\\\\\\\\\\\\" ], \\\\\\\\\\\\\\\"url\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"mg-iot.sandais.com/api/register/sim/v1\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Imei\\\\\\\\\\\\\\\":[ \\\\\\\\\\\\\\\"10001001607111\\\\\\\\\\\\\\\" ], \\\\\\\\\\\\\\\"ThingId\\\\\\\\\\\\\\\":[ \\\\\\\\\\\\\\\"601390a847fd1e00018b0d52\\\\\\\\\\\\\\\" ] }\\\\\\\" }, \\\\\\\"queryString\\\\\\\":{ }, \\\\\\\"routeParamteters\\\\\\\":{ }, \\\\\\\"body\\\\\\\":{ } }\\\"\r",
									"\r",
									"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
									"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
									"\r",
									"                            let url = urlRegister; \r",
									"                            let x_ais_orderref = x_ais_OrderRef_RegisHTTP_fail + current_timestamp;\r",
									"                            let x_ais_orderdesc = x_ais_OrderDesc_RegisHTTP;\r",
									"                            let x_ais_userName = x_ais_UserName_AisPartner;\r",
									"                            let authorization = Basic + ' ' + pm.environment.get(\"encodedKeys_Authorization_Register\");\r",
									"                            let imei = fieldDataValue.AsgardHTTP.Value_AsgardHTTPeSim_Register_TST_F4_0_2_007_Imei_Error;\r",
									"                            let imsi = fieldDataValue.AsgardHTTP.Value_AsgardHTTPeSim_Register_TST_F4_0_2_007_Imsi_Error;\r",
									"                            let thingId = fieldDataValue.AsgardHTTP.Value_AsgardHTTPeSim_Register_TST_F4_0_2_007_ThingId_Error;\r",
									"                            let customUrl= urlCheckLog + requestObjectUrlStaging;\r",
									"\r",
									"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
									"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
									"                            console.log(\"headers.x_ais_userName : \" + jsonParseRequestObject.headers[header_x_ais_username] + \" = \" + x_ais_userName);\r",
									"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
									"                            console.log(\"headers.Authorization : \" + jsonParseRequestObject.headers.Authorization + \" = \" + authorization);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
									"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_username]).to.eql(x_ais_userName);\r",
									"                            pm.expect(jsonParseRequestObject.headers.Authorization).to.eql(authorization);\r",
									"\r",
									"                            // check requestObject headers.identity\r",
									"                            let jsonParseRequestObjectHeadersIdentity = JSON.parse(jsonParseRequestObject.headers.identity);\r",
									"                            // console.log('jsonParseRequestObjectHeadersIdentity',jsonParseRequestObjectHeadersIdentity);\r",
									"\r",
									"                            console.log(\"headers.identity.Imei : \" + jsonParseRequestObjectHeadersIdentity.Imei + \" = \" + imei);\r",
									"                            console.log(\"headers.identity.Imsi : \" + jsonParseRequestObjectHeadersIdentity.Imsi + \" = \" + imsi);\r",
									"                            console.log(\"headers.identity.ThingId : \" + jsonParseRequestObjectHeadersIdentity.ThingId + \" = \" + thingId);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObjectHeadersIdentity.Imei).to.eql(imei);\r",
									"                            pm.expect(jsonParseRequestObjectHeadersIdentity.Imsi).to.eql(imsi);\r",
									"                            pm.expect(jsonParseRequestObjectHeadersIdentity.ThingId).to.eql(thingId);\r",
									"\r",
									"                            // check requestObject headers.custom\r",
									"                            let jsonParseRequestObjectHeadersCustom = JSON.parse(jsonParseRequestObject.headers.custom);\r",
									"                            // console.log('jsonParseRequestObjectHeadersCustom',jsonParseRequestObjectHeadersCustom);\r",
									"\r",
									"                            console.log(\"headers.custom.url : \" + jsonParseRequestObjectHeadersCustom.url + \" = \" + customUrl);\r",
									"                            console.log(\"headers.custom.Imei[0] : \" + jsonParseRequestObjectHeadersCustom.Imei[0] + \" = \" + imei);\r",
									"                            console.log(\"headers.custom.Imsi[0] : \" + jsonParseRequestObjectHeadersCustom.Imsi[0] + \" = \" + imsi);\r",
									"                            console.log(\"headers.custom.ThingId[0] : \" + jsonParseRequestObjectHeadersCustom.ThingId[0] + \" = \" + thingId);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObjectHeadersCustom.url).to.eql(customUrl);\r",
									"                            pm.expect(jsonParseRequestObjectHeadersCustom.Imei[0]).to.eql(imei);\r",
									"                            pm.expect(jsonParseRequestObjectHeadersCustom.Imsi[0]).to.eql(imsi);\r",
									"                            pm.expect(jsonParseRequestObjectHeadersCustom.ThingId[0]).to.eql(thingId);\r",
									"\r",
									"                            console.log(\"queryString : \" + JSON.stringify(jsonParseRequestObject.queryString) + \" = \" + JSON.stringify({}));\r",
									"                            console.log(\"routeParamteters : \" + JSON.stringify(jsonParseRequestObject.routeParamteters) + \" = \" + JSON.stringify({}));\r",
									"                            console.log(\"body : \" + JSON.stringify(jsonParseRequestObject.body) + \" = \" + JSON.stringify({}));\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.queryString).to.eql({}); \r",
									"                            pm.expect(jsonParseRequestObject.routeParamteters).to.eql({}); \r",
									"                            pm.expect(jsonParseRequestObject.body).to.eql({}); \r",
									"\r",
									"                            // check responseObject\r",
									"                            // responseObject: \"{\"OperationStatus\":{\"Code\":\"40305\",\"DeveloperMessage\":\"The operation has already expired.\"}}\"\r",
									"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
									"                            // console.log('jsonParseResponseObject',jsonParseResponseObject); \r",
									"\r",
									"                            console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeTheOperationHasAlreadyExpired);\r",
									"                            console.log(\"response.OperationStatus.DeveloperMessage : \" + jsonParseResponseObject.OperationStatus.DeveloperMessage + \" = \" + resultDescriptionTheOperationHasAlreadyExpired); \r",
									"\r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeTheOperationHasAlreadyExpired);  \r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheOperationHasAlreadyExpired);  \r",
									"                        }\r",
									"                    }); \r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"setTimeout(function(){SearchLogFindTid();}, 1000); \r",
									"setTimeout(function(){CheckLog();}, 9000); \r",
									"\r",
									"// setTimeout(function(){RemoveThingStateInfo();}, 15000); \r",
									"// setTimeout(function(){RemoveThing();}, 20000); \r",
									"// setTimeout(function(){RemoveAccount();}, 25000); \r",
									"// setTimeout(function(){RemovePartner();}, 30000); \r",
									"\r",
									"setTimeout(function(){\r",
									"pm.environment.unset(\"current_timestamp\");\r",
									"pm.environment.unset(\"AccessToken\");\r",
									"pm.environment.unset(\"random_number\");\r",
									"pm.environment.unset(\"PartnerName\");\r",
									"pm.environment.unset(\"MerchantContact\");\r",
									"pm.environment.unset(\"CPID\");\r",
									"pm.environment.unset(\"GetResponse_PartnerId\");\r",
									"pm.environment.unset(\"AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountId\");\r",
									"pm.environment.unset(\"random_IM\");\r",
									"pm.environment.unset(\"random_ICCID\");\r",
									"pm.environment.unset(\"ThingName\");\r",
									"pm.environment.unset(\"GetResponse_ThingID\");\r",
									"pm.environment.unset(\"GetResponse_IMSI\");\r",
									"pm.environment.unset(\"encodedKeys_Authorization_Register\");\r",
									"pm.environment.unset(\"random_Sensor\");\r",
									"pm.environment.unset(\"random_Sensor_AsgardHTTP\");\r",
									"pm.environment.unset(\"GetResponse_ThingToken\");\r",
									"pm.environment.unset(\"tid\");\r",
									"}, 15000); \r",
									"setTimeout(async function(){}, 20000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var Username = pm.environment.get(\"Username\");\r",
									"var Password = pm.environment.get(\"Password\");\r",
									"\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"var controlapis = pm.environment.get(\"controlapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"//format YYYYMMDDHHMMSSS\r",
									"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
									"// console.log('currentTmestamp',currentTmestamp);\r",
									"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- statusCodeList --------------//\r",
									"//set variable to statusCodeList JSON.parse\r",
									"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
									"//set global variable to statusCode 200\r",
									"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
									"//set global variable to statusCode 201\r",
									"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
									"//set global variable to statusCode 403\r",
									"pm.globals.set(\"statusCodeForbidden\", statusCodeList.statusCodeForbidden);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultCodeList --------------//\r",
									"//set variable to resultCodeList JSON.parse\r",
									"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
									"//set global variable to resultCode \"20000\"\r",
									"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
									"//set global variable to resultCode \"20100\"\r",
									"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
									"//set global variable to resultCode \"40305\"\r",
									"pm.globals.set(\"resultCodeTheOperationHasAlreadyExpired\", resultCodeList.resultCodeTheOperationHasAlreadyExpired);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionSuccessList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
									"//set global variable to resultDescription \"SignInProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
									"//set global variable to resultDescription \"CreatePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
									"//set global variable to resultDescription \"CreateAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
									"//set global variable to resultDescription \"CreateThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThing\", resultDescriptionSuccessList.resultDescriptionCreateThing);\r",
									"//set global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThingStateInfo\", resultDescriptionSuccessList.resultDescriptionCreateThingStateInfo);\r",
									"//set global variable to resultDescription \"RemovePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
									"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
									"//set global variable to resultDescription \"RemoveThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThing\", resultDescriptionSuccessList.resultDescriptionRemoveThing);\r",
									"//set global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThingStateInfo\", resultDescriptionSuccessList.resultDescriptionRemoveThingStateInfo);\r",
									"//set global variable to resultDescription \"ControlOneThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessControlOneThing\", resultDescriptionSuccessList.resultDescriptionSuccessControlOneThing);\r",
									"//set global variable to resultDescription \"Register is Success\"\r",
									"pm.globals.set(\"resultDescriptionRegisterIsSuccess\", resultDescriptionSuccessList.resultDescriptionRegisterIsSuccess);\r",
									"//set global variable to resultDescription \"InquiryThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionInquiryThing\", resultDescriptionSuccessList.resultDescriptionInquiryThing);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionErrorList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
									"//set global variable to resultDescription \"The operation has already expired.\"\r",
									"pm.globals.set(\"resultDescriptionTheOperationHasAlreadyExpired\", resultDescriptionErrorList.resultDescriptionTheOperationHasAlreadyExpired);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- HeaderList --------------//\r",
									"//set variable to HeaderList JSON.parse\r",
									"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
									"//---------------- set globals Other --------------//\r",
									"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
									"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
									"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
									"//set global variable to kbn-versio \"7.5.1\"\r",
									"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Signin_ --------------//\r",
									"//set global variable to x_ais_OrderRef \"Signin_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreatePartner --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
									"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
									"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
									"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreateAccount --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
									"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
									"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Thing --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThing\", HeaderList.Thing.x_ais_OrderRef_CreateThing);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThing\", HeaderList.Thing.x_ais_OrderDesc_CreateThing);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThing\", HeaderList.Thing.x_ais_OrderRef_RemoveThing);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThing\", HeaderList.Thing.x_ais_OrderDesc_RemoveThing);\r",
									"//set global variable to x_ais_OrderRef \"InquiryThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_InquiryThing\", HeaderList.Thing.x_ais_OrderRef_InquiryThing);\r",
									"//set global variable to x_ais_OrderDesc \"InquiryThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_InquiryThing\", HeaderList.Thing.x_ais_OrderDesc_InquiryThing);\r",
									"//set global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_RemoveThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_RemoveThingStateInfo);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Control --------------//\r",
									"//set global variable to x_ais_OrderRef \"ControlThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ControlThing\", HeaderList.Control.x_ais_OrderRef_ControlThing);\r",
									"//set global variable to x_ais_OrderRef \"ControlThingfail_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ControlThing_fail\", HeaderList.Control.x_ais_OrderRef_ControlThing_fail);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals AsgardHTTP --------------//\r",
									"//set global variable to x_ais_OrderRef \"RegisHTTP_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RegisHTTP\", HeaderList.AsgardHTTP.x_ais_OrderRef_RegisHTTP);\r",
									"//set global variable to x_ais_OrderRef \"RegisHTTPfail_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RegisHTTP_fail\", HeaderList.AsgardHTTP.x_ais_OrderRef_RegisHTTP_fail);\r",
									"//set global variable to x_ais_OrderDesc \"Register Thing in MG\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RegisHTTP\", HeaderList.AsgardHTTP.x_ais_OrderDesc_RegisHTTP);\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"SignInProcess is Success\"\r",
									"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
									"//get global variable to resultDescription \"CreatePartner is Success\"\r",
									"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
									"//get global variable to resultDescription \"CreateAccount is Success\"\r",
									"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
									"//get global variable to resultDescription \"CreateThing is Success\"\r",
									"var resultDescriptionCreateThing = pm.globals.get(\"resultDescriptionCreateThing\");\r",
									"//get global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"var resultDescriptionCreateThingStateInfo = pm.globals.get(\"resultDescriptionCreateThingStateInfo\");\r",
									"//get global variable to resultDescription \"ControlOneThing is Success\"\r",
									"var resultDescriptionSuccessControlOneThing = pm.globals.get(\"resultDescriptionSuccessControlOneThing\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- urlRouteList --------------//\r",
									"//set variable to urlRouteList JSON.parse\r",
									"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
									"//---------------- set url Create --------------//\r",
									"//set global variable to url \"/api/v1/auth/signin\"\r",
									"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
									"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
									"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"pm.globals.set(\"urlThingCreateThing\", urlRouteList.Thing.urlThingCreateThing);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"pm.globals.set(\"urlThingCreateThingStateInfo\", urlRouteList.Thing.urlThingCreateThingStateInfo);\r",
									"//set global variable to url \"/api/v1/Control/Thing\"\r",
									"pm.globals.set(\"urlControlThing\", urlRouteList.Control.urlControlThing);\r",
									"//---------------- get url Create --------------//\r",
									"//get global variable to url \"/api/v1/auth/signin\"\r",
									"var urlSignin = pm.globals.get(\"urlSignin\");\r",
									"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
									"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"var urlThingCreateThing = pm.globals.get(\"urlThingCreateThing\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"var urlThingCreateThingStateInfo = pm.globals.get(\"urlThingCreateThingStateInfo\");\r",
									"//get global variable to url \"/api/v1/Control/Thing\"\r",
									"var urlControlThing = pm.globals.get(\"urlControlThing\");\r",
									"//---------------- set url Remove --------------//\r",
									"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
									"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"pm.globals.set(\"urlThingRemoveThing\", urlRouteList.Thing.urlThingRemoveThing);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"pm.globals.set(\"urlThingRemoveThingStateInfo\", urlRouteList.Thing.urlThingRemoveThingStateInfo);\r",
									"//---------------- set url Inquiry --------------//\r",
									"//set global variable to url \"/api/v1/Thing/InquiryThing\"\r",
									"pm.globals.set(\"urlThingInquiryThing\", urlRouteList.Thing.urlThingInquiryThing);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Signin_ --------------//\r",
									"//get global variable to x_ais_OrderRef \"Signin_\"\r",
									"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"var x_ais_OrderRef_CreateThing = pm.globals.get(\"x_ais_OrderRef_CreateThing\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"var x_ais_OrderDesc_CreateThing = pm.globals.get(\"x_ais_OrderDesc_CreateThing\");\r",
									"//get global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"var x_ais_OrderRef_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderRef_CreateThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"var x_ais_OrderDesc_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_CreateThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Control --------------//\r",
									"//get global variable to x_ais_OrderRef \"ControlThing_\"\r",
									"var x_ais_OrderRef_ControlThing = pm.globals.get(\"x_ais_OrderRef_ControlThing\");\r",
									"//------------------------------------------------------------//\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// Signin get token\r",
									"Signin = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSignin = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_Signin + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_UserAuthentication,\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestSignin = {\r",
									"            mode: 'raw',\r",
									"            raw:\r",
									"                JSON.stringify({\r",
									"                    username: Username,\r",
									"                    password: Password\r",
									"                })\r",
									"        };\r",
									"\r",
									"        let optionsSignin = {\r",
									"            url: url + provisioningapis + urlSignin,\r",
									"            method: 'POST',\r",
									"            header: headersOptSignin,\r",
									"            body: httpRequestSignin\r",
									"        };\r",
									"        // console.log('request Signin');\r",
									"        let response = await reqPromise(optionsSignin);\r",
									"        let jsonDataSignin = await response.json();\r",
									"\r",
									"        // setAccessToken\r",
									"        await pm.environment.set(\"AccessToken\", jsonDataSignin.AccessToken);\r",
									"\r",
									"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('Signin : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // SignInProcess is Success\r",
									"        pm.test('Signin : OperationStatus Description is ' + '\"' + resultDescriptionSuccessSignIn + '\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
									"        });\r",
									"\r",
									"        //set random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //set PartnerName\r",
									"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
									"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
									"        //set MerchantContact\r",
									"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
									"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
									"        // set CPID\r",
									"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
									"        pm.environment.set(\"CPID\", CPIDValue)\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreatePartner\r",
									"CreatePartner = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreatePartner = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreatePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreatePartner,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreatePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
									"                \"PartnerType\": [\r",
									"                    \"Supplier\",\r",
									"                    \"Customer\"\r",
									"                ],\r",
									"                \"PartnerDetail\": {\r",
									"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
									"                    \"CPID\": pm.environment.get(\"CPID\")\r",
									"                },\r",
									"                \"Property\": {\r",
									"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreatePartner = {\r",
									"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreatePartner,\r",
									"            body: httpRequestCreatePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsCreatePartner);\r",
									"        let jsonDataCreatePartner = await response.json();\r",
									"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
									"\r",
									"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreatePartner : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreatePartner is Success\r",
									"        pm.test('CreatePartner : OperationStatus Description is ' + '\"' + resultDescriptionCreatePartner + '\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
									"        });\r",
									"\r",
									"        //GetResponse_PartnerId\r",
									"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
									"\r",
									"        //Accountname\r",
									"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
									"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateAccount\r",
									"CreateAccount = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateAccount = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateAccount,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreateAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateAccount = {\r",
									"            url: url + provisioningapis + urlAccountCreateAccount,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateAccount,\r",
									"            body: httpRequestCreateAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateAccount');\r",
									"        let response = await reqPromise(optionsCreateAccount);\r",
									"        let jsonDataCreateAccount = await response.json();\r",
									"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
									"\r",
									"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateAccount : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateAccount is Success\r",
									"        pm.test('CreateAccount : OperationStatus Description is ' + '\"' + resultDescriptionCreateAccount + '\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
									"        });\r",
									"        // GetResponse_AccountName\r",
									"        pm.environment.set(\"GetResponse_AccountName\", jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
									"        // GetResponse_AccountId\r",
									"        pm.environment.set(\"GetResponse_AccountId\", jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
									"        // random_IM\r",
									"        pm.environment.set(\"random_IM\", _.random(10000000, 99999999) + \" \" + _.random(1000000, 9999999))\r",
									"        // random_ICCID\r",
									"        pm.environment.set(\"random_ICCID\", _.random(1000000, 9999999) + \" \" + _.random(100000, 999999))\r",
									"        // random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //ThingName\r",
									"        let thingNameValue = fieldDataValue.Thing.ThingNameValue; // \"Sensor_TestThingName\"\r",
									"        pm.environment.set(\"ThingName\", thingNameValue + pm.environment.get(\"random_number\"))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThing\r",
									"CreateThing = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThing = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateThing + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateThing,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey': pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let httpRequestCreateThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingName\": pm.environment.get(\"ThingName\"),\r",
									"                \"IMEI\": pm.environment.get(\"random_IM\"),\r",
									"                \"IMSI\": pm.environment.get(\"random_IM\"),\r",
									"                \"ICCID\": pm.environment.get(\"random_ICCID\"),\r",
									"                \"RouteUrl\": fieldDataValue.Thing.RouteUrlValue , //[\"http://10.12.3.4:2019/api/information/AddInformation\"]\r",
									"                \"RouteInfo\": {\r",
									"                    \"MIMO_ID\": fieldDataValue.Thing.RouteInfoMIMOIDValue , //\"606edada\"\r",
									"                    \"MIMO_SerialNo\": fieldDataValue.Thing.RouteInfoMIMOSerialNoValue //5466758878\r",
									"                },\r",
									"                \"RouteFlag\": {\r",
									"                    \"ThingName\": fieldDataValue.Thing.RouteFlagThingNameValue , //true\r",
									"                    \"ThingToken\": fieldDataValue.Thing.RouteFlagThingTokenValue, //true\r",
									"                    \"IMEI\": fieldDataValue.Thing.RouteFlagIMEIValue, //true\r",
									"                    \"ICCID\": fieldDataValue.Thing.RouteFlagICCIDValue, //true\r",
									"                    \"RouteInfo\": fieldDataValue.Thing.RouteFlagRouteInfoValue //true\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateThing = {\r",
									"            url: url + provisioningapis + urlThingCreateThing,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThing,\r",
									"            body: httpRequestCreateThing\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThing');\r",
									"        let response = await reqPromise(optionsCreateThing);\r",
									"        let jsonDataCreateThing = await response.json();\r",
									"        // console.log('jsonDataCreateThing',jsonDataCreateThing)\r",
									"\r",
									"        let operationStatusCreateThing = await jsonDataCreateThing.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateThing : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateThing : OperationStatus Code is ' + '\"' + resultCodeCreatedSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateThing is Success\r",
									"        pm.test('CreateThing : OperationStatus Description is ' + '\"' + resultDescriptionCreateThing + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Description', resultDescriptionCreateThing);\r",
									"        });\r",
									"\r",
									"        pm.environment.set(\"GetResponse_ThingID\", jsonDataCreateThing.ThingInfo.ThingId)\r",
									"        pm.environment.set(\"GetResponse_IMSI\", jsonDataCreateThing.ThingInfo.IMSI)\r",
									"        \r",
									"        let keys = fieldDataValue.AsgardHTTP.Value_AsgardHTTPeSim_Register_TST_F4_0_2_007_Username_Error + \":\" + fieldDataValue.AsgardHTTP.Value_AsgardHTTPeSim_Register_TST_F4_0_2_007_Password_Error;\r",
									"        // console.log(\"keys\", keys);\r",
									"        let encodedKeys = CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(keys));\r",
									"        pm.environment.set(\"encodedKeys_Authorization_Register\", encodedKeys);\r",
									"\r",
									"        //Get Random Sensor \r",
									"        pm.environment.set(\"random_Sensor\", _.random(100, 999))\r",
									"\r",
									"        //Get Random Sensor AsgardHTTP\r",
									"        pm.environment.set(\"random_Sensor_AsgardHTTP\", _.random(100, 999))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThingStateInfo\r",
									"CreateThingStateInfo = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThingStateInfo = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'x-ais-UserName': x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef': x_ais_OrderRef_CreateThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc': x_ais_OrderDesc_CreateThingStateInfo,\r",
									"            'x-ais-AccessToken': Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey': pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept': Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        // {\"AA\" : pm.environment.get(\"random_Sensor\")}\r",
									"        let sensorValue = {};\r",
									"        sensorValue[fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP] = pm.environment.get(\"random_Sensor\");\r",
									"        // console.log('sensorValue',sensorValue);\r",
									"        \r",
									"        let httpRequestCreateThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": [\r",
									"                    pm.environment.get(\"GetResponse_ThingID\")\r",
									"                ],\r",
									"                \"Type\": fieldDataValue.CreateThingStateInfo.Type_Report,\r",
									"                \"Sensor\": sensorValue\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingCreateThingStateInfo,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThingStateInfo,\r",
									"            body: httpRequestCreateThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThingStateInfo');\r",
									"        let response = await reqPromise(optionsCreateThingStateInfo);\r",
									"        let jsonDataCreateThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataCreateThingStateInfo',jsonDataCreateThingStateInfo)\r",
									"\r",
									"        let operationStatusCreateThingStateInfo = await jsonDataCreateThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"CreateThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //CreateThingStateInfo is Success\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Description is ' + '\"' + resultDescriptionCreateThingStateInfo + '\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Description', resultDescriptionCreateThingStateInfo);\r",
									"        });\r",
									"\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// ControlThing\r",
									"ControlThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptControlThing = {\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_ControlThing + current_timestamp,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Content-Type':ContentType_ApplicationJson\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        // {\"AA\" : pm.environment.get(\"random_Sensor_AsgardHTTP\")}\r",
									"        let sensorValue = {};\r",
									"        sensorValue[fieldDataValue.CreateThingStateInfo.SensorKey_AsgardHTTP] = pm.environment.get(\"random_Sensor_AsgardHTTP\");\r",
									"        // console.log('sensorValue',sensorValue);\r",
									"\r",
									"        let httpRequestControlThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\"),\r",
									"                \"Sensors\": sensorValue\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsControlThing = {\r",
									"            url: url + controlapis + urlControlThing,\r",
									"            method: 'POST',\r",
									"            header: headersOptControlThing,\r",
									"            body: httpRequestControlThing\r",
									"        };\r",
									"\r",
									"        // console.log('response ControlThing');\r",
									"        let response = await reqPromise(optionsControlThing);\r",
									"        let jsonDataControlThing = await response.json();\r",
									"        // console.log('jsonDataControlThing',jsonDataControlThing)\r",
									"    \r",
									"        let operationStatusControlThing = await jsonDataControlThing.operationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"ControlThing : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('ControlThing : OperationStatus code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusControlThing).to.have.property('code', resultCodeSuccess);\r",
									"        });\r",
									"        //ControlOneThing is Success\r",
									"        pm.test('ControlThing : OperationStatus description is '+'\"'+ resultDescriptionSuccessControlOneThing+'\"', function () {\r",
									"            pm.expect(operationStatusControlThing).to.have.property('description', resultDescriptionSuccessControlOneThing);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"// Signin();\r",
									"// setTimeout(async function () { await CreatePartner(); }, 1000);\r",
									"// setTimeout(async function () { await CreateAccount(); }, 2500);\r",
									"// setTimeout(async function () { await CreateThing(); }, 3000);\r",
									"// setTimeout(async function () { await CreateThingStateInfo(); }, 4500); \r",
									"// setTimeout(async function () { await ControlThing(); }, 5000); \r",
									"\r",
									"let keys = fieldDataValue.AsgardHTTP.Value_AsgardHTTPeSim_Register_TST_F4_0_2_007_Username_Error + \":\" + fieldDataValue.AsgardHTTP.Value_AsgardHTTPeSim_Register_TST_F4_0_2_007_Password_Error;\r",
									"// console.log(\"keys\", keys);\r",
									"let encodedKeys = CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(keys));\r",
									"pm.environment.set(\"encodedKeys_Authorization_Register\", encodedKeys);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-ais-UserName",
								"type": "text",
								"value": "{{x_ais_UserName_AisPartner}}"
							},
							{
								"key": "x-ais-OrderRef",
								"value": "{{x_ais_OrderRef_RegisHTTP_fail}}{{current_timestamp}}"
							},
							{
								"key": "x-ais-OrderDesc",
								"type": "text",
								"value": "{{x_ais_OrderDesc_RegisHTTP}}"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{Basic}} {{encodedKeys_Authorization_Register}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}{{httpapis}}/api/register/sim/v1",
							"host": [
								"{{url}}{{httpapis}}"
							],
							"path": [
								"api",
								"register",
								"sim",
								"v1"
							]
						},
						"description": "Type:Desire"
					},
					"response": []
				}
			]
		}
	]
}