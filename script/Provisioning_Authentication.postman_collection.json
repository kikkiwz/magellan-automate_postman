{
	"info": {
		"_postman_id": "41296104-2125-41f2-a9b6-032951757950",
		"name": "Provisioning_Authentication",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Signin",
					"item": [
						{
							"name": "Signin_TST_F1_1_1_001_Success_RootAdmin",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"//format YYYYMMDDHHMMSSS\r",
											"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
											"// console.log('currentTmestamp',currentTmestamp);\r",
											"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- statusCodeList --------------//\r",
											"//set variable to statusCodeList JSON.parse\r",
											"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
											"//set global variable to statusCode 200\r",
											"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- resultCodeList --------------//\r",
											"//set variable to resultCodeList JSON.parse\r",
											"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
											"//set global variable to resultCode \"20000\"\r",
											"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- resultDescriptionSuccessList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
											"//set global variable to resultDescription \"SignInProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- HeaderList --------------//\r",
											"//set variable to HeaderList JSON.parse\r",
											"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
											"//---------------- set globals Other --------------//\r",
											"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
											"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
											"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
											"//set global variable to kbn-versio \"7.5.1\"\r",
											"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Signin_ --------------//\r",
											"//set global variable to x_ais_OrderRef \"Signin_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"setTimeout(async function(){}, 3000);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"//------------------------------------------------------------//\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"Signin_\"\r",
											"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
											"//------------------------------------------------------------//\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//------------------------------------------------------------//\r",
											"//get global variable to resultDescription \"SignInProcess is Success\"\r",
											"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
											"//------------------------------------------------------------//\r",
											"let jsonData = pm.response.json();\r",
											"pm.environment.set(\"TokenType\", jsonData.TokenType);\r",
											"pm.environment.set(\"AccessToken\", jsonData.AccessToken);\r",
											"\r",
											"pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"    pm.response.to.have.status(statusCodeSuccess);\r",
											"});\r",
											"\r",
											"pm.test('Signin : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeSuccess);\r",
											"});\r",
											"\r",
											"pm.test('Signin : OperationStatus Description is ' + '\"' + resultDescriptionSuccessSignIn + '\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionSuccessSignIn);\r",
											"});\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"//---------------- LogDefaultValue --------------//\r",
											"//set variable to LogDefaultValue JSON.parse\r",
											"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
											"// console.log('LogDefaultValue',LogDefaultValue);\r",
											"//---------------- set globals Other --------------//\r",
											"var SearchLog = LogDefaultValue.SearchLog;\r",
											"// console.log('SearchLog',SearchLog);\r",
											"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
											"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
											"var kbn_version = SearchLog.header.kbn_version;\r",
											"var authorization = SearchLog.header.Authorization;\r",
											"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
											"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
											"var namespace = LogDefaultValue.Other.namespace;\r",
											"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
											"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
											"var header_x_ais_username = LogDefaultValue.Other.header_x_ais_username;\r",
											"var methodPost = LogDefaultValue.Other.methodPost;\r",
											"\r",
											"// Detail\r",
											"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
											"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
											"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
											"\r",
											"// Summary\r",
											"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
											"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
											"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
											"\r",
											"// ProvisioningAPIs [Signin]\r",
											"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
											"var cmdName = LogDefaultValue.Provisioning.Signin.cmdNameSignin;\r",
											"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
											"var containerId = LogDefaultValue.Provisioning.containerId;\r",
											"var requestObjectUrlStaging = LogDefaultValue.Provisioning.Signin.requestObjectUrlSigninStaging;\r",
											"\r",
											"// Check CDR (Summary Log) and EDR (Detail Log)\r",
											"SearchLogFindTid = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSearchLogFindTid = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = x_ais_OrderRef_Signin + current_timestamp;\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch\", valueSearch)\r",
											"\r",
											"        // body\r",
											"        let httpRequestSearchLogFindTid = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({ \"version\": \"true\", \"size\": 500, \"sort\": [{ \"@timestamp_es\": { \"order\": \"desc\", \"unmapped_type\": \"boolean\" } }], \"_source\": { \"excludes\": [] }, \"aggs\": { \"2\": { \"date_histogram\": { \"field\": \"@timestamp_es\", \"fixed_interval\": \"30s\", \"time_zone\": \"Asia/Bangkok\", \"min_doc_count\": 1 } } }, \"stored_fields\": [\"*\"], \"script_fields\": {}, \"docvalue_fields\": [{ \"field\": \"@timestamp_es\", \"format\": \"date_time\" }, { \"field\": \"cauldron.custom1.activityLog.endTime\", \"format\": \"date_time\" }, { \"field\": \"cauldron.custom1.activityLog.startTime\", \"format\": \"date_time\" }, { \"field\": \"time\", \"format\": \"date_time\" }], \"query\": { \"bool\": { \"must\": [], \"filter\": [{ \"multi_match\": { \"type\": \"best_fields\", \"query\": '\"' + valueSearch + '\"', \"lenient\": \"true\" } }, { \"range\": { \"@timestamp_es\": { \"format\": \"strict_date_optional_time\", \"gte\": setRangeGTE, \"lte\": setRangeLTE } } }], \"should\": [], \"must_not\": [] } }, \"highlight\": { \"pre_tags\": [\"@kibana-highlighted-field@\"], \"post_tags\": [\"@/kibana-highlighted-field@\"], \"fields\": { \"*\": {} }, \"fragment_size\": 2147483647 } })\r",
											"        };\r",
											"\r",
											"        let optionsSearchLogFindTid = {\r",
											"            url: url_staging_azure_cauldron,\r",
											"            method: 'POST',\r",
											"            header: headersOptSearchLogFindTid,\r",
											"            body: httpRequestSearchLogFindTid\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsSearchLogFindTid);\r",
											"        let jsonDataSearchLogFindTid = await response.json();\r",
											"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
											"\r",
											"        // //200\r",
											"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"\r",
											"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
											"        console.log('hits', hits)\r",
											"\r",
											"        // find tid\r",
											"        for (let i = 0; i < hits.length; i++) {\r",
											"            // let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"\r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            if (applicationNameValue == applicationName) {\r",
											"                let tid = hits[i]._source.cauldron.tid;\r",
											"                pm.environment.set(\"tid\", tid);\r",
											"                break;\r",
											"            }\r",
											"        }\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"CheckLog = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCheckLog = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = pm.environment.get(\"tid\");\r",
											"\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch\", valueSearch)\r",
											"\r",
											"        // body\r",
											"        let httpRequestCheckLog = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({ \"version\": true, \"size\": 500, \"sort\": [{ \"@timestamp_es\": { \"order\": \"desc\", \"unmapped_type\": \"boolean\" } }], \"_source\": { \"excludes\": [] }, \"aggs\": { \"2\": { \"date_histogram\": { \"field\": \"@timestamp_es\", \"fixed_interval\": \"30s\", \"time_zone\": \"Asia/Bangkok\", \"min_doc_count\": 1 } } }, \"stored_fields\": [\"*\"], \"script_fields\": {}, \"docvalue_fields\": [{ \"field\": \"@timestamp_es\", \"format\": \"date_time\" }, { \"field\": \"cauldron.custom1.activityLog.endTime\", \"format\": \"date_time\" }, { \"field\": \"cauldron.custom1.activityLog.startTime\", \"format\": \"date_time\" }, { \"field\": \"time\", \"format\": \"date_time\" }], \"query\": { \"bool\": { \"must\": [], \"filter\": [{ \"multi_match\": { \"type\": \"best_fields\", \"query\": '\"' + valueSearch + '\"', \"lenient\": true } }, { \"range\": { \"@timestamp_es\": { \"format\": \"strict_date_optional_time\", \"gte\": setRangeGTE, \"lte\": setRangeLTE } } }], \"should\": [], \"must_not\": [] } }, \"highlight\": { \"pre_tags\": [\"@kibana-highlighted-field@\"], \"post_tags\": [\"@/kibana-highlighted-field@\"], \"fields\": { \"*\": {} }, \"fragment_size\": 2147483647 } })\r",
											"        };\r",
											"        let optionsCheckLog = {\r",
											"            url: url_staging_azure_cauldron,\r",
											"            method: 'POST',\r",
											"            header: headersOptCheckLog,\r",
											"            body: httpRequestCheckLog\r",
											"        };\r",
											"        let response = await reqPromise(optionsCheckLog);\r",
											"        let jsonDataCheckLog = await response.json();\r",
											"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
											"\r",
											"        // //200\r",
											"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"\r",
											"        let hits = jsonDataCheckLog.hits.hits\r",
											"        console.log('hits', hits)\r",
											"\r",
											"        // find logType\r",
											"        for (let i = 0; i < hits.length; i++) {\r",
											"            //  let logType = hits[i]._source.cauldron.logType\r",
											"            let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"\r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"\r",
											"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
											"            // console.log('resultDataLog',resultDataLog)\r",
											"\r",
											"            let tidControl = x_ais_OrderRef_Signin + current_timestamp;\r",
											"            // console.log(tidControl);\r",
											"            if (applicationNameValue == applicationName) {\r",
											"\r",
											"                if (logType == logTypeSummary && applicationNameValue == applicationName) { // 'Summary' and ProvisioningAPIs\r",
											"                    pm.test(\"Check Summary Log : Signin\", function () {\r",
											"                        console.log(\"======== Check Summary Log ( Expected = Actual) [Signin] ==================\");\r",
											"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
											"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
											"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeSuccess);\r",
											"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionSuccessSignIn);\r",
											"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
											"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
											"                        // console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
											"                        \r",
											"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp);\r",
											"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName);\r",
											"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeSuccess);\r",
											"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionSuccessSignIn);\r",
											"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp);\r",
											"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary);\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace);\r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName);\r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId);\r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
											"                        // pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
											"\r",
											"                        // check custom\r",
											"                        // \\\"custom\\\":{ \\\"endPointSummary\\\":[ { \\\"no\\\":\\\"1\\\", \\\"endPointName\\\":\\\"db.ClientsCollection\\\", \\\"responseStatus\\\":\\\"Success:InquiryClients was successfully.\\\", \\\"processTime\\\":5.0185 }, { \\\"no\\\":\\\"2\\\", \\\"endPointName\\\":\\\"db.AuthenticationCollection\\\", \\\"responseStatus\\\":\\\"Success:InsertAuthentication was successfully.\\\", \\\"processTime\\\":2.5952 } ] }\r",
											"                        let custom = resultDataLog.custom.endPointSummary;\r",
											"                        let countCustom = custom.length;\r",
											"\r",
											"                        // [\"db.ClientsCollection\",\"db.AuthenticationCollection\"]\r",
											"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_Signin;\r",
											"                        // [\"Success:InquiryClients was successfully.\",\"Success:InsertAuthentication was successfully.\"]\r",
											"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_Signin;\r",
											"                        let countCustomStep = dataEndPointName.length;\r",
											"\r",
											"                        console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep);\r",
											"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
											"\r",
											"                        for(let i=0;i<countCustomStep;i++){\r",
											"                            let no = custom[i].no;\r",
											"                            let valueEndPointName = custom[i].endPointName;\r",
											"                            let valueResponseStatus = custom[i].responseStatus;\r",
											"                            // console.log(\"i\",i);\r",
											"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
											"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
											"                            \r",
											"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString());\r",
											"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i]);\r",
											"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i]);\r",
											"\r",
											"                            pm.expect(no).to.eql((i+1).toString()); \r",
											"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
											"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]); \r",
											"                        }\r",
											"                    });\r",
											"                }\r",
											"\r",
											"                if (logType == logTypeDetail && applicationNameValue == applicationName) { //'Detail' and ProvisioningAPIs\r",
											"\r",
											"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
											"                    // console.log('endPointNameValue ',endPointNameValue)\r",
											"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [Signin]\", function () {\r",
											"                        console.log(\"======== Check Detail Log ( Expected = Actual) [Signin] ==================\");\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
											"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
											"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
											"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
											"\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail);\r",
											"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail);\r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace);\r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName);\r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId);\r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime);\r",
											"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail);\r",
											"\r",
											"                        if (endPointNameValue == endPointNameProvisioningAPIs) {     //\"endPointName\":\"ProvisioningAPIs\"\r",
											"                            console.log(\"custom1.endPointName : \" + resultDataLog.custom1.endPointName + \" = \" + endPointNameProvisioningAPIs);\r",
											"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs);\r",
											"\r",
											"                            // check requestObject\r",
											"                            // \"requestObject\":\"{ \\\"url\\\":\\\"mg-staging.sandais.com/api/v1/auth/signin\\\",\\\"method\\\":\\\"POST\\\",\\\"headers\\\":{\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"Signin_202103241403757\\\",\\\"x-ais-orderdesc\\\":\\\"User Authentication\\\"},\\\"body\\\":{\\\"username\\\":\\\"QATest_003\\\",\\\"password\\\":\\\"bnZkZm5nZXJnbGtkanZlaWdqbmVvZGtsZA==\\\"}}\"\r",
											"\r",
											"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
											"                            //  console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
											"                            let url = urlCheckLog + requestObjectUrlStaging;\r",
											"                            let x_ais_orderref = x_ais_OrderRef_Signin + current_timestamp;\r",
											"                            let x_ais_orderdesc = x_ais_OrderDesc_UserAuthentication;\r",
											"                            let x_ais_userName = x_ais_UserName_AisPartner;\r",
											"                            \r",
											"                            var Username = pm.environment.get(\"Username\");\r",
											"                            var Password = pm.environment.get(\"Password\"); \r",
											"                            var AccessToken = pm.environment.get(\"AccessToken\");\r",
											"                            var TokenType = pm.environment.get(\"TokenType\");\r",
											"                            \r",
											"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
											"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
											"                            console.log(\"headers.x_ais_userName : \" + jsonParseRequestObject.headers[header_x_ais_username] + \" = \" + x_ais_userName);\r",
											"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
											"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
											"\r",
											"                            pm.expect(jsonParseRequestObject.url).to.eql(url);\r",
											"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_username]).to.eql(x_ais_userName);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
											"\r",
											"                            console.log(\"resquest.body.Username : \" + jsonParseRequestObject.body.Username + \" = \" + Username);\r",
											"                            console.log(\"resquest.body.Password : \" + jsonParseRequestObject.body.Password + \" = \" + Password);\r",
											"\r",
											"                            pm.expect(jsonParseRequestObject.body.Username).to.eql(Username);\r",
											"                            pm.expect(jsonParseRequestObject.body.Password).to.eql(Password);\r",
											"\r",
											"                            // check responseObject\r",
											"                            // \"responseObject\":\"{\\\"OperationStatus\\\":{\\\"Code\\\":\\\"20000\\\",\\\"Description\\\":\\\"SignInProcess is Success\\\"},\\\"TokenType\\\":\\\"Bearer\\\",\\\"AccessToken\\\":\\\"Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAEEwemyfiMnI8Lw+aKSIaN42m4QbuzpURtw3oHSFyFWX0IlAkkY2KW0\\\",\\\"ExpiresIn\\\":20,\\\"ExpiresDate\\\":\\\"2021-03-24T14:21:49.3194415+07:00\\\",\\\"AccountId\\\":[],\\\"UserRole\\\":[\\\"RootAdmin\\\"]}\",\"activityLog\":{\"startTime\":\"2021-03-24T14:01:49.316645+07:00\",\"endTime\":\"2021-03-24T14:01:49.3211605+07:00\",\"processTime\":4.5155}}\r",
											"\r",
											"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
											"                            // console.log('jsonParseResponseObject',jsonParseResponseObject);\r",
											"\r",
											"                            console.log(\"response.AccessToken : \" + resultDataLog.AccessToken + \" = \" + AccessToken);\r",
											"                            console.log(\"response.TokenType : \" + resultDataLog.TokenType + \" = \" + TokenType);\r",
											"\r",
											"                            pm.expect(jsonParseResponseObject.AccessToken).to.eql(AccessToken);\r",
											"                            pm.expect(jsonParseResponseObject.TokenType).to.eql(TokenType);\r",
											"\r",
											"                            console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeSuccess);\r",
											"                            console.log(\"response.OperationStatus.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionSuccessSignIn);\r",
											"\r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeSuccess);\r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionSuccessSignIn);\r",
											"                        }\r",
											"                    });\r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"setTimeout(function () {SearchLogFindTid();}, 6000);\r",
											"setTimeout(function () {CheckLog();}, 15000);\r",
											"\r",
											"setTimeout(function () {\r",
											"pm.environment.unset(\"current_timestamp\");\r",
											"pm.environment.unset(\"TokenType\");\r",
											"pm.environment.unset(\"AccessToken\");\r",
											"pm.environment.unset(\"tid\");\r",
											"}, 90000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-ais-UserName",
										"type": "text",
										"value": "{{x_ais_UserName_AisPartner}}"
									},
									{
										"key": "x-ais-OrderRef",
										"value": "{{x_ais_OrderRef_Signin}}{{current_timestamp}}"
									},
									{
										"key": "x-ais-OrderDesc",
										"type": "text",
										"value": "{{x_ais_OrderDesc_UserAuthentication}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Username\": \"{{Username}}\",\r\n    \"Password\": \"{{Password}}\"\r\n}"
								},
								"url": {
									"raw": "{{url}}{{provisioningapis}}/api/v1/auth/signin",
									"host": [
										"{{url}}{{provisioningapis}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"signin"
									]
								},
								"description": "Type:Desire"
							},
							"response": []
						},
						{
							"name": "Signin_TST_F1_1_1_002_Success_SupplierAdmin",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"//format YYYYMMDDHHMMSSS\r",
											"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
											"// console.log('currentTmestamp',currentTmestamp);\r",
											"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- statusCodeList --------------//\r",
											"//set variable to statusCodeList JSON.parse\r",
											"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
											"//set global variable to statusCode 200\r",
											"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- resultCodeList --------------//\r",
											"//set variable to resultCodeList JSON.parse\r",
											"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
											"//set global variable to resultCode \"20000\"\r",
											"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- resultDescriptionSuccessList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
											"//set global variable to resultDescription \"SignInProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- HeaderList --------------//\r",
											"//set variable to HeaderList JSON.parse\r",
											"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
											"//---------------- set globals Other --------------//\r",
											"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
											"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
											"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
											"//set global variable to kbn-versio \"7.5.1\"\r",
											"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Signin_ --------------//\r",
											"//set global variable to x_ais_OrderRef \"Signin_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"setTimeout(async function(){}, 3000);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"//------------------------------------------------------------//\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"Signin_\"\r",
											"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
											"//------------------------------------------------------------//\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//------------------------------------------------------------//\r",
											"//get global variable to resultDescription \"SignInProcess is Success\"\r",
											"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
											"//------------------------------------------------------------//\r",
											"let jsonData = pm.response.json();\r",
											"pm.environment.set(\"TokenType\", jsonData.TokenType);\r",
											"pm.environment.set(\"AccessToken\", jsonData.AccessToken);\r",
											"\r",
											"pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"    pm.response.to.have.status(statusCodeSuccess);\r",
											"});\r",
											"\r",
											"pm.test('Signin : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeSuccess);\r",
											"});\r",
											"\r",
											"pm.test('Signin : OperationStatus Description is ' + '\"' + resultDescriptionSuccessSignIn + '\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionSuccessSignIn);\r",
											"});\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"//---------------- LogDefaultValue --------------//\r",
											"//set variable to LogDefaultValue JSON.parse\r",
											"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
											"// console.log('LogDefaultValue',LogDefaultValue);\r",
											"//---------------- set globals Other --------------//\r",
											"var SearchLog = LogDefaultValue.SearchLog;\r",
											"// console.log('SearchLog',SearchLog);\r",
											"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
											"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
											"var kbn_version = SearchLog.header.kbn_version;\r",
											"var authorization = SearchLog.header.Authorization;\r",
											"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
											"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
											"var namespace = LogDefaultValue.Other.namespace;\r",
											"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
											"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
											"var header_x_ais_username = LogDefaultValue.Other.header_x_ais_username;\r",
											"var methodPost = LogDefaultValue.Other.methodPost;\r",
											"\r",
											"// Detail\r",
											"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
											"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
											"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
											"\r",
											"// Summary\r",
											"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
											"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
											"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
											"\r",
											"// ProvisioningAPIs [Signin]\r",
											"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
											"var cmdName = LogDefaultValue.Provisioning.Signin.cmdNameSignin;\r",
											"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
											"var containerId = LogDefaultValue.Provisioning.containerId;\r",
											"var requestObjectUrlStaging = LogDefaultValue.Provisioning.Signin.requestObjectUrlSigninStaging;\r",
											"\r",
											"// Check CDR (Summary Log) and EDR (Detail Log)\r",
											"SearchLogFindTid = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSearchLogFindTid = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = x_ais_OrderRef_Signin + current_timestamp;\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch\", valueSearch)\r",
											"\r",
											"        // body\r",
											"        let httpRequestSearchLogFindTid = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({ \"version\": \"true\", \"size\": 500, \"sort\": [{ \"@timestamp_es\": { \"order\": \"desc\", \"unmapped_type\": \"boolean\" } }], \"_source\": { \"excludes\": [] }, \"aggs\": { \"2\": { \"date_histogram\": { \"field\": \"@timestamp_es\", \"fixed_interval\": \"30s\", \"time_zone\": \"Asia/Bangkok\", \"min_doc_count\": 1 } } }, \"stored_fields\": [\"*\"], \"script_fields\": {}, \"docvalue_fields\": [{ \"field\": \"@timestamp_es\", \"format\": \"date_time\" }, { \"field\": \"cauldron.custom1.activityLog.endTime\", \"format\": \"date_time\" }, { \"field\": \"cauldron.custom1.activityLog.startTime\", \"format\": \"date_time\" }, { \"field\": \"time\", \"format\": \"date_time\" }], \"query\": { \"bool\": { \"must\": [], \"filter\": [{ \"multi_match\": { \"type\": \"best_fields\", \"query\": '\"' + valueSearch + '\"', \"lenient\": \"true\" } }, { \"range\": { \"@timestamp_es\": { \"format\": \"strict_date_optional_time\", \"gte\": setRangeGTE, \"lte\": setRangeLTE } } }], \"should\": [], \"must_not\": [] } }, \"highlight\": { \"pre_tags\": [\"@kibana-highlighted-field@\"], \"post_tags\": [\"@/kibana-highlighted-field@\"], \"fields\": { \"*\": {} }, \"fragment_size\": 2147483647 } })\r",
											"        };\r",
											"\r",
											"        let optionsSearchLogFindTid = {\r",
											"            url: url_staging_azure_cauldron,\r",
											"            method: 'POST',\r",
											"            header: headersOptSearchLogFindTid,\r",
											"            body: httpRequestSearchLogFindTid\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsSearchLogFindTid);\r",
											"        let jsonDataSearchLogFindTid = await response.json();\r",
											"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
											"\r",
											"        // //200\r",
											"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"\r",
											"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
											"        console.log('hits', hits)\r",
											"\r",
											"        // find tid\r",
											"        for (let i = 0; i < hits.length; i++) {\r",
											"            // let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"\r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            if (applicationNameValue == applicationName) {\r",
											"                let tid = hits[i]._source.cauldron.tid;\r",
											"                pm.environment.set(\"tid\", tid);\r",
											"                break;\r",
											"            }\r",
											"        }\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"CheckLog = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCheckLog = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = pm.environment.get(\"tid\");\r",
											"\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch\", valueSearch)\r",
											"\r",
											"        // body\r",
											"        let httpRequestCheckLog = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({ \"version\": true, \"size\": 500, \"sort\": [{ \"@timestamp_es\": { \"order\": \"desc\", \"unmapped_type\": \"boolean\" } }], \"_source\": { \"excludes\": [] }, \"aggs\": { \"2\": { \"date_histogram\": { \"field\": \"@timestamp_es\", \"fixed_interval\": \"30s\", \"time_zone\": \"Asia/Bangkok\", \"min_doc_count\": 1 } } }, \"stored_fields\": [\"*\"], \"script_fields\": {}, \"docvalue_fields\": [{ \"field\": \"@timestamp_es\", \"format\": \"date_time\" }, { \"field\": \"cauldron.custom1.activityLog.endTime\", \"format\": \"date_time\" }, { \"field\": \"cauldron.custom1.activityLog.startTime\", \"format\": \"date_time\" }, { \"field\": \"time\", \"format\": \"date_time\" }], \"query\": { \"bool\": { \"must\": [], \"filter\": [{ \"multi_match\": { \"type\": \"best_fields\", \"query\": '\"' + valueSearch + '\"', \"lenient\": true } }, { \"range\": { \"@timestamp_es\": { \"format\": \"strict_date_optional_time\", \"gte\": setRangeGTE, \"lte\": setRangeLTE } } }], \"should\": [], \"must_not\": [] } }, \"highlight\": { \"pre_tags\": [\"@kibana-highlighted-field@\"], \"post_tags\": [\"@/kibana-highlighted-field@\"], \"fields\": { \"*\": {} }, \"fragment_size\": 2147483647 } })\r",
											"        };\r",
											"        let optionsCheckLog = {\r",
											"            url: url_staging_azure_cauldron,\r",
											"            method: 'POST',\r",
											"            header: headersOptCheckLog,\r",
											"            body: httpRequestCheckLog\r",
											"        };\r",
											"        let response = await reqPromise(optionsCheckLog);\r",
											"        let jsonDataCheckLog = await response.json();\r",
											"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
											"\r",
											"        // //200\r",
											"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"\r",
											"        let hits = jsonDataCheckLog.hits.hits\r",
											"        console.log('hits', hits)\r",
											"\r",
											"        // find logType\r",
											"        for (let i = 0; i < hits.length; i++) {\r",
											"            //  let logType = hits[i]._source.cauldron.logType\r",
											"            let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"\r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"\r",
											"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
											"            // console.log('resultDataLog',resultDataLog)\r",
											"\r",
											"            let tidControl = x_ais_OrderRef_Signin + current_timestamp;\r",
											"            // console.log(tidControl);\r",
											"            if (applicationNameValue == applicationName) {\r",
											"\r",
											"                if (logType == logTypeSummary && applicationNameValue == applicationName) { // 'Summary' and ProvisioningAPIs\r",
											"                    pm.test(\"Check Summary Log : Signin\", function () {\r",
											"                        console.log(\"======== Check Summary Log ( Expected = Actual) [Signin] ==================\");\r",
											"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
											"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
											"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeSuccess);\r",
											"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionSuccessSignIn);\r",
											"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
											"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
											"                        // console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
											"                        \r",
											"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp);\r",
											"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName);\r",
											"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeSuccess);\r",
											"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionSuccessSignIn);\r",
											"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp);\r",
											"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary);\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace);\r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName);\r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId);\r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
											"                        // pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
											"\r",
											"                        // check custom\r",
											"                        // \\\"custom\\\":{ \\\"endPointSummary\\\":[ { \\\"no\\\":\\\"1\\\", \\\"endPointName\\\":\\\"db.ClientsCollection\\\", \\\"responseStatus\\\":\\\"Success:InquiryClients was successfully.\\\", \\\"processTime\\\":6.882 }, { \\\"no\\\":\\\"2\\\", \\\"endPointName\\\":\\\"db.AccountsCollection\\\", \\\"responseStatus\\\":\\\"Success:InquiryAccount was successfully.\\\", \\\"processTime\\\":1.5257 }, { \\\"no\\\":\\\"3\\\", \\\"endPointName\\\":\\\"db.AuthenticationCollection\\\", \\\"responseStatus\\\":\\\"Success:InsertAuthentication was successfully.\\\", \\\"processTime\\\":1.0979 } ] }\r",
											"                        let custom = resultDataLog.custom.endPointSummary;\r",
											"                        let countCustom = custom.length;\r",
											"\r",
											"                        // [\"db.ClientsCollection\",\"db.AccountsCollection\",\"db.AuthenticationCollection\"]\r",
											"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_Signin_003;\r",
											"                        // [\"Success:InquiryClients was successfully.\",\"Success:InquiryAccount was successfully.\",\"Success:InsertAuthentication was successfully.\"]\r",
											"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_Signin_003;\r",
											"                        let countCustomStep = dataEndPointName.length;\r",
											"\r",
											"                        console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep);\r",
											"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
											"\r",
											"                        for(let i=0;i<countCustomStep;i++){\r",
											"                            let no = custom[i].no;\r",
											"                            let valueEndPointName = custom[i].endPointName;\r",
											"                            let valueResponseStatus = custom[i].responseStatus;\r",
											"                            // console.log(\"i\",i);\r",
											"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
											"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
											"                            \r",
											"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString());\r",
											"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i]);\r",
											"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i]);\r",
											"\r",
											"                            pm.expect(no).to.eql((i+1).toString()); \r",
											"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
											"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]); \r",
											"                        }\r",
											"                    });\r",
											"                }\r",
											"\r",
											"                if (logType == logTypeDetail && applicationNameValue == applicationName) { //'Detail' and ProvisioningAPIs\r",
											"\r",
											"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
											"                    // console.log('endPointNameValue ',endPointNameValue)\r",
											"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [Signin]\", function () {\r",
											"                        console.log(\"======== Check Detail Log ( Expected = Actual) [Signin] ==================\");\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
											"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
											"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
											"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
											"\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail);\r",
											"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail);\r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace);\r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName);\r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId);\r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime);\r",
											"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail);\r",
											"\r",
											"                        if (endPointNameValue == endPointNameProvisioningAPIs) {     //\"endPointName\":\"ProvisioningAPIs\"\r",
											"                            console.log(\"custom1.endPointName : \" + resultDataLog.custom1.endPointName + \" = \" + endPointNameProvisioningAPIs);\r",
											"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs);\r",
											"\r",
											"                            // check requestObject\r",
											"                            // \"requestObject\":\"{ \\\"url\\\":\\\"mg-staging.sandais.com/api/v1/auth/signin\\\",\\\"method\\\":\\\"POST\\\",\\\"headers\\\":{\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"Signin_202103241403757\\\",\\\"x-ais-orderdesc\\\":\\\"User Authentication\\\"},\\\"body\\\":{\\\"username\\\":\\\"QATest_003\\\",\\\"password\\\":\\\"bnZkZm5nZXJnbGtkanZlaWdqbmVvZGtsZA==\\\"}}\"\r",
											"\r",
											"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
											"                            //  console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
											"                            let url = urlCheckLog + requestObjectUrlStaging;\r",
											"                            let x_ais_orderref = x_ais_OrderRef_Signin + current_timestamp;\r",
											"                            let x_ais_orderdesc = x_ais_OrderDesc_UserAuthentication;\r",
											"                            let x_ais_userName = x_ais_UserName_AisPartner;\r",
											"                            \r",
											"                            var Username = pm.environment.get(\"Username_SupplierAdmin\");\r",
											"                            var Password = pm.environment.get(\"Password_SupplierAdmin\"); \r",
											"                            var AccessToken = pm.environment.get(\"AccessToken\");\r",
											"                            var TokenType = pm.environment.get(\"TokenType\");\r",
											"                            \r",
											"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
											"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
											"                            console.log(\"headers.x_ais_userName : \" + jsonParseRequestObject.headers[header_x_ais_username] + \" = \" + x_ais_userName);\r",
											"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
											"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
											"\r",
											"                            pm.expect(jsonParseRequestObject.url).to.eql(url);\r",
											"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_username]).to.eql(x_ais_userName);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
											"\r",
											"                            console.log(\"resquest.body.Username : \" + jsonParseRequestObject.body.Username + \" = \" + Username);\r",
											"                            console.log(\"resquest.body.Password : \" + jsonParseRequestObject.body.Password + \" = \" + Password);\r",
											"\r",
											"                            pm.expect(jsonParseRequestObject.body.Username).to.eql(Username);\r",
											"                            pm.expect(jsonParseRequestObject.body.Password).to.eql(Password);\r",
											"\r",
											"                            // check responseObject\r",
											"                            // \"responseObject\":\"{\\\"OperationStatus\\\":{\\\"Code\\\":\\\"20000\\\",\\\"Description\\\":\\\"SignInProcess is Success\\\"},\\\"TokenType\\\":\\\"Bearer\\\",\\\"AccessToken\\\":\\\"Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAEEwemyfiMnI8Lw+aKSIaN42m4QbuzpURtw3oHSFyFWX0IlAkkY2KW0\\\",\\\"ExpiresIn\\\":20,\\\"ExpiresDate\\\":\\\"2021-03-24T14:21:49.3194415+07:00\\\",\\\"AccountId\\\":[],\\\"UserRole\\\":[\\\"RootAdmin\\\"]}\",\"activityLog\":{\"startTime\":\"2021-03-24T14:01:49.316645+07:00\",\"endTime\":\"2021-03-24T14:01:49.3211605+07:00\",\"processTime\":4.5155}}\r",
											"\r",
											"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
											"                            // console.log('jsonParseResponseObject',jsonParseResponseObject);\r",
											"\r",
											"                            console.log(\"response.AccessToken : \" + resultDataLog.AccessToken + \" = \" + AccessToken);\r",
											"                            console.log(\"response.TokenType : \" + resultDataLog.TokenType + \" = \" + TokenType);\r",
											"\r",
											"                            pm.expect(jsonParseResponseObject.AccessToken).to.eql(AccessToken);\r",
											"                            pm.expect(jsonParseResponseObject.TokenType).to.eql(TokenType);\r",
											"\r",
											"                            console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeSuccess);\r",
											"                            console.log(\"response.OperationStatus.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionSuccessSignIn);\r",
											"\r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeSuccess);\r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionSuccessSignIn);\r",
											"                        }\r",
											"                    });\r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"setTimeout(function () {SearchLogFindTid();}, 6000);\r",
											"setTimeout(function () {CheckLog();}, 15000);\r",
											"\r",
											"setTimeout(function () {\r",
											"pm.environment.unset(\"current_timestamp\");\r",
											"pm.environment.unset(\"TokenType\");\r",
											"pm.environment.unset(\"AccessToken\");\r",
											"pm.environment.unset(\"tid\");\r",
											"}, 90000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-ais-UserName",
										"type": "text",
										"value": "{{x_ais_UserName_AisPartner}}"
									},
									{
										"key": "x-ais-OrderRef",
										"value": "{{x_ais_OrderRef_Signin}}{{current_timestamp}}"
									},
									{
										"key": "x-ais-OrderDesc",
										"type": "text",
										"value": "{{x_ais_OrderDesc_UserAuthentication}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Username\": \"{{Username_SupplierAdmin}}\",\r\n    \"Password\": \"{{Password_SupplierAdmin}}\"\r\n}"
								},
								"url": {
									"raw": "{{url}}{{provisioningapis}}/api/v1/auth/signin",
									"host": [
										"{{url}}{{provisioningapis}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"signin"
									]
								},
								"description": "Type:Desire"
							},
							"response": []
						},
						{
							"name": "Signin_TST_F1_1_1_003_Success_CustomerAdmin",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"//format YYYYMMDDHHMMSSS\r",
											"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
											"// console.log('currentTmestamp',currentTmestamp);\r",
											"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- statusCodeList --------------//\r",
											"//set variable to statusCodeList JSON.parse\r",
											"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
											"//set global variable to statusCode 200\r",
											"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- resultCodeList --------------//\r",
											"//set variable to resultCodeList JSON.parse\r",
											"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
											"//set global variable to resultCode \"20000\"\r",
											"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- resultDescriptionSuccessList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
											"//set global variable to resultDescription \"SignInProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- HeaderList --------------//\r",
											"//set variable to HeaderList JSON.parse\r",
											"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
											"//---------------- set globals Other --------------//\r",
											"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
											"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
											"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
											"//set global variable to kbn-versio \"7.5.1\"\r",
											"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Signin_ --------------//\r",
											"//set global variable to x_ais_OrderRef \"Signin_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"setTimeout(async function(){}, 3000);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"//------------------------------------------------------------//\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"Signin_\"\r",
											"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
											"//------------------------------------------------------------//\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//------------------------------------------------------------//\r",
											"//get global variable to resultDescription \"SignInProcess is Success\"\r",
											"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
											"//------------------------------------------------------------//\r",
											"let jsonData = pm.response.json();\r",
											"pm.environment.set(\"TokenType\", jsonData.TokenType);\r",
											"pm.environment.set(\"AccessToken\", jsonData.AccessToken);\r",
											"\r",
											"pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"    pm.response.to.have.status(statusCodeSuccess);\r",
											"});\r",
											"\r",
											"pm.test('Signin : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeSuccess);\r",
											"});\r",
											"\r",
											"pm.test('Signin : OperationStatus Description is ' + '\"' + resultDescriptionSuccessSignIn + '\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionSuccessSignIn);\r",
											"});\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"//---------------- LogDefaultValue --------------//\r",
											"//set variable to LogDefaultValue JSON.parse\r",
											"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
											"// console.log('LogDefaultValue',LogDefaultValue);\r",
											"//---------------- set globals Other --------------//\r",
											"var SearchLog = LogDefaultValue.SearchLog;\r",
											"// console.log('SearchLog',SearchLog);\r",
											"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
											"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
											"var kbn_version = SearchLog.header.kbn_version;\r",
											"var authorization = SearchLog.header.Authorization;\r",
											"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
											"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
											"var namespace = LogDefaultValue.Other.namespace;\r",
											"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
											"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
											"var header_x_ais_username = LogDefaultValue.Other.header_x_ais_username;\r",
											"var methodPost = LogDefaultValue.Other.methodPost;\r",
											"\r",
											"// Detail\r",
											"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
											"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
											"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
											"\r",
											"// Summary\r",
											"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
											"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
											"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
											"\r",
											"// ProvisioningAPIs [Signin]\r",
											"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
											"var cmdName = LogDefaultValue.Provisioning.Signin.cmdNameSignin;\r",
											"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
											"var containerId = LogDefaultValue.Provisioning.containerId;\r",
											"var requestObjectUrlStaging = LogDefaultValue.Provisioning.Signin.requestObjectUrlSigninStaging;\r",
											"\r",
											"// Check CDR (Summary Log) and EDR (Detail Log)\r",
											"SearchLogFindTid = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSearchLogFindTid = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = x_ais_OrderRef_Signin + current_timestamp;\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch\", valueSearch)\r",
											"\r",
											"        // body\r",
											"        let httpRequestSearchLogFindTid = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({ \"version\": \"true\", \"size\": 500, \"sort\": [{ \"@timestamp_es\": { \"order\": \"desc\", \"unmapped_type\": \"boolean\" } }], \"_source\": { \"excludes\": [] }, \"aggs\": { \"2\": { \"date_histogram\": { \"field\": \"@timestamp_es\", \"fixed_interval\": \"30s\", \"time_zone\": \"Asia/Bangkok\", \"min_doc_count\": 1 } } }, \"stored_fields\": [\"*\"], \"script_fields\": {}, \"docvalue_fields\": [{ \"field\": \"@timestamp_es\", \"format\": \"date_time\" }, { \"field\": \"cauldron.custom1.activityLog.endTime\", \"format\": \"date_time\" }, { \"field\": \"cauldron.custom1.activityLog.startTime\", \"format\": \"date_time\" }, { \"field\": \"time\", \"format\": \"date_time\" }], \"query\": { \"bool\": { \"must\": [], \"filter\": [{ \"multi_match\": { \"type\": \"best_fields\", \"query\": '\"' + valueSearch + '\"', \"lenient\": \"true\" } }, { \"range\": { \"@timestamp_es\": { \"format\": \"strict_date_optional_time\", \"gte\": setRangeGTE, \"lte\": setRangeLTE } } }], \"should\": [], \"must_not\": [] } }, \"highlight\": { \"pre_tags\": [\"@kibana-highlighted-field@\"], \"post_tags\": [\"@/kibana-highlighted-field@\"], \"fields\": { \"*\": {} }, \"fragment_size\": 2147483647 } })\r",
											"        };\r",
											"\r",
											"        let optionsSearchLogFindTid = {\r",
											"            url: url_staging_azure_cauldron,\r",
											"            method: 'POST',\r",
											"            header: headersOptSearchLogFindTid,\r",
											"            body: httpRequestSearchLogFindTid\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsSearchLogFindTid);\r",
											"        let jsonDataSearchLogFindTid = await response.json();\r",
											"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
											"\r",
											"        // //200\r",
											"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"\r",
											"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
											"        console.log('hits', hits)\r",
											"\r",
											"        // find tid\r",
											"        for (let i = 0; i < hits.length; i++) {\r",
											"            // let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"\r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            if (applicationNameValue == applicationName) {\r",
											"                let tid = hits[i]._source.cauldron.tid;\r",
											"                pm.environment.set(\"tid\", tid);\r",
											"                break;\r",
											"            }\r",
											"        }\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"CheckLog = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCheckLog = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = pm.environment.get(\"tid\");\r",
											"\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch\", valueSearch)\r",
											"\r",
											"        // body\r",
											"        let httpRequestCheckLog = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({ \"version\": true, \"size\": 500, \"sort\": [{ \"@timestamp_es\": { \"order\": \"desc\", \"unmapped_type\": \"boolean\" } }], \"_source\": { \"excludes\": [] }, \"aggs\": { \"2\": { \"date_histogram\": { \"field\": \"@timestamp_es\", \"fixed_interval\": \"30s\", \"time_zone\": \"Asia/Bangkok\", \"min_doc_count\": 1 } } }, \"stored_fields\": [\"*\"], \"script_fields\": {}, \"docvalue_fields\": [{ \"field\": \"@timestamp_es\", \"format\": \"date_time\" }, { \"field\": \"cauldron.custom1.activityLog.endTime\", \"format\": \"date_time\" }, { \"field\": \"cauldron.custom1.activityLog.startTime\", \"format\": \"date_time\" }, { \"field\": \"time\", \"format\": \"date_time\" }], \"query\": { \"bool\": { \"must\": [], \"filter\": [{ \"multi_match\": { \"type\": \"best_fields\", \"query\": '\"' + valueSearch + '\"', \"lenient\": true } }, { \"range\": { \"@timestamp_es\": { \"format\": \"strict_date_optional_time\", \"gte\": setRangeGTE, \"lte\": setRangeLTE } } }], \"should\": [], \"must_not\": [] } }, \"highlight\": { \"pre_tags\": [\"@kibana-highlighted-field@\"], \"post_tags\": [\"@/kibana-highlighted-field@\"], \"fields\": { \"*\": {} }, \"fragment_size\": 2147483647 } })\r",
											"        };\r",
											"        let optionsCheckLog = {\r",
											"            url: url_staging_azure_cauldron,\r",
											"            method: 'POST',\r",
											"            header: headersOptCheckLog,\r",
											"            body: httpRequestCheckLog\r",
											"        };\r",
											"        let response = await reqPromise(optionsCheckLog);\r",
											"        let jsonDataCheckLog = await response.json();\r",
											"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
											"\r",
											"        // //200\r",
											"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"\r",
											"        let hits = jsonDataCheckLog.hits.hits\r",
											"        console.log('hits', hits)\r",
											"\r",
											"        // find logType\r",
											"        for (let i = 0; i < hits.length; i++) {\r",
											"            //  let logType = hits[i]._source.cauldron.logType\r",
											"            let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"\r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"\r",
											"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
											"            // console.log('resultDataLog',resultDataLog)\r",
											"\r",
											"            let tidControl = x_ais_OrderRef_Signin + current_timestamp;\r",
											"            // console.log(tidControl);\r",
											"            if (applicationNameValue == applicationName) {\r",
											"\r",
											"                if (logType == logTypeSummary && applicationNameValue == applicationName) { // 'Summary' and ProvisioningAPIs\r",
											"                    pm.test(\"Check Summary Log : Signin\", function () {\r",
											"                        console.log(\"======== Check Summary Log ( Expected = Actual) [Signin] ==================\");\r",
											"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
											"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
											"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeSuccess);\r",
											"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionSuccessSignIn);\r",
											"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
											"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
											"                        // console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
											"                        \r",
											"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp);\r",
											"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName);\r",
											"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeSuccess);\r",
											"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionSuccessSignIn);\r",
											"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp);\r",
											"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary);\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace);\r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName);\r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId);\r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
											"                        // pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
											"\r",
											"                        // check custom\r",
											"                        // \\\"custom\\\":{ \\\"endPointSummary\\\":[ { \\\"no\\\":\\\"1\\\", \\\"endPointName\\\":\\\"db.ClientsCollection\\\", \\\"responseStatus\\\":\\\"Success:InquiryClients was successfully.\\\", \\\"processTime\\\":6.882 }, { \\\"no\\\":\\\"2\\\", \\\"endPointName\\\":\\\"db.AccountsCollection\\\", \\\"responseStatus\\\":\\\"Success:InquiryAccount was successfully.\\\", \\\"processTime\\\":1.5257 }, { \\\"no\\\":\\\"3\\\", \\\"endPointName\\\":\\\"db.AuthenticationCollection\\\", \\\"responseStatus\\\":\\\"Success:InsertAuthentication was successfully.\\\", \\\"processTime\\\":1.0979 } ] }\r",
											"                        let custom = resultDataLog.custom.endPointSummary;\r",
											"                        let countCustom = custom.length;\r",
											"\r",
											"                        // [\"db.ClientsCollection\",\"db.AccountsCollection\",\"db.AuthenticationCollection\"]\r",
											"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_Signin_004;\r",
											"                        // [\"Success:InquiryClients was successfully.\",\"Success:InquiryAccount was successfully.\",\"Success:InsertAuthentication was successfully.\"]\r",
											"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_Signin_004;\r",
											"                        let countCustomStep = dataEndPointName.length;\r",
											"\r",
											"                        console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep);\r",
											"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
											"\r",
											"                        for(let i=0;i<countCustomStep;i++){\r",
											"                            let no = custom[i].no;\r",
											"                            let valueEndPointName = custom[i].endPointName;\r",
											"                            let valueResponseStatus = custom[i].responseStatus;\r",
											"                            // console.log(\"i\",i);\r",
											"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
											"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
											"                            \r",
											"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString());\r",
											"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i]);\r",
											"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i]);\r",
											"\r",
											"                            pm.expect(no).to.eql((i+1).toString()); \r",
											"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
											"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]); \r",
											"                        }\r",
											"                    });\r",
											"                }\r",
											"\r",
											"                if (logType == logTypeDetail && applicationNameValue == applicationName) { //'Detail' and ProvisioningAPIs\r",
											"\r",
											"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
											"                    // console.log('endPointNameValue ',endPointNameValue)\r",
											"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [Signin]\", function () {\r",
											"                        console.log(\"======== Check Detail Log ( Expected = Actual) [Signin] ==================\");\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
											"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
											"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
											"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
											"\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail);\r",
											"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail);\r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace);\r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName);\r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId);\r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime);\r",
											"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail);\r",
											"\r",
											"                        if (endPointNameValue == endPointNameProvisioningAPIs) {     //\"endPointName\":\"ProvisioningAPIs\"\r",
											"                            console.log(\"custom1.endPointName : \" + resultDataLog.custom1.endPointName + \" = \" + endPointNameProvisioningAPIs);\r",
											"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs);\r",
											"\r",
											"                            // check requestObject\r",
											"                            // \"requestObject\":\"{ \\\"url\\\":\\\"mg-staging.sandais.com/api/v1/auth/signin\\\",\\\"method\\\":\\\"POST\\\",\\\"headers\\\":{\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"Signin_202103241403757\\\",\\\"x-ais-orderdesc\\\":\\\"User Authentication\\\"},\\\"body\\\":{\\\"username\\\":\\\"QATest_003\\\",\\\"password\\\":\\\"bnZkZm5nZXJnbGtkanZlaWdqbmVvZGtsZA==\\\"}}\"\r",
											"\r",
											"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
											"                            //  console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
											"                            let url = urlCheckLog + requestObjectUrlStaging;\r",
											"                            let x_ais_orderref = x_ais_OrderRef_Signin + current_timestamp;\r",
											"                            let x_ais_orderdesc = x_ais_OrderDesc_UserAuthentication;\r",
											"                            let x_ais_userName = x_ais_UserName_AisPartner;\r",
											"                            \r",
											"                            var Username = pm.environment.get(\"Username_CustomerAdmin\");\r",
											"                            var Password = pm.environment.get(\"Password_CustomerAdmin\"); \r",
											"                            var AccessToken = pm.environment.get(\"AccessToken\");\r",
											"                            var TokenType = pm.environment.get(\"TokenType\");\r",
											"                            \r",
											"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
											"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
											"                            console.log(\"headers.x_ais_userName : \" + jsonParseRequestObject.headers[header_x_ais_username] + \" = \" + x_ais_userName);\r",
											"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
											"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
											"\r",
											"                            pm.expect(jsonParseRequestObject.url).to.eql(url);\r",
											"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_username]).to.eql(x_ais_userName);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
											"\r",
											"                            console.log(\"resquest.body.Username : \" + jsonParseRequestObject.body.Username + \" = \" + Username);\r",
											"                            console.log(\"resquest.body.Password : \" + jsonParseRequestObject.body.Password + \" = \" + Password);\r",
											"\r",
											"                            pm.expect(jsonParseRequestObject.body.Username).to.eql(Username);\r",
											"                            pm.expect(jsonParseRequestObject.body.Password).to.eql(Password);\r",
											"\r",
											"                            // check responseObject\r",
											"                            // \"responseObject\":\"{\\\"OperationStatus\\\":{\\\"Code\\\":\\\"20000\\\",\\\"Description\\\":\\\"SignInProcess is Success\\\"},\\\"TokenType\\\":\\\"Bearer\\\",\\\"AccessToken\\\":\\\"Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAEEwemyfiMnI8Lw+aKSIaN42m4QbuzpURtw3oHSFyFWX0IlAkkY2KW0\\\",\\\"ExpiresIn\\\":20,\\\"ExpiresDate\\\":\\\"2021-03-24T14:21:49.3194415+07:00\\\",\\\"AccountId\\\":[],\\\"UserRole\\\":[\\\"RootAdmin\\\"]}\",\"activityLog\":{\"startTime\":\"2021-03-24T14:01:49.316645+07:00\",\"endTime\":\"2021-03-24T14:01:49.3211605+07:00\",\"processTime\":4.5155}}\r",
											"\r",
											"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
											"                            // console.log('jsonParseResponseObject',jsonParseResponseObject);\r",
											"\r",
											"                            console.log(\"response.AccessToken : \" + resultDataLog.AccessToken + \" = \" + AccessToken);\r",
											"                            console.log(\"response.TokenType : \" + resultDataLog.TokenType + \" = \" + TokenType);\r",
											"\r",
											"                            pm.expect(jsonParseResponseObject.AccessToken).to.eql(AccessToken);\r",
											"                            pm.expect(jsonParseResponseObject.TokenType).to.eql(TokenType);\r",
											"\r",
											"                            console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeSuccess);\r",
											"                            console.log(\"response.OperationStatus.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionSuccessSignIn);\r",
											"\r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeSuccess);\r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionSuccessSignIn);\r",
											"                        }\r",
											"                    });\r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"setTimeout(function () {SearchLogFindTid();}, 6000);\r",
											"setTimeout(function () {CheckLog();}, 15000);\r",
											"\r",
											"setTimeout(function () {\r",
											"pm.environment.unset(\"current_timestamp\");\r",
											"pm.environment.unset(\"TokenType\");\r",
											"pm.environment.unset(\"AccessToken\");\r",
											"pm.environment.unset(\"tid\");\r",
											"}, 90000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-ais-UserName",
										"type": "text",
										"value": "{{x_ais_UserName_AisPartner}}"
									},
									{
										"key": "x-ais-OrderRef",
										"value": "{{x_ais_OrderRef_Signin}}{{current_timestamp}}"
									},
									{
										"key": "x-ais-OrderDesc",
										"type": "text",
										"value": "{{x_ais_OrderDesc_UserAuthentication}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Username\": \"{{Username_CustomerAdmin}}\",\r\n    \"Password\": \"{{Password_CustomerAdmin}}\"\r\n}"
								},
								"url": {
									"raw": "{{url}}{{provisioningapis}}/api/v1/auth/signin",
									"host": [
										"{{url}}{{provisioningapis}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"signin"
									]
								},
								"description": "Type:Desire"
							},
							"response": []
						},
						{
							"name": "Signin_TST_F1_1_1_004_Success_Supplier",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"//format YYYYMMDDHHMMSSS\r",
											"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
											"// console.log('currentTmestamp',currentTmestamp);\r",
											"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- statusCodeList --------------//\r",
											"//set variable to statusCodeList JSON.parse\r",
											"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
											"//set global variable to statusCode 200\r",
											"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- resultCodeList --------------//\r",
											"//set variable to resultCodeList JSON.parse\r",
											"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
											"//set global variable to resultCode \"20000\"\r",
											"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- resultDescriptionSuccessList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
											"//set global variable to resultDescription \"SignInProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- HeaderList --------------//\r",
											"//set variable to HeaderList JSON.parse\r",
											"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
											"//---------------- set globals Other --------------//\r",
											"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
											"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
											"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
											"//set global variable to kbn-versio \"7.5.1\"\r",
											"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Signin_ --------------//\r",
											"//set global variable to x_ais_OrderRef \"Signin_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"setTimeout(async function(){}, 3000);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"//------------------------------------------------------------//\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"Signin_\"\r",
											"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
											"//------------------------------------------------------------//\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//------------------------------------------------------------//\r",
											"//get global variable to resultDescription \"SignInProcess is Success\"\r",
											"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
											"//------------------------------------------------------------//\r",
											"let jsonData = pm.response.json();\r",
											"pm.environment.set(\"TokenType\", jsonData.TokenType);\r",
											"pm.environment.set(\"AccessToken\", jsonData.AccessToken);\r",
											"\r",
											"pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"    pm.response.to.have.status(statusCodeSuccess);\r",
											"});\r",
											"\r",
											"pm.test('Signin : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeSuccess);\r",
											"});\r",
											"\r",
											"pm.test('Signin : OperationStatus Description is ' + '\"' + resultDescriptionSuccessSignIn + '\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionSuccessSignIn);\r",
											"});\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"//---------------- LogDefaultValue --------------//\r",
											"//set variable to LogDefaultValue JSON.parse\r",
											"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
											"// console.log('LogDefaultValue',LogDefaultValue);\r",
											"//---------------- set globals Other --------------//\r",
											"var SearchLog = LogDefaultValue.SearchLog;\r",
											"// console.log('SearchLog',SearchLog);\r",
											"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
											"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
											"var kbn_version = SearchLog.header.kbn_version;\r",
											"var authorization = SearchLog.header.Authorization;\r",
											"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
											"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
											"var namespace = LogDefaultValue.Other.namespace;\r",
											"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
											"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
											"var header_x_ais_username = LogDefaultValue.Other.header_x_ais_username;\r",
											"var methodPost = LogDefaultValue.Other.methodPost;\r",
											"\r",
											"// Detail\r",
											"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
											"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
											"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
											"\r",
											"// Summary\r",
											"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
											"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
											"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
											"\r",
											"// ProvisioningAPIs [Signin]\r",
											"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
											"var cmdName = LogDefaultValue.Provisioning.Signin.cmdNameSignin;\r",
											"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
											"var containerId = LogDefaultValue.Provisioning.containerId;\r",
											"var requestObjectUrlStaging = LogDefaultValue.Provisioning.Signin.requestObjectUrlSigninStaging;\r",
											"\r",
											"// Check CDR (Summary Log) and EDR (Detail Log)\r",
											"SearchLogFindTid = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSearchLogFindTid = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = x_ais_OrderRef_Signin + current_timestamp;\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch\", valueSearch)\r",
											"\r",
											"        // body\r",
											"        let httpRequestSearchLogFindTid = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({ \"version\": \"true\", \"size\": 500, \"sort\": [{ \"@timestamp_es\": { \"order\": \"desc\", \"unmapped_type\": \"boolean\" } }], \"_source\": { \"excludes\": [] }, \"aggs\": { \"2\": { \"date_histogram\": { \"field\": \"@timestamp_es\", \"fixed_interval\": \"30s\", \"time_zone\": \"Asia/Bangkok\", \"min_doc_count\": 1 } } }, \"stored_fields\": [\"*\"], \"script_fields\": {}, \"docvalue_fields\": [{ \"field\": \"@timestamp_es\", \"format\": \"date_time\" }, { \"field\": \"cauldron.custom1.activityLog.endTime\", \"format\": \"date_time\" }, { \"field\": \"cauldron.custom1.activityLog.startTime\", \"format\": \"date_time\" }, { \"field\": \"time\", \"format\": \"date_time\" }], \"query\": { \"bool\": { \"must\": [], \"filter\": [{ \"multi_match\": { \"type\": \"best_fields\", \"query\": '\"' + valueSearch + '\"', \"lenient\": \"true\" } }, { \"range\": { \"@timestamp_es\": { \"format\": \"strict_date_optional_time\", \"gte\": setRangeGTE, \"lte\": setRangeLTE } } }], \"should\": [], \"must_not\": [] } }, \"highlight\": { \"pre_tags\": [\"@kibana-highlighted-field@\"], \"post_tags\": [\"@/kibana-highlighted-field@\"], \"fields\": { \"*\": {} }, \"fragment_size\": 2147483647 } })\r",
											"        };\r",
											"\r",
											"        let optionsSearchLogFindTid = {\r",
											"            url: url_staging_azure_cauldron,\r",
											"            method: 'POST',\r",
											"            header: headersOptSearchLogFindTid,\r",
											"            body: httpRequestSearchLogFindTid\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsSearchLogFindTid);\r",
											"        let jsonDataSearchLogFindTid = await response.json();\r",
											"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
											"\r",
											"        // //200\r",
											"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"\r",
											"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
											"        console.log('hits', hits)\r",
											"\r",
											"        // find tid\r",
											"        for (let i = 0; i < hits.length; i++) {\r",
											"            // let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"\r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            if (applicationNameValue == applicationName) {\r",
											"                let tid = hits[i]._source.cauldron.tid;\r",
											"                pm.environment.set(\"tid\", tid);\r",
											"                break;\r",
											"            }\r",
											"        }\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"CheckLog = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCheckLog = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = pm.environment.get(\"tid\");\r",
											"\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch\", valueSearch)\r",
											"\r",
											"        // body\r",
											"        let httpRequestCheckLog = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({ \"version\": true, \"size\": 500, \"sort\": [{ \"@timestamp_es\": { \"order\": \"desc\", \"unmapped_type\": \"boolean\" } }], \"_source\": { \"excludes\": [] }, \"aggs\": { \"2\": { \"date_histogram\": { \"field\": \"@timestamp_es\", \"fixed_interval\": \"30s\", \"time_zone\": \"Asia/Bangkok\", \"min_doc_count\": 1 } } }, \"stored_fields\": [\"*\"], \"script_fields\": {}, \"docvalue_fields\": [{ \"field\": \"@timestamp_es\", \"format\": \"date_time\" }, { \"field\": \"cauldron.custom1.activityLog.endTime\", \"format\": \"date_time\" }, { \"field\": \"cauldron.custom1.activityLog.startTime\", \"format\": \"date_time\" }, { \"field\": \"time\", \"format\": \"date_time\" }], \"query\": { \"bool\": { \"must\": [], \"filter\": [{ \"multi_match\": { \"type\": \"best_fields\", \"query\": '\"' + valueSearch + '\"', \"lenient\": true } }, { \"range\": { \"@timestamp_es\": { \"format\": \"strict_date_optional_time\", \"gte\": setRangeGTE, \"lte\": setRangeLTE } } }], \"should\": [], \"must_not\": [] } }, \"highlight\": { \"pre_tags\": [\"@kibana-highlighted-field@\"], \"post_tags\": [\"@/kibana-highlighted-field@\"], \"fields\": { \"*\": {} }, \"fragment_size\": 2147483647 } })\r",
											"        };\r",
											"        let optionsCheckLog = {\r",
											"            url: url_staging_azure_cauldron,\r",
											"            method: 'POST',\r",
											"            header: headersOptCheckLog,\r",
											"            body: httpRequestCheckLog\r",
											"        };\r",
											"        let response = await reqPromise(optionsCheckLog);\r",
											"        let jsonDataCheckLog = await response.json();\r",
											"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
											"\r",
											"        // //200\r",
											"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"\r",
											"        let hits = jsonDataCheckLog.hits.hits\r",
											"        console.log('hits', hits)\r",
											"\r",
											"        // find logType\r",
											"        for (let i = 0; i < hits.length; i++) {\r",
											"            //  let logType = hits[i]._source.cauldron.logType\r",
											"            let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"\r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"\r",
											"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
											"            // console.log('resultDataLog',resultDataLog)\r",
											"\r",
											"            let tidControl = x_ais_OrderRef_Signin + current_timestamp;\r",
											"            // console.log(tidControl);\r",
											"            if (applicationNameValue == applicationName) {\r",
											"\r",
											"                if (logType == logTypeSummary && applicationNameValue == applicationName) { // 'Summary' and ProvisioningAPIs\r",
											"                    pm.test(\"Check Summary Log : Signin\", function () {\r",
											"                        console.log(\"======== Check Summary Log ( Expected = Actual) [Signin] ==================\");\r",
											"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
											"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
											"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeSuccess);\r",
											"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionSuccessSignIn);\r",
											"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
											"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
											"                        // console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
											"                        \r",
											"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp);\r",
											"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName);\r",
											"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeSuccess);\r",
											"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionSuccessSignIn);\r",
											"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp);\r",
											"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary);\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace);\r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName);\r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId);\r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
											"                        // pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
											"\r",
											"                        // check custom\r",
											"                        // \\\"custom\\\":{ \\\"endPointSummary\\\":[ { \\\"no\\\":\\\"1\\\", \\\"endPointName\\\":\\\"db.ClientsCollection\\\", \\\"responseStatus\\\":\\\"Success:InquiryClients was successfully.\\\", \\\"processTime\\\":5.0185 }, { \\\"no\\\":\\\"2\\\", \\\"endPointName\\\":\\\"db.AuthenticationCollection\\\", \\\"responseStatus\\\":\\\"Success:InsertAuthentication was successfully.\\\", \\\"processTime\\\":2.5952 } ] }\r",
											"                        let custom = resultDataLog.custom.endPointSummary;\r",
											"                        let countCustom = custom.length;\r",
											"\r",
											"                        // [\"db.ClientsCollection\",\"db.AuthenticationCollection\"]\r",
											"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_Signin;\r",
											"                        // [\"Success:InquiryClients was successfully.\",\"Success:InsertAuthentication was successfully.\"]\r",
											"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_Signin;\r",
											"                        let countCustomStep = dataEndPointName.length;\r",
											"\r",
											"                        console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep);\r",
											"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
											"\r",
											"                        for(let i=0;i<countCustomStep;i++){\r",
											"                            let no = custom[i].no;\r",
											"                            let valueEndPointName = custom[i].endPointName;\r",
											"                            let valueResponseStatus = custom[i].responseStatus;\r",
											"                            // console.log(\"i\",i);\r",
											"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
											"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
											"                            \r",
											"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString());\r",
											"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i]);\r",
											"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i]);\r",
											"\r",
											"                            pm.expect(no).to.eql((i+1).toString()); \r",
											"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
											"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]); \r",
											"                        }\r",
											"                    });\r",
											"                }\r",
											"\r",
											"                if (logType == logTypeDetail && applicationNameValue == applicationName) { //'Detail' and ProvisioningAPIs\r",
											"\r",
											"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
											"                    // console.log('endPointNameValue ',endPointNameValue)\r",
											"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [Signin]\", function () {\r",
											"                        console.log(\"======== Check Detail Log ( Expected = Actual) [Signin] ==================\");\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
											"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
											"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
											"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
											"\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail);\r",
											"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail);\r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace);\r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName);\r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId);\r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime);\r",
											"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail);\r",
											"\r",
											"                        if (endPointNameValue == endPointNameProvisioningAPIs) {     //\"endPointName\":\"ProvisioningAPIs\"\r",
											"                            console.log(\"custom1.endPointName : \" + resultDataLog.custom1.endPointName + \" = \" + endPointNameProvisioningAPIs);\r",
											"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs);\r",
											"\r",
											"                            // check requestObject\r",
											"                            // \"requestObject\":\"{ \\\"url\\\":\\\"mg-staging.sandais.com/api/v1/auth/signin\\\",\\\"method\\\":\\\"POST\\\",\\\"headers\\\":{\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"Signin_202103241403757\\\",\\\"x-ais-orderdesc\\\":\\\"User Authentication\\\"},\\\"body\\\":{\\\"username\\\":\\\"QATest_003\\\",\\\"password\\\":\\\"bnZkZm5nZXJnbGtkanZlaWdqbmVvZGtsZA==\\\"}}\"\r",
											"\r",
											"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
											"                            //  console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
											"                            let url = urlCheckLog + requestObjectUrlStaging;\r",
											"                            let x_ais_orderref = x_ais_OrderRef_Signin + current_timestamp;\r",
											"                            let x_ais_orderdesc = x_ais_OrderDesc_UserAuthentication;\r",
											"                            let x_ais_userName = x_ais_UserName_AisPartner;\r",
											"                            \r",
											"                            var Username = pm.environment.get(\"Username_Supplier\");\r",
											"                            var Password = pm.environment.get(\"Password_Supplier\"); \r",
											"                            var AccessToken = pm.environment.get(\"AccessToken\");\r",
											"                            var TokenType = pm.environment.get(\"TokenType\");\r",
											"                            \r",
											"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
											"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
											"                            console.log(\"headers.x_ais_userName : \" + jsonParseRequestObject.headers[header_x_ais_username] + \" = \" + x_ais_userName);\r",
											"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
											"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
											"\r",
											"                            pm.expect(jsonParseRequestObject.url).to.eql(url);\r",
											"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_username]).to.eql(x_ais_userName);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
											"\r",
											"                            console.log(\"resquest.body.Username : \" + jsonParseRequestObject.body.Username + \" = \" + Username);\r",
											"                            console.log(\"resquest.body.Password : \" + jsonParseRequestObject.body.Password + \" = \" + Password);\r",
											"\r",
											"                            pm.expect(jsonParseRequestObject.body.Username).to.eql(Username);\r",
											"                            pm.expect(jsonParseRequestObject.body.Password).to.eql(Password);\r",
											"\r",
											"                            // check responseObject\r",
											"                            // \"responseObject\":\"{\\\"OperationStatus\\\":{\\\"Code\\\":\\\"20000\\\",\\\"Description\\\":\\\"SignInProcess is Success\\\"},\\\"TokenType\\\":\\\"Bearer\\\",\\\"AccessToken\\\":\\\"Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAEEwemyfiMnI8Lw+aKSIaN42m4QbuzpURtw3oHSFyFWX0IlAkkY2KW0\\\",\\\"ExpiresIn\\\":20,\\\"ExpiresDate\\\":\\\"2021-03-24T14:21:49.3194415+07:00\\\",\\\"AccountId\\\":[],\\\"UserRole\\\":[\\\"RootAdmin\\\"]}\",\"activityLog\":{\"startTime\":\"2021-03-24T14:01:49.316645+07:00\",\"endTime\":\"2021-03-24T14:01:49.3211605+07:00\",\"processTime\":4.5155}}\r",
											"\r",
											"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
											"                            // console.log('jsonParseResponseObject',jsonParseResponseObject);\r",
											"\r",
											"                            console.log(\"response.AccessToken : \" + resultDataLog.AccessToken + \" = \" + AccessToken);\r",
											"                            console.log(\"response.TokenType : \" + resultDataLog.TokenType + \" = \" + TokenType);\r",
											"\r",
											"                            pm.expect(jsonParseResponseObject.AccessToken).to.eql(AccessToken);\r",
											"                            pm.expect(jsonParseResponseObject.TokenType).to.eql(TokenType);\r",
											"\r",
											"                            console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeSuccess);\r",
											"                            console.log(\"response.OperationStatus.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionSuccessSignIn);\r",
											"\r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeSuccess);\r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionSuccessSignIn);\r",
											"                        }\r",
											"                    });\r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"setTimeout(function () {SearchLogFindTid();}, 6000);\r",
											"setTimeout(function () {CheckLog();}, 15000);\r",
											"\r",
											"setTimeout(function () {\r",
											"pm.environment.unset(\"current_timestamp\");\r",
											"pm.environment.unset(\"TokenType\");\r",
											"pm.environment.unset(\"AccessToken\");\r",
											"pm.environment.unset(\"tid\");\r",
											"}, 90000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-ais-UserName",
										"type": "text",
										"value": "{{x_ais_UserName_AisPartner}}"
									},
									{
										"key": "x-ais-OrderRef",
										"value": "{{x_ais_OrderRef_Signin}}{{current_timestamp}}"
									},
									{
										"key": "x-ais-OrderDesc",
										"type": "text",
										"value": "{{x_ais_OrderDesc_UserAuthentication}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Username\": \"{{Username_Supplier}}\",\r\n    \"Password\": \"{{Password_Supplier}}\"\r\n}"
								},
								"url": {
									"raw": "{{url}}{{provisioningapis}}/api/v1/auth/signin",
									"host": [
										"{{url}}{{provisioningapis}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"signin"
									]
								},
								"description": "Type:Desire"
							},
							"response": []
						},
						{
							"name": "Signin_TST_F1_1_1_005_Success_Customer",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"//format YYYYMMDDHHMMSSS\r",
											"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
											"// console.log('currentTmestamp',currentTmestamp);\r",
											"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- statusCodeList --------------//\r",
											"//set variable to statusCodeList JSON.parse\r",
											"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
											"//set global variable to statusCode 200\r",
											"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- resultCodeList --------------//\r",
											"//set variable to resultCodeList JSON.parse\r",
											"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
											"//set global variable to resultCode \"20000\"\r",
											"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- resultDescriptionSuccessList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
											"//set global variable to resultDescription \"SignInProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- HeaderList --------------//\r",
											"//set variable to HeaderList JSON.parse\r",
											"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
											"//---------------- set globals Other --------------//\r",
											"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
											"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
											"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
											"//set global variable to kbn-versio \"7.5.1\"\r",
											"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Signin_ --------------//\r",
											"//set global variable to x_ais_OrderRef \"Signin_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"setTimeout(async function(){}, 3000);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"//------------------------------------------------------------//\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"Signin_\"\r",
											"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
											"//------------------------------------------------------------//\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//------------------------------------------------------------//\r",
											"//get global variable to resultDescription \"SignInProcess is Success\"\r",
											"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
											"//------------------------------------------------------------//\r",
											"let jsonData = pm.response.json();\r",
											"pm.environment.set(\"TokenType\", jsonData.TokenType);\r",
											"pm.environment.set(\"AccessToken\", jsonData.AccessToken);\r",
											"\r",
											"pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"    pm.response.to.have.status(statusCodeSuccess);\r",
											"});\r",
											"\r",
											"pm.test('Signin : OperationStatus Code is ' + '\"' + resultCodeSuccess + '\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeSuccess);\r",
											"});\r",
											"\r",
											"pm.test('Signin : OperationStatus Description is ' + '\"' + resultDescriptionSuccessSignIn + '\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionSuccessSignIn);\r",
											"});\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"//---------------- LogDefaultValue --------------//\r",
											"//set variable to LogDefaultValue JSON.parse\r",
											"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
											"// console.log('LogDefaultValue',LogDefaultValue);\r",
											"//---------------- set globals Other --------------//\r",
											"var SearchLog = LogDefaultValue.SearchLog;\r",
											"// console.log('SearchLog',SearchLog);\r",
											"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
											"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
											"var kbn_version = SearchLog.header.kbn_version;\r",
											"var authorization = SearchLog.header.Authorization;\r",
											"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
											"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
											"var namespace = LogDefaultValue.Other.namespace;\r",
											"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
											"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
											"var header_x_ais_username = LogDefaultValue.Other.header_x_ais_username;\r",
											"var methodPost = LogDefaultValue.Other.methodPost;\r",
											"\r",
											"// Detail\r",
											"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
											"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
											"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
											"\r",
											"// Summary\r",
											"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
											"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
											"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
											"\r",
											"// ProvisioningAPIs [Signin]\r",
											"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
											"var cmdName = LogDefaultValue.Provisioning.Signin.cmdNameSignin;\r",
											"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
											"var containerId = LogDefaultValue.Provisioning.containerId;\r",
											"var requestObjectUrlStaging = LogDefaultValue.Provisioning.Signin.requestObjectUrlSigninStaging;\r",
											"\r",
											"// Check CDR (Summary Log) and EDR (Detail Log)\r",
											"SearchLogFindTid = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSearchLogFindTid = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = x_ais_OrderRef_Signin + current_timestamp;\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch\", valueSearch)\r",
											"\r",
											"        // body\r",
											"        let httpRequestSearchLogFindTid = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({ \"version\": \"true\", \"size\": 500, \"sort\": [{ \"@timestamp_es\": { \"order\": \"desc\", \"unmapped_type\": \"boolean\" } }], \"_source\": { \"excludes\": [] }, \"aggs\": { \"2\": { \"date_histogram\": { \"field\": \"@timestamp_es\", \"fixed_interval\": \"30s\", \"time_zone\": \"Asia/Bangkok\", \"min_doc_count\": 1 } } }, \"stored_fields\": [\"*\"], \"script_fields\": {}, \"docvalue_fields\": [{ \"field\": \"@timestamp_es\", \"format\": \"date_time\" }, { \"field\": \"cauldron.custom1.activityLog.endTime\", \"format\": \"date_time\" }, { \"field\": \"cauldron.custom1.activityLog.startTime\", \"format\": \"date_time\" }, { \"field\": \"time\", \"format\": \"date_time\" }], \"query\": { \"bool\": { \"must\": [], \"filter\": [{ \"multi_match\": { \"type\": \"best_fields\", \"query\": '\"' + valueSearch + '\"', \"lenient\": \"true\" } }, { \"range\": { \"@timestamp_es\": { \"format\": \"strict_date_optional_time\", \"gte\": setRangeGTE, \"lte\": setRangeLTE } } }], \"should\": [], \"must_not\": [] } }, \"highlight\": { \"pre_tags\": [\"@kibana-highlighted-field@\"], \"post_tags\": [\"@/kibana-highlighted-field@\"], \"fields\": { \"*\": {} }, \"fragment_size\": 2147483647 } })\r",
											"        };\r",
											"\r",
											"        let optionsSearchLogFindTid = {\r",
											"            url: url_staging_azure_cauldron,\r",
											"            method: 'POST',\r",
											"            header: headersOptSearchLogFindTid,\r",
											"            body: httpRequestSearchLogFindTid\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsSearchLogFindTid);\r",
											"        let jsonDataSearchLogFindTid = await response.json();\r",
											"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
											"\r",
											"        // //200\r",
											"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"\r",
											"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
											"        console.log('hits', hits)\r",
											"\r",
											"        // find tid\r",
											"        for (let i = 0; i < hits.length; i++) {\r",
											"            // let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"\r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            if (applicationNameValue == applicationName) {\r",
											"                let tid = hits[i]._source.cauldron.tid;\r",
											"                pm.environment.set(\"tid\", tid);\r",
											"                break;\r",
											"            }\r",
											"        }\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"CheckLog = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCheckLog = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = pm.environment.get(\"tid\");\r",
											"\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch\", valueSearch)\r",
											"\r",
											"        // body\r",
											"        let httpRequestCheckLog = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({ \"version\": true, \"size\": 500, \"sort\": [{ \"@timestamp_es\": { \"order\": \"desc\", \"unmapped_type\": \"boolean\" } }], \"_source\": { \"excludes\": [] }, \"aggs\": { \"2\": { \"date_histogram\": { \"field\": \"@timestamp_es\", \"fixed_interval\": \"30s\", \"time_zone\": \"Asia/Bangkok\", \"min_doc_count\": 1 } } }, \"stored_fields\": [\"*\"], \"script_fields\": {}, \"docvalue_fields\": [{ \"field\": \"@timestamp_es\", \"format\": \"date_time\" }, { \"field\": \"cauldron.custom1.activityLog.endTime\", \"format\": \"date_time\" }, { \"field\": \"cauldron.custom1.activityLog.startTime\", \"format\": \"date_time\" }, { \"field\": \"time\", \"format\": \"date_time\" }], \"query\": { \"bool\": { \"must\": [], \"filter\": [{ \"multi_match\": { \"type\": \"best_fields\", \"query\": '\"' + valueSearch + '\"', \"lenient\": true } }, { \"range\": { \"@timestamp_es\": { \"format\": \"strict_date_optional_time\", \"gte\": setRangeGTE, \"lte\": setRangeLTE } } }], \"should\": [], \"must_not\": [] } }, \"highlight\": { \"pre_tags\": [\"@kibana-highlighted-field@\"], \"post_tags\": [\"@/kibana-highlighted-field@\"], \"fields\": { \"*\": {} }, \"fragment_size\": 2147483647 } })\r",
											"        };\r",
											"        let optionsCheckLog = {\r",
											"            url: url_staging_azure_cauldron,\r",
											"            method: 'POST',\r",
											"            header: headersOptCheckLog,\r",
											"            body: httpRequestCheckLog\r",
											"        };\r",
											"        let response = await reqPromise(optionsCheckLog);\r",
											"        let jsonDataCheckLog = await response.json();\r",
											"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
											"\r",
											"        // //200\r",
											"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"\r",
											"        let hits = jsonDataCheckLog.hits.hits\r",
											"        console.log('hits', hits)\r",
											"\r",
											"        // find logType\r",
											"        for (let i = 0; i < hits.length; i++) {\r",
											"            //  let logType = hits[i]._source.cauldron.logType\r",
											"            let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"\r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"\r",
											"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
											"            // console.log('resultDataLog',resultDataLog)\r",
											"\r",
											"            let tidControl = x_ais_OrderRef_Signin + current_timestamp;\r",
											"            // console.log(tidControl);\r",
											"            if (applicationNameValue == applicationName) {\r",
											"\r",
											"                if (logType == logTypeSummary && applicationNameValue == applicationName) { // 'Summary' and ProvisioningAPIs\r",
											"                    pm.test(\"Check Summary Log : Signin\", function () {\r",
											"                        console.log(\"======== Check Summary Log ( Expected = Actual) [Signin] ==================\");\r",
											"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
											"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
											"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeSuccess);\r",
											"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionSuccessSignIn);\r",
											"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
											"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
											"                        // console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
											"                        \r",
											"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp);\r",
											"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName);\r",
											"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeSuccess);\r",
											"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionSuccessSignIn);\r",
											"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp);\r",
											"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary);\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace);\r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName);\r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId);\r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
											"                        // pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
											"\r",
											"                        // check custom\r",
											"                        // \\\"custom\\\":{ \\\"endPointSummary\\\":[ { \\\"no\\\":\\\"1\\\", \\\"endPointName\\\":\\\"db.ClientsCollection\\\", \\\"responseStatus\\\":\\\"Success:InquiryClients was successfully.\\\", \\\"processTime\\\":5.0185 }, { \\\"no\\\":\\\"2\\\", \\\"endPointName\\\":\\\"db.AuthenticationCollection\\\", \\\"responseStatus\\\":\\\"Success:InsertAuthentication was successfully.\\\", \\\"processTime\\\":2.5952 } ] }\r",
											"                        let custom = resultDataLog.custom.endPointSummary;\r",
											"                        let countCustom = custom.length;\r",
											"\r",
											"                        // [\"db.ClientsCollection\",\"db.AuthenticationCollection\"]\r",
											"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_Signin;\r",
											"                        // [\"Success:InquiryClients was successfully.\",\"Success:InsertAuthentication was successfully.\"]\r",
											"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_Signin;\r",
											"                        let countCustomStep = dataEndPointName.length;\r",
											"\r",
											"                        console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep);\r",
											"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
											"\r",
											"                        for(let i=0;i<countCustomStep;i++){\r",
											"                            let no = custom[i].no;\r",
											"                            let valueEndPointName = custom[i].endPointName;\r",
											"                            let valueResponseStatus = custom[i].responseStatus;\r",
											"                            // console.log(\"i\",i);\r",
											"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
											"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
											"                            \r",
											"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString());\r",
											"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i]);\r",
											"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i]);\r",
											"\r",
											"                            pm.expect(no).to.eql((i+1).toString()); \r",
											"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
											"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]); \r",
											"                        }\r",
											"                    });\r",
											"                }\r",
											"\r",
											"                if (logType == logTypeDetail && applicationNameValue == applicationName) { //'Detail' and ProvisioningAPIs\r",
											"\r",
											"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
											"                    // console.log('endPointNameValue ',endPointNameValue)\r",
											"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [Signin]\", function () {\r",
											"                        console.log(\"======== Check Detail Log ( Expected = Actual) [Signin] ==================\");\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
											"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
											"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
											"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
											"\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail);\r",
											"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail);\r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace);\r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName);\r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId);\r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime);\r",
											"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail);\r",
											"\r",
											"                        if (endPointNameValue == endPointNameProvisioningAPIs) {     //\"endPointName\":\"ProvisioningAPIs\"\r",
											"                            console.log(\"custom1.endPointName : \" + resultDataLog.custom1.endPointName + \" = \" + endPointNameProvisioningAPIs);\r",
											"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs);\r",
											"\r",
											"                            // check requestObject\r",
											"                            // \"requestObject\":\"{ \\\"url\\\":\\\"mg-staging.sandais.com/api/v1/auth/signin\\\",\\\"method\\\":\\\"POST\\\",\\\"headers\\\":{\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"Signin_202103241403757\\\",\\\"x-ais-orderdesc\\\":\\\"User Authentication\\\"},\\\"body\\\":{\\\"username\\\":\\\"QATest_003\\\",\\\"password\\\":\\\"bnZkZm5nZXJnbGtkanZlaWdqbmVvZGtsZA==\\\"}}\"\r",
											"\r",
											"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
											"                            //  console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
											"                            let url = urlCheckLog + requestObjectUrlStaging;\r",
											"                            let x_ais_orderref = x_ais_OrderRef_Signin + current_timestamp;\r",
											"                            let x_ais_orderdesc = x_ais_OrderDesc_UserAuthentication;\r",
											"                            let x_ais_userName = x_ais_UserName_AisPartner;\r",
											"                            \r",
											"                            var Username = pm.environment.get(\"Username_Customer\");\r",
											"                            var Password = pm.environment.get(\"Password_Customer\"); \r",
											"                            var AccessToken = pm.environment.get(\"AccessToken\");\r",
											"                            var TokenType = pm.environment.get(\"TokenType\");\r",
											"                            \r",
											"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
											"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
											"                            console.log(\"headers.x_ais_userName : \" + jsonParseRequestObject.headers[header_x_ais_username] + \" = \" + x_ais_userName);\r",
											"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
											"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
											"\r",
											"                            pm.expect(jsonParseRequestObject.url).to.eql(url);\r",
											"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_username]).to.eql(x_ais_userName);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
											"\r",
											"                            console.log(\"resquest.body.Username : \" + jsonParseRequestObject.body.Username + \" = \" + Username);\r",
											"                            console.log(\"resquest.body.Password : \" + jsonParseRequestObject.body.Password + \" = \" + Password);\r",
											"\r",
											"                            pm.expect(jsonParseRequestObject.body.Username).to.eql(Username);\r",
											"                            pm.expect(jsonParseRequestObject.body.Password).to.eql(Password);\r",
											"\r",
											"                            // check responseObject\r",
											"                            // \"responseObject\":\"{\\\"OperationStatus\\\":{\\\"Code\\\":\\\"20000\\\",\\\"Description\\\":\\\"SignInProcess is Success\\\"},\\\"TokenType\\\":\\\"Bearer\\\",\\\"AccessToken\\\":\\\"Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAEEwemyfiMnI8Lw+aKSIaN42m4QbuzpURtw3oHSFyFWX0IlAkkY2KW0\\\",\\\"ExpiresIn\\\":20,\\\"ExpiresDate\\\":\\\"2021-03-24T14:21:49.3194415+07:00\\\",\\\"AccountId\\\":[],\\\"UserRole\\\":[\\\"RootAdmin\\\"]}\",\"activityLog\":{\"startTime\":\"2021-03-24T14:01:49.316645+07:00\",\"endTime\":\"2021-03-24T14:01:49.3211605+07:00\",\"processTime\":4.5155}}\r",
											"\r",
											"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
											"                            // console.log('jsonParseResponseObject',jsonParseResponseObject);\r",
											"\r",
											"                            console.log(\"response.AccessToken : \" + resultDataLog.AccessToken + \" = \" + AccessToken);\r",
											"                            console.log(\"response.TokenType : \" + resultDataLog.TokenType + \" = \" + TokenType);\r",
											"\r",
											"                            pm.expect(jsonParseResponseObject.AccessToken).to.eql(AccessToken);\r",
											"                            pm.expect(jsonParseResponseObject.TokenType).to.eql(TokenType);\r",
											"\r",
											"                            console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeSuccess);\r",
											"                            console.log(\"response.OperationStatus.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionSuccessSignIn);\r",
											"\r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeSuccess);\r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionSuccessSignIn);\r",
											"                        }\r",
											"                    });\r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"setTimeout(function () {SearchLogFindTid();}, 6000);\r",
											"setTimeout(function () {CheckLog();}, 15000);\r",
											"\r",
											"setTimeout(function () {\r",
											"pm.environment.unset(\"current_timestamp\");\r",
											"pm.environment.unset(\"TokenType\");\r",
											"pm.environment.unset(\"AccessToken\");\r",
											"pm.environment.unset(\"tid\");\r",
											"}, 90000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-ais-UserName",
										"type": "text",
										"value": "{{x_ais_UserName_AisPartner}}"
									},
									{
										"key": "x-ais-OrderRef",
										"value": "{{x_ais_OrderRef_Signin}}{{current_timestamp}}"
									},
									{
										"key": "x-ais-OrderDesc",
										"type": "text",
										"value": "{{x_ais_OrderDesc_UserAuthentication}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Username\": \"{{Username_Customer}}\",\r\n    \"Password\": \"{{Password_Customer}}\"\r\n}"
								},
								"url": {
									"raw": "{{url}}{{provisioningapis}}/api/v1/auth/signin",
									"host": [
										"{{url}}{{provisioningapis}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"signin"
									]
								},
								"description": "Type:Desire"
							},
							"response": []
						},
						{
							"name": "Signin_TST_F1_0_2_002_Error_PasswordMissing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"//------------------------------------------------------------//\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"Signinfail_\"\r",
											"var x_ais_OrderRef_Signin_fail = pm.globals.get(\"x_ais_OrderRef_Signin_fail\");\r",
											"//------------------------------------------------------------//\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//------------------------------------------------------------//\r",
											"//get global variable to statusCode 403\r",
											"var statusCodeForbidden = pm.globals.get(\"statusCodeForbidden\");\r",
											"//get global variable to resultCode \"40300\"\r",
											"var resultCodeForbiddenMissingOrInvalidParameter = pm.globals.get(\"resultCodeForbiddenMissingOrInvalidParameter\");\r",
											"//get global variable to resultDescription \"The Password missing or invalid\"\r",
											"var resultDescriptionThePasswordMissingOrInvalid = pm.globals.get(\"resultDescriptionThePasswordMissingOrInvalid\");\r",
											"//------------------------------------------------------------//\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Signin : Status code is \" + statusCodeForbidden, function () {\r",
											"    pm.response.to.have.status(statusCodeForbidden);\r",
											"});\r",
											"\r",
											"pm.test('Signin : operationStatus code is '+'\"'+ resultCodeForbiddenMissingOrInvalidParameter +'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeForbiddenMissingOrInvalidParameter);\r",
											"});\r",
											"\r",
											"pm.test('Signin : operationStatus Description is '+'\"'+ resultDescriptionThePasswordMissingOrInvalid+'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionThePasswordMissingOrInvalid);\r",
											"});\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"//---------------- LogDefaultValue --------------//\r",
											"//set variable to LogDefaultValue JSON.parse\r",
											"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
											"// console.log('LogDefaultValue',LogDefaultValue);\r",
											"//---------------- set globals Other --------------//\r",
											"var SearchLog = LogDefaultValue.SearchLog;\r",
											"// console.log('SearchLog',SearchLog);\r",
											"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
											"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
											"var kbn_version = SearchLog.header.kbn_version;\r",
											"var authorization = SearchLog.header.Authorization;\r",
											"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
											"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
											"var namespace = LogDefaultValue.Other.namespace;\r",
											"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
											"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
											"var header_x_ais_username = LogDefaultValue.Other.header_x_ais_username;\r",
											"var methodPost = LogDefaultValue.Other.methodPost;\r",
											"\r",
											"// Detail\r",
											"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
											"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
											"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
											"\r",
											"// Summary\r",
											"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
											"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
											"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
											"\r",
											"// ProvisioningAPIs [Signin]\r",
											"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
											"var cmdName = LogDefaultValue.Provisioning.Signin.cmdNameSigninError;\r",
											"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
											"var containerId = LogDefaultValue.Provisioning.containerId;\r",
											"var requestObjectUrlStaging = LogDefaultValue.Provisioning.Signin.requestObjectUrlSigninStaging;\r",
											"\r",
											"// Check CDR (Summary Log) and EDR (Detail Log)\r",
											"SearchLogFindTid = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSearchLogFindTid = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = x_ais_OrderRef_Signin_fail + current_timestamp;\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestSearchLogFindTid = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"\r",
											"        let optionsSearchLogFindTid = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptSearchLogFindTid,\r",
											"            body: httpRequestSearchLogFindTid\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsSearchLogFindTid);\r",
											"        let jsonDataSearchLogFindTid = await response.json();\r",
											"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
											"\r",
											"        // //200\r",
											"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"\r",
											"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
											"        console.log('hits',hits)\r",
											"  \r",
											"        // find tid\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            // let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"        \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            if(applicationNameValue == applicationName){\r",
											"                let tid = hits[i]._source.cauldron.tid;\r",
											"                pm.environment.set(\"tid\", tid);\r",
											"                break;\r",
											"           }\r",
											"        }\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"CheckLog = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCheckLog = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = pm.environment.get(\"tid\");\r",
											"\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestCheckLog = {\r",
											"            mode: 'raw',\r",
											"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"        let optionsCheckLog = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptCheckLog,\r",
											"            body: httpRequestCheckLog\r",
											"        }; \r",
											"        let response = await reqPromise(optionsCheckLog);\r",
											"        let jsonDataCheckLog = await response.json();\r",
											"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
											"        \r",
											"        // //200\r",
											"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });     \r",
											"        \r",
											"        let hits = jsonDataCheckLog.hits.hits\r",
											"        console.log('hits',hits)\r",
											"  \r",
											"        // find logType\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            //  let logType = hits[i]._source.cauldron.logType\r",
											"            let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"           \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            \r",
											"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
											"            // console.log('resultDataLog',resultDataLog)\r",
											"\r",
											"            let tidControl = x_ais_OrderRef_Signin_fail + current_timestamp;\r",
											"            // console.log(tidControl);\r",
											"            if(applicationNameValue == applicationName){\r",
											"                 \r",
											"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ProvisioningAPIs\r",
											"                    pm.test(\"Check Summary Log : Signin\" , function () {\r",
											"                        console.log(\"======== Check Summary Log ( Expected = Actual) [Signin] ==================\");\r",
											"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
											"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
											"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeForbiddenMissingOrInvalidParameter);\r",
											"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionThePasswordMissingOrInvalid);\r",
											"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
											"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
											"                        console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
											"                        \r",
											"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp);\r",
											"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName);\r",
											"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeForbiddenMissingOrInvalidParameter);\r",
											"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionThePasswordMissingOrInvalid);\r",
											"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp);\r",
											"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary);\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace);\r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName);\r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId);\r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
											"                        pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
											"                    }); \r",
											"                }\r",
											"\r",
											"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ProvisioningAPIs\r",
											"\r",
											"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
											"                    // console.log('endPointNameValue ',endPointNameValue)\r",
											"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [Signin]\" , function () {\r",
											"                        console.log(\"======== Check Detail Log ( Expected = Actual) [Signin] ==================\");\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
											"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
											"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
											"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
											"\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail);\r",
											"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail);\r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace);\r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName);\r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId);\r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime);\r",
											"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail);\r",
											"\r",
											"                        if( endPointNameValue == endPointNameProvisioningAPIs){     //\"endPointName\":\"ProvisioningAPIs\"\r",
											"                            console.log(\"custom1.endPointName : \" + resultDataLog.custom1.endPointName + \" = \" + endPointNameProvisioningAPIs);\r",
											"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs); \r",
											"                        \r",
											"                            // check requestObject\r",
											"                            // \"requestObject\":\"{ \\\"url\\\":\\\"mg-staging.sandais.com/api/v1/auth/signin\\\",\\\"method\\\":\\\"POST\\\",\\\"headers\\\":{\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"Signinfail_202103241503916\\\",\\\"x-ais-orderdesc\\\":\\\"User Authentication\\\"},\\\"body\\\":{\\\"username\\\":\\\"MintQA_Test\\\",\\\"password\\\":\\\"bWludHRlc3QwMDE=22\\\"}}\"\r",
											"                            \r",
											"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
											"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
											"                            let url = urlCheckLog + requestObjectUrlStaging;\r",
											"                            let x_ais_orderref = x_ais_OrderRef_Signin_fail + current_timestamp;\r",
											"                            let x_ais_orderdesc = x_ais_OrderDesc_UserAuthentication;\r",
											"                            let x_ais_userName = x_ais_UserName_AisPartner;\r",
											"                            \r",
											"                            var Username = pm.environment.get(\"Value_Signin_TST_F1_0_2_002_Username\");\r",
											"                            var Password = pm.environment.get(\"Value_Signin_TST_F1_0_2_002_Password\"); \r",
											"\r",
											"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
											"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
											"                            console.log(\"headers.x_ais_userName : \" + jsonParseRequestObject.headers[header_x_ais_username] + \" = \" + x_ais_userName);\r",
											"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
											"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
											"\r",
											"                            pm.expect(jsonParseRequestObject.url).to.eql(url);\r",
											"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_username]).to.eql(x_ais_userName);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
											"\r",
											"                            console.log(\"resquest.body.Username : \" + jsonParseRequestObject.body.Username + \" = \" + Username);\r",
											"                            console.log(\"resquest.body.Password : \" + jsonParseRequestObject.body.Password + \" = \" + Password);\r",
											"\r",
											"                            pm.expect(jsonParseRequestObject.body.Username).to.eql(Username);\r",
											"                            pm.expect(jsonParseRequestObject.body.Password).to.eql(Password);\r",
											"                            \r",
											"                            // check responseObject\r",
											"                            // \"responseObject\":\"{\\\"OperationStatus\\\":{\\\"Code\\\":\\\"40300\\\",\\\"Description\\\":\\\"The Password missing or invalid\\\"}}\",\r",
											"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
											"                            // console.log('jsonParseResponseObject',jsonParseResponseObject);  \r",
											"\r",
											"                            console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeForbiddenMissingOrInvalidParameter);\r",
											"                            console.log(\"response.OperationStatus.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionThePasswordMissingOrInvalid);\r",
											"\r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeForbiddenMissingOrInvalidParameter);  \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionThePasswordMissingOrInvalid);  \r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"setTimeout(function () {SearchLogFindTid();}, 120000);\r",
											"setTimeout(function () {CheckLog();}, 120000);\r",
											"\r",
											"setTimeout(function(){\r",
											"pm.environment.unset(\"current_timestamp\");\r",
											"pm.environment.unset(\"tid\");\r",
											"pm.environment.unset(\"Value_Signin_TST_F1_0_2_002_Username\");\r",
											"pm.environment.unset(\"Value_Signin_TST_F1_0_2_002_Password\");\r",
											"\r",
											"\r",
											"\r",
											"}, 120000);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"pm.environment.set(\"Value_Signin_TST_F1_0_2_002_Username\",fieldDataValue.Provisioning.Signin.Value_Signin_TST_F1_0_2_002_Username)\r",
											"pm.environment.set(\"Value_Signin_TST_F1_0_2_002_Password\",fieldDataValue.Provisioning.Signin.Value_Signin_TST_F1_0_2_002_Password)\r",
											"\r",
											"//format YYYYMMDDHHMMSSS\r",
											"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
											"// console.log('currentTmestamp',currentTmestamp);\r",
											"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- statusCodeList --------------//\r",
											"//set variable to statusCodeList JSON.parse\r",
											"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
											"//set global variable to statusCode 403\r",
											"pm.globals.set(\"statusCodeForbidden\", statusCodeList.statusCodeForbidden);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- resultCodeList --------------//\r",
											"//set variable to resultCodeList JSON.parse\r",
											"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
											"//set global variable to resultCode \"20000\"\r",
											"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
											"//set global variable to resultCode \"20100\"\r",
											"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
											"//set global variable to resultCode \"40300\"\r",
											"pm.globals.set(\"resultCodeForbiddenMissingOrInvalidParameter\", resultCodeList.resultCodeForbiddenMissingOrInvalidParameter);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- resultDescriptionErrorList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
											"//set global variable to resultDescription \"The Password missing or invalid\"\r",
											"pm.globals.set(\"resultDescriptionThePasswordMissingOrInvalid\", resultDescriptionErrorList.resultDescriptionThePasswordMissingOrInvalid);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- HeaderList --------------//\r",
											"//set variable to HeaderList JSON.parse\r",
											"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
											"//---------------- set globals Other --------------//\r",
											"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
											"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
											"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
											"//set global variable to kbn-versio \"7.5.1\"\r",
											"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Signin_ --------------//\r",
											"//set global variable to x_ais_OrderRef \"Signinfail_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_Signin_fail\", HeaderList.Signin.x_ais_OrderRef_Signin_fail);\r",
											"//------------------------------------------------------------//\r",
											" \r",
											"setTimeout(async function(){}, 3000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-ais-UserName",
										"type": "text",
										"value": "{{x_ais_UserName_AisPartner}}"
									},
									{
										"key": "x-ais-OrderRef",
										"value": "{{x_ais_OrderRef_Signin_fail}}{{current_timestamp}}"
									},
									{
										"key": "x-ais-OrderDesc",
										"type": "text",
										"value": "{{x_ais_OrderDesc_UserAuthentication}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Username\": \"{{Value_Signin_TST_F1_0_2_002_Username}}\",\r\n    \"Password\": \"{{Value_Signin_TST_F1_0_2_002_Password}}\"\r\n}"
								},
								"url": {
									"raw": "{{url}}{{provisioningapis}}/api/v1/auth/signin",
									"host": [
										"{{url}}{{provisioningapis}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"signin"
									]
								},
								"description": "Type:Desire"
							},
							"response": []
						}
					]
				},
				{
					"name": "ValidateToken",
					"item": [
						{
							"name": "ValidateToken_TST_F63_1_1_001_Success_RootAdmin",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var Username = pm.environment.get(\"Username\");\r",
											"var Password = pm.environment.get(\"Password\");\r",
											"\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"//format YYYYMMDDHHMMSSS\r",
											"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
											"// console.log('currentTmestamp',currentTmestamp);\r",
											"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- statusCodeList --------------//\r",
											"//set variable to statusCodeList JSON.parse\r",
											"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
											"//set global variable to statusCode 200\r",
											"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- resultCodeList --------------//\r",
											"//set variable to resultCodeList JSON.parse\r",
											"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
											"//set global variable to resultCode \"20000\"\r",
											"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- resultDescriptionSuccessList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
											"//set global variable to resultDescription \"SignInProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
											"//set global variable to resultDescription \"ValidateTokenProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionValidateToken\", resultDescriptionSuccessList.resultDescriptionValidateToken);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- HeaderList --------------//\r",
											"//set variable to HeaderList JSON.parse\r",
											"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
											"//---------------- set globals Other --------------//\r",
											"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
											"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
											"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
											"//set global variable to kbn-versio \"7.5.1\"\r",
											"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Signin_ --------------//\r",
											"//set global variable to x_ais_OrderRef \"Signin_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
											"//set global variable to x_ais_OrderRef \"ValidateToken\"\r",
											"pm.globals.set(\"x_ais_OrderRef_ValidateToken\", HeaderList.Signin.x_ais_OrderRef_ValidateToken);\r",
											"//set global variable to x_ais_OrderDesc \"ValidateToken\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_ValidateToken\", HeaderList.Signin.x_ais_OrderDesc_ValidateToken);\r",
											"//------------------------------------------------------------//\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultDescription \"SignInProcess is Success\"\r",
											"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- urlRouteList --------------//\r",
											"//set variable to urlRouteList JSON.parse\r",
											"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
											"//---------------- set url Create --------------//\r",
											"//set global variable to url \"/api/v1/auth/signin\"\r",
											"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
											"//---------------- get url Create --------------//\r",
											"//get global variable to url \"/api/v1/auth/signin\"\r",
											"var urlSignin = pm.globals.get(\"urlSignin\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"Signin_\"\r",
											"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"// Signin get token\r",
											" Signin = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username,\r",
											"                password:Password\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"  \r",
											"Signin();\r",
											"setTimeout(async function(){}, 3000);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"//------------------------------------------------------------//\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"ValidateToken_\"\r",
											"var x_ais_OrderRef_ValidateToken = pm.globals.get(\"x_ais_OrderRef_ValidateToken\");\r",
											"//get global variable to x_ais_OrderDesc \"ValidateToken\"\r",
											"var x_ais_OrderDesc_ValidateToken = pm.globals.get(\"x_ais_OrderDesc_ValidateToken\");\r",
											"//------------------------------------------------------------//\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//------------------------------------------------------------//\r",
											"//get global variable to resultDescription \"ValidateTokenProcess is Success\"\r",
											"var resultDescriptionValidateToken = pm.globals.get(\"resultDescriptionValidateToken\");\r",
											"//------------------------------------------------------------//\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"ValidateToken : Status code is \" + statusCodeSuccess, function () {\r",
											"    pm.response.to.have.status(statusCodeSuccess);\r",
											"});\r",
											"\r",
											"pm.test('ValidateToken : operationStatus code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeSuccess);\r",
											"});\r",
											"\r",
											"pm.test('ValidateToken : operationStatus description is '+'\"'+ resultDescriptionValidateToken+'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionValidateToken);\r",
											"});\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"//---------------- LogDefaultValue --------------//\r",
											"//set variable to LogDefaultValue JSON.parse\r",
											"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
											"// console.log('LogDefaultValue',LogDefaultValue);\r",
											"//---------------- set globals Other --------------//\r",
											"var SearchLog = LogDefaultValue.SearchLog;\r",
											"// console.log('SearchLog',SearchLog);\r",
											"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
											"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
											"var kbn_version = SearchLog.header.kbn_version;\r",
											"var authorization = SearchLog.header.Authorization;\r",
											"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
											"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
											"var namespace = LogDefaultValue.Other.namespace;\r",
											"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
											"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
											"var header_x_ais_username = LogDefaultValue.Other.header_x_ais_username;\r",
											"var methodPost = LogDefaultValue.Other.methodPost;\r",
											"\r",
											"// Detail\r",
											"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
											"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
											"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
											"\r",
											"// Summary\r",
											"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
											"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
											"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
											"\r",
											"// ProvisioningAPIs [ValidateToken]\r",
											"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
											"var cmdName = LogDefaultValue.Provisioning.Signin.cmdNameValidateToken1;\r",
											"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
											"var containerId = LogDefaultValue.Provisioning.containerId;\r",
											"var requestObjectUrlStaging = LogDefaultValue.Provisioning.Signin.requestObjectUrlValidateTokenMgStaging;\r",
											"\r",
											"// Check CDR (Summary Log) and EDR (Detail Log)\r",
											"SearchLogFindTid = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSearchLogFindTid = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = x_ais_OrderRef_ValidateToken + current_timestamp;\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestSearchLogFindTid = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"\r",
											"        let optionsSearchLogFindTid = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptSearchLogFindTid,\r",
											"            body: httpRequestSearchLogFindTid\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsSearchLogFindTid);\r",
											"        let jsonDataSearchLogFindTid = await response.json();\r",
											"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
											"\r",
											"        // //200\r",
											"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"\r",
											"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
											"        console.log('hits',hits)\r",
											"  \r",
											"        // find tid\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            // let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"        \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            if(applicationNameValue == applicationName){\r",
											"                let tid = hits[i]._source.cauldron.tid;\r",
											"                pm.environment.set(\"tid\", tid);\r",
											"                break;\r",
											"           }\r",
											"        }\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"CheckLog = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCheckLog = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = pm.environment.get(\"tid\");\r",
											"\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestCheckLog = {\r",
											"            mode: 'raw',\r",
											"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"        let optionsCheckLog = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptCheckLog,\r",
											"            body: httpRequestCheckLog\r",
											"        }; \r",
											"        let response = await reqPromise(optionsCheckLog);\r",
											"        let jsonDataCheckLog = await response.json();\r",
											"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
											"        \r",
											"        // //200\r",
											"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });     \r",
											"        \r",
											"        let hits = jsonDataCheckLog.hits.hits\r",
											"        console.log('hits',hits)\r",
											"  \r",
											"        // find logType\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            //  let logType = hits[i]._source.cauldron.logType\r",
											"            let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"           \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            \r",
											"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
											"            // console.log('resultDataLog',resultDataLog)\r",
											"\r",
											"            let tidControl = x_ais_OrderRef_ValidateToken + current_timestamp;\r",
											"            // console.log(tidControl);\r",
											"            if(applicationNameValue == applicationName){\r",
											"                 \r",
											"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ProvisioningAPIs\r",
											"                    pm.test(\"Check Summary Log : ValidateToken\" , function () {\r",
											"                        console.log(\"======== Check Summary Log ( Expected = Actual) [ValidateToken] ==================\");\r",
											"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
											"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
											"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeSuccess);\r",
											"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionValidateToken);\r",
											"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
											"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
											"                        // console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
											"                        \r",
											"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp);\r",
											"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName);\r",
											"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeSuccess);\r",
											"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionValidateToken);\r",
											"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp);\r",
											"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary);\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace);\r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName);\r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId);\r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
											"                        // pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
											"\r",
											"                        // check custom\r",
											"                        // \\\"custom\\\":{ \\\"endPointSummary\\\":[ { \\\"no\\\":\\\"1\\\", \\\"endPointName\\\":\\\"db.AuthenticationCollection\\\", \\\"responseStatus\\\":\\\"Success:InquiryAuthentication was successfully.\\\", \\\"processTime\\\":1.9453 } ] }\r",
											"                        let custom = resultDataLog.custom.endPointSummary;\r",
											"                        let countCustom = custom.length;\r",
											"\r",
											"                        // [\"db.AuthenticationCollection\"]\r",
											"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_ValidateToken;\r",
											"                        // [\"Success:InquiryAuthentication was successfully.\"]\r",
											"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_ValidateToken;\r",
											"                        let countCustomStep = dataEndPointName.length;\r",
											"\r",
											"                        console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep);\r",
											"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
											"\r",
											"                        for(let i=0;i<countCustomStep;i++){\r",
											"                            let no = custom[i].no;\r",
											"                            let valueEndPointName = custom[i].endPointName;\r",
											"                            let valueResponseStatus = custom[i].responseStatus;\r",
											"                            // console.log(\"i\",i);\r",
											"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
											"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
											"\r",
											"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString());\r",
											"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i]);\r",
											"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i]);\r",
											" \r",
											"                            pm.expect(no).to.eql((i+1).toString()); \r",
											"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
											"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]); \r",
											"                        }\r",
											"                    }); \r",
											"                }\r",
											"\r",
											"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ProvisioningAPIs\r",
											"\r",
											"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
											"                    // console.log('endPointNameValue ',endPointNameValue)\r",
											"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [ValidateToken]\", function () {\r",
											"                        console.log(\"======== Check Detail Log ( Expected = Actual) [ValidateToken] ==================\");\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
											"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
											"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
											"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
											"\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail);\r",
											"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail);\r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace);\r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName);\r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId);\r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime);\r",
											"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail);\r",
											"\r",
											"                        if( endPointNameValue == endPointNameProvisioningAPIs){     //\"endPointName\":\"ProvisioningAPIs\"\r",
											"                            console.log(\"custom1.endPointName : \" + resultDataLog.custom1.endPointName + \" = \" + endPointNameProvisioningAPIs);\r",
											"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs); \r",
											"                        \r",
											"                            // check requestObject\r",
											"                            // \"requestObject\":\"{\\\"url\\\":\\\"mg-staging.sandais.com/api/v1/auth/ValidateToken\\\",\\\"method\\\":\\\"POST\\\",\\\"headers\\\":{\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"ValidateToken_202104011804052\\\",\\\"x-ais-orderdesc\\\":\\\"ValidateToken\\\"},\\\"body\\\":{\\\"AccessToken\\\":\\\"Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAEQMhh6LW/NHMQoOWAkESyOfoL8+mbCSyRGJW8SXArxaUIlAkkY2KW0\\\"}}\"\r",
											"\r",
											"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
											"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
											"                            let url = urlCheckLog + requestObjectUrlStaging; \r",
											"                            let x_ais_orderref = x_ais_OrderRef_ValidateToken + current_timestamp;\r",
											"                            let x_ais_orderdesc = x_ais_OrderDesc_ValidateToken;\r",
											"                            let x_ais_userName = x_ais_UserName_AisPartner;\r",
											"\r",
											"                            let AccessToken = pm.environment.get(\"AccessToken\");\r",
											"                        \r",
											"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
											"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
											"                            console.log(\"headers.x_ais_userName : \" + jsonParseRequestObject.headers[header_x_ais_username] + \" = \" + x_ais_userName);\r",
											"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
											"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
											"\r",
											"                            pm.expect(jsonParseRequestObject.url).to.eql(url);\r",
											"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_username]).to.eql(x_ais_userName);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
											"\r",
											"                            console.log(\"resquest.body.AccessToken : \" + jsonParseRequestObject.body.AccessToken + \" = \" + AccessToken);\r",
											"                            pm.expect(jsonParseRequestObject.body.AccessToken).to.eql(AccessToken);\r",
											"                            \r",
											"                            // check responseObject\r",
											"                            // \"responseobject\":\"{\\\"operationstatus\\\":{\\\"code\\\":\\\"20000\\\",\\\"description\\\":\\\"validatetokenprocess is success\\\"}}\"\r",
											"\r",
											"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
											"                            // console.log('jsonParseResponseObject',jsonParseResponseObject);\r",
											"\r",
											"                            console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeSuccess);\r",
											"                            console.log(\"response.OperationStatus.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionValidateToken);\r",
											"\r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeSuccess); \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionValidateToken);  \r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"setTimeout(function () {SearchLogFindTid();}, 6000);\r",
											"setTimeout(function () {CheckLog();}, 20000);\r",
											"\r",
											"setTimeout(function(){\r",
											"pm.environment.unset(\"current_timestamp\");\r",
											"pm.environment.unset(\"AccessToken\");\r",
											"pm.environment.unset(\"tid\");\r",
											"}, 25000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-ais-UserName",
										"value": "{{x_ais_UserName_AisPartner}}",
										"type": "text"
									},
									{
										"key": "x-ais-OrderRef",
										"value": "{{x_ais_OrderRef_ValidateToken}}{{current_timestamp}}"
									},
									{
										"key": "x-ais-OrderDesc",
										"value": "{{x_ais_OrderDesc_ValidateToken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"AccessToken\": \"{{AccessToken}}\"\r\n}"
								},
								"url": {
									"raw": "{{url}}{{provisioningapis}}/api/v1/auth/ValidateToken",
									"host": [
										"{{url}}{{provisioningapis}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"ValidateToken"
									]
								},
								"description": "Type:Desire"
							},
							"response": []
						},
						{
							"name": "ValidateToken_TST_F63_1_1_002_Success_SupplierAdmin",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var Username = pm.environment.get(\"Username_SupplierAdmin\");\r",
											"var Password = pm.environment.get(\"Password_SupplierAdmin\");\r",
											"\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"//format YYYYMMDDHHMMSSS\r",
											"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
											"// console.log('currentTmestamp',currentTmestamp);\r",
											"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- statusCodeList --------------//\r",
											"//set variable to statusCodeList JSON.parse\r",
											"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
											"//set global variable to statusCode 200\r",
											"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- resultCodeList --------------//\r",
											"//set variable to resultCodeList JSON.parse\r",
											"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
											"//set global variable to resultCode \"20000\"\r",
											"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- resultDescriptionSuccessList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
											"//set global variable to resultDescription \"SignInProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
											"//set global variable to resultDescription \"ValidateTokenProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionValidateToken\", resultDescriptionSuccessList.resultDescriptionValidateToken);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- HeaderList --------------//\r",
											"//set variable to HeaderList JSON.parse\r",
											"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
											"//---------------- set globals Other --------------//\r",
											"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
											"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
											"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
											"//set global variable to kbn-versio \"7.5.1\"\r",
											"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Signin_ --------------//\r",
											"//set global variable to x_ais_OrderRef \"Signin_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
											"//set global variable to x_ais_OrderRef \"ValidateToken\"\r",
											"pm.globals.set(\"x_ais_OrderRef_ValidateToken\", HeaderList.Signin.x_ais_OrderRef_ValidateToken);\r",
											"//set global variable to x_ais_OrderDesc \"ValidateToken\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_ValidateToken\", HeaderList.Signin.x_ais_OrderDesc_ValidateToken);\r",
											"//------------------------------------------------------------//\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultDescription \"SignInProcess is Success\"\r",
											"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- urlRouteList --------------//\r",
											"//set variable to urlRouteList JSON.parse\r",
											"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
											"//---------------- set url Create --------------//\r",
											"//set global variable to url \"/api/v1/auth/signin\"\r",
											"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
											"//---------------- get url Create --------------//\r",
											"//get global variable to url \"/api/v1/auth/signin\"\r",
											"var urlSignin = pm.globals.get(\"urlSignin\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"Signin_\"\r",
											"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"// Signin get token\r",
											" Signin = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username,\r",
											"                password:Password\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"  \r",
											"Signin();\r",
											"setTimeout(async function(){}, 3000);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"//------------------------------------------------------------//\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"ValidateToken_\"\r",
											"var x_ais_OrderRef_ValidateToken = pm.globals.get(\"x_ais_OrderRef_ValidateToken\");\r",
											"//get global variable to x_ais_OrderDesc \"ValidateToken\"\r",
											"var x_ais_OrderDesc_ValidateToken = pm.globals.get(\"x_ais_OrderDesc_ValidateToken\");\r",
											"//------------------------------------------------------------//\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//------------------------------------------------------------//\r",
											"//get global variable to resultDescription \"ValidateTokenProcess is Success\"\r",
											"var resultDescriptionValidateToken = pm.globals.get(\"resultDescriptionValidateToken\");\r",
											"//------------------------------------------------------------//\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"ValidateToken : Status code is \" + statusCodeSuccess, function () {\r",
											"    pm.response.to.have.status(statusCodeSuccess);\r",
											"});\r",
											"\r",
											"pm.test('ValidateToken : operationStatus code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeSuccess);\r",
											"});\r",
											"\r",
											"pm.test('ValidateToken : operationStatus description is '+'\"'+ resultDescriptionValidateToken+'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionValidateToken);\r",
											"});\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"//---------------- LogDefaultValue --------------//\r",
											"//set variable to LogDefaultValue JSON.parse\r",
											"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
											"// console.log('LogDefaultValue',LogDefaultValue);\r",
											"//---------------- set globals Other --------------//\r",
											"var SearchLog = LogDefaultValue.SearchLog;\r",
											"// console.log('SearchLog',SearchLog);\r",
											"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
											"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
											"var kbn_version = SearchLog.header.kbn_version;\r",
											"var authorization = SearchLog.header.Authorization;\r",
											"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
											"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
											"var namespace = LogDefaultValue.Other.namespace;\r",
											"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
											"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
											"var header_x_ais_username = LogDefaultValue.Other.header_x_ais_username;\r",
											"var methodPost = LogDefaultValue.Other.methodPost;\r",
											"\r",
											"// Detail\r",
											"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
											"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
											"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
											"\r",
											"// Summary\r",
											"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
											"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
											"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
											"\r",
											"// ProvisioningAPIs [ValidateToken]\r",
											"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
											"var cmdName = LogDefaultValue.Provisioning.Signin.cmdNameValidateToken1;\r",
											"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
											"var containerId = LogDefaultValue.Provisioning.containerId;\r",
											"var requestObjectUrlStaging = LogDefaultValue.Provisioning.Signin.requestObjectUrlValidateTokenMgStaging;\r",
											"\r",
											"// Check CDR (Summary Log) and EDR (Detail Log)\r",
											"SearchLogFindTid = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSearchLogFindTid = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = x_ais_OrderRef_ValidateToken + current_timestamp;\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestSearchLogFindTid = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"\r",
											"        let optionsSearchLogFindTid = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptSearchLogFindTid,\r",
											"            body: httpRequestSearchLogFindTid\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsSearchLogFindTid);\r",
											"        let jsonDataSearchLogFindTid = await response.json();\r",
											"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
											"\r",
											"        // //200\r",
											"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"\r",
											"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
											"        console.log('hits',hits)\r",
											"  \r",
											"        // find tid\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            // let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"        \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            if(applicationNameValue == applicationName){\r",
											"                let tid = hits[i]._source.cauldron.tid;\r",
											"                pm.environment.set(\"tid\", tid);\r",
											"                break;\r",
											"           }\r",
											"        }\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"CheckLog = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCheckLog = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = pm.environment.get(\"tid\");\r",
											"\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestCheckLog = {\r",
											"            mode: 'raw',\r",
											"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"        let optionsCheckLog = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptCheckLog,\r",
											"            body: httpRequestCheckLog\r",
											"        }; \r",
											"        let response = await reqPromise(optionsCheckLog);\r",
											"        let jsonDataCheckLog = await response.json();\r",
											"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
											"        \r",
											"        // //200\r",
											"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });     \r",
											"        \r",
											"        let hits = jsonDataCheckLog.hits.hits\r",
											"        console.log('hits',hits)\r",
											"  \r",
											"        // find logType\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            //  let logType = hits[i]._source.cauldron.logType\r",
											"            let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"           \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            \r",
											"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
											"            // console.log('resultDataLog',resultDataLog)\r",
											"\r",
											"            let tidControl = x_ais_OrderRef_ValidateToken + current_timestamp;\r",
											"            // console.log(tidControl);\r",
											"            if(applicationNameValue == applicationName){\r",
											"                 \r",
											"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ProvisioningAPIs\r",
											"                    pm.test(\"Check Summary Log : ValidateToken\" , function () {\r",
											"                        console.log(\"======== Check Summary Log ( Expected = Actual) [ValidateToken] ==================\");\r",
											"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
											"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
											"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeSuccess);\r",
											"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionValidateToken);\r",
											"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
											"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
											"                        // console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
											"                        \r",
											"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp);\r",
											"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName);\r",
											"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeSuccess);\r",
											"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionValidateToken);\r",
											"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp);\r",
											"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary);\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace);\r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName);\r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId);\r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
											"                        // pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
											"\r",
											"                        // check custom\r",
											"                        // \\\"custom\\\":{ \\\"endPointSummary\\\":[ { \\\"no\\\":\\\"1\\\", \\\"endPointName\\\":\\\"db.AuthenticationCollection\\\", \\\"responseStatus\\\":\\\"Success:InquiryAuthentication was successfully.\\\", \\\"processTime\\\":1.9453 } ] }\r",
											"                        let custom = resultDataLog.custom.endPointSummary;\r",
											"                        let countCustom = custom.length;\r",
											"\r",
											"                        // [\"db.AuthenticationCollection\"]\r",
											"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_ValidateToken;\r",
											"                        // [\"Success:InquiryAuthentication was successfully.\"]\r",
											"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_ValidateToken;\r",
											"                        let countCustomStep = dataEndPointName.length;\r",
											"\r",
											"                        console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep);\r",
											"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
											"\r",
											"                        for(let i=0;i<countCustomStep;i++){\r",
											"                            let no = custom[i].no;\r",
											"                            let valueEndPointName = custom[i].endPointName;\r",
											"                            let valueResponseStatus = custom[i].responseStatus;\r",
											"                            // console.log(\"i\",i);\r",
											"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
											"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
											"\r",
											"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString());\r",
											"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i]);\r",
											"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i]);\r",
											" \r",
											"                            pm.expect(no).to.eql((i+1).toString()); \r",
											"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
											"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]); \r",
											"                        }\r",
											"                    }); \r",
											"                }\r",
											"\r",
											"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ProvisioningAPIs\r",
											"\r",
											"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
											"                    // console.log('endPointNameValue ',endPointNameValue)\r",
											"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [ValidateToken]\", function () {\r",
											"                        console.log(\"======== Check Detail Log ( Expected = Actual) [ValidateToken] ==================\");\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
											"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
											"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
											"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
											"\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail);\r",
											"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail);\r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace);\r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName);\r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId);\r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime);\r",
											"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail);\r",
											"\r",
											"                        if( endPointNameValue == endPointNameProvisioningAPIs){     //\"endPointName\":\"ProvisioningAPIs\"\r",
											"                            console.log(\"custom1.endPointName : \" + resultDataLog.custom1.endPointName + \" = \" + endPointNameProvisioningAPIs);\r",
											"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs); \r",
											"                        \r",
											"                            // check requestObject\r",
											"                            // \"requestObject\":\"{\\\"url\\\":\\\"mg-staging.sandais.com/api/v1/auth/ValidateToken\\\",\\\"method\\\":\\\"POST\\\",\\\"headers\\\":{\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"ValidateToken_202104011804052\\\",\\\"x-ais-orderdesc\\\":\\\"ValidateToken\\\"},\\\"body\\\":{\\\"AccessToken\\\":\\\"Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAEQMhh6LW/NHMQoOWAkESyOfoL8+mbCSyRGJW8SXArxaUIlAkkY2KW0\\\"}}\"\r",
											"\r",
											"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
											"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
											"                            let url = urlCheckLog + requestObjectUrlStaging; \r",
											"                            let x_ais_orderref = x_ais_OrderRef_ValidateToken + current_timestamp;\r",
											"                            let x_ais_orderdesc = x_ais_OrderDesc_ValidateToken;\r",
											"                            let x_ais_userName = x_ais_UserName_AisPartner;\r",
											"\r",
											"                            let AccessToken = pm.environment.get(\"AccessToken\");\r",
											"                        \r",
											"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
											"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
											"                            console.log(\"headers.x_ais_userName : \" + jsonParseRequestObject.headers[header_x_ais_username] + \" = \" + x_ais_userName);\r",
											"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
											"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
											"\r",
											"                            pm.expect(jsonParseRequestObject.url).to.eql(url);\r",
											"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_username]).to.eql(x_ais_userName);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
											"\r",
											"                            console.log(\"resquest.body.AccessToken : \" + jsonParseRequestObject.body.AccessToken + \" = \" + AccessToken);\r",
											"                            pm.expect(jsonParseRequestObject.body.AccessToken).to.eql(AccessToken);\r",
											"                            \r",
											"                            // check responseObject\r",
											"                            // \"responseobject\":\"{\\\"operationstatus\\\":{\\\"code\\\":\\\"20000\\\",\\\"description\\\":\\\"validatetokenprocess is success\\\"}}\"\r",
											"\r",
											"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
											"                            // console.log('jsonParseResponseObject',jsonParseResponseObject);\r",
											"\r",
											"                            console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeSuccess);\r",
											"                            console.log(\"response.OperationStatus.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionValidateToken);\r",
											"\r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeSuccess); \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionValidateToken);  \r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"setTimeout(function () {SearchLogFindTid();}, 6000);\r",
											"setTimeout(function () {CheckLog();}, 20000);\r",
											"\r",
											"setTimeout(function(){\r",
											"pm.environment.unset(\"current_timestamp\");\r",
											"pm.environment.unset(\"AccessToken\");\r",
											"pm.environment.unset(\"tid\");\r",
											"}, 25000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-ais-UserName",
										"value": "{{x_ais_UserName_AisPartner}}",
										"type": "text"
									},
									{
										"key": "x-ais-OrderRef",
										"value": "{{x_ais_OrderRef_ValidateToken}}{{current_timestamp}}"
									},
									{
										"key": "x-ais-OrderDesc",
										"value": "{{x_ais_OrderDesc_ValidateToken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"AccessToken\": \"{{AccessToken}}\"\r\n}"
								},
								"url": {
									"raw": "{{url}}{{provisioningapis}}/api/v1/auth/ValidateToken",
									"host": [
										"{{url}}{{provisioningapis}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"ValidateToken"
									]
								},
								"description": "Type:Desire"
							},
							"response": []
						},
						{
							"name": "ValidateToken_TST_F63_1_1_003_Success_CustomerAdmin",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var Username = pm.environment.get(\"Username_CustomerAdmin\");\r",
											"var Password = pm.environment.get(\"Password_CustomerAdmin\");\r",
											"\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"//format YYYYMMDDHHMMSSS\r",
											"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
											"// console.log('currentTmestamp',currentTmestamp);\r",
											"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- statusCodeList --------------//\r",
											"//set variable to statusCodeList JSON.parse\r",
											"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
											"//set global variable to statusCode 200\r",
											"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- resultCodeList --------------//\r",
											"//set variable to resultCodeList JSON.parse\r",
											"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
											"//set global variable to resultCode \"20000\"\r",
											"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- resultDescriptionSuccessList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
											"//set global variable to resultDescription \"SignInProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
											"//set global variable to resultDescription \"ValidateTokenProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionValidateToken\", resultDescriptionSuccessList.resultDescriptionValidateToken);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- HeaderList --------------//\r",
											"//set variable to HeaderList JSON.parse\r",
											"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
											"//---------------- set globals Other --------------//\r",
											"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
											"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
											"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
											"//set global variable to kbn-versio \"7.5.1\"\r",
											"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Signin_ --------------//\r",
											"//set global variable to x_ais_OrderRef \"Signin_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
											"//set global variable to x_ais_OrderRef \"ValidateToken\"\r",
											"pm.globals.set(\"x_ais_OrderRef_ValidateToken\", HeaderList.Signin.x_ais_OrderRef_ValidateToken);\r",
											"//set global variable to x_ais_OrderDesc \"ValidateToken\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_ValidateToken\", HeaderList.Signin.x_ais_OrderDesc_ValidateToken);\r",
											"//------------------------------------------------------------//\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultDescription \"SignInProcess is Success\"\r",
											"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- urlRouteList --------------//\r",
											"//set variable to urlRouteList JSON.parse\r",
											"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
											"//---------------- set url Create --------------//\r",
											"//set global variable to url \"/api/v1/auth/signin\"\r",
											"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
											"//---------------- get url Create --------------//\r",
											"//get global variable to url \"/api/v1/auth/signin\"\r",
											"var urlSignin = pm.globals.get(\"urlSignin\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"Signin_\"\r",
											"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"// Signin get token\r",
											" Signin = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username,\r",
											"                password:Password\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"  \r",
											"Signin();\r",
											"setTimeout(async function(){}, 3000);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"//------------------------------------------------------------//\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"ValidateToken_\"\r",
											"var x_ais_OrderRef_ValidateToken = pm.globals.get(\"x_ais_OrderRef_ValidateToken\");\r",
											"//get global variable to x_ais_OrderDesc \"ValidateToken\"\r",
											"var x_ais_OrderDesc_ValidateToken = pm.globals.get(\"x_ais_OrderDesc_ValidateToken\");\r",
											"//------------------------------------------------------------//\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//------------------------------------------------------------//\r",
											"//get global variable to resultDescription \"ValidateTokenProcess is Success\"\r",
											"var resultDescriptionValidateToken = pm.globals.get(\"resultDescriptionValidateToken\");\r",
											"//------------------------------------------------------------//\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"ValidateToken : Status code is \" + statusCodeSuccess, function () {\r",
											"    pm.response.to.have.status(statusCodeSuccess);\r",
											"});\r",
											"\r",
											"pm.test('ValidateToken : operationStatus code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeSuccess);\r",
											"});\r",
											"\r",
											"pm.test('ValidateToken : operationStatus description is '+'\"'+ resultDescriptionValidateToken+'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionValidateToken);\r",
											"});\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"//---------------- LogDefaultValue --------------//\r",
											"//set variable to LogDefaultValue JSON.parse\r",
											"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
											"// console.log('LogDefaultValue',LogDefaultValue);\r",
											"//---------------- set globals Other --------------//\r",
											"var SearchLog = LogDefaultValue.SearchLog;\r",
											"// console.log('SearchLog',SearchLog);\r",
											"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
											"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
											"var kbn_version = SearchLog.header.kbn_version;\r",
											"var authorization = SearchLog.header.Authorization;\r",
											"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
											"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
											"var namespace = LogDefaultValue.Other.namespace;\r",
											"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
											"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
											"var header_x_ais_username = LogDefaultValue.Other.header_x_ais_username;\r",
											"var methodPost = LogDefaultValue.Other.methodPost;\r",
											"\r",
											"// Detail\r",
											"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
											"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
											"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
											"\r",
											"// Summary\r",
											"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
											"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
											"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
											"\r",
											"// ProvisioningAPIs [ValidateToken]\r",
											"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
											"var cmdName = LogDefaultValue.Provisioning.Signin.cmdNameValidateToken1;\r",
											"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
											"var containerId = LogDefaultValue.Provisioning.containerId;\r",
											"var requestObjectUrlStaging = LogDefaultValue.Provisioning.Signin.requestObjectUrlValidateTokenMgStaging;\r",
											"\r",
											"// Check CDR (Summary Log) and EDR (Detail Log)\r",
											"SearchLogFindTid = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSearchLogFindTid = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = x_ais_OrderRef_ValidateToken + current_timestamp;\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestSearchLogFindTid = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"\r",
											"        let optionsSearchLogFindTid = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptSearchLogFindTid,\r",
											"            body: httpRequestSearchLogFindTid\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsSearchLogFindTid);\r",
											"        let jsonDataSearchLogFindTid = await response.json();\r",
											"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
											"\r",
											"        // //200\r",
											"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"\r",
											"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
											"        console.log('hits',hits)\r",
											"  \r",
											"        // find tid\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            // let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"        \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            if(applicationNameValue == applicationName){\r",
											"                let tid = hits[i]._source.cauldron.tid;\r",
											"                pm.environment.set(\"tid\", tid);\r",
											"                break;\r",
											"           }\r",
											"        }\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"CheckLog = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCheckLog = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = pm.environment.get(\"tid\");\r",
											"\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestCheckLog = {\r",
											"            mode: 'raw',\r",
											"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"        let optionsCheckLog = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptCheckLog,\r",
											"            body: httpRequestCheckLog\r",
											"        }; \r",
											"        let response = await reqPromise(optionsCheckLog);\r",
											"        let jsonDataCheckLog = await response.json();\r",
											"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
											"        \r",
											"        // //200\r",
											"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });     \r",
											"        \r",
											"        let hits = jsonDataCheckLog.hits.hits\r",
											"        console.log('hits',hits)\r",
											"  \r",
											"        // find logType\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            //  let logType = hits[i]._source.cauldron.logType\r",
											"            let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"           \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            \r",
											"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
											"            // console.log('resultDataLog',resultDataLog)\r",
											"\r",
											"            let tidControl = x_ais_OrderRef_ValidateToken + current_timestamp;\r",
											"            // console.log(tidControl);\r",
											"            if(applicationNameValue == applicationName){\r",
											"                 \r",
											"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ProvisioningAPIs\r",
											"                    pm.test(\"Check Summary Log : ValidateToken\" , function () {\r",
											"                        console.log(\"======== Check Summary Log ( Expected = Actual) [ValidateToken] ==================\");\r",
											"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
											"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
											"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeSuccess);\r",
											"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionValidateToken);\r",
											"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
											"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
											"                        // console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
											"                        \r",
											"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp);\r",
											"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName);\r",
											"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeSuccess);\r",
											"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionValidateToken);\r",
											"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp);\r",
											"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary);\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace);\r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName);\r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId);\r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
											"                        // pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
											"\r",
											"                        // check custom\r",
											"                        // \\\"custom\\\":{ \\\"endPointSummary\\\":[ { \\\"no\\\":\\\"1\\\", \\\"endPointName\\\":\\\"db.AuthenticationCollection\\\", \\\"responseStatus\\\":\\\"Success:InquiryAuthentication was successfully.\\\", \\\"processTime\\\":1.9453 } ] }\r",
											"                        let custom = resultDataLog.custom.endPointSummary;\r",
											"                        let countCustom = custom.length;\r",
											"\r",
											"                        // [\"db.AuthenticationCollection\"]\r",
											"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_ValidateToken;\r",
											"                        // [\"Success:InquiryAuthentication was successfully.\"]\r",
											"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_ValidateToken;\r",
											"                        let countCustomStep = dataEndPointName.length;\r",
											"\r",
											"                        console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep);\r",
											"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
											"\r",
											"                        for(let i=0;i<countCustomStep;i++){\r",
											"                            let no = custom[i].no;\r",
											"                            let valueEndPointName = custom[i].endPointName;\r",
											"                            let valueResponseStatus = custom[i].responseStatus;\r",
											"                            // console.log(\"i\",i);\r",
											"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
											"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
											"\r",
											"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString());\r",
											"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i]);\r",
											"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i]);\r",
											" \r",
											"                            pm.expect(no).to.eql((i+1).toString()); \r",
											"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
											"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]); \r",
											"                        }\r",
											"                    }); \r",
											"                }\r",
											"\r",
											"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ProvisioningAPIs\r",
											"\r",
											"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
											"                    // console.log('endPointNameValue ',endPointNameValue)\r",
											"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [ValidateToken]\", function () {\r",
											"                        console.log(\"======== Check Detail Log ( Expected = Actual) [ValidateToken] ==================\");\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
											"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
											"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
											"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
											"\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail);\r",
											"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail);\r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace);\r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName);\r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId);\r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime);\r",
											"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail);\r",
											"\r",
											"                        if( endPointNameValue == endPointNameProvisioningAPIs){     //\"endPointName\":\"ProvisioningAPIs\"\r",
											"                            console.log(\"custom1.endPointName : \" + resultDataLog.custom1.endPointName + \" = \" + endPointNameProvisioningAPIs);\r",
											"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs); \r",
											"                        \r",
											"                            // check requestObject\r",
											"                            // \"requestObject\":\"{\\\"url\\\":\\\"mg-staging.sandais.com/api/v1/auth/ValidateToken\\\",\\\"method\\\":\\\"POST\\\",\\\"headers\\\":{\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"ValidateToken_202104011804052\\\",\\\"x-ais-orderdesc\\\":\\\"ValidateToken\\\"},\\\"body\\\":{\\\"AccessToken\\\":\\\"Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAEQMhh6LW/NHMQoOWAkESyOfoL8+mbCSyRGJW8SXArxaUIlAkkY2KW0\\\"}}\"\r",
											"\r",
											"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
											"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
											"                            let url = urlCheckLog + requestObjectUrlStaging; \r",
											"                            let x_ais_orderref = x_ais_OrderRef_ValidateToken + current_timestamp;\r",
											"                            let x_ais_orderdesc = x_ais_OrderDesc_ValidateToken;\r",
											"                            let x_ais_userName = x_ais_UserName_AisPartner;\r",
											"\r",
											"                            let AccessToken = pm.environment.get(\"AccessToken\");\r",
											"                        \r",
											"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
											"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
											"                            console.log(\"headers.x_ais_userName : \" + jsonParseRequestObject.headers[header_x_ais_username] + \" = \" + x_ais_userName);\r",
											"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
											"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
											"\r",
											"                            pm.expect(jsonParseRequestObject.url).to.eql(url);\r",
											"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_username]).to.eql(x_ais_userName);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
											"\r",
											"                            console.log(\"resquest.body.AccessToken : \" + jsonParseRequestObject.body.AccessToken + \" = \" + AccessToken);\r",
											"                            pm.expect(jsonParseRequestObject.body.AccessToken).to.eql(AccessToken);\r",
											"                            \r",
											"                            // check responseObject\r",
											"                            // \"responseobject\":\"{\\\"operationstatus\\\":{\\\"code\\\":\\\"20000\\\",\\\"description\\\":\\\"validatetokenprocess is success\\\"}}\"\r",
											"\r",
											"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
											"                            // console.log('jsonParseResponseObject',jsonParseResponseObject);\r",
											"\r",
											"                            console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeSuccess);\r",
											"                            console.log(\"response.OperationStatus.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionValidateToken);\r",
											"\r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeSuccess); \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionValidateToken);  \r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"setTimeout(function () {SearchLogFindTid();}, 6000);\r",
											"setTimeout(function () {CheckLog();}, 20000);\r",
											"\r",
											"setTimeout(function(){\r",
											"pm.environment.unset(\"current_timestamp\");\r",
											"pm.environment.unset(\"AccessToken\");\r",
											"pm.environment.unset(\"tid\");\r",
											"}, 25000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-ais-UserName",
										"value": "{{x_ais_UserName_AisPartner}}",
										"type": "text"
									},
									{
										"key": "x-ais-OrderRef",
										"value": "{{x_ais_OrderRef_ValidateToken}}{{current_timestamp}}"
									},
									{
										"key": "x-ais-OrderDesc",
										"value": "{{x_ais_OrderDesc_ValidateToken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"AccessToken\": \"{{AccessToken}}\"\r\n}"
								},
								"url": {
									"raw": "{{url}}{{provisioningapis}}/api/v1/auth/ValidateToken",
									"host": [
										"{{url}}{{provisioningapis}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"ValidateToken"
									]
								},
								"description": "Type:Desire"
							},
							"response": []
						},
						{
							"name": "ValidateToken_TST_F63_1_1_004_Success_Supplier",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var Username = pm.environment.get(\"Username_Supplier\");\r",
											"var Password = pm.environment.get(\"Password_Supplier\");\r",
											"\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"//format YYYYMMDDHHMMSSS\r",
											"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
											"// console.log('currentTmestamp',currentTmestamp);\r",
											"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- statusCodeList --------------//\r",
											"//set variable to statusCodeList JSON.parse\r",
											"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
											"//set global variable to statusCode 200\r",
											"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- resultCodeList --------------//\r",
											"//set variable to resultCodeList JSON.parse\r",
											"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
											"//set global variable to resultCode \"20000\"\r",
											"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- resultDescriptionSuccessList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
											"//set global variable to resultDescription \"SignInProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
											"//set global variable to resultDescription \"ValidateTokenProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionValidateToken\", resultDescriptionSuccessList.resultDescriptionValidateToken);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- HeaderList --------------//\r",
											"//set variable to HeaderList JSON.parse\r",
											"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
											"//---------------- set globals Other --------------//\r",
											"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
											"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
											"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
											"//set global variable to kbn-versio \"7.5.1\"\r",
											"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Signin_ --------------//\r",
											"//set global variable to x_ais_OrderRef \"Signin_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
											"//set global variable to x_ais_OrderRef \"ValidateToken\"\r",
											"pm.globals.set(\"x_ais_OrderRef_ValidateToken\", HeaderList.Signin.x_ais_OrderRef_ValidateToken);\r",
											"//set global variable to x_ais_OrderDesc \"ValidateToken\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_ValidateToken\", HeaderList.Signin.x_ais_OrderDesc_ValidateToken);\r",
											"//------------------------------------------------------------//\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultDescription \"SignInProcess is Success\"\r",
											"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- urlRouteList --------------//\r",
											"//set variable to urlRouteList JSON.parse\r",
											"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
											"//---------------- set url Create --------------//\r",
											"//set global variable to url \"/api/v1/auth/signin\"\r",
											"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
											"//---------------- get url Create --------------//\r",
											"//get global variable to url \"/api/v1/auth/signin\"\r",
											"var urlSignin = pm.globals.get(\"urlSignin\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"Signin_\"\r",
											"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"// Signin get token\r",
											" Signin = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username,\r",
											"                password:Password\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"  \r",
											"Signin();\r",
											"setTimeout(async function(){}, 3000);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"//------------------------------------------------------------//\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"ValidateToken_\"\r",
											"var x_ais_OrderRef_ValidateToken = pm.globals.get(\"x_ais_OrderRef_ValidateToken\");\r",
											"//get global variable to x_ais_OrderDesc \"ValidateToken\"\r",
											"var x_ais_OrderDesc_ValidateToken = pm.globals.get(\"x_ais_OrderDesc_ValidateToken\");\r",
											"//------------------------------------------------------------//\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//------------------------------------------------------------//\r",
											"//get global variable to resultDescription \"ValidateTokenProcess is Success\"\r",
											"var resultDescriptionValidateToken = pm.globals.get(\"resultDescriptionValidateToken\");\r",
											"//------------------------------------------------------------//\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"ValidateToken : Status code is \" + statusCodeSuccess, function () {\r",
											"    pm.response.to.have.status(statusCodeSuccess);\r",
											"});\r",
											"\r",
											"pm.test('ValidateToken : operationStatus code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeSuccess);\r",
											"});\r",
											"\r",
											"pm.test('ValidateToken : operationStatus description is '+'\"'+ resultDescriptionValidateToken+'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionValidateToken);\r",
											"});\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"//---------------- LogDefaultValue --------------//\r",
											"//set variable to LogDefaultValue JSON.parse\r",
											"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
											"// console.log('LogDefaultValue',LogDefaultValue);\r",
											"//---------------- set globals Other --------------//\r",
											"var SearchLog = LogDefaultValue.SearchLog;\r",
											"// console.log('SearchLog',SearchLog);\r",
											"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
											"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
											"var kbn_version = SearchLog.header.kbn_version;\r",
											"var authorization = SearchLog.header.Authorization;\r",
											"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
											"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
											"var namespace = LogDefaultValue.Other.namespace;\r",
											"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
											"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
											"var header_x_ais_username = LogDefaultValue.Other.header_x_ais_username;\r",
											"var methodPost = LogDefaultValue.Other.methodPost;\r",
											"\r",
											"// Detail\r",
											"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
											"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
											"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
											"\r",
											"// Summary\r",
											"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
											"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
											"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
											"\r",
											"// ProvisioningAPIs [ValidateToken]\r",
											"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
											"var cmdName = LogDefaultValue.Provisioning.Signin.cmdNameValidateToken1;\r",
											"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
											"var containerId = LogDefaultValue.Provisioning.containerId;\r",
											"var requestObjectUrlStaging = LogDefaultValue.Provisioning.Signin.requestObjectUrlValidateTokenMgStaging;\r",
											"\r",
											"// Check CDR (Summary Log) and EDR (Detail Log)\r",
											"SearchLogFindTid = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSearchLogFindTid = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = x_ais_OrderRef_ValidateToken + current_timestamp;\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestSearchLogFindTid = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"\r",
											"        let optionsSearchLogFindTid = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptSearchLogFindTid,\r",
											"            body: httpRequestSearchLogFindTid\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsSearchLogFindTid);\r",
											"        let jsonDataSearchLogFindTid = await response.json();\r",
											"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
											"\r",
											"        // //200\r",
											"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"\r",
											"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
											"        console.log('hits',hits)\r",
											"  \r",
											"        // find tid\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            // let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"        \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            if(applicationNameValue == applicationName){\r",
											"                let tid = hits[i]._source.cauldron.tid;\r",
											"                pm.environment.set(\"tid\", tid);\r",
											"                break;\r",
											"           }\r",
											"        }\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"CheckLog = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCheckLog = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = pm.environment.get(\"tid\");\r",
											"\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestCheckLog = {\r",
											"            mode: 'raw',\r",
											"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"        let optionsCheckLog = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptCheckLog,\r",
											"            body: httpRequestCheckLog\r",
											"        }; \r",
											"        let response = await reqPromise(optionsCheckLog);\r",
											"        let jsonDataCheckLog = await response.json();\r",
											"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
											"        \r",
											"        // //200\r",
											"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });     \r",
											"        \r",
											"        let hits = jsonDataCheckLog.hits.hits\r",
											"        console.log('hits',hits)\r",
											"  \r",
											"        // find logType\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            //  let logType = hits[i]._source.cauldron.logType\r",
											"            let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"           \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            \r",
											"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
											"            // console.log('resultDataLog',resultDataLog)\r",
											"\r",
											"            let tidControl = x_ais_OrderRef_ValidateToken + current_timestamp;\r",
											"            // console.log(tidControl);\r",
											"            if(applicationNameValue == applicationName){\r",
											"                 \r",
											"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ProvisioningAPIs\r",
											"                    pm.test(\"Check Summary Log : ValidateToken\" , function () {\r",
											"                        console.log(\"======== Check Summary Log ( Expected = Actual) [ValidateToken] ==================\");\r",
											"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
											"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
											"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeSuccess);\r",
											"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionValidateToken);\r",
											"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
											"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
											"                        // console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
											"                        \r",
											"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp);\r",
											"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName);\r",
											"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeSuccess);\r",
											"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionValidateToken);\r",
											"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp);\r",
											"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary);\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace);\r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName);\r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId);\r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
											"                        // pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
											"\r",
											"                        // check custom\r",
											"                        // \\\"custom\\\":{ \\\"endPointSummary\\\":[ { \\\"no\\\":\\\"1\\\", \\\"endPointName\\\":\\\"db.AuthenticationCollection\\\", \\\"responseStatus\\\":\\\"Success:InquiryAuthentication was successfully.\\\", \\\"processTime\\\":1.9453 } ] }\r",
											"                        let custom = resultDataLog.custom.endPointSummary;\r",
											"                        let countCustom = custom.length;\r",
											"\r",
											"                        // [\"db.AuthenticationCollection\"]\r",
											"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_ValidateToken;\r",
											"                        // [\"Success:InquiryAuthentication was successfully.\"]\r",
											"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_ValidateToken;\r",
											"                        let countCustomStep = dataEndPointName.length;\r",
											"\r",
											"                        console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep);\r",
											"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
											"\r",
											"                        for(let i=0;i<countCustomStep;i++){\r",
											"                            let no = custom[i].no;\r",
											"                            let valueEndPointName = custom[i].endPointName;\r",
											"                            let valueResponseStatus = custom[i].responseStatus;\r",
											"                            // console.log(\"i\",i);\r",
											"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
											"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
											"\r",
											"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString());\r",
											"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i]);\r",
											"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i]);\r",
											" \r",
											"                            pm.expect(no).to.eql((i+1).toString()); \r",
											"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
											"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]); \r",
											"                        }\r",
											"                    }); \r",
											"                }\r",
											"\r",
											"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ProvisioningAPIs\r",
											"\r",
											"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
											"                    // console.log('endPointNameValue ',endPointNameValue)\r",
											"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [ValidateToken]\", function () {\r",
											"                        console.log(\"======== Check Detail Log ( Expected = Actual) [ValidateToken] ==================\");\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
											"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
											"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
											"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
											"\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail);\r",
											"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail);\r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace);\r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName);\r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId);\r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime);\r",
											"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail);\r",
											"\r",
											"                        if( endPointNameValue == endPointNameProvisioningAPIs){     //\"endPointName\":\"ProvisioningAPIs\"\r",
											"                            console.log(\"custom1.endPointName : \" + resultDataLog.custom1.endPointName + \" = \" + endPointNameProvisioningAPIs);\r",
											"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs); \r",
											"                        \r",
											"                            // check requestObject\r",
											"                            // \"requestObject\":\"{\\\"url\\\":\\\"mg-staging.sandais.com/api/v1/auth/ValidateToken\\\",\\\"method\\\":\\\"POST\\\",\\\"headers\\\":{\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"ValidateToken_202104011804052\\\",\\\"x-ais-orderdesc\\\":\\\"ValidateToken\\\"},\\\"body\\\":{\\\"AccessToken\\\":\\\"Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAEQMhh6LW/NHMQoOWAkESyOfoL8+mbCSyRGJW8SXArxaUIlAkkY2KW0\\\"}}\"\r",
											"\r",
											"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
											"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
											"                            let url = urlCheckLog + requestObjectUrlStaging; \r",
											"                            let x_ais_orderref = x_ais_OrderRef_ValidateToken + current_timestamp;\r",
											"                            let x_ais_orderdesc = x_ais_OrderDesc_ValidateToken;\r",
											"                            let x_ais_userName = x_ais_UserName_AisPartner;\r",
											"\r",
											"                            let AccessToken = pm.environment.get(\"AccessToken\");\r",
											"                        \r",
											"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
											"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
											"                            console.log(\"headers.x_ais_userName : \" + jsonParseRequestObject.headers[header_x_ais_username] + \" = \" + x_ais_userName);\r",
											"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
											"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
											"\r",
											"                            pm.expect(jsonParseRequestObject.url).to.eql(url);\r",
											"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_username]).to.eql(x_ais_userName);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
											"\r",
											"                            console.log(\"resquest.body.AccessToken : \" + jsonParseRequestObject.body.AccessToken + \" = \" + AccessToken);\r",
											"                            pm.expect(jsonParseRequestObject.body.AccessToken).to.eql(AccessToken);\r",
											"                            \r",
											"                            // check responseObject\r",
											"                            // \"responseobject\":\"{\\\"operationstatus\\\":{\\\"code\\\":\\\"20000\\\",\\\"description\\\":\\\"validatetokenprocess is success\\\"}}\"\r",
											"\r",
											"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
											"                            // console.log('jsonParseResponseObject',jsonParseResponseObject);\r",
											"\r",
											"                            console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeSuccess);\r",
											"                            console.log(\"response.OperationStatus.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionValidateToken);\r",
											"\r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeSuccess); \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionValidateToken);  \r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"setTimeout(function () {SearchLogFindTid();}, 6000);\r",
											"setTimeout(function () {CheckLog();}, 20000);\r",
											"\r",
											"setTimeout(function(){\r",
											"pm.environment.unset(\"current_timestamp\");\r",
											"pm.environment.unset(\"AccessToken\");\r",
											"pm.environment.unset(\"tid\");\r",
											"}, 25000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-ais-UserName",
										"value": "{{x_ais_UserName_AisPartner}}",
										"type": "text"
									},
									{
										"key": "x-ais-OrderRef",
										"value": "{{x_ais_OrderRef_ValidateToken}}{{current_timestamp}}"
									},
									{
										"key": "x-ais-OrderDesc",
										"value": "{{x_ais_OrderDesc_ValidateToken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"AccessToken\": \"{{AccessToken}}\"\r\n}"
								},
								"url": {
									"raw": "{{url}}{{provisioningapis}}/api/v1/auth/ValidateToken",
									"host": [
										"{{url}}{{provisioningapis}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"ValidateToken"
									]
								},
								"description": "Type:Desire"
							},
							"response": []
						},
						{
							"name": "ValidateToken_TST_F63_1_1_005_Success_Customer",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var Username = pm.environment.get(\"Username_Customer\");\r",
											"var Password = pm.environment.get(\"Password_Customer\");\r",
											"\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"//format YYYYMMDDHHMMSSS\r",
											"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
											"// console.log('currentTmestamp',currentTmestamp);\r",
											"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- statusCodeList --------------//\r",
											"//set variable to statusCodeList JSON.parse\r",
											"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
											"//set global variable to statusCode 200\r",
											"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- resultCodeList --------------//\r",
											"//set variable to resultCodeList JSON.parse\r",
											"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
											"//set global variable to resultCode \"20000\"\r",
											"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- resultDescriptionSuccessList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
											"//set global variable to resultDescription \"SignInProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
											"//set global variable to resultDescription \"ValidateTokenProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionValidateToken\", resultDescriptionSuccessList.resultDescriptionValidateToken);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- HeaderList --------------//\r",
											"//set variable to HeaderList JSON.parse\r",
											"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
											"//---------------- set globals Other --------------//\r",
											"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
											"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
											"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
											"//set global variable to kbn-versio \"7.5.1\"\r",
											"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Signin_ --------------//\r",
											"//set global variable to x_ais_OrderRef \"Signin_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
											"//set global variable to x_ais_OrderRef \"ValidateToken\"\r",
											"pm.globals.set(\"x_ais_OrderRef_ValidateToken\", HeaderList.Signin.x_ais_OrderRef_ValidateToken);\r",
											"//set global variable to x_ais_OrderDesc \"ValidateToken\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_ValidateToken\", HeaderList.Signin.x_ais_OrderDesc_ValidateToken);\r",
											"//------------------------------------------------------------//\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultDescription \"SignInProcess is Success\"\r",
											"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- urlRouteList --------------//\r",
											"//set variable to urlRouteList JSON.parse\r",
											"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
											"//---------------- set url Create --------------//\r",
											"//set global variable to url \"/api/v1/auth/signin\"\r",
											"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
											"//---------------- get url Create --------------//\r",
											"//get global variable to url \"/api/v1/auth/signin\"\r",
											"var urlSignin = pm.globals.get(\"urlSignin\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"Signin_\"\r",
											"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"// Signin get token\r",
											" Signin = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username,\r",
											"                password:Password\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"  \r",
											"Signin();\r",
											"setTimeout(async function(){}, 3000);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"//------------------------------------------------------------//\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"ValidateToken_\"\r",
											"var x_ais_OrderRef_ValidateToken = pm.globals.get(\"x_ais_OrderRef_ValidateToken\");\r",
											"//get global variable to x_ais_OrderDesc \"ValidateToken\"\r",
											"var x_ais_OrderDesc_ValidateToken = pm.globals.get(\"x_ais_OrderDesc_ValidateToken\");\r",
											"//------------------------------------------------------------//\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//------------------------------------------------------------//\r",
											"//get global variable to resultDescription \"ValidateTokenProcess is Success\"\r",
											"var resultDescriptionValidateToken = pm.globals.get(\"resultDescriptionValidateToken\");\r",
											"//------------------------------------------------------------//\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"ValidateToken : Status code is \" + statusCodeSuccess, function () {\r",
											"    pm.response.to.have.status(statusCodeSuccess);\r",
											"});\r",
											"\r",
											"pm.test('ValidateToken : operationStatus code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeSuccess);\r",
											"});\r",
											"\r",
											"pm.test('ValidateToken : operationStatus description is '+'\"'+ resultDescriptionValidateToken+'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionValidateToken);\r",
											"});\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"//---------------- LogDefaultValue --------------//\r",
											"//set variable to LogDefaultValue JSON.parse\r",
											"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
											"// console.log('LogDefaultValue',LogDefaultValue);\r",
											"//---------------- set globals Other --------------//\r",
											"var SearchLog = LogDefaultValue.SearchLog;\r",
											"// console.log('SearchLog',SearchLog);\r",
											"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
											"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
											"var kbn_version = SearchLog.header.kbn_version;\r",
											"var authorization = SearchLog.header.Authorization;\r",
											"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
											"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
											"var namespace = LogDefaultValue.Other.namespace;\r",
											"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
											"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
											"var header_x_ais_username = LogDefaultValue.Other.header_x_ais_username;\r",
											"var methodPost = LogDefaultValue.Other.methodPost;\r",
											"\r",
											"// Detail\r",
											"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
											"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
											"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
											"\r",
											"// Summary\r",
											"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
											"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
											"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
											"\r",
											"// ProvisioningAPIs [ValidateToken]\r",
											"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
											"var cmdName = LogDefaultValue.Provisioning.Signin.cmdNameValidateToken1;\r",
											"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
											"var containerId = LogDefaultValue.Provisioning.containerId;\r",
											"var requestObjectUrlStaging = LogDefaultValue.Provisioning.Signin.requestObjectUrlValidateTokenMgStaging;\r",
											"\r",
											"// Check CDR (Summary Log) and EDR (Detail Log)\r",
											"SearchLogFindTid = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSearchLogFindTid = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = x_ais_OrderRef_ValidateToken + current_timestamp;\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestSearchLogFindTid = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"\r",
											"        let optionsSearchLogFindTid = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptSearchLogFindTid,\r",
											"            body: httpRequestSearchLogFindTid\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsSearchLogFindTid);\r",
											"        let jsonDataSearchLogFindTid = await response.json();\r",
											"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
											"\r",
											"        // //200\r",
											"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"\r",
											"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
											"        console.log('hits',hits)\r",
											"  \r",
											"        // find tid\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            // let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"        \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            if(applicationNameValue == applicationName){\r",
											"                let tid = hits[i]._source.cauldron.tid;\r",
											"                pm.environment.set(\"tid\", tid);\r",
											"                break;\r",
											"           }\r",
											"        }\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"CheckLog = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCheckLog = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = pm.environment.get(\"tid\");\r",
											"\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestCheckLog = {\r",
											"            mode: 'raw',\r",
											"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"        let optionsCheckLog = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptCheckLog,\r",
											"            body: httpRequestCheckLog\r",
											"        }; \r",
											"        let response = await reqPromise(optionsCheckLog);\r",
											"        let jsonDataCheckLog = await response.json();\r",
											"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
											"        \r",
											"        // //200\r",
											"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });     \r",
											"        \r",
											"        let hits = jsonDataCheckLog.hits.hits\r",
											"        console.log('hits',hits)\r",
											"  \r",
											"        // find logType\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            //  let logType = hits[i]._source.cauldron.logType\r",
											"            let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"           \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            \r",
											"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
											"            // console.log('resultDataLog',resultDataLog)\r",
											"\r",
											"            let tidControl = x_ais_OrderRef_ValidateToken + current_timestamp;\r",
											"            // console.log(tidControl);\r",
											"            if(applicationNameValue == applicationName){\r",
											"                 \r",
											"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ProvisioningAPIs\r",
											"                    pm.test(\"Check Summary Log : ValidateToken\" , function () {\r",
											"                        console.log(\"======== Check Summary Log ( Expected = Actual) [ValidateToken] ==================\");\r",
											"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
											"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
											"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeSuccess);\r",
											"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionValidateToken);\r",
											"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
											"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
											"                        // console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
											"                        \r",
											"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp);\r",
											"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName);\r",
											"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeSuccess);\r",
											"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionValidateToken);\r",
											"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp);\r",
											"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary);\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace);\r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName);\r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId);\r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
											"                        // pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
											"\r",
											"                        // check custom\r",
											"                        // \\\"custom\\\":{ \\\"endPointSummary\\\":[ { \\\"no\\\":\\\"1\\\", \\\"endPointName\\\":\\\"db.AuthenticationCollection\\\", \\\"responseStatus\\\":\\\"Success:InquiryAuthentication was successfully.\\\", \\\"processTime\\\":1.9453 } ] }\r",
											"                        let custom = resultDataLog.custom.endPointSummary;\r",
											"                        let countCustom = custom.length;\r",
											"\r",
											"                        // [\"db.AuthenticationCollection\"]\r",
											"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_ValidateToken;\r",
											"                        // [\"Success:InquiryAuthentication was successfully.\"]\r",
											"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_ValidateToken;\r",
											"                        let countCustomStep = dataEndPointName.length;\r",
											"\r",
											"                        console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep);\r",
											"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
											"\r",
											"                        for(let i=0;i<countCustomStep;i++){\r",
											"                            let no = custom[i].no;\r",
											"                            let valueEndPointName = custom[i].endPointName;\r",
											"                            let valueResponseStatus = custom[i].responseStatus;\r",
											"                            // console.log(\"i\",i);\r",
											"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
											"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
											"\r",
											"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString());\r",
											"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i]);\r",
											"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i]);\r",
											" \r",
											"                            pm.expect(no).to.eql((i+1).toString()); \r",
											"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
											"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]); \r",
											"                        }\r",
											"                    }); \r",
											"                }\r",
											"\r",
											"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ProvisioningAPIs\r",
											"\r",
											"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
											"                    // console.log('endPointNameValue ',endPointNameValue)\r",
											"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [ValidateToken]\", function () {\r",
											"                        console.log(\"======== Check Detail Log ( Expected = Actual) [ValidateToken] ==================\");\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
											"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
											"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
											"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
											"\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail);\r",
											"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail);\r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace);\r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName);\r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId);\r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime);\r",
											"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail);\r",
											"\r",
											"                        if( endPointNameValue == endPointNameProvisioningAPIs){     //\"endPointName\":\"ProvisioningAPIs\"\r",
											"                            console.log(\"custom1.endPointName : \" + resultDataLog.custom1.endPointName + \" = \" + endPointNameProvisioningAPIs);\r",
											"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs); \r",
											"                        \r",
											"                            // check requestObject\r",
											"                            // \"requestObject\":\"{\\\"url\\\":\\\"mg-staging.sandais.com/api/v1/auth/ValidateToken\\\",\\\"method\\\":\\\"POST\\\",\\\"headers\\\":{\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"ValidateToken_202104011804052\\\",\\\"x-ais-orderdesc\\\":\\\"ValidateToken\\\"},\\\"body\\\":{\\\"AccessToken\\\":\\\"Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAEQMhh6LW/NHMQoOWAkESyOfoL8+mbCSyRGJW8SXArxaUIlAkkY2KW0\\\"}}\"\r",
											"\r",
											"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
											"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
											"                            let url = urlCheckLog + requestObjectUrlStaging; \r",
											"                            let x_ais_orderref = x_ais_OrderRef_ValidateToken + current_timestamp;\r",
											"                            let x_ais_orderdesc = x_ais_OrderDesc_ValidateToken;\r",
											"                            let x_ais_userName = x_ais_UserName_AisPartner;\r",
											"\r",
											"                            let AccessToken = pm.environment.get(\"AccessToken\");\r",
											"                        \r",
											"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
											"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
											"                            console.log(\"headers.x_ais_userName : \" + jsonParseRequestObject.headers[header_x_ais_username] + \" = \" + x_ais_userName);\r",
											"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
											"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
											"\r",
											"                            pm.expect(jsonParseRequestObject.url).to.eql(url);\r",
											"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_username]).to.eql(x_ais_userName);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
											"\r",
											"                            console.log(\"resquest.body.AccessToken : \" + jsonParseRequestObject.body.AccessToken + \" = \" + AccessToken);\r",
											"                            pm.expect(jsonParseRequestObject.body.AccessToken).to.eql(AccessToken);\r",
											"                            \r",
											"                            // check responseObject\r",
											"                            // \"responseobject\":\"{\\\"operationstatus\\\":{\\\"code\\\":\\\"20000\\\",\\\"description\\\":\\\"validatetokenprocess is success\\\"}}\"\r",
											"\r",
											"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
											"                            // console.log('jsonParseResponseObject',jsonParseResponseObject);\r",
											"\r",
											"                            console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeSuccess);\r",
											"                            console.log(\"response.OperationStatus.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionValidateToken);\r",
											"\r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeSuccess); \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionValidateToken);  \r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"setTimeout(function () {SearchLogFindTid();}, 6000);\r",
											"setTimeout(function () {CheckLog();}, 20000);\r",
											"\r",
											"setTimeout(function(){\r",
											"pm.environment.unset(\"current_timestamp\");\r",
											"pm.environment.unset(\"AccessToken\");\r",
											"pm.environment.unset(\"tid\");\r",
											"}, 25000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-ais-UserName",
										"value": "{{x_ais_UserName_AisPartner}}",
										"type": "text"
									},
									{
										"key": "x-ais-OrderRef",
										"value": "{{x_ais_OrderRef_ValidateToken}}{{current_timestamp}}"
									},
									{
										"key": "x-ais-OrderDesc",
										"value": "{{x_ais_OrderDesc_ValidateToken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"AccessToken\": \"{{AccessToken}}\"\r\n}"
								},
								"url": {
									"raw": "{{url}}{{provisioningapis}}/api/v1/auth/ValidateToken",
									"host": [
										"{{url}}{{provisioningapis}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"ValidateToken"
									]
								},
								"description": "Type:Desire"
							},
							"response": []
						},
						{
							"name": "ValidateToken_TST_F63_0_2_002_Error_ValidateTokenProcessNotFound",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"Signin_\"\r",
											"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
											"//get global variable to x_ais_OrderRef \"ValidateTokenfail_\"\r",
											"var x_ais_OrderRef_ValidateToken_fail = pm.globals.get(\"x_ais_OrderRef_ValidateToken_fail\");\r",
											"//get global variable to x_ais_OrderDesc \"ValidateToken\"\r",
											"var x_ais_OrderDesc_ValidateToken = pm.globals.get(\"x_ais_OrderDesc_ValidateToken\");\r",
											"//------------------------------------------------------------//\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//------------------------------------------------------------//\r",
											"//get global variable to statusCode 404\r",
											"var statusCodeNotFound = pm.globals.get(\"statusCodeNotFound\");\r",
											"//get global variable to resultCode \"40400\"\r",
											"var resultCodeNotFound = pm.globals.get(\"resultCodeNotFound\");\r",
											"//get global variable to resultDescription \"The ValidateTokenProcess is Not Found\"\r",
											"var resultDescriptionTheValidateTokenProcessIsNotFound = pm.globals.get(\"resultDescriptionTheValidateTokenProcessIsNotFound\");\r",
											"//------------------------------------------------------------//\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"ValidateToken : Status code is \" + statusCodeNotFound, function () {\r",
											"    pm.response.to.have.status(statusCodeNotFound);\r",
											"});\r",
											"\r",
											"pm.test('ValidateToken : operationStatus code is '+'\"'+ resultCodeNotFound +'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeNotFound);\r",
											"});\r",
											"\r",
											"pm.test('ValidateToken : operationStatus Description is '+'\"'+ resultDescriptionTheValidateTokenProcessIsNotFound+'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionTheValidateTokenProcessIsNotFound);\r",
											"});\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"//---------------- LogDefaultValue --------------//\r",
											"//set variable to LogDefaultValue JSON.parse\r",
											"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
											"// console.log('LogDefaultValue',LogDefaultValue);\r",
											"//---------------- set globals Other --------------//\r",
											"var SearchLog = LogDefaultValue.SearchLog;\r",
											"// console.log('SearchLog',SearchLog);\r",
											"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
											"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
											"var kbn_version = SearchLog.header.kbn_version;\r",
											"var authorization = SearchLog.header.Authorization;\r",
											"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
											"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
											"var namespace = LogDefaultValue.Other.namespace;\r",
											"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
											"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
											"var header_x_ais_username = LogDefaultValue.Other.header_x_ais_username;\r",
											"var methodPost = LogDefaultValue.Other.methodPost;\r",
											"\r",
											"// Detail\r",
											"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
											"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
											"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
											"\r",
											"// Summary\r",
											"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
											"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
											"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
											"\r",
											"// ProvisioningAPIs [ValidateToken]\r",
											"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
											"var cmdName = LogDefaultValue.Provisioning.Signin.cmdNameValidateToken1;\r",
											"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
											"var containerId = LogDefaultValue.Provisioning.containerId;\r",
											"var requestObjectUrlStaging = LogDefaultValue.Provisioning.Signin.requestObjectUrlValidateTokenMgStaging;\r",
											"\r",
											"// Check CDR (Summary Log) and EDR (Detail Log)\r",
											"SearchLogFindTid = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSearchLogFindTid = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = x_ais_OrderRef_ValidateToken_fail + current_timestamp;\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestSearchLogFindTid = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"\r",
											"        let optionsSearchLogFindTid = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptSearchLogFindTid,\r",
											"            body: httpRequestSearchLogFindTid\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsSearchLogFindTid);\r",
											"        let jsonDataSearchLogFindTid = await response.json();\r",
											"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
											"\r",
											"        // //200\r",
											"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"\r",
											"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
											"        console.log('hits',hits)\r",
											"  \r",
											"        // find tid\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            // let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"        \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            if(applicationNameValue == applicationName){\r",
											"                let tid = hits[i]._source.cauldron.tid;\r",
											"                pm.environment.set(\"tid\", tid);\r",
											"                break;\r",
											"           }\r",
											"        }\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"CheckLog = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCheckLog = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = pm.environment.get(\"tid\");\r",
											"\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestCheckLog = {\r",
											"            mode: 'raw',\r",
											"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"        let optionsCheckLog = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptCheckLog,\r",
											"            body: httpRequestCheckLog\r",
											"        }; \r",
											"        let response = await reqPromise(optionsCheckLog);\r",
											"        let jsonDataCheckLog = await response.json();\r",
											"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
											"        \r",
											"        // //200\r",
											"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });     \r",
											"        \r",
											"        let hits = jsonDataCheckLog.hits.hits\r",
											"        console.log('hits',hits)\r",
											"  \r",
											"        // find logType\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            //  let logType = hits[i]._source.cauldron.logType\r",
											"            let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"           \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            \r",
											"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
											"            // console.log('resultDataLog',resultDataLog)\r",
											"\r",
											"            let tidControl = x_ais_OrderRef_ValidateToken_fail + current_timestamp;\r",
											"            // console.log(tidControl);\r",
											"            if(applicationNameValue == applicationName){\r",
											"                 \r",
											"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ProvisioningAPIs\r",
											"                    pm.test(\"Check Summary Log : ValidateToken\" , function () {\r",
											"                        console.log(\"======== Check Summary Log ( Expected = Actual) [ValidateToken] ==================\");\r",
											"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
											"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
											"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeNotFound);\r",
											"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionTheValidateTokenProcessIsNotFound);\r",
											"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
											"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
											"                        // console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
											"                        \r",
											"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp);\r",
											"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName);\r",
											"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeNotFound);\r",
											"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionTheValidateTokenProcessIsNotFound);\r",
											"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp);\r",
											"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary);\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace);\r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName);\r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId);\r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
											"                        // pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
											"\r",
											"                        // check custom\r",
											"                        // \\\"custom\\\":{ \\\"endPointSummary\\\":[ { \\\"no\\\":\\\"1\\\", \\\"endPointName\\\":\\\"db.AuthenticationCollection\\\", \\\"responseStatus\\\":\\\"Success:InquiryAuthentication was successfully.\\\", \\\"processTime\\\":1.9453 } ] }\r",
											"                        let custom = resultDataLog.custom.endPointSummary;\r",
											"                        let countCustom = custom.length;\r",
											"\r",
											"                        // [\"db.AuthenticationCollection\"]\r",
											"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_ValidateToken;\r",
											"                        // [\"Success:InquiryAuthentication was successfully.\"]\r",
											"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_ValidateToken;\r",
											"                        let countCustomStep = dataEndPointName.length;\r",
											"\r",
											"                        console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep);\r",
											"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
											"\r",
											"                        for(let i=0;i<countCustomStep;i++){\r",
											"                            let no = custom[i].no;\r",
											"                            let valueEndPointName = custom[i].endPointName;\r",
											"                            let valueResponseStatus = custom[i].responseStatus;\r",
											"                            // console.log(\"i\",i);\r",
											"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
											"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
											"\r",
											"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString());\r",
											"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i]);\r",
											"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i]);\r",
											"\r",
											"                            pm.expect(no).to.eql((i+1).toString()); \r",
											"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
											"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]); \r",
											"                        }\r",
											"                    }); \r",
											"                }\r",
											"\r",
											"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ProvisioningAPIs\r",
											"\r",
											"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
											"                    // console.log('endPointNameValue ',endPointNameValue)\r",
											"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [ValidateToken]\", function () {\r",
											"                        console.log(\"======== Check Detail Log ( Expected = Actual) [ValidateToken] ==================\");\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
											"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
											"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
											"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
											"\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail);\r",
											"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail);\r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace);\r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName);\r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId);\r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime);\r",
											"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail);\r",
											"\r",
											"                        if( endPointNameValue == endPointNameProvisioningAPIs){     //\"endPointName\":\"ProvisioningAPIs\"\r",
											"                            console.log(\"custom1.endPointName : \" + resultDataLog.custom1.endPointName + \" = \" + endPointNameProvisioningAPIs);\r",
											"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs); \r",
											"                        \r",
											"                            // check requestObject\r",
											"                            // \"requestObject\":\"{\\\"url\\\":\\\"mg-staging.sandais.com/api/v1/auth/ValidateToken\\\",\\\"method\\\":\\\"POST\\\",\\\"headers\\\":{\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"ValidateTokenfail_202104011804569\\\",\\\"x-ais-orderdesc\\\":\\\"ValidateToken\\\"},\\\"body\\\":{\\\"AccessToken\\\":\\\"q9x4VPMnCSbuew/Upl/alsBv0CIT8Xe0h6rp4yLzvh0y2XuhjZri1SuQbTJfStXTbO1xF/y2XwO4WUEw4QDklpC2AZuTLoEqO8nRvV0Es48Mvd7H0b7I/wPVKmozFH94QTORo5ySgpmDeiChsGDtfNwse653j74297WJUfsCPwyaC0Oh385Wzce+v4D/0VcpEpmsKyR6ZGZvTclL5QVwSIlct59q9dj3GFOMBwL3yywixhHuNd9Oquvy4ct2VIse3uDXApOVVjvfGD/GQASNy4FLzbrW6E7a\\\"}}\"\r",
											"\r",
											"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
											"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
											"                            let url = urlCheckLog + requestObjectUrlStaging;\r",
											"                            let x_ais_orderref = x_ais_OrderRef_ValidateToken_fail + current_timestamp;\r",
											"                            let x_ais_orderdesc = x_ais_OrderDesc_ValidateToken;\r",
											"                            let x_ais_userName = x_ais_UserName_AisPartner;\r",
											"\r",
											"                            let AccessToken = pm.environment.get(\"Value_ValidateToken_TST_F63_0_2_002_AccessToken\");\r",
											"                        \r",
											"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
											"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
											"                            console.log(\"headers.x_ais_userName : \" + jsonParseRequestObject.headers[header_x_ais_username] + \" = \" + x_ais_userName);\r",
											"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
											"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
											"\r",
											"                            pm.expect(jsonParseRequestObject.url).to.eql(url);\r",
											"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_username]).to.eql(x_ais_userName);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
											"\r",
											"                            console.log(\"resquest.body.AccessToken : \" + jsonParseRequestObject.body.AccessToken + \" = \" + AccessToken);\r",
											"                            pm.expect(jsonParseRequestObject.body.AccessToken).to.eql(AccessToken);\r",
											"                            \r",
											"                            // check responseObject\r",
											"                            // \"responseObject\":\"{\\\"OperationStatus\\\":{\\\"Code\\\":\\\"40400\\\",\\\"Description\\\":\\\"The ValidateTokenProcess is Not Found\\\"}}\"\r",
											"\r",
											"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
											"                            // console.log('jsonParseResponseObject',jsonParseResponseObject);  \r",
											"\r",
											"                            console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeNotFound);\r",
											"                            console.log(\"response.OperationStatus.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionTheValidateTokenProcessIsNotFound); \r",
											"\r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeNotFound);  \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionTheValidateTokenProcessIsNotFound);  \r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"setTimeout(function () {SearchLogFindTid();}, 6000);\r",
											"setTimeout(function () {CheckLog();}, 20000);\r",
											"\r",
											"setTimeout(function(){\r",
											"pm.environment.unset(\"current_timestamp\");\r",
											"pm.environment.unset(\"AccessToken\");\r",
											"pm.environment.unset(\"tid\");\r",
											"pm.environment.unset(\"Value_ValidateToken_TST_F63_0_2_002_AccessToken\");\r",
											"}, 25000);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var Username = pm.environment.get(\"Username\");\r",
											"var Password = pm.environment.get(\"Password\");\r",
											"\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"pm.environment.set(\"Value_ValidateToken_TST_F63_0_2_002_AccessToken\",fieldDataValue.Provisioning.Signin.Value_ValidateToken_TST_F63_0_2_002_AccessToken)\r",
											"\r",
											"//format YYYYMMDDHHMMSSS\r",
											"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
											"// console.log('currentTmestamp',currentTmestamp);\r",
											"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- statusCodeList --------------//\r",
											"//set variable to statusCodeList JSON.parse\r",
											"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
											"//set global variable to statusCode 200\r",
											"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
											"//set global variable to statusCode 404\r",
											"pm.globals.set(\"statusCodeNotFound\", statusCodeList.statusCodeNotFound);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- resultCodeList --------------//\r",
											"//set variable to resultCodeList JSON.parse\r",
											"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
											"//set global variable to resultCode \"20000\"\r",
											"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
											"//set global variable to resultCode \"40400\"\r",
											"pm.globals.set(\"resultCodeNotFound\", resultCodeList.resultCodeNotFound);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- resultDescriptionSuccessList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
											"//set global variable to resultDescription \"SignInProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- resultDescriptionErrorList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
											"//set global variable to resultDescription \"The ValidateTokenProcess is Not Found\"\r",
											"pm.globals.set(\"resultDescriptionTheValidateTokenProcessIsNotFound\", resultDescriptionErrorList.resultDescriptionTheValidateTokenProcessIsNotFound);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- HeaderList --------------//\r",
											"//set variable to HeaderList JSON.parse\r",
											"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
											"//---------------- set globals Other --------------//\r",
											"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
											"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
											"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
											"//set global variable to kbn-versio \"7.5.1\"\r",
											"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Signin_ --------------//\r",
											"//set global variable to x_ais_OrderRef \"Signin_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
											"//set global variable to x_ais_OrderRef \"ValidateTokenfail\"\r",
											"pm.globals.set(\"x_ais_OrderRef_ValidateToken_fail\", HeaderList.Signin.x_ais_OrderRef_ValidateToken_fail);\r",
											"//set global variable to x_ais_OrderDesc \"ValidateToken\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_ValidateToken\", HeaderList.Signin.x_ais_OrderDesc_ValidateToken);\r",
											"//------------------------------------------------------------//\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultDescription \"SignInProcess is Success\"\r",
											"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- urlRouteList --------------//\r",
											"//set variable to urlRouteList JSON.parse\r",
											"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
											"//---------------- set url Create --------------//\r",
											"//set global variable to url \"/api/v1/auth/signin\"\r",
											"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
											"//---------------- get url Create --------------//\r",
											"//get global variable to url \"/api/v1/auth/signin\"\r",
											"var urlSignin = pm.globals.get(\"urlSignin\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"Signin_\"\r",
											"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"// Signin get token\r",
											" Signin = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username,\r",
											"                password:Password\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"Signin();\r",
											"setTimeout(async function(){}, 3000);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-ais-UserName",
										"type": "text",
										"value": "{{x_ais_UserName_AisPartner}}"
									},
									{
										"key": "x-ais-OrderRef",
										"value": "{{x_ais_OrderRef_ValidateToken_fail}}{{current_timestamp}}"
									},
									{
										"key": "x-ais-OrderDesc",
										"type": "text",
										"value": "{{x_ais_OrderDesc_ValidateToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"AccessToken\": \"{{Value_ValidateToken_TST_F63_0_2_002_AccessToken}}\"\r\n}"
								},
								"url": {
									"raw": "{{url}}{{provisioningapis}}/api/v1/auth/ValidateToken",
									"host": [
										"{{url}}{{provisioningapis}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"ValidateToken"
									]
								},
								"description": "Type:Desire"
							},
							"response": []
						},
						{
							"name": "ValidateToken_TST_F63_0_2_003_Error_AccessTokenIsRequired",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"Signin_\"\r",
											"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
											"//get global variable to x_ais_OrderRef \"ValidateTokenfail_\"\r",
											"var x_ais_OrderRef_ValidateToken_fail = pm.globals.get(\"x_ais_OrderRef_ValidateToken_fail\");\r",
											"//get global variable to x_ais_OrderDesc \"ValidateToken\"\r",
											"var x_ais_OrderDesc_ValidateToken = pm.globals.get(\"x_ais_OrderDesc_ValidateToken\");\r",
											"//------------------------------------------------------------//\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//------------------------------------------------------------//\r",
											"//get global variable to statusCode 403\r",
											"var statusCodeForbidden = pm.globals.get(\"statusCodeForbidden\");\r",
											"//get global variable to resultCode \"40300\"\r",
											"var resultCodeForbiddenMissingOrInvalidParameter = pm.globals.get(\"resultCodeForbiddenMissingOrInvalidParameter\");\r",
											"//get global variable to resultDescription \"The AccessToken field is required.\"\r",
											"var resultDescriptionTheAccessTokenFieldIRequired = pm.globals.get(\"resultDescriptionTheAccessTokenFieldIRequired\");\r",
											"//------------------------------------------------------------//\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"ValidateToken : Status code is \" + statusCodeForbidden, function () {\r",
											"    pm.response.to.have.status(statusCodeForbidden);\r",
											"});\r",
											"\r",
											"pm.test('ValidateToken : operationStatus code is '+'\"'+ resultCodeForbiddenMissingOrInvalidParameter +'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeForbiddenMissingOrInvalidParameter);\r",
											"});\r",
											"\r",
											"pm.test('ValidateToken : operationStatus Description is '+'\"'+ resultDescriptionTheAccessTokenFieldIRequired+'\"', function () {\r",
											"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionTheAccessTokenFieldIRequired);\r",
											"});\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"//---------------- LogDefaultValue --------------//\r",
											"//set variable to LogDefaultValue JSON.parse\r",
											"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
											"// console.log('LogDefaultValue',LogDefaultValue);\r",
											"//---------------- set globals Other --------------//\r",
											"var SearchLog = LogDefaultValue.SearchLog;\r",
											"// console.log('SearchLog',SearchLog);\r",
											"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
											"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
											"var kbn_version = SearchLog.header.kbn_version;\r",
											"var authorization = SearchLog.header.Authorization;\r",
											"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
											"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
											"var namespace = LogDefaultValue.Other.namespace;\r",
											"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
											"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
											"var header_x_ais_username = LogDefaultValue.Other.header_x_ais_username;\r",
											"var methodPost = LogDefaultValue.Other.methodPost;\r",
											"\r",
											"// Detail\r",
											"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
											"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
											"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
											"\r",
											"// Summary\r",
											"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
											"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
											"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
											"\r",
											"// ProvisioningAPIs [ValidateToken]\r",
											"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
											"var cmdName = LogDefaultValue.Provisioning.Signin.cmdNameValidateToken;\r",
											"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
											"var containerId = LogDefaultValue.Provisioning.containerId;\r",
											"var requestObjectUrlStaging = LogDefaultValue.Provisioning.Signin.requestObjectUrlValidateTokenMgStaging;\r",
											"\r",
											"// Check CDR (Summary Log) and EDR (Detail Log)\r",
											"SearchLogFindTid = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSearchLogFindTid = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = x_ais_OrderRef_ValidateToken_fail + current_timestamp;\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestSearchLogFindTid = {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"\r",
											"        let optionsSearchLogFindTid = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptSearchLogFindTid,\r",
											"            body: httpRequestSearchLogFindTid\r",
											"        };\r",
											"\r",
											"        // console.log('request CreatePartner');\r",
											"        let response = await reqPromise(optionsSearchLogFindTid);\r",
											"        let jsonDataSearchLogFindTid = await response.json();\r",
											"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
											"\r",
											"        // //200\r",
											"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"\r",
											"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
											"        console.log('hits',hits)\r",
											"  \r",
											"        // find tid\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            // let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"        \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            if(applicationNameValue == applicationName){\r",
											"                let tid = hits[i]._source.cauldron.tid;\r",
											"                pm.environment.set(\"tid\", tid);\r",
											"                break;\r",
											"           }\r",
											"        }\r",
											"\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"CheckLog = async () => {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptCheckLog = {\r",
											"            'Content-Type': ContentType_ApplicationJson,\r",
											"            'kbn-version': kbn_version,\r",
											"            'Authorization': authorization\r",
											"        };\r",
											"\r",
											"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
											"        let setRangeLTE = moment().toJSON();\r",
											"        let valueSearch = pm.environment.get(\"tid\");\r",
											"\r",
											"        // console.log(setRangeGTE)\r",
											"        // console.log(setRangeLTE)\r",
											"        console.log(\"valueSearch\",valueSearch)\r",
											"            \r",
											"        // body\r",
											"        let httpRequestCheckLog = {\r",
											"            mode: 'raw',\r",
											"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
											"        };\r",
											"        let optionsCheckLog = {\r",
											"            url: url_staging_azure_cauldron ,\r",
											"            method: 'POST',\r",
											"            header: headersOptCheckLog,\r",
											"            body: httpRequestCheckLog\r",
											"        }; \r",
											"        let response = await reqPromise(optionsCheckLog);\r",
											"        let jsonDataCheckLog = await response.json();\r",
											"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
											"        \r",
											"        // //200\r",
											"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });     \r",
											"        \r",
											"        let hits = jsonDataCheckLog.hits.hits\r",
											"        console.log('hits',hits)\r",
											"  \r",
											"        // find logType\r",
											"        for(let i=0;i<hits.length;i++){\r",
											"            //  let logType = hits[i]._source.cauldron.logType\r",
											"            let logType = hits[i]._source.cauldron.logType;\r",
											"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
											"           \r",
											"            // console.log('logType',logType)\r",
											"            // console.log('applicationNameValue',applicationNameValue)\r",
											"            // console.log('applicationName',applicationName)\r",
											"            \r",
											"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
											"            // console.log('resultDataLog',resultDataLog)\r",
											"\r",
											"            let tidControl = x_ais_OrderRef_ValidateToken_fail + current_timestamp;\r",
											"            // console.log(tidControl);\r",
											"            if(applicationNameValue == applicationName){\r",
											"                 \r",
											"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ProvisioningAPIs\r",
											"                    pm.test(\"Check Summary Log : ValidateToken\" , function () {\r",
											"                        console.log(\"======== Check Summary Log ( Expected = Actual) [ValidateToken] ==================\");\r",
											"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
											"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
											"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeForbiddenMissingOrInvalidParameter);\r",
											"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionTheAccessTokenFieldIRequired);\r",
											"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
											"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
											"                        console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
											"                        \r",
											"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp);\r",
											"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName);\r",
											"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeForbiddenMissingOrInvalidParameter);\r",
											"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionTheAccessTokenFieldIRequired);\r",
											"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp);\r",
											"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary);\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace);\r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName);\r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId);\r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
											"                        pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
											"                    }); \r",
											"                }\r",
											"\r",
											"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ProvisioningAPIs\r",
											"\r",
											"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
											"                    // console.log('endPointNameValue ',endPointNameValue)\r",
											"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [ValidateToken]\", function () {\r",
											"                        console.log(\"======== Check Detail Log ( Expected = Actual) [ValidateToken] ==================\");\r",
											"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
											"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
											"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
											"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
											"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
											"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
											"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
											"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
											"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
											"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
											"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
											"\r",
											"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
											"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail);\r",
											"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail);\r",
											"                        pm.expect(resultDataLog.namespace).to.eql(namespace);\r",
											"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName);\r",
											"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
											"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId);\r",
											"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime);\r",
											"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime);\r",
											"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail);\r",
											"\r",
											"                        if( endPointNameValue == endPointNameProvisioningAPIs){     //\"endPointName\":\"ProvisioningAPIs\"\r",
											"                            console.log(\"custom1.endPointName : \" + resultDataLog.custom1.endPointName + \" = \" + endPointNameProvisioningAPIs);\r",
											"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs); \r",
											"                        \r",
											"                            // check requestObject\r",
											"                            // \"requestObject\":\"{\\\"url\\\":\\\"mg-staging.sandais.com/api/v1/auth/ValidateToken\\\",\\\"method\\\":\\\"POST\\\",\\\"headers\\\":{\\\"x-ais-username\\\":\\\"AisPartner\\\",\\\"x-ais-orderref\\\":\\\"ValidateTokenfail_202104011804774\\\",\\\"x-ais-orderdesc\\\":\\\"ValidateToken\\\"},\\\"body\\\":{\\\"AccessToken\\\":\\\"\\\"}}\"\r",
											"                            \r",
											"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
											"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
											"                            let url = urlCheckLog + requestObjectUrlStaging; \r",
											"                            let x_ais_orderref = x_ais_OrderRef_ValidateToken_fail + current_timestamp;\r",
											"                            let x_ais_orderdesc = x_ais_OrderDesc_ValidateToken;\r",
											"                            let x_ais_userName = x_ais_UserName_AisPartner;\r",
											"\r",
											"                            let AccessToken = \"\";\r",
											"                        \r",
											"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
											"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
											"                            console.log(\"headers.x_ais_userName : \" + jsonParseRequestObject.headers[header_x_ais_username] + \" = \" + x_ais_userName);\r",
											"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
											"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
											"\r",
											"                            pm.expect(jsonParseRequestObject.url).to.eql(url);\r",
											"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_username]).to.eql(x_ais_userName);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
											"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
											"\r",
											"                            console.log(\"resquest.body.AccessToken : \" + jsonParseRequestObject.body.AccessToken + \" = \" + AccessToken);\r",
											"                            pm.expect(jsonParseRequestObject.body.AccessToken).to.eql(AccessToken);\r",
											"                            \r",
											"                            // check responseObject\r",
											"                            // \"responseObject\":\"{\\\"OperationStatus\\\":{\\\"Code\\\":\\\"40300\\\",\\\"Description\\\":\\\"The AccessToken field is required.\\\"}}\"\r",
											"\r",
											"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
											"                            // console.log('jsonParseResponseObject',jsonParseResponseObject);  \r",
											"\r",
											"                            console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeForbiddenMissingOrInvalidParameter);\r",
											"                            console.log(\"response.OperationStatus.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionTheAccessTokenFieldIRequired); \r",
											"\r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeForbiddenMissingOrInvalidParameter);  \r",
											"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionTheAccessTokenFieldIRequired);  \r",
											"                        }\r",
											"\r",
											"                    }); \r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    } catch (err) {\r",
											"        console.log('err', err);\r",
											"    }\r",
											"}\r",
											"\r",
											"setTimeout(function () {SearchLogFindTid();}, 6000);\r",
											"setTimeout(function () {CheckLog();}, 20000);\r",
											"\r",
											"setTimeout(function(){\r",
											"pm.environment.unset(\"current_timestamp\");\r",
											"pm.environment.unset(\"AccessToken\");\r",
											"pm.environment.unset(\"tid\");\r",
											"}, 25000);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"var Username = pm.environment.get(\"Username\");\r",
											"var Password = pm.environment.get(\"Password\");\r",
											"\r",
											"var url = pm.environment.get(\"url\");\r",
											"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
											"\r",
											"//---------------- fieldDataValue --------------//\r",
											"//set variable to fieldDataValue JSON.parse\r",
											"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
											"// console.log('fieldDataValue',fieldDataValue);\r",
											"\r",
											"//format YYYYMMDDHHMMSSS\r",
											"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
											"// console.log('currentTmestamp',currentTmestamp);\r",
											"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
											"\r",
											"var Bearer = pm.environment.get(\"Bearer\");\r",
											"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
											"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
											"var Accept = pm.environment.get(\"Accept\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- statusCodeList --------------//\r",
											"//set variable to statusCodeList JSON.parse\r",
											"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
											"//set global variable to statusCode 200\r",
											"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
											"//set global variable to statusCode 403\r",
											"pm.globals.set(\"statusCodeForbidden\", statusCodeList.statusCodeForbidden);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- resultCodeList --------------//\r",
											"//set variable to resultCodeList JSON.parse\r",
											"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
											"//set global variable to resultCode \"20000\"\r",
											"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
											"//set global variable to resultCode \"40300\"\r",
											"pm.globals.set(\"resultCodeForbiddenMissingOrInvalidParameter\", resultCodeList.resultCodeForbiddenMissingOrInvalidParameter);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- resultDescriptionSuccessList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
											"//set global variable to resultDescription \"SignInProcess is Success\"\r",
											"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- resultDescriptionErrorList --------------//\r",
											"//set variable to resultDescriptionList JSON.parse\r",
											"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
											"//set global variable to resultDescription \"The AccessToken field is required.\"\r",
											"pm.globals.set(\"resultDescriptionTheAccessTokenFieldIRequired\", resultDescriptionErrorList.resultDescriptionTheAccessTokenFieldIRequired);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- HeaderList --------------//\r",
											"//set variable to HeaderList JSON.parse\r",
											"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
											"//---------------- set globals Other --------------//\r",
											"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
											"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
											"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
											"//set global variable to kbn-versio \"7.5.1\"\r",
											"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
											"//------------------------------------------------------------//\r",
											"//---------------- set globals Signin_ --------------//\r",
											"//set global variable to x_ais_OrderRef \"Signin_\"\r",
											"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
											"//set global variable to x_ais_OrderRef \"ValidateTokenfail\"\r",
											"pm.globals.set(\"x_ais_OrderRef_ValidateToken_fail\", HeaderList.Signin.x_ais_OrderRef_ValidateToken_fail);\r",
											"//set global variable to x_ais_OrderDesc \"ValidateToken\"\r",
											"pm.globals.set(\"x_ais_OrderDesc_ValidateToken\", HeaderList.Signin.x_ais_OrderDesc_ValidateToken);\r",
											"//------------------------------------------------------------//\r",
											"//get global variable to statusCode 200\r",
											"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
											"//get global variable to resultCode \"20000\"\r",
											"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
											"//get global variable to resultDescription \"SignInProcess is Success\"\r",
											"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- urlRouteList --------------//\r",
											"//set variable to urlRouteList JSON.parse\r",
											"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
											"//---------------- set url Create --------------//\r",
											"//set global variable to url \"/api/v1/auth/signin\"\r",
											"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
											"//---------------- get url Create --------------//\r",
											"//get global variable to url \"/api/v1/auth/signin\"\r",
											"var urlSignin = pm.globals.get(\"urlSignin\");\r",
											"//------------------------------------------------------------//\r",
											"//---------------- get globals HeaderList --------------//\r",
											"//---------------- get globals Other --------------//\r",
											"//get global variable to x_ais_UserName \"AisPartner\"\r",
											"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
											"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
											"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
											"//---------------- get globals Signin_ --------------//\r",
											"//get global variable to x_ais_OrderRef \"Signin_\"\r",
											"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
											"//------------------------------------------------------------//\r",
											"\r",
											"const reqPromise = (options) => {\r",
											"    return new Promise ((resolve, reject) => {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"// Signin get token\r",
											" Signin = async () =>  {\r",
											"    try {\r",
											"        // header\r",
											"        let headersOptSignin = {\r",
											"            'Content-Type':ContentType_ApplicationJson,\r",
											"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
											"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
											"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
											"            'Accept':Accept\r",
											"        };\r",
											"        \r",
											"        // body\r",
											"        let httpRequestSignin = {\r",
											"            mode: 'raw',\r",
											"            raw: \r",
											"            JSON.stringify({\r",
											"                username:Username,\r",
											"                password:Password\r",
											"            })\r",
											"        };\r",
											"        \r",
											"        let optionsSignin = {\r",
											"            url: url + provisioningapis + urlSignin,\r",
											"            method: 'POST',\r",
											"            header: headersOptSignin,\r",
											"            body: httpRequestSignin\r",
											"        };\r",
											"        // console.log('request Signin');\r",
											"        let response = await reqPromise(optionsSignin);\r",
											"        let jsonDataSignin = await response.json();\r",
											"\r",
											"        // setAccessToken\r",
											"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
											"\r",
											"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
											"\r",
											"        // 200\r",
											"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
											"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
											"        });\r",
											"        // 20000\r",
											"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
											"        });\r",
											"        // SignInProcess is Success\r",
											"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
											"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
											"        });\r",
											"        \r",
											"    } catch (err) {\r",
											"        console.log('err',err);\r",
											"    }\r",
											"}\r",
											"\r",
											"Signin();\r",
											"setTimeout(async function(){}, 3000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-ais-UserName",
										"type": "text",
										"value": "{{x_ais_UserName_AisPartner}}"
									},
									{
										"key": "x-ais-OrderRef",
										"value": "{{x_ais_OrderRef_ValidateToken_fail}}{{current_timestamp}}"
									},
									{
										"key": "x-ais-OrderDesc",
										"type": "text",
										"value": "{{x_ais_OrderDesc_ValidateToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"AccessToken\": \"\"\r\n}"
								},
								"url": {
									"raw": "{{url}}{{provisioningapis}}/api/v1/auth/ValidateToken",
									"host": [
										"{{url}}{{provisioningapis}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"ValidateToken"
									]
								},
								"description": "Type:Desire"
							},
							"response": []
						}
					]
				}
			]
		}
	]
}