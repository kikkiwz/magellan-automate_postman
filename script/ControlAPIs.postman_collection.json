{
	"info": {
		"_postman_id": "7b245102-01cb-40d0-b9b2-23168c1dc039",
		"name": "ControlAPIs",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "ControlThing",
			"item": [
				{
					"name": "ControlThing_TST_F1_1_1_001_Success_SensorIsText",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to xAisOrderRef \"RemoveThing_\"\r",
									"var x_ais_OrderRef_RemoveThing = pm.globals.get(\"x_ais_OrderRef_RemoveThing\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"var x_ais_OrderDesc_RemoveThing = pm.globals.get(\"x_ais_OrderDesc_RemoveThing\");\r",
									"//get global variable to xAisOrderRef \"InquiryThing_\"\r",
									"var x_ais_OrderRef_InquiryThing = pm.globals.get(\"x_ais_OrderRef_InquiryThing\");\r",
									"//get global variable to x_ais_OrderDesc \"InquiryThing\"\r",
									"var x_ais_OrderDesc_InquiryThing = pm.globals.get(\"x_ais_OrderDesc_InquiryThing\");\r",
									"//get global variable to x_ais_OrderRef \"RemoveThingStateInfo_\" \r",
									"var x_ais_OrderDesc_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_RemoveThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThingStateInfo\"\r",
									"var x_ais_OrderRef_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderRef_RemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Control --------------//\r",
									"//get global variable to x_ais_OrderRef \"ControlThing_\"\r",
									"var x_ais_OrderRef_ControlThing = pm.globals.get(\"x_ais_OrderRef_ControlThing\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get url Remove --------------//\r",
									"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
									"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"var urlThingRemoveThing = pm.globals.get(\"urlThingRemoveThing\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"var urlThingRemoveThingStateInfo = pm.globals.get(\"urlThingRemoveThingStateInfo\");\r",
									"//---------------- get url Inquiry --------------//\r",
									"//get global variable to url \"/api/v1/Thing/InquiryThing\"\r",
									"var urlThingInquiryThing = pm.globals.get(\"urlThingInquiryThing\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"RemovePartner is Success\"\r",
									"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
									"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
									"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
									"//get global variable to resultDescription \"RemoveThing is Success\"\r",
									"var resultDescriptionRemoveThing = pm.globals.get(\"resultDescriptionRemoveThing\");\r",
									"//get global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"var resultDescriptionRemoveThingStateInfo = pm.globals.get(\"resultDescriptionRemoveThingStateInfo\");\r",
									"//get global variable to resultDescription \"InquiryThing is Success\"\r",
									"var resultDescriptionInquiryThing = pm.globals.get(\"resultDescriptionInquiryThing\");\r",
									"//------------------------------------------------------------//\r",
									"// //get global variable to resultDescription \"ControlOneThing is Success\"\r",
									"// var resultDescriptionSuccessControlOneThing = pm.globals.get(\"resultDescriptionSuccessControlOneThing\");\r",
									"//get global variable to resultDescription \"The requested operation was successfully.\"\r",
									"var resultDescriptionTheRequestedOperationWasSuccessfully = pm.globals.get(\"resultDescriptionTheRequestedOperationWasSuccessfully\");\r",
									"//------------------------------------------------------------//\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"ControlThing : Status code is \" + statusCodeSuccess, function () {\r",
									"    pm.response.to.have.status(statusCodeSuccess);\r",
									"});\r",
									"\r",
									"pm.test('ControlThing : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeSuccess);\r",
									"});\r",
									"\r",
									"pm.test('ControlThing : OperationStatus DeveloperMessage is '+'\"'+ resultDescriptionTheRequestedOperationWasSuccessfully+'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"});\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// RemovePartner\r",
									" RemovePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemovePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemovePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemovePartner = {\r",
									"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemovePartner,\r",
									"            body: httpRequestRemovePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request RemovePartner');\r",
									"        let response = await reqPromise(optionsRemovePartner);\r",
									"        let jsonDataRemovePartner = await response.json();\r",
									"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
									"    \r",
									"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemovePartner is Success\r",
									"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveAccount\r",
									" RemoveAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemoveAccount = {\r",
									"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveAccount,\r",
									"            body: httpRequestRemoveAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveAccount');\r",
									"        let response = await reqPromise(optionsRemoveAccount);\r",
									"        let jsonDataRemoveAccount = await response.json();\r",
									"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
									"    \r",
									"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveAccount is Success\r",
									"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThing\r",
									" RemoveThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThing = {\r",
									"            url: url + provisioningapis + urlThingRemoveThing,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThing,\r",
									"            body: httpRequestRemoveThing\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveThing');\r",
									"        let response = await reqPromise(optionsRemoveThing);\r",
									"        let jsonDataRemoveThing = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThing)\r",
									"    \r",
									"        let operationStatusRemoveThing = await jsonDataRemoveThing.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThing : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThing : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThing is Success\r",
									"        pm.test('RemoveThing : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThing+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Description', resultDescriptionRemoveThing);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThingStateInfo\r",
									" RemoveThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"            \r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\"),\r",
									"                \"stateType\": fieldDataValue.CreateThingStateInfo.Type_Report, //Report\r",
									"                \"stateKey\": fieldDataValue.CreateThingStateInfo.SensorKey //Temp\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingRemoveThingStateInfo,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThingStateInfo,\r",
									"            body: httpRequestRemoveThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('response RemoveThingStateInfo');\r",
									"        let response = await reqPromise(optionsRemoveThingStateInfo);\r",
									"        let jsonDataRemoveThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThingStateInfo)\r",
									"    \r",
									"        let operationStatusRemoveThingStateInfo = await jsonDataRemoveThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThingStateInfo is Success\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThingStateInfo+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Description', resultDescriptionRemoveThingStateInfo);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"//---------------- LogDefaultValue --------------//\r",
									"//set variable to LogDefaultValue JSON.parse\r",
									"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
									"// console.log('LogDefaultValue',LogDefaultValue);\r",
									"//---------------- set globals Other --------------//\r",
									"var SearchLog = LogDefaultValue.SearchLog;\r",
									"// console.log('SearchLog',SearchLog);\r",
									"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
									"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
									"var kbn_version = SearchLog.header.kbn_version;\r",
									"var authorization = SearchLog.header.Authorization;\r",
									"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
									"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
									"var namespace = LogDefaultValue.Other.namespace_control4mg;\r",
									"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
									"var header_x_ais_accountkey = LogDefaultValue.Other.header_x_ais_accountkey;\r",
									"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
									"var methodPost = LogDefaultValue.Other.methodPost;\r",
									"\r",
									"// Detail\r",
									"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
									"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
									"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
									"\r",
									"// Summary\r",
									"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
									"\r",
									"// ControlAPIs\r",
									"var applicationName = LogDefaultValue.Control.applicationName_mg4;\r",
									"var cmdName = LogDefaultValue.Control.cmdNameThing;\r",
									"var endPointNameControlAPIs = LogDefaultValue.Control.endPointNameControlAPIs;\r",
									"var endPointNameDesireEx = LogDefaultValue.Control.endPointNameDesireEx;\r",
									"var endPointNameRabbitMQ = LogDefaultValue.Control.endPointNameRabbitMQ;\r",
									"var containerId = LogDefaultValue.Control.containerId;\r",
									"var requestObjectUrlStaging = LogDefaultValue.Control.requestObjectUrlStagingThing;\r",
									"var xProtocolControl = LogDefaultValue.Control.xProtocolControl;\r",
									"var responseObjectPublished = LogDefaultValue.Control.responseObjectPublished;\r",
									"\r",
									"// Check CDR (Summary Log) and EDR (Detail Log)\r",
									"SearchLogFindTid = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSearchLogFindTid = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = pm.environment.get(\"GetResponse_ThingID\"); \r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestSearchLogFindTid = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"\r",
									"        let optionsSearchLogFindTid = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptSearchLogFindTid,\r",
									"            body: httpRequestSearchLogFindTid\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsSearchLogFindTid);\r",
									"        let jsonDataSearchLogFindTid = await response.json();\r",
									"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
									"        console.log('hits',hits)\r",
									"  \r",
									"        // find tid\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            // let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"        \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            if(applicationNameValue == applicationName){\r",
									"                let tid = hits[i]._source.cauldron.tid;\r",
									"                pm.environment.set(\"tid\", tid);\r",
									"                break;\r",
									"           }\r",
									"\r",
									"        }\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"CheckLog = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCheckLog = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = pm.environment.get(\"tid\");\r",
									"\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestCheckLog = {\r",
									"            mode: 'raw',\r",
									"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"        let optionsCheckLog = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptCheckLog,\r",
									"            body: httpRequestCheckLog\r",
									"        }; \r",
									"        let response = await reqPromise(optionsCheckLog);\r",
									"        let jsonDataCheckLog = await response.json();\r",
									"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
									"        \r",
									"        // //200\r",
									"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });     \r",
									"        \r",
									"        let hits = jsonDataCheckLog.hits.hits\r",
									"        console.log('hits',hits)\r",
									"  \r",
									"        // find logType\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            //  let logType = hits[i]._source.cauldron.logType\r",
									"            let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"           \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            \r",
									"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
									"            // console.log('resultDataLog',resultDataLog)\r",
									"\r",
									"            let tidControl = x_ais_OrderRef_ControlThing + current_timestamp;\r",
									"            // console.log(tidControl);\r",
									"            if(applicationNameValue == applicationName){\r",
									"                 \r",
									"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ControlAPIs\r",
									"                    pm.test(\"Check Summary Log : ControlThing\" , function () {\r",
									"                        console.log(\"======== Check Summary Log ( Expected = Actual) [ControlThing] ==================\");\r",
									"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
									"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
									"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeSuccess);\r",
									"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
									"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        // console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
									"                        // console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
									"\r",
									"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
									"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
									"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeSuccess); \r",
									"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionTheRequestedOperationWasSuccessfully); \r",
									"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
									"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"\r",
									"                        let thingId = pm.environment.get(\"GetResponse_ThingID\");\r",
									"                        let customUrl= urlCheckLog + requestObjectUrlStaging;\r",
									"                        let customAccountkey = pm.environment.get(\"GetResponse_AccountId\");\r",
									"\r",
									"                        // check identity\r",
									"                        // \"identity\":\"{\\\"ThingID\\\":\\\"60114adea32e8c0001576d2a\\\"}\"\r",
									"                        let dataSummaryIdentity = JSON.parse(resultDataLog.identity);\r",
									"\r",
									"                        // console.log(\"dataSummaryIdentity : \" + dataSummaryIdentity + \" = \" + dataSummaryIdentity);\r",
									"\r",
									"                        console.log(\"identity.ThingID : \" + dataSummaryIdentity.ThingID + \" = \" + thingId);\r",
									"                        pm.expect(dataSummaryIdentity.ThingID).to.eql(thingId); \r",
									"\r",
									"                        // check custom\r",
									"                        // \\\"custom\\\":{ \\\"customData\\\":{ \\\"url\\\":\\\"mg-iot.sandais.com/api/v1/Control/Thing\\\", \\\"accountkey\\\":\\\"6098d137c67b970001ce00d4\\\", \\\"ThingID\\\":[ \\\"6098d139c67b970001ce00de\\\" ] }, \\\"endPointSummary\\\":[ { \\\"no\\\":\\\"1\\\", \\\"endPointName\\\":\\\"db.AuthenticationCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:Inquiry was Success\\\", \\\"processTime\\\":0.0003 }, { \\\"no\\\":\\\"2\\\", \\\"endPointName\\\":\\\"db.ClientsCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:Inquiry was Success\\\", \\\"processTime\\\":0.0007 }, { \\\"no\\\":\\\"3\\\", \\\"endPointName\\\":\\\"db.AccountsCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:Inquiry was Success\\\", \\\"processTime\\\":0.0002 }, { \\\"no\\\":\\\"4\\\", \\\"endPointName\\\":\\\"db.ThingsCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:Inquiry was Success\\\", \\\"processTime\\\":0.0005 } ] }\r",
									"\r",
									"                        let customData = resultDataLog.custom.customData\r",
									"\r",
									"                        console.log(\"custom.url : \" + customData.url + \" = \" + customUrl);\r",
									"                        console.log(\"custom.accountkey : \" + customData.accountkey + \" = \" + customAccountkey);\r",
									"                        console.log(\"custom.ThingID[0] : \" + customData.ThingID[0] + \" = \" + thingId);\r",
									"\r",
									"                        pm.expect(customData.url).to.eql(customUrl); \r",
									"                        pm.expect(customData.accountkey).to.eql(customAccountkey); \r",
									"                        pm.expect(customData.ThingID[0]).to.eql(thingId); \r",
									"\r",
									"                        let custom = resultDataLog.custom.endPointSummary;\r",
									"                        let countCustom = custom.length;\r",
									"                       \r",
									"                        // [\"db.AuthenticationCollection\",\"db.ClientsCollection\",\"db.AccountsCollection\",\"db.ThingsCollection\"]\r",
									"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_ControlThing;\r",
									"                        // [\"20000:Inquiry was Success\",\"20000:Inquiry was Success\",\"20000:Inquiry was Success\",\"20000:Inquiry was Success\"]\r",
									"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_ControlThing;\r",
									"                        let countCustomStep = dataEndPointName.length;\r",
									"\r",
									"                        console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep);\r",
									"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
									"                        \r",
									"                        for(let i=0;i<countCustomStep;i++){\r",
									"                            let no = custom[i].no;\r",
									"                            let valueEndPointName = custom[i].endPointName;\r",
									"                            let valueResponseStatus = custom[i].responseStatus;\r",
									"                            // console.log(\"i\",i);\r",
									"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
									"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
									"\r",
									"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString());\r",
									"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i]);\r",
									"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i]);\r",
									"\r",
									"                            pm.expect(no).to.eql((i+1).toString()); \r",
									"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
									"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]); \r",
									"                        }\r",
									"                    }); \r",
									"                }\r",
									"\r",
									"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ControlAPIs\r",
									"\r",
									"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
									"                    // console.log('endPointNameValue ',endPointNameValue)\r",
									"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [ControlThing]\", function () {\r",
									"                        console.log(\"======== Check Detail Log ( Expected = Actual) [ControlThing] ==================\");\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
									"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
									"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
									"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
									"\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
									"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
									"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
									"\r",
									"                        let url = requestObjectUrlStaging; \r",
									"                        let urlCustom = urlCheckLog + requestObjectUrlStaging; \r",
									"                        let SensorKey = fieldDataValue.CreateThingStateInfo.SensorKey;\r",
									"                        let sensor = pm.environment.get(\"random_Sensor_Control\");\r",
									"                        let x_ais_orderref = x_ais_OrderRef_ControlThing + current_timestamp;\r",
									"                        let x_ais_AccountKey = pm.environment.get(\"GetResponse_AccountId\");\r",
									"                        let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken\");\r",
									"                        let thingId = pm.environment.get(\"GetResponse_ThingID\");\r",
									"                        let x_protocol = xProtocolControl;\r",
									"\r",
									"                        // if( endPointNameValue == endPointNameControlAPIs){     //\"endPointName\":\"ControlAPIs\"\r",
									"                        if( endPointNameValue == undefined){    //\"endPointName\":undefined\r",
									"\r",
									"                            console.log(\"custom1.endPointName : \" + resultDataLog.custom1.endPointName + \" = \" + undefined);\r",
									"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(undefined); \r",
									"                        \r",
									"                            // check requestObject\r",
									"                            // \"requestObject\":\"{\\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Control/Thing\\\",\\\"method\\\":\\\"POST\\\",\\\"headers\\\":{\\\"x-ais-orderref\\\":\\\"ControlThing_202101271801621\\\",\\\"x-ais-accountkey\\\":\\\"60114adca32e8c0001576d22\\\",\\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAGhfn1wJCmf68Vf1zYxZ/fak0lmQ84nNnLsXbdYpFNnXEIlAkkY2KW0\\\"},\\\"body\\\":{\\\"ThingId\\\":\\\"60114adea32e8c0001576d2a\\\",\\\"Sensors\\\":{\\\"Temp\\\":955}}}\"\r",
									"\r",
									"                            // \\\"requestObject\\\":\\\"{ \\\\\\\"url\\\\\\\":\\\\\\\"/api/v1/Control/Thing\\\\\\\", \\\\\\\"method\\\\\\\":\\\\\\\"POST\\\\\\\", \\\\\\\"headers\\\\\\\":{ \\\\\\\"Cache-Control\\\\\\\":\\\\\\\"no-cache\\\\\\\", \\\\\\\"Content-Type\\\\\\\":\\\\\\\"application/json\\\\\\\", \\\\\\\"Accept\\\\\\\":\\\\\\\"*/*\\\\\\\", \\\\\\\"Accept-Encoding\\\\\\\":\\\\\\\"gzip, deflate, br\\\\\\\", \\\\\\\"Host\\\\\\\":\\\\\\\"mg-iot.sandais.com\\\\\\\", \\\\\\\"User-Agent\\\\\\\":\\\\\\\"PostmanRuntime/7.26.8\\\\\\\", \\\\\\\"Content-Length\\\\\\\":\\\\\\\"84\\\\\\\", \\\\\\\"x-real-ip\\\\\\\":\\\\\\\"182.232.42.255\\\\\\\", \\\\\\\"x-forwarded-for\\\\\\\":\\\\\\\"182.232.42.255, 10.233.65.1\\\\\\\", \\\\\\\"x-forwarded-proto\\\\\\\":\\\\\\\"http\\\\\\\", \\\\\\\"x-ais-orderref\\\\\\\":\\\\\\\"ControlThing_202105101405021\\\\\\\", \\\\\\\"x-ais-accountkey\\\\\\\":\\\\\\\"6098e7ac0fbb3a0001a42016\\\\\\\", \\\\\\\"x-ais-accesstoken\\\\\\\":\\\\\\\"Bearer ibnxnVhs5Rx3IwglWv7/gVA/1TpQnKqAOBAADlRDvYhOpXwmlpYOEb5yfY5aZpoj0YRWRZM26i9HOqtc1fc1jpNDOK5JpISttmMEy59g2py7nLWonDe2YW2OPRGWSowk6+9ZihLU1fZ5d5jAqqrZaKlOAAI3N1TXDNLsHuKcOJMcERbCcaMqRaku+MY4/kzE+eyIdkfwwbjT91S2VQq+Wk2ooMWuLk6/DHVJhwbMP7ZlVqxM8u7GnOV5U1UFLau3ZzZHn70E7htKVegMrc8SMg==\\\\\\\", \\\\\\\"postman-token\\\\\\\":\\\\\\\"c8e6958a-dc9c-457e-b03c-3a70e409031f\\\\\\\", \\\\\\\"x-envoy-external-address\\\\\\\":\\\\\\\"10.233.65.1\\\\\\\", \\\\\\\"x-request-id\\\\\\\":\\\\\\\"6e42b300-fd01-4bdc-ac37-f650bfddccdb\\\\\\\", \\\\\\\"x-envoy-original-path\\\\\\\":\\\\\\\"/mg4controlapis/api/v1/Control/Thing\\\\\\\", \\\\\\\"x-b3-traceid\\\\\\\":\\\\\\\"d2172fc50d0475d8f030a201b33425f0\\\\\\\", \\\\\\\"x-b3-spanid\\\\\\\":\\\\\\\"3395b9e80394533b\\\\\\\", \\\\\\\"x-b3-parentspanid\\\\\\\":\\\\\\\"f030a201b33425f0\\\\\\\", \\\\\\\"x-b3-sampled\\\\\\\":\\\\\\\"0\\\\\\\", \\\\\\\"x-ais-SessionId\\\\\\\":\\\\\\\"1620633520972\\\\\\\", \\\\\\\"identity\\\\\\\":\\\\\\\"{ \\\\\\\\\\\\\\\"ThingID\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"6098e7ae0fbb3a0001a42020\\\\\\\\\\\\\\\" }\\\\\\\", \\\\\\\"custom\\\\\\\":\\\\\\\"{ \\\\\\\\\\\\\\\"url\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"mg-iot.sandais.com/api/v1/Control/Thing\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"accountkey\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"6098e7ac0fbb3a0001a42016\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"ThingID\\\\\\\\\\\\\\\":[ \\\\\\\\\\\\\\\"6098e7ae0fbb3a0001a42020\\\\\\\\\\\\\\\" ] }\\\\\\\" }, \\\\\\\"queryString\\\\\\\":{ }, \\\\\\\"routeParamteters\\\\\\\":{ }, \\\\\\\"body\\\\\\\":{ \\\\\\\"ThingId\\\\\\\":\\\\\\\"6098e7ae0fbb3a0001a42020\\\\\\\", \\\\\\\"Sensors\\\\\\\":{ \\\\\\\"Temp\\\\\\\":646 } } }\\\"\r",
									"                            \r",
									"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
									"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
									"\r",
									"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
									"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
									"                            console.log(\"headers.x_ais_AccountKey : \" + jsonParseRequestObject.headers[header_x_ais_accountkey] + \" = \" + x_ais_AccountKey);\r",
									"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
									"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accountkey]).to.eql(x_ais_AccountKey);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
									"\r",
									"                            let identity = JSON.parse(jsonParseRequestObject.headers.identity)\r",
									"                            console.log(\"headers.identity.ThingID : \" + identity.ThingID + \" = \" + thingId);\r",
									"                            pm.expect(identity.ThingID).to.eql(thingId);\r",
									"                            \r",
									"                            let custom = JSON.parse(jsonParseRequestObject.headers.custom)\r",
									"                            console.log(\"headers.custom.url : \" + custom.url + \" = \" + urlCustom);\r",
									"                            console.log(\"headers.custom.accountkey : \" + custom.accountkey + \" = \" + x_ais_AccountKey);\r",
									"                            console.log(\"headers.custom.ThingID[0] : \" + custom.ThingID[0] + \" = \" + thingId);\r",
									"                            \r",
									"                            pm.expect(custom.url).to.eql(urlCustom);\r",
									"                            pm.expect(custom.accountkey).to.eql(x_ais_AccountKey);\r",
									"                            pm.expect(custom.ThingID[0]).to.eql(thingId);\r",
									"\r",
									"                            console.log(\"queryString : \" + JSON.stringify(jsonParseRequestObject.queryString) + \" = \" + JSON.stringify({}));\r",
									"                            pm.expect(jsonParseRequestObject.queryString).to.eql({});\r",
									"\r",
									"                            console.log(\"routeParamteters : \" + JSON.stringify(jsonParseRequestObject.routeParamteters) + \" = \" + JSON.stringify({}));\r",
									"                            pm.expect(jsonParseRequestObject.routeParamteters).to.eql({});\r",
									"\r",
									"                            console.log(\"resquest.body.ThingId : \" + jsonParseRequestObject.body.ThingId + \" = \" + thingId);\r",
									"                            console.log(\"resquest.body.Sensors.\" + SensorKey + \"  : \" + jsonParseRequestObject.body.Sensors[SensorKey] + \" = \" + sensor);\r",
									"                            \r",
									"                            pm.expect(jsonParseRequestObject.body.ThingId).to.eql(thingId);\r",
									"                            pm.expect(jsonParseRequestObject.body.Sensors[SensorKey]).to.eql(sensor);\r",
									"\r",
									"                            // check responseObject\r",
									"                            // \"responseObject\":\"{\\\"OperationStatus\\\":{\\\"Code\\\":\\\"20000\\\",\\\"Description\\\":\\\"ControlOneThing is Success\\\"}}\"\r",
									"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
									"                            // console.log('jsonParseResponseObject',jsonParseResponseObject);\r",
									"\r",
									"                            console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeSuccess);\r",
									"                            console.log(\"response.OperationStatus.DeveloperMessage : \" + jsonParseResponseObject.OperationStatus.DeveloperMessage + \" = \" + resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"\r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeSuccess);  \r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheRequestedOperationWasSuccessfully);  \r",
									"                        }\r",
									"\r",
									"                        // if( endPointNameValue == endPointNameDesireEx){\r",
									"                            if( endPointNameValue == endPointNameRabbitMQ){\r",
									"                            \r",
									"                            // console.log(\"custom1.endPointName : \" + resultDataLog.custom1.endPointName + \" = \" + endPointNameDesireEx);\r",
									"                            // pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameDesireEx); \r",
									"\r",
									"                            console.log(\"custom1.endPointName : \" + resultDataLog.custom1.endPointName + \" = \" + endPointNameRabbitMQ);\r",
									"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameRabbitMQ); \r",
									"\r",
									"                            // check requestObject\r",
									"                            // \"requestObject\":\"{\\\"RoutingKey\\\":\\\"desire.pub.v1.15ef8559-0a9a-4ae8-a643-4ecc5f3321b2\\\",\\\"Payload\\\":\\\"{\\\\\\\"Temp\\\\\\\":955}\\\",\\\"Headers\\\":{\\\"timestamp_in_ms\\\":1611746014944,\\\"x-ais-orderref\\\":\\\"ControlThing_202101271801621\\\",\\\"x_protocol\\\":\\\"CONTROL\\\"}}\"\r",
									"\r",
									"                            // \\\"requestObject\\\":\\\"{ \\\\\\\"url\\\\\\\":\\\\\\\"desire.pub.v1.0348e86b-7a81-4b4c-bc11-6c71df7fb9a1\\\\\\\", \\\\\\\"headers\\\\\\\":{ \\\\\\\"x-ais-orderref\\\\\\\":\\\\\\\"ControlThing_202105101405021\\\\\\\", \\\\\\\"x-ais-sessionid\\\\\\\":\\\\\\\"1620633520972\\\\\\\", \\\\\\\"timestamp_in_ms\\\\\\\":\\\\\\\"1620633521009\\\\\\\", \\\\\\\"x_protocol\\\\\\\":\\\\\\\"CONTROL\\\\\\\" }, \\\\\\\"body\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"{ \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Temp\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":646 }\\\\\\\\\\\\\\\"\\\\\\\" }\\\"\r",
									"                            \r",
									"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
									"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
									"                            \r",
									"                            // let jsonParsePayload = JSON.parse(jsonParseRequestObject.Payload);\r",
									"                            // console.log('jsonParsePayload',jsonParsePayload);\r",
									"                            let jsonParseBody = JSON.parse(jsonParseRequestObject.body);\r",
									"                            let jsonParseBody1 = JSON.parse(jsonParseBody);\r",
									"                            // console.log('jsonParseBody',jsonParseBody);\r",
									"                            // console.log('jsonParseBody1',jsonParseBody1[SensorKey]);\r",
									"\r",
									"                            console.log(\"headers.timestamp_in_ms : \" + jsonParseRequestObject.headers.timestamp_in_ms + \" = \" + jsonParseRequestObject.headers.timestamp_in_ms);\r",
									"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"                            console.log(\"headers.x_protocol : \" + jsonParseRequestObject.headers.x_protocol + \" = \" + x_protocol);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.headers.timestamp_in_ms).to.eql(jsonParseRequestObject.headers.timestamp_in_ms);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                            pm.expect(jsonParseRequestObject.headers.x_protocol).to.eql(x_protocol);\r",
									"\r",
									"                            console.log(\"resquest.\"+ SensorKey +\" : \" + jsonParseBody1[SensorKey] + \" = \" + sensor);\r",
									"                            pm.expect(jsonParseBody1[SensorKey]).to.eql(sensor);\r",
									"                            \r",
									"                            // check responseObject\r",
									"                            // \\\"responseObject\\\":\\\"\\\\\\\"\\\\\\\"\\\",\r",
									"                            // let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
									"                            // console.log('jsonParseResponseObject',jsonParseResponseObject);\r",
									"\r",
									"                            console.log(\"response.custom1.responseObject : \" + resultDataLog.custom1.responseObject + \" = \" + JSON.stringify(\"\"));\r",
									"                            pm.expect(resultDataLog.custom1.responseObject).to.eql(JSON.stringify(\"\"));  \r",
									"                        }\r",
									"\r",
									"                    }); \r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// InquiryThing\r",
									"InquiryThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptInquiryThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_InquiryThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_InquiryThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestInquiryThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsInquiryThing = {\r",
									"            url: url + provisioningapis + urlThingInquiryThing,\r",
									"            method: 'POST',\r",
									"            header: headersOptInquiryThing,\r",
									"            body: httpRequestInquiryThing\r",
									"        };\r",
									"\r",
									"        // console.log('request InquiryThing');\r",
									"        let response = await reqPromise(optionsInquiryThing);\r",
									"        let jsonDataInquiryThing = await response.json();\r",
									"        // console.log('jsonDataInquiryThing',jsonDataInquiryThing)\r",
									"    \r",
									"        let operationStatusInquiryThing = await jsonDataInquiryThing.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"InquiryThing : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('InquiryThing : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusInquiryThing).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //InquiryThing is Success\r",
									"        pm.test('InquiryThing : OperationStatus Description is '+'\"'+ resultDescriptionInquiryThing+'\"', function () {\r",
									"            pm.expect(operationStatusInquiryThing).to.have.property('Description', resultDescriptionInquiryThing);\r",
									"        });\r",
									"\r",
									"        //Check Data\r",
									"        let thingInfo = await jsonDataInquiryThing.ThingInfo;\r",
									"        console.log('thingInfo',thingInfo);\r",
									"\r",
									"        for(let i=0;i<thingInfo.length;i++){\r",
									"            pm.test('Verify DB Check Data : ControlThing [StateInfo.Desire and StateInfo.Delta :{ \"'+  fieldDataValue.CreateThingStateInfo.SensorKey + '\" : '+ pm.environment.get(\"random_Sensor_Control\") +' }]' , function () {\r",
									"                console.log(\"======== Verify DB Check Data ( Expected = Actual) [ControlThing] ==================\");\r",
									"                console.log(\"thingInfo[\"+ i +\"]StateInfo.Delta : \" + thingInfo[i].StateInfo.Delta[fieldDataValue.CreateThingStateInfo.SensorKey] + \" = \" + pm.environment.get(\"random_Sensor_Control\"));\r",
									"                console.log(\"thingInfo[\"+ i +\"]StateInfo.Desire : \" + thingInfo[i].StateInfo.Delta[fieldDataValue.CreateThingStateInfo.SensorKey] + \" = \" + pm.environment.get(\"random_Sensor_Control\"));\r",
									"\r",
									"                pm.expect(thingInfo[i].StateInfo.Delta).to.have.property(fieldDataValue.CreateThingStateInfo.SensorKey, pm.environment.get(\"random_Sensor_Control\"));\r",
									"                pm.expect(thingInfo[i].StateInfo.Desire).to.have.property(fieldDataValue.CreateThingStateInfo.SensorKey, pm.environment.get(\"random_Sensor_Control\"));\r",
									"            });\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"setTimeout(function(){SearchLogFindTid();}, 20000); \r",
									"setTimeout(function(){CheckLog();}, 30000); \r",
									"setTimeout(function(){InquiryThing();}, 40000); \r",
									"\r",
									"setTimeout(function(){RemoveThingStateInfo();}, 45000); \r",
									"setTimeout(function(){RemoveThing();}, 50000); \r",
									"setTimeout(function(){RemoveAccount();}, 55000); \r",
									"setTimeout(function(){RemovePartner();}, 60000); \r",
									"\r",
									"setTimeout(function(){\r",
									"pm.environment.unset(\"current_timestamp\");\r",
									"pm.environment.unset(\"AccessToken\");\r",
									"pm.environment.unset(\"random_number\");\r",
									"pm.environment.unset(\"PartnerName\");\r",
									"pm.environment.unset(\"MerchantContact\");\r",
									"pm.environment.unset(\"CPID\");\r",
									"pm.environment.unset(\"GetResponse_PartnerId\");\r",
									"pm.environment.unset(\"AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountId\");\r",
									"pm.environment.unset(\"random_IM\");\r",
									"pm.environment.unset(\"random_ICCID\");\r",
									"pm.environment.unset(\"ThingName\");\r",
									"pm.environment.unset(\"GetResponse_ThingID\");\r",
									"pm.environment.unset(\"random_Sensor\");\r",
									"pm.environment.unset(\"GetResponse_IMSI\");\r",
									"pm.environment.unset(\"tid\");\r",
									"pm.environment.unset(\"SensorKey\");\r",
									"pm.environment.unset(\"random_Sensor_Control\");\r",
									"}, 90000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var Username = pm.environment.get(\"Username\");\r",
									"var Password = pm.environment.get(\"Password\");\r",
									"\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"pm.environment.set(\"SensorKey\",fieldDataValue.CreateThingStateInfo.SensorKey)\r",
									"\r",
									"//format YYYYMMDDHHMMSSS\r",
									"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
									"// console.log('currentTmestamp',currentTmestamp);\r",
									"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- statusCodeList --------------//\r",
									"//set variable to statusCodeList JSON.parse\r",
									"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
									"//set global variable to statusCode 200\r",
									"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
									"//set global variable to statusCode 201\r",
									"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
									"\r",
									"//---------------- resultCodeList --------------//\r",
									"//set variable to resultCodeList JSON.parse\r",
									"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
									"//set global variable to resultCode \"20000\"\r",
									"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
									"//set global variable to resultCode \"20100\"\r",
									"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionSuccessList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
									"//set global variable to resultDescription \"SignInProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
									"//set global variable to resultDescription \"CreatePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
									"//set global variable to resultDescription \"CreateAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
									"//set global variable to resultDescription \"CreateThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThing\", resultDescriptionSuccessList.resultDescriptionCreateThing);\r",
									"//set global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThingStateInfo\", resultDescriptionSuccessList.resultDescriptionCreateThingStateInfo);\r",
									"//set global variable to resultDescription \"RemovePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
									"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
									"//set global variable to resultDescription \"RemoveThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThing\", resultDescriptionSuccessList.resultDescriptionRemoveThing);\r",
									"//set global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThingStateInfo\", resultDescriptionSuccessList.resultDescriptionRemoveThingStateInfo);\r",
									"//set global variable to resultDescription \"ControlOneThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessControlOneThing\", resultDescriptionSuccessList.resultDescriptionSuccessControlOneThing);\r",
									"//set global variable to resultDescription \"InquiryThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionInquiryThing\", resultDescriptionSuccessList.resultDescriptionInquiryThing);\r",
									"//set global variable to resultDescription \"The requested operation was successfully.\"\r",
									"pm.globals.set(\"resultDescriptionTheRequestedOperationWasSuccessfully\", resultDescriptionSuccessList.resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- HeaderList --------------//\r",
									"//set variable to HeaderList JSON.parse\r",
									"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
									"//---------------- set globals Other --------------//\r",
									"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
									"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
									"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
									"//set global variable to kbn-versio \"7.5.1\"\r",
									"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Signin_ --------------//\r",
									"//set global variable to x_ais_OrderRef \"Signin_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreatePartner --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
									"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
									"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
									"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreateAccount --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
									"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
									"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Thing --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThing\", HeaderList.Thing.x_ais_OrderRef_CreateThing);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThing\", HeaderList.Thing.x_ais_OrderDesc_CreateThing);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThing\", HeaderList.Thing.x_ais_OrderRef_RemoveThing);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThing\", HeaderList.Thing.x_ais_OrderDesc_RemoveThing);\r",
									"//set global variable to x_ais_OrderRef \"InquiryThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_InquiryThing\", HeaderList.Thing.x_ais_OrderRef_InquiryThing);\r",
									"//set global variable to x_ais_OrderDesc \"InquiryThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_InquiryThing\", HeaderList.Thing.x_ais_OrderDesc_InquiryThing);\r",
									"//set global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_RemoveThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_RemoveThingStateInfo);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Control --------------//\r",
									"//set global variable to x_ais_OrderRef \"ControlThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ControlThing\", HeaderList.Control.x_ais_OrderRef_ControlThing);\r",
									"//set global variable to x_ais_OrderRef \"ControlThingfail_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ControlThing_fail\", HeaderList.Control.x_ais_OrderRef_ControlThing_fail);\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"SignInProcess is Success\"\r",
									"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
									"//get global variable to resultDescription \"CreatePartner is Success\"\r",
									"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
									"//get global variable to resultDescription \"CreateAccount is Success\"\r",
									"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
									"//get global variable to resultDescription \"CreateThing is Success\"\r",
									"var resultDescriptionCreateThing = pm.globals.get(\"resultDescriptionCreateThing\");\r",
									"//get global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"var resultDescriptionCreateThingStateInfo = pm.globals.get(\"resultDescriptionCreateThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- urlRouteList --------------//\r",
									"//set variable to urlRouteList JSON.parse\r",
									"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
									"//---------------- set url Create --------------//\r",
									"//set global variable to url \"/api/v1/auth/signin\"\r",
									"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
									"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
									"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"pm.globals.set(\"urlThingCreateThing\", urlRouteList.Thing.urlThingCreateThing);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"pm.globals.set(\"urlThingCreateThingStateInfo\", urlRouteList.Thing.urlThingCreateThingStateInfo);\r",
									"//---------------- get url Create --------------//\r",
									"//get global variable to url \"/api/v1/auth/signin\"\r",
									"var urlSignin = pm.globals.get(\"urlSignin\");\r",
									"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
									"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"var urlThingCreateThing = pm.globals.get(\"urlThingCreateThing\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"var urlThingCreateThingStateInfo = pm.globals.get(\"urlThingCreateThingStateInfo\");\r",
									"//---------------- set url Remove --------------//\r",
									"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
									"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"pm.globals.set(\"urlThingRemoveThing\", urlRouteList.Thing.urlThingRemoveThing);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"pm.globals.set(\"urlThingRemoveThingStateInfo\", urlRouteList.Thing.urlThingRemoveThingStateInfo);\r",
									"//---------------- set url Inquiry --------------//\r",
									"//set global variable to url \"/api/v1/Thing/InquiryThing\"\r",
									"pm.globals.set(\"urlThingInquiryThing\", urlRouteList.Thing.urlThingInquiryThing);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Signin_ --------------//\r",
									"//get global variable to x_ais_OrderRef \"Signin_\"\r",
									"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"var x_ais_OrderRef_CreateThing = pm.globals.get(\"x_ais_OrderRef_CreateThing\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"var x_ais_OrderDesc_CreateThing = pm.globals.get(\"x_ais_OrderDesc_CreateThing\");\r",
									"//get global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"var x_ais_OrderRef_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderRef_CreateThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"var x_ais_OrderDesc_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_CreateThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// Signin get token\r",
									" Signin = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSignin = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestSignin = {\r",
									"            mode: 'raw',\r",
									"            raw: \r",
									"            JSON.stringify({\r",
									"                username:Username,\r",
									"                password:Password\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsSignin = {\r",
									"            url: url + provisioningapis + urlSignin,\r",
									"            method: 'POST',\r",
									"            header: headersOptSignin,\r",
									"            body: httpRequestSignin\r",
									"        };\r",
									"        // console.log('request Signin');\r",
									"        let response = await reqPromise(optionsSignin);\r",
									"        let jsonDataSignin = await response.json();\r",
									"\r",
									"        // setAccessToken\r",
									"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
									"\r",
									"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // SignInProcess is Success\r",
									"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
									"        });\r",
									"\r",
									"        //set random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //set PartnerName\r",
									"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
									"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
									"        //set MerchantContact\r",
									"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
									"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
									"        // set CPID\r",
									"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
									"        pm.environment.set(\"CPID\", CPIDValue)\r",
									"        \r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreatePartner\r",
									" CreatePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreatePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreatePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
									"                \"PartnerType\": [\r",
									"                    \"Supplier\",\r",
									"                    \"Customer\"\r",
									"                ],\r",
									"                \"PartnerDetail\": {\r",
									"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
									"                    \"CPID\": pm.environment.get(\"CPID\")\r",
									"                },\r",
									"                \"Property\": {\r",
									"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsCreatePartner = {\r",
									"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreatePartner,\r",
									"            body: httpRequestCreatePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsCreatePartner);\r",
									"        let jsonDataCreatePartner = await response.json();\r",
									"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
									"    \r",
									"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreatePartner is Success\r",
									"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
									"        });\r",
									"\r",
									"        //GetResponse_PartnerId\r",
									"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
									"\r",
									"        //Accountname\r",
									"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
									"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateAccount\r",
									" CreateAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreateAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
									"                })\r",
									"        };\r",
									"        \r",
									"        let optionsCreateAccount = {\r",
									"            url: url + provisioningapis + urlAccountCreateAccount,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateAccount,\r",
									"            body: httpRequestCreateAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateAccount');\r",
									"        let response = await reqPromise(optionsCreateAccount);\r",
									"        let jsonDataCreateAccount = await response.json();\r",
									"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
									"    \r",
									"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateAccount : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateAccount is Success\r",
									"        pm.test('CreateAccount : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
									"        });\r",
									"        // GetResponse_AccountName\r",
									"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
									"        // GetResponse_AccountId\r",
									"        pm.environment.set(\"GetResponse_AccountId\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
									"        // random_IM\r",
									"        pm.environment.set(\"random_IM\", _.random(10000000, 99999999)+\" \"+_.random(1000000, 9999999))\r",
									"        // random_ICCID\r",
									"        pm.environment.set(\"random_ICCID\", _.random(1000000, 9999999)+\" \"+_.random(100000, 999999))\r",
									"        // random_number\r",
									"        pm.environment.set(\"random_number\",pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //ThingName\r",
									"        let thingNameValue = fieldDataValue.Thing.ThingNameValue; // \"Sensor_TestThingName\"\r",
									"        pm.environment.set(\"ThingName\", thingNameValue + pm.environment.get(\"random_number\"))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThing\r",
									" CreateThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateThing+ current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreateThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingName\": pm.environment.get(\"ThingName\"),\r",
									"                \"IMEI\": pm.environment.get(\"random_IM\"),\r",
									"                \"IMSI\": pm.environment.get(\"random_IM\"),\r",
									"                \"ICCID\": pm.environment.get(\"random_ICCID\"),\r",
									"                \"RouteUrl\": fieldDataValue.Thing.RouteUrlValue , //[\"http://10.12.3.4:2019/api/information/AddInformation\"]\r",
									"                \"RouteInfo\": {\r",
									"                    \"MIMO_ID\": fieldDataValue.Thing.RouteInfoMIMOIDValue , //\"606edada\"\r",
									"                    \"MIMO_SerialNo\": fieldDataValue.Thing.RouteInfoMIMOSerialNoValue //5466758878\r",
									"                },\r",
									"                \"RouteFlag\": {\r",
									"                    \"ThingName\": fieldDataValue.Thing.RouteFlagThingNameValue , //true\r",
									"                    \"ThingToken\": fieldDataValue.Thing.RouteFlagThingTokenValue, //true\r",
									"                    \"IMEI\": fieldDataValue.Thing.RouteFlagIMEIValue, //true\r",
									"                    \"ICCID\": fieldDataValue.Thing.RouteFlagICCIDValue, //true\r",
									"                    \"RouteInfo\": fieldDataValue.Thing.RouteFlagRouteInfoValue //true\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsCreateThing = {\r",
									"            url: url + provisioningapis + urlThingCreateThing,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThing,\r",
									"            body: httpRequestCreateThing\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThing');\r",
									"        let response = await reqPromise(optionsCreateThing);\r",
									"        let jsonDataCreateThing = await response.json();\r",
									"        // console.log('jsonDataCreateThing',jsonDataCreateThing)\r",
									"    \r",
									"        let operationStatusCreateThing = await jsonDataCreateThing.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateThing : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateThing : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateThing is Success\r",
									"        pm.test('CreateThing : OperationStatus Description is '+'\"'+ resultDescriptionCreateThing+'\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Description', resultDescriptionCreateThing);\r",
									"        });\r",
									"\r",
									"        pm.environment.set(\"GetResponse_ThingID\",jsonDataCreateThing.ThingInfo.ThingId)\r",
									"\r",
									"        //Get Random Sensor \r",
									"        pm.environment.set(\"random_Sensor\", _.random(100, 999))\r",
									"\r",
									"        //Get Random Sensor Control\r",
									"        pm.environment.set(\"random_Sensor_Control\", _.random(100, 999))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThingStateInfo\r",
									" CreateThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateThingStateInfo+ current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        // {\"Temp\" : pm.environment.get(\"random_Sensor\")}\r",
									"        let sensorValue = {};\r",
									"        sensorValue[fieldDataValue.CreateThingStateInfo.SensorKey] = pm.environment.get(\"random_Sensor\");\r",
									"        // console.log('sensorValue',sensorValue);\r",
									"        \r",
									"        let httpRequestCreateThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": [\r",
									"                    pm.environment.get(\"GetResponse_ThingID\")\r",
									"                ],\r",
									"                \"Type\": fieldDataValue.CreateThingStateInfo.Type_Report,\r",
									"                \"Sensor\": sensorValue\r",
									"            })\r",
									"        };\r",
									"    \r",
									"        let optionsCreateThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingCreateThingStateInfo,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThingStateInfo,\r",
									"            body: httpRequestCreateThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThingStateInfo');\r",
									"        let response = await reqPromise(optionsCreateThingStateInfo);\r",
									"        let jsonDataCreateThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataCreateThingStateInfo',jsonDataCreateThingStateInfo)\r",
									"    \r",
									"        let operationStatusCreateThingStateInfo = await jsonDataCreateThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"CreateThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //CreateThingStateInfo is Success\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionCreateThingStateInfo+'\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Description', resultDescriptionCreateThingStateInfo);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"Signin();\r",
									"setTimeout(async function(){await CreatePartner();}, 3000); \r",
									"setTimeout(async function(){await CreateAccount();}, 6000); \r",
									"setTimeout(async function(){await CreateThing();}, 8000); \r",
									"setTimeout(async function(){await CreateThingStateInfo();}, 9000); \r",
									"setTimeout(async function(){}, 10000);  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-ais-OrderRef",
								"value": "{{x_ais_OrderRef_ControlThing}}{{current_timestamp}}"
							},
							{
								"key": "x-ais-AccountKey",
								"value": "{{GetResponse_AccountId}}",
								"type": "text"
							},
							{
								"key": "x-ais-AccessToken",
								"value": "{{Bearer}} {{AccessToken}}"
							},
							{
								"key": "Accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"ThingId\": \"{{GetResponse_ThingID}}\",\r\n  \"Sensors\": {\r\n    \"{{SensorKey}}\": {{random_Sensor_Control}}\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{url}}{{mg4controlapis}}/api/v1/Control/Thing",
							"host": [
								"{{url}}{{mg4controlapis}}"
							],
							"path": [
								"api",
								"v1",
								"Control",
								"Thing"
							]
						},
						"description": "Type:Desire"
					},
					"response": []
				},
				{
					"name": "ControlThing_TST_F1_1_1_002_Success_SenSorHasPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to xAisOrderRef \"RemoveThing_\"\r",
									"var x_ais_OrderRef_RemoveThing = pm.globals.get(\"x_ais_OrderRef_RemoveThing\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"var x_ais_OrderDesc_RemoveThing = pm.globals.get(\"x_ais_OrderDesc_RemoveThing\");\r",
									"//get global variable to xAisOrderRef \"InquiryThing_\"\r",
									"var x_ais_OrderRef_InquiryThing = pm.globals.get(\"x_ais_OrderRef_InquiryThing\");\r",
									"//get global variable to x_ais_OrderDesc \"InquiryThing\"\r",
									"var x_ais_OrderDesc_InquiryThing = pm.globals.get(\"x_ais_OrderDesc_InquiryThing\");\r",
									"//get global variable to x_ais_OrderRef \"RemoveThingStateInfo_\" \r",
									"var x_ais_OrderDesc_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_RemoveThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThingStateInfo\"\r",
									"var x_ais_OrderRef_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderRef_RemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Control --------------//\r",
									"//get global variable to x_ais_OrderRef \"ControlThing_\"\r",
									"var x_ais_OrderRef_ControlThing = pm.globals.get(\"x_ais_OrderRef_ControlThing\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get url Remove --------------//\r",
									"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
									"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"var urlThingRemoveThing = pm.globals.get(\"urlThingRemoveThing\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"var urlThingRemoveThingStateInfo = pm.globals.get(\"urlThingRemoveThingStateInfo\");\r",
									"//---------------- get url Inquiry --------------//\r",
									"//get global variable to url \"/api/v1/Thing/InquiryThing\"\r",
									"var urlThingInquiryThing = pm.globals.get(\"urlThingInquiryThing\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"RemovePartner is Success\"\r",
									"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
									"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
									"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
									"//get global variable to resultDescription \"RemoveThing is Success\"\r",
									"var resultDescriptionRemoveThing = pm.globals.get(\"resultDescriptionRemoveThing\");\r",
									"//get global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"var resultDescriptionRemoveThingStateInfo = pm.globals.get(\"resultDescriptionRemoveThingStateInfo\");\r",
									"//get global variable to resultDescription \"InquiryThing is Success\"\r",
									"var resultDescriptionInquiryThing = pm.globals.get(\"resultDescriptionInquiryThing\");\r",
									"//------------------------------------------------------------//\r",
									"// //get global variable to resultDescription \"ControlOneThing is Success\"\r",
									"// var resultDescriptionSuccessControlOneThing = pm.globals.get(\"resultDescriptionSuccessControlOneThing\");\r",
									"//get global variable to resultDescription \"The requested operation was successfully.\"\r",
									"var resultDescriptionTheRequestedOperationWasSuccessfully = pm.globals.get(\"resultDescriptionTheRequestedOperationWasSuccessfully\");\r",
									"//------------------------------------------------------------//\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"ControlThing : Status code is \" + statusCodeSuccess, function () {\r",
									"    pm.response.to.have.status(statusCodeSuccess);\r",
									"});\r",
									"\r",
									"pm.test('ControlThing : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeSuccess);\r",
									"});\r",
									"\r",
									"pm.test('ControlThing : OperationStatus DeveloperMessage is '+'\"'+ resultDescriptionTheRequestedOperationWasSuccessfully+'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"});\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// RemovePartner\r",
									" RemovePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemovePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemovePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemovePartner = {\r",
									"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemovePartner,\r",
									"            body: httpRequestRemovePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request RemovePartner');\r",
									"        let response = await reqPromise(optionsRemovePartner);\r",
									"        let jsonDataRemovePartner = await response.json();\r",
									"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
									"    \r",
									"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemovePartner is Success\r",
									"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveAccount\r",
									" RemoveAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemoveAccount = {\r",
									"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveAccount,\r",
									"            body: httpRequestRemoveAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveAccount');\r",
									"        let response = await reqPromise(optionsRemoveAccount);\r",
									"        let jsonDataRemoveAccount = await response.json();\r",
									"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
									"    \r",
									"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveAccount is Success\r",
									"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThing\r",
									" RemoveThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThing = {\r",
									"            url: url + provisioningapis + urlThingRemoveThing,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThing,\r",
									"            body: httpRequestRemoveThing\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveThing');\r",
									"        let response = await reqPromise(optionsRemoveThing);\r",
									"        let jsonDataRemoveThing = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThing)\r",
									"    \r",
									"        let operationStatusRemoveThing = await jsonDataRemoveThing.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThing : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThing : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThing is Success\r",
									"        pm.test('RemoveThing : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThing+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Description', resultDescriptionRemoveThing);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThingStateInfo\r",
									" RemoveThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"            \r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\"),\r",
									"                \"stateType\": fieldDataValue.CreateThingStateInfo.Type_Report, //Report\r",
									"                \"stateKey\": fieldDataValue.CreateThingStateInfo.SensorKey //Temp\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingRemoveThingStateInfo,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThingStateInfo,\r",
									"            body: httpRequestRemoveThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('response RemoveThingStateInfo');\r",
									"        let response = await reqPromise(optionsRemoveThingStateInfo);\r",
									"        let jsonDataRemoveThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThingStateInfo)\r",
									"    \r",
									"        let operationStatusRemoveThingStateInfo = await jsonDataRemoveThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThingStateInfo is Success\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThingStateInfo+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Description', resultDescriptionRemoveThingStateInfo);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"//---------------- LogDefaultValue --------------//\r",
									"//set variable to LogDefaultValue JSON.parse\r",
									"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
									"// console.log('LogDefaultValue',LogDefaultValue);\r",
									"//---------------- set globals Other --------------//\r",
									"var SearchLog = LogDefaultValue.SearchLog;\r",
									"// console.log('SearchLog',SearchLog);\r",
									"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
									"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
									"var kbn_version = SearchLog.header.kbn_version;\r",
									"var authorization = SearchLog.header.Authorization;\r",
									"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
									"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
									"var namespace = LogDefaultValue.Other.namespace_control4mg;\r",
									"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
									"var header_x_ais_accountkey = LogDefaultValue.Other.header_x_ais_accountkey;\r",
									"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
									"var methodPost = LogDefaultValue.Other.methodPost;\r",
									"\r",
									"// Detail\r",
									"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
									"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
									"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
									"\r",
									"// Summary\r",
									"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
									"\r",
									"// ControlAPIs\r",
									"var applicationName = LogDefaultValue.Control.applicationName_mg4;\r",
									"var cmdName = LogDefaultValue.Control.cmdNameThing;\r",
									"var endPointNameControlAPIs = LogDefaultValue.Control.endPointNameControlAPIs;\r",
									"var endPointNameDesireEx = LogDefaultValue.Control.endPointNameDesireEx;\r",
									"var endPointNameRabbitMQ = LogDefaultValue.Control.endPointNameRabbitMQ;\r",
									"var containerId = LogDefaultValue.Control.containerId;\r",
									"var requestObjectUrlStaging = LogDefaultValue.Control.requestObjectUrlStagingThing;\r",
									"var xProtocolControl = LogDefaultValue.Control.xProtocolControl;\r",
									"var responseObjectPublished = LogDefaultValue.Control.responseObjectPublished;\r",
									"\r",
									"// Check CDR (Summary Log) and EDR (Detail Log)\r",
									"SearchLogFindTid = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSearchLogFindTid = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = pm.environment.get(\"GetResponse_ThingID\"); \r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestSearchLogFindTid = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"\r",
									"        let optionsSearchLogFindTid = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptSearchLogFindTid,\r",
									"            body: httpRequestSearchLogFindTid\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsSearchLogFindTid);\r",
									"        let jsonDataSearchLogFindTid = await response.json();\r",
									"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
									"        console.log('hits',hits)\r",
									"  \r",
									"        // find tid\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            // let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"        \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            if(applicationNameValue == applicationName){\r",
									"                let tid = hits[i]._source.cauldron.tid;\r",
									"                pm.environment.set(\"tid\", tid);\r",
									"                break;\r",
									"           }\r",
									"\r",
									"        }\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"CheckLog = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCheckLog = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = pm.environment.get(\"tid\");\r",
									"\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestCheckLog = {\r",
									"            mode: 'raw',\r",
									"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"        let optionsCheckLog = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptCheckLog,\r",
									"            body: httpRequestCheckLog\r",
									"        }; \r",
									"        let response = await reqPromise(optionsCheckLog);\r",
									"        let jsonDataCheckLog = await response.json();\r",
									"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
									"        \r",
									"        // //200\r",
									"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });     \r",
									"        \r",
									"        let hits = jsonDataCheckLog.hits.hits\r",
									"        console.log('hits',hits)\r",
									"  \r",
									"        // find logType\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            //  let logType = hits[i]._source.cauldron.logType\r",
									"            let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"           \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            \r",
									"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
									"            // console.log('resultDataLog',resultDataLog)\r",
									"\r",
									"            let tidControl = x_ais_OrderRef_ControlThing + current_timestamp;\r",
									"            // console.log(tidControl);\r",
									"            if(applicationNameValue == applicationName){\r",
									"                 \r",
									"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ControlAPIs\r",
									"                    pm.test(\"Check Summary Log : ControlThing\" , function () {\r",
									"                        console.log(\"======== Check Summary Log ( Expected = Actual) [ControlThing] ==================\");\r",
									"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
									"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
									"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeSuccess);\r",
									"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
									"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        // console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
									"                        // console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
									"\r",
									"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
									"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
									"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeSuccess); \r",
									"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionTheRequestedOperationWasSuccessfully); \r",
									"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
									"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"\r",
									"                        let thingId = pm.environment.get(\"GetResponse_ThingID\");\r",
									"                        let customUrl= urlCheckLog + requestObjectUrlStaging;\r",
									"                        let customAccountkey = pm.environment.get(\"GetResponse_AccountId\");\r",
									"\r",
									"                        // check identity\r",
									"                        // \"identity\":\"{\\\"ThingID\\\":\\\"60114adea32e8c0001576d2a\\\"}\"\r",
									"                        let dataSummaryIdentity = JSON.parse(resultDataLog.identity);\r",
									"\r",
									"                        // console.log(\"dataSummaryIdentity : \" + dataSummaryIdentity + \" = \" + dataSummaryIdentity);\r",
									"\r",
									"                        console.log(\"identity.ThingID : \" + dataSummaryIdentity.ThingID + \" = \" + thingId);\r",
									"                        pm.expect(dataSummaryIdentity.ThingID).to.eql(thingId); \r",
									"\r",
									"                        // check custom\r",
									"                        // \\\"custom\\\":{ \\\"customData\\\":{ \\\"url\\\":\\\"mg-iot.sandais.com/api/v1/Control/Thing\\\", \\\"accountkey\\\":\\\"6098d137c67b970001ce00d4\\\", \\\"ThingID\\\":[ \\\"6098d139c67b970001ce00de\\\" ] }, \\\"endPointSummary\\\":[ { \\\"no\\\":\\\"1\\\", \\\"endPointName\\\":\\\"db.AuthenticationCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:Inquiry was Success\\\", \\\"processTime\\\":0.0003 }, { \\\"no\\\":\\\"2\\\", \\\"endPointName\\\":\\\"db.ClientsCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:Inquiry was Success\\\", \\\"processTime\\\":0.0007 }, { \\\"no\\\":\\\"3\\\", \\\"endPointName\\\":\\\"db.AccountsCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:Inquiry was Success\\\", \\\"processTime\\\":0.0002 }, { \\\"no\\\":\\\"4\\\", \\\"endPointName\\\":\\\"db.ThingsCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:Inquiry was Success\\\", \\\"processTime\\\":0.0005 } ] }\r",
									"\r",
									"                        let customData = resultDataLog.custom.customData\r",
									"\r",
									"                        console.log(\"custom.url : \" + customData.url + \" = \" + customUrl);\r",
									"                        console.log(\"custom.accountkey : \" + customData.accountkey + \" = \" + customAccountkey);\r",
									"                        console.log(\"custom.ThingID[0] : \" + customData.ThingID[0] + \" = \" + thingId);\r",
									"\r",
									"                        pm.expect(customData.url).to.eql(customUrl); \r",
									"                        pm.expect(customData.accountkey).to.eql(customAccountkey); \r",
									"                        pm.expect(customData.ThingID[0]).to.eql(thingId); \r",
									"\r",
									"                        let custom = resultDataLog.custom.endPointSummary;\r",
									"                        let countCustom = custom.length;\r",
									"                       \r",
									"                        // [\"db.AuthenticationCollection\",\"db.ClientsCollection\",\"db.AccountsCollection\",\"db.ThingsCollection\"]\r",
									"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_ControlThing;\r",
									"                        // [\"20000:Inquiry was Success\",\"20000:Inquiry was Success\",\"20000:Inquiry was Success\",\"20000:Inquiry was Success\"]\r",
									"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_ControlThing;\r",
									"                        let countCustomStep = dataEndPointName.length;\r",
									"\r",
									"                        console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep);\r",
									"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
									"                        \r",
									"                        for(let i=0;i<countCustomStep;i++){\r",
									"                            let no = custom[i].no;\r",
									"                            let valueEndPointName = custom[i].endPointName;\r",
									"                            let valueResponseStatus = custom[i].responseStatus;\r",
									"                            // console.log(\"i\",i);\r",
									"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
									"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
									"\r",
									"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString());\r",
									"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i]);\r",
									"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i]);\r",
									"\r",
									"                            pm.expect(no).to.eql((i+1).toString()); \r",
									"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
									"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]); \r",
									"                        }\r",
									"                    }); \r",
									"                }\r",
									"\r",
									"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ControlAPIs\r",
									"\r",
									"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
									"                    // console.log('endPointNameValue ',endPointNameValue)\r",
									"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [ControlThing]\", function () {\r",
									"                        console.log(\"======== Check Detail Log ( Expected = Actual) [ControlThing] ==================\");\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
									"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
									"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
									"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
									"\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
									"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
									"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
									"\r",
									"                        let url = requestObjectUrlStaging; \r",
									"                        let urlCustom = urlCheckLog + requestObjectUrlStaging; \r",
									"                        let SensorKey = fieldDataValue.CreateThingStateInfo.SensorKey;\r",
									"                        let sensor = pm.environment.get(\"random_Sensor_Control\");\r",
									"                        let x_ais_orderref = x_ais_OrderRef_ControlThing + current_timestamp;\r",
									"                        let x_ais_AccountKey = pm.environment.get(\"GetResponse_AccountId\");\r",
									"                        let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken\");\r",
									"                        let thingId = pm.environment.get(\"GetResponse_ThingID\");\r",
									"                        let x_protocol = xProtocolControl;\r",
									"\r",
									"                        // if( endPointNameValue == endPointNameControlAPIs){     //\"endPointName\":\"ControlAPIs\"\r",
									"                        if( endPointNameValue == undefined){    //\"endPointName\":undefined\r",
									"\r",
									"                            console.log(\"custom1.endPointName : \" + resultDataLog.custom1.endPointName + \" = \" + undefined);\r",
									"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(undefined); \r",
									"                        \r",
									"                            // check requestObject\r",
									"                            // \"requestObject\":\"{\\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Control/Thing\\\",\\\"method\\\":\\\"POST\\\",\\\"headers\\\":{\\\"x-ais-orderref\\\":\\\"ControlThing_202101271801621\\\",\\\"x-ais-accountkey\\\":\\\"60114adca32e8c0001576d22\\\",\\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAGhfn1wJCmf68Vf1zYxZ/fak0lmQ84nNnLsXbdYpFNnXEIlAkkY2KW0\\\"},\\\"body\\\":{\\\"ThingId\\\":\\\"60114adea32e8c0001576d2a\\\",\\\"Sensors\\\":{\\\"Temp\\\":955}}}\"\r",
									"\r",
									"                            // \\\"requestObject\\\":\\\"{ \\\\\\\"url\\\\\\\":\\\\\\\"/api/v1/Control/Thing\\\\\\\", \\\\\\\"method\\\\\\\":\\\\\\\"POST\\\\\\\", \\\\\\\"headers\\\\\\\":{ \\\\\\\"Cache-Control\\\\\\\":\\\\\\\"no-cache\\\\\\\", \\\\\\\"Content-Type\\\\\\\":\\\\\\\"application/json\\\\\\\", \\\\\\\"Accept\\\\\\\":\\\\\\\"*/*\\\\\\\", \\\\\\\"Accept-Encoding\\\\\\\":\\\\\\\"gzip, deflate, br\\\\\\\", \\\\\\\"Host\\\\\\\":\\\\\\\"mg-iot.sandais.com\\\\\\\", \\\\\\\"User-Agent\\\\\\\":\\\\\\\"PostmanRuntime/7.26.8\\\\\\\", \\\\\\\"Content-Length\\\\\\\":\\\\\\\"84\\\\\\\", \\\\\\\"x-real-ip\\\\\\\":\\\\\\\"182.232.42.255\\\\\\\", \\\\\\\"x-forwarded-for\\\\\\\":\\\\\\\"182.232.42.255, 10.233.65.1\\\\\\\", \\\\\\\"x-forwarded-proto\\\\\\\":\\\\\\\"http\\\\\\\", \\\\\\\"x-ais-orderref\\\\\\\":\\\\\\\"ControlThing_202105101405021\\\\\\\", \\\\\\\"x-ais-accountkey\\\\\\\":\\\\\\\"6098e7ac0fbb3a0001a42016\\\\\\\", \\\\\\\"x-ais-accesstoken\\\\\\\":\\\\\\\"Bearer ibnxnVhs5Rx3IwglWv7/gVA/1TpQnKqAOBAADlRDvYhOpXwmlpYOEb5yfY5aZpoj0YRWRZM26i9HOqtc1fc1jpNDOK5JpISttmMEy59g2py7nLWonDe2YW2OPRGWSowk6+9ZihLU1fZ5d5jAqqrZaKlOAAI3N1TXDNLsHuKcOJMcERbCcaMqRaku+MY4/kzE+eyIdkfwwbjT91S2VQq+Wk2ooMWuLk6/DHVJhwbMP7ZlVqxM8u7GnOV5U1UFLau3ZzZHn70E7htKVegMrc8SMg==\\\\\\\", \\\\\\\"postman-token\\\\\\\":\\\\\\\"c8e6958a-dc9c-457e-b03c-3a70e409031f\\\\\\\", \\\\\\\"x-envoy-external-address\\\\\\\":\\\\\\\"10.233.65.1\\\\\\\", \\\\\\\"x-request-id\\\\\\\":\\\\\\\"6e42b300-fd01-4bdc-ac37-f650bfddccdb\\\\\\\", \\\\\\\"x-envoy-original-path\\\\\\\":\\\\\\\"/mg4controlapis/api/v1/Control/Thing\\\\\\\", \\\\\\\"x-b3-traceid\\\\\\\":\\\\\\\"d2172fc50d0475d8f030a201b33425f0\\\\\\\", \\\\\\\"x-b3-spanid\\\\\\\":\\\\\\\"3395b9e80394533b\\\\\\\", \\\\\\\"x-b3-parentspanid\\\\\\\":\\\\\\\"f030a201b33425f0\\\\\\\", \\\\\\\"x-b3-sampled\\\\\\\":\\\\\\\"0\\\\\\\", \\\\\\\"x-ais-SessionId\\\\\\\":\\\\\\\"1620633520972\\\\\\\", \\\\\\\"identity\\\\\\\":\\\\\\\"{ \\\\\\\\\\\\\\\"ThingID\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"6098e7ae0fbb3a0001a42020\\\\\\\\\\\\\\\" }\\\\\\\", \\\\\\\"custom\\\\\\\":\\\\\\\"{ \\\\\\\\\\\\\\\"url\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"mg-iot.sandais.com/api/v1/Control/Thing\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"accountkey\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"6098e7ac0fbb3a0001a42016\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"ThingID\\\\\\\\\\\\\\\":[ \\\\\\\\\\\\\\\"6098e7ae0fbb3a0001a42020\\\\\\\\\\\\\\\" ] }\\\\\\\" }, \\\\\\\"queryString\\\\\\\":{ }, \\\\\\\"routeParamteters\\\\\\\":{ }, \\\\\\\"body\\\\\\\":{ \\\\\\\"ThingId\\\\\\\":\\\\\\\"6098e7ae0fbb3a0001a42020\\\\\\\", \\\\\\\"Sensors\\\\\\\":{ \\\\\\\"Temp\\\\\\\":646 } } }\\\"\r",
									"                            \r",
									"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
									"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
									"\r",
									"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
									"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
									"                            console.log(\"headers.x_ais_AccountKey : \" + jsonParseRequestObject.headers[header_x_ais_accountkey] + \" = \" + x_ais_AccountKey);\r",
									"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
									"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accountkey]).to.eql(x_ais_AccountKey);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
									"\r",
									"                            let identity = JSON.parse(jsonParseRequestObject.headers.identity)\r",
									"                            console.log(\"headers.identity.ThingID : \" + identity.ThingID + \" = \" + thingId);\r",
									"                            pm.expect(identity.ThingID).to.eql(thingId);\r",
									"                            \r",
									"                            let custom = JSON.parse(jsonParseRequestObject.headers.custom)\r",
									"                            console.log(\"headers.custom.url : \" + custom.url + \" = \" + urlCustom);\r",
									"                            console.log(\"headers.custom.accountkey : \" + custom.accountkey + \" = \" + x_ais_AccountKey);\r",
									"                            console.log(\"headers.custom.ThingID[0] : \" + custom.ThingID[0] + \" = \" + thingId);\r",
									"                            \r",
									"                            pm.expect(custom.url).to.eql(urlCustom);\r",
									"                            pm.expect(custom.accountkey).to.eql(x_ais_AccountKey);\r",
									"                            pm.expect(custom.ThingID[0]).to.eql(thingId);\r",
									"\r",
									"                            console.log(\"queryString : \" + JSON.stringify(jsonParseRequestObject.queryString) + \" = \" + JSON.stringify({}));\r",
									"                            pm.expect(jsonParseRequestObject.queryString).to.eql({});\r",
									"\r",
									"                            console.log(\"routeParamteters : \" + JSON.stringify(jsonParseRequestObject.routeParamteters) + \" = \" + JSON.stringify({}));\r",
									"                            pm.expect(jsonParseRequestObject.routeParamteters).to.eql({});\r",
									"\r",
									"                            console.log(\"resquest.body.ThingId : \" + jsonParseRequestObject.body.ThingId + \" = \" + thingId);\r",
									"                            console.log(\"resquest.body.Sensors.\" + SensorKey + \"  : \" + jsonParseRequestObject.body.Sensors[SensorKey] + \" = \" + sensor);\r",
									"                            \r",
									"                            pm.expect(jsonParseRequestObject.body.ThingId).to.eql(thingId);\r",
									"                            pm.expect(jsonParseRequestObject.body.Sensors[SensorKey]).to.eql(sensor);\r",
									"\r",
									"                            // check responseObject\r",
									"                            // \"responseObject\":\"{\\\"OperationStatus\\\":{\\\"Code\\\":\\\"20000\\\",\\\"Description\\\":\\\"ControlOneThing is Success\\\"}}\"\r",
									"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
									"                            // console.log('jsonParseResponseObject',jsonParseResponseObject);\r",
									"\r",
									"                            console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeSuccess);\r",
									"                            console.log(\"response.OperationStatus.DeveloperMessage : \" + jsonParseResponseObject.OperationStatus.DeveloperMessage + \" = \" + resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"\r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeSuccess);  \r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheRequestedOperationWasSuccessfully);  \r",
									"                        }\r",
									"\r",
									"                        // if( endPointNameValue == endPointNameDesireEx){\r",
									"                            if( endPointNameValue == endPointNameRabbitMQ){\r",
									"                            \r",
									"                            // console.log(\"custom1.endPointName : \" + resultDataLog.custom1.endPointName + \" = \" + endPointNameDesireEx);\r",
									"                            // pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameDesireEx); \r",
									"\r",
									"                            console.log(\"custom1.endPointName : \" + resultDataLog.custom1.endPointName + \" = \" + endPointNameRabbitMQ);\r",
									"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameRabbitMQ); \r",
									"\r",
									"                            // check requestObject\r",
									"                            // \"requestObject\":\"{\\\"RoutingKey\\\":\\\"desire.pub.v1.15ef8559-0a9a-4ae8-a643-4ecc5f3321b2\\\",\\\"Payload\\\":\\\"{\\\\\\\"Temp\\\\\\\":955}\\\",\\\"Headers\\\":{\\\"timestamp_in_ms\\\":1611746014944,\\\"x-ais-orderref\\\":\\\"ControlThing_202101271801621\\\",\\\"x_protocol\\\":\\\"CONTROL\\\"}}\"\r",
									"\r",
									"                            // \\\"requestObject\\\":\\\"{ \\\\\\\"url\\\\\\\":\\\\\\\"desire.pub.v1.0348e86b-7a81-4b4c-bc11-6c71df7fb9a1\\\\\\\", \\\\\\\"headers\\\\\\\":{ \\\\\\\"x-ais-orderref\\\\\\\":\\\\\\\"ControlThing_202105101405021\\\\\\\", \\\\\\\"x-ais-sessionid\\\\\\\":\\\\\\\"1620633520972\\\\\\\", \\\\\\\"timestamp_in_ms\\\\\\\":\\\\\\\"1620633521009\\\\\\\", \\\\\\\"x_protocol\\\\\\\":\\\\\\\"CONTROL\\\\\\\" }, \\\\\\\"body\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"{ \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Temp\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":646 }\\\\\\\\\\\\\\\"\\\\\\\" }\\\"\r",
									"                            \r",
									"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
									"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
									"                            \r",
									"                            // let jsonParsePayload = JSON.parse(jsonParseRequestObject.Payload);\r",
									"                            // console.log('jsonParsePayload',jsonParsePayload);\r",
									"                            let jsonParseBody = JSON.parse(jsonParseRequestObject.body);\r",
									"                            let jsonParseBody1 = JSON.parse(jsonParseBody);\r",
									"                            // console.log('jsonParseBody',jsonParseBody);\r",
									"                            // console.log('jsonParseBody1',jsonParseBody1[SensorKey]);\r",
									"\r",
									"                            console.log(\"headers.timestamp_in_ms : \" + jsonParseRequestObject.headers.timestamp_in_ms + \" = \" + jsonParseRequestObject.headers.timestamp_in_ms);\r",
									"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"                            console.log(\"headers.x_protocol : \" + jsonParseRequestObject.headers.x_protocol + \" = \" + x_protocol);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.headers.timestamp_in_ms).to.eql(jsonParseRequestObject.headers.timestamp_in_ms);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                            pm.expect(jsonParseRequestObject.headers.x_protocol).to.eql(x_protocol);\r",
									"\r",
									"                            console.log(\"resquest.\"+ SensorKey +\" : \" + jsonParseBody1[SensorKey] + \" = \" + sensor);\r",
									"                            pm.expect(jsonParseBody1[SensorKey]).to.eql(sensor);\r",
									"                            \r",
									"                            // check responseObject\r",
									"                            // \\\"responseObject\\\":\\\"\\\\\\\"\\\\\\\"\\\",\r",
									"                            // let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
									"                            // console.log('jsonParseResponseObject',jsonParseResponseObject);\r",
									"\r",
									"                            console.log(\"response.custom1.responseObject : \" + resultDataLog.custom1.responseObject + \" = \" + JSON.stringify(\"\"));\r",
									"                            pm.expect(resultDataLog.custom1.responseObject).to.eql(JSON.stringify(\"\"));  \r",
									"                        }\r",
									"\r",
									"                    }); \r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// InquiryThing\r",
									"InquiryThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptInquiryThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_InquiryThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_InquiryThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestInquiryThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsInquiryThing = {\r",
									"            url: url + provisioningapis + urlThingInquiryThing,\r",
									"            method: 'POST',\r",
									"            header: headersOptInquiryThing,\r",
									"            body: httpRequestInquiryThing\r",
									"        };\r",
									"\r",
									"        // console.log('request InquiryThing');\r",
									"        let response = await reqPromise(optionsInquiryThing);\r",
									"        let jsonDataInquiryThing = await response.json();\r",
									"        // console.log('jsonDataInquiryThing',jsonDataInquiryThing)\r",
									"    \r",
									"        let operationStatusInquiryThing = await jsonDataInquiryThing.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"InquiryThing : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('InquiryThing : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusInquiryThing).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //InquiryThing is Success\r",
									"        pm.test('InquiryThing : OperationStatus Description is '+'\"'+ resultDescriptionInquiryThing+'\"', function () {\r",
									"            pm.expect(operationStatusInquiryThing).to.have.property('Description', resultDescriptionInquiryThing);\r",
									"        });\r",
									"\r",
									"        //Check Data\r",
									"        let thingInfo = await jsonDataInquiryThing.ThingInfo;\r",
									"        console.log('thingInfo',thingInfo);\r",
									"\r",
									"        for(let i=0;i<thingInfo.length;i++){\r",
									"            pm.test('Verify DB Check Data : ControlThing [StateInfo.Desire and StateInfo.Delta :{ \"'+  fieldDataValue.CreateThingStateInfo.SensorKey + '\" : \"'+ pm.environment.get(\"random_Sensor_Control\") +'\" }]' , function () {\r",
									"                console.log(\"======== Verify DB Check Data ( Expected = Actual) [ControlThing] ==================\");\r",
									"                console.log(\"thingInfo[\"+ i +\"]StateInfo.Delta : \" + thingInfo[i].StateInfo.Delta[fieldDataValue.CreateThingStateInfo.SensorKey] + \" = \" + pm.environment.get(\"random_Sensor_Control\"));\r",
									"                console.log(\"thingInfo[\"+ i +\"]StateInfo.Desire : \" + thingInfo[i].StateInfo.Delta[fieldDataValue.CreateThingStateInfo.SensorKey] + \" = \" + pm.environment.get(\"random_Sensor_Control\"));\r",
									"\r",
									"                pm.expect(thingInfo[i].StateInfo.Delta).to.have.property(fieldDataValue.CreateThingStateInfo.SensorKey, pm.environment.get(\"random_Sensor_Control\"));\r",
									"                pm.expect(thingInfo[i].StateInfo.Desire).to.have.property(fieldDataValue.CreateThingStateInfo.SensorKey, pm.environment.get(\"random_Sensor_Control\"));\r",
									"            });\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"setTimeout(function(){SearchLogFindTid();}, 20000); \r",
									"setTimeout(function(){CheckLog();}, 30000); \r",
									"setTimeout(function(){InquiryThing();}, 40000); \r",
									"\r",
									"setTimeout(function(){RemoveThingStateInfo();}, 45000); \r",
									"setTimeout(function(){RemoveThing();}, 50000); \r",
									"setTimeout(function(){RemoveAccount();}, 55000); \r",
									"setTimeout(function(){RemovePartner();}, 60000); \r",
									"\r",
									"setTimeout(function(){\r",
									"pm.environment.unset(\"current_timestamp\");\r",
									"pm.environment.unset(\"AccessToken\");\r",
									"pm.environment.unset(\"random_number\");\r",
									"pm.environment.unset(\"PartnerName\");\r",
									"pm.environment.unset(\"MerchantContact\");\r",
									"pm.environment.unset(\"CPID\");\r",
									"pm.environment.unset(\"GetResponse_PartnerId\");\r",
									"pm.environment.unset(\"AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountId\");\r",
									"pm.environment.unset(\"random_IM\");\r",
									"pm.environment.unset(\"random_ICCID\");\r",
									"pm.environment.unset(\"ThingName\");\r",
									"pm.environment.unset(\"GetResponse_ThingID\");\r",
									"pm.environment.unset(\"random_Sensor\");\r",
									"pm.environment.unset(\"GetResponse_IMSI\");\r",
									"pm.environment.unset(\"tid\");\r",
									"pm.environment.unset(\"SensorKey\");\r",
									"pm.environment.unset(\"random_Sensor_Control\");\r",
									"pm.environment.unset(\"Value_Control_Thing_TST_F1_1_1_002_Succees\");\r",
									"}, 90000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var Username = pm.environment.get(\"Username\");\r",
									"var Password = pm.environment.get(\"Password\");\r",
									"\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"pm.environment.set(\"SensorKey\",fieldDataValue.CreateThingStateInfo.SensorKey)\r",
									"pm.environment.set(\"Value_Control_Thing_TST_F1_1_1_002_Succees\",fieldDataValue.Control.Value_Control_Thing_TST_F1_1_1_002_Succees)\r",
									"\r",
									"//format YYYYMMDDHHMMSSS\r",
									"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
									"// console.log('currentTmestamp',currentTmestamp);\r",
									"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- statusCodeList --------------//\r",
									"//set variable to statusCodeList JSON.parse\r",
									"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
									"//set global variable to statusCode 200\r",
									"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
									"//set global variable to statusCode 201\r",
									"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
									"\r",
									"//---------------- resultCodeList --------------//\r",
									"//set variable to resultCodeList JSON.parse\r",
									"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
									"//set global variable to resultCode \"20000\"\r",
									"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
									"//set global variable to resultCode \"20100\"\r",
									"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionSuccessList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
									"//set global variable to resultDescription \"SignInProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
									"//set global variable to resultDescription \"CreatePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
									"//set global variable to resultDescription \"CreateAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
									"//set global variable to resultDescription \"CreateThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThing\", resultDescriptionSuccessList.resultDescriptionCreateThing);\r",
									"//set global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThingStateInfo\", resultDescriptionSuccessList.resultDescriptionCreateThingStateInfo);\r",
									"//set global variable to resultDescription \"RemovePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
									"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
									"//set global variable to resultDescription \"RemoveThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThing\", resultDescriptionSuccessList.resultDescriptionRemoveThing);\r",
									"//set global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThingStateInfo\", resultDescriptionSuccessList.resultDescriptionRemoveThingStateInfo);\r",
									"//set global variable to resultDescription \"ControlOneThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessControlOneThing\", resultDescriptionSuccessList.resultDescriptionSuccessControlOneThing);\r",
									"//set global variable to resultDescription \"InquiryThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionInquiryThing\", resultDescriptionSuccessList.resultDescriptionInquiryThing);\r",
									"//set global variable to resultDescription \"The requested operation was successfully.\"\r",
									"pm.globals.set(\"resultDescriptionTheRequestedOperationWasSuccessfully\", resultDescriptionSuccessList.resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- HeaderList --------------//\r",
									"//set variable to HeaderList JSON.parse\r",
									"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
									"//---------------- set globals Other --------------//\r",
									"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
									"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
									"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
									"//set global variable to kbn-versio \"7.5.1\"\r",
									"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Signin_ --------------//\r",
									"//set global variable to x_ais_OrderRef \"Signin_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreatePartner --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
									"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
									"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
									"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreateAccount --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
									"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
									"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Thing --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThing\", HeaderList.Thing.x_ais_OrderRef_CreateThing);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThing\", HeaderList.Thing.x_ais_OrderDesc_CreateThing);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThing\", HeaderList.Thing.x_ais_OrderRef_RemoveThing);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThing\", HeaderList.Thing.x_ais_OrderDesc_RemoveThing);\r",
									"//set global variable to x_ais_OrderRef \"InquiryThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_InquiryThing\", HeaderList.Thing.x_ais_OrderRef_InquiryThing);\r",
									"//set global variable to x_ais_OrderDesc \"InquiryThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_InquiryThing\", HeaderList.Thing.x_ais_OrderDesc_InquiryThing);\r",
									"//set global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_RemoveThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_RemoveThingStateInfo);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Control --------------//\r",
									"//set global variable to x_ais_OrderRef \"ControlThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ControlThing\", HeaderList.Control.x_ais_OrderRef_ControlThing);\r",
									"//set global variable to x_ais_OrderRef \"ControlThingfail_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ControlThing_fail\", HeaderList.Control.x_ais_OrderRef_ControlThing_fail);\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"SignInProcess is Success\"\r",
									"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
									"//get global variable to resultDescription \"CreatePartner is Success\"\r",
									"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
									"//get global variable to resultDescription \"CreateAccount is Success\"\r",
									"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
									"//get global variable to resultDescription \"CreateThing is Success\"\r",
									"var resultDescriptionCreateThing = pm.globals.get(\"resultDescriptionCreateThing\");\r",
									"//get global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"var resultDescriptionCreateThingStateInfo = pm.globals.get(\"resultDescriptionCreateThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- urlRouteList --------------//\r",
									"//set variable to urlRouteList JSON.parse\r",
									"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
									"//---------------- set url Create --------------//\r",
									"//set global variable to url \"/api/v1/auth/signin\"\r",
									"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
									"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
									"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"pm.globals.set(\"urlThingCreateThing\", urlRouteList.Thing.urlThingCreateThing);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"pm.globals.set(\"urlThingCreateThingStateInfo\", urlRouteList.Thing.urlThingCreateThingStateInfo);\r",
									"//---------------- get url Create --------------//\r",
									"//get global variable to url \"/api/v1/auth/signin\"\r",
									"var urlSignin = pm.globals.get(\"urlSignin\");\r",
									"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
									"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"var urlThingCreateThing = pm.globals.get(\"urlThingCreateThing\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"var urlThingCreateThingStateInfo = pm.globals.get(\"urlThingCreateThingStateInfo\");\r",
									"//---------------- set url Remove --------------//\r",
									"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
									"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"pm.globals.set(\"urlThingRemoveThing\", urlRouteList.Thing.urlThingRemoveThing);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"pm.globals.set(\"urlThingRemoveThingStateInfo\", urlRouteList.Thing.urlThingRemoveThingStateInfo);\r",
									"//---------------- set url Inquiry --------------//\r",
									"//set global variable to url \"/api/v1/Thing/InquiryThing\"\r",
									"pm.globals.set(\"urlThingInquiryThing\", urlRouteList.Thing.urlThingInquiryThing);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Signin_ --------------//\r",
									"//get global variable to x_ais_OrderRef \"Signin_\"\r",
									"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"var x_ais_OrderRef_CreateThing = pm.globals.get(\"x_ais_OrderRef_CreateThing\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"var x_ais_OrderDesc_CreateThing = pm.globals.get(\"x_ais_OrderDesc_CreateThing\");\r",
									"//get global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"var x_ais_OrderRef_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderRef_CreateThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"var x_ais_OrderDesc_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_CreateThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// Signin get token\r",
									" Signin = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSignin = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestSignin = {\r",
									"            mode: 'raw',\r",
									"            raw: \r",
									"            JSON.stringify({\r",
									"                username:Username,\r",
									"                password:Password\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsSignin = {\r",
									"            url: url + provisioningapis + urlSignin,\r",
									"            method: 'POST',\r",
									"            header: headersOptSignin,\r",
									"            body: httpRequestSignin\r",
									"        };\r",
									"        // console.log('request Signin');\r",
									"        let response = await reqPromise(optionsSignin);\r",
									"        let jsonDataSignin = await response.json();\r",
									"\r",
									"        // setAccessToken\r",
									"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
									"\r",
									"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // SignInProcess is Success\r",
									"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
									"        });\r",
									"\r",
									"        //set random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //set PartnerName\r",
									"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
									"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
									"        //set MerchantContact\r",
									"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
									"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
									"        // set CPID\r",
									"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
									"        pm.environment.set(\"CPID\", CPIDValue)\r",
									"        \r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreatePartner\r",
									" CreatePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreatePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreatePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
									"                \"PartnerType\": [\r",
									"                    \"Supplier\",\r",
									"                    \"Customer\"\r",
									"                ],\r",
									"                \"PartnerDetail\": {\r",
									"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
									"                    \"CPID\": pm.environment.get(\"CPID\")\r",
									"                },\r",
									"                \"Property\": {\r",
									"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsCreatePartner = {\r",
									"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreatePartner,\r",
									"            body: httpRequestCreatePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsCreatePartner);\r",
									"        let jsonDataCreatePartner = await response.json();\r",
									"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
									"    \r",
									"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreatePartner is Success\r",
									"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
									"        });\r",
									"\r",
									"        //GetResponse_PartnerId\r",
									"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
									"\r",
									"        //Accountname\r",
									"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
									"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateAccount\r",
									" CreateAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreateAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
									"                })\r",
									"        };\r",
									"        \r",
									"        let optionsCreateAccount = {\r",
									"            url: url + provisioningapis + urlAccountCreateAccount,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateAccount,\r",
									"            body: httpRequestCreateAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateAccount');\r",
									"        let response = await reqPromise(optionsCreateAccount);\r",
									"        let jsonDataCreateAccount = await response.json();\r",
									"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
									"    \r",
									"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateAccount : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateAccount is Success\r",
									"        pm.test('CreateAccount : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
									"        });\r",
									"        // GetResponse_AccountName\r",
									"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
									"        // GetResponse_AccountId\r",
									"        pm.environment.set(\"GetResponse_AccountId\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
									"        // random_IM\r",
									"        pm.environment.set(\"random_IM\", _.random(10000000, 99999999)+\" \"+_.random(1000000, 9999999))\r",
									"        // random_ICCID\r",
									"        pm.environment.set(\"random_ICCID\", _.random(1000000, 9999999)+\" \"+_.random(100000, 999999))\r",
									"        // random_number\r",
									"        pm.environment.set(\"random_number\",pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //ThingName\r",
									"        let thingNameValue = fieldDataValue.Thing.ThingNameValue; // \"Sensor_TestThingName\"\r",
									"        pm.environment.set(\"ThingName\", thingNameValue + pm.environment.get(\"random_number\"))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThing\r",
									" CreateThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateThing+ current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreateThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingName\": pm.environment.get(\"ThingName\"),\r",
									"                \"IMEI\": pm.environment.get(\"random_IM\"),\r",
									"                \"IMSI\": pm.environment.get(\"random_IM\"),\r",
									"                \"ICCID\": pm.environment.get(\"random_ICCID\"),\r",
									"                \"RouteUrl\": fieldDataValue.Thing.RouteUrlValue , //[\"http://10.12.3.4:2019/api/information/AddInformation\"]\r",
									"                \"RouteInfo\": {\r",
									"                    \"MIMO_ID\": fieldDataValue.Thing.RouteInfoMIMOIDValue , //\"606edada\"\r",
									"                    \"MIMO_SerialNo\": fieldDataValue.Thing.RouteInfoMIMOSerialNoValue //5466758878\r",
									"                },\r",
									"                \"RouteFlag\": {\r",
									"                    \"ThingName\": fieldDataValue.Thing.RouteFlagThingNameValue , //true\r",
									"                    \"ThingToken\": fieldDataValue.Thing.RouteFlagThingTokenValue, //true\r",
									"                    \"IMEI\": fieldDataValue.Thing.RouteFlagIMEIValue, //true\r",
									"                    \"ICCID\": fieldDataValue.Thing.RouteFlagICCIDValue, //true\r",
									"                    \"RouteInfo\": fieldDataValue.Thing.RouteFlagRouteInfoValue //true\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsCreateThing = {\r",
									"            url: url + provisioningapis + urlThingCreateThing,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThing,\r",
									"            body: httpRequestCreateThing\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThing');\r",
									"        let response = await reqPromise(optionsCreateThing);\r",
									"        let jsonDataCreateThing = await response.json();\r",
									"        // console.log('jsonDataCreateThing',jsonDataCreateThing)\r",
									"    \r",
									"        let operationStatusCreateThing = await jsonDataCreateThing.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateThing : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateThing : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateThing is Success\r",
									"        pm.test('CreateThing : OperationStatus Description is '+'\"'+ resultDescriptionCreateThing+'\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Description', resultDescriptionCreateThing);\r",
									"        });\r",
									"\r",
									"        pm.environment.set(\"GetResponse_ThingID\",jsonDataCreateThing.ThingInfo.ThingId)\r",
									"\r",
									"        //Get Random Sensor \r",
									"        pm.environment.set(\"random_Sensor\", _.random(100, 999))\r",
									"\r",
									"        //Get Random Sensor Control\r",
									"        pm.environment.set(\"random_Sensor_Control\", pm.environment.get(\"Value_Control_Thing_TST_F1_1_1_002_Succees\"))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThingStateInfo\r",
									" CreateThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateThingStateInfo+ current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        // {\"Temp\" : pm.environment.get(\"random_Sensor\")}\r",
									"        let sensorValue = {};\r",
									"        sensorValue[fieldDataValue.CreateThingStateInfo.SensorKey] = pm.environment.get(\"random_Sensor\");\r",
									"        // console.log('sensorValue',sensorValue);\r",
									"        \r",
									"        let httpRequestCreateThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": [\r",
									"                    pm.environment.get(\"GetResponse_ThingID\")\r",
									"                ],\r",
									"                \"Type\": fieldDataValue.CreateThingStateInfo.Type_Report,\r",
									"                \"Sensor\": sensorValue\r",
									"            })\r",
									"        };\r",
									"    \r",
									"        let optionsCreateThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingCreateThingStateInfo,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThingStateInfo,\r",
									"            body: httpRequestCreateThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThingStateInfo');\r",
									"        let response = await reqPromise(optionsCreateThingStateInfo);\r",
									"        let jsonDataCreateThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataCreateThingStateInfo',jsonDataCreateThingStateInfo)\r",
									"    \r",
									"        let operationStatusCreateThingStateInfo = await jsonDataCreateThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"CreateThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //CreateThingStateInfo is Success\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionCreateThingStateInfo+'\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Description', resultDescriptionCreateThingStateInfo);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"Signin();\r",
									"setTimeout(async function(){await CreatePartner();}, 3000); \r",
									"setTimeout(async function(){await CreateAccount();}, 6000); \r",
									"setTimeout(async function(){await CreateThing();}, 8000); \r",
									"setTimeout(async function(){await CreateThingStateInfo();}, 9000); \r",
									"setTimeout(async function(){}, 10000);  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-ais-OrderRef",
								"value": "{{x_ais_OrderRef_ControlThing}}{{current_timestamp}}"
							},
							{
								"key": "x-ais-AccountKey",
								"type": "text",
								"value": "{{GetResponse_AccountId}}"
							},
							{
								"key": "x-ais-AccessToken",
								"value": "{{Bearer}} {{AccessToken}}"
							},
							{
								"key": "Accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"ThingId\": \"{{GetResponse_ThingID}}\",\r\n  \"Sensors\": {\r\n    \"{{SensorKey}}\": \"{{random_Sensor_Control}}\"\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{url}}{{mg4controlapis}}/api/v1/Control/Thing",
							"host": [
								"{{url}}{{mg4controlapis}}"
							],
							"path": [
								"api",
								"v1",
								"Control",
								"Thing"
							]
						},
						"description": "Type:Desire"
					},
					"response": []
				},
				{
					"name": "ControlThing_TST_F1_0_2_002_Error_AccountKeyMissing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"//---------------- detailsResponse --------------//\r",
									"//set variable to detailsResponse JSON.parse\r",
									"var detailsResponse = JSON.parse(pm.environment.get(\"detailsResponse\"));\r",
									"// console.log('detailsResponse',detailsResponse);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to xAisOrderRef \"RemoveThing_\"\r",
									"var x_ais_OrderRef_RemoveThing = pm.globals.get(\"x_ais_OrderRef_RemoveThing\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"var x_ais_OrderDesc_RemoveThing = pm.globals.get(\"x_ais_OrderDesc_RemoveThing\");\r",
									"//get global variable to x_ais_OrderRef \"RemoveThingStateInfo_\"\r",
									"var x_ais_OrderDesc_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_RemoveThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThingStateInfo\"\r",
									"var x_ais_OrderRef_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderRef_RemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Control --------------//\r",
									"//get global variable to x_ais_OrderRef \"ControlThing_\"\r",
									"var x_ais_OrderRef_ControlThing = pm.globals.get(\"x_ais_OrderRef_ControlThing\");\r",
									"//get global variable to x_ais_OrderRef \"ControlThingfail_\"\r",
									"var x_ais_OrderRef_ControlThing_fail = pm.globals.get(\"x_ais_OrderRef_ControlThing_fail\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get url Remove --------------//\r",
									"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
									"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"var urlThingRemoveThing = pm.globals.get(\"urlThingRemoveThing\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"var urlThingRemoveThingStateInfo = pm.globals.get(\"urlThingRemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"RemovePartner is Success\"\r",
									"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
									"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
									"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
									"//get global variable to resultDescription \"RemoveThing is Success\"\r",
									"var resultDescriptionRemoveThing = pm.globals.get(\"resultDescriptionRemoveThing\");\r",
									"//get global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"var resultDescriptionRemoveThingStateInfo = pm.globals.get(\"resultDescriptionRemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 403\r",
									"var statusCodeForbidden = pm.globals.get(\"statusCodeForbidden\");\r",
									"//get global variable to resultCode \"40300\"\r",
									"var resultCodeForbiddenMissingOrInvalidParameter = pm.globals.get(\"resultCodeForbiddenMissingOrInvalidParameter\");\r",
									"// //get global variable to resultDescription \"The Parameter x-ais-AccountKey is Missing Or Invalid\"\r",
									"// var resultDescriptionErrorParameterXAisAccountKeyMissingOrInvalid = pm.globals.get(\"resultDescriptionErrorParameterXAisAccountKeyMissingOrInvalid\");\r",
									"//get global variable to resultDescription \"The Client Data is Missing Or Invalid Parameter\"\r",
									"var resultDescriptionTheClientDataIsMissingOrInvalidParameter = pm.globals.get(\"resultDescriptionTheClientDataIsMissingOrInvalidParameter\");\r",
									"//------------------------------------------------------------//\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"ControlThing : Status code is \" + statusCodeForbidden, function () {\r",
									"    pm.response.to.have.status(statusCodeForbidden);\r",
									"});\r",
									"\r",
									"pm.test('ControlThing : OperationStatus Code is '+'\"'+ resultCodeForbiddenMissingOrInvalidParameter +'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeForbiddenMissingOrInvalidParameter);\r",
									"});\r",
									"\r",
									"pm.test('ControlThing : OperationStatus DeveloperMessage is '+'\"'+ resultDescriptionTheClientDataIsMissingOrInvalidParameter+'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheClientDataIsMissingOrInvalidParameter);\r",
									"});\r",
									"\r",
									"pm.test('ControlThing : OperationStatus Details is '+'\"'+ detailsResponse.target_accountId + \" : \" + detailsResponse.developerMessage_accountId +'\"', function () {\r",
									"    let countDetails= jsonData.OperationStatus.Details;\r",
									"    for(let i=0;i<countDetails.length;i++){\r",
									"        pm.expect(countDetails[i].Target).to.eql(detailsResponse.target_accountId);\r",
									"        pm.expect(countDetails[i].DeveloperMessage).to.eql(detailsResponse.developerMessage_accountId);\r",
									"    }\r",
									"});\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// RemovePartner\r",
									" RemovePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemovePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemovePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemovePartner = {\r",
									"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemovePartner,\r",
									"            body: httpRequestRemovePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request RemovePartner');\r",
									"        let response = await reqPromise(optionsRemovePartner);\r",
									"        let jsonDataRemovePartner = await response.json();\r",
									"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
									"    \r",
									"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemovePartner is Success\r",
									"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveAccount\r",
									" RemoveAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemoveAccount = {\r",
									"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveAccount,\r",
									"            body: httpRequestRemoveAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveAccount');\r",
									"        let response = await reqPromise(optionsRemoveAccount);\r",
									"        let jsonDataRemoveAccount = await response.json();\r",
									"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
									"    \r",
									"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveAccount is Success\r",
									"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThing\r",
									" RemoveThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThing = {\r",
									"            url: url + provisioningapis + urlThingRemoveThing,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThing,\r",
									"            body: httpRequestRemoveThing\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveThing');\r",
									"        let response = await reqPromise(optionsRemoveThing);\r",
									"        let jsonDataRemoveThing = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThing)\r",
									"    \r",
									"        let operationStatusRemoveThing = await jsonDataRemoveThing.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThing : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThing : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThing is Success\r",
									"        pm.test('RemoveThing : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThing+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Description', resultDescriptionRemoveThing);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThingStateInfo\r",
									" RemoveThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"            \r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\"),\r",
									"                \"stateType\": fieldDataValue.CreateThingStateInfo.Type_Report, //Report\r",
									"                \"stateKey\": fieldDataValue.CreateThingStateInfo.SensorKey //Temp\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingRemoveThingStateInfo,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThingStateInfo,\r",
									"            body: httpRequestRemoveThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('response RemoveThingStateInfo');\r",
									"        let response = await reqPromise(optionsRemoveThingStateInfo);\r",
									"        let jsonDataRemoveThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataRemoveThingStateInfo',jsonDataRemoveThingStateInfo)\r",
									"    \r",
									"        let operationStatusRemoveThingStateInfo = await jsonDataRemoveThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThingStateInfo is Success\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThingStateInfo+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Description', resultDescriptionRemoveThingStateInfo);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"//---------------- LogDefaultValue --------------//\r",
									"//set variable to LogDefaultValue JSON.parse\r",
									"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
									"// console.log('LogDefaultValue',LogDefaultValue);\r",
									"//---------------- set globals Other --------------//\r",
									"var SearchLog = LogDefaultValue.SearchLog;\r",
									"// console.log('SearchLog',SearchLog);\r",
									"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
									"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
									"var kbn_version = SearchLog.header.kbn_version;\r",
									"var authorization = SearchLog.header.Authorization;\r",
									"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
									"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
									"var namespace = LogDefaultValue.Other.namespace_control4mg;\r",
									"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
									"var header_x_ais_accountkey = LogDefaultValue.Other.header_x_ais_accountkey;\r",
									"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
									"var methodPost = LogDefaultValue.Other.methodPost;\r",
									"\r",
									"// Detail\r",
									"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
									"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
									"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
									"\r",
									"// Summary\r",
									"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
									"// var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
									"// var customSummary = LogDefaultValue.OtherSummary.custom;\r",
									"// ControlAPIs\r",
									"var applicationName = LogDefaultValue.Control.applicationName_mg4;\r",
									"var cmdName = LogDefaultValue.Control.cmdNameThing;\r",
									"var endPointNameControlAPIs = LogDefaultValue.Control.endPointNameControlAPIs;\r",
									"var endPointNameDesireEx = LogDefaultValue.Control.endPointNameDesireEx;\r",
									"var containerId = LogDefaultValue.Control.containerId;\r",
									"var requestObjectUrlStaging = LogDefaultValue.Control.requestObjectUrlStagingThing;\r",
									"var xProtocolControl = LogDefaultValue.Control.xProtocolControl;\r",
									"var responseObjectPublished = LogDefaultValue.Control.responseObjectPublished;\r",
									"\r",
									"// Check CDR (Summary Log) and EDR (Detail Log)\r",
									"SearchLogFindTid = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSearchLogFindTid = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = pm.environment.get(\"GetResponse_ThingID\"); \r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestSearchLogFindTid = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"\r",
									"        let optionsSearchLogFindTid = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptSearchLogFindTid,\r",
									"            body: httpRequestSearchLogFindTid\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsSearchLogFindTid);\r",
									"        let jsonDataSearchLogFindTid = await response.json();\r",
									"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
									"        console.log('hits',hits)\r",
									"  \r",
									"        // find tid\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            // let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"        \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            if(applicationNameValue == applicationName){\r",
									"                let tid = hits[i]._source.cauldron.tid;\r",
									"                pm.environment.set(\"tid\", tid);\r",
									"                break;\r",
									"           }\r",
									"\r",
									"        }\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"CheckLog = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCheckLog = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = pm.environment.get(\"tid\");\r",
									"\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestCheckLog = {\r",
									"            mode: 'raw',\r",
									"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"        let optionsCheckLog = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptCheckLog,\r",
									"            body: httpRequestCheckLog\r",
									"        }; \r",
									"        let response = await reqPromise(optionsCheckLog);\r",
									"        let jsonDataCheckLog = await response.json();\r",
									"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
									"        \r",
									"        // //200\r",
									"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });     \r",
									"        \r",
									"        let hits = jsonDataCheckLog.hits.hits\r",
									"        console.log('hits',hits)\r",
									"  \r",
									"        // find logType\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            //  let logType = hits[i]._source.cauldron.logType\r",
									"            let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"           \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            \r",
									"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
									"            // console.log('resultDataLog',resultDataLog)\r",
									"\r",
									"            let tidControl = x_ais_OrderRef_ControlThing_fail + current_timestamp;\r",
									"            // console.log(tidControl);\r",
									"            if(applicationNameValue == applicationName){\r",
									"                 \r",
									"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ControlAPIs\r",
									"                    pm.test(\"Check Summary Log : ControlThing\" , function () {\r",
									"                        console.log(\"======== Check Summary Log ( Expected = Actual) [ControlThing] ==================\");\r",
									"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
									"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
									"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeForbiddenMissingOrInvalidParameter);\r",
									"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionTheClientDataIsMissingOrInvalidParameter);\r",
									"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
									"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        // console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
									"                        // console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
									"\r",
									"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
									"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
									"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeForbiddenMissingOrInvalidParameter ); \r",
									"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionTheClientDataIsMissingOrInvalidParameter); \r",
									"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
									"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"\r",
									"                        let thingId = pm.environment.get(\"GetResponse_ThingID\");\r",
									"                        let customUrl= urlCheckLog + requestObjectUrlStaging;\r",
									"                        let customAccountkey = null //pm.environment.get(\"GetResponse_AccountId\");\r",
									"\r",
									"                        // check identity\r",
									"                        // \"identity\":\"{\\\"ThingId\\\":\\\"60114adea32e8c0001576d2a\\\"}\"\r",
									"\r",
									"                        // \\\"identity\\\":\\\"{ \\\\\\\"ThingID\\\\\\\":\\\\\\\"60990b2526fdbc0001c32254\\\\\\\" }\\\"\r",
									"                        let dataSummaryIdentity = JSON.parse(resultDataLog.identity);\r",
									"\r",
									"                        console.log(\"identity.ThingID : \" + dataSummaryIdentity.ThingID + \" = \" + thingId);\r",
									"                        pm.expect(dataSummaryIdentity.ThingID).to.eql(thingId); \r",
									"\r",
									"                        // check custom\r",
									"                        // \\\"custom\\\":{ \\\"customData\\\":{ \\\"url\\\":\\\"mg-iot.sandais.com/api/v1/Control/Thing\\\", \\\"accountkey\\\":null, \\\"ThingID\\\":[ \\\"60990b2526fdbc0001c32254\\\" ] }, \\\"endPointSummary\\\":[ ] }\r",
									"\r",
									"                        let customData = resultDataLog.custom.customData;\r",
									"\r",
									"                        console.log(\"custom.url : \" + customData.url + \" = \" + customUrl);\r",
									"                        console.log(\"custom.accountkey : \" + customData.accountkey + \" = \" + customAccountkey);\r",
									"                        console.log(\"custom.ThingID[0] : \" + customData.ThingID[0] + \" = \" + thingId);\r",
									"\r",
									"                        pm.expect(customData.url).to.eql(customUrl); \r",
									"                        pm.expect(customData.accountkey).to.eql(customAccountkey); \r",
									"                        pm.expect(customData.ThingID[0]).to.eql(thingId); \r",
									"\r",
									"                        let custom = resultDataLog.custom.endPointSummary;\r",
									"\r",
									"                        console.log(\"custom.endPointSummary : \" + JSON.stringify(custom) + \" = \" + JSON.stringify([]));\r",
									"                        pm.expect(custom).to.eql([]); \r",
									"                    }); \r",
									"                }\r",
									"\r",
									"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail'\r",
									"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
									"                    // console.log('endPointNameValue ',endPointNameValue)\r",
									"                    \r",
									"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [ControlThing]\", function () {\r",
									"                        console.log(\"======== Check Detail Log ( Expected = Actual) [ControlThing] ==================\");\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
									"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
									"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
									"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
									"\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
									"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
									"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
									"                        // pm.expect(resultDataLog.EndPoint).to.eql(); \r",
									"                        \r",
									"                        // check requestObject\r",
									"                        // \"requestObject\":\"{\\\"headers\\\":{\\\"x-ais-orderref\\\":\\\"ControlThingfail_202101281301827\\\",\\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAEL8HZk2RWAR3L0/hOZPjC5nvaeNw1EUMpcFyr//lMVTkIlAkkY2KW0\\\"},\\\"body\\\":{\\\"ThingId\\\":\\\"601258fe96d0ed0001f5359e\\\",\\\"Sensors\\\":{\\\"Temp\\\":925}}}\"\r",
									"\r",
									"                        // \"requestObject\":\"{ \"url\":\"/api/v1/Control/Thing\", \"method\":\"POST\", \"headers\":{ \"Cache-Control\":\"no-cache\", \"Content-Type\":\"application/json\", \"Accept\":\"*/*\", \"Accept-Encoding\":\"gzip, deflate, br\", \"Host\":\"mg-iot.sandais.com\", \"User-Agent\":\"PostmanRuntime/7.26.8\", \"Content-Length\":\"84\", \"x-real-ip\":\"182.232.42.255\", \"x-forwarded-for\":\"182.232.42.255, 10.233.67.0\", \"x-forwarded-proto\":\"http\", \"x-ais-orderref\":\"ControlThingfail_202105102105057\", \"x-ais-accesstoken\":\"Bearer ibnxnVhs5Rx3IwglWv7/gVA/1TpQnKqAOBAADlRDvYhOpXwmlpYOEb5yfY5aZpoj0YRWRZM26i9HOqtc1fc1jpNDOK5JpISttmMEy59g2py7nLWonDe2YW2OPRGWSowk6+9ZihLU1fZ5d5jAqqrZaKlOAAI3N1TXDNLsHuKcOJMcERbCcaMqRaku+MY4/kzE+eyIdkfwwbjT91S2VQq+Wk2ooMWuLk6/DHVJhwbMP7YcE8nM5ZulK9CALXRip1Mpzowj6mFcU2ZKVegMrc8SMg==\", \"postman-token\":\"b86dd56c-f9b0-425c-a256-8491a8468bfa\", \"x-envoy-external-address\":\"10.233.67.0\", \"x-request-id\":\"224ba041-7229-4451-896b-581ddc0e7a1b\", \"x-envoy-original-path\":\"/mg4controlapis/api/v1/Control/Thing\", \"x-b3-traceid\":\"a69e338b68eae89126f734a50cd062e3\", \"x-b3-spanid\":\"ae04cb8d5048b9e6\", \"x-b3-parentspanid\":\"26f734a50cd062e3\", \"x-b3-sampled\":\"0\", \"x-ais-SessionId\":\"1620657971715\", \"identity\":\"{ \"ThingID\":\"6099473126fdbc0001c3587e\" }\", \"custom\":\"{ \"url\":\"mg-iot.sandais.com/api/v1/Control/Thing\", \"accountkey\":null, \"ThingID\":[ \"6099473126fdbc0001c3587e\" ] }\" }, \"queryString\":{ }, \"routeParamteters\":{ }, \"body\":{ \"ThingId\":\"6099473126fdbc0001c3587e\", \"Sensors\":{ \"Temp\":318 } } }\"\r",
									"                        \r",
									"                        let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
									"                        // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
									"\r",
									"                        let url = requestObjectUrlStaging; \r",
									"                        let urlCustom = urlCheckLog + requestObjectUrlStaging; \r",
									"                        let SensorKey = fieldDataValue.CreateThingStateInfo.SensorKey;\r",
									"                        let sensor = pm.environment.get(\"random_Sensor_Control\");\r",
									"                        let x_ais_orderref = x_ais_OrderRef_ControlThing_fail + current_timestamp;\r",
									"                        // let x_ais_AccountKey = pm.environment.get(\"GetResponse_AccountId\");\r",
									"                        let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken\");\r",
									"                        let thingId = pm.environment.get(\"GetResponse_ThingID\");\r",
									"\r",
									"                        console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
									"                        console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
									"                        // console.log(\"headers.x_ais_AccountKey : \" + jsonParseRequestObject.headers[header_x_ais_accountkey] + \" = \" + x_ais_AccountKey);\r",
									"                        console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"                        console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
									"\r",
									"                        pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
									"                        pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
									"                        // pm.expect(jsonParseRequestObject.headers[header_x_ais_accountkey]).to.eql(x_ais_AccountKey);\r",
									"                        pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                        pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
									"\r",
									"                        let identity = JSON.parse(jsonParseRequestObject.headers.identity)\r",
									"                        console.log(\"headers.identity.ThingID : \" + identity.ThingID + \" = \" + thingId);\r",
									"                        pm.expect(identity.ThingID).to.eql(thingId);\r",
									"                        \r",
									"                        let custom = JSON.parse(jsonParseRequestObject.headers.custom)\r",
									"                        console.log(\"headers.custom.url : \" + custom.url + \" = \" + urlCustom);\r",
									"                        console.log(\"headers.custom.accountkey : \" + custom.accountkey + \" = \" + null);\r",
									"                        console.log(\"headers.custom.ThingID[0] : \" + custom.ThingID[0] + \" = \" + thingId);\r",
									"                        \r",
									"                        pm.expect(custom.url).to.eql(urlCustom);\r",
									"                        pm.expect(custom.accountkey).to.eql(null);\r",
									"                        pm.expect(custom.ThingID[0]).to.eql(thingId);\r",
									"\r",
									"                        console.log(\"queryString : \" + JSON.stringify(jsonParseRequestObject.queryString) + \" = \" + JSON.stringify({}));\r",
									"                        pm.expect(jsonParseRequestObject.queryString).to.eql({});\r",
									"\r",
									"                        console.log(\"routeParamteters : \" + JSON.stringify(jsonParseRequestObject.routeParamteters) + \" = \" + JSON.stringify({}));\r",
									"                        pm.expect(jsonParseRequestObject.routeParamteters).to.eql({});\r",
									"\r",
									"                        console.log(\"resquest.body.ThingId : \" + jsonParseRequestObject.body.ThingId + \" = \" + thingId);\r",
									"                        console.log(\"resquest.body.Sensors.\" + SensorKey + \"  : \" + jsonParseRequestObject.body.Sensors[SensorKey] + \" = \" + sensor);\r",
									"                        \r",
									"                        pm.expect(jsonParseRequestObject.body.ThingId).to.eql(thingId);\r",
									"                        pm.expect(jsonParseRequestObject.body.Sensors[SensorKey]).to.eql(sensor);\r",
									"\r",
									"                        // check responseObject\r",
									"                        // \\\"responseObject\\\":\\\"{ \\\\\\\"OperationStatus\\\\\\\":{ \\\\\\\"Code\\\\\\\":\\\\\\\"40300\\\\\\\", \\\\\\\"DeveloperMessage\\\\\\\":\\\\\\\"The Client Data is Missing Or Invalid Parameter\\\\\\\", \\\\\\\"Details\\\\\\\":[ { \\\\\\\"Target\\\\\\\":\\\\\\\"accountId\\\\\\\", \\\\\\\"DeveloperMessage\\\\\\\":\\\\\\\"The accountId data is missing or invalid parameter.\\\\\\\" } ] } }\\\"\r",
									"                        let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
									"                        // console.log('jsonParseResponseObject',jsonParseResponseObject);\r",
									"\r",
									"                        console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeForbiddenMissingOrInvalidParameter);\r",
									"                        console.log(\"response.OperationStatus.DeveloperMessage : \" + jsonParseResponseObject.OperationStatus.DeveloperMessage + \" = \" + resultDescriptionTheClientDataIsMissingOrInvalidParameter);\r",
									"\r",
									"                        pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeForbiddenMissingOrInvalidParameter);  \r",
									"                        pm.expect(jsonParseResponseObject.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheClientDataIsMissingOrInvalidParameter);  \r",
									"\r",
									"                        let countDetails= jsonParseResponseObject.OperationStatus.Details;\r",
									"                        for(let i=0;i<countDetails.length;i++){\r",
									"\r",
									"                            console.log(\"response.OperationStatus.Details[\"+ i +\"].Target : \" + countDetails[i].Target + \" = \" + detailsResponse.target_accountId);\r",
									"                            console.log(\"response.OperationStatus.Details[\"+ i +\"].DeveloperMessage : \" + countDetails[i].DeveloperMessage + \" = \" + detailsResponse.developerMessage_accountId);\r",
									"\r",
									"                            pm.expect(countDetails[i].Target).to.eql(detailsResponse.target_accountId);\r",
									"                            pm.expect(countDetails[i].DeveloperMessage).to.eql(detailsResponse.developerMessage_accountId);\r",
									"                        }\r",
									"                    }); \r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"setTimeout(function(){SearchLogFindTid();}, 20000); \r",
									"setTimeout(function(){CheckLog();}, 30000); \r",
									"\r",
									"setTimeout(function(){RemoveThingStateInfo();}, 40000); \r",
									"setTimeout(function(){RemoveThing();}, 45000); \r",
									"setTimeout(function(){RemoveAccount();}, 50000); \r",
									"setTimeout(function(){RemovePartner();}, 55000); \r",
									"\r",
									"setTimeout(function(){\r",
									"pm.environment.unset(\"current_timestamp\");\r",
									"pm.environment.unset(\"AccessToken\");\r",
									"pm.environment.unset(\"random_number\");\r",
									"pm.environment.unset(\"PartnerName\");\r",
									"pm.environment.unset(\"MerchantContact\");\r",
									"pm.environment.unset(\"CPID\");\r",
									"pm.environment.unset(\"GetResponse_PartnerId\");\r",
									"pm.environment.unset(\"AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountId\");\r",
									"pm.environment.unset(\"random_IM\");\r",
									"pm.environment.unset(\"random_ICCID\");\r",
									"pm.environment.unset(\"ThingName\");\r",
									"pm.environment.unset(\"GetResponse_ThingID\");\r",
									"pm.environment.unset(\"random_Sensor\");\r",
									"pm.environment.unset(\"GetResponse_IMSI\");\r",
									"pm.environment.unset(\"tid\");\r",
									"pm.environment.unset(\"SensorKey\");\r",
									"pm.environment.unset(\"random_Sensor_Control\");\r",
									"}, 90000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var Username = pm.environment.get(\"Username\");\r",
									"var Password = pm.environment.get(\"Password\");\r",
									"\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"pm.environment.set(\"SensorKey\",fieldDataValue.CreateThingStateInfo.SensorKey)\r",
									"\r",
									"//format YYYYMMDDHHMMSSS\r",
									"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
									"// console.log('currentTmestamp',currentTmestamp);\r",
									"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- statusCodeList --------------//\r",
									"//set variable to statusCodeList JSON.parse\r",
									"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
									"//set global variable to statusCode 200\r",
									"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
									"//set global variable to statusCode 201\r",
									"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
									"//set global variable to statusCode 403\r",
									"pm.globals.set(\"statusCodeForbidden\", statusCodeList.statusCodeForbidden);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultCodeList --------------//\r",
									"//set variable to resultCodeList JSON.parse\r",
									"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
									"//set global variable to resultCode \"20000\"\r",
									"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
									"//set global variable to resultCode \"20100\"\r",
									"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
									"//set global variable to resultCode \"40300\"\r",
									"pm.globals.set(\"resultCodeForbiddenMissingOrInvalidParameter\", resultCodeList.resultCodeForbiddenMissingOrInvalidParameter);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionSuccessList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
									"//set global variable to resultDescription \"SignInProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
									"//set global variable to resultDescription \"CreatePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
									"//set global variable to resultDescription \"CreateAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
									"//set global variable to resultDescription \"CreateThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThing\", resultDescriptionSuccessList.resultDescriptionCreateThing);\r",
									"//set global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThingStateInfo\", resultDescriptionSuccessList.resultDescriptionCreateThingStateInfo);\r",
									"//set global variable to resultDescription \"RemovePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
									"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
									"//set global variable to resultDescription \"RemoveThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThing\", resultDescriptionSuccessList.resultDescriptionRemoveThing);\r",
									"//set global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThingStateInfo\", resultDescriptionSuccessList.resultDescriptionRemoveThingStateInfo);\r",
									"//set global variable to resultDescription \"ControlOneThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessControlOneThing\", resultDescriptionSuccessList.resultDescriptionSuccessControlOneThing);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionErrorList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
									"//set global variable to resultDescription \"The Parameter x-ais-AccountKey is Missing Or Invalid\"\r",
									"// pm.globals.set(\"resultDescriptionErrorParameterXAisAccountKeyMissingOrInvalid\", resultDescriptionErrorList.resultDescriptionErrorParameterXAisAccountKeyMissingOrInvalid);\r",
									"//set global variable to resultDescription \"The Client Data is Missing Or Invalid Parameter\"\r",
									"pm.globals.set(\"resultDescriptionTheClientDataIsMissingOrInvalidParameter\", resultDescriptionErrorList.resultDescriptionTheClientDataIsMissingOrInvalidParameter);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- HeaderList --------------//\r",
									"//set variable to HeaderList JSON.parse\r",
									"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
									"//---------------- set globals Other --------------//\r",
									"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
									"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
									"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
									"//set global variable to kbn-versio \"7.5.1\"\r",
									"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Signin_ --------------//\r",
									"//set global variable to x_ais_OrderRef \"Signin_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreatePartner --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
									"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
									"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
									"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreateAccount --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
									"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
									"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Thing --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThing\", HeaderList.Thing.x_ais_OrderRef_CreateThing);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThing\", HeaderList.Thing.x_ais_OrderDesc_CreateThing);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThing\", HeaderList.Thing.x_ais_OrderRef_RemoveThing);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThing\", HeaderList.Thing.x_ais_OrderDesc_RemoveThing);\r",
									"//set global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_RemoveThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_RemoveThingStateInfo);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Control --------------//\r",
									"//set global variable to x_ais_OrderRef \"ControlThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ControlThing\", HeaderList.Control.x_ais_OrderRef_ControlThing);\r",
									"//set global variable to x_ais_OrderRef \"ControlThingfail_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ControlThing_fail\", HeaderList.Control.x_ais_OrderRef_ControlThing_fail);\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"SignInProcess is Success\"\r",
									"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
									"//get global variable to resultDescription \"CreatePartner is Success\"\r",
									"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
									"//get global variable to resultDescription \"CreateAccount is Success\"\r",
									"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
									"//get global variable to resultDescription \"CreateThing is Success\"\r",
									"var resultDescriptionCreateThing = pm.globals.get(\"resultDescriptionCreateThing\");\r",
									"//get global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"var resultDescriptionCreateThingStateInfo = pm.globals.get(\"resultDescriptionCreateThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- urlRouteList --------------//\r",
									"//set variable to urlRouteList JSON.parse\r",
									"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
									"//---------------- set url Create --------------//\r",
									"//set global variable to url \"/api/v1/auth/signin\"\r",
									"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
									"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
									"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"pm.globals.set(\"urlThingCreateThing\", urlRouteList.Thing.urlThingCreateThing);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"pm.globals.set(\"urlThingCreateThingStateInfo\", urlRouteList.Thing.urlThingCreateThingStateInfo);\r",
									"//---------------- get url Create --------------//\r",
									"//get global variable to url \"/api/v1/auth/signin\"\r",
									"var urlSignin = pm.globals.get(\"urlSignin\");\r",
									"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
									"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"var urlThingCreateThing = pm.globals.get(\"urlThingCreateThing\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"var urlThingCreateThingStateInfo = pm.globals.get(\"urlThingCreateThingStateInfo\");\r",
									"//---------------- set url Remove --------------//\r",
									"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
									"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"pm.globals.set(\"urlThingRemoveThing\", urlRouteList.Thing.urlThingRemoveThing);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"pm.globals.set(\"urlThingRemoveThingStateInfo\", urlRouteList.Thing.urlThingRemoveThingStateInfo);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Signin_ --------------//\r",
									"//get global variable to x_ais_OrderRef \"Signin_\"\r",
									"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"var x_ais_OrderRef_CreateThing = pm.globals.get(\"x_ais_OrderRef_CreateThing\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"var x_ais_OrderDesc_CreateThing = pm.globals.get(\"x_ais_OrderDesc_CreateThing\");\r",
									"//get global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"var x_ais_OrderRef_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderRef_CreateThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"var x_ais_OrderDesc_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_CreateThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// Signin get token\r",
									" Signin = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSignin = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestSignin = {\r",
									"            mode: 'raw',\r",
									"            raw: \r",
									"            JSON.stringify({\r",
									"                username:Username,\r",
									"                password:Password\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsSignin = {\r",
									"            url: url + provisioningapis + urlSignin,\r",
									"            method: 'POST',\r",
									"            header: headersOptSignin,\r",
									"            body: httpRequestSignin\r",
									"        };\r",
									"        // console.log('request Signin');\r",
									"        let response = await reqPromise(optionsSignin);\r",
									"        let jsonDataSignin = await response.json();\r",
									"\r",
									"        // setAccessToken\r",
									"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
									"\r",
									"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // SignInProcess is Success\r",
									"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
									"        });\r",
									"\r",
									"        //set random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //set PartnerName\r",
									"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
									"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
									"        //set MerchantContact\r",
									"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
									"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
									"        // set CPID\r",
									"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
									"        pm.environment.set(\"CPID\", CPIDValue)\r",
									"        \r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreatePartner\r",
									" CreatePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreatePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreatePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
									"                \"PartnerType\": [\r",
									"                    \"Supplier\",\r",
									"                    \"Customer\"\r",
									"                ],\r",
									"                \"PartnerDetail\": {\r",
									"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
									"                    \"CPID\": pm.environment.get(\"CPID\")\r",
									"                },\r",
									"                \"Property\": {\r",
									"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsCreatePartner = {\r",
									"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreatePartner,\r",
									"            body: httpRequestCreatePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsCreatePartner);\r",
									"        let jsonDataCreatePartner = await response.json();\r",
									"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
									"    \r",
									"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreatePartner is Success\r",
									"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
									"        });\r",
									"\r",
									"        //GetResponse_PartnerId\r",
									"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
									"\r",
									"        //Accountname\r",
									"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
									"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateAccount\r",
									" CreateAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreateAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
									"                })\r",
									"        };\r",
									"        \r",
									"        let optionsCreateAccount = {\r",
									"            url: url + provisioningapis + urlAccountCreateAccount,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateAccount,\r",
									"            body: httpRequestCreateAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateAccount');\r",
									"        let response = await reqPromise(optionsCreateAccount);\r",
									"        let jsonDataCreateAccount = await response.json();\r",
									"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
									"    \r",
									"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateAccount : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateAccount is Success\r",
									"        pm.test('CreateAccount : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
									"        });\r",
									"        // GetResponse_AccountName\r",
									"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
									"        // GetResponse_AccountId\r",
									"        pm.environment.set(\"GetResponse_AccountId\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
									"        // random_IM\r",
									"        pm.environment.set(\"random_IM\", _.random(10000000, 99999999)+\" \"+_.random(1000000, 9999999))\r",
									"        // random_ICCID\r",
									"        pm.environment.set(\"random_ICCID\", _.random(1000000, 9999999)+\" \"+_.random(100000, 999999))\r",
									"        // random_number\r",
									"        pm.environment.set(\"random_number\",pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //ThingName\r",
									"        let thingNameValue = fieldDataValue.Thing.ThingNameValue; // \"Sensor_TestThingName\"\r",
									"        pm.environment.set(\"ThingName\", thingNameValue + pm.environment.get(\"random_number\"))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThing\r",
									" CreateThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreateThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingName\": pm.environment.get(\"ThingName\"),\r",
									"                \"IMEI\": pm.environment.get(\"random_IM\"),\r",
									"                \"IMSI\": pm.environment.get(\"random_IM\"),\r",
									"                \"ICCID\": pm.environment.get(\"random_ICCID\"),\r",
									"                \"RouteUrl\": fieldDataValue.Thing.RouteUrlValue , //[\"http://10.12.3.4:2019/api/information/AddInformation\"]\r",
									"                \"RouteInfo\": {\r",
									"                    \"MIMO_ID\": fieldDataValue.Thing.RouteInfoMIMOIDValue , //\"606edada\"\r",
									"                    \"MIMO_SerialNo\": fieldDataValue.Thing.RouteInfoMIMOSerialNoValue //5466758878\r",
									"                },\r",
									"                \"RouteFlag\": {\r",
									"                    \"ThingName\": fieldDataValue.Thing.RouteFlagThingNameValue , //true\r",
									"                    \"ThingToken\": fieldDataValue.Thing.RouteFlagThingTokenValue, //true\r",
									"                    \"IMEI\": fieldDataValue.Thing.RouteFlagIMEIValue, //true\r",
									"                    \"ICCID\": fieldDataValue.Thing.RouteFlagICCIDValue, //true\r",
									"                    \"RouteInfo\": fieldDataValue.Thing.RouteFlagRouteInfoValue //true\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsCreateThing = {\r",
									"            url: url + provisioningapis + urlThingCreateThing,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThing,\r",
									"            body: httpRequestCreateThing\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThing');\r",
									"        let response = await reqPromise(optionsCreateThing);\r",
									"        let jsonDataCreateThing = await response.json();\r",
									"        // console.log('jsonDataCreateThing',jsonDataCreateThing)\r",
									"    \r",
									"        let operationStatusCreateThing = await jsonDataCreateThing.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateThing : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateThing : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateThing is Success\r",
									"        pm.test('CreateThing : OperationStatus Description is '+'\"'+ resultDescriptionCreateThing+'\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Description', resultDescriptionCreateThing);\r",
									"        });\r",
									"\r",
									"        pm.environment.set(\"GetResponse_ThingID\",jsonDataCreateThing.ThingInfo.ThingId)\r",
									"\r",
									"        //Get Random Sensor \r",
									"        pm.environment.set(\"random_Sensor\", _.random(100, 999))\r",
									"\r",
									"        //Get Random Sensor Control\r",
									"        pm.environment.set(\"random_Sensor_Control\", _.random(100, 999))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThingStateInfo\r",
									" CreateThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        // {\"Temp\" : pm.environment.get(\"random_Sensor\")}\r",
									"        let sensorValue = {};\r",
									"        sensorValue[fieldDataValue.CreateThingStateInfo.SensorKey] = pm.environment.get(\"random_Sensor\");\r",
									"        // console.log('sensorValue',sensorValue);\r",
									"        \r",
									"        let httpRequestCreateThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": [\r",
									"                    pm.environment.get(\"GetResponse_ThingID\")\r",
									"                ],\r",
									"                \"Type\": fieldDataValue.CreateThingStateInfo.Type_Report,\r",
									"                \"Sensor\": sensorValue\r",
									"            })\r",
									"        };\r",
									"    \r",
									"        let optionsCreateThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingCreateThingStateInfo,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThingStateInfo,\r",
									"            body: httpRequestCreateThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThingStateInfo');\r",
									"        let response = await reqPromise(optionsCreateThingStateInfo);\r",
									"        let jsonDataCreateThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataCreateThingStateInfo',jsonDataCreateThingStateInfo)\r",
									"    \r",
									"        let operationStatusCreateThingStateInfo = await jsonDataCreateThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"CreateThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //CreateThingStateInfo is Success\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionCreateThingStateInfo+'\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Description', resultDescriptionCreateThingStateInfo);\r",
									"        });\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"Signin();\r",
									"setTimeout(async function(){await CreatePartner();}, 3000); \r",
									"setTimeout(async function(){await CreateAccount();}, 6000); \r",
									"setTimeout(async function(){await CreateThing();}, 8000); \r",
									"setTimeout(async function(){await CreateThingStateInfo();}, 9000); \r",
									"setTimeout(async function(){}, 10000);  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-ais-OrderRef",
								"value": "{{x_ais_OrderRef_ControlThing_fail}}{{current_timestamp}}"
							},
							{
								"key": "x-ais-AccountKey",
								"type": "text",
								"value": "{{GetResponse_AccountId}}",
								"disabled": true
							},
							{
								"key": "x-ais-AccessToken",
								"value": "{{Bearer}} {{AccessToken}}"
							},
							{
								"key": "Accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"ThingId\": \"{{GetResponse_ThingID}}\",\r\n  \"Sensors\": {\r\n    \"{{SensorKey}}\": {{random_Sensor_Control}}\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{url}}{{mg4controlapis}}/api/v1/Control/Thing",
							"host": [
								"{{url}}{{mg4controlapis}}"
							],
							"path": [
								"api",
								"v1",
								"Control",
								"Thing"
							]
						},
						"description": "Type:Desire"
					},
					"response": []
				},
				{
					"name": "ControlThing_TST_F1_0_2_003_Error_ThingIdNotObjectId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"//---------------- detailsResponse --------------//\r",
									"//set variable to detailsResponse JSON.parse\r",
									"var detailsResponse = JSON.parse(pm.environment.get(\"detailsResponse\"));\r",
									"// console.log('detailsResponse',detailsResponse);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to xAisOrderRef \"RemoveThing_\"\r",
									"var x_ais_OrderRef_RemoveThing = pm.globals.get(\"x_ais_OrderRef_RemoveThing\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"var x_ais_OrderDesc_RemoveThing = pm.globals.get(\"x_ais_OrderDesc_RemoveThing\");\r",
									"//get global variable to x_ais_OrderRef \"RemoveThingStateInfo_\"\r",
									"var x_ais_OrderDesc_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_RemoveThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThingStateInfo\"\r",
									"var x_ais_OrderRef_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderRef_RemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Control --------------//\r",
									"//get global variable to x_ais_OrderRef \"ControlThing_\"\r",
									"var x_ais_OrderRef_ControlThing = pm.globals.get(\"x_ais_OrderRef_ControlThing\");\r",
									"//get global variable to x_ais_OrderRef \"ControlThingfail_\"\r",
									"var x_ais_OrderRef_ControlThing_fail = pm.globals.get(\"x_ais_OrderRef_ControlThing_fail\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get url Remove --------------//\r",
									"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
									"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"var urlThingRemoveThing = pm.globals.get(\"urlThingRemoveThing\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"var urlThingRemoveThingStateInfo = pm.globals.get(\"urlThingRemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"RemovePartner is Success\"\r",
									"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
									"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
									"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
									"//get global variable to resultDescription \"RemoveThing is Success\"\r",
									"var resultDescriptionRemoveThing = pm.globals.get(\"resultDescriptionRemoveThing\");\r",
									"//get global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"var resultDescriptionRemoveThingStateInfo = pm.globals.get(\"resultDescriptionRemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 403\r",
									"var statusCodeForbidden = pm.globals.get(\"statusCodeForbidden\");\r",
									"//get global variable to resultCode \"40300\"\r",
									"var resultCodeForbiddenMissingOrInvalidParameter = pm.globals.get(\"resultCodeForbiddenMissingOrInvalidParameter\");\r",
									"//get global variable to resultDescription \"The ThingId field is not Object Id.\"\r",
									"// var resultDescriptionErrorTheThingIdfieldIsNotObjectId = pm.globals.get(\"resultDescriptionErrorTheThingIdFieldIsNotObjectId\");\r",
									"//get global variable to statusCode 400\r",
									"var statusCodeBadRequest = pm.globals.get(\"statusCodeBadRequest\");\r",
									"//get global variable to resultCode \"40000\"\r",
									"var resultCodeBadRequest_40000 = pm.globals.get(\"resultCodeBadRequest_40000\");\r",
									"//get global variable to resultDescription \"The client requested missing or invalid  format.\"\r",
									"var resultDescriptionTheClientRequestedMissingOrInvalidFormat = pm.globals.get(\"resultDescriptionTheClientRequestedMissingOrInvalidFormat\");\r",
									"//------------------------------------------------------------//\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"ControlThing : Status code is \" + statusCodeBadRequest, function () {\r",
									"    pm.response.to.have.status(statusCodeBadRequest);\r",
									"});\r",
									"\r",
									"pm.test('ControlThing : OperationStatus Code is '+'\"'+ resultCodeBadRequest_40000 +'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeBadRequest_40000);\r",
									"});\r",
									"\r",
									"pm.test('ControlThing : OperationStatus DeveloperMessage is '+'\"'+ resultDescriptionTheClientRequestedMissingOrInvalidFormat+'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheClientRequestedMissingOrInvalidFormat);\r",
									"});\r",
									"\r",
									"pm.test('ControlThing : OperationStatus Details is '+'\"'+ detailsResponse.target_ThingId + \" : \" + detailsResponse.developerMessage_ThingId_notObjectId+'\"', function () {\r",
									"    let countDetails= jsonData.OperationStatus.Details;\r",
									"    for(let i=0;i<countDetails.length;i++){\r",
									"        pm.expect(countDetails[i].Target).to.eql(detailsResponse.target_ThingId);\r",
									"        pm.expect(countDetails[i].DeveloperMessage).to.eql(detailsResponse.developerMessage_ThingId_notObjectId);\r",
									"    }\r",
									"});\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// RemovePartner\r",
									" RemovePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemovePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemovePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemovePartner = {\r",
									"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemovePartner,\r",
									"            body: httpRequestRemovePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request RemovePartner');\r",
									"        let response = await reqPromise(optionsRemovePartner);\r",
									"        let jsonDataRemovePartner = await response.json();\r",
									"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
									"    \r",
									"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemovePartner is Success\r",
									"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveAccount\r",
									" RemoveAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemoveAccount = {\r",
									"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveAccount,\r",
									"            body: httpRequestRemoveAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveAccount');\r",
									"        let response = await reqPromise(optionsRemoveAccount);\r",
									"        let jsonDataRemoveAccount = await response.json();\r",
									"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
									"    \r",
									"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveAccount is Success\r",
									"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThing\r",
									" RemoveThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThing = {\r",
									"            url: url + provisioningapis + urlThingRemoveThing,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThing,\r",
									"            body: httpRequestRemoveThing\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveThing');\r",
									"        let response = await reqPromise(optionsRemoveThing);\r",
									"        let jsonDataRemoveThing = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThing)\r",
									"    \r",
									"        let operationStatusRemoveThing = await jsonDataRemoveThing.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThing : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThing : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThing is Success\r",
									"        pm.test('RemoveThing : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThing+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Description', resultDescriptionRemoveThing);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThingStateInfo\r",
									" RemoveThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"            \r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\"),\r",
									"                \"stateType\": fieldDataValue.CreateThingStateInfo.Type_Report, //Report\r",
									"                \"stateKey\": fieldDataValue.CreateThingStateInfo.SensorKey //Temp\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingRemoveThingStateInfo,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThingStateInfo,\r",
									"            body: httpRequestRemoveThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('response RemoveThingStateInfo');\r",
									"        let response = await reqPromise(optionsRemoveThingStateInfo);\r",
									"        let jsonDataRemoveThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataRemoveThingStateInfo',jsonDataRemoveThingStateInfo)\r",
									"    \r",
									"        let operationStatusRemoveThingStateInfo = await jsonDataRemoveThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThingStateInfo is Success\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThingStateInfo+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Description', resultDescriptionRemoveThingStateInfo);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"//---------------- LogDefaultValue --------------//\r",
									"//set variable to LogDefaultValue JSON.parse\r",
									"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
									"// console.log('LogDefaultValue',LogDefaultValue);\r",
									"//---------------- set globals Other --------------//\r",
									"var SearchLog = LogDefaultValue.SearchLog;\r",
									"// console.log('SearchLog',SearchLog);\r",
									"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
									"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
									"var kbn_version = SearchLog.header.kbn_version;\r",
									"var authorization = SearchLog.header.Authorization;\r",
									"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
									"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
									"var namespace = LogDefaultValue.Other.namespace_control4mg;\r",
									"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
									"var header_x_ais_accountkey = LogDefaultValue.Other.header_x_ais_accountkey;\r",
									"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
									"var methodPost = LogDefaultValue.Other.methodPost;\r",
									"\r",
									"// Detail\r",
									"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
									"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
									"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
									"\r",
									"// Summary\r",
									"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
									"// var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
									"var identitySummary = \"\";\r",
									"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
									"// ControlAPIs\r",
									"var applicationName = LogDefaultValue.Control.applicationName_mg4;\r",
									"var cmdName = LogDefaultValue.Control.cmdNameThing;\r",
									"var endPointNameControlAPIs = LogDefaultValue.Control.endPointNameControlAPIs;\r",
									"var endPointNameDesireEx = LogDefaultValue.Control.endPointNameDesireEx;\r",
									"var containerId = LogDefaultValue.Control.containerId;\r",
									"var requestObjectUrlStaging = LogDefaultValue.Control.requestObjectUrlStagingThing;\r",
									"var xProtocolControl = LogDefaultValue.Control.xProtocolControl;\r",
									"var responseObjectPublished = LogDefaultValue.Control.responseObjectPublished;\r",
									"\r",
									"// Check CDR (Summary Log) and EDR (Detail Log)\r",
									"SearchLogFindTid = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSearchLogFindTid = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = pm.environment.get(\"GetResponse_ThingID\") + pm.environment.get(\"Value_Control_Thing_TST_F1_0_2_003_Error\"); \r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestSearchLogFindTid = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"\r",
									"        let optionsSearchLogFindTid = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptSearchLogFindTid,\r",
									"            body: httpRequestSearchLogFindTid\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsSearchLogFindTid);\r",
									"        let jsonDataSearchLogFindTid = await response.json();\r",
									"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
									"        console.log('hits',hits)\r",
									"  \r",
									"        // find tid\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            // let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"        \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            if(applicationNameValue == applicationName){\r",
									"                let tid = hits[i]._source.cauldron.tid;\r",
									"                pm.environment.set(\"tid\", tid);\r",
									"                break;\r",
									"           }\r",
									"\r",
									"        }\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"CheckLog = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCheckLog = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = pm.environment.get(\"tid\");\r",
									"\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestCheckLog = {\r",
									"            mode: 'raw',\r",
									"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"        let optionsCheckLog = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptCheckLog,\r",
									"            body: httpRequestCheckLog\r",
									"        }; \r",
									"        let response = await reqPromise(optionsCheckLog);\r",
									"        let jsonDataCheckLog = await response.json();\r",
									"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
									"        \r",
									"        // //200\r",
									"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });     \r",
									"        \r",
									"        let hits = jsonDataCheckLog.hits.hits\r",
									"        console.log('hits',hits)\r",
									"  \r",
									"        // find logType\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            //  let logType = hits[i]._source.cauldron.logType\r",
									"            let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"           \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            \r",
									"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
									"            // console.log('resultDataLog',resultDataLog)\r",
									"\r",
									"            let tidControl = x_ais_OrderRef_ControlThing_fail + current_timestamp;\r",
									"            // console.log(tidControl);\r",
									"            if(applicationNameValue == applicationName){\r",
									"                 \r",
									"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ControlAPIs\r",
									"                    pm.test(\"Check Summary Log : ControlThing\" , function () {\r",
									"                        console.log(\"======== Check Summary Log ( Expected = Actual) [ControlThing] ==================\");\r",
									"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
									"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
									"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeBadRequest_40000);\r",
									"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionTheClientRequestedMissingOrInvalidFormat);\r",
									"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
									"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"identity : \" + JSON.stringify(resultDataLog.identity) + \" = \" + JSON.stringify(identitySummary));\r",
									"                        console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
									"\r",
									"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
									"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
									"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeBadRequest_40000 ); \r",
									"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionTheClientRequestedMissingOrInvalidFormat); \r",
									"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
									"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
									"                        pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
									"                    }); \r",
									"                }\r",
									"\r",
									"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ControlAPIs\r",
									"\r",
									"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
									"                    // console.log('endPointNameValue ',endPointNameValue)\r",
									"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [ControlThing]\", function () {\r",
									"                        console.log(\"======== Check Detail Log ( Expected = Actual) [ControlThing] ==================\");\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
									"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
									"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
									"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
									"\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
									"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
									"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
									"\r",
									"                        // if( endPointNameValue == endPointNameControlAPIs){     //\"endPointName\":\"ControlAPIs\"\r",
									"\r",
									"                            // console.log(\"custom1.endPointName : \" + resultDataLog.custom1.endPointName + \" = \" + endPointNameControlAPIs);\r",
									"                            // pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameControlAPIs); \r",
									"                        \r",
									"                            // check requestObject\r",
									"                            // \"requestObject\":\"{\\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Control/Thing\\\",\\\"method\\\":\\\"POST\\\",\\\"headers\\\":{\\\"x-ais-orderref\\\":\\\"ControlThing_202101271801621\\\",\\\"x-ais-accountkey\\\":\\\"60114adca32e8c0001576d22\\\",\\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAGhfn1wJCmf68Vf1zYxZ/fak0lmQ84nNnLsXbdYpFNnXEIlAkkY2KW0\\\"},\\\"body\\\":{\\\"ThingId\\\":\\\"60114adea32e8c0001576d2a\\\",\\\"Sensors\\\":{\\\"Temp\\\":955}}}\"\r",
									"\r",
									"                            // \\\"requestObject\\\":\\\"{ \\\\\\\"url\\\\\\\":\\\\\\\"/api/v1/Control/Thing\\\\\\\", \\\\\\\"method\\\\\\\":\\\\\\\"POST\\\\\\\", \\\\\\\"headers\\\\\\\":{ \\\\\\\"Cache-Control\\\\\\\":\\\\\\\"no-cache\\\\\\\", \\\\\\\"Content-Type\\\\\\\":\\\\\\\"application/json\\\\\\\", \\\\\\\"Accept\\\\\\\":\\\\\\\"*/*\\\\\\\", \\\\\\\"Accept-Encoding\\\\\\\":\\\\\\\"gzip, deflate, br\\\\\\\", \\\\\\\"Host\\\\\\\":\\\\\\\"mg-iot.sandais.com\\\\\\\", \\\\\\\"User-Agent\\\\\\\":\\\\\\\"PostmanRuntime/7.26.8\\\\\\\", \\\\\\\"Content-Length\\\\\\\":\\\\\\\"87\\\\\\\", \\\\\\\"x-real-ip\\\\\\\":\\\\\\\"182.232.42.255\\\\\\\", \\\\\\\"x-forwarded-for\\\\\\\":\\\\\\\"182.232.42.255, 10.233.67.0\\\\\\\", \\\\\\\"x-forwarded-proto\\\\\\\":\\\\\\\"http\\\\\\\", \\\\\\\"x-ais-orderref\\\\\\\":\\\\\\\"ControlThingfail_202105102105374\\\\\\\", \\\\\\\"x-ais-accountkey\\\\\\\":\\\\\\\"60994a1526fdbc0001c35b0d\\\\\\\", \\\\\\\"x-ais-accesstoken\\\\\\\":\\\\\\\"Bearer ibnxnVhs5Rx3IwglWv7/gVA/1TpQnKqAOBAADlRDvYhOpXwmlpYOEb5yfY5aZpoj0YRWRZM26i9HOqtc1fc1jpNDOK5JpISttmMEy59g2py7nLWonDe2YW2OPRGWSowk6+9ZihLU1fZ5d5jAqqrZaKlOAAI3N1TXDNLsHuKcOJMcERbCcaMqRaku+MY4/kzE+eyIdkfwwbjT91S2VQq+Wk2ooMWuLk6/DHVJhwbMP7aLzX8MiGJ9ojKULtZwuHTFD5C6xeFkGMBKVegMrc8SMg==\\\\\\\", \\\\\\\"postman-token\\\\\\\":\\\\\\\"23039e62-bcaa-4c88-9442-c5778cd1d047\\\\\\\", \\\\\\\"x-envoy-external-address\\\\\\\":\\\\\\\"10.233.67.0\\\\\\\", \\\\\\\"x-request-id\\\\\\\":\\\\\\\"11c44ae5-6386-4e6f-9a9c-8bde82cbad91\\\\\\\", \\\\\\\"x-envoy-original-path\\\\\\\":\\\\\\\"/mg4controlapis/api/v1/Control/Thing\\\\\\\", \\\\\\\"x-b3-traceid\\\\\\\":\\\\\\\"56764a899f76f7cc0a30174474d504fd\\\\\\\", \\\\\\\"x-b3-spanid\\\\\\\":\\\\\\\"59458821dea0ba77\\\\\\\", \\\\\\\"x-b3-parentspanid\\\\\\\":\\\\\\\"0a30174474d504fd\\\\\\\", \\\\\\\"x-b3-sampled\\\\\\\":\\\\\\\"0\\\\\\\", \\\\\\\"x-ais-SessionId\\\\\\\":\\\\\\\"1620658713009\\\\\\\" }\r",
									"                            \r",
									"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
									"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
									"\r",
									"                            let url = requestObjectUrlStaging; \r",
									"                            let urlCustom = urlCheckLog + requestObjectUrlStaging; \r",
									"                            let SensorKey = fieldDataValue.CreateThingStateInfo.SensorKey;\r",
									"                            let sensor = pm.environment.get(\"random_Sensor_Control\");\r",
									"                            let x_ais_orderref = x_ais_OrderRef_ControlThing_fail + current_timestamp;\r",
									"                            let x_ais_AccountKey = pm.environment.get(\"GetResponse_AccountId\");\r",
									"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken\");\r",
									"                            let thingId = pm.environment.get(\"GetResponse_ThingID\")+ pm.environment.get(\"Value_Control_Thing_TST_F1_0_2_003_Error\");\r",
									"                            \r",
									"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
									"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
									"                            console.log(\"headers.x_ais_AccountKey : \" + jsonParseRequestObject.headers[header_x_ais_accountkey] + \" = \" + x_ais_AccountKey);\r",
									"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
									"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accountkey]).to.eql(x_ais_AccountKey);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
									"\r",
									"                            console.log(\"queryString : \" + JSON.stringify(jsonParseRequestObject.queryString) + \" = \" + JSON.stringify({}));\r",
									"                            pm.expect(jsonParseRequestObject.queryString).to.eql({});\r",
									"\r",
									"                            console.log(\"routeParamteters : \" + JSON.stringify(jsonParseRequestObject.routeParamteters) + \" = \" + JSON.stringify({}));\r",
									"                            pm.expect(jsonParseRequestObject.routeParamteters).to.eql({});\r",
									"\r",
									"                            console.log(\"resquest.body.ThingId : \" + jsonParseRequestObject.body.ThingId + \" = \" + thingId);\r",
									"                            console.log(\"resquest.body.Sensors.\" + SensorKey + \"  : \" + jsonParseRequestObject.body.Sensors[SensorKey] + \" = \" + sensor);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.body.ThingId).to.eql(thingId);\r",
									"                            pm.expect(jsonParseRequestObject.body.Sensors[SensorKey]).to.eql(sensor);\r",
									"\r",
									"                            // check responseObject\r",
									"                            // \\\"responseObject\\\":\\\"{ \\\\\\\"OperationStatus\\\\\\\":{ \\\\\\\"Code\\\\\\\":\\\\\\\"40000\\\\\\\", \\\\\\\"DeveloperMessage\\\\\\\":\\\\\\\"The client requested missing or invalid  format.\\\\\\\", \\\\\\\"Details\\\\\\\":[ { \\\\\\\"Target\\\\\\\":\\\\\\\"ThingId\\\\\\\", \\\\\\\"DeveloperMessage\\\\\\\":\\\\\\\"'ThingId' is not Object Id.\\\\\\\" } ] } }\\\"\r",
									"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
									"                            // console.log('jsonParseResponseObject',jsonParseResponseObject);\r",
									"\r",
									"                            console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeBadRequest_40000);\r",
									"                            console.log(\"response.OperationStatus.DeveloperMessage : \" + jsonParseResponseObject.OperationStatus.DeveloperMessage + \" = \" + resultDescriptionTheClientRequestedMissingOrInvalidFormat);\r",
									"\r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeBadRequest_40000);  \r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheClientRequestedMissingOrInvalidFormat);  \r",
									"\r",
									"                            let countDetails= jsonParseResponseObject.OperationStatus.Details;\r",
									"                            for(let i=0;i<countDetails.length;i++){\r",
									"\r",
									"                                console.log(\"response.OperationStatus.Details[\"+ i +\"].Target : \" + countDetails[i].Target + \" = \" + detailsResponse.target_ThingId);\r",
									"                                console.log(\"response.OperationStatus.Details[\"+ i +\"].DeveloperMessage : \" + countDetails[i].DeveloperMessage + \" = \" + detailsResponse.developerMessage_ThingId_notObjectId);\r",
									"\r",
									"                                pm.expect(countDetails[i].Target).to.eql(detailsResponse.target_ThingId);\r",
									"                                pm.expect(countDetails[i].DeveloperMessage).to.eql(detailsResponse.developerMessage_ThingId_notObjectId);\r",
									"                            }\r",
									"                        // }\r",
									"\r",
									"                    }); \r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"setTimeout(function(){SearchLogFindTid();}, 20000); \r",
									"setTimeout(function(){CheckLog();}, 30000); \r",
									"\r",
									"setTimeout(function(){RemoveThingStateInfo();}, 40000); \r",
									"setTimeout(function(){RemoveThing();}, 45000); \r",
									"setTimeout(function(){RemoveAccount();}, 50000); \r",
									"setTimeout(function(){RemovePartner();}, 55000); \r",
									"\r",
									"setTimeout(function(){\r",
									"pm.environment.unset(\"current_timestamp\");\r",
									"pm.environment.unset(\"AccessToken\");\r",
									"pm.environment.unset(\"random_number\");\r",
									"pm.environment.unset(\"PartnerName\");\r",
									"pm.environment.unset(\"MerchantContact\");\r",
									"pm.environment.unset(\"CPID\");\r",
									"pm.environment.unset(\"GetResponse_PartnerId\");\r",
									"pm.environment.unset(\"AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountId\");\r",
									"pm.environment.unset(\"random_IM\");\r",
									"pm.environment.unset(\"random_ICCID\");\r",
									"pm.environment.unset(\"ThingName\");\r",
									"pm.environment.unset(\"GetResponse_ThingID\");\r",
									"pm.environment.unset(\"random_Sensor\");\r",
									"pm.environment.unset(\"tid\");\r",
									"pm.environment.unset(\"Value_Control_Thing_TST_F1_0_2_003_Error\");\r",
									"pm.environment.unset(\"SensorKey\");\r",
									"pm.environment.unset(\"random_Sensor_Control\");\r",
									"}, 90000); "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var Username = pm.environment.get(\"Username\");\r",
									"var Password = pm.environment.get(\"Password\");\r",
									"\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"pm.environment.set(\"SensorKey\",fieldDataValue.CreateThingStateInfo.SensorKey)\r",
									"pm.environment.set(\"Value_Control_Thing_TST_F1_0_2_003_Error\",fieldDataValue.Control.Value_Control_Thing_TST_F1_0_2_003_Error)\r",
									"\r",
									"//format YYYYMMDDHHMMSSS\r",
									"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
									"// console.log('currentTmestamp',currentTmestamp);\r",
									"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- statusCodeList --------------//\r",
									"//set variable to statusCodeList JSON.parse\r",
									"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
									"//set global variable to statusCode 200\r",
									"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
									"//set global variable to statusCode 201\r",
									"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
									"//set global variable to statusCode 403\r",
									"pm.globals.set(\"statusCodeForbidden\", statusCodeList.statusCodeForbidden);\r",
									"//set global variable to statusCode 400\r",
									"pm.globals.set(\"statusCodeBadRequest\", statusCodeList.statusCodeBadRequest);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultCodeList --------------//\r",
									"//set variable to resultCodeList JSON.parse\r",
									"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
									"//set global variable to resultCode \"20000\"\r",
									"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
									"//set global variable to resultCode \"20100\"\r",
									"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
									"//set global variable to resultCode \"40300\"\r",
									"pm.globals.set(\"resultCodeForbiddenMissingOrInvalidParameter\", resultCodeList.resultCodeForbiddenMissingOrInvalidParameter);\r",
									"//set global variable to resultCode \"40000\"\r",
									"pm.globals.set(\"resultCodeBadRequest_40000\", resultCodeList.resultCodeBadRequest_40000);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionSuccessList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
									"//set global variable to resultDescription \"SignInProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
									"//set global variable to resultDescription \"CreatePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
									"//set global variable to resultDescription \"CreateAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
									"//set global variable to resultDescription \"CreateThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThing\", resultDescriptionSuccessList.resultDescriptionCreateThing);\r",
									"//set global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThingStateInfo\", resultDescriptionSuccessList.resultDescriptionCreateThingStateInfo);\r",
									"//set global variable to resultDescription \"RemovePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
									"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
									"//set global variable to resultDescription \"RemoveThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThing\", resultDescriptionSuccessList.resultDescriptionRemoveThing);\r",
									"//set global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThingStateInfo\", resultDescriptionSuccessList.resultDescriptionRemoveThingStateInfo);\r",
									"//set global variable to resultDescription \"Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccess\", resultDescriptionSuccessList.resultDescriptionSuccess);\r",
									"//set global variable to resultDescription \"Created Success\"\r",
									"pm.globals.set(\"resultDescriptionCreatedSuccess\", resultDescriptionSuccessList.resultDescriptionCreatedSuccess);\r",
									"//set global variable to resultDescription \"ControlOneThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessControlOneThing\", resultDescriptionSuccessList.resultDescriptionSuccessControlOneThing);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionErrorList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
									"// //set global variable to resultDescription \"The ThingId field is not Object Id.\"\r",
									"// pm.globals.set(\"resultDescriptionErrorTheThingIdFieldIsNotObjectId\", resultDescriptionErrorList.resultDescriptionErrorTheThingIdFieldIsNotObjectId);\r",
									"//set global variable to resultDescription \"The client requested missing or invalid  format.\"\r",
									"pm.globals.set(\"resultDescriptionTheClientRequestedMissingOrInvalidFormat\", resultDescriptionErrorList.resultDescriptionTheClientRequestedMissingOrInvalidFormat);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- HeaderList --------------//\r",
									"//set variable to HeaderList JSON.parse\r",
									"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
									"//---------------- set globals Other --------------//\r",
									"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
									"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
									"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
									"//set global variable to kbn-versio \"7.5.1\"\r",
									"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Signin_ --------------//\r",
									"//set global variable to x_ais_OrderRef \"Signin_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreatePartner --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
									"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
									"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
									"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreateAccount --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
									"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
									"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Thing --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThing\", HeaderList.Thing.x_ais_OrderRef_CreateThing);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThing\", HeaderList.Thing.x_ais_OrderDesc_CreateThing);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThing\", HeaderList.Thing.x_ais_OrderRef_RemoveThing);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThing\", HeaderList.Thing.x_ais_OrderDesc_RemoveThing);\r",
									"//set global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_RemoveThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_RemoveThingStateInfo);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Control --------------//\r",
									"//set global variable to x_ais_OrderRef \"ControlThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ControlThing\", HeaderList.Control.x_ais_OrderRef_ControlThing);\r",
									"//set global variable to x_ais_OrderRef \"ControlThingfail_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ControlThing_fail\", HeaderList.Control.x_ais_OrderRef_ControlThing_fail);\r",
									"\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"SignInProcess is Success\"\r",
									"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
									"//get global variable to resultDescription \"CreatePartner is Success\"\r",
									"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
									"//get global variable to resultDescription \"CreateAccount is Success\"\r",
									"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
									"//get global variable to resultDescription \"CreateThing is Success\"\r",
									"var resultDescriptionCreateThing = pm.globals.get(\"resultDescriptionCreateThing\");\r",
									"//get global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"var resultDescriptionCreateThingStateInfo = pm.globals.get(\"resultDescriptionCreateThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- urlRouteList --------------//\r",
									"//set variable to urlRouteList JSON.parse\r",
									"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
									"//---------------- set url Create --------------//\r",
									"//set global variable to url \"/api/v1/auth/signin\"\r",
									"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
									"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
									"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"pm.globals.set(\"urlThingCreateThing\", urlRouteList.Thing.urlThingCreateThing);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"pm.globals.set(\"urlThingCreateThingStateInfo\", urlRouteList.Thing.urlThingCreateThingStateInfo);\r",
									"//---------------- get url Create --------------//\r",
									"//get global variable to url \"/api/v1/auth/signin\"\r",
									"var urlSignin = pm.globals.get(\"urlSignin\");\r",
									"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
									"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"var urlThingCreateThing = pm.globals.get(\"urlThingCreateThing\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"var urlThingCreateThingStateInfo = pm.globals.get(\"urlThingCreateThingStateInfo\");\r",
									"//---------------- set url Remove --------------//\r",
									"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
									"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"pm.globals.set(\"urlThingRemoveThing\", urlRouteList.Thing.urlThingRemoveThing);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"pm.globals.set(\"urlThingRemoveThingStateInfo\", urlRouteList.Thing.urlThingRemoveThingStateInfo);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Signin_ --------------//\r",
									"//get global variable to x_ais_OrderRef \"Signin_\"\r",
									"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"var x_ais_OrderRef_CreateThing = pm.globals.get(\"x_ais_OrderRef_CreateThing\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"var x_ais_OrderDesc_CreateThing = pm.globals.get(\"x_ais_OrderDesc_CreateThing\");\r",
									"//get global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"var x_ais_OrderRef_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderRef_CreateThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"var x_ais_OrderDesc_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_CreateThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// Signin get token\r",
									" Signin = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSignin = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestSignin = {\r",
									"            mode: 'raw',\r",
									"            raw: \r",
									"            JSON.stringify({\r",
									"                username:Username,\r",
									"                password:Password\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsSignin = {\r",
									"            url: url + provisioningapis + urlSignin,\r",
									"            method: 'POST',\r",
									"            header: headersOptSignin,\r",
									"            body: httpRequestSignin\r",
									"        };\r",
									"        // console.log('request Signin');\r",
									"        let response = await reqPromise(optionsSignin);\r",
									"        let jsonDataSignin = await response.json();\r",
									"\r",
									"        // setAccessToken\r",
									"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
									"\r",
									"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // SignInProcess is Success\r",
									"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
									"        });\r",
									"\r",
									"        //set random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //set PartnerName\r",
									"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
									"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
									"        //set MerchantContact\r",
									"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
									"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
									"        // set CPID\r",
									"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
									"        pm.environment.set(\"CPID\", CPIDValue)\r",
									"        \r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreatePartner\r",
									" CreatePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreatePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreatePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
									"                \"PartnerType\": [\r",
									"                    \"Supplier\",\r",
									"                    \"Customer\"\r",
									"                ],\r",
									"                \"PartnerDetail\": {\r",
									"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
									"                    \"CPID\": pm.environment.get(\"CPID\")\r",
									"                },\r",
									"                \"Property\": {\r",
									"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsCreatePartner = {\r",
									"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreatePartner,\r",
									"            body: httpRequestCreatePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsCreatePartner);\r",
									"        let jsonDataCreatePartner = await response.json();\r",
									"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
									"    \r",
									"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreatePartner is Success\r",
									"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
									"        });\r",
									"\r",
									"        //GetResponse_PartnerId\r",
									"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
									"\r",
									"        //Accountname\r",
									"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
									"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateAccount\r",
									" CreateAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreateAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
									"                })\r",
									"        };\r",
									"        \r",
									"        let optionsCreateAccount = {\r",
									"            url: url + provisioningapis + urlAccountCreateAccount,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateAccount,\r",
									"            body: httpRequestCreateAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateAccount');\r",
									"        let response = await reqPromise(optionsCreateAccount);\r",
									"        let jsonDataCreateAccount = await response.json();\r",
									"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
									"    \r",
									"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateAccount : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateAccount is Success\r",
									"        pm.test('CreateAccount : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
									"        });\r",
									"        // GetResponse_AccountName\r",
									"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
									"        // GetResponse_AccountId\r",
									"        pm.environment.set(\"GetResponse_AccountId\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
									"        // random_IM\r",
									"        pm.environment.set(\"random_IM\", _.random(10000000, 99999999)+\" \"+_.random(1000000, 9999999))\r",
									"        // random_ICCID\r",
									"        pm.environment.set(\"random_ICCID\", _.random(1000000, 9999999)+\" \"+_.random(100000, 999999))\r",
									"        // random_number\r",
									"        pm.environment.set(\"random_number\",pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //ThingName\r",
									"        let thingNameValue = fieldDataValue.Thing.ThingNameValue; // \"Sensor_TestThingName\"\r",
									"        pm.environment.set(\"ThingName\", thingNameValue + pm.environment.get(\"random_number\"))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThing\r",
									" CreateThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreateThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingName\": pm.environment.get(\"ThingName\"),\r",
									"                \"IMEI\": pm.environment.get(\"random_IM\"),\r",
									"                \"IMSI\": pm.environment.get(\"random_IM\"),\r",
									"                \"ICCID\": pm.environment.get(\"random_ICCID\"),\r",
									"                \"RouteUrl\": fieldDataValue.Thing.RouteUrlValue , //[\"http://10.12.3.4:2019/api/information/AddInformation\"]\r",
									"                \"RouteInfo\": {\r",
									"                    \"MIMO_ID\": fieldDataValue.Thing.RouteInfoMIMOIDValue , //\"606edada\"\r",
									"                    \"MIMO_SerialNo\": fieldDataValue.Thing.RouteInfoMIMOSerialNoValue //5466758878\r",
									"                },\r",
									"                \"RouteFlag\": {\r",
									"                    \"ThingName\": fieldDataValue.Thing.RouteFlagThingNameValue , //true\r",
									"                    \"ThingToken\": fieldDataValue.Thing.RouteFlagThingTokenValue, //true\r",
									"                    \"IMEI\": fieldDataValue.Thing.RouteFlagIMEIValue, //true\r",
									"                    \"ICCID\": fieldDataValue.Thing.RouteFlagICCIDValue, //true\r",
									"                    \"RouteInfo\": fieldDataValue.Thing.RouteFlagRouteInfoValue //true\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsCreateThing = {\r",
									"            url: url + provisioningapis + urlThingCreateThing,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThing,\r",
									"            body: httpRequestCreateThing\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThing');\r",
									"        let response = await reqPromise(optionsCreateThing);\r",
									"        let jsonDataCreateThing = await response.json();\r",
									"        // console.log('jsonDataCreateThing',jsonDataCreateThing)\r",
									"    \r",
									"        let operationStatusCreateThing = await jsonDataCreateThing.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateThing : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateThing : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateThing is Success\r",
									"        pm.test('CreateThing : OperationStatus Description is '+'\"'+ resultDescriptionCreateThing+'\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Description', resultDescriptionCreateThing);\r",
									"        });\r",
									"\r",
									"        pm.environment.set(\"GetResponse_ThingID\",jsonDataCreateThing.ThingInfo.ThingId)\r",
									"\r",
									"        //Get Random Sensor \r",
									"        pm.environment.set(\"random_Sensor\", _.random(100, 999))\r",
									"\r",
									"        //Get Random Sensor Control\r",
									"        pm.environment.set(\"random_Sensor_Control\", _.random(100, 999))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThingStateInfo\r",
									" CreateThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        // {\"Temp\" : pm.environment.get(\"random_Sensor\")}\r",
									"        let sensorValue = {};\r",
									"        sensorValue[fieldDataValue.CreateThingStateInfo.SensorKey] = pm.environment.get(\"random_Sensor\");\r",
									"        // console.log('sensorValue',sensorValue);\r",
									"        \r",
									"        let httpRequestCreateThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": [\r",
									"                    pm.environment.get(\"GetResponse_ThingID\")\r",
									"                ],\r",
									"                \"Type\": fieldDataValue.CreateThingStateInfo.Type_Report,\r",
									"                \"Sensor\": sensorValue\r",
									"            })\r",
									"        };\r",
									"    \r",
									"        let optionsCreateThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingCreateThingStateInfo,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThingStateInfo,\r",
									"            body: httpRequestCreateThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThingStateInfo');\r",
									"        let response = await reqPromise(optionsCreateThingStateInfo);\r",
									"        let jsonDataCreateThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataCreateThingStateInfo',jsonDataCreateThingStateInfo)\r",
									"    \r",
									"        let operationStatusCreateThingStateInfo = await jsonDataCreateThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"CreateThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //CreateThingStateInfo is Success\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionCreateThingStateInfo+'\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Description', resultDescriptionCreateThingStateInfo);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"Signin();\r",
									"setTimeout(async function(){await CreatePartner();}, 3000); \r",
									"setTimeout(async function(){await CreateAccount();}, 6000); \r",
									"setTimeout(async function(){await CreateThing();}, 8000); \r",
									"setTimeout(async function(){await CreateThingStateInfo();}, 9000); \r",
									"setTimeout(async function(){}, 10000);  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-ais-OrderRef",
								"value": "{{x_ais_OrderRef_ControlThing_fail}}{{current_timestamp}}"
							},
							{
								"key": "x-ais-AccountKey",
								"type": "text",
								"value": "{{GetResponse_AccountId}}"
							},
							{
								"key": "x-ais-AccessToken",
								"value": "{{Bearer}} {{AccessToken}}"
							},
							{
								"key": "Accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"ThingId\": \"{{GetResponse_ThingID}}{{Value_Control_Thing_TST_F1_0_2_003_Error}}\",\r\n  \"Sensors\": {\r\n    \"{{SensorKey}}\": {{random_Sensor_Control}}\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{url}}{{mg4controlapis}}/api/v1/Control/Thing",
							"host": [
								"{{url}}{{mg4controlapis}}"
							],
							"path": [
								"api",
								"v1",
								"Control",
								"Thing"
							]
						},
						"description": "Type:Desire"
					},
					"response": []
				},
				{
					"name": "ControlThing_TST_F1_0_2_004_Error_ThingIdNotFound",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"//---------------- detailsResponse --------------//\r",
									"//set variable to detailsResponse JSON.parse\r",
									"var detailsResponse = JSON.parse(pm.environment.get(\"detailsResponse\"));\r",
									"// console.log('detailsResponse',detailsResponse);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to xAisOrderRef \"RemoveThing_\"\r",
									"var x_ais_OrderRef_RemoveThing = pm.globals.get(\"x_ais_OrderRef_RemoveThing\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"var x_ais_OrderDesc_RemoveThing = pm.globals.get(\"x_ais_OrderDesc_RemoveThing\");\r",
									"//get global variable to x_ais_OrderRef \"RemoveThingStateInfo_\"\r",
									"var x_ais_OrderDesc_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_RemoveThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThingStateInfo\"\r",
									"var x_ais_OrderRef_RemoveThingStateInfo  = pm.globals.get(\"x_ais_OrderRef_RemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Control --------------//\r",
									"//get global variable to x_ais_OrderRef \"ControlThing_\"\r",
									"var x_ais_OrderRef_ControlThing = pm.globals.get(\"x_ais_OrderRef_ControlThing\");\r",
									"//get global variable to x_ais_OrderRef \"ControlThingfail_\"\r",
									"var x_ais_OrderRef_ControlThing_fail = pm.globals.get(\"x_ais_OrderRef_ControlThing_fail\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get url Remove --------------//\r",
									"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
									"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"var urlThingRemoveThing = pm.globals.get(\"urlThingRemoveThing\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"var urlThingRemoveThingStateInfo = pm.globals.get(\"urlThingRemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"RemovePartner is Success\"\r",
									"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
									"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
									"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
									"//get global variable to resultDescription \"RemoveThing is Success\"\r",
									"var resultDescriptionRemoveThing = pm.globals.get(\"resultDescriptionRemoveThing\");\r",
									"//get global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"var resultDescriptionRemoveThingStateInfo = pm.globals.get(\"resultDescriptionRemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 404\r",
									"var statusCodeNotFound = pm.globals.get(\"statusCodeNotFound\");\r",
									"//get global variable to resultCode \"40400\"\r",
									"var resultCodeNotFound = pm.globals.get(\"resultCodeNotFound\");\r",
									"//get global variable to resultDescription \"The ThingId is Not Found\"\r",
									"// var resultDescriptionErrorTheThingIdIsNotFound = pm.globals.get(\"resultDescriptionErrorTheThingIdIsNotFound\");\r",
									"//get global variable to resultDescription \"The requested operation could not be found.\"\r",
									"var resultDescriptionTheRequestedOperationCouldNotBeFound = pm.globals.get(\"resultDescriptionTheRequestedOperationCouldNotBeFound\");\r",
									"//get global variable to resultDescription \"The ThingId \"\r",
									"var resultDescriptionErrorTheThingId2 = pm.globals.get(\"resultDescriptionErrorTheThingId2\");\r",
									"//get global variable to resultDescription \" could not be found.\"\r",
									"var resultDescriptionErrorCouldNotBeFound = pm.globals.get(\"resultDescriptionErrorCouldNotBeFound\");\r",
									"//------------------------------------------------------------//\r",
									"let jsonData = pm.response.json();\r",
									"console.log(jsonData)\r",
									"pm.test(\"ControlThing : Status code is \" + statusCodeNotFound, function () {\r",
									"    pm.response.to.have.status(statusCodeNotFound);\r",
									"});\r",
									"\r",
									"pm.test('ControlThing : OperationStatus Code is '+'\"'+ resultCodeNotFound +'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeNotFound);\r",
									"});\r",
									"\r",
									"pm.test('ControlThing : OperationStatus DeveloperMessage is '+'\"'+ resultDescriptionTheRequestedOperationCouldNotBeFound+'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheRequestedOperationCouldNotBeFound);\r",
									"});\r",
									"\r",
									"pm.test('ControlThing : OperationStatus Details is '+'\"'+ detailsResponse.target_ThingId + \" : \" + resultDescriptionErrorTheThingId2 + \"'\"+ pm.environment.get(\"Value_Control_Thing_TST_F1_0_2_004_Error\") + \"'\"+ resultDescriptionErrorCouldNotBeFound+'\"', function () {\r",
									"    let countDetails= jsonData.OperationStatus.Details;\r",
									"    for(let i=0;i<countDetails.length;i++){\r",
									"        pm.expect(countDetails[i].Target).to.eql(detailsResponse.target_ThingId);\r",
									"        pm.expect(countDetails[i].DeveloperMessage).to.eql(resultDescriptionErrorTheThingId2 + \"'\"+ pm.environment.get(\"Value_Control_Thing_TST_F1_0_2_004_Error\")+ \"'\"+ resultDescriptionErrorCouldNotBeFound);\r",
									"    }\r",
									"});\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// RemovePartner\r",
									" RemovePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemovePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemovePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemovePartner = {\r",
									"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemovePartner,\r",
									"            body: httpRequestRemovePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request RemovePartner');\r",
									"        let response = await reqPromise(optionsRemovePartner);\r",
									"        let jsonDataRemovePartner = await response.json();\r",
									"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
									"    \r",
									"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemovePartner is Success\r",
									"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveAccount\r",
									" RemoveAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemoveAccount = {\r",
									"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveAccount,\r",
									"            body: httpRequestRemoveAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveAccount');\r",
									"        let response = await reqPromise(optionsRemoveAccount);\r",
									"        let jsonDataRemoveAccount = await response.json();\r",
									"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
									"    \r",
									"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveAccount is Success\r",
									"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThing\r",
									" RemoveThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThing = {\r",
									"            url: url + provisioningapis + urlThingRemoveThing,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThing,\r",
									"            body: httpRequestRemoveThing\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveThing');\r",
									"        let response = await reqPromise(optionsRemoveThing);\r",
									"        let jsonDataRemoveThing = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThing)\r",
									"    \r",
									"        let operationStatusRemoveThing = await jsonDataRemoveThing.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThing : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThing : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThing is Success\r",
									"        pm.test('RemoveThing : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThing+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Description', resultDescriptionRemoveThing);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThingStateInfo\r",
									" RemoveThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"            \r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\"),\r",
									"                \"stateType\": fieldDataValue.CreateThingStateInfo.Type_Report, //Report\r",
									"                \"stateKey\": fieldDataValue.CreateThingStateInfo.SensorKey //Temp\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingRemoveThingStateInfo,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThingStateInfo,\r",
									"            body: httpRequestRemoveThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('response RemoveThingStateInfo');\r",
									"        let response = await reqPromise(optionsRemoveThingStateInfo);\r",
									"        let jsonDataRemoveThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataRemoveThingStateInfo',jsonDataRemoveThingStateInfo)\r",
									"    \r",
									"        let operationStatusRemoveThingStateInfo = await jsonDataRemoveThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThingStateInfo is Success\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThingStateInfo+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Description', resultDescriptionRemoveThingStateInfo);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"//---------------- LogDefaultValue --------------//\r",
									"//set variable to LogDefaultValue JSON.parse\r",
									"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
									"// console.log('LogDefaultValue',LogDefaultValue);\r",
									"//---------------- set globals Other --------------//\r",
									"var SearchLog = LogDefaultValue.SearchLog;\r",
									"// console.log('SearchLog',SearchLog);\r",
									"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
									"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
									"var kbn_version = SearchLog.header.kbn_version;\r",
									"var authorization = SearchLog.header.Authorization;\r",
									"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
									"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
									"var namespace = LogDefaultValue.Other.namespace_control4mg;\r",
									"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
									"var header_x_ais_accountkey = LogDefaultValue.Other.header_x_ais_accountkey;\r",
									"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
									"var methodPost = LogDefaultValue.Other.methodPost;\r",
									"\r",
									"// Detail\r",
									"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
									"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
									"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
									"\r",
									"// Summary\r",
									"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
									"// var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
									"// var customSummary = LogDefaultValue.OtherSummary.custom;\r",
									"// ControlAPIs\r",
									"var applicationName = LogDefaultValue.Control.applicationName_mg4;\r",
									"var cmdName = LogDefaultValue.Control.cmdNameThing;\r",
									"var endPointNameControlAPIs = LogDefaultValue.Control.endPointNameControlAPIs;\r",
									"var endPointNameDesireEx = LogDefaultValue.Control.endPointNameDesireEx;\r",
									"var containerId = LogDefaultValue.Control.containerId;\r",
									"var requestObjectUrlStaging = LogDefaultValue.Control.requestObjectUrlStagingThing;\r",
									"var xProtocolControl = LogDefaultValue.Control.xProtocolControl;\r",
									"var responseObjectPublished = LogDefaultValue.Control.responseObjectPublished;\r",
									"\r",
									"// Check CDR (Summary Log) and EDR (Detail Log)\r",
									"SearchLogFindTid = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSearchLogFindTid = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = pm.environment.get(\"Value_Control_Thing_TST_F1_0_2_004_Error\"); \r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestSearchLogFindTid = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"\r",
									"        let optionsSearchLogFindTid = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptSearchLogFindTid,\r",
									"            body: httpRequestSearchLogFindTid\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsSearchLogFindTid);\r",
									"        let jsonDataSearchLogFindTid = await response.json();\r",
									"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
									"        console.log('hits',hits)\r",
									"  \r",
									"        // find tid\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            // let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"        \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            if(applicationNameValue == applicationName){\r",
									"                let tid = hits[i]._source.cauldron.tid;\r",
									"                pm.environment.set(\"tid\", tid);\r",
									"                break;\r",
									"           }\r",
									"\r",
									"        }\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"CheckLog = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCheckLog = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = pm.environment.get(\"tid\");\r",
									"\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestCheckLog = {\r",
									"            mode: 'raw',\r",
									"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"        let optionsCheckLog = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptCheckLog,\r",
									"            body: httpRequestCheckLog\r",
									"        }; \r",
									"        let response = await reqPromise(optionsCheckLog);\r",
									"        let jsonDataCheckLog = await response.json();\r",
									"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
									"        \r",
									"        // //200\r",
									"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });     \r",
									"        \r",
									"        let hits = jsonDataCheckLog.hits.hits\r",
									"        console.log('hits',hits)\r",
									"  \r",
									"        // find logType\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            //  let logType = hits[i]._source.cauldron.logType\r",
									"            let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"           \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            \r",
									"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
									"            // console.log('resultDataLog',resultDataLog)\r",
									"\r",
									"            let tidControl = x_ais_OrderRef_ControlThing_fail + current_timestamp;\r",
									"            // console.log(tidControl);\r",
									"            if(applicationNameValue == applicationName){\r",
									"                 \r",
									"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ControlAPIs\r",
									"                    pm.test(\"Check Summary Log : ControlThing\" , function () {\r",
									"                        console.log(\"======== Check Summary Log ( Expected = Actual) [ControlThing] ==================\");\r",
									"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
									"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
									"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeNotFound);\r",
									"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionTheRequestedOperationCouldNotBeFound);\r",
									"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
									"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        // console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
									"                        // console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
									"\r",
									"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
									"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
									"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeNotFound); \r",
									"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionTheRequestedOperationCouldNotBeFound); \r",
									"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
									"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"\r",
									"                        let thingId = pm.environment.get(\"Value_Control_Thing_TST_F1_0_2_004_Error\");\r",
									"                        let customUrl= urlCheckLog + requestObjectUrlStaging;\r",
									"                        let customAccountkey = pm.environment.get(\"GetResponse_AccountId\");\r",
									"\r",
									"                        // check identity\r",
									"                        // \"identity\":\"{\\\"ThingID\\\":\\\"60114adea32e8c0001576d2a\\\"}\"\r",
									"                        let dataSummaryIdentity = JSON.parse(resultDataLog.identity);\r",
									"\r",
									"                        console.log(\"identity.ThingID : \" + dataSummaryIdentity.ThingID + \" = \" + thingId);\r",
									"                        pm.expect(dataSummaryIdentity.ThingID).to.eql(thingId); \r",
									"\r",
									"                        // check custom\r",
									"                        // \\\"custom\\\":{ \\\"customData\\\":{ \\\"url\\\":\\\"mg-iot.sandais.com/api/v1/Control/Thing\\\", \\\"accountkey\\\":\\\"60995c8826fdbc0001c36c64\\\", \\\"ThingID\\\":[ \\\"5f61cf2d51c1f10001fb779b\\\" ] }, \\\"endPointSummary\\\":[ { \\\"no\\\":\\\"1\\\", \\\"endPointName\\\":\\\"db.AuthenticationCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:Inquiry was Success\\\", \\\"processTime\\\":0.0003 }, { \\\"no\\\":\\\"2\\\", \\\"endPointName\\\":\\\"db.ClientsCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:Inquiry was Success\\\", \\\"processTime\\\":0.0004 }, { \\\"no\\\":\\\"3\\\", \\\"endPointName\\\":\\\"db.AccountsCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:Inquiry was Success\\\", \\\"processTime\\\":0.0001 }, { \\\"no\\\":\\\"4\\\", \\\"endPointName\\\":\\\"db.ThingsCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:Inquiry was Success\\\", \\\"processTime\\\":0.0007 } ] }\r",
									"\r",
									"                        let customData = resultDataLog.custom.customData\r",
									"\r",
									"                        console.log(\"custom.url : \" + customData.url + \" = \" + customUrl);\r",
									"                        console.log(\"custom.accountkey : \" + customData.accountkey + \" = \" + customAccountkey);\r",
									"                        console.log(\"custom.ThingID[0] : \" + customData.ThingID[0] + \" = \" + thingId);\r",
									"\r",
									"                        pm.expect(customData.url).to.eql(customUrl); \r",
									"                        pm.expect(customData.accountkey).to.eql(customAccountkey); \r",
									"                        pm.expect(customData.ThingID[0]).to.eql(thingId); \r",
									"\r",
									"                        let custom = resultDataLog.custom.endPointSummary;\r",
									"                        let countCustom = custom.length;\r",
									"                       \r",
									"                        // [\"db.AuthenticationCollection\",\"db.ClientsCollection\",\"db.AccountsCollection\",\"db.ThingsCollection\"]\r",
									"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_ControlThing;\r",
									"                        // [\"20000:Inquiry was Success\",\"20000:Inquiry was Success\",\"20000:Inquiry was Success\",\"20000:Inquiry was Success\"]\r",
									"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_ControlThing;\r",
									"                        let countCustomStep = dataEndPointName.length;\r",
									"\r",
									"                        console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep);\r",
									"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
									"                        \r",
									"                        for(let i=0;i<countCustomStep;i++){\r",
									"                            let no = custom[i].no;\r",
									"                            let valueEndPointName = custom[i].endPointName;\r",
									"                            let valueResponseStatus = custom[i].responseStatus;\r",
									"                            // console.log(\"i\",i);\r",
									"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
									"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
									"\r",
									"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString());\r",
									"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i]);\r",
									"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i]);\r",
									"\r",
									"                            pm.expect(no).to.eql((i+1).toString()); \r",
									"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
									"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]); \r",
									"                        }\r",
									"                    }); \r",
									"                }\r",
									"\r",
									"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ControlAPIs\r",
									"\r",
									"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
									"                    // console.log('endPointNameValue ',endPointNameValue)\r",
									"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [ControlThing]\", function () {\r",
									"                        console.log(\"======== Check Detail Log ( Expected = Actual) [ControlThing] ==================\");\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
									"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
									"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
									"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
									"\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
									"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
									"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
									"\r",
									"                        // if( endPointNameValue == endPointNameControlAPIs){     //\"endPointName\":\"ControlAPIs\"\r",
									"\r",
									"                            // console.log(\"custom1.endPointName : \" + resultDataLog.custom1.endPointName + \" = \" + endPointNameControlAPIs);\r",
									"                            // pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameControlAPIs); \r",
									"\r",
									"                            // check requestObject\r",
									"                            // \"requestObject\":\"{\\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Control/Thing\\\",\\\"method\\\":\\\"POST\\\",\\\"headers\\\":{\\\"x-ais-orderref\\\":\\\"ControlThing_202101271801621\\\",\\\"x-ais-accountkey\\\":\\\"60114adca32e8c0001576d22\\\",\\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAGhfn1wJCmf68Vf1zYxZ/fak0lmQ84nNnLsXbdYpFNnXEIlAkkY2KW0\\\"},\\\"body\\\":{\\\"ThingId\\\":\\\"60114adea32e8c0001576d2a\\\",\\\"Sensors\\\":{\\\"Temp\\\":955}}}\"\r",
									"\r",
									"                            // \\\"requestObject\\\":\\\"{ \\\\\\\"url\\\\\\\":\\\\\\\"/api/v1/Control/Thing\\\\\\\", \\\\\\\"method\\\\\\\":\\\\\\\"POST\\\\\\\", \\\\\\\"headers\\\\\\\":{ \\\\\\\"Cache-Control\\\\\\\":\\\\\\\"no-cache\\\\\\\", \\\\\\\"Content-Type\\\\\\\":\\\\\\\"application/json\\\\\\\", \\\\\\\"Accept\\\\\\\":\\\\\\\"*/*\\\\\\\", \\\\\\\"Accept-Encoding\\\\\\\":\\\\\\\"gzip, deflate, br\\\\\\\", \\\\\\\"Host\\\\\\\":\\\\\\\"mg-iot.sandais.com\\\\\\\", \\\\\\\"User-Agent\\\\\\\":\\\\\\\"PostmanRuntime/7.26.8\\\\\\\", \\\\\\\"Content-Length\\\\\\\":\\\\\\\"84\\\\\\\", \\\\\\\"x-real-ip\\\\\\\":\\\\\\\"182.232.34.151\\\\\\\", \\\\\\\"x-forwarded-for\\\\\\\":\\\\\\\"182.232.34.151, 10.233.66.0\\\\\\\", \\\\\\\"x-forwarded-proto\\\\\\\":\\\\\\\"http\\\\\\\", \\\\\\\"x-ais-orderref\\\\\\\":\\\\\\\"ControlThingfail_202105102305480\\\\\\\", \\\\\\\"x-ais-accountkey\\\\\\\":\\\\\\\"60995c8826fdbc0001c36c64\\\\\\\", \\\\\\\"x-ais-accesstoken\\\\\\\":\\\\\\\"Bearer ibnxnVhs5Rx3IwglWv7/gVA/1TpQnKqAOBAADlRDvYhOpXwmlpYOEb5yfY5aZpoj0YRWRZM26i9HOqtc1fc1jpNDOK5JpISttmMEy59g2py7nLWonDe2YW2OPRGWSowk6+9ZihLU1fZ5d5jAqqrZaKlOAAI3N1TXDNLsHuKcOJMcERbCcaMqRaku+MY4/kzE+eyIdkfwwbjT91S2VQq+Wk2ooMWuLk6/DHVJhwbMP7a/A2GWaVsIF5ljFnO1bicUXiiXl0O/FYhKVegMrc8SMg==\\\\\\\", \\\\\\\"postman-token\\\\\\\":\\\\\\\"afe0907f-ec21-49e2-8a5d-45a28d649e11\\\\\\\", \\\\\\\"x-envoy-external-address\\\\\\\":\\\\\\\"10.233.66.0\\\\\\\", \\\\\\\"x-request-id\\\\\\\":\\\\\\\"4e92a8b1-2ebc-4081-9556-5e900b153880\\\\\\\", \\\\\\\"x-envoy-original-path\\\\\\\":\\\\\\\"/mg4controlapis/api/v1/Control/Thing\\\\\\\", \\\\\\\"x-b3-traceid\\\\\\\":\\\\\\\"a26f8a57f8de902bd744a9b4272456e7\\\\\\\", \\\\\\\"x-b3-spanid\\\\\\\":\\\\\\\"9622bcc0991518d5\\\\\\\", \\\\\\\"x-b3-parentspanid\\\\\\\":\\\\\\\"d744a9b4272456e7\\\\\\\", \\\\\\\"x-b3-sampled\\\\\\\":\\\\\\\"0\\\\\\\", \\\\\\\"x-ais-SessionId\\\\\\\":\\\\\\\"1620663436088\\\\\\\", \\\\\\\"identity\\\\\\\":\\\\\\\"{ \\\\\\\\\\\\\\\"ThingID\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"5f61cf2d51c1f10001fb779b\\\\\\\\\\\\\\\" }\\\\\\\", \\\\\\\"custom\\\\\\\":\\\\\\\"{ \\\\\\\\\\\\\\\"url\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"mg-iot.sandais.com/api/v1/Control/Thing\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"accountkey\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"60995c8826fdbc0001c36c64\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"ThingID\\\\\\\\\\\\\\\":[ \\\\\\\\\\\\\\\"5f61cf2d51c1f10001fb779b\\\\\\\\\\\\\\\" ] }\\\\\\\" }, \\\\\\\"queryString\\\\\\\":{ }, \\\\\\\"routeParamteters\\\\\\\":{ }, \\\\\\\"body\\\\\\\":{ \\\\\\\"ThingId\\\\\\\":\\\\\\\"5f61cf2d51c1f10001fb779b\\\\\\\", \\\\\\\"Sensors\\\\\\\":{ \\\\\\\"Temp\\\\\\\":461 } } }\\\"\r",
									"\r",
									"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
									"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
									"                            let url = requestObjectUrlStaging; \r",
									"                            let urlCustom = urlCheckLog + requestObjectUrlStaging; \r",
									"                            let SensorKey = fieldDataValue.CreateThingStateInfo.SensorKey;\r",
									"                            let sensor = pm.environment.get(\"random_Sensor_Control\");\r",
									"                            let x_ais_orderref = x_ais_OrderRef_ControlThing_fail + current_timestamp;\r",
									"                            let x_ais_AccountKey = pm.environment.get(\"GetResponse_AccountId\");\r",
									"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken\");\r",
									"                            let thingId = pm.environment.get(\"Value_Control_Thing_TST_F1_0_2_004_Error\");\r",
									"\r",
									"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
									"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
									"                            console.log(\"headers.x_ais_AccountKey : \" + jsonParseRequestObject.headers[header_x_ais_accountkey] + \" = \" + x_ais_AccountKey);\r",
									"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
									"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accountkey]).to.eql(x_ais_AccountKey);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
									"\r",
									"                            let identity = JSON.parse(jsonParseRequestObject.headers.identity)\r",
									"                            console.log(\"headers.identity.ThingID : \" + identity.ThingID + \" = \" + thingId);\r",
									"                            pm.expect(identity.ThingID).to.eql(thingId);\r",
									"                            \r",
									"                            let custom = JSON.parse(jsonParseRequestObject.headers.custom)\r",
									"                            console.log(\"headers.custom.url : \" + custom.url + \" = \" + urlCustom);\r",
									"                            console.log(\"headers.custom.accountkey : \" + custom.accountkey + \" = \" + x_ais_AccountKey);\r",
									"                            console.log(\"headers.custom.ThingID[0] : \" + custom.ThingID[0] + \" = \" + thingId);\r",
									"                            \r",
									"                            pm.expect(custom.url).to.eql(urlCustom);\r",
									"                            pm.expect(custom.accountkey).to.eql(x_ais_AccountKey);\r",
									"                            pm.expect(custom.ThingID[0]).to.eql(thingId);\r",
									"\r",
									"                            console.log(\"queryString : \" + JSON.stringify(jsonParseRequestObject.queryString) + \" = \" + JSON.stringify({}));\r",
									"                            pm.expect(jsonParseRequestObject.queryString).to.eql({});\r",
									"\r",
									"                            console.log(\"routeParamteters : \" + JSON.stringify(jsonParseRequestObject.routeParamteters) + \" = \" + JSON.stringify({}));\r",
									"                            pm.expect(jsonParseRequestObject.routeParamteters).to.eql({});\r",
									"\r",
									"                            console.log(\"resquest.body.ThingId : \" + jsonParseRequestObject.body.ThingId + \" = \" + thingId);\r",
									"                            console.log(\"resquest.body.Sensors.\" + SensorKey + \"  : \" + jsonParseRequestObject.body.Sensors[SensorKey] + \" = \" + sensor);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.body.ThingId).to.eql(thingId);\r",
									"                            pm.expect(jsonParseRequestObject.body.Sensors[SensorKey]).to.eql(sensor);\r",
									"\r",
									"                            // check responseObject\r",
									"                            // \\\"responseObject\\\":\\\"{ \\\\\\\"OperationStatus\\\\\\\":{ \\\\\\\"Code\\\\\\\":\\\\\\\"40400\\\\\\\", \\\\\\\"DeveloperMessage\\\\\\\":\\\\\\\"The requested operation could not be found.\\\\\\\", \\\\\\\"Details\\\\\\\":[ { \\\\\\\"Target\\\\\\\":\\\\\\\"ThingId\\\\\\\", \\\\\\\"DeveloperMessage\\\\\\\":\\\\\\\"The ThingId '5f61cf2d51c1f10001fb779b' could not be found.\\\\\\\" } ] } }\\\"\r",
									"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
									"                            // console.log('jsonParseResponseObject',jsonParseResponseObject);\r",
									"\r",
									"                            console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeNotFound);\r",
									"                            console.log(\"response.OperationStatus.DeveloperMessage : \" + jsonParseResponseObject.OperationStatus.DeveloperMessage + \" = \" + resultDescriptionTheRequestedOperationCouldNotBeFound);\r",
									"\r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeNotFound);  \r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheRequestedOperationCouldNotBeFound);  \r",
									"\r",
									"                            let countDetails= jsonData.OperationStatus.Details;\r",
									"                            for(let i=0;i<countDetails.length;i++){\r",
									"\r",
									"                                console.log(\"response.OperationStatus.Details[\"+ i +\"].Target : \" + countDetails[i].Target + \" = \" + detailsResponse.target_ThingId);\r",
									"                                console.log(\"response.OperationStatus.Details[\"+ i +\"].DeveloperMessage : \" + countDetails[i].DeveloperMessage + \" = \" + resultDescriptionErrorTheThingId2 + \"'\"+ pm.environment.get(\"Value_Control_Thing_TST_F1_0_2_004_Error\")+ \"'\"+ resultDescriptionErrorCouldNotBeFound);\r",
									"\r",
									"                                pm.expect(countDetails[i].Target).to.eql(detailsResponse.target_ThingId);\r",
									"                                pm.expect(countDetails[i].DeveloperMessage).to.eql(resultDescriptionErrorTheThingId2 + \"'\"+ pm.environment.get(\"Value_Control_Thing_TST_F1_0_2_004_Error\")+ \"'\"+ resultDescriptionErrorCouldNotBeFound);\r",
									"                            }\r",
									"                        // }\r",
									"\r",
									"                    }); \r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"setTimeout(function(){SearchLogFindTid();}, 20000); \r",
									"setTimeout(function(){CheckLog();}, 30000); \r",
									"\r",
									"setTimeout(function(){RemoveThingStateInfo();}, 40000); \r",
									"setTimeout(function(){RemoveThing();}, 45000); \r",
									"setTimeout(function(){RemoveAccount();}, 50000); \r",
									"setTimeout(function(){RemovePartner();}, 55000); \r",
									"\r",
									"setTimeout(function(){\r",
									"pm.environment.unset(\"current_timestamp\");\r",
									"pm.environment.unset(\"AccessToken\");\r",
									"pm.environment.unset(\"random_number\");\r",
									"pm.environment.unset(\"PartnerName\");\r",
									"pm.environment.unset(\"MerchantContact\");\r",
									"pm.environment.unset(\"CPID\");\r",
									"pm.environment.unset(\"GetResponse_PartnerId\");\r",
									"pm.environment.unset(\"AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountId\");\r",
									"pm.environment.unset(\"random_IM\");\r",
									"pm.environment.unset(\"random_ICCID\");\r",
									"pm.environment.unset(\"ThingName\");\r",
									"pm.environment.unset(\"GetResponse_ThingID\");\r",
									"pm.environment.unset(\"random_Sensor\");\r",
									"pm.environment.unset(\"tid\");\r",
									"pm.environment.unset(\"Value_Control_Thing_TST_F1_0_2_004_Error\");\r",
									"pm.environment.unset(\"SensorKey\");\r",
									"pm.environment.unset(\"random_Sensor_Control\");\r",
									"}, 90000); "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var Username = pm.environment.get(\"Username\");\r",
									"var Password = pm.environment.get(\"Password\");\r",
									"\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"pm.environment.set(\"SensorKey\",fieldDataValue.CreateThingStateInfo.SensorKey)\r",
									"pm.environment.set(\"Value_Control_Thing_TST_F1_0_2_004_Error\",fieldDataValue.Control.Value_Control_Thing_TST_F1_0_2_004_Error)\r",
									"\r",
									"//format YYYYMMDDHHMMSSS\r",
									"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
									"// console.log('currentTmestamp',currentTmestamp);\r",
									"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- statusCodeList --------------//\r",
									"//set variable to statusCodeList JSON.parse\r",
									"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
									"//set global variable to statusCode 200\r",
									"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
									"//set global variable to statusCode 201\r",
									"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
									"//set global variable to statusCode 404\r",
									"pm.globals.set(\"statusCodeNotFound\", statusCodeList.statusCodeNotFound);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultCodeList --------------//\r",
									"//set variable to resultCodeList JSON.parse\r",
									"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
									"//set global variable to resultCode \"20000\"\r",
									"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
									"//set global variable to resultCode \"20100\"\r",
									"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
									"//set global variable to resultCode \"40400\"\r",
									"pm.globals.set(\"resultCodeNotFound\", resultCodeList.resultCodeNotFound);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionSuccessList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
									"//set global variable to resultDescription \"SignInProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
									"//set global variable to resultDescription \"CreatePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
									"//set global variable to resultDescription \"CreateAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
									"//set global variable to resultDescription \"CreateThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThing\", resultDescriptionSuccessList.resultDescriptionCreateThing);\r",
									"//set global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThingStateInfo\", resultDescriptionSuccessList.resultDescriptionCreateThingStateInfo);\r",
									"//set global variable to resultDescription \"RemovePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
									"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
									"//set global variable to resultDescription \"RemoveThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThing\", resultDescriptionSuccessList.resultDescriptionRemoveThing);\r",
									"//set global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThingStateInfo\", resultDescriptionSuccessList.resultDescriptionRemoveThingStateInfo);\r",
									"//set global variable to resultDescription \"Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccess\", resultDescriptionSuccessList.resultDescriptionSuccess);\r",
									"//set global variable to resultDescription \"Created Success\"\r",
									"pm.globals.set(\"resultDescriptionCreatedSuccess\", resultDescriptionSuccessList.resultDescriptionCreatedSuccess);\r",
									"//set global variable to resultDescription \"ControlOneThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessControlOneThing\", resultDescriptionSuccessList.resultDescriptionSuccessControlOneThing);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionErrorList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
									"//set global variable to resultDescription \"The ThingId is Not Found\"\r",
									"// pm.globals.set(\"resultDescriptionErrorTheThingIdIsNotFound\", resultDescriptionErrorList.resultDescriptionErrorTheThingIdIsNotFound);\r",
									"//set global variable to resultDescription \"The requested operation could not be found.\"\r",
									"pm.globals.set(\"resultDescriptionTheRequestedOperationCouldNotBeFound\", resultDescriptionErrorList.resultDescriptionTheRequestedOperationCouldNotBeFound);\r",
									"//set global variable to resultDescription \"The ThingId \"\r",
									"pm.globals.set(\"resultDescriptionErrorTheThingId2\", resultDescriptionErrorList.resultDescriptionErrorTheThingId2);\r",
									"//set global variable to resultDescription \" could not be found.\"\r",
									"pm.globals.set(\"resultDescriptionErrorCouldNotBeFound\", resultDescriptionErrorList.resultDescriptionErrorCouldNotBeFound);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- HeaderList --------------//\r",
									"//set variable to HeaderList JSON.parse\r",
									"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
									"//---------------- set globals Other --------------//\r",
									"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
									"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
									"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
									"//set global variable to kbn-versio \"7.5.1\"\r",
									"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Signin_ --------------//\r",
									"//set global variable to x_ais_OrderRef \"Signin_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreatePartner --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
									"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
									"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
									"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreateAccount --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
									"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
									"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Thing --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThing\", HeaderList.Thing.x_ais_OrderRef_CreateThing);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThing\", HeaderList.Thing.x_ais_OrderDesc_CreateThing);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThing\", HeaderList.Thing.x_ais_OrderRef_RemoveThing);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThing\", HeaderList.Thing.x_ais_OrderDesc_RemoveThing);\r",
									"//set global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_RemoveThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_RemoveThingStateInfo);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Control --------------//\r",
									"//set global variable to x_ais_OrderRef \"ControlThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ControlThing\", HeaderList.Control.x_ais_OrderRef_ControlThing);\r",
									"//set global variable to x_ais_OrderRef \"ControlThingfail_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ControlThing_fail\", HeaderList.Control.x_ais_OrderRef_ControlThing_fail);\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"SignInProcess is Success\"\r",
									"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
									"//get global variable to resultDescription \"CreatePartner is Success\"\r",
									"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
									"//get global variable to resultDescription \"CreateAccount is Success\"\r",
									"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
									"//get global variable to resultDescription \"CreateThing is Success\"\r",
									"var resultDescriptionCreateThing = pm.globals.get(\"resultDescriptionCreateThing\");\r",
									"//get global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"var resultDescriptionCreateThingStateInfo = pm.globals.get(\"resultDescriptionCreateThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- urlRouteList --------------//\r",
									"//set variable to urlRouteList JSON.parse\r",
									"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
									"//---------------- set url Create --------------//\r",
									"//set global variable to url \"/api/v1/auth/signin\"\r",
									"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
									"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
									"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"pm.globals.set(\"urlThingCreateThing\", urlRouteList.Thing.urlThingCreateThing);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"pm.globals.set(\"urlThingCreateThingStateInfo\", urlRouteList.Thing.urlThingCreateThingStateInfo);\r",
									"//---------------- get url Create --------------//\r",
									"//get global variable to url \"/api/v1/auth/signin\"\r",
									"var urlSignin = pm.globals.get(\"urlSignin\");\r",
									"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
									"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"var urlThingCreateThing = pm.globals.get(\"urlThingCreateThing\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"var urlThingCreateThingStateInfo = pm.globals.get(\"urlThingCreateThingStateInfo\");\r",
									"//---------------- set url Remove --------------//\r",
									"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
									"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"pm.globals.set(\"urlThingRemoveThing\", urlRouteList.Thing.urlThingRemoveThing);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"pm.globals.set(\"urlThingRemoveThingStateInfo\", urlRouteList.Thing.urlThingRemoveThingStateInfo);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Signin_ --------------//\r",
									"//get global variable to x_ais_OrderRef \"Signin_\"\r",
									"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"var x_ais_OrderRef_CreateThing = pm.globals.get(\"x_ais_OrderRef_CreateThing\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"var x_ais_OrderDesc_CreateThing = pm.globals.get(\"x_ais_OrderDesc_CreateThing\");\r",
									"//get global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"var x_ais_OrderRef_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderRef_CreateThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"var x_ais_OrderDesc_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_CreateThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// Signin get token\r",
									" Signin = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSignin = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestSignin = {\r",
									"            mode: 'raw',\r",
									"            raw: \r",
									"            JSON.stringify({\r",
									"                username:Username,\r",
									"                password:Password\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsSignin = {\r",
									"            url: url + provisioningapis + urlSignin,\r",
									"            method: 'POST',\r",
									"            header: headersOptSignin,\r",
									"            body: httpRequestSignin\r",
									"        };\r",
									"        // console.log('request Signin');\r",
									"        let response = await reqPromise(optionsSignin);\r",
									"        let jsonDataSignin = await response.json();\r",
									"\r",
									"        // setAccessToken\r",
									"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
									"\r",
									"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // SignInProcess is Success\r",
									"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
									"        });\r",
									"\r",
									"        //set random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //set PartnerName\r",
									"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
									"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
									"        //set MerchantContact\r",
									"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
									"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
									"        // set CPID\r",
									"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
									"        pm.environment.set(\"CPID\", CPIDValue)\r",
									"        \r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreatePartner\r",
									" CreatePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreatePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreatePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
									"                \"PartnerType\": [\r",
									"                    \"Supplier\",\r",
									"                    \"Customer\"\r",
									"                ],\r",
									"                \"PartnerDetail\": {\r",
									"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
									"                    \"CPID\": pm.environment.get(\"CPID\")\r",
									"                },\r",
									"                \"Property\": {\r",
									"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsCreatePartner = {\r",
									"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreatePartner,\r",
									"            body: httpRequestCreatePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsCreatePartner);\r",
									"        let jsonDataCreatePartner = await response.json();\r",
									"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
									"    \r",
									"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreatePartner is Success\r",
									"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
									"        });\r",
									"\r",
									"        //GetResponse_PartnerId\r",
									"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
									"\r",
									"        //Accountname\r",
									"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
									"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateAccount\r",
									" CreateAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreateAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
									"                })\r",
									"        };\r",
									"        \r",
									"        let optionsCreateAccount = {\r",
									"            url: url + provisioningapis + urlAccountCreateAccount,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateAccount,\r",
									"            body: httpRequestCreateAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateAccount');\r",
									"        let response = await reqPromise(optionsCreateAccount);\r",
									"        let jsonDataCreateAccount = await response.json();\r",
									"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
									"    \r",
									"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateAccount : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateAccount is Success\r",
									"        pm.test('CreateAccount : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
									"        });\r",
									"        // GetResponse_AccountName\r",
									"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
									"        // GetResponse_AccountId\r",
									"        pm.environment.set(\"GetResponse_AccountId\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
									"        // random_IM\r",
									"        pm.environment.set(\"random_IM\", _.random(10000000, 99999999)+\" \"+_.random(1000000, 9999999))\r",
									"        // random_ICCID\r",
									"        pm.environment.set(\"random_ICCID\", _.random(1000000, 9999999)+\" \"+_.random(100000, 999999))\r",
									"        // random_number\r",
									"        pm.environment.set(\"random_number\",pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //ThingName\r",
									"        let thingNameValue = fieldDataValue.Thing.ThingNameValue; // \"Sensor_TestThingName\"\r",
									"        pm.environment.set(\"ThingName\", thingNameValue + pm.environment.get(\"random_number\"))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThing\r",
									" CreateThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreateThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingName\": pm.environment.get(\"ThingName\"),\r",
									"                \"IMEI\": pm.environment.get(\"random_IM\"),\r",
									"                \"IMSI\": pm.environment.get(\"random_IM\"),\r",
									"                \"ICCID\": pm.environment.get(\"random_ICCID\"),\r",
									"                \"RouteUrl\": fieldDataValue.Thing.RouteUrlValue , //[\"http://10.12.3.4:2019/api/information/AddInformation\"]\r",
									"                \"RouteInfo\": {\r",
									"                    \"MIMO_ID\": fieldDataValue.Thing.RouteInfoMIMOIDValue , //\"606edada\"\r",
									"                    \"MIMO_SerialNo\": fieldDataValue.Thing.RouteInfoMIMOSerialNoValue //5466758878\r",
									"                },\r",
									"                \"RouteFlag\": {\r",
									"                    \"ThingName\": fieldDataValue.Thing.RouteFlagThingNameValue , //true\r",
									"                    \"ThingToken\": fieldDataValue.Thing.RouteFlagThingTokenValue, //true\r",
									"                    \"IMEI\": fieldDataValue.Thing.RouteFlagIMEIValue, //true\r",
									"                    \"ICCID\": fieldDataValue.Thing.RouteFlagICCIDValue, //true\r",
									"                    \"RouteInfo\": fieldDataValue.Thing.RouteFlagRouteInfoValue //true\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsCreateThing = {\r",
									"            url: url + provisioningapis + urlThingCreateThing,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThing,\r",
									"            body: httpRequestCreateThing\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThing');\r",
									"        let response = await reqPromise(optionsCreateThing);\r",
									"        let jsonDataCreateThing = await response.json();\r",
									"        // console.log('jsonDataCreateThing',jsonDataCreateThing)\r",
									"    \r",
									"        let operationStatusCreateThing = await jsonDataCreateThing.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateThing : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateThing : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateThing is Success\r",
									"        pm.test('CreateThing : OperationStatus Description is '+'\"'+ resultDescriptionCreateThing+'\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Description', resultDescriptionCreateThing);\r",
									"        });\r",
									"\r",
									"        pm.environment.set(\"GetResponse_ThingID\",jsonDataCreateThing.ThingInfo.ThingId)\r",
									"\r",
									"        //Get Random Sensor \r",
									"        pm.environment.set(\"random_Sensor\", _.random(100, 999))\r",
									"\r",
									"        //Get Random Sensor Control\r",
									"        pm.environment.set(\"random_Sensor_Control\", _.random(100, 999))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThingStateInfo\r",
									" CreateThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        // {\"Temp\" : pm.environment.get(\"random_Sensor\")}\r",
									"        let sensorValue = {};\r",
									"        sensorValue[fieldDataValue.CreateThingStateInfo.SensorKey] = pm.environment.get(\"random_Sensor\");\r",
									"        // console.log('sensorValue',sensorValue);\r",
									"        \r",
									"        let httpRequestCreateThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": [\r",
									"                    pm.environment.get(\"GetResponse_ThingID\")\r",
									"                ],\r",
									"                \"Type\": fieldDataValue.CreateThingStateInfo.Type_Report,\r",
									"                \"Sensor\": sensorValue\r",
									"            })\r",
									"        };\r",
									"    \r",
									"        let optionsCreateThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingCreateThingStateInfo,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThingStateInfo,\r",
									"            body: httpRequestCreateThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThingStateInfo');\r",
									"        let response = await reqPromise(optionsCreateThingStateInfo);\r",
									"        let jsonDataCreateThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataCreateThingStateInfo',jsonDataCreateThingStateInfo)\r",
									"    \r",
									"        let operationStatusCreateThingStateInfo = await jsonDataCreateThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"CreateThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //CreateThingStateInfo is Success\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionCreateThingStateInfo+'\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Description', resultDescriptionCreateThingStateInfo);\r",
									"        });\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"Signin();\r",
									"setTimeout(async function(){await CreatePartner();}, 3000); \r",
									"setTimeout(async function(){await CreateAccount();}, 6000); \r",
									"setTimeout(async function(){await CreateThing();}, 8000); \r",
									"setTimeout(async function(){await CreateThingStateInfo();}, 9000); \r",
									"setTimeout(async function(){}, 10000);  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-ais-OrderRef",
								"value": "{{x_ais_OrderRef_ControlThing_fail}}{{current_timestamp}}"
							},
							{
								"key": "x-ais-AccountKey",
								"type": "text",
								"value": "{{GetResponse_AccountId}}"
							},
							{
								"key": "x-ais-AccessToken",
								"value": "{{Bearer}} {{AccessToken}}"
							},
							{
								"key": "Accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"ThingId\": \"{{Value_Control_Thing_TST_F1_0_2_004_Error}}\",\r\n  \"Sensors\": {\r\n    \"{{SensorKey}}\": {{random_Sensor_Control}}\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{url}}{{mg4controlapis}}/api/v1/Control/Thing",
							"host": [
								"{{url}}{{mg4controlapis}}"
							],
							"path": [
								"api",
								"v1",
								"Control",
								"Thing"
							]
						},
						"description": "Type:Desire"
					},
					"response": []
				},
				{
					"name": "ControlThing_TST_F1_0_2_005_Error_SensorsNotFound",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to xAisOrderRef \"RemoveThing_\"\r",
									"var x_ais_OrderRef_RemoveThing = pm.globals.get(\"x_ais_OrderRef_RemoveThing\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"var x_ais_OrderDesc_RemoveThing = pm.globals.get(\"x_ais_OrderDesc_RemoveThing\");\r",
									"//get global variable to x_ais_OrderRef \"RemoveThingStateInfo_\"\r",
									"var x_ais_OrderDesc_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_RemoveThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThingStateInfo\"\r",
									"var x_ais_OrderRef_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderRef_RemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Control --------------//\r",
									"//get global variable to x_ais_OrderRef \"ControlThing_\"\r",
									"var x_ais_OrderRef_ControlThing = pm.globals.get(\"x_ais_OrderRef_ControlThing\");\r",
									"//get global variable to x_ais_OrderRef \"ControlThingfail_\"\r",
									"var x_ais_OrderRef_ControlThing_fail = pm.globals.get(\"x_ais_OrderRef_ControlThing_fail\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get url Remove --------------//\r",
									"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
									"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"var urlThingRemoveThing = pm.globals.get(\"urlThingRemoveThing\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"var urlThingRemoveThingStateInfo = pm.globals.get(\"urlThingRemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"RemovePartner is Success\"\r",
									"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
									"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
									"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
									"//get global variable to resultDescription \"RemoveThing is Success\"\r",
									"var resultDescriptionRemoveThing = pm.globals.get(\"resultDescriptionRemoveThing\");\r",
									"//get global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"var resultDescriptionRemoveThingStateInfo = pm.globals.get(\"resultDescriptionRemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 404\r",
									"var statusCodeNotFound = pm.globals.get(\"statusCodeNotFound\");\r",
									"//get global variable to resultCode \"40400\"\r",
									"var resultCodeNotFound = pm.globals.get(\"resultCodeNotFound\");\r",
									"//get global variable to resultDescription \"The Sensors is Not Found\"\r",
									"// var resultDescriptionErrorTheSensorsIsNotFound = pm.globals.get(\"resultDescriptionErrorTheSensorsIsNotFound\");\r",
									"//get global variable to statusCode 403\r",
									"var statusCodeForbidden = pm.globals.get(\"statusCodeForbidden\");\r",
									"//get global variable to resultCode \"40300\"\r",
									"var resultCodeForbiddenMissingOrInvalidParameter = pm.globals.get(\"resultCodeForbiddenMissingOrInvalidParameter\");\r",
									"//get global variable to resultDescription \"The Client Data is Missing Or Invalid Parameter\"\r",
									"var resultDescriptionTheClientDataIsMissingOrInvalidParameter = pm.globals.get(\"resultDescriptionTheClientDataIsMissingOrInvalidParameter\");\r",
									"//------------------------------------------------------------//\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"ControlThing : Status code is \" + statusCodeForbidden, function () {\r",
									"    pm.response.to.have.status(statusCodeForbidden);\r",
									"});\r",
									"\r",
									"pm.test('ControlThing : OperationStatus Code is '+'\"'+ resultCodeForbiddenMissingOrInvalidParameter +'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeForbiddenMissingOrInvalidParameter);\r",
									"});\r",
									"\r",
									"pm.test('ControlThing : OperationStatus DeveloperMessage is '+'\"'+ resultDescriptionTheClientDataIsMissingOrInvalidParameter+'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheClientDataIsMissingOrInvalidParameter);\r",
									"});\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// RemovePartner\r",
									" RemovePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemovePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemovePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemovePartner = {\r",
									"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemovePartner,\r",
									"            body: httpRequestRemovePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request RemovePartner');\r",
									"        let response = await reqPromise(optionsRemovePartner);\r",
									"        let jsonDataRemovePartner = await response.json();\r",
									"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
									"    \r",
									"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemovePartner is Success\r",
									"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveAccount\r",
									" RemoveAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemoveAccount = {\r",
									"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveAccount,\r",
									"            body: httpRequestRemoveAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveAccount');\r",
									"        let response = await reqPromise(optionsRemoveAccount);\r",
									"        let jsonDataRemoveAccount = await response.json();\r",
									"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
									"    \r",
									"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveAccount is Success\r",
									"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThing\r",
									" RemoveThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThing = {\r",
									"            url: url + provisioningapis + urlThingRemoveThing,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThing,\r",
									"            body: httpRequestRemoveThing\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveThing');\r",
									"        let response = await reqPromise(optionsRemoveThing);\r",
									"        let jsonDataRemoveThing = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThing)\r",
									"    \r",
									"        let operationStatusRemoveThing = await jsonDataRemoveThing.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThing : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThing : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThing is Success\r",
									"        pm.test('RemoveThing : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThing+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Description', resultDescriptionRemoveThing);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThingStateInfo\r",
									" RemoveThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"            \r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\"),\r",
									"                \"stateType\": fieldDataValue.CreateThingStateInfo.Type_Report, //Report\r",
									"                \"stateKey\": fieldDataValue.CreateThingStateInfo.SensorKey //Temp\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingRemoveThingStateInfo,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThingStateInfo,\r",
									"            body: httpRequestRemoveThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('response RemoveThingStateInfo');\r",
									"        let response = await reqPromise(optionsRemoveThingStateInfo);\r",
									"        let jsonDataRemoveThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataRemoveThingStateInfo',jsonDataRemoveThingStateInfo)\r",
									"    \r",
									"        let operationStatusRemoveThingStateInfo = await jsonDataRemoveThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThingStateInfo is Success\r",
									"        pm.test('RemoveThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThingStateInfo+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Description', resultDescriptionRemoveThingStateInfo);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"//---------------- LogDefaultValue --------------//\r",
									"//set variable to LogDefaultValue JSON.parse\r",
									"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
									"// console.log('LogDefaultValue',LogDefaultValue);\r",
									"//---------------- set globals Other --------------//\r",
									"var SearchLog = LogDefaultValue.SearchLog;\r",
									"// console.log('SearchLog',SearchLog);\r",
									"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
									"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
									"var kbn_version = SearchLog.header.kbn_version;\r",
									"var authorization = SearchLog.header.Authorization;\r",
									"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
									"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
									"var namespace = LogDefaultValue.Other.namespace_control4mg;\r",
									"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
									"var header_x_ais_accountkey = LogDefaultValue.Other.header_x_ais_accountkey;\r",
									"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
									"var methodPost = LogDefaultValue.Other.methodPost;\r",
									"\r",
									"// Detail\r",
									"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
									"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
									"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
									"\r",
									"// Summary\r",
									"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
									"// var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
									"// var customSummary = LogDefaultValue.OtherSummary.custom;\r",
									"// ControlAPIs\r",
									"var applicationName = LogDefaultValue.Control.applicationName_mg4;\r",
									"var cmdName = LogDefaultValue.Control.cmdNameThing;\r",
									"var endPointNameControlAPIs = LogDefaultValue.Control.endPointNameControlAPIs;\r",
									"var endPointNameDesireEx = LogDefaultValue.Control.endPointNameDesireEx;\r",
									"var containerId = LogDefaultValue.Control.containerId;\r",
									"var requestObjectUrlStaging = LogDefaultValue.Control.requestObjectUrlStagingThing;\r",
									"var xProtocolControl = LogDefaultValue.Control.xProtocolControl;\r",
									"var responseObjectPublished = LogDefaultValue.Control.responseObjectPublished;\r",
									"\r",
									"// Check CDR (Summary Log) and EDR (Detail Log)\r",
									"SearchLogFindTid = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSearchLogFindTid = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = pm.environment.get(\"GetResponse_ThingID\"); \r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestSearchLogFindTid = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"\r",
									"        let optionsSearchLogFindTid = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptSearchLogFindTid,\r",
									"            body: httpRequestSearchLogFindTid\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsSearchLogFindTid);\r",
									"        let jsonDataSearchLogFindTid = await response.json();\r",
									"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
									"        console.log('hits',hits)\r",
									"  \r",
									"        // find tid\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            // let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"        \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            if(applicationNameValue == applicationName){\r",
									"                let tid = hits[i]._source.cauldron.tid;\r",
									"                pm.environment.set(\"tid\", tid);\r",
									"                break;\r",
									"           }\r",
									"\r",
									"        }\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"CheckLog = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCheckLog = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = pm.environment.get(\"tid\");\r",
									"\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestCheckLog = {\r",
									"            mode: 'raw',\r",
									"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"        let optionsCheckLog = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptCheckLog,\r",
									"            body: httpRequestCheckLog\r",
									"        }; \r",
									"        let response = await reqPromise(optionsCheckLog);\r",
									"        let jsonDataCheckLog = await response.json();\r",
									"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
									"        \r",
									"        // //200\r",
									"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });     \r",
									"        \r",
									"        let hits = jsonDataCheckLog.hits.hits\r",
									"        console.log('hits',hits)\r",
									"  \r",
									"        // find logType\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            //  let logType = hits[i]._source.cauldron.logType\r",
									"            let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"           \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            \r",
									"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
									"            // console.log('resultDataLog',resultDataLog)\r",
									"\r",
									"            let tidControl = x_ais_OrderRef_ControlThing_fail + current_timestamp;\r",
									"            // console.log(tidControl);\r",
									"            if(applicationNameValue == applicationName){\r",
									"                 \r",
									"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ControlAPIs\r",
									"                    pm.test(\"Check Summary Log : ControlThing\" , function () {\r",
									"                        console.log(\"======== Check Summary Log ( Expected = Actual) [ControlThing] ==================\");\r",
									"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
									"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
									"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeForbiddenMissingOrInvalidParameter);\r",
									"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionTheClientDataIsMissingOrInvalidParameter);\r",
									"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
									"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        // console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
									"                        // console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
									"\r",
									"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
									"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
									"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeForbiddenMissingOrInvalidParameter); \r",
									"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionTheClientDataIsMissingOrInvalidParameter); \r",
									"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
									"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"\r",
									"                        let thingId = pm.environment.get(\"GetResponse_ThingID\");\r",
									"                        let customUrl= urlCheckLog + requestObjectUrlStaging;\r",
									"                        let customAccountkey = pm.environment.get(\"GetResponse_AccountId\");\r",
									"\r",
									"                        // check identity\r",
									"                        // \"identity\":\"{\\\"ThingID\\\":\\\"60114adea32e8c0001576d2a\\\"}\"\r",
									"                        let dataSummaryIdentity = JSON.parse(resultDataLog.identity);\r",
									"\r",
									"                        console.log(\"identity.ThingID : \" + dataSummaryIdentity.ThingID + \" = \" + thingId);\r",
									"                        pm.expect(dataSummaryIdentity.ThingID).to.eql(thingId); \r",
									"\r",
									"                        // check custom\r",
									"                        // \\\"custom\\\":{ \\\"customData\\\":{ \\\"url\\\":\\\"mg-iot.sandais.com/api/v1/Control/Thing\\\", \\\"accountkey\\\":\\\"60995f9526fdbc0001c36fef\\\", \\\"ThingID\\\":[ \\\"60995f9726fdbc0001c36ff9\\\" ] }, \\\"endPointSummary\\\":[ { \\\"no\\\":\\\"1\\\", \\\"endPointName\\\":\\\"db.AuthenticationCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:Inquiry was Success\\\", \\\"processTime\\\":0.0002 }, { \\\"no\\\":\\\"2\\\", \\\"endPointName\\\":\\\"db.ClientsCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:Inquiry was Success\\\", \\\"processTime\\\":0.0005 }, { \\\"no\\\":\\\"3\\\", \\\"endPointName\\\":\\\"db.AccountsCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:Inquiry was Success\\\", \\\"processTime\\\":0.0003 }, { \\\"no\\\":\\\"4\\\", \\\"endPointName\\\":\\\"db.ThingsCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:Inquiry was Success\\\", \\\"processTime\\\":0.0005 } ] }\r",
									"\r",
									"                        let customData = resultDataLog.custom.customData\r",
									"\r",
									"                        console.log(\"custom.url : \" + customData.url + \" = \" + customUrl);\r",
									"                        console.log(\"custom.accountkey : \" + customData.accountkey + \" = \" + customAccountkey);\r",
									"                        console.log(\"custom.ThingID[0] : \" + customData.ThingID[0] + \" = \" + thingId);\r",
									"\r",
									"                        pm.expect(customData.url).to.eql(customUrl); \r",
									"                        pm.expect(customData.accountkey).to.eql(customAccountkey); \r",
									"                        pm.expect(customData.ThingID[0]).to.eql(thingId); \r",
									"\r",
									"                        let custom = resultDataLog.custom.endPointSummary;\r",
									"                        let countCustom = custom.length;\r",
									"                       \r",
									"                        // [\"db.AuthenticationCollection\",\"db.ClientsCollection\",\"db.AccountsCollection\",\"db.ThingsCollection\"]\r",
									"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_ControlThing;\r",
									"                        // [\"20000:Inquiry was Success\",\"20000:Inquiry was Success\",\"20000:Inquiry was Success\",\"20000:Inquiry was Success\"]\r",
									"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_ControlThing;\r",
									"                        let countCustomStep = dataEndPointName.length;\r",
									"\r",
									"                        console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep);\r",
									"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
									"                        \r",
									"                        for(let i=0;i<countCustomStep;i++){\r",
									"                            let no = custom[i].no;\r",
									"                            let valueEndPointName = custom[i].endPointName;\r",
									"                            let valueResponseStatus = custom[i].responseStatus;\r",
									"                            // console.log(\"i\",i);\r",
									"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
									"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
									"\r",
									"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString());\r",
									"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i]);\r",
									"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i]);\r",
									"\r",
									"                            pm.expect(no).to.eql((i+1).toString()); \r",
									"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
									"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]); \r",
									"                        }\r",
									"                    }); \r",
									"                }\r",
									"\r",
									"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ControlAPIs\r",
									"\r",
									"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
									"                    // console.log('endPointNameValue ',endPointNameValue)\r",
									"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [ControlThing]\", function () {\r",
									"                        console.log(\"======== Check Detail Log ( Expected = Actual) [ControlThing] ==================\");\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
									"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
									"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
									"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.custom1.activityLog.processTime + \" = \" + resultDataLog.custom1.activityLog.processTime);\r",
									"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
									"\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
									"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
									"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
									"\r",
									"                        // if( endPointNameValue == endPointNameControlAPIs){     //\"endPointName\":\"ControlAPIs\"\r",
									"\r",
									"                            // console.log(\"custom1.endPointName : \" + resultDataLog.custom1.endPointName + \" = \" + endPointNameControlAPIs);\r",
									"                            // pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameControlAPIs); \r",
									"\r",
									"                            // check requestObject\r",
									"                            // \"requestObject\":\"{\\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Control/Thing\\\",\\\"method\\\":\\\"POST\\\",\\\"headers\\\":{\\\"x-ais-orderref\\\":\\\"ControlThing_202101271801621\\\",\\\"x-ais-accountkey\\\":\\\"60114adca32e8c0001576d22\\\",\\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAGhfn1wJCmf68Vf1zYxZ/fak0lmQ84nNnLsXbdYpFNnXEIlAkkY2KW0\\\"},\\\"body\\\":{\\\"ThingId\\\":\\\"60114adea32e8c0001576d2a\\\",\\\"Sensors\\\":{\\\"Temp\\\":955}}}\"\r",
									"\r",
									"                            // \\\"requestObject\\\":\\\"{ \\\\\\\"url\\\\\\\":\\\\\\\"/api/v1/Control/Thing\\\\\\\", \\\\\\\"method\\\\\\\":\\\\\\\"POST\\\\\\\", \\\\\\\"headers\\\\\\\":{ \\\\\\\"Cache-Control\\\\\\\":\\\\\\\"no-cache\\\\\\\", \\\\\\\"Content-Type\\\\\\\":\\\\\\\"application/json\\\\\\\", \\\\\\\"Accept\\\\\\\":\\\\\\\"*/*\\\\\\\", \\\\\\\"Accept-Encoding\\\\\\\":\\\\\\\"gzip, deflate, br\\\\\\\", \\\\\\\"Host\\\\\\\":\\\\\\\"mg-iot.sandais.com\\\\\\\", \\\\\\\"User-Agent\\\\\\\":\\\\\\\"PostmanRuntime/7.26.8\\\\\\\", \\\\\\\"Content-Length\\\\\\\":\\\\\\\"83\\\\\\\", \\\\\\\"x-real-ip\\\\\\\":\\\\\\\"182.232.34.151\\\\\\\", \\\\\\\"x-forwarded-for\\\\\\\":\\\\\\\"182.232.34.151, 10.233.64.0\\\\\\\", \\\\\\\"x-forwarded-proto\\\\\\\":\\\\\\\"http\\\\\\\", \\\\\\\"x-ais-orderref\\\\\\\":\\\\\\\"ControlThingfail_202105102305496\\\\\\\", \\\\\\\"x-ais-accountkey\\\\\\\":\\\\\\\"60995f9526fdbc0001c36fef\\\\\\\", \\\\\\\"x-ais-accesstoken\\\\\\\":\\\\\\\"Bearer ibnxnVhs5Rx3IwglWv7/gVA/1TpQnKqAOBAADlRDvYhOpXwmlpYOEb5yfY5aZpoj0YRWRZM26i9HOqtc1fc1jpNDOK5JpISttmMEy59g2py7nLWonDe2YW2OPRGWSowk6+9ZihLU1fZ5d5jAqqrZaKlOAAI3N1TXDNLsHuKcOJMcERbCcaMqRaku+MY4/kzE+eyIdkfwwbjT91S2VQq+Wk2ooMWuLk6/DHVJhwbMP7bDII39StiusO0jdRUtn+bLgLLtCrcFurhKVegMrc8SMg==\\\\\\\", \\\\\\\"postman-token\\\\\\\":\\\\\\\"999d9526-0291-4956-9e3e-ca68b601ae95\\\\\\\", \\\\\\\"x-envoy-external-address\\\\\\\":\\\\\\\"10.233.64.0\\\\\\\", \\\\\\\"x-request-id\\\\\\\":\\\\\\\"305d192a-8cbb-4767-a844-27b4da59f000\\\\\\\", \\\\\\\"x-envoy-original-path\\\\\\\":\\\\\\\"/mg4controlapis/api/v1/Control/Thing\\\\\\\", \\\\\\\"x-b3-traceid\\\\\\\":\\\\\\\"e66c6dab2227e6077f6d4f97f23f91a5\\\\\\\", \\\\\\\"x-b3-spanid\\\\\\\":\\\\\\\"4e64d522acf9dbc1\\\\\\\", \\\\\\\"x-b3-parentspanid\\\\\\\":\\\\\\\"7f6d4f97f23f91a5\\\\\\\", \\\\\\\"x-b3-sampled\\\\\\\":\\\\\\\"0\\\\\\\", \\\\\\\"x-ais-SessionId\\\\\\\":\\\\\\\"1620664217110\\\\\\\", \\\\\\\"identity\\\\\\\":\\\\\\\"{ \\\\\\\\\\\\\\\"ThingID\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"60995f9726fdbc0001c36ff9\\\\\\\\\\\\\\\" }\\\\\\\", \\\\\\\"custom\\\\\\\":\\\\\\\"{ \\\\\\\\\\\\\\\"url\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"mg-iot.sandais.com/api/v1/Control/Thing\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"accountkey\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"60995f9526fdbc0001c36fef\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"ThingID\\\\\\\\\\\\\\\":[ \\\\\\\\\\\\\\\"60995f9726fdbc0001c36ff9\\\\\\\\\\\\\\\" ] }\\\\\\\" }, \\\\\\\"queryString\\\\\\\":{ }, \\\\\\\"routeParamteters\\\\\\\":{ }, \\\\\\\"body\\\\\\\":{ \\\\\\\"ThingId\\\\\\\":\\\\\\\"60995f9726fdbc0001c36ff9\\\\\\\", \\\\\\\"Sensors\\\\\\\":{ \\\\\\\"emp\\\\\\\":971 } } }\\\"\r",
									"                            \r",
									"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
									"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
									"\r",
									"                            let url = requestObjectUrlStaging; \r",
									"                            let urlCustom = urlCheckLog + requestObjectUrlStaging; \r",
									"                            // for case Control_Thing_TST_F1_0_2_005_Error\r",
									"                            let SensorKey = pm.environment.get(\"Value_Control_Thing_TST_F1_0_2_005_Error\");\r",
									"                            let sensor = pm.environment.get(\"random_Sensor_Control\");\r",
									"                            let x_ais_orderref = x_ais_OrderRef_ControlThing_fail + current_timestamp;\r",
									"                            let x_ais_AccountKey = pm.environment.get(\"GetResponse_AccountId\");\r",
									"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken\");\r",
									"                            let thingId = pm.environment.get(\"GetResponse_ThingID\");\r",
									"\r",
									"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
									"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
									"                            console.log(\"headers.x_ais_AccountKey : \" + jsonParseRequestObject.headers[header_x_ais_accountkey] + \" = \" + x_ais_AccountKey);\r",
									"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
									"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accountkey]).to.eql(x_ais_AccountKey);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
									"\r",
									"                            let identity = JSON.parse(jsonParseRequestObject.headers.identity)\r",
									"                            console.log(\"headers.identity.ThingID : \" + identity.ThingID + \" = \" + thingId);\r",
									"                            pm.expect(identity.ThingID).to.eql(thingId);\r",
									"                            \r",
									"                            let custom = JSON.parse(jsonParseRequestObject.headers.custom)\r",
									"                            console.log(\"headers.custom.url : \" + custom.url + \" = \" + urlCustom);\r",
									"                            console.log(\"headers.custom.accountkey : \" + custom.accountkey + \" = \" + x_ais_AccountKey);\r",
									"                            console.log(\"headers.custom.ThingID[0] : \" + custom.ThingID[0] + \" = \" + thingId);\r",
									"                            \r",
									"                            pm.expect(custom.url).to.eql(urlCustom);\r",
									"                            pm.expect(custom.accountkey).to.eql(x_ais_AccountKey);\r",
									"                            pm.expect(custom.ThingID[0]).to.eql(thingId);\r",
									"\r",
									"                            console.log(\"queryString : \" + JSON.stringify(jsonParseRequestObject.queryString) + \" = \" + JSON.stringify({}));\r",
									"                            pm.expect(jsonParseRequestObject.queryString).to.eql({});\r",
									"\r",
									"                            console.log(\"routeParamteters : \" + JSON.stringify(jsonParseRequestObject.routeParamteters) + \" = \" + JSON.stringify({}));\r",
									"                            pm.expect(jsonParseRequestObject.routeParamteters).to.eql({});\r",
									"\r",
									"                            console.log(\"resquest.body.ThingId : \" + jsonParseRequestObject.body.ThingId + \" = \" + thingId);\r",
									"                            console.log(\"resquest.body.Sensors.\" + SensorKey + \"  : \" + jsonParseRequestObject.body.Sensors[SensorKey] + \" = \" + sensor);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.body.ThingId).to.eql(thingId);\r",
									"                            pm.expect(jsonParseRequestObject.body.Sensors[SensorKey]).to.eql(sensor);\r",
									"\r",
									"                            // check responseObject\r",
									"                            // \\\"responseObject\\\":\\\"{ \\\\\\\"OperationStatus\\\\\\\":{ \\\\\\\"Code\\\\\\\":\\\\\\\"40300\\\\\\\", \\\\\\\"DeveloperMessage\\\\\\\":\\\\\\\"The Client Data is Missing Or Invalid Parameter\\\\\\\" } }\\\"\r",
									"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
									"                            // console.log('jsonParseResponseObject',jsonParseResponseObject);\r",
									"\r",
									"                            console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeForbiddenMissingOrInvalidParameter);\r",
									"                            console.log(\"response.OperationStatus.DeveloperMessage : \" + jsonParseResponseObject.OperationStatus.DeveloperMessage + \" = \" + resultDescriptionTheClientDataIsMissingOrInvalidParameter);\r",
									"\r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeForbiddenMissingOrInvalidParameter);  \r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheClientDataIsMissingOrInvalidParameter);  \r",
									"                        // }\r",
									"\r",
									"                    }); \r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"setTimeout(function(){SearchLogFindTid();}, 20000); \r",
									"setTimeout(function(){CheckLog();}, 30000); \r",
									"\r",
									"setTimeout(function(){RemoveThingStateInfo();}, 40000); \r",
									"setTimeout(function(){RemoveThing();}, 45000); \r",
									"setTimeout(function(){RemoveAccount();}, 50000); \r",
									"setTimeout(function(){RemovePartner();}, 55000); \r",
									"\r",
									"setTimeout(function(){\r",
									"pm.environment.unset(\"current_timestamp\");\r",
									"pm.environment.unset(\"AccessToken\");\r",
									"pm.environment.unset(\"random_number\");\r",
									"pm.environment.unset(\"PartnerName\");\r",
									"pm.environment.unset(\"MerchantContact\");\r",
									"pm.environment.unset(\"CPID\");\r",
									"pm.environment.unset(\"GetResponse_PartnerId\");\r",
									"pm.environment.unset(\"AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountId\");\r",
									"pm.environment.unset(\"random_IM\");\r",
									"pm.environment.unset(\"random_ICCID\");\r",
									"pm.environment.unset(\"ThingName\");\r",
									"pm.environment.unset(\"GetResponse_ThingID\");\r",
									"pm.environment.unset(\"random_Sensor\");\r",
									"pm.environment.unset(\"tid\");\r",
									"pm.environment.unset(\"Value_Control_Thing_TST_F1_0_2_005_Error\");\r",
									"pm.environment.unset(\"random_Sensor_Control\");\r",
									"}, 90000); "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var Username = pm.environment.get(\"Username\");\r",
									"var Password = pm.environment.get(\"Password\");\r",
									"\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"pm.environment.set(\"Value_Control_Thing_TST_F1_0_2_005_Error\",fieldDataValue.Control.Value_Control_Thing_TST_F1_0_2_005_Error)\r",
									"\r",
									"//format YYYYMMDDHHMMSSS\r",
									"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
									"// console.log('currentTmestamp',currentTmestamp);\r",
									"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- statusCodeList --------------//\r",
									"//set variable to statusCodeList JSON.parse\r",
									"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
									"//set global variable to statusCode 200\r",
									"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
									"//set global variable to statusCode 201\r",
									"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
									"//set global variable to statusCode 404\r",
									"pm.globals.set(\"statusCodeNotFound\", statusCodeList.statusCodeNotFound);\r",
									"//set global variable to statusCode 403\r",
									"pm.globals.set(\"statusCodeForbidden\", statusCodeList.statusCodeForbidden);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultCodeList --------------//\r",
									"//set variable to resultCodeList JSON.parse\r",
									"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
									"//set global variable to resultCode \"20000\"\r",
									"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
									"//set global variable to resultCode \"20100\"\r",
									"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
									"//set global variable to resultCode \"40400\"\r",
									"pm.globals.set(\"resultCodeNotFound\", resultCodeList.resultCodeNotFound);\r",
									"//set global variable to resultCode \"40300\"\r",
									"pm.globals.set(\"resultCodeForbiddenMissingOrInvalidParameter\", resultCodeList.resultCodeForbiddenMissingOrInvalidParameter);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionSuccessList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
									"//set global variable to resultDescription \"SignInProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
									"//set global variable to resultDescription \"CreatePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
									"//set global variable to resultDescription \"CreateAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
									"//set global variable to resultDescription \"CreateThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThing\", resultDescriptionSuccessList.resultDescriptionCreateThing);\r",
									"//set global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThingStateInfo\", resultDescriptionSuccessList.resultDescriptionCreateThingStateInfo);\r",
									"//set global variable to resultDescription \"RemovePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
									"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
									"//set global variable to resultDescription \"RemoveThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThing\", resultDescriptionSuccessList.resultDescriptionRemoveThing);\r",
									"//set global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThingStateInfo\", resultDescriptionSuccessList.resultDescriptionRemoveThingStateInfo);\r",
									"//set global variable to resultDescription \"Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccess\", resultDescriptionSuccessList.resultDescriptionSuccess);\r",
									"//set global variable to resultDescription \"Created Success\"\r",
									"pm.globals.set(\"resultDescriptionCreatedSuccess\", resultDescriptionSuccessList.resultDescriptionCreatedSuccess);\r",
									"//set global variable to resultDescription \"ControlOneThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessControlOneThing\", resultDescriptionSuccessList.resultDescriptionSuccessControlOneThing);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionErrorList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
									"//set global variable to resultDescription \"The Sensors is Not Found\"\r",
									"// pm.globals.set(\"resultDescriptionErrorTheSensorsIsNotFound\", resultDescriptionErrorList.resultDescriptionErrorTheSensorsIsNotFound);\r",
									"//set global variable to resultDescription \"The Client Data is Missing Or Invalid Parameter\"\r",
									"pm.globals.set(\"resultDescriptionTheClientDataIsMissingOrInvalidParameter\", resultDescriptionErrorList.resultDescriptionTheClientDataIsMissingOrInvalidParameter);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- HeaderList --------------//\r",
									"//set variable to HeaderList JSON.parse\r",
									"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
									"//---------------- set globals Other --------------//\r",
									"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
									"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
									"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
									"//set global variable to kbn-versio \"7.5.1\"\r",
									"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Signin_ --------------//\r",
									"//set global variable to x_ais_OrderRef \"Signin_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreatePartner --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
									"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
									"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
									"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreateAccount --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
									"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
									"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Thing --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThing\", HeaderList.Thing.x_ais_OrderRef_CreateThing);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThing\", HeaderList.Thing.x_ais_OrderDesc_CreateThing);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThing\", HeaderList.Thing.x_ais_OrderRef_RemoveThing);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThing\", HeaderList.Thing.x_ais_OrderDesc_RemoveThing);\r",
									"//set global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_RemoveThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_RemoveThingStateInfo);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Control --------------//\r",
									"//set global variable to x_ais_OrderRef \"ControlThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ControlThing\", HeaderList.Control.x_ais_OrderRef_ControlThing);\r",
									"//set global variable to x_ais_OrderRef \"ControlThingfail_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ControlThing_fail\", HeaderList.Control.x_ais_OrderRef_ControlThing_fail);\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"SignInProcess is Success\"\r",
									"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
									"//get global variable to resultDescription \"CreatePartner is Success\"\r",
									"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
									"//get global variable to resultDescription \"CreateAccount is Success\"\r",
									"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
									"//get global variable to resultDescription \"CreateThing is Success\"\r",
									"var resultDescriptionCreateThing = pm.globals.get(\"resultDescriptionCreateThing\");\r",
									"//get global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"var resultDescriptionCreateThingStateInfo = pm.globals.get(\"resultDescriptionCreateThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- urlRouteList --------------//\r",
									"//set variable to urlRouteList JSON.parse\r",
									"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
									"//---------------- set url Create --------------//\r",
									"//set global variable to url \"/api/v1/auth/signin\"\r",
									"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
									"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
									"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"pm.globals.set(\"urlThingCreateThing\", urlRouteList.Thing.urlThingCreateThing);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"pm.globals.set(\"urlThingCreateThingStateInfo\", urlRouteList.Thing.urlThingCreateThingStateInfo);\r",
									"//---------------- get url Create --------------//\r",
									"//get global variable to url \"/api/v1/auth/signin\"\r",
									"var urlSignin = pm.globals.get(\"urlSignin\");\r",
									"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
									"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"var urlThingCreateThing = pm.globals.get(\"urlThingCreateThing\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"var urlThingCreateThingStateInfo = pm.globals.get(\"urlThingCreateThingStateInfo\");\r",
									"//---------------- set url Remove --------------//\r",
									"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
									"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"pm.globals.set(\"urlThingRemoveThing\", urlRouteList.Thing.urlThingRemoveThing);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"pm.globals.set(\"urlThingRemoveThingStateInfo\", urlRouteList.Thing.urlThingRemoveThingStateInfo);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Signin_ --------------//\r",
									"//get global variable to x_ais_OrderRef \"Signin_\"\r",
									"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"var x_ais_OrderRef_CreateThing = pm.globals.get(\"x_ais_OrderRef_CreateThing\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"var x_ais_OrderDesc_CreateThing = pm.globals.get(\"x_ais_OrderDesc_CreateThing\");\r",
									"//get global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"var x_ais_OrderRef_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderRef_CreateThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"var x_ais_OrderDesc_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_CreateThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// Signin get token\r",
									" Signin = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSignin = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestSignin = {\r",
									"            mode: 'raw',\r",
									"            raw: \r",
									"            JSON.stringify({\r",
									"                username:Username,\r",
									"                password:Password\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsSignin = {\r",
									"            url: url + provisioningapis + urlSignin,\r",
									"            method: 'POST',\r",
									"            header: headersOptSignin,\r",
									"            body: httpRequestSignin\r",
									"        };\r",
									"        // console.log('request Signin');\r",
									"        let response = await reqPromise(optionsSignin);\r",
									"        let jsonDataSignin = await response.json();\r",
									"\r",
									"        // setAccessToken\r",
									"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
									"\r",
									"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // SignInProcess is Success\r",
									"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
									"        });\r",
									"\r",
									"        //set random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //set PartnerName\r",
									"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
									"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
									"        //set MerchantContact\r",
									"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
									"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
									"        // set CPID\r",
									"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
									"        pm.environment.set(\"CPID\", CPIDValue)\r",
									"        \r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreatePartner\r",
									" CreatePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreatePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreatePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
									"                \"PartnerType\": [\r",
									"                    \"Supplier\",\r",
									"                    \"Customer\"\r",
									"                ],\r",
									"                \"PartnerDetail\": {\r",
									"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
									"                    \"CPID\": pm.environment.get(\"CPID\")\r",
									"                },\r",
									"                \"Property\": {\r",
									"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsCreatePartner = {\r",
									"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreatePartner,\r",
									"            body: httpRequestCreatePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsCreatePartner);\r",
									"        let jsonDataCreatePartner = await response.json();\r",
									"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
									"    \r",
									"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreatePartner is Success\r",
									"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
									"        });\r",
									"\r",
									"        //GetResponse_PartnerId\r",
									"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
									"\r",
									"        //Accountname\r",
									"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
									"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateAccount\r",
									" CreateAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreateAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
									"                })\r",
									"        };\r",
									"        \r",
									"        let optionsCreateAccount = {\r",
									"            url: url + provisioningapis + urlAccountCreateAccount,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateAccount,\r",
									"            body: httpRequestCreateAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateAccount');\r",
									"        let response = await reqPromise(optionsCreateAccount);\r",
									"        let jsonDataCreateAccount = await response.json();\r",
									"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
									"    \r",
									"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateAccount : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateAccount is Success\r",
									"        pm.test('CreateAccount : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
									"        });\r",
									"        // GetResponse_AccountName\r",
									"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
									"        // GetResponse_AccountId\r",
									"        pm.environment.set(\"GetResponse_AccountId\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
									"        // random_IM\r",
									"        pm.environment.set(\"random_IM\", _.random(10000000, 99999999)+\" \"+_.random(1000000, 9999999))\r",
									"        // random_ICCID\r",
									"        pm.environment.set(\"random_ICCID\", _.random(1000000, 9999999)+\" \"+_.random(100000, 999999))\r",
									"        // random_number\r",
									"        pm.environment.set(\"random_number\",pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //ThingName\r",
									"        let thingNameValue = fieldDataValue.Thing.ThingNameValue; // \"Sensor_TestThingName\"\r",
									"        pm.environment.set(\"ThingName\", thingNameValue + pm.environment.get(\"random_number\"))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThing\r",
									" CreateThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreateThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingName\": pm.environment.get(\"ThingName\"),\r",
									"                \"IMEI\": pm.environment.get(\"random_IM\"),\r",
									"                \"IMSI\": pm.environment.get(\"random_IM\"),\r",
									"                \"ICCID\": pm.environment.get(\"random_ICCID\"),\r",
									"                \"RouteUrl\": fieldDataValue.Thing.RouteUrlValue , //[\"http://10.12.3.4:2019/api/information/AddInformation\"]\r",
									"                \"RouteInfo\": {\r",
									"                    \"MIMO_ID\": fieldDataValue.Thing.RouteInfoMIMOIDValue , //\"606edada\"\r",
									"                    \"MIMO_SerialNo\": fieldDataValue.Thing.RouteInfoMIMOSerialNoValue //5466758878\r",
									"                },\r",
									"                \"RouteFlag\": {\r",
									"                    \"ThingName\": fieldDataValue.Thing.RouteFlagThingNameValue , //true\r",
									"                    \"ThingToken\": fieldDataValue.Thing.RouteFlagThingTokenValue, //true\r",
									"                    \"IMEI\": fieldDataValue.Thing.RouteFlagIMEIValue, //true\r",
									"                    \"ICCID\": fieldDataValue.Thing.RouteFlagICCIDValue, //true\r",
									"                    \"RouteInfo\": fieldDataValue.Thing.RouteFlagRouteInfoValue //true\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsCreateThing = {\r",
									"            url: url + provisioningapis + urlThingCreateThing,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThing,\r",
									"            body: httpRequestCreateThing\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThing');\r",
									"        let response = await reqPromise(optionsCreateThing);\r",
									"        let jsonDataCreateThing = await response.json();\r",
									"        // console.log('jsonDataCreateThing',jsonDataCreateThing)\r",
									"    \r",
									"        let operationStatusCreateThing = await jsonDataCreateThing.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateThing : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateThing : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateThing is Success\r",
									"        pm.test('CreateThing : OperationStatus Description is '+'\"'+ resultDescriptionCreateThing+'\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Description', resultDescriptionCreateThing);\r",
									"        });\r",
									"\r",
									"        pm.environment.set(\"GetResponse_ThingID\",jsonDataCreateThing.ThingInfo.ThingId)\r",
									"\r",
									"        //Get Random Sensor \r",
									"        pm.environment.set(\"random_Sensor\", _.random(100, 999))\r",
									"\r",
									"        //Get Random Sensor Control\r",
									"        pm.environment.set(\"random_Sensor_Control\", _.random(100, 999))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThingStateInfo\r",
									" CreateThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        // {\"Temp\" : pm.environment.get(\"random_Sensor\")}\r",
									"        let sensorValue = {};\r",
									"        sensorValue[fieldDataValue.CreateThingStateInfo.SensorKey] = pm.environment.get(\"random_Sensor\");\r",
									"        // console.log('sensorValue',sensorValue);\r",
									"        \r",
									"        let httpRequestCreateThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": [\r",
									"                    pm.environment.get(\"GetResponse_ThingID\")\r",
									"                ],\r",
									"                \"Type\": fieldDataValue.CreateThingStateInfo.Type_Report,\r",
									"                \"Sensor\": sensorValue\r",
									"            })\r",
									"        };\r",
									"    \r",
									"        let optionsCreateThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingCreateThingStateInfo,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThingStateInfo,\r",
									"            body: httpRequestCreateThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThingStateInfo');\r",
									"        let response = await reqPromise(optionsCreateThingStateInfo);\r",
									"        let jsonDataCreateThingStateInfo = await response.json();\r",
									"        // console.log('jsonDataCreateThingStateInfo',jsonDataCreateThingStateInfo)\r",
									"    \r",
									"        let operationStatusCreateThingStateInfo = await jsonDataCreateThingStateInfo.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"CreateThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //CreateThingStateInfo is Success\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionCreateThingStateInfo+'\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Description', resultDescriptionCreateThingStateInfo);\r",
									"        });\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"Signin();\r",
									"setTimeout(async function(){await CreatePartner();}, 3000); \r",
									"setTimeout(async function(){await CreateAccount();}, 6000); \r",
									"setTimeout(async function(){await CreateThing();}, 8000); \r",
									"setTimeout(async function(){await CreateThingStateInfo();}, 9000); \r",
									"setTimeout(async function(){}, 10000);  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-ais-OrderRef",
								"value": "{{x_ais_OrderRef_ControlThing_fail}}{{current_timestamp}}"
							},
							{
								"key": "x-ais-AccountKey",
								"type": "text",
								"value": "{{GetResponse_AccountId}}"
							},
							{
								"key": "x-ais-AccessToken",
								"value": "{{Bearer}} {{AccessToken}}"
							},
							{
								"key": "Accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"ThingId\": \"{{GetResponse_ThingID}}\",\r\n  \"Sensors\": {\r\n    \"{{Value_Control_Thing_TST_F1_0_2_005_Error}}\": {{random_Sensor_Control}}\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{url}}{{mg4controlapis}}/api/v1/Control/Thing",
							"host": [
								"{{url}}{{mg4controlapis}}"
							],
							"path": [
								"api",
								"v1",
								"Control",
								"Thing"
							]
						},
						"description": "Type:Desire"
					},
					"response": []
				}
			]
		},
		{
			"name": "ControlThings",
			"item": [
				{
					"name": "ControlThings_TST_F2_1_1_001_Success_SensorIsText",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//count for loop data\r",
									"var countData = 2;\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to xAisOrderRef \"RemoveThing_\"\r",
									"var x_ais_OrderRef_RemoveThing = pm.globals.get(\"x_ais_OrderRef_RemoveThing\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"var x_ais_OrderDesc_RemoveThing = pm.globals.get(\"x_ais_OrderDesc_RemoveThing\");\r",
									"//get global variable to xAisOrderRef \"InquiryThing_\"\r",
									"var x_ais_OrderRef_InquiryThing = pm.globals.get(\"x_ais_OrderRef_InquiryThing\");\r",
									"//get global variable to x_ais_OrderDesc \"InquiryThing\"\r",
									"var x_ais_OrderDesc_InquiryThing = pm.globals.get(\"x_ais_OrderDesc_InquiryThing\");\r",
									"//get global variable to x_ais_OrderRef \"RemoveThingStateInfo_\"\r",
									"var x_ais_OrderDesc_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_RemoveThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThingStateInfo\"\r",
									"var x_ais_OrderRef_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderRef_RemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Control --------------//\r",
									"//get global variable to x_ais_OrderRef \"ControlThings_\"\r",
									"var x_ais_OrderRef_ControlThings = pm.globals.get(\"x_ais_OrderRef_ControlThings\");\r",
									"//get global variable to x_ais_OrderRef \"ControlThingsfail_\"\r",
									"var x_ais_OrderRef_ControlThings_fail = pm.globals.get(\"x_ais_OrderRef_ControlThings_fail\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get url Remove --------------//\r",
									"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
									"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"var urlThingRemoveThing = pm.globals.get(\"urlThingRemoveThing\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"var urlThingRemoveThingStateInfo = pm.globals.get(\"urlThingRemoveThingStateInfo\");\r",
									"//---------------- get url Inquiry --------------//\r",
									"//get global variable to url \"/api/v1/Thing/InquiryThingr\"\r",
									"var urlThingInquiryThing = pm.globals.get(\"urlThingInquiryThing\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"RemovePartner is Success\"\r",
									"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
									"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
									"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
									"//get global variable to resultDescription \"RemoveThing is Success\"\r",
									"var resultDescriptionRemoveThing = pm.globals.get(\"resultDescriptionRemoveThing\");\r",
									"//get global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"var resultDescriptionRemoveThingStateInfo = pm.globals.get(\"resultDescriptionRemoveThingStateInfo\");\r",
									"//get global variable to resultDescription \"InquiryThing is Success\"\r",
									"var resultDescriptionInquiryThing = pm.globals.get(\"resultDescriptionInquiryThing\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to resultDescription \"ControlManyThings is Success\"\r",
									"// var resultDescriptionSuccessControlManyThings = pm.globals.get(\"resultDescriptionSuccessControlManyThings\");\r",
									"//get global variable to resultDescription \"The requested operation was successfully.\"\r",
									"var resultDescriptionTheRequestedOperationWasSuccessfully = pm.globals.get(\"resultDescriptionTheRequestedOperationWasSuccessfully\");\r",
									"//------------------------------------------------------------//\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"ControlThings : Status code is \" + statusCodeSuccess, function () {\r",
									"    pm.response.to.have.status(statusCodeSuccess);\r",
									"});\r",
									"\r",
									"pm.test('ControlThings : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeSuccess);\r",
									"});\r",
									"\r",
									"pm.test('ControlThings : OperationStatus DeveloperMessage is '+'\"'+ resultDescriptionTheRequestedOperationWasSuccessfully+'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"});\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// RemovePartner\r",
									" RemovePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemovePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemovePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemovePartner = {\r",
									"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemovePartner,\r",
									"            body: httpRequestRemovePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request RemovePartner');\r",
									"        let response = await reqPromise(optionsRemovePartner);\r",
									"        let jsonDataRemovePartner = await response.json();\r",
									"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
									"    \r",
									"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemovePartner is Success\r",
									"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveAccount\r",
									" RemoveAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemoveAccount = {\r",
									"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveAccount,\r",
									"            body: httpRequestRemoveAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveAccount');\r",
									"        let response = await reqPromise(optionsRemoveAccount);\r",
									"        let jsonDataRemoveAccount = await response.json();\r",
									"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
									"    \r",
									"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveAccount is Success\r",
									"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThing\r",
									" RemoveThing = async () =>  {\r",
									"    try {\r",
									"\r",
									"        // header\r",
									"        let headersOptRemoveThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        let dataThingIDArray = JSON.parse(pm.environment.get(\"GetResponse_ThingIDArr\"));\r",
									"\r",
									"        for(let i=0;i<countData;i++){\r",
									"\r",
									"            // body\r",
									"            let httpRequestRemoveThing = {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                    \"ThingId\": dataThingIDArray[i]\r",
									"                })\r",
									"            };\r",
									"\r",
									"            let optionsRemoveThing = {\r",
									"                url: url + provisioningapis + urlThingRemoveThing,\r",
									"                method: 'DELETE',\r",
									"                header: headersOptRemoveThing,\r",
									"                body: httpRequestRemoveThing\r",
									"            };\r",
									"            // console.log('request RemoveThing');\r",
									"            let response = await reqPromise(optionsRemoveThing);\r",
									"            let jsonDataRemoveThing = await response.json();\r",
									"            // console.log('jsonDataRemoveThing',jsonDataRemoveThing)\r",
									"        \r",
									"            let operationStatusRemoveThing = await jsonDataRemoveThing.OperationStatus;\r",
									"\r",
									"            //200\r",
									"            pm.test(\"RemoveThing\" + [i+1]+ \" : Status code is \" + statusCodeSuccess, function () {\r",
									"                pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"            });\r",
									"            //20000\r",
									"            pm.test('RemoveThing' + [i+1]+ ' : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"                pm.expect(operationStatusRemoveThing).to.have.property('Code', resultCodeSuccess);\r",
									"            });\r",
									"            //RemoveThing is Success\r",
									"            pm.test('RemoveThing' + [i+1]+ ' : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThing+'\"', function () {\r",
									"                pm.expect(operationStatusRemoveThing).to.have.property('Description', resultDescriptionRemoveThing);\r",
									"            });\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThingStateInfo\r",
									" RemoveThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"            \r",
									"        };\r",
									"\r",
									"        let dataThingIDArray = JSON.parse(pm.environment.get(\"GetResponse_ThingIDArr\"));\r",
									"\r",
									"        for(let i=0;i<dataThingIDArray.length;i++){\r",
									"        \r",
									"            // body\r",
									"            let httpRequestRemoveThingStateInfo = {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                    \"ThingId\": dataThingIDArray[i],\r",
									"                    \"stateType\": fieldDataValue.CreateThingStateInfo.Type_Report, //Report\r",
									"                    \"stateKey\": fieldDataValue.CreateThingStateInfo.SensorKey //Temp\r",
									"                })\r",
									"            };\r",
									"\r",
									"            let optionsRemoveThingStateInfo = {\r",
									"                url: url + provisioningapis + urlThingRemoveThingStateInfo,\r",
									"                method: 'DELETE',\r",
									"                header: headersOptRemoveThingStateInfo,\r",
									"                body: httpRequestRemoveThingStateInfo\r",
									"            };\r",
									"\r",
									"            // console.log('response RemoveThingStateInfo');\r",
									"            let response = await reqPromise(optionsRemoveThingStateInfo);\r",
									"            let jsonDataRemoveThingStateInfo = await response.json();\r",
									"            // console.log('jsonDataRemoveThing',jsonDataRemoveThingStateInfo)\r",
									"        \r",
									"            let operationStatusRemoveThingStateInfo = await jsonDataRemoveThingStateInfo.OperationStatus;\r",
									"\r",
									"            //200\r",
									"            pm.test(\"RemoveThingStateInfo\" + [i+1]+ \" : Status code is \" + statusCodeSuccess, function () {\r",
									"                pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"            });\r",
									"            //20000\r",
									"            pm.test('RemoveThingStateInfo' + [i+1]+ ' : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"                pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"            });\r",
									"            //RemoveThingStateInfo is Success\r",
									"            pm.test('RemoveThingStateInfo' + [i+1]+ ' : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThingStateInfo+'\"', function () {\r",
									"                pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Description', resultDescriptionRemoveThingStateInfo);\r",
									"            });\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"//---------------- LogDefaultValue --------------//\r",
									"//set variable to LogDefaultValue JSON.parse\r",
									"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
									"// console.log('LogDefaultValue',LogDefaultValue);\r",
									"//---------------- set globals Other --------------//\r",
									"var SearchLog = LogDefaultValue.SearchLog;\r",
									"// console.log('SearchLog',SearchLog);\r",
									"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
									"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
									"var kbn_version = SearchLog.header.kbn_version;\r",
									"var authorization = SearchLog.header.Authorization;\r",
									"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
									"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
									"var namespace = LogDefaultValue.Other.namespace_control4mg;\r",
									"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
									"var header_x_ais_accountkey = LogDefaultValue.Other.header_x_ais_accountkey;\r",
									"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
									"var methodPost = LogDefaultValue.Other.methodPost;\r",
									"\r",
									"// Detail\r",
									"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
									"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
									"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
									"\r",
									"// Summary\r",
									"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
									"// ControlAPIs\r",
									"var applicationName = LogDefaultValue.Control.applicationName_mg4;\r",
									"var cmdName = LogDefaultValue.Control.cmdNameThings;\r",
									"// var resultDesc = LogDefaultValue.Control.resultDescThing_success;\r",
									"var endPointNameControlAPIs = LogDefaultValue.Control.endPointNameControlAPIs;\r",
									"var endPointNameDesireEx = LogDefaultValue.Control.endPointNameDesireEx;\r",
									"var endPointNameRabbitMQ = LogDefaultValue.Control.endPointNameRabbitMQ;\r",
									"var containerId = LogDefaultValue.Control.containerId;\r",
									"var requestObjectUrlStaging = LogDefaultValue.Control.requestObjectUrlStagingThings;\r",
									"var xProtocolControl = LogDefaultValue.Control.xProtocolControl;\r",
									"var responseObjectPublished = LogDefaultValue.Control.responseObjectPublished;\r",
									"\r",
									"// Check CDR (Summary Log) and EDR (Detail Log)\r",
									"SearchLogFindTid = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSearchLogFindTid = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        // let valueSearch = pm.environment.get(\"GetResponse_ThingID\"); \r",
									"        let valueSearch = x_ais_OrderRef_ControlThings +  current_timestamp; \r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestSearchLogFindTid = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"\r",
									"        let optionsSearchLogFindTid = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptSearchLogFindTid,\r",
									"            body: httpRequestSearchLogFindTid\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsSearchLogFindTid);\r",
									"        let jsonDataSearchLogFindTid = await response.json();\r",
									"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
									"        console.log('hits',hits)\r",
									"  \r",
									"        // find tid\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            // let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"        \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            if(applicationNameValue == applicationName){\r",
									"                // let tid = hits[i]._source.cauldron.tid;\r",
									"                // pm.environment.set(\"tid\", tid);\r",
									"                let sessionId = hits[i]._source.cauldron.sessionId;\r",
									"                pm.environment.set(\"sessionId\", sessionId);\r",
									"                break;\r",
									"           }\r",
									"        }\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"CheckLog = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCheckLog = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = pm.environment.get(\"sessionId\");\r",
									"\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestCheckLog = {\r",
									"            mode: 'raw',\r",
									"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"        let optionsCheckLog = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptCheckLog,\r",
									"            body: httpRequestCheckLog\r",
									"        }; \r",
									"        let response = await reqPromise(optionsCheckLog);\r",
									"        let jsonDataCheckLog = await response.json();\r",
									"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
									"        \r",
									"        // //200\r",
									"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });     \r",
									"        \r",
									"        let hits = jsonDataCheckLog.hits.hits\r",
									"        console.log('hits',hits)\r",
									"  \r",
									"        // find logType\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            //  let logType = hits[i]._source.cauldron.logType\r",
									"            let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"           \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            \r",
									"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
									"            // console.log('resultDataLog',resultDataLog)\r",
									"\r",
									"            let tidControl = x_ais_OrderRef_ControlThings + current_timestamp;\r",
									"            // console.log(tidControl);\r",
									"            if(applicationNameValue == applicationName){\r",
									"                 \r",
									"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ControlAPIs\r",
									"                    pm.test(\"Check Summary Log : ControlThings\" , function () {\r",
									"                        console.log(\"======== Check Summary Log ( Expected = Actual) [ControlThings] ==================\");\r",
									"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
									"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
									"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeSuccess);\r",
									"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
									"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        // console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
									"                        // console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
									"\r",
									"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
									"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
									"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeSuccess); \r",
									"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionTheRequestedOperationWasSuccessfully); \r",
									"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
									"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"\r",
									"                        let thingId = JSON.parse(pm.environment.get(\"GetResponse_ThingIDArr\"));\r",
									"                        let customUrl= urlCheckLog + requestObjectUrlStaging;\r",
									"                        let customAccountkey = pm.environment.get(\"GetResponse_AccountId\");\r",
									"\r",
									"                        // check identity\r",
									"                        // \"identity\":\"{\\\"ThingID\\\":[\\\"6012886b96d0ed0001f551ad\\\",\\\"6012886b96d0ed0001f551b5\\\"]}\"\r",
									"                        let dataSummaryIdentity = JSON.parse(resultDataLog.identity);         \r",
									"\r",
									"                        console.log(\"identity.ThingID : \" + dataSummaryIdentity.ThingID + \" = \" + thingId);             \r",
									"                        pm.expect(dataSummaryIdentity.ThingID).to.eql(thingId); \r",
									"\r",
									"                        // check custom\r",
									"                        // \\\"custom\\\":{ \\\"customData\\\":{ \\\"url\\\":\\\"mg-iot.sandais.com/api/v1/Control/Things\\\", \\\"accountkey\\\":\\\"6099638526fdbc0001c372ba\\\", \\\"ThingID\\\":[ \\\"6099638726fdbc0001c372c4\\\", \\\"6099638726fdbc0001c372ce\\\" ] }, \\\"endPointSummary\\\":[ { \\\"no\\\":\\\"1\\\", \\\"endPointName\\\":\\\"db.AuthenticationCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:Inquiry was Success\\\", \\\"processTime\\\":0.0002 }, { \\\"no\\\":\\\"2\\\", \\\"endPointName\\\":\\\"db.ClientsCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:Inquiry was Success\\\", \\\"processTime\\\":0.0006 }, { \\\"no\\\":\\\"3\\\", \\\"endPointName\\\":\\\"db.AccountsCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:Inquiry was Success\\\", \\\"processTime\\\":0.0002 }, { \\\"no\\\":\\\"4\\\", \\\"endPointName\\\":\\\"db.ThingsCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:Inquiry was Success\\\", \\\"processTime\\\":0.0002 } ] }\r",
									"\r",
									"                        let customData = resultDataLog.custom.customData\r",
									"\r",
									"                        console.log(\"custom.url : \" + customData.url + \" = \" + customUrl);\r",
									"                        console.log(\"custom.accountkey : \" +customData.accountkey + \" = \" + customAccountkey);\r",
									"                        console.log(\"custom.ThingID : [\" + customData.ThingID + \"] = [\" + thingId + \"]\");\r",
									"\r",
									"                        pm.expect(customData.url).to.eql(customUrl); \r",
									"                        pm.expect(customData.accountkey).to.eql(customAccountkey); \r",
									"                        pm.expect(customData.ThingID).to.eql(thingId); \r",
									"\r",
									"                        let custom = resultDataLog.custom.endPointSummary;\r",
									"                        let countCustom = custom.length;\r",
									"                       \r",
									"                        // [\"db.AuthenticationCollection\",\"db.ClientsCollection\",\"db.AccountsCollection\",\"db.ThingsCollection\"]\r",
									"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_ControlThings;\r",
									"                        // [\"20000:Inquiry was Success\",\"20000:Inquiry was Success\",\"20000:Inquiry was Success\",\"20000:Inquiry was Success\"]\r",
									"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_ControlThings;\r",
									"                        let countCustomStep = dataEndPointName.length;\r",
									"\r",
									"                        console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep);\r",
									"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
									"                        \r",
									"                        for(let i=0;i<countCustomStep;i++){\r",
									"                            let no = custom[i].no;\r",
									"                            let valueEndPointName = custom[i].endPointName;\r",
									"                            let valueResponseStatus = custom[i].responseStatus;\r",
									"                            // console.log(\"i\",i);\r",
									"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
									"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
									"\r",
									"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString());\r",
									"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i]);\r",
									"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i]);\r",
									"\r",
									"                            pm.expect(no).to.eql((i+1).toString()); \r",
									"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
									"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]); \r",
									"                        }\r",
									"                    }); \r",
									"                }\r",
									"\r",
									"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ControlAPIs\r",
									"\r",
									"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
									"                    // console.log('endPointNameValue ',endPointNameValue)\r",
									"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [ControlThings]\", function () {\r",
									"                        console.log(\"======== Check Detail Log ( Expected = Actual) [ControlThings] ==================\");\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
									"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
									"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
									"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
									"\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
									"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
									"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
									"\r",
									"                        let url = requestObjectUrlStaging; \r",
									"                        let urlCustom = urlCheckLog + requestObjectUrlStaging; \r",
									"                        let SensorKey = fieldDataValue.CreateThingStateInfo.SensorKey;\r",
									"                        let sensor = pm.environment.get(\"random_Sensor_Control\");\r",
									"                        let x_ais_orderref = x_ais_OrderRef_ControlThings + current_timestamp;\r",
									"                        let x_ais_AccountKey = pm.environment.get(\"GetResponse_AccountId\");\r",
									"                        let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken\");\r",
									"                        let thingId = JSON.parse(pm.environment.get(\"GetResponse_ThingIDArr\"));\r",
									"                        let x_protocol = xProtocolControl;\r",
									"\r",
									"                        // if( endPointNameValue == endPointNameControlAPIs){     //\"endPointName\":\"ControlAPIs\"\r",
									"                        if( endPointNameValue == undefined){    //\"endPointName\":undefined\r",
									"\r",
									"                            console.log(\"custom1.endPointName : \" + resultDataLog.custom1.endPointName + \" = \" + undefined);\r",
									"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(undefined); \r",
									"                        \r",
									"                            // // \"Status\":\"20000:ControlManyThings is Success\"\",\r",
									"                            // let status = resultCodeSuccess +\":\"+ resultDescriptionTheRequestedOperationWasSuccessfully;\r",
									"\r",
									"                            // console.log(\"custom1.Status : \" + resultDataLog.custom1.Status + \" = \" + status);\r",
									"                            // pm.expect(resultDataLog.custom1.Status).to.eql(status); \r",
									"\r",
									"                            // check requestObject\r",
									"                            // \"requestObject\":\"{\\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Control/Things\\\",\\\"method\\\":\\\"POST\\\",\\\"headers\\\":{\\\"x-ais-orderref\\\":\\\"ControlThings_202101271801621\\\",\\\"x-ais-accountkey\\\":\\\"60114adca32e8c0001576d22\\\",\\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAGhfn1wJCmf68Vf1zYxZ/fak0lmQ84nNnLsXbdYpFNnXEIlAkkY2KW0\\\"},\\\"body\\\":{\\\"ThingId\\\":[\\\"6012886b96d0ed0001f551ad\\\",\\\"6012886b96d0ed0001f551b5\\\"],\\\"Sensors\\\":{\\\"Temp\\\":955}}}\"\r",
									"\r",
									"                            // \\\"requestObject\\\":\\\"{ \\\\\\\"url\\\\\\\":\\\\\\\"/api/v1/Control/Things\\\\\\\", \\\\\\\"method\\\\\\\":\\\\\\\"POST\\\\\\\", \\\\\\\"headers\\\\\\\":{ \\\\\\\"Cache-Control\\\\\\\":\\\\\\\"no-cache\\\\\\\", \\\\\\\"Content-Type\\\\\\\":\\\\\\\"application/json\\\\\\\", \\\\\\\"Accept\\\\\\\":\\\\\\\"*/*\\\\\\\", \\\\\\\"Accept-Encoding\\\\\\\":\\\\\\\"gzip, deflate, br\\\\\\\", \\\\\\\"Host\\\\\\\":\\\\\\\"mg-iot.sandais.com\\\\\\\", \\\\\\\"User-Agent\\\\\\\":\\\\\\\"PostmanRuntime/7.26.8\\\\\\\", \\\\\\\"Content-Length\\\\\\\":\\\\\\\"113\\\\\\\", \\\\\\\"x-real-ip\\\\\\\":\\\\\\\"182.232.34.151\\\\\\\", \\\\\\\"x-forwarded-for\\\\\\\":\\\\\\\"182.232.34.151, 10.233.68.0\\\\\\\", \\\\\\\"x-forwarded-proto\\\\\\\":\\\\\\\"http\\\\\\\", \\\\\\\"x-ais-orderref\\\\\\\":\\\\\\\"ControlThings_202105102305584\\\\\\\", \\\\\\\"x-ais-accountkey\\\\\\\":\\\\\\\"6099638526fdbc0001c372ba\\\\\\\", \\\\\\\"x-ais-accesstoken\\\\\\\":\\\\\\\"Bearer ibnxnVhs5Rx3IwglWv7/gVA/1TpQnKqAOBAADlRDvYhOpXwmlpYOEb5yfY5aZpoj0YRWRZM26i9HOqtc1fc1jpNDOK5JpISttmMEy59g2py7nLWonDe2YW2OPRGWSowk6+9ZihLU1fZ5d5jAqqrZaKlOAAI3N1TXDNLsHuKcOJMcERbCcaMqRaku+MY4/kzE+eyIdkfwwbjT91S2VQq+Wk2ooMWuLk6/DHVJhwbMP7bBsrgL5JIkwopN/AJo42xlA4nmFDhTIjBKVegMrc8SMg==\\\\\\\", \\\\\\\"postman-token\\\\\\\":\\\\\\\"4ab97d17-da5c-450a-a302-c94fe5ccc964\\\\\\\", \\\\\\\"x-envoy-external-address\\\\\\\":\\\\\\\"10.233.68.0\\\\\\\", \\\\\\\"x-request-id\\\\\\\":\\\\\\\"14323c66-f9d0-4058-8dc7-e1e3a43b27b2\\\\\\\", \\\\\\\"x-envoy-original-path\\\\\\\":\\\\\\\"/mg4controlapis/api/v1/Control/Things\\\\\\\", \\\\\\\"x-b3-traceid\\\\\\\":\\\\\\\"15790352f1164c0b241198f8fd8a63e2\\\\\\\", \\\\\\\"x-b3-spanid\\\\\\\":\\\\\\\"ab259bc6155872da\\\\\\\", \\\\\\\"x-b3-parentspanid\\\\\\\":\\\\\\\"241198f8fd8a63e2\\\\\\\", \\\\\\\"x-b3-sampled\\\\\\\":\\\\\\\"0\\\\\\\", \\\\\\\"x-ais-SessionId\\\\\\\":\\\\\\\"1620665225167\\\\\\\", \\\\\\\"identity\\\\\\\":\\\\\\\"{ \\\\\\\\\\\\\\\"ThingID\\\\\\\\\\\\\\\":[ \\\\\\\\\\\\\\\"6099638726fdbc0001c372c4\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"6099638726fdbc0001c372ce\\\\\\\\\\\\\\\" ] }\\\\\\\", \\\\\\\"custom\\\\\\\":\\\\\\\"{ \\\\\\\\\\\\\\\"url\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"mg-iot.sandais.com/api/v1/Control/Things\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"accountkey\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"6099638526fdbc0001c372ba\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"ThingID\\\\\\\\\\\\\\\":[ \\\\\\\\\\\\\\\"6099638726fdbc0001c372c4\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"6099638726fdbc0001c372ce\\\\\\\\\\\\\\\" ] }\\\\\\\" }, \\\\\\\"queryString\\\\\\\":{ }, \\\\\\\"routeParamteters\\\\\\\":{ }, \\\\\\\"body\\\\\\\":{ \\\\\\\"ThingId\\\\\\\":[ \\\\\\\"6099638726fdbc0001c372c4\\\\\\\", \\\\\\\"6099638726fdbc0001c372ce\\\\\\\" ], \\\\\\\"Sensors\\\\\\\":{ \\\\\\\"Temp\\\\\\\":412 } } }\\\"\r",
									"\r",
									"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
									"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
									"\r",
									"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
									"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
									"                            console.log(\"headers.x_ais_AccountKey : \" + jsonParseRequestObject.headers[header_x_ais_accountkey] + \" = \" + x_ais_AccountKey);\r",
									"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
									"                            \r",
									"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
									"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accountkey]).to.eql(x_ais_AccountKey);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
									"\r",
									"                            let identity = JSON.parse(jsonParseRequestObject.headers.identity)\r",
									"                            console.log(\"headers.identity.ThingID : [\" + identity.ThingID + \"] = [\" + thingId + \"]\");\r",
									"                            pm.expect(identity.ThingID).to.eql(thingId);\r",
									"                            \r",
									"                            let custom = JSON.parse(jsonParseRequestObject.headers.custom)\r",
									"                            console.log(\"headers.custom.url : \" + custom.url + \" = \" + urlCustom);\r",
									"                            console.log(\"headers.custom.accountkey : \" + custom.accountkey + \" = \" + x_ais_AccountKey);\r",
									"                            console.log(\"headers.custom.ThingID : [\" + custom.ThingID + \"] = [\" + thingId + \"]\");\r",
									"                            \r",
									"                            pm.expect(custom.url).to.eql(urlCustom);\r",
									"                            pm.expect(custom.accountkey).to.eql(x_ais_AccountKey);\r",
									"                            pm.expect(custom.ThingID).to.eql(thingId);\r",
									"\r",
									"                            console.log(\"queryString : \" + JSON.stringify(jsonParseRequestObject.queryString) + \" = \" + JSON.stringify({}));\r",
									"                            pm.expect(jsonParseRequestObject.queryString).to.eql({});\r",
									"\r",
									"                            console.log(\"routeParamteters : \" + JSON.stringify(jsonParseRequestObject.routeParamteters) + \" = \" + JSON.stringify({}));\r",
									"                            pm.expect(jsonParseRequestObject.routeParamteters).to.eql({});\r",
									"\r",
									"                            console.log(\"resquest.body.ThingId : [\" + jsonParseRequestObject.body.ThingId + \"] = [\" + thingId + \"]\");\r",
									"                            console.log(\"resquest.body.Sensors.\" + SensorKey + \"  : \" + jsonParseRequestObject.body.Sensors[SensorKey] + \" = \" + sensor);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.body.ThingId).to.eql(thingId);\r",
									"                            pm.expect(jsonParseRequestObject.body.Sensors[SensorKey]).to.eql(sensor);\r",
									"\r",
									"                            // check responseObject\r",
									"                            // \\\"responseObject\\\":\\\"{ \\\\\\\"OperationStatus\\\\\\\":{ \\\\\\\"Code\\\\\\\":\\\\\\\"20000\\\\\\\", \\\\\\\"DeveloperMessage\\\\\\\":\\\\\\\"The requested operation was successfully.\\\\\\\" } }\\\"\r",
									"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
									"                            // console.log('jsonParseResponseObject',jsonParseResponseObject);\r",
									"\r",
									"                            console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeSuccess);\r",
									"                            console.log(\"response.OperationStatus.DeveloperMessage : \" + jsonParseResponseObject.OperationStatus.DeveloperMessage + \" = \" + resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"\r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeSuccess);  \r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheRequestedOperationWasSuccessfully);  \r",
									"                        }\r",
									"\r",
									"                        // if( endPointNameValue == endPointNameDesireEx){\r",
									"                        if( endPointNameValue == endPointNameRabbitMQ){\r",
									"\r",
									"                            console.log(\"custom1.endPointName : \" + resultDataLog.custom1.endPointName + \" = \" + endPointNameRabbitMQ);\r",
									"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameRabbitMQ); \r",
									"                            // check requestObject\r",
									"                            // \"requestObject\":\"{\\\"RoutingKey\\\":\\\"desire.pub.v1.15ef8559-0a9a-4ae8-a643-4ecc5f3321b2\\\",\\\"Payload\\\":\\\"{\\\\\\\"Temp\\\\\\\":955}\\\",\\\"Headers\\\":{\\\"timestamp_in_ms\\\":1611746014944,\\\"x-ais-orderref\\\":\\\"ControlThings_202101271801621\\\",\\\"x_protocol\\\":\\\"CONTROL\\\"}}\"\r",
									"\r",
									"                            // \\\"requestObject\\\":\\\"{ \\\\\\\"url\\\\\\\":\\\\\\\"desire.pub.v1.9d14bca5-da7f-41a8-8abe-7788d183070f\\\\\\\", \\\\\\\"headers\\\\\\\":{ \\\\\\\"x-ais-orderref\\\\\\\":\\\\\\\"ControlThings_202105102305584\\\\\\\", \\\\\\\"x-ais-sessionid\\\\\\\":\\\\\\\"1620665225167\\\\\\\", \\\\\\\"timestamp_in_ms\\\\\\\":\\\\\\\"1620665225196\\\\\\\", \\\\\\\"x_protocol\\\\\\\":\\\\\\\"CONTROL\\\\\\\" }, \\\\\\\"body\\\\\\\":\\\\\\\"{ \\\\\\\\\\\\\\\"Temp\\\\\\\\\\\\\\\":412 }\\\\\\\" }\\\"\r",
									"\r",
									"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
									"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
									"                           \r",
									"                            // let jsonParsePayload = JSON.parse(jsonParseRequestObject.Payload);\r",
									"                            // console.log('jsonParsePayload',jsonParsePayload);\r",
									"                            let jsonParseBody = jsonParseRequestObject.body;\r",
									"                            let jsonParseBody1 = JSON.parse(jsonParseBody);\r",
									"                            // console.log('jsonParseBody',jsonParseBody);\r",
									"                            // console.log('jsonParseBody1',jsonParseBody1[SensorKey]);\r",
									"\r",
									"                            console.log(\"headers.timestamp_in_ms : \" + jsonParseRequestObject.headers.timestamp_in_ms + \" = \" + jsonParseRequestObject.headers.timestamp_in_ms);\r",
									"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"                            console.log(\"headers.x_protocol : \" + jsonParseRequestObject.headers.x_protocol + \" = \" + x_protocol);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.headers.timestamp_in_ms).to.eql(jsonParseRequestObject.headers.timestamp_in_ms);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                            pm.expect(jsonParseRequestObject.headers.x_protocol).to.eql(x_protocol);\r",
									"\r",
									"                            console.log(\"resquest.\"+ SensorKey +\" : \" + jsonParseBody1[SensorKey] + \" = \" + sensor);\r",
									"                            pm.expect(jsonParseBody1[SensorKey]).to.eql(sensor);\r",
									"                \r",
									"                            // check responseObject\r",
									"                            // \\\"responseObject\\\":\\\"\\\\\\\"\\\\\\\"\\\",\r",
									"                            // let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
									"                            // console.log('jsonParseResponseObject',jsonParseResponseObject);\r",
									"\r",
									"                            console.log(\"response.custom1.responseObject : \" + resultDataLog.custom1.responseObject + \" = \" + JSON.stringify(\"\"));\r",
									"                            pm.expect(resultDataLog.custom1.responseObject).to.eql(JSON.stringify(\"\"));  \r",
									"                        }\r",
									"\r",
									"                    }); \r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// InquiryThing\r",
									"InquiryThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptInquiryThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_InquiryThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_InquiryThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestInquiryThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsInquiryThing = {\r",
									"            url: url + provisioningapis + urlThingInquiryThing,\r",
									"            method: 'POST',\r",
									"            header: headersOptInquiryThing,\r",
									"            body: httpRequestInquiryThing\r",
									"        };\r",
									"\r",
									"        // console.log('request InquiryThing');\r",
									"        let response = await reqPromise(optionsInquiryThing);\r",
									"        let jsonDataInquiryThing = await response.json();\r",
									"        // console.log('jsonDataInquiryThing',jsonDataInquiryThing)\r",
									"    \r",
									"        let operationStatusInquiryThing = await jsonDataInquiryThing.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"InquiryThing : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('InquiryThing : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusInquiryThing).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //InquiryThing is Success\r",
									"        pm.test('InquiryThing : OperationStatus Description is '+'\"'+ resultDescriptionInquiryThing+'\"', function () {\r",
									"            pm.expect(operationStatusInquiryThing).to.have.property('Description', resultDescriptionInquiryThing);\r",
									"        });\r",
									"\r",
									"        //Check Data\r",
									"        let thingInfo = await jsonDataInquiryThing.ThingInfo;\r",
									"        console.log('thingInfo',thingInfo);\r",
									"\r",
									"        for(let i=0;i<thingInfo.length;i++){\r",
									"            pm.test('Verify DB Check Data : ControlThings [StateInfo.Desire and StateInfo.Delta :{ \"'+  fieldDataValue.CreateThingStateInfo.SensorKey + '\" : '+ pm.environment.get(\"random_Sensor_Control\") +' }]' , function () {\r",
									"                console.log(\"======== Verify DB Check Data ( Expected = Actual) [ControlThings] ==================\");\r",
									"                console.log(\"thingInfo[\"+ i +\"]StateInfo.Delta : \" + thingInfo[i].StateInfo.Delta[fieldDataValue.CreateThingStateInfo.SensorKey] + \" = \" + pm.environment.get(\"random_Sensor_Control\"));\r",
									"                console.log(\"thingInfo[\"+ i +\"]StateInfo.Desire : \" + thingInfo[i].StateInfo.Delta[fieldDataValue.CreateThingStateInfo.SensorKey] + \" = \" + pm.environment.get(\"random_Sensor_Control\"));\r",
									"\r",
									"                pm.expect(thingInfo[i].StateInfo.Delta).to.have.property(fieldDataValue.CreateThingStateInfo.SensorKey, pm.environment.get(\"random_Sensor_Control\"));\r",
									"                pm.expect(thingInfo[i].StateInfo.Desire).to.have.property(fieldDataValue.CreateThingStateInfo.SensorKey, pm.environment.get(\"random_Sensor_Control\"));\r",
									"            });\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"setTimeout(function(){SearchLogFindTid();}, 20000); \r",
									"setTimeout(function(){CheckLog();}, 30000); \r",
									"setTimeout(function(){InquiryThing();}, 40000); \r",
									"\r",
									"setTimeout(function(){RemoveThingStateInfo();}, 45000); \r",
									"setTimeout(function(){RemoveThing();}, 50000); \r",
									"setTimeout(function(){RemoveAccount();}, 55000); \r",
									"setTimeout(function(){RemovePartner();}, 60000); \r",
									"\r",
									"setTimeout(function(){\r",
									"pm.environment.unset(\"current_timestamp\");\r",
									"pm.environment.unset(\"AccessToken\");\r",
									"pm.environment.unset(\"random_number\");\r",
									"pm.environment.unset(\"PartnerName\");\r",
									"pm.environment.unset(\"MerchantContact\");\r",
									"pm.environment.unset(\"CPID\");\r",
									"pm.environment.unset(\"GetResponse_PartnerId\");\r",
									"pm.environment.unset(\"AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountId\");\r",
									"for(let i=0;i<countData;i++){\r",
									"pm.environment.unset(\"random_IM\"+[i+1]);\r",
									"pm.environment.unset(\"random_ICCID\"+[i+1]);\r",
									"pm.environment.unset(\"ThingName\"+[i+1]);\r",
									"}\r",
									"pm.environment.unset(\"GetResponse_ThingIDArr\");\r",
									"pm.environment.unset(\"random_Sensor\");\r",
									"pm.environment.unset(\"tid\");\r",
									"pm.environment.unset(\"sessionId\");\r",
									"pm.environment.unset(\"SensorKey\");\r",
									"pm.environment.unset(\"random_Sensor_Control\");\r",
									"}, 90000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var Username = pm.environment.get(\"Username\");\r",
									"var Password = pm.environment.get(\"Password\");\r",
									"\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//count for loop data\r",
									"var countData = 2;\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"pm.environment.set(\"SensorKey\",fieldDataValue.CreateThingStateInfo.SensorKey)\r",
									"\r",
									"//format YYYYMMDDHHMMSSS\r",
									"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
									"// console.log('currentTmestamp',currentTmestamp);\r",
									"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- statusCodeList --------------//\r",
									"//set variable to statusCodeList JSON.parse\r",
									"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
									"//set global variable to statusCode 200\r",
									"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
									"//set global variable to statusCode 201\r",
									"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultCodeList --------------//\r",
									"//set variable to resultCodeList JSON.parse\r",
									"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
									"//set global variable to resultCode \"20000\"\r",
									"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
									"//set global variable to resultCode \"20100\"\r",
									"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionSuccessList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
									"//set global variable to resultDescription \"SignInProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
									"//set global variable to resultDescription \"CreatePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
									"//set global variable to resultDescription \"CreateAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
									"//set global variable to resultDescription \"CreateThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThing\", resultDescriptionSuccessList.resultDescriptionCreateThing);\r",
									"//set global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThingStateInfo\", resultDescriptionSuccessList.resultDescriptionCreateThingStateInfo);\r",
									"//set global variable to resultDescription \"RemovePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
									"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
									"//set global variable to resultDescription \"RemoveThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThing\", resultDescriptionSuccessList.resultDescriptionRemoveThing);\r",
									"//set global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThingStateInfo\", resultDescriptionSuccessList.resultDescriptionRemoveThingStateInfo);\r",
									"//set global variable to resultDescription \"Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccess\", resultDescriptionSuccessList.resultDescriptionSuccess);\r",
									"//set global variable to resultDescription \"Created Success\"\r",
									"pm.globals.set(\"resultDescriptionCreatedSuccess\", resultDescriptionSuccessList.resultDescriptionCreatedSuccess);\r",
									"//set global variable to resultDescription \"ControlManyThings is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessControlManyThings\", resultDescriptionSuccessList.resultDescriptionSuccessControlManyThings);\r",
									"//set global variable to resultDescription \"InquiryThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionInquiryThing\", resultDescriptionSuccessList.resultDescriptionInquiryThing);\r",
									"//set global variable to resultDescription \"The requested operation was successfully.\"\r",
									"pm.globals.set(\"resultDescriptionTheRequestedOperationWasSuccessfully\", resultDescriptionSuccessList.resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- HeaderList --------------//\r",
									"//set variable to HeaderList JSON.parse\r",
									"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
									"//---------------- set globals Other --------------//\r",
									"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
									"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
									"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
									"//set global variable to kbn-versio \"7.5.1\"\r",
									"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Signin_ --------------//\r",
									"//set global variable to x_ais_OrderRef \"Signin_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreatePartner --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
									"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
									"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
									"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreateAccount --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
									"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
									"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Thing --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThing\", HeaderList.Thing.x_ais_OrderRef_CreateThing);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThing\", HeaderList.Thing.x_ais_OrderDesc_CreateThing);\r",
									"//set global variable to x_ais_OrderRef \"InquiryThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_InquiryThing\", HeaderList.Thing.x_ais_OrderRef_InquiryThing);\r",
									"//set global variable to x_ais_OrderDesc \"InquiryThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_InquiryThing\", HeaderList.Thing.x_ais_OrderDesc_InquiryThing);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThing\", HeaderList.Thing.x_ais_OrderRef_RemoveThing);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThing\", HeaderList.Thing.x_ais_OrderDesc_RemoveThing);\r",
									"//set global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_RemoveThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_RemoveThingStateInfo);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Control --------------//\r",
									"//set global variable to x_ais_OrderRef \"ControlThings_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ControlThings\", HeaderList.Control.x_ais_OrderRef_ControlThings);\r",
									"//set global variable to x_ais_OrderRef \"ControlThingsfail_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ControlThings_fail\", HeaderList.Control.x_ais_OrderRef_ControlThings_fail);\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"SignInProcess is Success\"\r",
									"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
									"//get global variable to resultDescription \"CreatePartner is Success\"\r",
									"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
									"//get global variable to resultDescription \"CreateAccount is Success\"\r",
									"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
									"//get global variable to resultDescription \"CreateThing is Success\"\r",
									"var resultDescriptionCreateThing = pm.globals.get(\"resultDescriptionCreateThing\");\r",
									"//get global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"var resultDescriptionCreateThingStateInfo = pm.globals.get(\"resultDescriptionCreateThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- urlRouteList --------------//\r",
									"//set variable to urlRouteList JSON.parse\r",
									"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
									"//---------------- set url Create --------------//\r",
									"//set global variable to url \"/api/v1/auth/signin\"\r",
									"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
									"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
									"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"pm.globals.set(\"urlThingCreateThing\", urlRouteList.Thing.urlThingCreateThing);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"pm.globals.set(\"urlThingCreateThingStateInfo\", urlRouteList.Thing.urlThingCreateThingStateInfo);\r",
									"//---------------- get url Create --------------//\r",
									"//get global variable to url \"/api/v1/auth/signin\"\r",
									"var urlSignin = pm.globals.get(\"urlSignin\");\r",
									"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
									"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"var urlThingCreateThing = pm.globals.get(\"urlThingCreateThing\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"var urlThingCreateThingStateInfo = pm.globals.get(\"urlThingCreateThingStateInfo\");\r",
									"//---------------- set url Remove --------------//\r",
									"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
									"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"pm.globals.set(\"urlThingRemoveThing\", urlRouteList.Thing.urlThingRemoveThing);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"pm.globals.set(\"urlThingRemoveThingStateInfo\", urlRouteList.Thing.urlThingRemoveThingStateInfo);\r",
									"//---------------- set url Inquiry --------------//\r",
									"//set global variable to url \"/api/v1/Thing/InquiryThing\"\r",
									"pm.globals.set(\"urlThingInquiryThing\", urlRouteList.Thing.urlThingInquiryThing);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Signin_ --------------//\r",
									"//get global variable to x_ais_OrderRef \"Signin_\"\r",
									"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"var x_ais_OrderRef_CreateThing = pm.globals.get(\"x_ais_OrderRef_CreateThing\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"var x_ais_OrderDesc_CreateThing = pm.globals.get(\"x_ais_OrderDesc_CreateThing\");\r",
									"//get global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"var x_ais_OrderRef_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderRef_CreateThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"var x_ais_OrderDesc_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_CreateThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            // console.log('response111',response);\r",
									"            // console.log('errerrerr',err);\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// Signin get token\r",
									" Signin = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSignin = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestSignin = {\r",
									"            mode: 'raw',\r",
									"            raw: \r",
									"            JSON.stringify({\r",
									"                username:Username,\r",
									"                password:Password\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsSignin = {\r",
									"            url: url + provisioningapis + urlSignin,\r",
									"            method: 'POST',\r",
									"            header: headersOptSignin,\r",
									"            body: httpRequestSignin\r",
									"        };\r",
									"        // console.log('request Signin');\r",
									"        let response = await reqPromise(optionsSignin);\r",
									"        let jsonDataSignin = await response.json();\r",
									"\r",
									"        // setAccessToken\r",
									"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
									"\r",
									"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // SignInProcess is Success\r",
									"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
									"        });\r",
									"\r",
									"        //set random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //set PartnerName\r",
									"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
									"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
									"        //set MerchantContact\r",
									"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
									"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
									"        // set CPID\r",
									"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
									"        pm.environment.set(\"CPID\", CPIDValue)\r",
									"        \r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreatePartner\r",
									" CreatePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreatePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreatePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
									"                \"PartnerType\": [\r",
									"                    \"Supplier\",\r",
									"                    \"Customer\"\r",
									"                ],\r",
									"                \"PartnerDetail\": {\r",
									"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
									"                    \"CPID\": pm.environment.get(\"CPID\")\r",
									"                },\r",
									"                \"Property\": {\r",
									"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsCreatePartner = {\r",
									"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreatePartner,\r",
									"            body: httpRequestCreatePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsCreatePartner);\r",
									"        let jsonDataCreatePartner = await response.json();\r",
									"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
									"    \r",
									"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreatePartner is Success\r",
									"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
									"        });\r",
									"\r",
									"        //GetResponse_PartnerId\r",
									"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
									"\r",
									"        //Accountname\r",
									"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
									"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateAccount\r",
									" CreateAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreateAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
									"                })\r",
									"        };\r",
									"        \r",
									"        let optionsCreateAccount = {\r",
									"            url: url + provisioningapis + urlAccountCreateAccount,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateAccount,\r",
									"            body: httpRequestCreateAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateAccount');\r",
									"        let response = await reqPromise(optionsCreateAccount);\r",
									"        let jsonDataCreateAccount = await response.json();\r",
									"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
									"    \r",
									"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateAccount : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateAccount is Success\r",
									"        pm.test('CreateAccount : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
									"        });\r",
									"        // GetResponse_AccountName\r",
									"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
									"        // GetResponse_AccountId\r",
									"        pm.environment.set(\"GetResponse_AccountId\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
									"       \r",
									"        // // random_IM\r",
									"        // pm.environment.set(\"random_IM\", _.random(10000000, 99999999)+\" \"+_.random(1000000, 9999999))\r",
									"        // // random_ICCID\r",
									"        // pm.environment.set(\"random_ICCID\", _.random(1000000, 9999999)+\" \"+_.random(100000, 999999))\r",
									"        // // random_number\r",
									"        // pm.environment.set(\"random_number\",pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        // //ThingName\r",
									"        // let thingNameValue = fieldDataValue.Thing.ThingNameValue; // \"Sensor_TestThingName\"\r",
									"        // pm.environment.set(\"ThingName\", thingNameValue + pm.environment.get(\"random_number\"))\r",
									"\r",
									"        // random_number\r",
									"        pm.environment.set(\"random_number\",pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"\r",
									"        for(let i=0;i<countData;i++){\r",
									"            // random_IM\r",
									"            pm.environment.set(\"random_IM\"+[i+1], _.random(10000000, 99999999)+\" \"+_.random(1000000, 9999999))\r",
									"            // random_ICCID\r",
									"            pm.environment.set(\"random_ICCID\"+[i+1], _.random(1000000, 9999999)+\" \"+_.random(100000, 999999))\r",
									"\r",
									"            //ThingName\r",
									"            let thingNameValue = fieldDataValue.Thing.ThingNameValue; // \"Sensor_TestThingName\"\r",
									"            pm.environment.set(\"ThingName\"+[i+1],thingNameValue +[i+1] + pm.environment.get(\"random_number\"))\r",
									"        }\r",
									"            \r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThing\r",
									" CreateThingArr = async () =>  {\r",
									"    try {\r",
									"        \r",
									"        // header\r",
									"        let headersOptCreateThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThing');\r",
									"        let dataThingIdArr = [];\r",
									"        for(let i=0;i<countData;i++){\r",
									"            // body\r",
									"            let httpRequestCreateThing = {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                    \"ThingName\": pm.environment.get(\"ThingName\"+ [i+1]),\r",
									"                    \"IMEI\": pm.environment.get(\"random_IM\"+ [i+1]),\r",
									"                    \"IMSI\": pm.environment.get(\"random_IM\"+ [i+1]),\r",
									"                    \"ICCID\": pm.environment.get(\"random_ICCID\"+ [i+1]),\r",
									"                    \"RouteUrl\": fieldDataValue.Thing.RouteUrlValue , //[\"http://10.12.3.4:2019/api/information/AddInformation\"]\r",
									"                    \"RouteInfo\": {\r",
									"                        \"MIMO_ID\": fieldDataValue.Thing.RouteInfoMIMOIDValue , //\"606edada\"\r",
									"                        \"MIMO_SerialNo\": fieldDataValue.Thing.RouteInfoMIMOSerialNoValue //5466758878\r",
									"                    },\r",
									"                    \"RouteFlag\": {\r",
									"                        \"ThingName\": fieldDataValue.Thing.RouteFlagThingNameValue , //true\r",
									"                        \"ThingToken\": fieldDataValue.Thing.RouteFlagThingTokenValue, //true\r",
									"                        \"IMEI\": fieldDataValue.Thing.RouteFlagIMEIValue, //true\r",
									"                        \"ICCID\": fieldDataValue.Thing.RouteFlagICCIDValue, //true\r",
									"                        \"RouteInfo\": fieldDataValue.Thing.RouteFlagRouteInfoValue //true\r",
									"                    }\r",
									"                })\r",
									"            };\r",
									"            \r",
									"            let optionsCreateThing = {\r",
									"                url: url + provisioningapis + urlThingCreateThing,\r",
									"                method: 'POST',\r",
									"                header: headersOptCreateThing,\r",
									"                body: httpRequestCreateThing\r",
									"            };\r",
									"            let response = await reqPromise(optionsCreateThing);\r",
									"            let jsonDataCreateThing = await response.json();\r",
									"            let ThingId = await jsonDataCreateThing.ThingInfo.ThingId;\r",
									"            dataThingIdArr.push(ThingId);\r",
									"            let operationStatusCreateThing = await jsonDataCreateThing.OperationStatus;\r",
									"\r",
									"            //201\r",
									"            pm.test(\"CreateThing\"+ [i+1]+ \" : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"                pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"            });\r",
									"            //20100\r",
									"            pm.test('CreateThing'+ [i+1]+ ' : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"                pm.expect(operationStatusCreateThing).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"            });\r",
									"            //CreateThing is Success\r",
									"            pm.test('CreateThing'+ [i+1]+ ' : OperationStatus Description is '+'\"'+ resultDescriptionCreateThing+'\"', function () {\r",
									"                pm.expect(operationStatusCreateThing).to.have.property('Description', resultDescriptionCreateThing);\r",
									"            });\r",
									"        }\r",
									"        \r",
									"        // console.log('dataThingIdArr',dataThingIdArr);\r",
									"        // pm.environment.set(\"GetResponse_ThingID\",jsonDataCreateThing.ThingInfo.ThingId)\r",
									"        pm.environment.set(\"GetResponse_ThingIDArr\",JSON.stringify(dataThingIdArr))\r",
									"        \r",
									"        \r",
									"        //Get Random Sensor \r",
									"        pm.environment.set(\"random_Sensor\", _.random(100, 999))\r",
									"\r",
									"        //Get Random Sensor Control\r",
									"        pm.environment.set(\"random_Sensor_Control\", _.random(100, 999))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThingStateInfo\r",
									" CreateThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let dataThingIDArray = JSON.parse(pm.environment.get(\"GetResponse_ThingIDArr\"));\r",
									"        // console.log('dataThingIDArray',dataThingIDArray);\r",
									"\r",
									"        // {\"Temp\" : pm.environment.get(\"random_Sensor\")}\r",
									"        let sensorValue = {};\r",
									"        sensorValue[fieldDataValue.CreateThingStateInfo.SensorKey] = pm.environment.get(\"random_Sensor\");\r",
									"        // console.log('sensorValue',sensorValue);\r",
									"        \r",
									"        let httpRequestCreateThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": \r",
									"                    dataThingIDArray\r",
									"                ,\r",
									"                \"Type\": fieldDataValue.CreateThingStateInfo.Type_Report,\r",
									"                \"Sensor\": sensorValue\r",
									"            })\r",
									"        };\r",
									"        // console.log('httpRequestCreateThingStateInfo',httpRequestCreateThingStateInfo);\r",
									"            let optionsCreateThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingCreateThingStateInfo,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThingStateInfo,\r",
									"            body: httpRequestCreateThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThingStateInfo');\r",
									"        let response = await reqPromise(optionsCreateThingStateInfo);\r",
									"        let jsonDataCreateThingStateInfo = await response.json();\r",
									"        let operationStatusCreateThingStateInfo = await jsonDataCreateThingStateInfo.OperationStatus;\r",
									"        // console.log('operationStatusCreateThingStateInfo',operationStatusCreateThingStateInfo);\r",
									"\r",
									"        //200\r",
									"        pm.test(\"CreateThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //CreateThingStateInfo is Success\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionCreateThingStateInfo+'\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Description', resultDescriptionCreateThingStateInfo);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"Signin();\r",
									"setTimeout(async function(){await CreatePartner();}, 3000); \r",
									"setTimeout(async function(){await CreateAccount();}, 6000); \r",
									"setTimeout(async function(){await CreateThingArr();}, 8000); \r",
									"setTimeout(async function(){await CreateThingStateInfo();}, 9000); \r",
									"setTimeout(async function(){}, 10000);  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-ais-OrderRef",
								"value": "{{x_ais_OrderRef_ControlThings}}{{current_timestamp}}"
							},
							{
								"key": "x-ais-AccountKey",
								"value": "{{GetResponse_AccountId}}",
								"type": "text"
							},
							{
								"key": "x-ais-AccessToken",
								"value": "{{Bearer}} {{AccessToken}}"
							},
							{
								"key": "Accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"ThingId\": {{GetResponse_ThingIDArr}},\r\n  \"Sensors\": {\r\n    \"{{SensorKey}}\": {{random_Sensor_Control}}\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{url}}{{mg4controlapis}}/api/v1/Control/Things",
							"host": [
								"{{url}}{{mg4controlapis}}"
							],
							"path": [
								"api",
								"v1",
								"Control",
								"Things"
							]
						},
						"description": "Type:Desire"
					},
					"response": []
				},
				{
					"name": "ControlThings_TST_F2_1_1_002_Success_SenSorHasPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//count for loop data\r",
									"var countData = 2;\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to xAisOrderRef \"RemoveThing_\"\r",
									"var x_ais_OrderRef_RemoveThing = pm.globals.get(\"x_ais_OrderRef_RemoveThing\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"var x_ais_OrderDesc_RemoveThing = pm.globals.get(\"x_ais_OrderDesc_RemoveThing\");\r",
									"//get global variable to xAisOrderRef \"InquiryThing_\"\r",
									"var x_ais_OrderRef_InquiryThing = pm.globals.get(\"x_ais_OrderRef_InquiryThing\");\r",
									"//get global variable to x_ais_OrderDesc \"InquiryThing\"\r",
									"var x_ais_OrderDesc_InquiryThing = pm.globals.get(\"x_ais_OrderDesc_InquiryThing\");\r",
									"//get global variable to x_ais_OrderRef \"RemoveThingStateInfo_\"\r",
									"var x_ais_OrderDesc_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_RemoveThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThingStateInfo\"\r",
									"var x_ais_OrderRef_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderRef_RemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Control --------------//\r",
									"//get global variable to x_ais_OrderRef \"ControlThings_\"\r",
									"var x_ais_OrderRef_ControlThings = pm.globals.get(\"x_ais_OrderRef_ControlThings\");\r",
									"//get global variable to x_ais_OrderRef \"ControlThingsfail_\"\r",
									"var x_ais_OrderRef_ControlThings_fail = pm.globals.get(\"x_ais_OrderRef_ControlThings_fail\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get url Remove --------------//\r",
									"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
									"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"var urlThingRemoveThing = pm.globals.get(\"urlThingRemoveThing\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"var urlThingRemoveThingStateInfo = pm.globals.get(\"urlThingRemoveThingStateInfo\");\r",
									"//---------------- get url Inquiry --------------//\r",
									"//get global variable to url \"/api/v1/Thing/InquiryThingr\"\r",
									"var urlThingInquiryThing = pm.globals.get(\"urlThingInquiryThing\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"RemovePartner is Success\"\r",
									"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
									"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
									"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
									"//get global variable to resultDescription \"RemoveThing is Success\"\r",
									"var resultDescriptionRemoveThing = pm.globals.get(\"resultDescriptionRemoveThing\");\r",
									"//get global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"var resultDescriptionRemoveThingStateInfo = pm.globals.get(\"resultDescriptionRemoveThingStateInfo\");\r",
									"//get global variable to resultDescription \"InquiryThing is Success\"\r",
									"var resultDescriptionInquiryThing = pm.globals.get(\"resultDescriptionInquiryThing\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to resultDescription \"ControlManyThings is Success\"\r",
									"// var resultDescriptionSuccessControlManyThings = pm.globals.get(\"resultDescriptionSuccessControlManyThings\");\r",
									"//get global variable to resultDescription \"The requested operation was successfully.\"\r",
									"var resultDescriptionTheRequestedOperationWasSuccessfully = pm.globals.get(\"resultDescriptionTheRequestedOperationWasSuccessfully\");\r",
									"//------------------------------------------------------------//\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"ControlThings : Status code is \" + statusCodeSuccess, function () {\r",
									"    pm.response.to.have.status(statusCodeSuccess);\r",
									"});\r",
									"\r",
									"pm.test('ControlThings : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeSuccess);\r",
									"});\r",
									"\r",
									"pm.test('ControlThings : OperationStatus DeveloperMessage is '+'\"'+ resultDescriptionTheRequestedOperationWasSuccessfully+'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"});\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// RemovePartner\r",
									" RemovePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemovePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemovePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemovePartner = {\r",
									"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemovePartner,\r",
									"            body: httpRequestRemovePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request RemovePartner');\r",
									"        let response = await reqPromise(optionsRemovePartner);\r",
									"        let jsonDataRemovePartner = await response.json();\r",
									"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
									"    \r",
									"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemovePartner is Success\r",
									"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveAccount\r",
									" RemoveAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemoveAccount = {\r",
									"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveAccount,\r",
									"            body: httpRequestRemoveAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveAccount');\r",
									"        let response = await reqPromise(optionsRemoveAccount);\r",
									"        let jsonDataRemoveAccount = await response.json();\r",
									"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
									"    \r",
									"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveAccount is Success\r",
									"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThing\r",
									" RemoveThing = async () =>  {\r",
									"    try {\r",
									"\r",
									"        // header\r",
									"        let headersOptRemoveThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        let dataThingIDArray = JSON.parse(pm.environment.get(\"GetResponse_ThingIDArr\"));\r",
									"\r",
									"        for(let i=0;i<countData;i++){\r",
									"\r",
									"            // body\r",
									"            let httpRequestRemoveThing = {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                    \"ThingId\": dataThingIDArray[i]\r",
									"                })\r",
									"            };\r",
									"\r",
									"            let optionsRemoveThing = {\r",
									"                url: url + provisioningapis + urlThingRemoveThing,\r",
									"                method: 'DELETE',\r",
									"                header: headersOptRemoveThing,\r",
									"                body: httpRequestRemoveThing\r",
									"            };\r",
									"            // console.log('request RemoveThing');\r",
									"            let response = await reqPromise(optionsRemoveThing);\r",
									"            let jsonDataRemoveThing = await response.json();\r",
									"            // console.log('jsonDataRemoveThing',jsonDataRemoveThing)\r",
									"        \r",
									"            let operationStatusRemoveThing = await jsonDataRemoveThing.OperationStatus;\r",
									"\r",
									"            //200\r",
									"            pm.test(\"RemoveThing\" + [i+1]+ \" : Status code is \" + statusCodeSuccess, function () {\r",
									"                pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"            });\r",
									"            //20000\r",
									"            pm.test('RemoveThing' + [i+1]+ ' : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"                pm.expect(operationStatusRemoveThing).to.have.property('Code', resultCodeSuccess);\r",
									"            });\r",
									"            //RemoveThing is Success\r",
									"            pm.test('RemoveThing' + [i+1]+ ' : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThing+'\"', function () {\r",
									"                pm.expect(operationStatusRemoveThing).to.have.property('Description', resultDescriptionRemoveThing);\r",
									"            });\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThingStateInfo\r",
									" RemoveThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"            \r",
									"        };\r",
									"\r",
									"        let dataThingIDArray = JSON.parse(pm.environment.get(\"GetResponse_ThingIDArr\"));\r",
									"\r",
									"        for(let i=0;i<dataThingIDArray.length;i++){\r",
									"        \r",
									"            // body\r",
									"            let httpRequestRemoveThingStateInfo = {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                    \"ThingId\": dataThingIDArray[i],\r",
									"                    \"stateType\": fieldDataValue.CreateThingStateInfo.Type_Report, //Report\r",
									"                    \"stateKey\": fieldDataValue.CreateThingStateInfo.SensorKey //Temp\r",
									"                })\r",
									"            };\r",
									"\r",
									"            let optionsRemoveThingStateInfo = {\r",
									"                url: url + provisioningapis + urlThingRemoveThingStateInfo,\r",
									"                method: 'DELETE',\r",
									"                header: headersOptRemoveThingStateInfo,\r",
									"                body: httpRequestRemoveThingStateInfo\r",
									"            };\r",
									"\r",
									"            // console.log('response RemoveThingStateInfo');\r",
									"            let response = await reqPromise(optionsRemoveThingStateInfo);\r",
									"            let jsonDataRemoveThingStateInfo = await response.json();\r",
									"            // console.log('jsonDataRemoveThing',jsonDataRemoveThingStateInfo)\r",
									"        \r",
									"            let operationStatusRemoveThingStateInfo = await jsonDataRemoveThingStateInfo.OperationStatus;\r",
									"\r",
									"            //200\r",
									"            pm.test(\"RemoveThingStateInfo\" + [i+1]+ \" : Status code is \" + statusCodeSuccess, function () {\r",
									"                pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"            });\r",
									"            //20000\r",
									"            pm.test('RemoveThingStateInfo' + [i+1]+ ' : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"                pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"            });\r",
									"            //RemoveThingStateInfo is Success\r",
									"            pm.test('RemoveThingStateInfo' + [i+1]+ ' : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThingStateInfo+'\"', function () {\r",
									"                pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Description', resultDescriptionRemoveThingStateInfo);\r",
									"            });\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"//---------------- LogDefaultValue --------------//\r",
									"//set variable to LogDefaultValue JSON.parse\r",
									"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
									"// console.log('LogDefaultValue',LogDefaultValue);\r",
									"//---------------- set globals Other --------------//\r",
									"var SearchLog = LogDefaultValue.SearchLog;\r",
									"// console.log('SearchLog',SearchLog);\r",
									"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
									"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
									"var kbn_version = SearchLog.header.kbn_version;\r",
									"var authorization = SearchLog.header.Authorization;\r",
									"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
									"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
									"var namespace = LogDefaultValue.Other.namespace_control4mg;\r",
									"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
									"var header_x_ais_accountkey = LogDefaultValue.Other.header_x_ais_accountkey;\r",
									"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
									"var methodPost = LogDefaultValue.Other.methodPost;\r",
									"\r",
									"// Detail\r",
									"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
									"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
									"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
									"\r",
									"// Summary\r",
									"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
									"// ControlAPIs\r",
									"var applicationName = LogDefaultValue.Control.applicationName_mg4;\r",
									"var cmdName = LogDefaultValue.Control.cmdNameThings;\r",
									"// var resultDesc = LogDefaultValue.Control.resultDescThing_success;\r",
									"var endPointNameControlAPIs = LogDefaultValue.Control.endPointNameControlAPIs;\r",
									"var endPointNameDesireEx = LogDefaultValue.Control.endPointNameDesireEx;\r",
									"var endPointNameRabbitMQ = LogDefaultValue.Control.endPointNameRabbitMQ;\r",
									"var containerId = LogDefaultValue.Control.containerId;\r",
									"var requestObjectUrlStaging = LogDefaultValue.Control.requestObjectUrlStagingThings;\r",
									"var xProtocolControl = LogDefaultValue.Control.xProtocolControl;\r",
									"var responseObjectPublished = LogDefaultValue.Control.responseObjectPublished;\r",
									"\r",
									"// Check CDR (Summary Log) and EDR (Detail Log)\r",
									"SearchLogFindTid = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSearchLogFindTid = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        // let valueSearch = pm.environment.get(\"GetResponse_ThingID\"); \r",
									"        let valueSearch = x_ais_OrderRef_ControlThings +  current_timestamp; \r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestSearchLogFindTid = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"\r",
									"        let optionsSearchLogFindTid = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptSearchLogFindTid,\r",
									"            body: httpRequestSearchLogFindTid\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsSearchLogFindTid);\r",
									"        let jsonDataSearchLogFindTid = await response.json();\r",
									"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
									"        console.log('hits',hits)\r",
									"  \r",
									"        // find tid\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            // let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"        \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            if(applicationNameValue == applicationName){\r",
									"                // let tid = hits[i]._source.cauldron.tid;\r",
									"                // pm.environment.set(\"tid\", tid);\r",
									"                let sessionId = hits[i]._source.cauldron.sessionId;\r",
									"                pm.environment.set(\"sessionId\", sessionId);\r",
									"                break;\r",
									"           }\r",
									"        }\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"CheckLog = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCheckLog = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = pm.environment.get(\"sessionId\");\r",
									"\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestCheckLog = {\r",
									"            mode: 'raw',\r",
									"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"        let optionsCheckLog = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptCheckLog,\r",
									"            body: httpRequestCheckLog\r",
									"        }; \r",
									"        let response = await reqPromise(optionsCheckLog);\r",
									"        let jsonDataCheckLog = await response.json();\r",
									"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
									"        \r",
									"        // //200\r",
									"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });     \r",
									"        \r",
									"        let hits = jsonDataCheckLog.hits.hits\r",
									"        console.log('hits',hits)\r",
									"  \r",
									"        // find logType\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            //  let logType = hits[i]._source.cauldron.logType\r",
									"            let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"           \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            \r",
									"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
									"            // console.log('resultDataLog',resultDataLog)\r",
									"\r",
									"            let tidControl = x_ais_OrderRef_ControlThings + current_timestamp;\r",
									"            // console.log(tidControl);\r",
									"            if(applicationNameValue == applicationName){\r",
									"                 \r",
									"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ControlAPIs\r",
									"                    pm.test(\"Check Summary Log : ControlThings\" , function () {\r",
									"                        console.log(\"======== Check Summary Log ( Expected = Actual) [ControlThings] ==================\");\r",
									"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
									"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
									"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeSuccess);\r",
									"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
									"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        // console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
									"                        // console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
									"\r",
									"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
									"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
									"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeSuccess); \r",
									"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionTheRequestedOperationWasSuccessfully); \r",
									"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
									"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"\r",
									"                        let thingId = JSON.parse(pm.environment.get(\"GetResponse_ThingIDArr\"));\r",
									"                        let customUrl= urlCheckLog + requestObjectUrlStaging;\r",
									"                        let customAccountkey = pm.environment.get(\"GetResponse_AccountId\");\r",
									"\r",
									"                        // check identity\r",
									"                        // \"identity\":\"{\\\"ThingID\\\":[\\\"6012886b96d0ed0001f551ad\\\",\\\"6012886b96d0ed0001f551b5\\\"]}\"\r",
									"                        let dataSummaryIdentity = JSON.parse(resultDataLog.identity);         \r",
									"\r",
									"                        console.log(\"identity.ThingID : \" + dataSummaryIdentity.ThingID + \" = \" + thingId);             \r",
									"                        pm.expect(dataSummaryIdentity.ThingID).to.eql(thingId); \r",
									"\r",
									"                        // check custom\r",
									"                        // \\\"custom\\\":{ \\\"customData\\\":{ \\\"url\\\":\\\"mg-iot.sandais.com/api/v1/Control/Things\\\", \\\"accountkey\\\":\\\"6099638526fdbc0001c372ba\\\", \\\"ThingID\\\":[ \\\"6099638726fdbc0001c372c4\\\", \\\"6099638726fdbc0001c372ce\\\" ] }, \\\"endPointSummary\\\":[ { \\\"no\\\":\\\"1\\\", \\\"endPointName\\\":\\\"db.AuthenticationCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:Inquiry was Success\\\", \\\"processTime\\\":0.0002 }, { \\\"no\\\":\\\"2\\\", \\\"endPointName\\\":\\\"db.ClientsCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:Inquiry was Success\\\", \\\"processTime\\\":0.0006 }, { \\\"no\\\":\\\"3\\\", \\\"endPointName\\\":\\\"db.AccountsCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:Inquiry was Success\\\", \\\"processTime\\\":0.0002 }, { \\\"no\\\":\\\"4\\\", \\\"endPointName\\\":\\\"db.ThingsCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:Inquiry was Success\\\", \\\"processTime\\\":0.0002 } ] }\r",
									"\r",
									"                        let customData = resultDataLog.custom.customData\r",
									"\r",
									"                        console.log(\"custom.url : \" + customData.url + \" = \" + customUrl);\r",
									"                        console.log(\"custom.accountkey : \" +customData.accountkey + \" = \" + customAccountkey);\r",
									"                        console.log(\"custom.ThingID : [\" + customData.ThingID + \"] = [\" + thingId + \"]\");\r",
									"\r",
									"                        pm.expect(customData.url).to.eql(customUrl); \r",
									"                        pm.expect(customData.accountkey).to.eql(customAccountkey); \r",
									"                        pm.expect(customData.ThingID).to.eql(thingId); \r",
									"\r",
									"                        let custom = resultDataLog.custom.endPointSummary;\r",
									"                        let countCustom = custom.length;\r",
									"                       \r",
									"                        // [\"db.AuthenticationCollection\",\"db.ClientsCollection\",\"db.AccountsCollection\",\"db.ThingsCollection\"]\r",
									"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_ControlThings;\r",
									"                        // [\"20000:Inquiry was Success\",\"20000:Inquiry was Success\",\"20000:Inquiry was Success\",\"20000:Inquiry was Success\"]\r",
									"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_ControlThings;\r",
									"                        let countCustomStep = dataEndPointName.length;\r",
									"\r",
									"                        console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep);\r",
									"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
									"                        \r",
									"                        for(let i=0;i<countCustomStep;i++){\r",
									"                            let no = custom[i].no;\r",
									"                            let valueEndPointName = custom[i].endPointName;\r",
									"                            let valueResponseStatus = custom[i].responseStatus;\r",
									"                            // console.log(\"i\",i);\r",
									"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
									"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
									"\r",
									"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString());\r",
									"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i]);\r",
									"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i]);\r",
									"\r",
									"                            pm.expect(no).to.eql((i+1).toString()); \r",
									"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
									"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]); \r",
									"                        }\r",
									"                    }); \r",
									"                }\r",
									"\r",
									"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ControlAPIs\r",
									"\r",
									"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
									"                    // console.log('endPointNameValue ',endPointNameValue)\r",
									"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [ControlThings]\", function () {\r",
									"                        console.log(\"======== Check Detail Log ( Expected = Actual) [ControlThings] ==================\");\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
									"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
									"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
									"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
									"\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
									"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
									"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
									"\r",
									"                        let url = requestObjectUrlStaging; \r",
									"                        let urlCustom = urlCheckLog + requestObjectUrlStaging; \r",
									"                        let SensorKey = fieldDataValue.CreateThingStateInfo.SensorKey;\r",
									"                        let sensor = pm.environment.get(\"random_Sensor_Control\");\r",
									"                        let x_ais_orderref = x_ais_OrderRef_ControlThings + current_timestamp;\r",
									"                        let x_ais_AccountKey = pm.environment.get(\"GetResponse_AccountId\");\r",
									"                        let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken\");\r",
									"                        let thingId = JSON.parse(pm.environment.get(\"GetResponse_ThingIDArr\"));\r",
									"                        let x_protocol = xProtocolControl;\r",
									"\r",
									"                        // if( endPointNameValue == endPointNameControlAPIs){     //\"endPointName\":\"ControlAPIs\"\r",
									"                        if( endPointNameValue == undefined){    //\"endPointName\":undefined\r",
									"\r",
									"                            console.log(\"custom1.endPointName : \" + resultDataLog.custom1.endPointName + \" = \" + undefined);\r",
									"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(undefined); \r",
									"                        \r",
									"                            // // \"Status\":\"20000:ControlManyThings is Success\"\",\r",
									"                            // let status = resultCodeSuccess +\":\"+ resultDescriptionTheRequestedOperationWasSuccessfully;\r",
									"\r",
									"                            // console.log(\"custom1.Status : \" + resultDataLog.custom1.Status + \" = \" + status);\r",
									"                            // pm.expect(resultDataLog.custom1.Status).to.eql(status); \r",
									"\r",
									"                            // check requestObject\r",
									"                            // \"requestObject\":\"{\\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Control/Things\\\",\\\"method\\\":\\\"POST\\\",\\\"headers\\\":{\\\"x-ais-orderref\\\":\\\"ControlThings_202101271801621\\\",\\\"x-ais-accountkey\\\":\\\"60114adca32e8c0001576d22\\\",\\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAGhfn1wJCmf68Vf1zYxZ/fak0lmQ84nNnLsXbdYpFNnXEIlAkkY2KW0\\\"},\\\"body\\\":{\\\"ThingId\\\":[\\\"6012886b96d0ed0001f551ad\\\",\\\"6012886b96d0ed0001f551b5\\\"],\\\"Sensors\\\":{\\\"Temp\\\":955}}}\"\r",
									"\r",
									"                            // \\\"requestObject\\\":\\\"{ \\\\\\\"url\\\\\\\":\\\\\\\"/api/v1/Control/Things\\\\\\\", \\\\\\\"method\\\\\\\":\\\\\\\"POST\\\\\\\", \\\\\\\"headers\\\\\\\":{ \\\\\\\"Cache-Control\\\\\\\":\\\\\\\"no-cache\\\\\\\", \\\\\\\"Content-Type\\\\\\\":\\\\\\\"application/json\\\\\\\", \\\\\\\"Accept\\\\\\\":\\\\\\\"*/*\\\\\\\", \\\\\\\"Accept-Encoding\\\\\\\":\\\\\\\"gzip, deflate, br\\\\\\\", \\\\\\\"Host\\\\\\\":\\\\\\\"mg-iot.sandais.com\\\\\\\", \\\\\\\"User-Agent\\\\\\\":\\\\\\\"PostmanRuntime/7.26.8\\\\\\\", \\\\\\\"Content-Length\\\\\\\":\\\\\\\"113\\\\\\\", \\\\\\\"x-real-ip\\\\\\\":\\\\\\\"182.232.34.151\\\\\\\", \\\\\\\"x-forwarded-for\\\\\\\":\\\\\\\"182.232.34.151, 10.233.68.0\\\\\\\", \\\\\\\"x-forwarded-proto\\\\\\\":\\\\\\\"http\\\\\\\", \\\\\\\"x-ais-orderref\\\\\\\":\\\\\\\"ControlThings_202105102305584\\\\\\\", \\\\\\\"x-ais-accountkey\\\\\\\":\\\\\\\"6099638526fdbc0001c372ba\\\\\\\", \\\\\\\"x-ais-accesstoken\\\\\\\":\\\\\\\"Bearer ibnxnVhs5Rx3IwglWv7/gVA/1TpQnKqAOBAADlRDvYhOpXwmlpYOEb5yfY5aZpoj0YRWRZM26i9HOqtc1fc1jpNDOK5JpISttmMEy59g2py7nLWonDe2YW2OPRGWSowk6+9ZihLU1fZ5d5jAqqrZaKlOAAI3N1TXDNLsHuKcOJMcERbCcaMqRaku+MY4/kzE+eyIdkfwwbjT91S2VQq+Wk2ooMWuLk6/DHVJhwbMP7bBsrgL5JIkwopN/AJo42xlA4nmFDhTIjBKVegMrc8SMg==\\\\\\\", \\\\\\\"postman-token\\\\\\\":\\\\\\\"4ab97d17-da5c-450a-a302-c94fe5ccc964\\\\\\\", \\\\\\\"x-envoy-external-address\\\\\\\":\\\\\\\"10.233.68.0\\\\\\\", \\\\\\\"x-request-id\\\\\\\":\\\\\\\"14323c66-f9d0-4058-8dc7-e1e3a43b27b2\\\\\\\", \\\\\\\"x-envoy-original-path\\\\\\\":\\\\\\\"/mg4controlapis/api/v1/Control/Things\\\\\\\", \\\\\\\"x-b3-traceid\\\\\\\":\\\\\\\"15790352f1164c0b241198f8fd8a63e2\\\\\\\", \\\\\\\"x-b3-spanid\\\\\\\":\\\\\\\"ab259bc6155872da\\\\\\\", \\\\\\\"x-b3-parentspanid\\\\\\\":\\\\\\\"241198f8fd8a63e2\\\\\\\", \\\\\\\"x-b3-sampled\\\\\\\":\\\\\\\"0\\\\\\\", \\\\\\\"x-ais-SessionId\\\\\\\":\\\\\\\"1620665225167\\\\\\\", \\\\\\\"identity\\\\\\\":\\\\\\\"{ \\\\\\\\\\\\\\\"ThingID\\\\\\\\\\\\\\\":[ \\\\\\\\\\\\\\\"6099638726fdbc0001c372c4\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"6099638726fdbc0001c372ce\\\\\\\\\\\\\\\" ] }\\\\\\\", \\\\\\\"custom\\\\\\\":\\\\\\\"{ \\\\\\\\\\\\\\\"url\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"mg-iot.sandais.com/api/v1/Control/Things\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"accountkey\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"6099638526fdbc0001c372ba\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"ThingID\\\\\\\\\\\\\\\":[ \\\\\\\\\\\\\\\"6099638726fdbc0001c372c4\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"6099638726fdbc0001c372ce\\\\\\\\\\\\\\\" ] }\\\\\\\" }, \\\\\\\"queryString\\\\\\\":{ }, \\\\\\\"routeParamteters\\\\\\\":{ }, \\\\\\\"body\\\\\\\":{ \\\\\\\"ThingId\\\\\\\":[ \\\\\\\"6099638726fdbc0001c372c4\\\\\\\", \\\\\\\"6099638726fdbc0001c372ce\\\\\\\" ], \\\\\\\"Sensors\\\\\\\":{ \\\\\\\"Temp\\\\\\\":412 } } }\\\"\r",
									"\r",
									"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
									"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
									"\r",
									"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
									"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
									"                            console.log(\"headers.x_ais_AccountKey : \" + jsonParseRequestObject.headers[header_x_ais_accountkey] + \" = \" + x_ais_AccountKey);\r",
									"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
									"                            \r",
									"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
									"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accountkey]).to.eql(x_ais_AccountKey);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
									"\r",
									"                            let identity = JSON.parse(jsonParseRequestObject.headers.identity)\r",
									"                            console.log(\"headers.identity.ThingID : [\" + identity.ThingID + \"] = [\" + thingId + \"]\");\r",
									"                            pm.expect(identity.ThingID).to.eql(thingId);\r",
									"                            \r",
									"                            let custom = JSON.parse(jsonParseRequestObject.headers.custom)\r",
									"                            console.log(\"headers.custom.url : \" + custom.url + \" = \" + urlCustom);\r",
									"                            console.log(\"headers.custom.accountkey : \" + custom.accountkey + \" = \" + x_ais_AccountKey);\r",
									"                            console.log(\"headers.custom.ThingID : [\" + custom.ThingID + \"] = [\" + thingId + \"]\");\r",
									"                            \r",
									"                            pm.expect(custom.url).to.eql(urlCustom);\r",
									"                            pm.expect(custom.accountkey).to.eql(x_ais_AccountKey);\r",
									"                            pm.expect(custom.ThingID).to.eql(thingId);\r",
									"\r",
									"                            console.log(\"queryString : \" + JSON.stringify(jsonParseRequestObject.queryString) + \" = \" + JSON.stringify({}));\r",
									"                            pm.expect(jsonParseRequestObject.queryString).to.eql({});\r",
									"\r",
									"                            console.log(\"routeParamteters : \" + JSON.stringify(jsonParseRequestObject.routeParamteters) + \" = \" + JSON.stringify({}));\r",
									"                            pm.expect(jsonParseRequestObject.routeParamteters).to.eql({});\r",
									"\r",
									"                            console.log(\"resquest.body.ThingId : [\" + jsonParseRequestObject.body.ThingId + \"] = [\" + thingId + \"]\");\r",
									"                            console.log(\"resquest.body.Sensors.\" + SensorKey + \"  : \" + jsonParseRequestObject.body.Sensors[SensorKey] + \" = \" + sensor);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.body.ThingId).to.eql(thingId);\r",
									"                            pm.expect(jsonParseRequestObject.body.Sensors[SensorKey]).to.eql(sensor);\r",
									"\r",
									"                            // check responseObject\r",
									"                            // \\\"responseObject\\\":\\\"{ \\\\\\\"OperationStatus\\\\\\\":{ \\\\\\\"Code\\\\\\\":\\\\\\\"20000\\\\\\\", \\\\\\\"DeveloperMessage\\\\\\\":\\\\\\\"The requested operation was successfully.\\\\\\\" } }\\\"\r",
									"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
									"                            // console.log('jsonParseResponseObject',jsonParseResponseObject);\r",
									"\r",
									"                            console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeSuccess);\r",
									"                            console.log(\"response.OperationStatus.DeveloperMessage : \" + jsonParseResponseObject.OperationStatus.DeveloperMessage + \" = \" + resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"\r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeSuccess);  \r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheRequestedOperationWasSuccessfully);  \r",
									"                        }\r",
									"\r",
									"                        // if( endPointNameValue == endPointNameDesireEx){\r",
									"                        if( endPointNameValue == endPointNameRabbitMQ){\r",
									"\r",
									"                            console.log(\"custom1.endPointName : \" + resultDataLog.custom1.endPointName + \" = \" + endPointNameRabbitMQ);\r",
									"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameRabbitMQ); \r",
									"                            // check requestObject\r",
									"                            // \"requestObject\":\"{\\\"RoutingKey\\\":\\\"desire.pub.v1.15ef8559-0a9a-4ae8-a643-4ecc5f3321b2\\\",\\\"Payload\\\":\\\"{\\\\\\\"Temp\\\\\\\":955}\\\",\\\"Headers\\\":{\\\"timestamp_in_ms\\\":1611746014944,\\\"x-ais-orderref\\\":\\\"ControlThings_202101271801621\\\",\\\"x_protocol\\\":\\\"CONTROL\\\"}}\"\r",
									"\r",
									"                            // \\\"requestObject\\\":\\\"{ \\\\\\\"url\\\\\\\":\\\\\\\"desire.pub.v1.9d14bca5-da7f-41a8-8abe-7788d183070f\\\\\\\", \\\\\\\"headers\\\\\\\":{ \\\\\\\"x-ais-orderref\\\\\\\":\\\\\\\"ControlThings_202105102305584\\\\\\\", \\\\\\\"x-ais-sessionid\\\\\\\":\\\\\\\"1620665225167\\\\\\\", \\\\\\\"timestamp_in_ms\\\\\\\":\\\\\\\"1620665225196\\\\\\\", \\\\\\\"x_protocol\\\\\\\":\\\\\\\"CONTROL\\\\\\\" }, \\\\\\\"body\\\\\\\":\\\\\\\"{ \\\\\\\\\\\\\\\"Temp\\\\\\\\\\\\\\\":412 }\\\\\\\" }\\\"\r",
									"\r",
									"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
									"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
									"                           \r",
									"                            // let jsonParsePayload = JSON.parse(jsonParseRequestObject.Payload);\r",
									"                            // console.log('jsonParsePayload',jsonParsePayload);\r",
									"                            let jsonParseBody = jsonParseRequestObject.body;\r",
									"                            let jsonParseBody1 = JSON.parse(jsonParseBody);\r",
									"                            // console.log('jsonParseBody',jsonParseBody);\r",
									"                            // console.log('jsonParseBody1',jsonParseBody1[SensorKey]);\r",
									"\r",
									"                            console.log(\"headers.timestamp_in_ms : \" + jsonParseRequestObject.headers.timestamp_in_ms + \" = \" + jsonParseRequestObject.headers.timestamp_in_ms);\r",
									"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"                            console.log(\"headers.x_protocol : \" + jsonParseRequestObject.headers.x_protocol + \" = \" + x_protocol);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.headers.timestamp_in_ms).to.eql(jsonParseRequestObject.headers.timestamp_in_ms);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                            pm.expect(jsonParseRequestObject.headers.x_protocol).to.eql(x_protocol);\r",
									"\r",
									"                            console.log(\"resquest.\"+ SensorKey +\" : \" + jsonParseBody1[SensorKey] + \" = \" + sensor);\r",
									"                            pm.expect(jsonParseBody1[SensorKey]).to.eql(sensor);\r",
									"                \r",
									"                            // check responseObject\r",
									"                            // \\\"responseObject\\\":\\\"\\\\\\\"\\\\\\\"\\\",\r",
									"                            // let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
									"                            // console.log('jsonParseResponseObject',jsonParseResponseObject);\r",
									"\r",
									"                            console.log(\"response.custom1.responseObject : \" + resultDataLog.custom1.responseObject + \" = \" + JSON.stringify(\"\"));\r",
									"                            pm.expect(resultDataLog.custom1.responseObject).to.eql(JSON.stringify(\"\"));  \r",
									"                        }\r",
									"\r",
									"                    }); \r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// InquiryThing\r",
									"InquiryThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptInquiryThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_InquiryThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_InquiryThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestInquiryThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsInquiryThing = {\r",
									"            url: url + provisioningapis + urlThingInquiryThing,\r",
									"            method: 'POST',\r",
									"            header: headersOptInquiryThing,\r",
									"            body: httpRequestInquiryThing\r",
									"        };\r",
									"\r",
									"        // console.log('request InquiryThing');\r",
									"        let response = await reqPromise(optionsInquiryThing);\r",
									"        let jsonDataInquiryThing = await response.json();\r",
									"        // console.log('jsonDataInquiryThing',jsonDataInquiryThing)\r",
									"    \r",
									"        let operationStatusInquiryThing = await jsonDataInquiryThing.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"InquiryThing : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('InquiryThing : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusInquiryThing).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //InquiryThing is Success\r",
									"        pm.test('InquiryThing : OperationStatus Description is '+'\"'+ resultDescriptionInquiryThing+'\"', function () {\r",
									"            pm.expect(operationStatusInquiryThing).to.have.property('Description', resultDescriptionInquiryThing);\r",
									"        });\r",
									"\r",
									"        //Check Data\r",
									"        let thingInfo = await jsonDataInquiryThing.ThingInfo;\r",
									"        console.log('thingInfo',thingInfo);\r",
									"\r",
									"        for(let i=0;i<thingInfo.length;i++){\r",
									"            pm.test('Verify DB Check Data : ControlThings [StateInfo.Desire and StateInfo.Delta :{ \"'+  fieldDataValue.CreateThingStateInfo.SensorKey + '\" : \"'+ pm.environment.get(\"random_Sensor_Control\") +'\" }]' , function () {\r",
									"                console.log(\"======== Verify DB Check Data ( Expected = Actual) [ControlThings] ==================\");\r",
									"                console.log(\"thingInfo[\"+ i +\"]StateInfo.Delta : \" + thingInfo[i].StateInfo.Delta[fieldDataValue.CreateThingStateInfo.SensorKey] + \" = \" + pm.environment.get(\"random_Sensor_Control\"));\r",
									"                console.log(\"thingInfo[\"+ i +\"]StateInfo.Desire : \" + thingInfo[i].StateInfo.Delta[fieldDataValue.CreateThingStateInfo.SensorKey] + \" = \" + pm.environment.get(\"random_Sensor_Control\"));\r",
									"\r",
									"                pm.expect(thingInfo[i].StateInfo.Delta).to.have.property(fieldDataValue.CreateThingStateInfo.SensorKey, pm.environment.get(\"random_Sensor_Control\"));\r",
									"                pm.expect(thingInfo[i].StateInfo.Desire).to.have.property(fieldDataValue.CreateThingStateInfo.SensorKey, pm.environment.get(\"random_Sensor_Control\"));\r",
									"            });\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"setTimeout(function(){SearchLogFindTid();}, 20000); \r",
									"setTimeout(function(){CheckLog();}, 30000); \r",
									"setTimeout(function(){InquiryThing();}, 40000); \r",
									"\r",
									"setTimeout(function(){RemoveThingStateInfo();}, 45000); \r",
									"setTimeout(function(){RemoveThing();}, 50000); \r",
									"setTimeout(function(){RemoveAccount();}, 55000); \r",
									"setTimeout(function(){RemovePartner();}, 60000); \r",
									"\r",
									"setTimeout(function(){\r",
									"pm.environment.unset(\"current_timestamp\");\r",
									"pm.environment.unset(\"AccessToken\");\r",
									"pm.environment.unset(\"random_number\");\r",
									"pm.environment.unset(\"PartnerName\");\r",
									"pm.environment.unset(\"MerchantContact\");\r",
									"pm.environment.unset(\"CPID\");\r",
									"pm.environment.unset(\"GetResponse_PartnerId\");\r",
									"pm.environment.unset(\"AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountId\");\r",
									"for(let i=0;i<countData;i++){\r",
									"pm.environment.unset(\"random_IM\"+[i+1]);\r",
									"pm.environment.unset(\"random_ICCID\"+[i+1]);\r",
									"pm.environment.unset(\"ThingName\"+[i+1]);\r",
									"}\r",
									"pm.environment.unset(\"GetResponse_ThingIDArr\");\r",
									"pm.environment.unset(\"random_Sensor\");\r",
									"pm.environment.unset(\"tid\");\r",
									"pm.environment.unset(\"sessionId\");\r",
									"pm.environment.unset(\"SensorKey\");\r",
									"pm.environment.unset(\"random_Sensor_Control\");\r",
									"pm.environment.unset(\"Value_ControlThing_TST_F2_1_1_002_Succees\");\r",
									"}, 90000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var Username = pm.environment.get(\"Username\");\r",
									"var Password = pm.environment.get(\"Password\");\r",
									"\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//count for loop data\r",
									"var countData = 2;\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"pm.environment.set(\"SensorKey\",fieldDataValue.CreateThingStateInfo.SensorKey)\r",
									"pm.environment.set(\"Value_ControlThing_TST_F2_1_1_002_Succees\",fieldDataValue.Control.Value_ControlThing_TST_F2_1_1_002_Succees)\r",
									"\r",
									"//format YYYYMMDDHHMMSSS\r",
									"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
									"// console.log('currentTmestamp',currentTmestamp);\r",
									"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- statusCodeList --------------//\r",
									"//set variable to statusCodeList JSON.parse\r",
									"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
									"//set global variable to statusCode 200\r",
									"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
									"//set global variable to statusCode 201\r",
									"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultCodeList --------------//\r",
									"//set variable to resultCodeList JSON.parse\r",
									"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
									"//set global variable to resultCode \"20000\"\r",
									"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
									"//set global variable to resultCode \"20100\"\r",
									"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionSuccessList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
									"//set global variable to resultDescription \"SignInProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
									"//set global variable to resultDescription \"CreatePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
									"//set global variable to resultDescription \"CreateAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
									"//set global variable to resultDescription \"CreateThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThing\", resultDescriptionSuccessList.resultDescriptionCreateThing);\r",
									"//set global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThingStateInfo\", resultDescriptionSuccessList.resultDescriptionCreateThingStateInfo);\r",
									"//set global variable to resultDescription \"RemovePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
									"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
									"//set global variable to resultDescription \"RemoveThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThing\", resultDescriptionSuccessList.resultDescriptionRemoveThing);\r",
									"//set global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThingStateInfo\", resultDescriptionSuccessList.resultDescriptionRemoveThingStateInfo);\r",
									"//set global variable to resultDescription \"Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccess\", resultDescriptionSuccessList.resultDescriptionSuccess);\r",
									"//set global variable to resultDescription \"Created Success\"\r",
									"pm.globals.set(\"resultDescriptionCreatedSuccess\", resultDescriptionSuccessList.resultDescriptionCreatedSuccess);\r",
									"//set global variable to resultDescription \"ControlManyThings is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessControlManyThings\", resultDescriptionSuccessList.resultDescriptionSuccessControlManyThings);\r",
									"//set global variable to resultDescription \"InquiryThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionInquiryThing\", resultDescriptionSuccessList.resultDescriptionInquiryThing);\r",
									"//set global variable to resultDescription \"The requested operation was successfully.\"\r",
									"pm.globals.set(\"resultDescriptionTheRequestedOperationWasSuccessfully\", resultDescriptionSuccessList.resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- HeaderList --------------//\r",
									"//set variable to HeaderList JSON.parse\r",
									"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
									"//---------------- set globals Other --------------//\r",
									"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
									"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
									"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
									"//set global variable to kbn-versio \"7.5.1\"\r",
									"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Signin_ --------------//\r",
									"//set global variable to x_ais_OrderRef \"Signin_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreatePartner --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
									"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
									"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
									"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreateAccount --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
									"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
									"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Thing --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThing\", HeaderList.Thing.x_ais_OrderRef_CreateThing);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThing\", HeaderList.Thing.x_ais_OrderDesc_CreateThing);\r",
									"//set global variable to x_ais_OrderRef \"InquiryThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_InquiryThing\", HeaderList.Thing.x_ais_OrderRef_InquiryThing);\r",
									"//set global variable to x_ais_OrderDesc \"InquiryThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_InquiryThing\", HeaderList.Thing.x_ais_OrderDesc_InquiryThing);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThing\", HeaderList.Thing.x_ais_OrderRef_RemoveThing);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThing\", HeaderList.Thing.x_ais_OrderDesc_RemoveThing);\r",
									"//set global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_RemoveThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_RemoveThingStateInfo);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Control --------------//\r",
									"//set global variable to x_ais_OrderRef \"ControlThings_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ControlThings\", HeaderList.Control.x_ais_OrderRef_ControlThings);\r",
									"//set global variable to x_ais_OrderRef \"ControlThingsfail_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ControlThings_fail\", HeaderList.Control.x_ais_OrderRef_ControlThings_fail);\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"SignInProcess is Success\"\r",
									"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
									"//get global variable to resultDescription \"CreatePartner is Success\"\r",
									"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
									"//get global variable to resultDescription \"CreateAccount is Success\"\r",
									"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
									"//get global variable to resultDescription \"CreateThing is Success\"\r",
									"var resultDescriptionCreateThing = pm.globals.get(\"resultDescriptionCreateThing\");\r",
									"//get global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"var resultDescriptionCreateThingStateInfo = pm.globals.get(\"resultDescriptionCreateThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- urlRouteList --------------//\r",
									"//set variable to urlRouteList JSON.parse\r",
									"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
									"//---------------- set url Create --------------//\r",
									"//set global variable to url \"/api/v1/auth/signin\"\r",
									"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
									"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
									"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"pm.globals.set(\"urlThingCreateThing\", urlRouteList.Thing.urlThingCreateThing);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"pm.globals.set(\"urlThingCreateThingStateInfo\", urlRouteList.Thing.urlThingCreateThingStateInfo);\r",
									"//---------------- get url Create --------------//\r",
									"//get global variable to url \"/api/v1/auth/signin\"\r",
									"var urlSignin = pm.globals.get(\"urlSignin\");\r",
									"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
									"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"var urlThingCreateThing = pm.globals.get(\"urlThingCreateThing\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"var urlThingCreateThingStateInfo = pm.globals.get(\"urlThingCreateThingStateInfo\");\r",
									"//---------------- set url Remove --------------//\r",
									"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
									"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"pm.globals.set(\"urlThingRemoveThing\", urlRouteList.Thing.urlThingRemoveThing);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"pm.globals.set(\"urlThingRemoveThingStateInfo\", urlRouteList.Thing.urlThingRemoveThingStateInfo);\r",
									"//---------------- set url Inquiry --------------//\r",
									"//set global variable to url \"/api/v1/Thing/InquiryThing\"\r",
									"pm.globals.set(\"urlThingInquiryThing\", urlRouteList.Thing.urlThingInquiryThing);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Signin_ --------------//\r",
									"//get global variable to x_ais_OrderRef \"Signin_\"\r",
									"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"var x_ais_OrderRef_CreateThing = pm.globals.get(\"x_ais_OrderRef_CreateThing\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"var x_ais_OrderDesc_CreateThing = pm.globals.get(\"x_ais_OrderDesc_CreateThing\");\r",
									"//get global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"var x_ais_OrderRef_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderRef_CreateThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"var x_ais_OrderDesc_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_CreateThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            // console.log('response111',response);\r",
									"            // console.log('errerrerr',err);\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// Signin get token\r",
									" Signin = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSignin = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestSignin = {\r",
									"            mode: 'raw',\r",
									"            raw: \r",
									"            JSON.stringify({\r",
									"                username:Username,\r",
									"                password:Password\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsSignin = {\r",
									"            url: url + provisioningapis + urlSignin,\r",
									"            method: 'POST',\r",
									"            header: headersOptSignin,\r",
									"            body: httpRequestSignin\r",
									"        };\r",
									"        // console.log('request Signin');\r",
									"        let response = await reqPromise(optionsSignin);\r",
									"        let jsonDataSignin = await response.json();\r",
									"\r",
									"        // setAccessToken\r",
									"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
									"\r",
									"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // SignInProcess is Success\r",
									"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
									"        });\r",
									"\r",
									"        //set random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //set PartnerName\r",
									"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
									"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
									"        //set MerchantContact\r",
									"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
									"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
									"        // set CPID\r",
									"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
									"        pm.environment.set(\"CPID\", CPIDValue)\r",
									"        \r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreatePartner\r",
									" CreatePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreatePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreatePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
									"                \"PartnerType\": [\r",
									"                    \"Supplier\",\r",
									"                    \"Customer\"\r",
									"                ],\r",
									"                \"PartnerDetail\": {\r",
									"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
									"                    \"CPID\": pm.environment.get(\"CPID\")\r",
									"                },\r",
									"                \"Property\": {\r",
									"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsCreatePartner = {\r",
									"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreatePartner,\r",
									"            body: httpRequestCreatePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsCreatePartner);\r",
									"        let jsonDataCreatePartner = await response.json();\r",
									"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
									"    \r",
									"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreatePartner is Success\r",
									"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
									"        });\r",
									"\r",
									"        //GetResponse_PartnerId\r",
									"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
									"\r",
									"        //Accountname\r",
									"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
									"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateAccount\r",
									" CreateAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreateAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
									"                })\r",
									"        };\r",
									"        \r",
									"        let optionsCreateAccount = {\r",
									"            url: url + provisioningapis + urlAccountCreateAccount,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateAccount,\r",
									"            body: httpRequestCreateAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateAccount');\r",
									"        let response = await reqPromise(optionsCreateAccount);\r",
									"        let jsonDataCreateAccount = await response.json();\r",
									"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
									"    \r",
									"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateAccount : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateAccount is Success\r",
									"        pm.test('CreateAccount : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
									"        });\r",
									"        // GetResponse_AccountName\r",
									"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
									"        // GetResponse_AccountId\r",
									"        pm.environment.set(\"GetResponse_AccountId\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
									"       \r",
									"        // // random_IM\r",
									"        // pm.environment.set(\"random_IM\", _.random(10000000, 99999999)+\" \"+_.random(1000000, 9999999))\r",
									"        // // random_ICCID\r",
									"        // pm.environment.set(\"random_ICCID\", _.random(1000000, 9999999)+\" \"+_.random(100000, 999999))\r",
									"        // // random_number\r",
									"        // pm.environment.set(\"random_number\",pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        // //ThingName\r",
									"        // let thingNameValue = fieldDataValue.Thing.ThingNameValue; // \"Sensor_TestThingName\"\r",
									"        // pm.environment.set(\"ThingName\", thingNameValue + pm.environment.get(\"random_number\"))\r",
									"\r",
									"        // random_number\r",
									"        pm.environment.set(\"random_number\",pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"\r",
									"        for(let i=0;i<countData;i++){\r",
									"            // random_IM\r",
									"            pm.environment.set(\"random_IM\"+[i+1], _.random(10000000, 99999999)+\" \"+_.random(1000000, 9999999))\r",
									"            // random_ICCID\r",
									"            pm.environment.set(\"random_ICCID\"+[i+1], _.random(1000000, 9999999)+\" \"+_.random(100000, 999999))\r",
									"\r",
									"            //ThingName\r",
									"            let thingNameValue = fieldDataValue.Thing.ThingNameValue; // \"Sensor_TestThingName\"\r",
									"            pm.environment.set(\"ThingName\"+[i+1],thingNameValue +[i+1] + pm.environment.get(\"random_number\"))\r",
									"        }\r",
									"            \r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThing\r",
									" CreateThingArr = async () =>  {\r",
									"    try {\r",
									"        \r",
									"        // header\r",
									"        let headersOptCreateThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThing');\r",
									"        let dataThingIdArr = [];\r",
									"        for(let i=0;i<countData;i++){\r",
									"            // body\r",
									"            let httpRequestCreateThing = {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                    \"ThingName\": pm.environment.get(\"ThingName\"+ [i+1]),\r",
									"                    \"IMEI\": pm.environment.get(\"random_IM\"+ [i+1]),\r",
									"                    \"IMSI\": pm.environment.get(\"random_IM\"+ [i+1]),\r",
									"                    \"ICCID\": pm.environment.get(\"random_ICCID\"+ [i+1]),\r",
									"                    \"RouteUrl\": fieldDataValue.Thing.RouteUrlValue , //[\"http://10.12.3.4:2019/api/information/AddInformation\"]\r",
									"                    \"RouteInfo\": {\r",
									"                        \"MIMO_ID\": fieldDataValue.Thing.RouteInfoMIMOIDValue , //\"606edada\"\r",
									"                        \"MIMO_SerialNo\": fieldDataValue.Thing.RouteInfoMIMOSerialNoValue //5466758878\r",
									"                    },\r",
									"                    \"RouteFlag\": {\r",
									"                        \"ThingName\": fieldDataValue.Thing.RouteFlagThingNameValue , //true\r",
									"                        \"ThingToken\": fieldDataValue.Thing.RouteFlagThingTokenValue, //true\r",
									"                        \"IMEI\": fieldDataValue.Thing.RouteFlagIMEIValue, //true\r",
									"                        \"ICCID\": fieldDataValue.Thing.RouteFlagICCIDValue, //true\r",
									"                        \"RouteInfo\": fieldDataValue.Thing.RouteFlagRouteInfoValue //true\r",
									"                    }\r",
									"                })\r",
									"            };\r",
									"            \r",
									"            let optionsCreateThing = {\r",
									"                url: url + provisioningapis + urlThingCreateThing,\r",
									"                method: 'POST',\r",
									"                header: headersOptCreateThing,\r",
									"                body: httpRequestCreateThing\r",
									"            };\r",
									"            let response = await reqPromise(optionsCreateThing);\r",
									"            let jsonDataCreateThing = await response.json();\r",
									"            let ThingId = await jsonDataCreateThing.ThingInfo.ThingId;\r",
									"            dataThingIdArr.push(ThingId);\r",
									"            let operationStatusCreateThing = await jsonDataCreateThing.OperationStatus;\r",
									"\r",
									"            //201\r",
									"            pm.test(\"CreateThing\"+ [i+1]+ \" : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"                pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"            });\r",
									"            //20100\r",
									"            pm.test('CreateThing'+ [i+1]+ ' : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"                pm.expect(operationStatusCreateThing).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"            });\r",
									"            //CreateThing is Success\r",
									"            pm.test('CreateThing'+ [i+1]+ ' : OperationStatus Description is '+'\"'+ resultDescriptionCreateThing+'\"', function () {\r",
									"                pm.expect(operationStatusCreateThing).to.have.property('Description', resultDescriptionCreateThing);\r",
									"            });\r",
									"        }\r",
									"        \r",
									"        // console.log('dataThingIdArr',dataThingIdArr);\r",
									"        // pm.environment.set(\"GetResponse_ThingID\",jsonDataCreateThing.ThingInfo.ThingId)\r",
									"        pm.environment.set(\"GetResponse_ThingIDArr\",JSON.stringify(dataThingIdArr))\r",
									"        \r",
									"        \r",
									"        //Get Random Sensor \r",
									"        pm.environment.set(\"random_Sensor\", _.random(100, 999))\r",
									"\r",
									"        //Get Random Sensor Control\r",
									"        pm.environment.set(\"random_Sensor_Control\", pm.environment.get(\"Value_ControlThing_TST_F2_1_1_002_Succees\"))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThingStateInfo\r",
									" CreateThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let dataThingIDArray = JSON.parse(pm.environment.get(\"GetResponse_ThingIDArr\"));\r",
									"        // console.log('dataThingIDArray',dataThingIDArray);\r",
									"\r",
									"        // {\"Temp\" : pm.environment.get(\"random_Sensor\")}\r",
									"        let sensorValue = {};\r",
									"        sensorValue[fieldDataValue.CreateThingStateInfo.SensorKey] = pm.environment.get(\"random_Sensor\");\r",
									"        // console.log('sensorValue',sensorValue);\r",
									"        \r",
									"        let httpRequestCreateThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": \r",
									"                    dataThingIDArray\r",
									"                ,\r",
									"                \"Type\": fieldDataValue.CreateThingStateInfo.Type_Report,\r",
									"                \"Sensor\": sensorValue\r",
									"            })\r",
									"        };\r",
									"        // console.log('httpRequestCreateThingStateInfo',httpRequestCreateThingStateInfo);\r",
									"            let optionsCreateThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingCreateThingStateInfo,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThingStateInfo,\r",
									"            body: httpRequestCreateThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThingStateInfo');\r",
									"        let response = await reqPromise(optionsCreateThingStateInfo);\r",
									"        let jsonDataCreateThingStateInfo = await response.json();\r",
									"        let operationStatusCreateThingStateInfo = await jsonDataCreateThingStateInfo.OperationStatus;\r",
									"        // console.log('operationStatusCreateThingStateInfo',operationStatusCreateThingStateInfo);\r",
									"\r",
									"        //200\r",
									"        pm.test(\"CreateThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //CreateThingStateInfo is Success\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionCreateThingStateInfo+'\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Description', resultDescriptionCreateThingStateInfo);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"Signin();\r",
									"setTimeout(async function(){await CreatePartner();}, 3000); \r",
									"setTimeout(async function(){await CreateAccount();}, 6000); \r",
									"setTimeout(async function(){await CreateThingArr();}, 8000); \r",
									"setTimeout(async function(){await CreateThingStateInfo();}, 9000); \r",
									"setTimeout(async function(){}, 10000);  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-ais-OrderRef",
								"value": "{{x_ais_OrderRef_ControlThings}}{{current_timestamp}}"
							},
							{
								"key": "x-ais-AccountKey",
								"type": "text",
								"value": "{{GetResponse_AccountId}}"
							},
							{
								"key": "x-ais-AccessToken",
								"value": "{{Bearer}} {{AccessToken}}"
							},
							{
								"key": "Accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"ThingId\": {{GetResponse_ThingIDArr}},\r\n  \"Sensors\": {\r\n    \"{{SensorKey}}\": \"{{random_Sensor_Control}}\"\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{url}}{{mg4controlapis}}/api/v1/Control/Things",
							"host": [
								"{{url}}{{mg4controlapis}}"
							],
							"path": [
								"api",
								"v1",
								"Control",
								"Things"
							]
						},
						"description": "Type:Desire"
					},
					"response": []
				},
				{
					"name": "ControlThings_TST_F2_0_2_002_Error_AccountKeyMissing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//count for loop data\r",
									"var countData = 2;\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"//---------------- detailsResponse --------------//\r",
									"//set variable to detailsResponse JSON.parse\r",
									"var detailsResponse = JSON.parse(pm.environment.get(\"detailsResponse\"));\r",
									"// console.log('detailsResponse',detailsResponse);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to xAisOrderRef \"RemoveThing_\"\r",
									"var x_ais_OrderRef_RemoveThing = pm.globals.get(\"x_ais_OrderRef_RemoveThing\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"var x_ais_OrderDesc_RemoveThing = pm.globals.get(\"x_ais_OrderDesc_RemoveThing\");\r",
									"//get global variable to x_ais_OrderRef \"RemoveThingStateInfo_\"\r",
									"var x_ais_OrderDesc_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_RemoveThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThingStateInfo\"\r",
									"var x_ais_OrderRef_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderRef_RemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Control --------------//\r",
									"//get global variable to x_ais_OrderRef \"ControlThings_\"\r",
									"var x_ais_OrderRef_ControlThings = pm.globals.get(\"x_ais_OrderRef_ControlThings\");\r",
									"//get global variable to x_ais_OrderRef \"ControlThingsfail_\"\r",
									"var x_ais_OrderRef_ControlThings_fail = pm.globals.get(\"x_ais_OrderRef_ControlThings_fail\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get url Remove --------------//\r",
									"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
									"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"var urlThingRemoveThing = pm.globals.get(\"urlThingRemoveThing\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"var urlThingRemoveThingStateInfo = pm.globals.get(\"urlThingRemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"RemovePartner is Success\"\r",
									"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
									"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
									"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
									"//get global variable to resultDescription \"RemoveThing is Success\"\r",
									"var resultDescriptionRemoveThing = pm.globals.get(\"resultDescriptionRemoveThing\");\r",
									"//get global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"var resultDescriptionRemoveThingStateInfo = pm.globals.get(\"resultDescriptionRemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 403\r",
									"var statusCodeForbidden = pm.globals.get(\"statusCodeForbidden\");\r",
									"//get global variable to resultCode \"40300\"\r",
									"var resultCodeForbiddenMissingOrInvalidParameter = pm.globals.get(\"resultCodeForbiddenMissingOrInvalidParameter\");\r",
									"// //get global variable to resultDescription \"The Parameter x-ais-AccountKey is Missing Or Invalid\"\r",
									"// var resultDescriptionErrorParameterXAisAccountKeyMissingOrInvalid = pm.globals.get(\"resultDescriptionErrorParameterXAisAccountKeyMissingOrInvalid\");\r",
									"//get global variable to resultDescription \"The Client Data is Missing Or Invalid Parameter\"\r",
									"var resultDescriptionTheClientDataIsMissingOrInvalidParameter = pm.globals.get(\"resultDescriptionTheClientDataIsMissingOrInvalidParameter\");\r",
									"//------------------------------------------------------------//\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"ControlThings : Status code is \" + statusCodeForbidden, function () {\r",
									"    pm.response.to.have.status(statusCodeForbidden);\r",
									"});\r",
									"\r",
									"pm.test('ControlThings : OperationStatus Code is '+'\"'+ resultCodeForbiddenMissingOrInvalidParameter +'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeForbiddenMissingOrInvalidParameter);\r",
									"});\r",
									"\r",
									"pm.test('ControlThings : OperationStatus DeveloperMessage is '+'\"'+ resultDescriptionTheClientDataIsMissingOrInvalidParameter+'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheClientDataIsMissingOrInvalidParameter);\r",
									"});\r",
									"\r",
									"pm.test('ControlThings : OperationStatus Details is '+'\"'+ detailsResponse.target_accountId + \" : \" + detailsResponse.developerMessage_accountId +'\"', function () {\r",
									"    let countDetails= jsonData.OperationStatus.Details;\r",
									"    for(let i=0;i<countDetails.length;i++){\r",
									"        pm.expect(countDetails[i].Target).to.eql(detailsResponse.target_accountId);\r",
									"        pm.expect(countDetails[i].DeveloperMessage).to.eql(detailsResponse.developerMessage_accountId);\r",
									"    }\r",
									"});\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// RemovePartner\r",
									" RemovePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemovePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemovePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemovePartner = {\r",
									"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemovePartner,\r",
									"            body: httpRequestRemovePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request RemovePartner');\r",
									"        let response = await reqPromise(optionsRemovePartner);\r",
									"        let jsonDataRemovePartner = await response.json();\r",
									"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
									"    \r",
									"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemovePartner is Success\r",
									"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveAccount\r",
									" RemoveAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemoveAccount = {\r",
									"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveAccount,\r",
									"            body: httpRequestRemoveAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveAccount');\r",
									"        let response = await reqPromise(optionsRemoveAccount);\r",
									"        let jsonDataRemoveAccount = await response.json();\r",
									"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
									"    \r",
									"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveAccount is Success\r",
									"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThing\r",
									" RemoveThing = async () =>  {\r",
									"    try {\r",
									"\r",
									"        // header\r",
									"        let headersOptRemoveThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        let dataThingIDArray = JSON.parse(pm.environment.get(\"GetResponse_ThingIDArr\"));\r",
									"        for(let i=0;i<dataThingIDArray.length;i++){\r",
									"\r",
									"            // body\r",
									"            let httpRequestRemoveThing = {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                    \"ThingId\": dataThingIDArray[i]\r",
									"                })\r",
									"            };\r",
									"\r",
									"            let optionsRemoveThing = {\r",
									"                url: url + provisioningapis + urlThingRemoveThing,\r",
									"                method: 'DELETE',\r",
									"                header: headersOptRemoveThing,\r",
									"                body: httpRequestRemoveThing\r",
									"            };\r",
									"            // console.log('request RemoveThing');\r",
									"            let response = await reqPromise(optionsRemoveThing);\r",
									"            let jsonDataRemoveThing = await response.json();\r",
									"            // console.log('jsonDataRemoveThing',jsonDataRemoveThing)\r",
									"        \r",
									"            let operationStatusRemoveThing = await jsonDataRemoveThing.OperationStatus;\r",
									"\r",
									"            //200\r",
									"            pm.test(\"RemoveThing\" + [i+1]+ \" : Status code is \" + statusCodeSuccess, function () {\r",
									"                pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"            });\r",
									"            //20000\r",
									"            pm.test('RemoveThing' + [i+1]+ ' : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"                pm.expect(operationStatusRemoveThing).to.have.property('Code', resultCodeSuccess);\r",
									"            });\r",
									"            //RemoveThing is Success\r",
									"            pm.test('RemoveThing' + [i+1]+ ' : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThing+'\"', function () {\r",
									"                pm.expect(operationStatusRemoveThing).to.have.property('Description', resultDescriptionRemoveThing);\r",
									"            });\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThingStateInfo\r",
									" RemoveThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"            \r",
									"        };\r",
									"\r",
									"        let dataThingIDArray = JSON.parse(pm.environment.get(\"GetResponse_ThingIDArr\"));\r",
									"\r",
									"        for(let i=0;i<countData;i++){\r",
									"        \r",
									"            // body\r",
									"            let httpRequestRemoveThingStateInfo = {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                    \"ThingId\": dataThingIDArray[i],\r",
									"                    \"stateType\": fieldDataValue.CreateThingStateInfo.Type_Report, //Report\r",
									"                    \"stateKey\": fieldDataValue.CreateThingStateInfo.SensorKey //Temp\r",
									"                })\r",
									"            };\r",
									"\r",
									"            let optionsRemoveThingStateInfo = {\r",
									"                url: url + provisioningapis + urlThingRemoveThingStateInfo,\r",
									"                method: 'DELETE',\r",
									"                header: headersOptRemoveThingStateInfo,\r",
									"                body: httpRequestRemoveThingStateInfo\r",
									"            };\r",
									"\r",
									"            // console.log('response RemoveThingStateInfo');\r",
									"            let response = await reqPromise(optionsRemoveThingStateInfo);\r",
									"            let jsonDataRemoveThingStateInfo = await response.json();\r",
									"            // console.log('jsonDataRemoveThing',jsonDataRemoveThingStateInfo)\r",
									"        \r",
									"            let operationStatusRemoveThingStateInfo = await jsonDataRemoveThingStateInfo.OperationStatus;\r",
									"\r",
									"            //200\r",
									"            pm.test(\"RemoveThingStateInfo\" + [i+1]+ \" : Status code is \" + statusCodeSuccess, function () {\r",
									"                pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"            });\r",
									"            //20000\r",
									"            pm.test('RemoveThingStateInfo' + [i+1]+ ' : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"                pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"            });\r",
									"            //RemoveThingStateInfo is Success\r",
									"            pm.test('RemoveThingStateInfo' + [i+1]+ ' : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThingStateInfo+'\"', function () {\r",
									"                pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Description', resultDescriptionRemoveThingStateInfo);\r",
									"            });\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"//---------------- LogDefaultValue --------------//\r",
									"//set variable to LogDefaultValue JSON.parse\r",
									"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
									"// console.log('LogDefaultValue',LogDefaultValue);\r",
									"//---------------- set globals Other --------------//\r",
									"var SearchLog = LogDefaultValue.SearchLog;\r",
									"// console.log('SearchLog',SearchLog);\r",
									"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
									"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
									"var kbn_version = SearchLog.header.kbn_version;\r",
									"var authorization = SearchLog.header.Authorization;\r",
									"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
									"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
									"var namespace = LogDefaultValue.Other.namespace_control4mg;\r",
									"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
									"var header_x_ais_accountkey = LogDefaultValue.Other.header_x_ais_accountkey;\r",
									"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
									"var methodPost = LogDefaultValue.Other.methodPost;\r",
									"\r",
									"// Detail\r",
									"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
									"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
									"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
									"\r",
									"// Summary\r",
									"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
									"// ControlAPIs\r",
									"var applicationName = LogDefaultValue.Control.applicationName_mg4;\r",
									"var cmdName = LogDefaultValue.Control.cmdNameThings;\r",
									"var endPointNameControlAPIs = LogDefaultValue.Control.endPointNameControlAPIs;\r",
									"var endPointNameDesireEx = LogDefaultValue.Control.endPointNameDesireEx;\r",
									"var containerId = LogDefaultValue.Control.containerId;\r",
									"var requestObjectUrlStaging = LogDefaultValue.Control.requestObjectUrlStagingThings;\r",
									"var xProtocolControl = LogDefaultValue.Control.xProtocolControl;\r",
									"var responseObjectPublished = LogDefaultValue.Control.responseObjectPublished;\r",
									"\r",
									"// Check CDR (Summary Log) and EDR (Detail Log)\r",
									"SearchLogFindTid = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSearchLogFindTid = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = x_ais_OrderRef_ControlThings_fail +  current_timestamp; \r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestSearchLogFindTid = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"\r",
									"        let optionsSearchLogFindTid = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptSearchLogFindTid,\r",
									"            body: httpRequestSearchLogFindTid\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsSearchLogFindTid);\r",
									"        let jsonDataSearchLogFindTid = await response.json();\r",
									"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
									"        console.log('hits',hits)\r",
									"  \r",
									"        // find tid\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            // let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"        \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            if(applicationNameValue == applicationName){\r",
									"                // let tid = hits[i]._source.cauldron.tid;\r",
									"                // pm.environment.set(\"tid\", tid);\r",
									"                let sessionId = hits[i]._source.cauldron.sessionId;\r",
									"                pm.environment.set(\"sessionId\", sessionId);\r",
									"                break;\r",
									"           }\r",
									"        }\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"CheckLog = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCheckLog = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = pm.environment.get(\"sessionId\");\r",
									"\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestCheckLog = {\r",
									"            mode: 'raw',\r",
									"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"        let optionsCheckLog = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptCheckLog,\r",
									"            body: httpRequestCheckLog\r",
									"        }; \r",
									"        let response = await reqPromise(optionsCheckLog);\r",
									"        let jsonDataCheckLog = await response.json();\r",
									"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
									"        \r",
									"        // //200\r",
									"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });     \r",
									"        \r",
									"        let hits = jsonDataCheckLog.hits.hits\r",
									"        console.log('hits',hits)\r",
									"  \r",
									"        // find logType\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            //  let logType = hits[i]._source.cauldron.logType\r",
									"            let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"           \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            \r",
									"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
									"            // console.log('resultDataLog',resultDataLog)\r",
									"\r",
									"            let tidControl = x_ais_OrderRef_ControlThings_fail + current_timestamp;\r",
									"            // console.log(tidControl);\r",
									"            if(applicationNameValue == applicationName){\r",
									"                 \r",
									"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ControlAPIs\r",
									"                    pm.test(\"Check Summary Log : ControlThings\" , function () {\r",
									"                        console.log(\"======== Check Summary Log ( Expected = Actual) [ControlThings] ==================\");\r",
									"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
									"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
									"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeForbiddenMissingOrInvalidParameter);\r",
									"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionTheClientDataIsMissingOrInvalidParameter);\r",
									"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
									"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        // console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
									"                        // console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
									"\r",
									"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
									"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
									"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeForbiddenMissingOrInvalidParameter ); \r",
									"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionTheClientDataIsMissingOrInvalidParameter); \r",
									"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
									"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"\r",
									"                        let thingId = JSON.parse(pm.environment.get(\"GetResponse_ThingIDArr\"));\r",
									"                        let customUrl= urlCheckLog + requestObjectUrlStaging;\r",
									"                        let customAccountkey = null //pm.environment.get(\"GetResponse_AccountId\");\r",
									"\r",
									"                        // check identity\r",
									"                        // \"identity\":\"{\\\"ThingID\\\":[\\\"6012886b96d0ed0001f551ad\\\",\\\"6012886b96d0ed0001f551b5\\\"]}\"\r",
									"                        let dataSummaryIdentity = JSON.parse(resultDataLog.identity);\r",
									"\r",
									"                        console.log(\"identity.ThingID : \" + dataSummaryIdentity.ThingID + \" = \" + thingId);\r",
									"                        pm.expect(dataSummaryIdentity.ThingID).to.eql(thingId); \r",
									"\r",
									"                        // check custom\r",
									"                        // \\\"custom\\\":{ \\\"customData\\\":{ \\\"url\\\":\\\"mg-iot.sandais.com/api/v1/Control/Things\\\", \\\"accountkey\\\":null, \\\"ThingID\\\":[ \\\"60996fba26fdbc0001c37e9a\\\", \\\"60996fba26fdbc0001c37ea4\\\" ] }, \\\"endPointSummary\\\":[ ] }\r",
									"\r",
									"                        let customData = resultDataLog.custom.customData;\r",
									"\r",
									"                        console.log(\"custom.url : \" + customData.url + \" = \" + customUrl);\r",
									"                        console.log(\"custom.accountkey : \" + customData.accountkey + \" = \" + customAccountkey);\r",
									"                        console.log(\"custom.ThingID : [\" + customData.ThingID + \"] = [\" + thingId + \"]\");\r",
									"\r",
									"                        pm.expect(customData.url).to.eql(customUrl); \r",
									"                        pm.expect(customData.accountkey).to.eql(customAccountkey); \r",
									"                        pm.expect(customData.ThingID).to.eql(thingId); \r",
									"\r",
									"                        let custom = resultDataLog.custom.endPointSummary;\r",
									"\r",
									"                        console.log(\"custom.endPointSummary : \" + JSON.stringify(custom) + \" = \" + JSON.stringify([]));\r",
									"                        pm.expect(custom).to.eql([]); \r",
									"                    }); \r",
									"                }\r",
									"\r",
									"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail'\r",
									"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
									"                    // console.log('endPointNameValue ',endPointNameValue)\r",
									"\r",
									"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [ControlThings]\", function () {\r",
									"                        console.log(\"======== Check Detail Log ( Expected = Actual) [ControlThings] ==================\");\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
									"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
									"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
									"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
									"\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
									"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
									"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
									"                        // pm.expect(resultDataLog.EndPoint).to.eql(); \r",
									"                        \r",
									"                        // check requestObject\r",
									"                        // \"requestObject\":\"{\\\"headers\\\":{\\\"x-ais-orderref\\\":\\\"ControlThingsfail_202101281301827\\\",\\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAEL8HZk2RWAR3L0/hOZPjC5nvaeNw1EUMpcFyr//lMVTkIlAkkY2KW0\\\"},\\\"body\\\":{\\\"ThingId\\\":[\\\"6012886b96d0ed0001f551ad\\\",\\\"6012886b96d0ed0001f551b5\\\"],\\\"Sensors\\\":{\\\"Temp\\\":925}}}\"\r",
									"\r",
									"                        // \\\"requestObject\\\":\\\"{ \\\\\\\"url\\\\\\\":\\\\\\\"/api/v1/Control/Things\\\\\\\", \\\\\\\"method\\\\\\\":\\\\\\\"POST\\\\\\\", \\\\\\\"headers\\\\\\\":{ \\\\\\\"Cache-Control\\\\\\\":\\\\\\\"no-cache\\\\\\\", \\\\\\\"Content-Type\\\\\\\":\\\\\\\"application/json\\\\\\\", \\\\\\\"Accept\\\\\\\":\\\\\\\"*/*\\\\\\\", \\\\\\\"Accept-Encoding\\\\\\\":\\\\\\\"gzip, deflate, br\\\\\\\", \\\\\\\"Host\\\\\\\":\\\\\\\"mg-iot.sandais.com\\\\\\\", \\\\\\\"User-Agent\\\\\\\":\\\\\\\"PostmanRuntime/7.26.8\\\\\\\", \\\\\\\"Content-Length\\\\\\\":\\\\\\\"113\\\\\\\", \\\\\\\"x-real-ip\\\\\\\":\\\\\\\"182.232.34.151\\\\\\\", \\\\\\\"x-forwarded-for\\\\\\\":\\\\\\\"182.232.34.151, 10.233.68.0\\\\\\\", \\\\\\\"x-forwarded-proto\\\\\\\":\\\\\\\"http\\\\\\\", \\\\\\\"x-ais-orderref\\\\\\\":\\\\\\\"ControlThingsfail_202105110005560\\\\\\\", \\\\\\\"x-ais-accesstoken\\\\\\\":\\\\\\\"Bearer ibnxnVhs5Rx3IwglWv7/gVA/1TpQnKqAOBAADlRDvYhOpXwmlpYOEb5yfY5aZpoj0YRWRZM26i9HOqtc1fc1jpNDOK5JpISttmMEy59g2py7nLWonDe2YW2OPRGWSowk6+9ZihLU1fZ5d5jAqqrZaKlOAAI3N1TXDNLsHuKcOJMcERbCcaMqRaku+MY4/kzE+eyIdkfwwbjT91S2VQq+Wk2ooMWuLk6/DHVJhwbMP7ZkiNuA6pNwDXquI88fKxODqicScoOyi51KVegMrc8SMg==\\\\\\\", \\\\\\\"postman-token\\\\\\\":\\\\\\\"7ed6ed2d-c8e9-48f5-a8fc-283b9ae0d204\\\\\\\", \\\\\\\"x-envoy-external-address\\\\\\\":\\\\\\\"10.233.68.0\\\\\\\", \\\\\\\"x-request-id\\\\\\\":\\\\\\\"f86a10f0-a83d-4c73-a304-22a69d9fb7d6\\\\\\\", \\\\\\\"x-envoy-original-path\\\\\\\":\\\\\\\"/mg4controlapis/api/v1/Control/Things\\\\\\\", \\\\\\\"x-b3-traceid\\\\\\\":\\\\\\\"a9836c8aaf7b4be29bb2fd67995d25ab\\\\\\\", \\\\\\\"x-b3-spanid\\\\\\\":\\\\\\\"7c0355d39a342714\\\\\\\", \\\\\\\"x-b3-parentspanid\\\\\\\":\\\\\\\"9bb2fd67995d25ab\\\\\\\", \\\\\\\"x-b3-sampled\\\\\\\":\\\\\\\"0\\\\\\\", \\\\\\\"x-ais-SessionId\\\\\\\":\\\\\\\"1620668348089\\\\\\\", \\\\\\\"identity\\\\\\\":\\\\\\\"{ \\\\\\\\\\\\\\\"ThingID\\\\\\\\\\\\\\\":[ \\\\\\\\\\\\\\\"60996fba26fdbc0001c37e9a\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"60996fba26fdbc0001c37ea4\\\\\\\\\\\\\\\" ] }\\\\\\\", \\\\\\\"custom\\\\\\\":\\\\\\\"{ \\\\\\\\\\\\\\\"url\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"mg-iot.sandais.com/api/v1/Control/Things\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"accountkey\\\\\\\\\\\\\\\":null, \\\\\\\\\\\\\\\"ThingID\\\\\\\\\\\\\\\":[ \\\\\\\\\\\\\\\"60996fba26fdbc0001c37e9a\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"60996fba26fdbc0001c37ea4\\\\\\\\\\\\\\\" ] }\\\\\\\" }, \\\\\\\"queryString\\\\\\\":{ }, \\\\\\\"routeParamteters\\\\\\\":{ }, \\\\\\\"body\\\\\\\":{ \\\\\\\"ThingId\\\\\\\":[ \\\\\\\"60996fba26fdbc0001c37e9a\\\\\\\", \\\\\\\"60996fba26fdbc0001c37ea4\\\\\\\" ], \\\\\\\"Sensors\\\\\\\":{ \\\\\\\"Temp\\\\\\\":957 } } }\\\"\r",
									"\r",
									"                        let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
									"                        // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
									"\r",
									"                        let url = requestObjectUrlStaging; \r",
									"                        let urlCustom = urlCheckLog + requestObjectUrlStaging; \r",
									"                        let SensorKey = fieldDataValue.CreateThingStateInfo.SensorKey;\r",
									"                        let sensor = pm.environment.get(\"random_Sensor_Control\");\r",
									"                        let x_ais_orderref = x_ais_OrderRef_ControlThings_fail + current_timestamp;\r",
									"                        // let x_ais_AccountKey = pm.environment.get(\"GetResponse_AccountId\");\r",
									"                        let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken\");\r",
									"                        let thingId = JSON.parse(pm.environment.get(\"GetResponse_ThingIDArr\"));\r",
									"\r",
									"                        console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
									"                        console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
									"                        // console.log(\"headers.x_ais_AccountKey : \" + jsonParseRequestObject.headers[header_x_ais_accountkey] + \" = \" + x_ais_AccountKey);\r",
									"                        console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"                        console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
									"\r",
									"                        pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
									"                        pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
									"                        // pm.expect(jsonParseRequestObject.headers[header_x_ais_accountkey]).to.eql(x_ais_AccountKey);\r",
									"                        pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                        pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
									"\r",
									"                        let identity = JSON.parse(jsonParseRequestObject.headers.identity)\r",
									"                        console.log(\"headers.identity.ThingID : [\" + identity.ThingID + \"] = [\" + thingId + \"]\");\r",
									"                        pm.expect(identity.ThingID).to.eql(thingId);\r",
									"                        \r",
									"                        let custom = JSON.parse(jsonParseRequestObject.headers.custom)\r",
									"                        console.log(\"headers.custom.url : \" + custom.url + \" = \" + urlCustom);\r",
									"                        console.log(\"headers.custom.accountkey : \" + custom.accountkey + \" = \" + null);\r",
									"                        console.log(\"headers.custom.ThingID : [\" + custom.ThingID + \"] = [\" + thingId + \"]\");\r",
									"                        \r",
									"                        pm.expect(custom.url).to.eql(urlCustom);\r",
									"                        pm.expect(custom.accountkey).to.eql(null);\r",
									"                        pm.expect(custom.ThingID).to.eql(thingId);\r",
									"\r",
									"                        console.log(\"queryString : \" + JSON.stringify(jsonParseRequestObject.queryString) + \" = \" + JSON.stringify({}));\r",
									"                        pm.expect(jsonParseRequestObject.queryString).to.eql({});\r",
									"\r",
									"                        console.log(\"routeParamteters : \" + JSON.stringify(jsonParseRequestObject.routeParamteters) + \" = \" + JSON.stringify({}));\r",
									"                        pm.expect(jsonParseRequestObject.routeParamteters).to.eql({});\r",
									"\r",
									"                        console.log(\"resquest.body.ThingId : [\" + jsonParseRequestObject.body.ThingId + \"] = [\" + thingId + \"]\");\r",
									"                        console.log(\"resquest.body.Sensors.\" + SensorKey + \"  : \" + jsonParseRequestObject.body.Sensors[SensorKey] + \" = \" + sensor);\r",
									"\r",
									"                        pm.expect(jsonParseRequestObject.body.ThingId).to.eql(thingId);\r",
									"                        pm.expect(jsonParseRequestObject.body.Sensors[SensorKey]).to.eql(sensor);\r",
									"\r",
									"                        // check responseObject\r",
									"                        // \\\"responseObject\\\":\\\"{ \\\\\\\"OperationStatus\\\\\\\":{ \\\\\\\"Code\\\\\\\":\\\\\\\"40300\\\\\\\", \\\\\\\"DeveloperMessage\\\\\\\":\\\\\\\"The Client Data is Missing Or Invalid Parameter\\\\\\\", \\\\\\\"Details\\\\\\\":[ { \\\\\\\"Target\\\\\\\":\\\\\\\"accountId\\\\\\\", \\\\\\\"DeveloperMessage\\\\\\\":\\\\\\\"The accountId data is missing or invalid parameter.\\\\\\\" } ] } }\\\"\r",
									"                        let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
									"                        // console.log('jsonParseResponseObject',jsonParseResponseObject);\r",
									"\r",
									"                        console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeForbiddenMissingOrInvalidParameter);\r",
									"                        console.log(\"response.OperationStatus.DeveloperMessage : \" + jsonParseResponseObject.OperationStatus.DeveloperMessage + \" = \" + resultDescriptionTheClientDataIsMissingOrInvalidParameter);\r",
									"\r",
									"                        pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeForbiddenMissingOrInvalidParameter);  \r",
									"                        pm.expect(jsonParseResponseObject.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheClientDataIsMissingOrInvalidParameter);  \r",
									"\r",
									"                        let countDetails= jsonParseResponseObject.OperationStatus.Details;\r",
									"                        for(let i=0;i<countDetails.length;i++){\r",
									"\r",
									"                            console.log(\"response.OperationStatus.Details[\"+ i +\"].Target : \" + countDetails[i].Target + \" = \" + detailsResponse.target_accountId);\r",
									"                            console.log(\"response.OperationStatus.Details[\"+ i +\"].DeveloperMessage : \" + countDetails[i].DeveloperMessage + \" = \" + detailsResponse.developerMessage_accountId);\r",
									"\r",
									"                            pm.expect(countDetails[i].Target).to.eql(detailsResponse.target_accountId);\r",
									"                            pm.expect(countDetails[i].DeveloperMessage).to.eql(detailsResponse.developerMessage_accountId);\r",
									"                        } \r",
									"                    }); \r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"setTimeout(function(){SearchLogFindTid();}, 20000); \r",
									"setTimeout(function(){CheckLog();}, 30000); \r",
									"\r",
									"setTimeout(function(){RemoveThingStateInfo();}, 40000); \r",
									"setTimeout(function(){RemoveThing();}, 45000); \r",
									"setTimeout(function(){RemoveAccount();}, 50000); \r",
									"setTimeout(function(){RemovePartner();}, 55000); \r",
									"\r",
									"setTimeout(function(){\r",
									"pm.environment.unset(\"current_timestamp\");\r",
									"pm.environment.unset(\"AccessToken\");\r",
									"pm.environment.unset(\"random_number\");\r",
									"pm.environment.unset(\"PartnerName\");\r",
									"pm.environment.unset(\"MerchantContact\");\r",
									"pm.environment.unset(\"CPID\");\r",
									"pm.environment.unset(\"GetResponse_PartnerId\");\r",
									"pm.environment.unset(\"AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountId\");\r",
									"for(let i=0;i<countData;i++){\r",
									"pm.environment.unset(\"random_IM\"+[i+1]);\r",
									"pm.environment.unset(\"random_ICCID\"+[i+1]);\r",
									"pm.environment.unset(\"ThingName\"+[i+1]);\r",
									"}\r",
									"pm.environment.unset(\"GetResponse_ThingIDArr\");\r",
									"pm.environment.unset(\"random_Sensor\");\r",
									"pm.environment.unset(\"tid\");\r",
									"pm.environment.unset(\"sessionId\");\r",
									"pm.environment.unset(\"SensorKey\");\r",
									"pm.environment.unset(\"random_Sensor_Control\");\r",
									"}, 90000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var Username = pm.environment.get(\"Username\");\r",
									"var Password = pm.environment.get(\"Password\");\r",
									"\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//count for loop data\r",
									"var countData = 2;\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"pm.environment.set(\"SensorKey\",fieldDataValue.CreateThingStateInfo.SensorKey)\r",
									"\r",
									"//format YYYYMMDDHHMMSSS\r",
									"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
									"// console.log('currentTmestamp',currentTmestamp);\r",
									"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var x_ais_UserName_AisPartner = pm.environment.get(\"x_ais_UserName_AisPartner\");\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.environment.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- statusCodeList --------------//\r",
									"//set variable to statusCodeList JSON.parse\r",
									"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
									"//set global variable to statusCode 200\r",
									"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
									"//set global variable to statusCode 201\r",
									"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
									"//set global variable to statusCode 403\r",
									"pm.globals.set(\"statusCodeForbidden\", statusCodeList.statusCodeForbidden);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultCodeList --------------//\r",
									"//set variable to resultCodeList JSON.parse\r",
									"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
									"//set global variable to resultCode \"20000\"\r",
									"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
									"//set global variable to resultCode \"20100\"\r",
									"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
									"//set global variable to resultCode \"40300\"\r",
									"pm.globals.set(\"resultCodeForbiddenMissingOrInvalidParameter\", resultCodeList.resultCodeForbiddenMissingOrInvalidParameter);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionSuccessList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
									"//set global variable to resultDescription \"SignInProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
									"//set global variable to resultDescription \"CreatePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
									"//set global variable to resultDescription \"CreateAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
									"//set global variable to resultDescription \"CreateThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThing\", resultDescriptionSuccessList.resultDescriptionCreateThing);\r",
									"//set global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThingStateInfo\", resultDescriptionSuccessList.resultDescriptionCreateThingStateInfo);\r",
									"//set global variable to resultDescription \"RemovePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
									"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
									"//set global variable to resultDescription \"RemoveThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThing\", resultDescriptionSuccessList.resultDescriptionRemoveThing);\r",
									"//set global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThingStateInfo\", resultDescriptionSuccessList.resultDescriptionRemoveThingStateInfo);\r",
									"//set global variable to resultDescription \"Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccess\", resultDescriptionSuccessList.resultDescriptionSuccess);\r",
									"//set global variable to resultDescription \"Created Success\"\r",
									"pm.globals.set(\"resultDescriptionCreatedSuccess\", resultDescriptionSuccessList.resultDescriptionCreatedSuccess);\r",
									"//set global variable to resultDescription \"ControlManyThings is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessControlManyThings\", resultDescriptionSuccessList.resultDescriptionSuccessControlManyThings);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionErrorList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
									"//set global variable to resultDescription \"The Parameter x-ais-AccountKey is Missing Or Invalid\"\r",
									"// pm.globals.set(\"resultDescriptionErrorParameterXAisAccountKeyMissingOrInvalid\", resultDescriptionErrorList.resultDescriptionErrorParameterXAisAccountKeyMissingOrInvalid);\r",
									"//set global variable to resultDescription \"The Client Data is Missing Or Invalid Parameter\"\r",
									"pm.globals.set(\"resultDescriptionTheClientDataIsMissingOrInvalidParameter\", resultDescriptionErrorList.resultDescriptionTheClientDataIsMissingOrInvalidParameter);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- HeaderList --------------//\r",
									"//set variable to HeaderList JSON.parse\r",
									"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
									"//---------------- set globals Other --------------//\r",
									"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
									"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
									"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
									"//set global variable to kbn-versio \"7.5.1\"\r",
									"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Signin_ --------------//\r",
									"//set global variable to x_ais_OrderRef \"Signin_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreatePartner --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
									"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
									"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
									"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreateAccount --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
									"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
									"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Thing --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThing\", HeaderList.Thing.x_ais_OrderRef_CreateThing);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThing\", HeaderList.Thing.x_ais_OrderDesc_CreateThing);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThing\", HeaderList.Thing.x_ais_OrderRef_RemoveThing);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThing\", HeaderList.Thing.x_ais_OrderDesc_RemoveThing);\r",
									"//set global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_RemoveThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_RemoveThingStateInfo);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Control --------------//\r",
									"//set global variable to x_ais_OrderRef \"ControlThings_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ControlThings\", HeaderList.Control.x_ais_OrderRef_ControlThings);\r",
									"//set global variable to x_ais_OrderRef \"ControlThingsfail_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ControlThings_fail\", HeaderList.Control.x_ais_OrderRef_ControlThings_fail);\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"SignInProcess is Success\"\r",
									"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
									"//get global variable to resultDescription \"CreatePartner is Success\"\r",
									"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
									"//get global variable to resultDescription \"CreateAccount is Success\"\r",
									"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
									"//get global variable to resultDescription \"CreateThing is Success\"\r",
									"var resultDescriptionCreateThing = pm.globals.get(\"resultDescriptionCreateThing\");\r",
									"//get global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"var resultDescriptionCreateThingStateInfo = pm.globals.get(\"resultDescriptionCreateThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- urlRouteList --------------//\r",
									"//set variable to urlRouteList JSON.parse\r",
									"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
									"//---------------- set url Create --------------//\r",
									"//set global variable to url \"/api/v1/auth/signin\"\r",
									"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
									"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
									"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"pm.globals.set(\"urlThingCreateThing\", urlRouteList.Thing.urlThingCreateThing);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"pm.globals.set(\"urlThingCreateThingStateInfo\", urlRouteList.Thing.urlThingCreateThingStateInfo);\r",
									"//---------------- get url Create --------------//\r",
									"//get global variable to url \"/api/v1/auth/signin\"\r",
									"var urlSignin = pm.globals.get(\"urlSignin\");\r",
									"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
									"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"var urlThingCreateThing = pm.globals.get(\"urlThingCreateThing\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"var urlThingCreateThingStateInfo = pm.globals.get(\"urlThingCreateThingStateInfo\");\r",
									"//---------------- set url Remove --------------//\r",
									"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
									"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"pm.globals.set(\"urlThingRemoveThing\", urlRouteList.Thing.urlThingRemoveThing);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"pm.globals.set(\"urlThingRemoveThingStateInfo\", urlRouteList.Thing.urlThingRemoveThingStateInfo);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Signin_ --------------//\r",
									"//get global variable to x_ais_OrderRef \"Signin_\"\r",
									"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"var x_ais_OrderRef_CreateThing = pm.globals.get(\"x_ais_OrderRef_CreateThing\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"var x_ais_OrderDesc_CreateThing = pm.globals.get(\"x_ais_OrderDesc_CreateThing\");\r",
									"//get global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"var x_ais_OrderRef_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderRef_CreateThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"var x_ais_OrderDesc_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_CreateThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            // console.log('response111',response);\r",
									"            // console.log('errerrerr',err);\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// Signin get token\r",
									" Signin = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSignin = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestSignin = {\r",
									"            mode: 'raw',\r",
									"            raw: \r",
									"            JSON.stringify({\r",
									"                username:Username,\r",
									"                password:Password\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsSignin = {\r",
									"            url: url + provisioningapis + urlSignin,\r",
									"            method: 'POST',\r",
									"            header: headersOptSignin,\r",
									"            body: httpRequestSignin\r",
									"        };\r",
									"        // console.log('request Signin');\r",
									"        let response = await reqPromise(optionsSignin);\r",
									"        let jsonDataSignin = await response.json();\r",
									"\r",
									"        // setAccessToken\r",
									"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
									"\r",
									"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // SignInProcess is Success\r",
									"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
									"        });\r",
									"\r",
									"        //set random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //set PartnerName\r",
									"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
									"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
									"        //set MerchantContact\r",
									"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
									"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
									"        // set CPID\r",
									"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
									"        pm.environment.set(\"CPID\", CPIDValue)\r",
									"        \r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreatePartner\r",
									" CreatePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreatePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreatePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
									"                \"PartnerType\": [\r",
									"                    \"Supplier\",\r",
									"                    \"Customer\"\r",
									"                ],\r",
									"                \"PartnerDetail\": {\r",
									"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
									"                    \"CPID\": pm.environment.get(\"CPID\")\r",
									"                },\r",
									"                \"Property\": {\r",
									"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsCreatePartner = {\r",
									"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreatePartner,\r",
									"            body: httpRequestCreatePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsCreatePartner);\r",
									"        let jsonDataCreatePartner = await response.json();\r",
									"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
									"    \r",
									"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreatePartner is Success\r",
									"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
									"        });\r",
									"\r",
									"        //GetResponse_PartnerId\r",
									"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
									"\r",
									"        //Accountname\r",
									"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
									"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateAccount\r",
									" CreateAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreateAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
									"                })\r",
									"        };\r",
									"        \r",
									"        let optionsCreateAccount = {\r",
									"            url: url + provisioningapis + urlAccountCreateAccount,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateAccount,\r",
									"            body: httpRequestCreateAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateAccount');\r",
									"        let response = await reqPromise(optionsCreateAccount);\r",
									"        let jsonDataCreateAccount = await response.json();\r",
									"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
									"    \r",
									"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateAccount : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateAccount is Success\r",
									"        pm.test('CreateAccount : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
									"        });\r",
									"        // GetResponse_AccountName\r",
									"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
									"        // GetResponse_AccountId\r",
									"        pm.environment.set(\"GetResponse_AccountId\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
									"       \r",
									"        // // random_IM\r",
									"        // pm.environment.set(\"random_IM\", _.random(10000000, 99999999)+\" \"+_.random(1000000, 9999999))\r",
									"        // // random_ICCID\r",
									"        // pm.environment.set(\"random_ICCID\", _.random(1000000, 9999999)+\" \"+_.random(100000, 999999))\r",
									"        // // random_number\r",
									"        // pm.environment.set(\"random_number\",pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        // //ThingName\r",
									"        // let thingNameValue = fieldDataValue.Thing.ThingNameValue; // \"Sensor_TestThingName\"\r",
									"        // pm.environment.set(\"ThingName\", thingNameValue + pm.environment.get(\"random_number\"))\r",
									"\r",
									"        // random_number\r",
									"        pm.environment.set(\"random_number\",pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"\r",
									"        for(let i=0;i<countData;i++){\r",
									"            // random_IM\r",
									"            pm.environment.set(\"random_IM\"+[i+1], _.random(10000000, 99999999)+\" \"+_.random(1000000, 9999999))\r",
									"            // random_ICCID\r",
									"            pm.environment.set(\"random_ICCID\"+[i+1], _.random(1000000, 9999999)+\" \"+_.random(100000, 999999))\r",
									"\r",
									"            //ThingName\r",
									"            let thingNameValue = fieldDataValue.Thing.ThingNameValue; // \"Sensor_TestThingName\"\r",
									"            pm.environment.set(\"ThingName\"+[i+1],thingNameValue + [i+1] + pm.environment.get(\"random_number\"))\r",
									"        }\r",
									"            \r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThing\r",
									" CreateThingArr = async () =>  {\r",
									"    try {\r",
									"        \r",
									"        // header\r",
									"        let headersOptCreateThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThing');\r",
									"        let dataThingIdArr = [];\r",
									"        for(let i=0;i<countData;i++){\r",
									"            // body\r",
									"            let httpRequestCreateThing = {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                    \"ThingName\": pm.environment.get(\"ThingName\"+ [i+1]),\r",
									"                    \"IMEI\": pm.environment.get(\"random_IM\"+ [i+1]),\r",
									"                    \"IMSI\": pm.environment.get(\"random_IM\"+ [i+1]),\r",
									"                    \"ICCID\": pm.environment.get(\"random_ICCID\"+ [i+1]),\r",
									"                    \"RouteUrl\": fieldDataValue.Thing.RouteUrlValue , //[\"http://10.12.3.4:2019/api/information/AddInformation\"]\r",
									"                    \"RouteInfo\": {\r",
									"                        \"MIMO_ID\": fieldDataValue.Thing.RouteInfoMIMOIDValue , //\"606edada\"\r",
									"                        \"MIMO_SerialNo\": fieldDataValue.Thing.RouteInfoMIMOSerialNoValue //5466758878\r",
									"                    },\r",
									"                    \"RouteFlag\": {\r",
									"                        \"ThingName\": fieldDataValue.Thing.RouteFlagThingNameValue , //true\r",
									"                        \"ThingToken\": fieldDataValue.Thing.RouteFlagThingTokenValue, //true\r",
									"                        \"IMEI\": fieldDataValue.Thing.RouteFlagIMEIValue, //true\r",
									"                        \"ICCID\": fieldDataValue.Thing.RouteFlagICCIDValue, //true\r",
									"                        \"RouteInfo\": fieldDataValue.Thing.RouteFlagRouteInfoValue //true\r",
									"                    }\r",
									"                })\r",
									"            };\r",
									"            \r",
									"            let optionsCreateThing = {\r",
									"                url: url + provisioningapis + urlThingCreateThing,\r",
									"                method: 'POST',\r",
									"                header: headersOptCreateThing,\r",
									"                body: httpRequestCreateThing\r",
									"            };\r",
									"            let response = await reqPromise(optionsCreateThing);\r",
									"            let jsonDataCreateThing = await response.json();\r",
									"            let ThingId = await jsonDataCreateThing.ThingInfo.ThingId;\r",
									"            dataThingIdArr.push(ThingId);\r",
									"            let operationStatusCreateThing = await jsonDataCreateThing.OperationStatus;\r",
									"\r",
									"            //201\r",
									"            pm.test(\"CreateThing\"+ [i+1]+ \" : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"                pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"            });\r",
									"            //20100\r",
									"            pm.test('CreateThing'+ [i+1]+ ' : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"                pm.expect(operationStatusCreateThing).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"            });\r",
									"            //CreateThing is Success\r",
									"            pm.test('CreateThing'+ [i+1]+ ' : OperationStatus Description is '+'\"'+ resultDescriptionCreateThing+'\"', function () {\r",
									"                pm.expect(operationStatusCreateThing).to.have.property('Description', resultDescriptionCreateThing);\r",
									"            });\r",
									"        }\r",
									"        \r",
									"        // console.log('dataThingIdArr',dataThingIdArr);\r",
									"        // pm.environment.set(\"GetResponse_ThingID\",jsonDataCreateThing.ThingInfo.ThingId)\r",
									"        pm.environment.set(\"GetResponse_ThingIDArr\",JSON.stringify(dataThingIdArr))\r",
									"        \r",
									"        \r",
									"        //Get Random Sensor \r",
									"        pm.environment.set(\"random_Sensor\", _.random(100, 999))\r",
									"\r",
									"        //Get Random Sensor Control\r",
									"        pm.environment.set(\"random_Sensor_Control\", _.random(100, 999))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThingStateInfo\r",
									" CreateThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let dataThingIDArray = JSON.parse(pm.environment.get(\"GetResponse_ThingIDArr\"));\r",
									"        // console.log('dataThingIDArray',dataThingIDArray);\r",
									"\r",
									"        // {\"Temp\" : pm.environment.get(\"random_Sensor\")}\r",
									"        let sensorValue = {};\r",
									"        sensorValue[fieldDataValue.CreateThingStateInfo.SensorKey] = pm.environment.get(\"random_Sensor\");\r",
									"        // console.log('sensorValue',sensorValue);\r",
									"        \r",
									"        let httpRequestCreateThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": \r",
									"                    dataThingIDArray\r",
									"                ,\r",
									"                \"Type\": fieldDataValue.CreateThingStateInfo.Type_Report,\r",
									"                \"Sensor\": sensorValue\r",
									"            })\r",
									"        };\r",
									"        // console.log('httpRequestCreateThingStateInfo',httpRequestCreateThingStateInfo);\r",
									"            let optionsCreateThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingCreateThingStateInfo,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThingStateInfo,\r",
									"            body: httpRequestCreateThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThingStateInfo');\r",
									"        let response = await reqPromise(optionsCreateThingStateInfo);\r",
									"        let jsonDataCreateThingStateInfo = await response.json();\r",
									"        let operationStatusCreateThingStateInfo = await jsonDataCreateThingStateInfo.OperationStatus;\r",
									"        // console.log('operationStatusCreateThingStateInfo',operationStatusCreateThingStateInfo);\r",
									"\r",
									"        //200\r",
									"        pm.test(\"CreateThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //CreateThingStateInfo is Success\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionCreateThingStateInfo+'\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Description', resultDescriptionCreateThingStateInfo);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"Signin();\r",
									"setTimeout(async function(){await CreatePartner();}, 3000); \r",
									"setTimeout(async function(){await CreateAccount();}, 6000); \r",
									"setTimeout(async function(){await CreateThingArr();}, 8000); \r",
									"setTimeout(async function(){await CreateThingStateInfo();}, 9000); \r",
									"setTimeout(async function(){}, 10000);  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-ais-OrderRef",
								"value": "{{x_ais_OrderRef_ControlThings_fail}}{{current_timestamp}}"
							},
							{
								"key": "x-ais-AccountKey",
								"type": "text",
								"value": "{{GetResponse_AccountId}}",
								"disabled": true
							},
							{
								"key": "x-ais-AccessToken",
								"value": "{{Bearer}} {{AccessToken}}"
							},
							{
								"key": "Accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"ThingId\": {{GetResponse_ThingIDArr}},\r\n  \"Sensors\": {\r\n    \"{{SensorKey}}\": {{random_Sensor_Control}}\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{url}}{{mg4controlapis}}/api/v1/Control/Things",
							"host": [
								"{{url}}{{mg4controlapis}}"
							],
							"path": [
								"api",
								"v1",
								"Control",
								"Things"
							]
						},
						"description": "Type:Desire"
					},
					"response": []
				},
				{
					"name": "ControlThings_TST_F2_0_2_003_Error_ThingIdNotObjectId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//count for loop data\r",
									"var countData = 1;\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"//---------------- detailsResponse --------------//\r",
									"//set variable to detailsResponse JSON.parse\r",
									"var detailsResponse = JSON.parse(pm.environment.get(\"detailsResponse\"));\r",
									"// console.log('detailsResponse',detailsResponse);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to xAisOrderRef \"RemoveThing_\"\r",
									"var x_ais_OrderRef_RemoveThing = pm.globals.get(\"x_ais_OrderRef_RemoveThing\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"var x_ais_OrderDesc_RemoveThing = pm.globals.get(\"x_ais_OrderDesc_RemoveThing\");\r",
									"//get global variable to x_ais_OrderRef \"RemoveThingStateInfo_\"\r",
									"var x_ais_OrderDesc_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_RemoveThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThingStateInfo\"\r",
									"var x_ais_OrderRef_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderRef_RemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Control --------------//\r",
									"//get global variable to x_ais_OrderRef \"ControlThings_\"\r",
									"var x_ais_OrderRef_ControlThings = pm.globals.get(\"x_ais_OrderRef_ControlThings\");\r",
									"//get global variable to x_ais_OrderRef \"ControlThingsfail_\"\r",
									"var x_ais_OrderRef_ControlThings_fail = pm.globals.get(\"x_ais_OrderRef_ControlThings_fail\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get url Remove --------------//\r",
									"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
									"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"var urlThingRemoveThing = pm.globals.get(\"urlThingRemoveThing\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"var urlThingRemoveThingStateInfo = pm.globals.get(\"urlThingRemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"RemovePartner is Success\"\r",
									"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
									"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
									"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
									"//get global variable to resultDescription \"RemoveThing is Success\"\r",
									"var resultDescriptionRemoveThing = pm.globals.get(\"resultDescriptionRemoveThing\");\r",
									"//get global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"var resultDescriptionRemoveThingStateInfo = pm.globals.get(\"resultDescriptionRemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 403\r",
									"var statusCodeForbidden = pm.globals.get(\"statusCodeForbidden\");\r",
									"//get global variable to resultCode \"40300\"\r",
									"var resultCodeForbiddenMissingOrInvalidParameter = pm.globals.get(\"resultCodeForbiddenMissingOrInvalidParameter\");\r",
									"//get global variable to resultDescription \"The ThingId field is not Object Id.\"\r",
									"// var resultDescriptionErrorTheThingIdfieldIsNotObjectId = pm.globals.get(\"resultDescriptionErrorTheThingIdFieldIsNotObjectId\");\r",
									"//get global variable to statusCode 400\r",
									"var statusCodeBadRequest = pm.globals.get(\"statusCodeBadRequest\");\r",
									"//get global variable to resultCode \"40000\"\r",
									"var resultCodeBadRequest_40000 = pm.globals.get(\"resultCodeBadRequest_40000\");\r",
									"//get global variable to resultDescription \"The client requested missing or invalid  format.\"\r",
									"var resultDescriptionTheClientRequestedMissingOrInvalidFormat = pm.globals.get(\"resultDescriptionTheClientRequestedMissingOrInvalidFormat\");\r",
									"//------------------------------------------------------------//\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"ControlThings : Status code is \" + statusCodeBadRequest, function () {\r",
									"    pm.response.to.have.status(statusCodeBadRequest);\r",
									"});\r",
									"\r",
									"pm.test('ControlThings : OperationStatus Code is '+'\"'+ resultCodeBadRequest_40000 +'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeBadRequest_40000);\r",
									"});\r",
									"\r",
									"pm.test('ControlThings : OperationStatus DeveloperMessage is '+'\"'+ resultDescriptionTheClientRequestedMissingOrInvalidFormat+'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheClientRequestedMissingOrInvalidFormat);\r",
									"});\r",
									"\r",
									"pm.test('ControlThings : OperationStatus Details is '+'\"'+ detailsResponse.target_ThingId + \" : \" + detailsResponse.developerMessage_ThingId_notObjectId+'\"', function () {\r",
									"    let countDetails= jsonData.OperationStatus.Details;\r",
									"    for(let i=0;i<countDetails.length;i++){\r",
									"        pm.expect(countDetails[i].Target).to.eql(detailsResponse.target_ThingId);\r",
									"        pm.expect(countDetails[i].DeveloperMessage).to.eql(detailsResponse.developerMessage_ThingId_notObjectId);\r",
									"    }\r",
									"});\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// RemovePartner\r",
									" RemovePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemovePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemovePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemovePartner = {\r",
									"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemovePartner,\r",
									"            body: httpRequestRemovePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request RemovePartner');\r",
									"        let response = await reqPromise(optionsRemovePartner);\r",
									"        let jsonDataRemovePartner = await response.json();\r",
									"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
									"    \r",
									"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemovePartner is Success\r",
									"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveAccount\r",
									" RemoveAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemoveAccount = {\r",
									"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveAccount,\r",
									"            body: httpRequestRemoveAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveAccount');\r",
									"        let response = await reqPromise(optionsRemoveAccount);\r",
									"        let jsonDataRemoveAccount = await response.json();\r",
									"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
									"    \r",
									"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveAccount is Success\r",
									"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThing\r",
									" RemoveThing = async () =>  {\r",
									"    try {\r",
									"\r",
									"        // header\r",
									"        let headersOptRemoveThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        let dataThingIDArray = JSON.parse(pm.environment.get(\"GetResponse_ThingIDArr\"));\r",
									"\r",
									"        // for(let i=0;i<dataThingIDArray.length;i++){\r",
									"\r",
									"            // body\r",
									"            let httpRequestRemoveThing = {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                    \"ThingId\": dataThingIDArray[0]\r",
									"                })\r",
									"            };\r",
									"\r",
									"            let optionsRemoveThing = {\r",
									"                url: url + provisioningapis + urlThingRemoveThing,\r",
									"                method: 'DELETE',\r",
									"                header: headersOptRemoveThing,\r",
									"                body: httpRequestRemoveThing\r",
									"            };\r",
									"            // console.log('request RemoveThing');\r",
									"            let response = await reqPromise(optionsRemoveThing);\r",
									"            let jsonDataRemoveThing = await response.json();\r",
									"            // console.log('jsonDataRemoveThing',jsonDataRemoveThing)\r",
									"        \r",
									"            let operationStatusRemoveThing = await jsonDataRemoveThing.OperationStatus;\r",
									"\r",
									"            //200\r",
									"            pm.test(\"RemoveThing : Status code is \" + statusCodeSuccess, function () {\r",
									"                pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"            });\r",
									"            //20000\r",
									"            pm.test('RemoveThing : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"                pm.expect(operationStatusRemoveThing).to.have.property('Code', resultCodeSuccess);\r",
									"            });\r",
									"            //RemoveThing is Success\r",
									"            pm.test('RemoveThing : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThing+'\"', function () {\r",
									"                pm.expect(operationStatusRemoveThing).to.have.property('Description', resultDescriptionRemoveThing);\r",
									"            });\r",
									"        // }\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThingStateInfo\r",
									" RemoveThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"            \r",
									"        };\r",
									"\r",
									"        let dataThingIDArray = JSON.parse(pm.environment.get(\"GetResponse_ThingIDArr\"));\r",
									"\r",
									"        for(let i=0;i<countData;i++){\r",
									"        \r",
									"            // body\r",
									"            let httpRequestRemoveThingStateInfo = {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                    \"ThingId\": dataThingIDArray[0],\r",
									"                    \"stateType\": fieldDataValue.CreateThingStateInfo.Type_Report, //Report\r",
									"                    \"stateKey\": fieldDataValue.CreateThingStateInfo.SensorKey //Temp\r",
									"                })\r",
									"            };\r",
									"\r",
									"            let optionsRemoveThingStateInfo = {\r",
									"                url: url + provisioningapis + urlThingRemoveThingStateInfo,\r",
									"                method: 'DELETE',\r",
									"                header: headersOptRemoveThingStateInfo,\r",
									"                body: httpRequestRemoveThingStateInfo\r",
									"            };\r",
									"\r",
									"            // console.log('response RemoveThingStateInfo');\r",
									"            let response = await reqPromise(optionsRemoveThingStateInfo);\r",
									"            let jsonDataRemoveThingStateInfo = await response.json();\r",
									"            // console.log('jsonDataRemoveThing',jsonDataRemoveThingStateInfo)\r",
									"        \r",
									"            let operationStatusRemoveThingStateInfo = await jsonDataRemoveThingStateInfo.OperationStatus;\r",
									"\r",
									"            //200\r",
									"            pm.test(\"RemoveThingStateInfo\" + [i+1]+ \" : Status code is \" + statusCodeSuccess, function () {\r",
									"                pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"            });\r",
									"            //20000\r",
									"            pm.test('RemoveThingStateInfo' + [i+1]+ ' : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"                pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"            });\r",
									"            //RemoveThingStateInfo is Success\r",
									"            pm.test('RemoveThingStateInfo' + [i+1]+ ' : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThingStateInfo+'\"', function () {\r",
									"                pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Description', resultDescriptionRemoveThingStateInfo);\r",
									"            });\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"//---------------- LogDefaultValue --------------//\r",
									"//set variable to LogDefaultValue JSON.parse\r",
									"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
									"// console.log('LogDefaultValue',LogDefaultValue);\r",
									"//---------------- set globals Other --------------//\r",
									"var SearchLog = LogDefaultValue.SearchLog;\r",
									"// console.log('SearchLog',SearchLog);\r",
									"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
									"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
									"var kbn_version = SearchLog.header.kbn_version;\r",
									"var authorization = SearchLog.header.Authorization;\r",
									"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
									"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
									"var namespace = LogDefaultValue.Other.namespace_control4mg;\r",
									"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
									"var header_x_ais_accountkey = LogDefaultValue.Other.header_x_ais_accountkey;\r",
									"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
									"var methodPost = LogDefaultValue.Other.methodPost;\r",
									"\r",
									"// Detail\r",
									"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
									"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
									"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
									"\r",
									"// Summary\r",
									"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
									"// var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
									"var identitySummary = \"\";\r",
									"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
									"// ControlAPIs\r",
									"var applicationName = LogDefaultValue.Control.applicationName_mg4;\r",
									"var cmdName = LogDefaultValue.Control.cmdNameThings;\r",
									"var endPointNameControlAPIs = LogDefaultValue.Control.endPointNameControlAPIs;\r",
									"var endPointNameDesireEx = LogDefaultValue.Control.endPointNameDesireEx;\r",
									"var containerId = LogDefaultValue.Control.containerId;\r",
									"var requestObjectUrlStaging = LogDefaultValue.Control.requestObjectUrlStagingThings;\r",
									"var xProtocolControl = LogDefaultValue.Control.xProtocolControl;\r",
									"var responseObjectPublished = LogDefaultValue.Control.responseObjectPublished;\r",
									"\r",
									"// Check CDR (Summary Log) and EDR (Detail Log)\r",
									"SearchLogFindTid = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSearchLogFindTid = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = x_ais_OrderRef_ControlThings_fail +  current_timestamp; \r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestSearchLogFindTid = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"\r",
									"        let optionsSearchLogFindTid = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptSearchLogFindTid,\r",
									"            body: httpRequestSearchLogFindTid\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsSearchLogFindTid);\r",
									"        let jsonDataSearchLogFindTid = await response.json();\r",
									"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
									"        console.log('hits',hits)\r",
									"  \r",
									"        // find tid\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            // let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"        \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            if(applicationNameValue == applicationName){\r",
									"                // let tid = hits[i]._source.cauldron.tid;\r",
									"                // pm.environment.set(\"tid\", tid);\r",
									"                let sessionId = hits[i]._source.cauldron.sessionId;\r",
									"                pm.environment.set(\"sessionId\", sessionId);\r",
									"                break;\r",
									"           }\r",
									"        }\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"CheckLog = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCheckLog = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = pm.environment.get(\"sessionId\");\r",
									"\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        // console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestCheckLog = {\r",
									"            mode: 'raw',\r",
									"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"        let optionsCheckLog = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptCheckLog,\r",
									"            body: httpRequestCheckLog\r",
									"        }; \r",
									"        let response = await reqPromise(optionsCheckLog);\r",
									"        let jsonDataCheckLog = await response.json();\r",
									"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
									"        \r",
									"        // //200\r",
									"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });     \r",
									"        \r",
									"        let hits = jsonDataCheckLog.hits.hits\r",
									"        // console.log('hits',hits)\r",
									"  \r",
									"        // find logType\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            //  let logType = hits[i]._source.cauldron.logType\r",
									"            let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"           \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            \r",
									"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
									"            // console.log('resultDataLog',resultDataLog)\r",
									"\r",
									"            let tidControl = x_ais_OrderRef_ControlThings_fail + current_timestamp;\r",
									"            // console.log(tidControl);\r",
									"            if(applicationNameValue == applicationName){\r",
									"                 \r",
									"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ControlAPIs\r",
									"                    pm.test(\"Check Summary Log : ControlThings\" , function () {\r",
									"                        console.log(\"======== Check Summary Log ( Expected = Actual) [ControlThings] ==================\");\r",
									"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
									"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
									"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeBadRequest_40000);\r",
									"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionTheClientRequestedMissingOrInvalidFormat);\r",
									"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
									"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"identity : \" + JSON.stringify(resultDataLog.identity) + \" = \" + JSON.stringify(identitySummary));\r",
									"                        console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
									"\r",
									"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
									"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
									"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeBadRequest_40000 ); \r",
									"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionTheClientRequestedMissingOrInvalidFormat); \r",
									"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
									"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
									"                        pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
									"                    }); \r",
									"                }\r",
									"\r",
									"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail'\r",
									"\r",
									"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
									"                    // console.log('endPointNameValue ',endPointNameValue)\r",
									"\r",
									"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [ControlThings]\", function () {\r",
									"                        console.log(\"======== Check Detail Log ( Expected = Actual) [ControlThings] ==================\");\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
									"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
									"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
									"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
									"\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
									"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
									"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
									"                        // pm.expect(resultDataLog.EndPoint).to.eql(); \r",
									"                        \r",
									"                        // check requestObject\r",
									"                        // \"requestObject\":\"{\\\"headers\\\":{\\\"x-ais-orderref\\\":\\\"ControlThingsfail_202101281301827\\\",\\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAEL8HZk2RWAR3L0/hOZPjC5nvaeNw1EUMpcFyr//lMVTkIlAkkY2KW0\\\"},\\\"body\\\":{\\\"ThingId\\\":[\\\"6012886b96d0ed0001f551ad\\\",\\\"6012886b96d0ed0001f551b5\\\"],\\\"Sensors\\\":{\\\"Temp\\\":925}}}\"\r",
									"\r",
									"                        // \\\"requestObject\\\":\\\"{ \\\\\\\"url\\\\\\\":\\\\\\\"/api/v1/Control/Things\\\\\\\", \\\\\\\"method\\\\\\\":\\\\\\\"POST\\\\\\\", \\\\\\\"headers\\\\\\\":{ \\\\\\\"Cache-Control\\\\\\\":\\\\\\\"no-cache\\\\\\\", \\\\\\\"Content-Type\\\\\\\":\\\\\\\"application/json\\\\\\\", \\\\\\\"Accept\\\\\\\":\\\\\\\"*/*\\\\\\\", \\\\\\\"Accept-Encoding\\\\\\\":\\\\\\\"gzip, deflate, br\\\\\\\", \\\\\\\"Host\\\\\\\":\\\\\\\"mg-iot.sandais.com\\\\\\\", \\\\\\\"User-Agent\\\\\\\":\\\\\\\"PostmanRuntime/7.26.8\\\\\\\", \\\\\\\"Content-Length\\\\\\\":\\\\\\\"122\\\\\\\", \\\\\\\"x-real-ip\\\\\\\":\\\\\\\"49.230.7.0\\\\\\\", \\\\\\\"x-forwarded-for\\\\\\\":\\\\\\\"49.230.7.0, 10.233.67.0\\\\\\\", \\\\\\\"x-forwarded-proto\\\\\\\":\\\\\\\"http\\\\\\\", \\\\\\\"x-ais-orderref\\\\\\\":\\\\\\\"ControlThingsfail_202105111605754\\\\\\\", \\\\\\\"x-ais-accountkey\\\\\\\":\\\\\\\"609a49e4fa59240001c80312\\\\\\\", \\\\\\\"x-ais-accesstoken\\\\\\\":\\\\\\\"Bearer ibnxnVhs5Rx3IwglWv7/gVA/1TpQnKqAOBAADlRDvYhOpXwmlpYOEb5yfY5aZpoj0YRWRZM26i9HOqtc1fc1jpNDOK5JpISttmMEy59g2py7nLWonDe2YW2OPRGWSowk6+9ZihLU1fZ5d5jAqqrZaKlOAAI3N1TXDNLsHuKcOJMcERbCcaMqRaku+MY4/kzE+eyIdkfwwbjT91S2VQq+Wk2ooMWuLk6/DHVJhwbMP7Y3L/3XBmZHVnEHhXt/D59NFcjmgkxgIslKVegMrc8SMg==\\\\\\\", \\\\\\\"postman-token\\\\\\\":\\\\\\\"6a87aee9-7346-4833-86ea-be57910a072b\\\\\\\", \\\\\\\"x-envoy-external-address\\\\\\\":\\\\\\\"10.233.67.0\\\\\\\", \\\\\\\"x-request-id\\\\\\\":\\\\\\\"8a02266f-c142-4819-82d5-4c24c010225f\\\\\\\", \\\\\\\"x-envoy-original-path\\\\\\\":\\\\\\\"/mg4controlapis/api/v1/Control/Things\\\\\\\", \\\\\\\"x-b3-traceid\\\\\\\":\\\\\\\"7780c3a942571d8b695fef06b45e2ebb\\\\\\\", \\\\\\\"x-b3-spanid\\\\\\\":\\\\\\\"e01e1814e1d19d62\\\\\\\", \\\\\\\"x-b3-parentspanid\\\\\\\":\\\\\\\"695fef06b45e2ebb\\\\\\\", \\\\\\\"x-b3-sampled\\\\\\\":\\\\\\\"0\\\\\\\", \\\\\\\"x-ais-SessionId\\\\\\\":\\\\\\\"1620724200834\\\\\\\" }, \\\\\\\"queryString\\\\\\\":{ }, \\\\\\\"routeParamteters\\\\\\\":{ }, \\\\\\\"body\\\\\\\":{ \\\\\\\"ThingId\\\\\\\":[ \\\\\\\"609a49e6fa59240001c8031f\\\\\\\", \\\\\\\"5e01deab1ac4c60001ca3c6exxx\\\\\\\" ], \\\\\\\"Sensors\\\\\\\":{ \\\\\\\"Temp\\\\\\\":396 } } }\\\"\r",
									"\r",
									"                        let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
									"                        // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
									"\r",
									"                        let url = requestObjectUrlStaging; \r",
									"                        let urlCustom = urlCheckLog + requestObjectUrlStaging; \r",
									"                        let SensorKey = fieldDataValue.CreateThingStateInfo.SensorKey;\r",
									"                        let sensor = pm.environment.get(\"random_Sensor_Control\");\r",
									"                        let x_ais_orderref = x_ais_OrderRef_ControlThings_fail + current_timestamp;\r",
									"                        let x_ais_AccountKey = pm.environment.get(\"GetResponse_AccountId\");\r",
									"                        let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken\");\r",
									"                        let thingId = JSON.parse(pm.environment.get(\"GetResponse_ThingIDArr\"));\r",
									"\r",
									"                        console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
									"                        console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
									"                        console.log(\"headers.x_ais_AccountKey : \" + jsonParseRequestObject.headers[header_x_ais_accountkey] + \" = \" + x_ais_AccountKey);\r",
									"                        console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"                        console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
									"\r",
									"                        pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
									"                        pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
									"                        pm.expect(jsonParseRequestObject.headers[header_x_ais_accountkey]).to.eql(x_ais_AccountKey);\r",
									"                        pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                        pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
									"\r",
									"                        console.log(\"queryString : \" + JSON.stringify(jsonParseRequestObject.queryString) + \" = \" + JSON.stringify({}));\r",
									"                        pm.expect(jsonParseRequestObject.queryString).to.eql({});\r",
									"\r",
									"                        console.log(\"routeParamteters : \" + JSON.stringify(jsonParseRequestObject.routeParamteters) + \" = \" + JSON.stringify({}));\r",
									"                        pm.expect(jsonParseRequestObject.routeParamteters).to.eql({});\r",
									"\r",
									"                        console.log(\"resquest.body.ThingId : [\" + jsonParseRequestObject.body.ThingId + \"] = [\" + thingId + \"]\");\r",
									"                        console.log(\"resquest.body.Sensors.\" + SensorKey + \"  : \" + jsonParseRequestObject.body.Sensors[SensorKey] + \" = \" + sensor);\r",
									"\r",
									"                        pm.expect(jsonParseRequestObject.body.ThingId).to.eql(thingId);\r",
									"                        pm.expect(jsonParseRequestObject.body.Sensors[SensorKey]).to.eql(sensor);\r",
									"\r",
									"                        // check responseObject\r",
									"                        // \\\"responseObject\\\":\\\"{ \\\\\\\"OperationStatus\\\\\\\":{ \\\\\\\"Code\\\\\\\":\\\\\\\"40000\\\\\\\", \\\\\\\"DeveloperMessage\\\\\\\":\\\\\\\"The client requested missing or invalid  format.\\\\\\\", \\\\\\\"Details\\\\\\\":[ { \\\\\\\"Target\\\\\\\":\\\\\\\"ThingId\\\\\\\", \\\\\\\"DeveloperMessage\\\\\\\":\\\\\\\"'ThingId' is not Object Id.\\\\\\\" } ] } }\\\"\r",
									"                        let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
									"                        // console.log('jsonParseResponseObject',jsonParseResponseObject);\r",
									"\r",
									"                        console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeBadRequest_40000);\r",
									"                        console.log(\"response.OperationStatus.DeveloperMessage : \" + jsonParseResponseObject.OperationStatus.DeveloperMessage + \" = \" + resultDescriptionTheClientRequestedMissingOrInvalidFormat);\r",
									"\r",
									"                        pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeBadRequest_40000);  \r",
									"                        pm.expect(jsonParseResponseObject.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheClientRequestedMissingOrInvalidFormat);  \r",
									"\r",
									"                        let countDetails= jsonParseResponseObject.OperationStatus.Details;\r",
									"                        for(let i=0;i<countDetails.length;i++){\r",
									"\r",
									"                            console.log(\"response.OperationStatus.Details[\"+ i +\"].Target : \" + countDetails[i].Target + \" = \" + detailsResponse.target_ThingId);\r",
									"                            console.log(\"response.OperationStatus.Details[\"+ i +\"].DeveloperMessage : \" + countDetails[i].DeveloperMessage + \" = \" + detailsResponse.developerMessage_ThingId_notObjectId);\r",
									"\r",
									"                            pm.expect(countDetails[i].Target).to.eql(detailsResponse.target_ThingId);\r",
									"                            pm.expect(countDetails[i].DeveloperMessage).to.eql(detailsResponse.developerMessage_ThingId_notObjectId);\r",
									"                        } \r",
									"                    }); \r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"setTimeout(function(){SearchLogFindTid();}, 20000); \r",
									"setTimeout(function(){CheckLog();}, 30000); \r",
									"\r",
									"setTimeout(function(){RemoveThingStateInfo();}, 40000); \r",
									"setTimeout(function(){RemoveThing();}, 45000); \r",
									"setTimeout(function(){RemoveAccount();}, 50000); \r",
									"setTimeout(function(){RemovePartner();}, 55000); \r",
									"\r",
									"setTimeout(function(){\r",
									"pm.environment.unset(\"current_timestamp\");\r",
									"pm.environment.unset(\"AccessToken\");\r",
									"pm.environment.unset(\"random_number\");\r",
									"pm.environment.unset(\"PartnerName\");\r",
									"pm.environment.unset(\"MerchantContact\");\r",
									"pm.environment.unset(\"CPID\");\r",
									"pm.environment.unset(\"GetResponse_PartnerId\");\r",
									"pm.environment.unset(\"AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountId\");\r",
									"for(let i=0;i<countData;i++){\r",
									"pm.environment.unset(\"random_IM\"+[i+1]);\r",
									"pm.environment.unset(\"random_ICCID\"+[i+1]);\r",
									"pm.environment.unset(\"ThingName\"+[i+1]);\r",
									"}\r",
									"pm.environment.unset(\"GetResponse_ThingIDArr\");\r",
									"pm.environment.unset(\"random_Sensor\");\r",
									"pm.environment.unset(\"tid\");\r",
									"pm.environment.unset(\"sessionId\");\r",
									"pm.environment.unset(\"SensorKey\");\r",
									"pm.environment.unset(\"random_Sensor_Control\");\r",
									"}, 90000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var Username = pm.environment.get(\"Username\");\r",
									"var Password = pm.environment.get(\"Password\");\r",
									"\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//count for loop data\r",
									"var countData = 1;\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"pm.environment.set(\"SensorKey\",fieldDataValue.CreateThingStateInfo.SensorKey)\r",
									"//mockup Data for case ControlThing_TST_F2_0_2_003 \"5e01deab1ac4c60001ca3c6exxx\"\r",
									"var mockupData = fieldDataValue.Control.Value_ControlThing_TST_F2_0_2_003_Error; \r",
									"\r",
									"//format YYYYMMDDHHMMSSS\r",
									"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
									"// console.log('currentTmestamp',currentTmestamp);\r",
									"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- statusCodeList --------------//\r",
									"//set variable to statusCodeList JSON.parse\r",
									"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
									"//set global variable to statusCode 200\r",
									"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
									"//set global variable to statusCode 201\r",
									"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
									"//set global variable to statusCode 403\r",
									"pm.globals.set(\"statusCodeForbidden\", statusCodeList.statusCodeForbidden);\r",
									"//set global variable to statusCode 400\r",
									"pm.globals.set(\"statusCodeBadRequest\", statusCodeList.statusCodeBadRequest);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultCodeList --------------//\r",
									"//set variable to resultCodeList JSON.parse\r",
									"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
									"//set global variable to resultCode \"20000\"\r",
									"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
									"//set global variable to resultCode \"20100\"\r",
									"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
									"//set global variable to resultCode \"40300\"\r",
									"pm.globals.set(\"resultCodeForbiddenMissingOrInvalidParameter\", resultCodeList.resultCodeForbiddenMissingOrInvalidParameter);\r",
									"//set global variable to resultCode \"40000\"\r",
									"pm.globals.set(\"resultCodeBadRequest_40000\", resultCodeList.resultCodeBadRequest_40000);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionSuccessList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
									"//set global variable to resultDescription \"SignInProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
									"//set global variable to resultDescription \"CreatePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
									"//set global variable to resultDescription \"CreateAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
									"//set global variable to resultDescription \"CreateThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThing\", resultDescriptionSuccessList.resultDescriptionCreateThing);\r",
									"//set global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThingStateInfo\", resultDescriptionSuccessList.resultDescriptionCreateThingStateInfo);\r",
									"//set global variable to resultDescription \"RemovePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
									"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
									"//set global variable to resultDescription \"RemoveThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThing\", resultDescriptionSuccessList.resultDescriptionRemoveThing);\r",
									"//set global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThingStateInfo\", resultDescriptionSuccessList.resultDescriptionRemoveThingStateInfo);\r",
									"//set global variable to resultDescription \"Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccess\", resultDescriptionSuccessList.resultDescriptionSuccess);\r",
									"//set global variable to resultDescription \"Created Success\"\r",
									"pm.globals.set(\"resultDescriptionCreatedSuccess\", resultDescriptionSuccessList.resultDescriptionCreatedSuccess);\r",
									"//set global variable to resultDescription \"ControlManyThings is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessControlManyThings\", resultDescriptionSuccessList.resultDescriptionSuccessControlManyThings);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionErrorList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
									"//set global variable to resultDescription \"The ThingId field is not Object Id.\"\r",
									"// pm.globals.set(\"resultDescriptionErrorTheThingIdFieldIsNotObjectId\", resultDescriptionErrorList.resultDescriptionErrorTheThingIdFieldIsNotObjectId);\r",
									"//set global variable to resultDescription \"The client requested missing or invalid  format.\"\r",
									"pm.globals.set(\"resultDescriptionTheClientRequestedMissingOrInvalidFormat\", resultDescriptionErrorList.resultDescriptionTheClientRequestedMissingOrInvalidFormat);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- HeaderList --------------//\r",
									"//set variable to HeaderList JSON.parse\r",
									"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
									"//---------------- set globals Other --------------//\r",
									"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
									"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
									"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
									"//set global variable to kbn-versio \"7.5.1\"\r",
									"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Signin_ --------------//\r",
									"//set global variable to x_ais_OrderRef \"Signin_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreatePartner --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
									"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
									"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
									"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreateAccount --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
									"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
									"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Thing --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThing\", HeaderList.Thing.x_ais_OrderRef_CreateThing);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThing\", HeaderList.Thing.x_ais_OrderDesc_CreateThing);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThing\", HeaderList.Thing.x_ais_OrderRef_RemoveThing);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThing\", HeaderList.Thing.x_ais_OrderDesc_RemoveThing);\r",
									"//set global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_RemoveThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_RemoveThingStateInfo);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Control --------------//\r",
									"//set global variable to x_ais_OrderRef \"ControlThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ControlThing\", HeaderList.Control.x_ais_OrderRef_ControlThing);\r",
									"//set global variable to x_ais_OrderRef \"ControlThingfail_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ControlThing_fail\", HeaderList.Control.x_ais_OrderRef_ControlThing_fail);\r",
									"//set global variable to x_ais_OrderRef \"ControlThings_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ControlThings\", HeaderList.Control.x_ais_OrderRef_ControlThings);\r",
									"//set global variable to x_ais_OrderRef \"ControlThingsfail_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ControlThings_fail\", HeaderList.Control.x_ais_OrderRef_ControlThings_fail);\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"SignInProcess is Success\"\r",
									"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
									"//get global variable to resultDescription \"CreatePartner is Success\"\r",
									"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
									"//get global variable to resultDescription \"CreateAccount is Success\"\r",
									"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
									"//get global variable to resultDescription \"CreateThing is Success\"\r",
									"var resultDescriptionCreateThing = pm.globals.get(\"resultDescriptionCreateThing\");\r",
									"//get global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"var resultDescriptionCreateThingStateInfo = pm.globals.get(\"resultDescriptionCreateThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- urlRouteList --------------//\r",
									"//set variable to urlRouteList JSON.parse\r",
									"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
									"//---------------- set url Create --------------//\r",
									"//set global variable to url \"/api/v1/auth/signin\"\r",
									"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
									"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
									"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"pm.globals.set(\"urlThingCreateThing\", urlRouteList.Thing.urlThingCreateThing);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"pm.globals.set(\"urlThingCreateThingStateInfo\", urlRouteList.Thing.urlThingCreateThingStateInfo);\r",
									"//---------------- get url Create --------------//\r",
									"//get global variable to url \"/api/v1/auth/signin\"\r",
									"var urlSignin = pm.globals.get(\"urlSignin\");\r",
									"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
									"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"var urlThingCreateThing = pm.globals.get(\"urlThingCreateThing\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"var urlThingCreateThingStateInfo = pm.globals.get(\"urlThingCreateThingStateInfo\");\r",
									"//---------------- set url Remove --------------//\r",
									"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
									"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"pm.globals.set(\"urlThingRemoveThing\", urlRouteList.Thing.urlThingRemoveThing);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"pm.globals.set(\"urlThingRemoveThingStateInfo\", urlRouteList.Thing.urlThingRemoveThingStateInfo);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Signin_ --------------//\r",
									"//get global variable to x_ais_OrderRef \"Signin_\"\r",
									"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"var x_ais_OrderRef_CreateThing = pm.globals.get(\"x_ais_OrderRef_CreateThing\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"var x_ais_OrderDesc_CreateThing = pm.globals.get(\"x_ais_OrderDesc_CreateThing\");\r",
									"//get global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"var x_ais_OrderRef_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderRef_CreateThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"var x_ais_OrderDesc_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_CreateThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            // console.log('response111',response);\r",
									"            // console.log('errerrerr',err);\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// Signin get token\r",
									" Signin = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSignin = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestSignin = {\r",
									"            mode: 'raw',\r",
									"            raw: \r",
									"            JSON.stringify({\r",
									"                username:Username,\r",
									"                password:Password\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsSignin = {\r",
									"            url: url + provisioningapis + urlSignin,\r",
									"            method: 'POST',\r",
									"            header: headersOptSignin,\r",
									"            body: httpRequestSignin\r",
									"        };\r",
									"        // console.log('request Signin');\r",
									"        let response = await reqPromise(optionsSignin);\r",
									"        let jsonDataSignin = await response.json();\r",
									"\r",
									"        // setAccessToken\r",
									"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
									"\r",
									"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // SignInProcess is Success\r",
									"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
									"        });\r",
									"\r",
									"        //set random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //set PartnerName\r",
									"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
									"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
									"        //set MerchantContact\r",
									"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
									"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
									"        // set CPID\r",
									"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
									"        pm.environment.set(\"CPID\", CPIDValue)\r",
									"        \r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreatePartner\r",
									" CreatePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreatePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreatePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
									"                \"PartnerType\": [\r",
									"                    \"Supplier\",\r",
									"                    \"Customer\"\r",
									"                ],\r",
									"                \"PartnerDetail\": {\r",
									"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
									"                    \"CPID\": pm.environment.get(\"CPID\")\r",
									"                },\r",
									"                \"Property\": {\r",
									"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsCreatePartner = {\r",
									"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreatePartner,\r",
									"            body: httpRequestCreatePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsCreatePartner);\r",
									"        let jsonDataCreatePartner = await response.json();\r",
									"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
									"    \r",
									"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreatePartner is Success\r",
									"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
									"        });\r",
									"\r",
									"        //GetResponse_PartnerId\r",
									"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
									"\r",
									"        //Accountname\r",
									"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
									"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateAccount\r",
									" CreateAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreateAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
									"                })\r",
									"        };\r",
									"        \r",
									"        let optionsCreateAccount = {\r",
									"            url: url + provisioningapis + urlAccountCreateAccount,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateAccount,\r",
									"            body: httpRequestCreateAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateAccount');\r",
									"        let response = await reqPromise(optionsCreateAccount);\r",
									"        let jsonDataCreateAccount = await response.json();\r",
									"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
									"    \r",
									"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateAccount : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateAccount is Success\r",
									"        pm.test('CreateAccount : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
									"        });\r",
									"        // GetResponse_AccountName\r",
									"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
									"        // GetResponse_AccountId\r",
									"        pm.environment.set(\"GetResponse_AccountId\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
									"       \r",
									"        // // random_IM\r",
									"        // pm.environment.set(\"random_IM\", _.random(10000000, 99999999)+\" \"+_.random(1000000, 9999999))\r",
									"        // // random_ICCID\r",
									"        // pm.environment.set(\"random_ICCID\", _.random(1000000, 9999999)+\" \"+_.random(100000, 999999))\r",
									"        // // random_number\r",
									"        // pm.environment.set(\"random_number\",pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        // //ThingName\r",
									"        // let thingNameValue = fieldDataValue.Thing.ThingNameValue; // \"Sensor_TestThingName\"\r",
									"        // pm.environment.set(\"ThingName\", thingNameValue + pm.environment.get(\"random_number\"))\r",
									"\r",
									"        // random_number\r",
									"        pm.environment.set(\"random_number\",pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"\r",
									"        for(let i=0;i<countData;i++){\r",
									"            // random_IM\r",
									"            pm.environment.set(\"random_IM\"+[i+1], _.random(10000000, 99999999)+\" \"+_.random(1000000, 9999999))\r",
									"            // random_ICCID\r",
									"            pm.environment.set(\"random_ICCID\"+[i+1], _.random(1000000, 9999999)+\" \"+_.random(100000, 999999))\r",
									"\r",
									"            //ThingName\r",
									"            let thingNameValue = fieldDataValue.Thing.ThingNameValue; // \"Sensor_TestThingName\"\r",
									"            pm.environment.set(\"ThingName\"+[i+1],thingNameValue + [i+1] + pm.environment.get(\"random_number\"))\r",
									"        }\r",
									"            \r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThing\r",
									" CreateThingArr = async () =>  {\r",
									"    try {\r",
									"        \r",
									"        // header\r",
									"        let headersOptCreateThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThing');\r",
									"        let dataThingIdArr = [];\r",
									"        for(let i=0;i<countData;i++){\r",
									"            // body\r",
									"            let httpRequestCreateThing = {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                    \"ThingName\": pm.environment.get(\"ThingName\"+ [i+1]),\r",
									"                    \"IMEI\": pm.environment.get(\"random_IM\"+ [i+1]),\r",
									"                    \"IMSI\": pm.environment.get(\"random_IM\"+ [i+1]),\r",
									"                    \"ICCID\": pm.environment.get(\"random_ICCID\"+ [i+1]),\r",
									"                    \"RouteUrl\": fieldDataValue.Thing.RouteUrlValue , //[\"http://10.12.3.4:2019/api/information/AddInformation\"]\r",
									"                    \"RouteInfo\": {\r",
									"                        \"MIMO_ID\": fieldDataValue.Thing.RouteInfoMIMOIDValue , //\"606edada\"\r",
									"                        \"MIMO_SerialNo\": fieldDataValue.Thing.RouteInfoMIMOSerialNoValue //5466758878\r",
									"                    },\r",
									"                    \"RouteFlag\": {\r",
									"                        \"ThingName\": fieldDataValue.Thing.RouteFlagThingNameValue , //true\r",
									"                        \"ThingToken\": fieldDataValue.Thing.RouteFlagThingTokenValue, //true\r",
									"                        \"IMEI\": fieldDataValue.Thing.RouteFlagIMEIValue, //true\r",
									"                        \"ICCID\": fieldDataValue.Thing.RouteFlagICCIDValue, //true\r",
									"                        \"RouteInfo\": fieldDataValue.Thing.RouteFlagRouteInfoValue //true\r",
									"                    }\r",
									"                })\r",
									"            };\r",
									"            \r",
									"            let optionsCreateThing = {\r",
									"                url: url + provisioningapis + urlThingCreateThing,\r",
									"                method: 'POST',\r",
									"                header: headersOptCreateThing,\r",
									"                body: httpRequestCreateThing\r",
									"            };\r",
									"            let response = await reqPromise(optionsCreateThing);\r",
									"            let jsonDataCreateThing = await response.json();\r",
									"            let ThingId = await jsonDataCreateThing.ThingInfo.ThingId;\r",
									"            dataThingIdArr.push(ThingId);\r",
									"            let operationStatusCreateThing = await jsonDataCreateThing.OperationStatus;\r",
									"\r",
									"            //201\r",
									"            pm.test(\"CreateThing\"+ [i+1]+ \" : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"                pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"            });\r",
									"            //20100\r",
									"            pm.test('CreateThing'+ [i+1]+ ' : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"                pm.expect(operationStatusCreateThing).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"            });\r",
									"            //CreateThing is Success\r",
									"            pm.test('CreateThing'+ [i+1]+ ' : OperationStatus Description is '+'\"'+ resultDescriptionCreateThing+'\"', function () {\r",
									"                pm.expect(operationStatusCreateThing).to.have.property('Description', resultDescriptionCreateThing);\r",
									"            });\r",
									"        }\r",
									"        //mockup Data\r",
									"        dataThingIdArr.push(mockupData);\r",
									"        // console.log('dataThingIdArr',dataThingIdArr);\r",
									"        // pm.environment.set(\"GetResponse_ThingID\",jsonDataCreateThing.ThingInfo.ThingId)\r",
									"        pm.environment.set(\"GetResponse_ThingIDArr\",JSON.stringify(dataThingIdArr))\r",
									"        \r",
									"        //Get Random Sensor \r",
									"        pm.environment.set(\"random_Sensor\", _.random(100, 999))\r",
									"\r",
									"        //Get Random Sensor Control\r",
									"        pm.environment.set(\"random_Sensor_Control\", _.random(100, 999))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThingStateInfo\r",
									" CreateThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let dataThingIDArray = JSON.parse(pm.environment.get(\"GetResponse_ThingIDArr\"));\r",
									"        // console.log('dataThingIDArray',dataThingIDArray);\r",
									"\r",
									"        // {\"Temp\" : pm.environment.get(\"random_Sensor\")}\r",
									"        let sensorValue = {};\r",
									"        sensorValue[fieldDataValue.CreateThingStateInfo.SensorKey] = pm.environment.get(\"random_Sensor\");\r",
									"        // console.log('sensorValue',sensorValue);\r",
									"        \r",
									"        let httpRequestCreateThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\":[dataThingIDArray[0]],\r",
									"                \"Type\": fieldDataValue.CreateThingStateInfo.Type_Report,\r",
									"                \"Sensor\": sensorValue\r",
									"            })\r",
									"        };\r",
									"        // console.log('httpRequestCreateThingStateInfo',httpRequestCreateThingStateInfo);\r",
									"            let optionsCreateThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingCreateThingStateInfo,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThingStateInfo,\r",
									"            body: httpRequestCreateThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThingStateInfo');\r",
									"        let response = await reqPromise(optionsCreateThingStateInfo);\r",
									"        let jsonDataCreateThingStateInfo = await response.json();\r",
									"        let operationStatusCreateThingStateInfo = await jsonDataCreateThingStateInfo.OperationStatus;\r",
									"        // console.log('operationStatusCreateThingStateInfo',operationStatusCreateThingStateInfo);\r",
									"\r",
									"        //200\r",
									"        pm.test(\"CreateThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //CreateThingStateInfo is Success\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionCreateThingStateInfo+'\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Description', resultDescriptionCreateThingStateInfo);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"Signin();\r",
									"setTimeout(async function(){await CreatePartner();}, 3000); \r",
									"setTimeout(async function(){await CreateAccount();}, 6000); \r",
									"setTimeout(async function(){await CreateThingArr();}, 8000); \r",
									"setTimeout(async function(){await CreateThingStateInfo();}, 9000); \r",
									"setTimeout(async function(){}, 10000);  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-ais-OrderRef",
								"value": "{{x_ais_OrderRef_ControlThings_fail}}{{current_timestamp}}"
							},
							{
								"key": "x-ais-AccountKey",
								"type": "text",
								"value": "{{GetResponse_AccountId}}"
							},
							{
								"key": "x-ais-AccessToken",
								"value": "{{Bearer}} {{AccessToken}}"
							},
							{
								"key": "Accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"ThingId\": {{GetResponse_ThingIDArr}},\r\n  \"Sensors\": {\r\n    \"{{SensorKey}}\": {{random_Sensor_Control}}\r\n    \r\n  }\r\n}"
						},
						"url": {
							"raw": "{{url}}{{mg4controlapis}}/api/v1/Control/Things",
							"host": [
								"{{url}}{{mg4controlapis}}"
							],
							"path": [
								"api",
								"v1",
								"Control",
								"Things"
							]
						},
						"description": "Type:Desire"
					},
					"response": []
				},
				{
					"name": "ControlThings_TST_F2_0_2_004_Error_ThingIdNotFound",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//count for loop data\r",
									"var countData = 1;\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"//---------------- detailsResponse --------------//\r",
									"//set variable to detailsResponse JSON.parse\r",
									"var detailsResponse = JSON.parse(pm.environment.get(\"detailsResponse\"));\r",
									"// console.log('detailsResponse',detailsResponse);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to xAisOrderRef \"RemoveThing_\"\r",
									"var x_ais_OrderRef_RemoveThing = pm.globals.get(\"x_ais_OrderRef_RemoveThing\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"var x_ais_OrderDesc_RemoveThing = pm.globals.get(\"x_ais_OrderDesc_RemoveThing\");\r",
									"//get global variable to x_ais_OrderRef \"RemoveThingStateInfo_\"\r",
									"var x_ais_OrderDesc_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_RemoveThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThingStateInfo\"\r",
									"var x_ais_OrderRef_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderRef_RemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Control --------------//\r",
									"//get global variable to x_ais_OrderRef \"ControlThings_\"\r",
									"var x_ais_OrderRef_ControlThings = pm.globals.get(\"x_ais_OrderRef_ControlThings\");\r",
									"//get global variable to x_ais_OrderRef \"ControlThingsfail_\"\r",
									"var x_ais_OrderRef_ControlThings_fail = pm.globals.get(\"x_ais_OrderRef_ControlThings_fail\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get url Remove --------------//\r",
									"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
									"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"var urlThingRemoveThing = pm.globals.get(\"urlThingRemoveThing\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"var urlThingRemoveThingStateInfo = pm.globals.get(\"urlThingRemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"RemovePartner is Success\"\r",
									"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
									"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
									"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
									"//get global variable to resultDescription \"RemoveThing is Success\"\r",
									"var resultDescriptionRemoveThing = pm.globals.get(\"resultDescriptionRemoveThing\");\r",
									"//get global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"var resultDescriptionRemoveThingStateInfo = pm.globals.get(\"resultDescriptionRemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 404\r",
									"var statusCodeNotFound = pm.globals.get(\"statusCodeNotFound\");\r",
									"//get global variable to resultCode \"40400\"\r",
									"var resultCodeNotFound = pm.globals.get(\"resultCodeNotFound\");\r",
									"// //get global variable to resultDescription \"The ThingId : \"\r",
									"// var resultDescriptionErrorTheThingId = pm.globals.get(\"resultDescriptionErrorTheThingId\");\r",
									"// //get global variable to resultDescription \" is Not Found\"\r",
									"// var resultDescriptionErrorIsNotFound = pm.globals.get(\"resultDescriptionErrorIsNotFound\");\r",
									"//get global variable to resultDescription \"The requested operation could not be found.\"\r",
									"var resultDescriptionTheRequestedOperationCouldNotBeFound = pm.globals.get(\"resultDescriptionTheRequestedOperationCouldNotBeFound\");\r",
									"//get global variable to resultDescription \"The ThingId \"\r",
									"var resultDescriptionErrorTheThingId2 = pm.globals.get(\"resultDescriptionErrorTheThingId2\");\r",
									"//get global variable to resultDescription \" could not be found.\"\r",
									"var resultDescriptionErrorCouldNotBeFound = pm.globals.get(\"resultDescriptionErrorCouldNotBeFound\");\r",
									"//get environment variable to ThingId \"5f61cf2d51c1f10001fb779b\"\r",
									"// var ThingId_Value_ControlThings_004 = pm.environment.get(\"ThingId_Value_ControlThings_004\");\r",
									"var ThingId_Value_ControlThings_004 = fieldDataValue.Control.Value_ControlThing_TST_F2_0_2_004_Error;\r",
									"//------------------------------------------------------------//\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"ControlThings : Status code is \" + statusCodeNotFound, function () {\r",
									"    pm.response.to.have.status(statusCodeNotFound);\r",
									"});\r",
									"\r",
									"pm.test('ControlThings : OperationStatus Code is '+'\"'+ resultCodeNotFound +'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeNotFound);\r",
									"});\r",
									"\r",
									"pm.test('ControlThings : OperationStatus DeveloperMessage is '+'\"'+ resultDescriptionTheRequestedOperationCouldNotBeFound+'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheRequestedOperationCouldNotBeFound);\r",
									"});\r",
									"\r",
									"pm.test('ControlThings : OperationStatus Details is '+'\"'+ detailsResponse.target_ThingId + \" : \" + resultDescriptionErrorTheThingId2 + \"'\"+ ThingId_Value_ControlThings_004 + \"'\"+ resultDescriptionErrorCouldNotBeFound+'\"', function () {\r",
									"    let countDetails= jsonData.OperationStatus.Details;\r",
									"    for(let i=0;i<countDetails.length;i++){\r",
									"        pm.expect(countDetails[i].Target).to.eql(detailsResponse.target_ThingId);\r",
									"        pm.expect(countDetails[i].DeveloperMessage).to.eql(resultDescriptionErrorTheThingId2 + \"'\"+ ThingId_Value_ControlThings_004 + \"'\"+ resultDescriptionErrorCouldNotBeFound);\r",
									"    }\r",
									"});\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// RemovePartner\r",
									" RemovePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemovePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemovePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemovePartner = {\r",
									"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemovePartner,\r",
									"            body: httpRequestRemovePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request RemovePartner');\r",
									"        let response = await reqPromise(optionsRemovePartner);\r",
									"        let jsonDataRemovePartner = await response.json();\r",
									"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
									"    \r",
									"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemovePartner is Success\r",
									"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveAccount\r",
									" RemoveAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemoveAccount = {\r",
									"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveAccount,\r",
									"            body: httpRequestRemoveAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveAccount');\r",
									"        let response = await reqPromise(optionsRemoveAccount);\r",
									"        let jsonDataRemoveAccount = await response.json();\r",
									"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
									"    \r",
									"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveAccount is Success\r",
									"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThing\r",
									" RemoveThing = async () =>  {\r",
									"    try {\r",
									"\r",
									"        // header\r",
									"        let headersOptRemoveThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        let dataThingIDArray = JSON.parse(pm.environment.get(\"GetResponse_ThingIDArr\"));\r",
									"\r",
									"        // for(let i=0;i<dataThingIDArray.length;i++){\r",
									"\r",
									"            // body\r",
									"            let httpRequestRemoveThing = {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                    \"ThingId\": dataThingIDArray[0]\r",
									"                })\r",
									"            };\r",
									"\r",
									"            let optionsRemoveThing = {\r",
									"                url: url + provisioningapis + urlThingRemoveThing,\r",
									"                method: 'DELETE',\r",
									"                header: headersOptRemoveThing,\r",
									"                body: httpRequestRemoveThing\r",
									"            };\r",
									"            // console.log('request RemoveThing');\r",
									"            let response = await reqPromise(optionsRemoveThing);\r",
									"            let jsonDataRemoveThing = await response.json();\r",
									"            // console.log('jsonDataRemoveThing',jsonDataRemoveThing)\r",
									"        \r",
									"            let operationStatusRemoveThing = await jsonDataRemoveThing.OperationStatus;\r",
									"\r",
									"            //200\r",
									"            pm.test(\"RemoveThing : Status code is \" + statusCodeSuccess, function () {\r",
									"                pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"            });\r",
									"            //20000\r",
									"            pm.test('RemoveThing : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"                pm.expect(operationStatusRemoveThing).to.have.property('Code', resultCodeSuccess);\r",
									"            });\r",
									"            //RemoveThing is Success\r",
									"            pm.test('RemoveThing : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThing+'\"', function () {\r",
									"                pm.expect(operationStatusRemoveThing).to.have.property('Description', resultDescriptionRemoveThing);\r",
									"            });\r",
									"        // }\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThingStateInfo\r",
									" RemoveThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"            \r",
									"        };\r",
									"\r",
									"        let dataThingIDArray = JSON.parse(pm.environment.get(\"GetResponse_ThingIDArr\"));\r",
									"\r",
									"        for(let i=0;i<countData;i++){\r",
									"        \r",
									"            // body\r",
									"            let httpRequestRemoveThingStateInfo = {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                    \"ThingId\": dataThingIDArray[0],\r",
									"                    \"stateType\": fieldDataValue.CreateThingStateInfo.Type_Report, //Report\r",
									"                    \"stateKey\": fieldDataValue.CreateThingStateInfo.SensorKey //Temp\r",
									"                })\r",
									"            };\r",
									"\r",
									"            let optionsRemoveThingStateInfo = {\r",
									"                url: url + provisioningapis + urlThingRemoveThingStateInfo,\r",
									"                method: 'DELETE',\r",
									"                header: headersOptRemoveThingStateInfo,\r",
									"                body: httpRequestRemoveThingStateInfo\r",
									"            };\r",
									"\r",
									"            // console.log('response RemoveThingStateInfo');\r",
									"            let response = await reqPromise(optionsRemoveThingStateInfo);\r",
									"            let jsonDataRemoveThingStateInfo = await response.json();\r",
									"            // console.log('jsonDataRemoveThing',jsonDataRemoveThingStateInfo)\r",
									"        \r",
									"            let operationStatusRemoveThingStateInfo = await jsonDataRemoveThingStateInfo.OperationStatus;\r",
									"\r",
									"            //200\r",
									"            pm.test(\"RemoveThingStateInfo\" + [i+1]+ \" : Status code is \" + statusCodeSuccess, function () {\r",
									"                pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"            });\r",
									"            //20000\r",
									"            pm.test('RemoveThingStateInfo' + [i+1]+ ' : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"                pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"            });\r",
									"            //RemoveThingStateInfo is Success\r",
									"            pm.test('RemoveThingStateInfo' + [i+1]+ ' : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThingStateInfo+'\"', function () {\r",
									"                pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Description', resultDescriptionRemoveThingStateInfo);\r",
									"            });\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"//---------------- LogDefaultValue --------------//\r",
									"//set variable to LogDefaultValue JSON.parse\r",
									"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
									"// console.log('LogDefaultValue',LogDefaultValue);\r",
									"//---------------- set globals Other --------------//\r",
									"var SearchLog = LogDefaultValue.SearchLog;\r",
									"// console.log('SearchLog',SearchLog);\r",
									"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
									"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
									"var kbn_version = SearchLog.header.kbn_version;\r",
									"var authorization = SearchLog.header.Authorization;\r",
									"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
									"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
									"var namespace = LogDefaultValue.Other.namespace_control4mg;\r",
									"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
									"var header_x_ais_accountkey = LogDefaultValue.Other.header_x_ais_accountkey;\r",
									"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
									"var methodPost = LogDefaultValue.Other.methodPost;\r",
									"\r",
									"// Detail\r",
									"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
									"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
									"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
									"\r",
									"// Summary\r",
									"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
									"// ControlAPIs\r",
									"var applicationName = LogDefaultValue.Control.applicationName_mg4;\r",
									"var cmdName = LogDefaultValue.Control.cmdNameThings;\r",
									"var endPointNameControlAPIs = LogDefaultValue.Control.endPointNameControlAPIs;\r",
									"var endPointNameDesireEx = LogDefaultValue.Control.endPointNameDesireEx;\r",
									"var containerId = LogDefaultValue.Control.containerId;\r",
									"var requestObjectUrlStaging = LogDefaultValue.Control.requestObjectUrlStagingThings;\r",
									"var xProtocolControl = LogDefaultValue.Control.xProtocolControl;\r",
									"var responseObjectPublished = LogDefaultValue.Control.responseObjectPublished;\r",
									"\r",
									"// Check CDR (Summary Log) and EDR (Detail Log)\r",
									"SearchLogFindTid = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSearchLogFindTid = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = x_ais_OrderRef_ControlThings_fail +  current_timestamp; \r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestSearchLogFindTid = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"\r",
									"        let optionsSearchLogFindTid = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptSearchLogFindTid,\r",
									"            body: httpRequestSearchLogFindTid\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsSearchLogFindTid);\r",
									"        let jsonDataSearchLogFindTid = await response.json();\r",
									"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
									"        console.log('hits',hits)\r",
									"  \r",
									"        // find tid\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            // let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"        \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            if(applicationNameValue == applicationName){\r",
									"                // let tid = hits[i]._source.cauldron.tid;\r",
									"                // pm.environment.set(\"tid\", tid);\r",
									"                let sessionId = hits[i]._source.cauldron.sessionId;\r",
									"                pm.environment.set(\"sessionId\", sessionId);\r",
									"                break;\r",
									"           }\r",
									"        }\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"CheckLog = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCheckLog = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = pm.environment.get(\"sessionId\");\r",
									"\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestCheckLog = {\r",
									"            mode: 'raw',\r",
									"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"        let optionsCheckLog = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptCheckLog,\r",
									"            body: httpRequestCheckLog\r",
									"        }; \r",
									"        let response = await reqPromise(optionsCheckLog);\r",
									"        let jsonDataCheckLog = await response.json();\r",
									"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
									"        \r",
									"        // //200\r",
									"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });     \r",
									"        \r",
									"        let hits = jsonDataCheckLog.hits.hits\r",
									"        console.log('hits',hits)\r",
									"  \r",
									"        // find logType\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            //  let logType = hits[i]._source.cauldron.logType\r",
									"            let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"           \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            \r",
									"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
									"            // console.log('resultDataLog',resultDataLog)\r",
									"\r",
									"            let tidControl = x_ais_OrderRef_ControlThings_fail + current_timestamp;\r",
									"            // console.log(tidControl);\r",
									"            if(applicationNameValue == applicationName){\r",
									"                 \r",
									"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ControlAPIs\r",
									"                    pm.test(\"Check Summary Log : ControlThings\" , function () {\r",
									"                        console.log(\"======== Check Summary Log ( Expected = Actual) [ControlThings] ==================\");\r",
									"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
									"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
									"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeNotFound);\r",
									"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionTheRequestedOperationCouldNotBeFound);\r",
									"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
									"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        // console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
									"                        // console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
									"\r",
									"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
									"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
									"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeNotFound ); \r",
									"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionTheRequestedOperationCouldNotBeFound); \r",
									"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
									"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"\r",
									"                        let thingId = JSON.parse(pm.environment.get(\"GetResponse_ThingIDArr\"));\r",
									"                        let customUrl= urlCheckLog + requestObjectUrlStaging;\r",
									"                        let customAccountkey = pm.environment.get(\"GetResponse_AccountId\");\r",
									"\r",
									"                        // check identity\r",
									"                        // \"identity\":\"{\\\"ThingID\\\":[\\\"6012886b96d0ed0001f551ad\\\",\\\"6012886b96d0ed0001f551b5\\\"]}\"\r",
									"                        let dataSummaryIdentity = JSON.parse(resultDataLog.identity);\r",
									"\r",
									"                        console.log(\"identity.ThingID : \" + dataSummaryIdentity.ThingID + \" = \" + thingId);\r",
									"                        pm.expect(dataSummaryIdentity.ThingID).to.eql(thingId); \r",
									"\r",
									"                        // check custom\r",
									"                        // \\\"custom\\\":{ \\\"customData\\\":{ \\\"url\\\":\\\"mg-iot.sandais.com/api/v1/Control/Things\\\", \\\"accountkey\\\":\\\"6099788526fdbc0001c3889f\\\", \\\"ThingID\\\":[ \\\"6099788726fdbc0001c388a9\\\", \\\"5f61cf2d51c1f10001fb779b\\\" ] }, \\\"endPointSummary\\\":[ { \\\"no\\\":\\\"1\\\", \\\"endPointName\\\":\\\"db.AuthenticationCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:Inquiry was Success\\\", \\\"processTime\\\":0.0003 }, { \\\"no\\\":\\\"2\\\", \\\"endPointName\\\":\\\"db.ClientsCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:Inquiry was Success\\\", \\\"processTime\\\":0.0005 }, { \\\"no\\\":\\\"3\\\", \\\"endPointName\\\":\\\"db.AccountsCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:Inquiry was Success\\\", \\\"processTime\\\":0.0002 }, { \\\"no\\\":\\\"4\\\", \\\"endPointName\\\":\\\"db.ThingsCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:Inquiry was Success\\\", \\\"processTime\\\":0.0003 } ] }\r",
									"\r",
									"                        let customData = resultDataLog.custom.customData\r",
									"\r",
									"                        console.log(\"custom.url : \" + customData.url + \" = \" + customUrl);\r",
									"                        console.log(\"custom.accountkey : \" + customData.accountkey + \" = \" + customAccountkey);\r",
									"                        console.log(\"custom.ThingID : [\" + customData.ThingID + \"] = [\" + thingId + \"]\");\r",
									"\r",
									"                        pm.expect(customData.url).to.eql(customUrl); \r",
									"                        pm.expect(customData.accountkey).to.eql(customAccountkey); \r",
									"                        pm.expect(customData.ThingID).to.eql(thingId); \r",
									"\r",
									"                        let custom = resultDataLog.custom.endPointSummary;\r",
									"                        let countCustom = custom.length;\r",
									"                       \r",
									"                        // [\"db.AuthenticationCollection\",\"db.ClientsCollection\",\"db.AccountsCollection\",\"db.ThingsCollection\"]\r",
									"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_ControlThings;\r",
									"                        // [\"20000:Inquiry was Success\",\"20000:Inquiry was Success\",\"20000:Inquiry was Success\",\"20000:Inquiry was Success\"]\r",
									"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_ControlThings;\r",
									"                        let countCustomStep = dataEndPointName.length;\r",
									"\r",
									"                        console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep);\r",
									"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
									"                        \r",
									"                        for(let i=0;i<countCustomStep;i++){\r",
									"                            let no = custom[i].no;\r",
									"                            let valueEndPointName = custom[i].endPointName;\r",
									"                            let valueResponseStatus = custom[i].responseStatus;\r",
									"                            // console.log(\"i\",i);\r",
									"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
									"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
									"\r",
									"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString());\r",
									"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i]);\r",
									"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i]);\r",
									"\r",
									"                            pm.expect(no).to.eql((i+1).toString()); \r",
									"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
									"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]); \r",
									"                        }\r",
									"                    }); \r",
									"                }\r",
									"\r",
									"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail'\r",
									"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
									"                    // console.log('endPointNameValue ',endPointNameValue)\r",
									"\r",
									"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [ControlThings]\", function () {\r",
									"                        console.log(\"======== Check Detail Log ( Expected = Actual) [ControlThings] ==================\");\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
									"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
									"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
									"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
									"\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
									"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
									"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
									"                        // pm.expect(resultDataLog.EndPoint).to.eql(); \r",
									"                        \r",
									"                        // check requestObject\r",
									"                        // \"requestObject\":\"{\\\"headers\\\":{\\\"x-ais-orderref\\\":\\\"ControlThingsfail_202101281301827\\\",\\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAEL8HZk2RWAR3L0/hOZPjC5nvaeNw1EUMpcFyr//lMVTkIlAkkY2KW0\\\"},\\\"body\\\":{\\\"ThingId\\\":[\\\"6012886b96d0ed0001f551ad\\\",\\\"6012886b96d0ed0001f551b5\\\"],\\\"Sensors\\\":{\\\"Temp\\\":925}}}\"\r",
									"\r",
									"                        // \\\"requestObject\\\":\\\"{ \\\\\\\"url\\\\\\\":\\\\\\\"/api/v1/Control/Things\\\\\\\", \\\\\\\"method\\\\\\\":\\\\\\\"POST\\\\\\\", \\\\\\\"headers\\\\\\\":{ \\\\\\\"Cache-Control\\\\\\\":\\\\\\\"no-cache\\\\\\\", \\\\\\\"Content-Type\\\\\\\":\\\\\\\"application/json\\\\\\\", \\\\\\\"Accept\\\\\\\":\\\\\\\"*/*\\\\\\\", \\\\\\\"Accept-Encoding\\\\\\\":\\\\\\\"gzip, deflate, br\\\\\\\", \\\\\\\"Host\\\\\\\":\\\\\\\"mg-iot.sandais.com\\\\\\\", \\\\\\\"User-Agent\\\\\\\":\\\\\\\"PostmanRuntime/7.26.8\\\\\\\", \\\\\\\"Content-Length\\\\\\\":\\\\\\\"119\\\\\\\", \\\\\\\"x-real-ip\\\\\\\":\\\\\\\"182.232.34.151\\\\\\\", \\\\\\\"x-forwarded-for\\\\\\\":\\\\\\\"182.232.34.151, 10.233.65.1\\\\\\\", \\\\\\\"x-forwarded-proto\\\\\\\":\\\\\\\"http\\\\\\\", \\\\\\\"x-ais-orderref\\\\\\\":\\\\\\\"ControlThingsfail_202105110105893\\\\\\\", \\\\\\\"x-ais-accountkey\\\\\\\":\\\\\\\"6099788526fdbc0001c3889f\\\\\\\", \\\\\\\"x-ais-accesstoken\\\\\\\":\\\\\\\"Bearer ibnxnVhs5Rx3IwglWv7/gVA/1TpQnKqAOBAADlRDvYhOpXwmlpYOEb5yfY5aZpoj0YRWRZM26i9HOqtc1fc1jpNDOK5JpISttmMEy59g2py7nLWonDe2YW2OPRGWSowk6+9ZihLU1fZ5d5jAqqrZaKlOAAI3N1TXDNLsHuKcOJMcERbCcaMqRaku+MY4/kzE+eyIdkfwwbjT91S2VQq+Wk2ooMWuLk6/DHVJhwbMP7YLGL7Kfcmd/5Y0vrYNDw36SOhLpEwWCvdKVegMrc8SMg==\\\\\\\", \\\\\\\"postman-token\\\\\\\":\\\\\\\"092116d4-769e-4ec2-a20c-0b24012beb87\\\\\\\", \\\\\\\"x-envoy-external-address\\\\\\\":\\\\\\\"10.233.65.1\\\\\\\", \\\\\\\"x-request-id\\\\\\\":\\\\\\\"3ec72cd5-9751-4e15-9edf-ca7586e82424\\\\\\\", \\\\\\\"x-envoy-original-path\\\\\\\":\\\\\\\"/mg4controlapis/api/v1/Control/Things\\\\\\\", \\\\\\\"x-b3-traceid\\\\\\\":\\\\\\\"a520b5008b41c1f924cc45b6830c114d\\\\\\\", \\\\\\\"x-b3-spanid\\\\\\\":\\\\\\\"a0674f956ce3ecb1\\\\\\\", \\\\\\\"x-b3-parentspanid\\\\\\\":\\\\\\\"24cc45b6830c114d\\\\\\\", \\\\\\\"x-b3-sampled\\\\\\\":\\\\\\\"0\\\\\\\", \\\\\\\"x-ais-SessionId\\\\\\\":\\\\\\\"1620670601405\\\\\\\", \\\\\\\"identity\\\\\\\":\\\\\\\"{ \\\\\\\\\\\\\\\"ThingID\\\\\\\\\\\\\\\":[ \\\\\\\\\\\\\\\"6099788726fdbc0001c388a9\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"5f61cf2d51c1f10001fb779b\\\\\\\\\\\\\\\" ] }\\\\\\\", \\\\\\\"custom\\\\\\\":\\\\\\\"{ \\\\\\\\\\\\\\\"url\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"mg-iot.sandais.com/api/v1/Control/Things\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"accountkey\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"6099788526fdbc0001c3889f\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"ThingID\\\\\\\\\\\\\\\":[ \\\\\\\\\\\\\\\"6099788726fdbc0001c388a9\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"5f61cf2d51c1f10001fb779b\\\\\\\\\\\\\\\" ] }\\\\\\\" }, \\\\\\\"queryString\\\\\\\":{ }, \\\\\\\"routeParamteters\\\\\\\":{ }, \\\\\\\"body\\\\\\\":{ \\\\\\\"ThingId\\\\\\\":[ \\\\\\\"6099788726fdbc0001c388a9\\\\\\\", \\\\\\\"5f61cf2d51c1f10001fb779b\\\\\\\" ], \\\\\\\"Sensors\\\\\\\":{ \\\\\\\"Temp\\\\\\\":558 } } }\\\"\r",
									"\r",
									"                        let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
									"                        // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
									"\r",
									"                        let url = requestObjectUrlStaging; \r",
									"                        let urlCustom = urlCheckLog + requestObjectUrlStaging;\r",
									"                        let SensorKey = fieldDataValue.CreateThingStateInfo.SensorKey;\r",
									"                        let sensor = pm.environment.get(\"random_Sensor_Control\");\r",
									"                        let x_ais_orderref = x_ais_OrderRef_ControlThings_fail + current_timestamp;\r",
									"                        let x_ais_AccountKey = pm.environment.get(\"GetResponse_AccountId\");\r",
									"                        let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken\");\r",
									"                        let thingId = JSON.parse(pm.environment.get(\"GetResponse_ThingIDArr\"));\r",
									" \r",
									"                        console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
									"                        console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
									"                        console.log(\"headers.x_ais_AccountKey : \" + jsonParseRequestObject.headers[header_x_ais_accountkey] + \" = \" + x_ais_AccountKey);\r",
									"                        console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"                        console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
									"\r",
									"                        pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
									"                        pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
									"                        pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                        pm.expect(jsonParseRequestObject.headers[header_x_ais_accountkey]).to.eql(x_ais_AccountKey);\r",
									"                        pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
									"\r",
									"                        let identity = JSON.parse(jsonParseRequestObject.headers.identity)\r",
									"                        console.log(\"headers.identity.ThingID : [\" + identity.ThingID + \"] = [\" + thingId + \"]\");\r",
									"                        pm.expect(identity.ThingID).to.eql(thingId);\r",
									"                        \r",
									"                        let custom = JSON.parse(jsonParseRequestObject.headers.custom)\r",
									"                        console.log(\"headers.custom.url : \" + custom.url + \" = \" + urlCustom);\r",
									"                        console.log(\"headers.custom.accountkey : \" + custom.accountkey + \" = \" + x_ais_AccountKey);\r",
									"                        console.log(\"headers.custom.ThingID : [\" + custom.ThingID + \"] = [\" + thingId + \"]\");\r",
									"                        \r",
									"                        pm.expect(custom.url).to.eql(urlCustom);\r",
									"                        pm.expect(custom.accountkey).to.eql(x_ais_AccountKey);\r",
									"                        pm.expect(custom.ThingID).to.eql(thingId);\r",
									"\r",
									"                        console.log(\"queryString : \" + JSON.stringify(jsonParseRequestObject.queryString) + \" = \" + JSON.stringify({}));\r",
									"                        pm.expect(jsonParseRequestObject.queryString).to.eql({});\r",
									"\r",
									"                        console.log(\"routeParamteters : \" + JSON.stringify(jsonParseRequestObject.routeParamteters) + \" = \" + JSON.stringify({}));\r",
									"                        pm.expect(jsonParseRequestObject.routeParamteters).to.eql({});\r",
									"\r",
									"                        console.log(\"resquest.body.ThingId : [\" + jsonParseRequestObject.body.ThingId + \"] = [\" + thingId + \"]\");\r",
									"                        console.log(\"resquest.body.Sensors.\" + SensorKey + \"  : \" + jsonParseRequestObject.body.Sensors[SensorKey] + \" = \" + sensor);\r",
									"\r",
									"                        pm.expect(jsonParseRequestObject.body.ThingId).to.eql(thingId);\r",
									"                        pm.expect(jsonParseRequestObject.body.Sensors[SensorKey]).to.eql(sensor);\r",
									"\r",
									"                        // check responseObject\r",
									"                            // \\\"responseObject\\\":\\\"{ \\\\\\\"OperationStatus\\\\\\\":{ \\\\\\\"Code\\\\\\\":\\\\\\\"40400\\\\\\\", \\\\\\\"DeveloperMessage\\\\\\\":\\\\\\\"The requested operation could not be found.\\\\\\\", \\\\\\\"Details\\\\\\\":[ { \\\\\\\"Target\\\\\\\":\\\\\\\"ThingId\\\\\\\", \\\\\\\"DeveloperMessage\\\\\\\":\\\\\\\"The ThingId '5f61cf2d51c1f10001fb779b' could not be found.\\\\\\\" } ] } }\\\"\r",
									"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
									"                            // console.log('jsonParseResponseObject',jsonParseResponseObject);\r",
									"\r",
									"                            console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeNotFound);\r",
									"                            console.log(\"response.OperationStatus.DeveloperMessage : \" + jsonParseResponseObject.OperationStatus.DeveloperMessage + \" = \" + resultDescriptionTheRequestedOperationCouldNotBeFound);\r",
									"\r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeNotFound);  \r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheRequestedOperationCouldNotBeFound);  \r",
									"\r",
									"                            let countDetails= jsonData.OperationStatus.Details;\r",
									"                            for(let i=0;i<countDetails.length;i++){\r",
									"\r",
									"                                console.log(\"response.OperationStatus.Details[\"+ i +\"].Target : \" + countDetails[i].Target + \" = \" + detailsResponse.target_ThingId);\r",
									"                                console.log(\"response.OperationStatus.Details[\"+ i +\"].DeveloperMessage : \" + countDetails[i].DeveloperMessage + \" = \" + resultDescriptionErrorTheThingId2 + \"'\"+ ThingId_Value_ControlThings_004+ \"'\"+ resultDescriptionErrorCouldNotBeFound);\r",
									"\r",
									"                                pm.expect(countDetails[i].Target).to.eql(detailsResponse.target_ThingId);\r",
									"                                pm.expect(countDetails[i].DeveloperMessage).to.eql(resultDescriptionErrorTheThingId2 + \"'\"+ ThingId_Value_ControlThings_004+ \"'\"+ resultDescriptionErrorCouldNotBeFound);\r",
									"                            } \r",
									"                    }); \r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"setTimeout(function(){SearchLogFindTid();}, 20000); \r",
									"setTimeout(function(){CheckLog();}, 30000); \r",
									"\r",
									"setTimeout(function(){RemoveThingStateInfo();}, 40000); \r",
									"setTimeout(function(){RemoveThing();}, 45000); \r",
									"setTimeout(function(){RemoveAccount();}, 50000); \r",
									"setTimeout(function(){RemovePartner();}, 55000); \r",
									"\r",
									"setTimeout(function(){\r",
									"pm.environment.unset(\"current_timestamp\");\r",
									"pm.environment.unset(\"AccessToken\");\r",
									"pm.environment.unset(\"random_number\");\r",
									"pm.environment.unset(\"PartnerName\");\r",
									"pm.environment.unset(\"MerchantContact\");\r",
									"pm.environment.unset(\"CPID\");\r",
									"pm.environment.unset(\"GetResponse_PartnerId\");\r",
									"pm.environment.unset(\"AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountId\");\r",
									"for(let i=0;i<countData;i++){\r",
									"pm.environment.unset(\"random_IM\"+[i+1]);\r",
									"pm.environment.unset(\"random_ICCID\"+[i+1]);\r",
									"pm.environment.unset(\"ThingName\"+[i+1]);\r",
									"}\r",
									"pm.environment.unset(\"GetResponse_ThingIDArr\");\r",
									"pm.environment.unset(\"random_Sensor\");\r",
									"pm.environment.unset(\"tid\");\r",
									"pm.environment.unset(\"sessionId\");\r",
									"pm.environment.unset(\"SensorKey\");\r",
									"pm.environment.unset(\"random_Sensor_Control\");\r",
									"}, 90000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var Username = pm.environment.get(\"Username\");\r",
									"var Password = pm.environment.get(\"Password\");\r",
									"\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//count for loop data\r",
									"var countData = 1;\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"pm.environment.set(\"SensorKey\",fieldDataValue.CreateThingStateInfo.SensorKey)\r",
									"//mockup Data for case ControlThing_TST_F2_0_2_004 \"5f61cf2d51c1f10001fb779b\"\r",
									"var mockupData = fieldDataValue.Control.Value_ControlThing_TST_F2_0_2_004_Error; \r",
									"\r",
									"//format YYYYMMDDHHMMSSS\r",
									"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
									"// console.log('currentTmestamp',currentTmestamp);\r",
									"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- statusCodeList --------------//\r",
									"//set variable to statusCodeList JSON.parse\r",
									"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
									"//set global variable to statusCode 200\r",
									"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
									"//set global variable to statusCode 201\r",
									"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
									"//set global variable to statusCode 404\r",
									"pm.globals.set(\"statusCodeNotFound\", statusCodeList.statusCodeNotFound);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultCodeList --------------//\r",
									"//set variable to resultCodeList JSON.parse\r",
									"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
									"//set global variable to resultCode \"20000\"\r",
									"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
									"//set global variable to resultCode \"20100\"\r",
									"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
									"//set global variable to resultCode \"40400\"\r",
									"pm.globals.set(\"resultCodeNotFound\", resultCodeList.resultCodeNotFound);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionSuccessList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
									"//set global variable to resultDescription \"SignInProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
									"//set global variable to resultDescription \"CreatePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
									"//set global variable to resultDescription \"CreateAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
									"//set global variable to resultDescription \"CreateThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThing\", resultDescriptionSuccessList.resultDescriptionCreateThing);\r",
									"//set global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThingStateInfo\", resultDescriptionSuccessList.resultDescriptionCreateThingStateInfo);\r",
									"//set global variable to resultDescription \"RemovePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
									"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
									"//set global variable to resultDescription \"RemoveThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThing\", resultDescriptionSuccessList.resultDescriptionRemoveThing);\r",
									"//set global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThingStateInfo\", resultDescriptionSuccessList.resultDescriptionRemoveThingStateInfo);\r",
									"//set global variable to resultDescription \"Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccess\", resultDescriptionSuccessList.resultDescriptionSuccess);\r",
									"//set global variable to resultDescription \"Created Success\"\r",
									"pm.globals.set(\"resultDescriptionCreatedSuccess\", resultDescriptionSuccessList.resultDescriptionCreatedSuccess);\r",
									"//set global variable to resultDescription \"ControlManyThings is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessControlManyThings\", resultDescriptionSuccessList.resultDescriptionSuccessControlManyThings);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionErrorList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
									"//set global variable to resultDescription \"The ThingId : \"\r",
									"// pm.globals.set(\"resultDescriptionErrorTheThingId\", resultDescriptionErrorList.resultDescriptionErrorTheThingId);\r",
									"//set global variable to resultDescription \" is Not Found\"\r",
									"// pm.globals.set(\"resultDescriptionErrorIsNotFound\", resultDescriptionErrorList.resultDescriptionErrorIsNotFound);\r",
									"//set global variable to resultDescription \"The requested operation could not be found.\"\r",
									"pm.globals.set(\"resultDescriptionTheRequestedOperationCouldNotBeFound\", resultDescriptionErrorList.resultDescriptionTheRequestedOperationCouldNotBeFound);\r",
									"//set global variable to resultDescription \"The ThingId \"\r",
									"pm.globals.set(\"resultDescriptionErrorTheThingId2\", resultDescriptionErrorList.resultDescriptionErrorTheThingId2);\r",
									"//set global variable to resultDescription \" could not be found.\"\r",
									"pm.globals.set(\"resultDescriptionErrorCouldNotBeFound\", resultDescriptionErrorList.resultDescriptionErrorCouldNotBeFound);\r",
									"//------------------------------------------------------------//\r",
									"//set variable to HeaderList JSON.parse\r",
									"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
									"//---------------- set globals Other --------------//\r",
									"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
									"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
									"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
									"//set global variable to kbn-versio \"7.5.1\"\r",
									"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Signin_ --------------//\r",
									"//set global variable to x_ais_OrderRef \"Signin_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreatePartner --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
									"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
									"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
									"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreateAccount --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
									"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
									"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Thing --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThing\", HeaderList.Thing.x_ais_OrderRef_CreateThing);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThing\", HeaderList.Thing.x_ais_OrderDesc_CreateThing);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThing\", HeaderList.Thing.x_ais_OrderRef_RemoveThing);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThing\", HeaderList.Thing.x_ais_OrderDesc_RemoveThing);\r",
									"//set global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_RemoveThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_RemoveThingStateInfo);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Control --------------//\r",
									"//set global variable to x_ais_OrderRef \"ControlThings_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ControlThings\", HeaderList.Control.x_ais_OrderRef_ControlThings);\r",
									"//set global variable to x_ais_OrderRef \"ControlThingsfail_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ControlThings_fail\", HeaderList.Control.x_ais_OrderRef_ControlThings_fail);\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"SignInProcess is Success\"\r",
									"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
									"//get global variable to resultDescription \"CreatePartner is Success\"\r",
									"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
									"//get global variable to resultDescription \"CreateAccount is Success\"\r",
									"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
									"//get global variable to resultDescription \"CreateThing is Success\"\r",
									"var resultDescriptionCreateThing = pm.globals.get(\"resultDescriptionCreateThing\");\r",
									"//get global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"var resultDescriptionCreateThingStateInfo = pm.globals.get(\"resultDescriptionCreateThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- urlRouteList --------------//\r",
									"//set variable to urlRouteList JSON.parse\r",
									"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
									"//---------------- set url Create --------------//\r",
									"//set global variable to url \"/api/v1/auth/signin\"\r",
									"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
									"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
									"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"pm.globals.set(\"urlThingCreateThing\", urlRouteList.Thing.urlThingCreateThing);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"pm.globals.set(\"urlThingCreateThingStateInfo\", urlRouteList.Thing.urlThingCreateThingStateInfo);\r",
									"//---------------- get url Create --------------//\r",
									"//get global variable to url \"/api/v1/auth/signin\"\r",
									"var urlSignin = pm.globals.get(\"urlSignin\");\r",
									"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
									"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"var urlThingCreateThing = pm.globals.get(\"urlThingCreateThing\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"var urlThingCreateThingStateInfo = pm.globals.get(\"urlThingCreateThingStateInfo\");\r",
									"//---------------- set url Remove --------------//\r",
									"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
									"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"pm.globals.set(\"urlThingRemoveThing\", urlRouteList.Thing.urlThingRemoveThing);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"pm.globals.set(\"urlThingRemoveThingStateInfo\", urlRouteList.Thing.urlThingRemoveThingStateInfo);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Signin_ --------------//\r",
									"//get global variable to x_ais_OrderRef \"Signin_\"\r",
									"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"var x_ais_OrderRef_CreateThing = pm.globals.get(\"x_ais_OrderRef_CreateThing\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"var x_ais_OrderDesc_CreateThing = pm.globals.get(\"x_ais_OrderDesc_CreateThing\");\r",
									"//get global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"var x_ais_OrderRef_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderRef_CreateThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"var x_ais_OrderDesc_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_CreateThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            // console.log('response111',response);\r",
									"            // console.log('errerrerr',err);\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// Signin get token\r",
									" Signin = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSignin = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestSignin = {\r",
									"            mode: 'raw',\r",
									"            raw: \r",
									"            JSON.stringify({\r",
									"                username:Username,\r",
									"                password:Password\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsSignin = {\r",
									"            url: url + provisioningapis + urlSignin,\r",
									"            method: 'POST',\r",
									"            header: headersOptSignin,\r",
									"            body: httpRequestSignin\r",
									"        };\r",
									"        // console.log('request Signin');\r",
									"        let response = await reqPromise(optionsSignin);\r",
									"        let jsonDataSignin = await response.json();\r",
									"\r",
									"        // setAccessToken\r",
									"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
									"\r",
									"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // SignInProcess is Success\r",
									"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
									"        });\r",
									"\r",
									"        //set random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //set PartnerName\r",
									"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
									"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
									"        //set MerchantContact\r",
									"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
									"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
									"        // set CPID\r",
									"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
									"        pm.environment.set(\"CPID\", CPIDValue)\r",
									"        \r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreatePartner\r",
									" CreatePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreatePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreatePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
									"                \"PartnerType\": [\r",
									"                    \"Supplier\",\r",
									"                    \"Customer\"\r",
									"                ],\r",
									"                \"PartnerDetail\": {\r",
									"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
									"                    \"CPID\": pm.environment.get(\"CPID\")\r",
									"                },\r",
									"                \"Property\": {\r",
									"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsCreatePartner = {\r",
									"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreatePartner,\r",
									"            body: httpRequestCreatePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsCreatePartner);\r",
									"        let jsonDataCreatePartner = await response.json();\r",
									"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
									"    \r",
									"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreatePartner is Success\r",
									"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
									"        });\r",
									"\r",
									"        //GetResponse_PartnerId\r",
									"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
									"\r",
									"        //Accountname\r",
									"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
									"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateAccount\r",
									" CreateAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreateAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
									"                })\r",
									"        };\r",
									"        \r",
									"        let optionsCreateAccount = {\r",
									"            url: url + provisioningapis + urlAccountCreateAccount,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateAccount,\r",
									"            body: httpRequestCreateAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateAccount');\r",
									"        let response = await reqPromise(optionsCreateAccount);\r",
									"        let jsonDataCreateAccount = await response.json();\r",
									"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
									"    \r",
									"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateAccount : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateAccount is Success\r",
									"        pm.test('CreateAccount : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
									"        });\r",
									"        // GetResponse_AccountName\r",
									"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
									"        // GetResponse_AccountId\r",
									"        pm.environment.set(\"GetResponse_AccountId\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
									"       \r",
									"        // // random_IM\r",
									"        // pm.environment.set(\"random_IM\", _.random(10000000, 99999999)+\" \"+_.random(1000000, 9999999))\r",
									"        // // random_ICCID\r",
									"        // pm.environment.set(\"random_ICCID\", _.random(1000000, 9999999)+\" \"+_.random(100000, 999999))\r",
									"        // // random_number\r",
									"        // pm.environment.set(\"random_number\",pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        // //ThingName\r",
									"        // let thingNameValue = fieldDataValue.Thing.ThingNameValue; // \"Sensor_TestThingName\"\r",
									"        // pm.environment.set(\"ThingName\", thingNameValue + pm.environment.get(\"random_number\"))\r",
									"\r",
									"        // random_number\r",
									"        pm.environment.set(\"random_number\",pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"\r",
									"        for(let i=0;i<countData;i++){\r",
									"            // random_IM\r",
									"            pm.environment.set(\"random_IM\"+[i+1], _.random(10000000, 99999999)+\" \"+_.random(1000000, 9999999))\r",
									"            // random_ICCID\r",
									"            pm.environment.set(\"random_ICCID\"+[i+1], _.random(1000000, 9999999)+\" \"+_.random(100000, 999999))\r",
									"\r",
									"            //ThingName\r",
									"            let thingNameValue = fieldDataValue.Thing.ThingNameValue; // \"Sensor_TestThingName\"\r",
									"            pm.environment.set(\"ThingName\"+[i+1],thingNameValue + [i+1] + pm.environment.get(\"random_number\"))\r",
									"        }\r",
									"            \r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThing\r",
									" CreateThingArr = async () =>  {\r",
									"    try {\r",
									"        \r",
									"        // header\r",
									"        let headersOptCreateThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThing');\r",
									"        let dataThingIdArr = [];\r",
									"        for(let i=0;i<countData;i++){\r",
									"            // body\r",
									"            let httpRequestCreateThing = {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                    \"ThingName\": pm.environment.get(\"ThingName\"+ [i+1]),\r",
									"                    \"IMEI\": pm.environment.get(\"random_IM\"+ [i+1]),\r",
									"                    \"IMSI\": pm.environment.get(\"random_IM\"+ [i+1]),\r",
									"                    \"ICCID\": pm.environment.get(\"random_ICCID\"+ [i+1]),\r",
									"                    \"RouteUrl\": fieldDataValue.Thing.RouteUrlValue , //[\"http://10.12.3.4:2019/api/information/AddInformation\"]\r",
									"                    \"RouteInfo\": {\r",
									"                        \"MIMO_ID\": fieldDataValue.Thing.RouteInfoMIMOIDValue , //\"606edada\"\r",
									"                        \"MIMO_SerialNo\": fieldDataValue.Thing.RouteInfoMIMOSerialNoValue //5466758878\r",
									"                    },\r",
									"                    \"RouteFlag\": {\r",
									"                        \"ThingName\": fieldDataValue.Thing.RouteFlagThingNameValue , //true\r",
									"                        \"ThingToken\": fieldDataValue.Thing.RouteFlagThingTokenValue, //true\r",
									"                        \"IMEI\": fieldDataValue.Thing.RouteFlagIMEIValue, //true\r",
									"                        \"ICCID\": fieldDataValue.Thing.RouteFlagICCIDValue, //true\r",
									"                        \"RouteInfo\": fieldDataValue.Thing.RouteFlagRouteInfoValue //true\r",
									"                    }\r",
									"                })\r",
									"            };\r",
									"            \r",
									"            let optionsCreateThing = {\r",
									"                url: url + provisioningapis + urlThingCreateThing,\r",
									"                method: 'POST',\r",
									"                header: headersOptCreateThing,\r",
									"                body: httpRequestCreateThing\r",
									"            };\r",
									"            let response = await reqPromise(optionsCreateThing);\r",
									"            let jsonDataCreateThing = await response.json();\r",
									"            let ThingId = await jsonDataCreateThing.ThingInfo.ThingId;\r",
									"            dataThingIdArr.push(ThingId);\r",
									"            let operationStatusCreateThing = await jsonDataCreateThing.OperationStatus;\r",
									"\r",
									"            //201\r",
									"            pm.test(\"CreateThing\"+ [i+1]+ \" : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"                pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"            });\r",
									"            //20100\r",
									"            pm.test('CreateThing'+ [i+1]+ ' : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"                pm.expect(operationStatusCreateThing).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"            });\r",
									"            //CreateThing is Success\r",
									"            pm.test('CreateThing'+ [i+1]+ ' : OperationStatus Description is '+'\"'+ resultDescriptionCreateThing+'\"', function () {\r",
									"                pm.expect(operationStatusCreateThing).to.have.property('Description', resultDescriptionCreateThing);\r",
									"            });\r",
									"        }\r",
									"        //mockup Data\r",
									"        dataThingIdArr.push(mockupData);\r",
									"        // console.log('dataThingIdArr',dataThingIdArr);\r",
									"        // pm.environment.set(\"GetResponse_ThingID\",jsonDataCreateThing.ThingInfo.ThingId)\r",
									"        pm.environment.set(\"GetResponse_ThingIDArr\",JSON.stringify(dataThingIdArr))\r",
									"        \r",
									"        \r",
									"        //Get Random Sensor \r",
									"        pm.environment.set(\"random_Sensor\", _.random(100, 999))\r",
									"\r",
									"        //Get Random Sensor Control\r",
									"        pm.environment.set(\"random_Sensor_Control\", _.random(100, 999))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThingStateInfo\r",
									" CreateThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let dataThingIDArray = JSON.parse(pm.environment.get(\"GetResponse_ThingIDArr\"));\r",
									"        // console.log('dataThingIDArray',dataThingIDArray);\r",
									"\r",
									"        // {\"Temp\" : pm.environment.get(\"random_Sensor\")}\r",
									"        let sensorValue = {};\r",
									"        sensorValue[fieldDataValue.CreateThingStateInfo.SensorKey] = pm.environment.get(\"random_Sensor\");\r",
									"        // console.log('sensorValue',sensorValue);\r",
									"        \r",
									"        let httpRequestCreateThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\":[dataThingIDArray[0]],\r",
									"                \"Type\": fieldDataValue.CreateThingStateInfo.Type_Report,\r",
									"                \"Sensor\": sensorValue\r",
									"            })\r",
									"        };\r",
									"        // console.log('httpRequestCreateThingStateInfo',httpRequestCreateThingStateInfo);\r",
									"            let optionsCreateThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingCreateThingStateInfo,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThingStateInfo,\r",
									"            body: httpRequestCreateThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThingStateInfo');\r",
									"        let response = await reqPromise(optionsCreateThingStateInfo);\r",
									"        let jsonDataCreateThingStateInfo = await response.json();\r",
									"        let operationStatusCreateThingStateInfo = await jsonDataCreateThingStateInfo.OperationStatus;\r",
									"        // console.log('operationStatusCreateThingStateInfo',operationStatusCreateThingStateInfo);\r",
									"\r",
									"        //200\r",
									"        pm.test(\"CreateThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //CreateThingStateInfo is Success\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionCreateThingStateInfo+'\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Description', resultDescriptionCreateThingStateInfo);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"Signin();\r",
									"setTimeout(async function(){await CreatePartner();}, 3000); \r",
									"setTimeout(async function(){await CreateAccount();}, 6000); \r",
									"setTimeout(async function(){await CreateThingArr();}, 8000); \r",
									"setTimeout(async function(){await CreateThingStateInfo();}, 9000); \r",
									"setTimeout(async function(){}, 10000);  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-ais-OrderRef",
								"value": "{{x_ais_OrderRef_ControlThings_fail}}{{current_timestamp}}"
							},
							{
								"key": "x-ais-AccountKey",
								"type": "text",
								"value": "{{GetResponse_AccountId}}"
							},
							{
								"key": "x-ais-AccessToken",
								"value": "{{Bearer}} {{AccessToken}}"
							},
							{
								"key": "Accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"ThingId\": {{GetResponse_ThingIDArr}},\r\n  \"Sensors\": {\r\n    \"{{SensorKey}}\": {{random_Sensor_Control}}\r\n    \r\n  }\r\n}"
						},
						"url": {
							"raw": "{{url}}{{mg4controlapis}}/api/v1/Control/Things",
							"host": [
								"{{url}}{{mg4controlapis}}"
							],
							"path": [
								"api",
								"v1",
								"Control",
								"Things"
							]
						},
						"description": "Type:Desire"
					},
					"response": []
				}
			]
		},
		{
			"name": "ControlThingGroup",
			"item": [
				{
					"name": "ControlThingGroup_TST_F3_1_1_001_Success_SensorIsText",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//count for loop data\r",
									"var countData = 2;\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to xAisOrderRef \"RemoveThing_\"\r",
									"var x_ais_OrderRef_RemoveThing = pm.globals.get(\"x_ais_OrderRef_RemoveThing\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"var x_ais_OrderDesc_RemoveThing = pm.globals.get(\"x_ais_OrderDesc_RemoveThing\");\r",
									"//get global variable to xAisOrderRef \"InquiryThing_\"\r",
									"var x_ais_OrderRef_InquiryThing = pm.globals.get(\"x_ais_OrderRef_InquiryThing\");\r",
									"//get global variable to x_ais_OrderDesc \"InquiryThing\"\r",
									"var x_ais_OrderDesc_InquiryThing = pm.globals.get(\"x_ais_OrderDesc_InquiryThing\");\r",
									"//get global variable to x_ais_OrderRef \"RemoveThingStateInfo_\"\r",
									"var x_ais_OrderDesc_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_RemoveThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThingStateInfo\"\r",
									"var x_ais_OrderRef_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderRef_RemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Group --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveGroup_\"\r",
									"var x_ais_OrderRef_RemoveGroup = pm.globals.get(\"x_ais_OrderRef_RemoveGroup\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveGroup\"\r",
									"var x_ais_OrderDesc_RemoveGroup = pm.globals.get(\"x_ais_OrderDesc_RemoveGroup\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Control --------------//\r",
									"//get global variable to x_ais_OrderRef \"ControlThingGroup_\"\r",
									"var x_ais_OrderRef_ControlThingGroup = pm.globals.get(\"x_ais_OrderRef_ControlThingGroup\");\r",
									"//get global variable to x_ais_OrderRef \"ControlThingGroupfail_\"\r",
									"var x_ais_OrderRef_ControlThingGroup_fail = pm.globals.get(\"x_ais_OrderRef_ControlThingGroup_fail\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get url Remove --------------//\r",
									"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
									"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"var urlThingRemoveThing = pm.globals.get(\"urlThingRemoveThing\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"var urlThingRemoveThingStateInfo = pm.globals.get(\"urlThingRemoveThingStateInfo\");\r",
									"//get global variable to url \"/api/v1/Group/RemoveGroup\"\r",
									"var urlGroupRemoveGroup = pm.globals.get(\"urlGroupRemoveGroup\");\r",
									"//---------------- get url Inquiry --------------//\r",
									"//get global variable to url \"/api/v1/Thing/InquiryThingr\"\r",
									"var urlThingInquiryThing = pm.globals.get(\"urlThingInquiryThing\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"RemovePartner is Success\"\r",
									"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
									"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
									"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
									"//get global variable to resultDescription \"RemoveThing is Success\"\r",
									"var resultDescriptionRemoveThing = pm.globals.get(\"resultDescriptionRemoveThing\");\r",
									"//get global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"var resultDescriptionRemoveThingStateInfo = pm.globals.get(\"resultDescriptionRemoveThingStateInfo\");\r",
									"//get global variable to resultDescription \"RemoveGroup is Success\"\r",
									"var resultDescriptionRemoveGroup = pm.globals.get(\"resultDescriptionRemoveGroup\");\r",
									"//get global variable to resultDescription \"InquiryThing is Success\"\r",
									"var resultDescriptionInquiryThing = pm.globals.get(\"resultDescriptionInquiryThing\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to resultDescription \"ControlOneGroup is Success\"\r",
									"// var resultDescriptionSuccessControlOneGroup = pm.globals.get(\"resultDescriptionSuccessControlOneGroup\");\r",
									"//get global variable to resultDescription \"The requested operation was successfully.\"\r",
									"var resultDescriptionTheRequestedOperationWasSuccessfully = pm.globals.get(\"resultDescriptionTheRequestedOperationWasSuccessfully\");\r",
									"//------------------------------------------------------------//\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"ControlThingGroup : Status code is \" + statusCodeSuccess, function () {\r",
									"    pm.response.to.have.status(statusCodeSuccess);\r",
									"});\r",
									"\r",
									"pm.test('ControlThingGroup : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeSuccess);\r",
									"});\r",
									"\r",
									"pm.test('ControlThingGroup : OperationStatus DeveloperMessage is '+'\"'+ resultDescriptionTheRequestedOperationWasSuccessfully+'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"});\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// RemovePartner\r",
									" RemovePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemovePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemovePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemovePartner = {\r",
									"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemovePartner,\r",
									"            body: httpRequestRemovePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request RemovePartner');\r",
									"        let response = await reqPromise(optionsRemovePartner);\r",
									"        let jsonDataRemovePartner = await response.json();\r",
									"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
									"    \r",
									"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemovePartner is Success\r",
									"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveAccount\r",
									" RemoveAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemoveAccount = {\r",
									"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveAccount,\r",
									"            body: httpRequestRemoveAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveAccount');\r",
									"        let response = await reqPromise(optionsRemoveAccount);\r",
									"        let jsonDataRemoveAccount = await response.json();\r",
									"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
									"    \r",
									"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveAccount is Success\r",
									"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThing\r",
									" RemoveThing = async () =>  {\r",
									"    try {\r",
									"\r",
									"        // header\r",
									"        let headersOptRemoveThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        let dataThingIDArray = JSON.parse(pm.environment.get(\"GetResponse_ThingIDArr\"));\r",
									"\r",
									"        for(let i=0;i<countData;i++){\r",
									"\r",
									"            // body\r",
									"            let httpRequestRemoveThing = {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                    \"ThingId\": dataThingIDArray[i]\r",
									"                })\r",
									"            };\r",
									"\r",
									"            let optionsRemoveThing = {\r",
									"                url: url + provisioningapis + urlThingRemoveThing,\r",
									"                method: 'DELETE',\r",
									"                header: headersOptRemoveThing,\r",
									"                body: httpRequestRemoveThing\r",
									"            };\r",
									"            // console.log('request RemoveThing');\r",
									"            let response = await reqPromise(optionsRemoveThing);\r",
									"            let jsonDataRemoveThing = await response.json();\r",
									"            // console.log('jsonDataRemoveThing',jsonDataRemoveThing)\r",
									"        \r",
									"            let operationStatusRemoveThing = await jsonDataRemoveThing.OperationStatus;\r",
									"\r",
									"            //200\r",
									"            pm.test(\"RemoveThing\" + [i+1]+ \" : Status code is \" + statusCodeSuccess, function () {\r",
									"                pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"            });\r",
									"            //20000\r",
									"            pm.test('RemoveThing' + [i+1]+ ' : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"                pm.expect(operationStatusRemoveThing).to.have.property('Code', resultCodeSuccess);\r",
									"            });\r",
									"            //RemoveThing is Success\r",
									"            pm.test('RemoveThing' + [i+1]+ ' : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThing+'\"', function () {\r",
									"                pm.expect(operationStatusRemoveThing).to.have.property('Description', resultDescriptionRemoveThing);\r",
									"            });\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThingStateInfo\r",
									" RemoveThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"            \r",
									"        };\r",
									"\r",
									"        let dataThingIDArray = JSON.parse(pm.environment.get(\"GetResponse_ThingIDArr\"));\r",
									"\r",
									"        for(let i=0;i<dataThingIDArray.length;i++){\r",
									"        \r",
									"            // body\r",
									"            let httpRequestRemoveThingStateInfo = {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                    \"ThingId\": dataThingIDArray[i],\r",
									"                    \"stateType\": fieldDataValue.CreateThingStateInfo.Type_Report, //Report\r",
									"                    \"stateKey\": fieldDataValue.CreateThingStateInfo.SensorKey //Temp\r",
									"                })\r",
									"            };\r",
									"\r",
									"            let optionsRemoveThingStateInfo = {\r",
									"                url: url + provisioningapis + urlThingRemoveThingStateInfo,\r",
									"                method: 'DELETE',\r",
									"                header: headersOptRemoveThingStateInfo,\r",
									"                body: httpRequestRemoveThingStateInfo\r",
									"            };\r",
									"\r",
									"            // console.log('response RemoveThingStateInfo');\r",
									"            let response = await reqPromise(optionsRemoveThingStateInfo);\r",
									"            let jsonDataRemoveThingStateInfo = await response.json();\r",
									"            // console.log('jsonDataRemoveThing',jsonDataRemoveThingStateInfo)\r",
									"        \r",
									"            let operationStatusRemoveThingStateInfo = await jsonDataRemoveThingStateInfo.OperationStatus;\r",
									"\r",
									"            //200\r",
									"            pm.test(\"RemoveThingStateInfo\" + [i+1] + \" : Status code is \" + statusCodeSuccess, function () {\r",
									"                pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"            });\r",
									"            //20000\r",
									"            pm.test('RemoveThingStateInfo' + [i+1] + ' : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"                pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"            });\r",
									"            //RemoveThingStateInfo is Success\r",
									"            pm.test('RemoveThingStateInfo' + [i+1] + ' : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThingStateInfo+'\"', function () {\r",
									"                pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Description', resultDescriptionRemoveThingStateInfo);\r",
									"            });\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveGroup\r",
									" RemoveGroup = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveGroup = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveGroup + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveGroup,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"            \r",
									"        };\r",
									"\r",
									"        // let dataThingIDArray = JSON.parse(pm.environment.get(\"GetResponse_ThingIDArr\"));\r",
									"\r",
									"        // for(let i=0;i<dataThingIDArray.length;i++){\r",
									"        \r",
									"            // body\r",
									"            let httpRequestRemoveGroup = {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                    \"GroupId\": pm.environment.get(\"GetResponse_ThingGroupID\")\r",
									"                })\r",
									"            };\r",
									"\r",
									"            let optionsRemoveGroup = {\r",
									"                url: url + provisioningapis + urlGroupRemoveGroup,\r",
									"                method: 'DELETE',\r",
									"                header: headersOptRemoveGroup,\r",
									"                body: httpRequestRemoveGroup\r",
									"            };\r",
									"\r",
									"            // console.log('response RemoveGroup');\r",
									"            let response = await reqPromise(optionsRemoveGroup);\r",
									"            let jsonDataRemoveGroup = await response.json();\r",
									"            // console.log('jsonDataRemoveThing',jsonDataRemoveGroup)\r",
									"        \r",
									"            let operationStatusRemoveGroup = await jsonDataRemoveGroup.OperationStatus;\r",
									"\r",
									"            //200\r",
									"            pm.test(\"RemoveGroup : Status code is \" + statusCodeSuccess, function () {\r",
									"                pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"            });\r",
									"            //20000\r",
									"            pm.test('RemoveGroup : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"                pm.expect(operationStatusRemoveGroup).to.have.property('Code', resultCodeSuccess);\r",
									"            });\r",
									"            //RemoveGroup is Success\r",
									"            pm.test('RemoveGroup : OperationStatus Description is '+'\"'+ resultDescriptionRemoveGroup+'\"', function () {\r",
									"                pm.expect(operationStatusRemoveGroup).to.have.property('Description', resultDescriptionRemoveGroup);\r",
									"            });\r",
									"        // }\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"//---------------- LogDefaultValue --------------//\r",
									"//set variable to LogDefaultValue JSON.parse\r",
									"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
									"// console.log('LogDefaultValue',LogDefaultValue);\r",
									"//---------------- set globals Other --------------//\r",
									"var SearchLog = LogDefaultValue.SearchLog;\r",
									"// console.log('SearchLog',SearchLog);\r",
									"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
									"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
									"var kbn_version = SearchLog.header.kbn_version;\r",
									"var authorization = SearchLog.header.Authorization;\r",
									"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
									"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
									"var namespace = LogDefaultValue.Other.namespace_control4mg;\r",
									"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
									"var header_x_ais_accountkey = LogDefaultValue.Other.header_x_ais_accountkey;\r",
									"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
									"var methodPost = LogDefaultValue.Other.methodPost;\r",
									"\r",
									"// Detail\r",
									"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
									"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
									"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
									"\r",
									"// Summary\r",
									"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
									"// ControlAPIs\r",
									"var applicationName = LogDefaultValue.Control.applicationName_mg4;\r",
									"var cmdName = LogDefaultValue.Control.cmdNameThingGroup;\r",
									"// var resultDesc = LogDefaultValue.Control.resultDescThing_success;\r",
									"var endPointNameControlAPIs = LogDefaultValue.Control.endPointNameControlAPIs;\r",
									"var endPointNameDesireEx = LogDefaultValue.Control.endPointNameDesireEx;\r",
									"var endPointNameRabbitMQ = LogDefaultValue.Control.endPointNameRabbitMQ;\r",
									"var containerId = LogDefaultValue.Control.containerId;\r",
									"var requestObjectUrlStaging = LogDefaultValue.Control.requestObjectUrlStagingThingGroup;\r",
									"var xProtocolControl = LogDefaultValue.Control.xProtocolControl;\r",
									"var responseObjectPublished = LogDefaultValue.Control.responseObjectPublished;\r",
									"\r",
									"// Check CDR (Summary Log) and EDR (Detail Log)\r",
									"SearchLogFindTid = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSearchLogFindTid = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        // let valueSearch = pm.environment.get(\"GetResponse_ThingID\"); \r",
									"        let valueSearch = x_ais_OrderRef_ControlThingGroup +  current_timestamp; \r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestSearchLogFindTid = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"\r",
									"        let optionsSearchLogFindTid = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptSearchLogFindTid,\r",
									"            body: httpRequestSearchLogFindTid\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsSearchLogFindTid);\r",
									"        let jsonDataSearchLogFindTid = await response.json();\r",
									"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
									"        console.log('hits',hits)\r",
									"  \r",
									"        // find tid\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            // let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"        \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            if(applicationNameValue == applicationName){\r",
									"                // let tid = hits[i]._source.cauldron.tid;\r",
									"                // pm.environment.set(\"tid\", tid);\r",
									"                let sessionId = hits[i]._source.cauldron.sessionId;\r",
									"                pm.environment.set(\"sessionId\", sessionId);\r",
									"                break;\r",
									"           }\r",
									"        }\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"CheckLog = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCheckLog = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = pm.environment.get(\"sessionId\");\r",
									"\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestCheckLog = {\r",
									"            mode: 'raw',\r",
									"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"        let optionsCheckLog = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptCheckLog,\r",
									"            body: httpRequestCheckLog\r",
									"        }; \r",
									"        let response = await reqPromise(optionsCheckLog);\r",
									"        let jsonDataCheckLog = await response.json();\r",
									"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
									"        \r",
									"        // //200\r",
									"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });     \r",
									"        \r",
									"        let hits = jsonDataCheckLog.hits.hits\r",
									"        console.log('hits',hits)\r",
									"  \r",
									"        // find logType\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            //  let logType = hits[i]._source.cauldron.logType\r",
									"            let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"           \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            \r",
									"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
									"            // console.log('resultDataLog',resultDataLog)\r",
									"\r",
									"            let tidControl = x_ais_OrderRef_ControlThingGroup + current_timestamp;\r",
									"            // console.log(tidControl);\r",
									"            if(applicationNameValue == applicationName){\r",
									"                 \r",
									"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ControlAPIs\r",
									"                    pm.test(\"Check Summary Log : ControlThingGroup\" , function () {\r",
									"                        console.log(\"======== Check Summary Log ( Expected = Actual) [ControlThingGroup] ==================\");\r",
									"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
									"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
									"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeSuccess);\r",
									"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
									"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        // console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
									"                        // console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
									"\r",
									"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
									"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
									"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeSuccess); \r",
									"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionTheRequestedOperationWasSuccessfully); \r",
									"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
									"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"\r",
									"                        let thingGroupId = pm.environment.get(\"GetResponse_ThingGroupID\");\r",
									"                        let customUrl= urlCheckLog + requestObjectUrlStaging;\r",
									"                        let customAccountkey = pm.environment.get(\"GetResponse_AccountId\");\r",
									"\r",
									"                        // check identity\r",
									"                        // \"identity\":\"{\\\"ThingGroupID\\\":\\\"6012a61a96d0ed0001f5616c\\\"}\"\r",
									"                        let dataSummaryIdentity = JSON.parse(resultDataLog.identity);\r",
									"\r",
									"                        console.log(\"identity.ThingGroupID : \" + dataSummaryIdentity.ThingGroupID + \" = \" + thingGroupId);\r",
									"                        pm.expect(dataSummaryIdentity.ThingGroupID).to.eql(thingGroupId); \r",
									"                       \r",
									"                        // check custom\r",
									"                        // \\\"custom\\\":{ \\\"customData\\\":{ \\\"url\\\":\\\"mg-iot.sandais.com/api/v1/Control/ThingGroup\\\", \\\"accountkey\\\":\\\"609a05c726fdbc0001c3f21a\\\", \\\"ThingGroupID\\\":[ \\\"609a05cb26fdbc0001c3f23b\\\" ] }, \\\"endPointSummary\\\":[ { \\\"no\\\":\\\"1\\\", \\\"endPointName\\\":\\\"db.AuthenticationCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:Inquiry was Success\\\", \\\"processTime\\\":0.0003 }, { \\\"no\\\":\\\"2\\\", \\\"endPointName\\\":\\\"db.ClientsCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:Inquiry was Success\\\", \\\"processTime\\\":0.0004 }, { \\\"no\\\":\\\"3\\\", \\\"endPointName\\\":\\\"db.AccountsCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:Inquiry was Success\\\", \\\"processTime\\\":0.0002 }, { \\\"no\\\":\\\"4\\\", \\\"endPointName\\\":\\\"db.GroupsCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:Inquiry was Success\\\", \\\"processTime\\\":0.0003 }, { \\\"no\\\":\\\"5\\\", \\\"endPointName\\\":\\\"db.ThingsCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:Inquiry was Success\\\", \\\"processTime\\\":0.0003 } ] }\r",
									"\r",
									"                        let customData = resultDataLog.custom.customData\r",
									"\r",
									"                        console.log(\"custom.url : \" + customData.url + \" = \" + customUrl);\r",
									"                        console.log(\"custom.accountkey : \" + customData.accountkey + \" = \" + customAccountkey);\r",
									"                        console.log(\"custom.ThingGroupID[0] : \" + customData.ThingGroupID[0] + \" = \" + thingGroupId);\r",
									"\r",
									"                        pm.expect(customData.url).to.eql(customUrl); \r",
									"                        pm.expect(customData.accountkey).to.eql(customAccountkey); \r",
									"                        pm.expect(customData.ThingGroupID[0]).to.eql(thingGroupId); \r",
									"\r",
									"                        let custom = resultDataLog.custom.endPointSummary;\r",
									"                        let countCustom = custom.length;\r",
									"                       \r",
									"                        // [\"db.AuthenticationCollection\",\"db.ClientsCollection\",\"db.AccountsCollection\",\"db.GroupsCollection\",\"db.ThingsCollection\"]\r",
									"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_ControlThingGroup;\r",
									"                        // [\"20000:Inquiry was Success\",\"20000:Inquiry was Success\",\"20000:Inquiry was Success\",\"20000:Inquiry was Success\",\"20000:Inquiry was Success\"]\r",
									"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_ControlThingGroup;\r",
									"                        let countCustomStep = dataEndPointName.length;\r",
									"\r",
									"                        console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep);\r",
									"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
									"                        \r",
									"                        for(let i=0;i<countCustomStep;i++){\r",
									"                            let no = custom[i].no;\r",
									"                            let valueEndPointName = custom[i].endPointName;\r",
									"                            let valueResponseStatus = custom[i].responseStatus;\r",
									"                            // console.log(\"i\",i);\r",
									"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
									"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
									"\r",
									"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString());\r",
									"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i]);\r",
									"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i]);\r",
									"\r",
									"                            pm.expect(no).to.eql((i+1).toString()); \r",
									"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
									"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]); \r",
									"                        }\r",
									"                    }); \r",
									"                }\r",
									"\r",
									"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ControlAPIs\r",
									"\r",
									"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
									"                    // console.log('endPointNameValue ',endPointNameValue)\r",
									"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [ControlThingGroup]\", function () {\r",
									"                        console.log(\"======== Check Detail Log ( Expected = Actual) [ControlThingGroup] ==================\");\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
									"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
									"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
									"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
									"\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
									"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
									"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
									"\r",
									"                        let url = requestObjectUrlStaging; \r",
									"                        let urlCustom = urlCheckLog + requestObjectUrlStaging; \r",
									"                        let SensorKey = fieldDataValue.CreateThingStateInfo.SensorKey;\r",
									"                        let sensor = pm.environment.get(\"random_Sensor_Control\");\r",
									"                        let x_ais_orderref = x_ais_OrderRef_ControlThingGroup + current_timestamp;\r",
									"                        let x_ais_AccountKey = pm.environment.get(\"GetResponse_AccountId\");\r",
									"                        let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken\");\r",
									"                        let thingGroupId = pm.environment.get(\"GetResponse_ThingGroupID\");\r",
									"                        let x_protocol = xProtocolControl;\r",
									"\r",
									"                        // if( endPointNameValue == endPointNameControlAPIs){     //\"endPointName\":\"ControlAPIs\"\r",
									"                        if( endPointNameValue == undefined){    //\"endPointName\":undefined\r",
									"\r",
									"                            console.log(\"custom1.endPointName : \" + resultDataLog.custom1.endPointName + \" = \" + undefined);\r",
									"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(undefined); \r",
									"                        \r",
									"                            // check requestObject\r",
									"                            // \"requestObject\":\"{\\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Control/ThingGroup\\\",\\\"method\\\":\\\"POST\\\",\\\"headers\\\":{\\\"x-ais-orderref\\\":\\\"ControlThingGroup_202101281801477\\\",\\\"x-ais-accountkey\\\":\\\"60114adca32e8c0001576d22\\\",\\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAGhfn1wJCmf68Vf1zYxZ/fak0lmQ84nNnLsXbdYpFNnXEIlAkkY2KW0\\\"},\\\"body\\\":{\\\"ThingGroupId\\\":\\\"6012a61a96d0ed0001f5616c\\\",\\\"Sensors\\\":{\\\"Temp\\\":955}}}\"\r",
									"\r",
									"                            // \\\"requestObject\\\":\\\"{ \\\\\\\"url\\\\\\\":\\\\\\\"/api/v1/Control/ThingGroup\\\\\\\", \\\\\\\"method\\\\\\\":\\\\\\\"POST\\\\\\\", \\\\\\\"headers\\\\\\\":{ \\\\\\\"Cache-Control\\\\\\\":\\\\\\\"no-cache\\\\\\\", \\\\\\\"Content-Type\\\\\\\":\\\\\\\"application/json\\\\\\\", \\\\\\\"Accept\\\\\\\":\\\\\\\"*/*\\\\\\\", \\\\\\\"Accept-Encoding\\\\\\\":\\\\\\\"gzip, deflate, br\\\\\\\", \\\\\\\"Host\\\\\\\":\\\\\\\"mg-iot.sandais.com\\\\\\\", \\\\\\\"User-Agent\\\\\\\":\\\\\\\"PostmanRuntime/7.26.8\\\\\\\", \\\\\\\"Content-Length\\\\\\\":\\\\\\\"89\\\\\\\", \\\\\\\"x-real-ip\\\\\\\":\\\\\\\"182.232.14.198\\\\\\\", \\\\\\\"x-forwarded-for\\\\\\\":\\\\\\\"182.232.14.198, 10.233.64.0\\\\\\\", \\\\\\\"x-forwarded-proto\\\\\\\":\\\\\\\"http\\\\\\\", \\\\\\\"x-ais-orderref\\\\\\\":\\\\\\\"ControlThingGroup_202105111105245\\\\\\\", \\\\\\\"x-ais-accountkey\\\\\\\":\\\\\\\"609a05c726fdbc0001c3f21a\\\\\\\", \\\\\\\"x-ais-accesstoken\\\\\\\":\\\\\\\"Bearer ibnxnVhs5Rx3IwglWv7/gVA/1TpQnKqAOBAADlRDvYhOpXwmlpYOEb5yfY5aZpoj0YRWRZM26i9HOqtc1fc1jpNDOK5JpISttmMEy59g2py7nLWonDe2YW2OPRGWSowk6+9ZihLU1fZ5d5jAqqrZaKlOAAI3N1TXDNLsHuKcOJMcERbCcaMqRaku+MY4/kzE+eyIdkfwwbjT91S2VQq+Wk2ooMWuLk6/DHVJhwbMP7bviRgywbKNruTPsNbeCuuM89Pvwv0VaDdKVegMrc8SMg==\\\\\\\", \\\\\\\"postman-token\\\\\\\":\\\\\\\"9a61ba38-943a-41a1-b20e-078c5ea9d2a8\\\\\\\", \\\\\\\"x-envoy-external-address\\\\\\\":\\\\\\\"10.233.64.0\\\\\\\", \\\\\\\"x-request-id\\\\\\\":\\\\\\\"4c7486b4-bb8a-4594-9838-04fe467bff30\\\\\\\", \\\\\\\"x-envoy-original-path\\\\\\\":\\\\\\\"/mg4controlapis/api/v1/Control/ThingGroup\\\\\\\", \\\\\\\"x-b3-traceid\\\\\\\":\\\\\\\"3316306559aac1819bdafc1c3f6d9328\\\\\\\", \\\\\\\"x-b3-spanid\\\\\\\":\\\\\\\"1084dd4156c311fd\\\\\\\", \\\\\\\"x-b3-parentspanid\\\\\\\":\\\\\\\"9bdafc1c3f6d9328\\\\\\\", \\\\\\\"x-b3-sampled\\\\\\\":\\\\\\\"0\\\\\\\", \\\\\\\"x-ais-SessionId\\\\\\\":\\\\\\\"1620706768393\\\\\\\", \\\\\\\"identity\\\\\\\":\\\\\\\"{ \\\\\\\\\\\\\\\"ThingGroupID\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"609a05cb26fdbc0001c3f23b\\\\\\\\\\\\\\\" }\\\\\\\", \\\\\\\"custom\\\\\\\":\\\\\\\"{ \\\\\\\\\\\\\\\"url\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"mg-iot.sandais.com/api/v1/Control/ThingGroup\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"accountkey\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"609a05c726fdbc0001c3f21a\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"ThingGroupID\\\\\\\\\\\\\\\":[ \\\\\\\\\\\\\\\"609a05cb26fdbc0001c3f23b\\\\\\\\\\\\\\\" ] }\\\\\\\" }, \\\\\\\"queryString\\\\\\\":{ }, \\\\\\\"routeParamteters\\\\\\\":{ }, \\\\\\\"body\\\\\\\":{ \\\\\\\"ThingGroupId\\\\\\\":\\\\\\\"609a05cb26fdbc0001c3f23b\\\\\\\", \\\\\\\"Sensors\\\\\\\":{ \\\\\\\"Temp\\\\\\\":513 } } }\\\"\r",
									"                            \r",
									"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
									"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
									"\r",
									"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
									"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
									"                            console.log(\"headers.x_ais_AccountKey : \" + jsonParseRequestObject.headers[header_x_ais_accountkey] + \" = \" + x_ais_AccountKey);\r",
									"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
									"                            \r",
									"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
									"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accountkey]).to.eql(x_ais_AccountKey);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
									"\r",
									"                            let identity = JSON.parse(jsonParseRequestObject.headers.identity)\r",
									"                            console.log(\"headers.identity.ThingGroupID : [\" + identity.ThingGroupID + \"] = [\" + thingGroupId + \"]\");\r",
									"                            pm.expect(identity.ThingGroupID).to.eql(thingGroupId);\r",
									"                            \r",
									"                            let custom = JSON.parse(jsonParseRequestObject.headers.custom)\r",
									"                            console.log(\"headers.custom.url : \" + custom.url + \" = \" + urlCustom);\r",
									"                            console.log(\"headers.custom.accountkey : \" + custom.accountkey + \" = \" + x_ais_AccountKey);\r",
									"                            console.log(\"headers.custom.ThingGroupID[0] : \" + custom.ThingGroupID + \" = \" + thingGroupId);\r",
									"                            \r",
									"                            pm.expect(custom.url).to.eql(urlCustom);\r",
									"                            pm.expect(custom.accountkey).to.eql(x_ais_AccountKey);\r",
									"                            pm.expect(custom.ThingGroupID[0]).to.eql(thingGroupId);\r",
									"\r",
									"                            console.log(\"queryString : \" + JSON.stringify(jsonParseRequestObject.queryString) + \" = \" + JSON.stringify({}));\r",
									"                            pm.expect(jsonParseRequestObject.queryString).to.eql({});\r",
									"\r",
									"                            console.log(\"routeParamteters : \" + JSON.stringify(jsonParseRequestObject.routeParamteters) + \" = \" + JSON.stringify({}));\r",
									"                            pm.expect(jsonParseRequestObject.routeParamteters).to.eql({});\r",
									"\r",
									"                            console.log(\"resquest.body.ThingGroupId : \" + jsonParseRequestObject.body.ThingGroupId + \" = \" + thingGroupId);\r",
									"                            console.log(\"resquest.body.Sensors.\" + SensorKey + \"  : \" + jsonParseRequestObject.body.Sensors[SensorKey] + \" = \" + sensor);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.body.ThingGroupId).to.eql(thingGroupId);\r",
									"                            pm.expect(jsonParseRequestObject.body.Sensors[SensorKey]).to.eql(sensor);\r",
									"\r",
									"                            // check responseObject\r",
									"                            // \\\"responseObject\\\":\\\"{ \\\\\\\"OperationStatus\\\\\\\":{ \\\\\\\"Code\\\\\\\":\\\\\\\"20000\\\\\\\", \\\\\\\"DeveloperMessage\\\\\\\":\\\\\\\"The requested operation was successfully.\\\\\\\" } }\\\"\r",
									"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
									"                            // console.log('jsonParseResponseObject',jsonParseResponseObject);\r",
									"\r",
									"                            console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeSuccess);\r",
									"                            console.log(\"response.OperationStatus.DeveloperMessage : \" + jsonParseResponseObject.OperationStatus.DeveloperMessage + \" = \" + resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"\r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeSuccess);  \r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheRequestedOperationWasSuccessfully);  \r",
									"                        }\r",
									"\r",
									"                        // if( endPointNameValue == endPointNameDesireEx){\r",
									"                        if( endPointNameValue == endPointNameRabbitMQ){\r",
									"\r",
									"                            console.log(\"custom1.endPointName : \" + resultDataLog.custom1.endPointName + \" = \" + endPointNameRabbitMQ);\r",
									"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameRabbitMQ); \r",
									"\r",
									"                            // check requestObject\r",
									"                            // \"requestObject\":\"{\\\"RoutingKey\\\":\\\"desire.pub.v1.15ef8559-0a9a-4ae8-a643-4ecc5f3321b2\\\",\\\"Payload\\\":\\\"{\\\\\\\"Temp\\\\\\\":955}\\\",\\\"Headers\\\":{\\\"timestamp_in_ms\\\":1611746014944,\\\"x-ais-orderref\\\":\\\"ControlThingGroup_202101281801477\\\",\\\"x_protocol\\\":\\\"CONTROL\\\"}}\"\r",
									"\r",
									"                            // \\\"requestObject\\\":\\\"{ \\\\\\\"url\\\\\\\":\\\\\\\"desire.pub.v1.1153bb18-2e41-44af-9456-22ae2ecff7df\\\\\\\", \\\\\\\"headers\\\\\\\":{ \\\\\\\"x-ais-orderref\\\\\\\":\\\\\\\"ControlThingGroup_202105111105245\\\\\\\", \\\\\\\"x-ais-sessionid\\\\\\\":\\\\\\\"1620706768393\\\\\\\", \\\\\\\"timestamp_in_ms\\\\\\\":\\\\\\\"1620706768425\\\\\\\", \\\\\\\"x_protocol\\\\\\\":\\\\\\\"CONTROL\\\\\\\" }, \\\\\\\"body\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"{ \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Temp\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":513 }\\\\\\\\\\\\\\\"\\\\\\\" }\\\"\r",
									"\r",
									"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
									"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
									"                        \r",
									"                            // let jsonParsePayload = JSON.parse(jsonParseRequestObject.Payload);\r",
									"                            // console.log('jsonParsePayload',jsonParsePayload);\r",
									"                            let jsonParseBody = jsonParseRequestObject.body;\r",
									"                            let jsonParseBody1 = JSON.parse(jsonParseBody);\r",
									"                            let jsonParseBody2 = JSON.parse(jsonParseBody1);\r",
									"                            // console.log('jsonParseBody',jsonParseBody);\r",
									"                            // console.log('jsonParseBody1',jsonParseBody1);\r",
									"                            // console.log('jsonParseBody2',jsonParseBody2);\r",
									"                            // console.log('jsonParseBody2',jsonParseBody2[SensorKey]);\r",
									"\r",
									"                            console.log(\"headers.timestamp_in_ms : \" + jsonParseRequestObject.headers.timestamp_in_ms + \" = \" + jsonParseRequestObject.headers.timestamp_in_ms);\r",
									"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"                            console.log(\"headers.x_protocol : \" + jsonParseRequestObject.headers.x_protocol + \" = \" + x_protocol);\r",
									"        \r",
									"                            pm.expect(jsonParseRequestObject.headers.timestamp_in_ms).to.eql(jsonParseRequestObject.headers.timestamp_in_ms);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                            pm.expect(jsonParseRequestObject.headers.x_protocol).to.eql(x_protocol);\r",
									"\r",
									"                            console.log(\"resquest.\"+ SensorKey +\" : \" + jsonParseBody2[SensorKey] + \" = \" + sensor);\r",
									"                            pm.expect(jsonParseBody2[SensorKey]).to.eql(sensor);\r",
									"                \r",
									"                            // check responseObject\r",
									"                            // \\\"responseObject\\\":\\\"\\\\\\\"\\\\\\\"\\\"\r",
									"                            // let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
									"                            // console.log('jsonParseResponseObject',jsonParseResponseObject);\r",
									"\r",
									"                            console.log(\"response.custom1.responseObject : \" + resultDataLog.custom1.responseObject + \" = \" + JSON.stringify(\"\"));\r",
									"                            pm.expect(resultDataLog.custom1.responseObject).to.eql(JSON.stringify(\"\"));  \r",
									"                        }\r",
									"\r",
									"                    }); \r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// InquiryThing\r",
									"InquiryThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptInquiryThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_InquiryThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_InquiryThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestInquiryThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsInquiryThing = {\r",
									"            url: url + provisioningapis + urlThingInquiryThing,\r",
									"            method: 'POST',\r",
									"            header: headersOptInquiryThing,\r",
									"            body: httpRequestInquiryThing\r",
									"        };\r",
									"\r",
									"        // console.log('request InquiryThing');\r",
									"        let response = await reqPromise(optionsInquiryThing);\r",
									"        let jsonDataInquiryThing = await response.json();\r",
									"        // console.log('jsonDataInquiryThing',jsonDataInquiryThing)\r",
									"    \r",
									"        let operationStatusInquiryThing = await jsonDataInquiryThing.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"InquiryThing : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('InquiryThing : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusInquiryThing).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //InquiryThing is Success\r",
									"        pm.test('InquiryThing : OperationStatus Description is '+'\"'+ resultDescriptionInquiryThing+'\"', function () {\r",
									"            pm.expect(operationStatusInquiryThing).to.have.property('Description', resultDescriptionInquiryThing);\r",
									"        });\r",
									"\r",
									"        //Check Data\r",
									"        let thingInfo = await jsonDataInquiryThing.ThingInfo;\r",
									"        console.log('thingInfo',thingInfo);\r",
									"\r",
									"        for(let i=0;i<thingInfo.length;i++){\r",
									"            pm.test('Verify DB Check Data : ControlThingGroup [StateInfo.Desire and StateInfo.Delta :{ \"'+  fieldDataValue.CreateThingStateInfo.SensorKey + '\" : '+ pm.environment.get(\"random_Sensor_Control\") +' }]' , function () {\r",
									"                console.log(\"======== Verify DB Check Data ( Expected = Actual) [ControlThingGroup] ==================\");\r",
									"                console.log(\"thingInfo[\"+ i +\"]StateInfo.Delta : \" + thingInfo[i].StateInfo.Delta[fieldDataValue.CreateThingStateInfo.SensorKey] + \" = \" + pm.environment.get(\"random_Sensor_Control\"));\r",
									"                console.log(\"thingInfo[\"+ i +\"]StateInfo.Desire : \" + thingInfo[i].StateInfo.Delta[fieldDataValue.CreateThingStateInfo.SensorKey] + \" = \" + pm.environment.get(\"random_Sensor_Control\"));\r",
									"\r",
									"                pm.expect(thingInfo[i].StateInfo.Delta).to.have.property(fieldDataValue.CreateThingStateInfo.SensorKey, pm.environment.get(\"random_Sensor_Control\"));\r",
									"                pm.expect(thingInfo[i].StateInfo.Desire).to.have.property(fieldDataValue.CreateThingStateInfo.SensorKey, pm.environment.get(\"random_Sensor_Control\"));\r",
									"            });\r",
									"        }\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"setTimeout(function(){SearchLogFindTid();}, 20000); \r",
									"setTimeout(function(){CheckLog();}, 30000); \r",
									"setTimeout(function(){InquiryThing();}, 40000); \r",
									"\r",
									"setTimeout(function(){RemoveGroup();}, 45000); \r",
									"setTimeout(function(){RemoveThingStateInfo();}, 50000); \r",
									"setTimeout(function(){RemoveThing();}, 55000); \r",
									"setTimeout(function(){RemoveAccount();}, 60000); \r",
									"setTimeout(function(){RemovePartner();}, 65000); \r",
									"\r",
									"setTimeout(function(){\r",
									"pm.environment.unset(\"current_timestamp\");\r",
									"pm.environment.unset(\"AccessToken\");\r",
									"pm.environment.unset(\"random_number\");\r",
									"pm.environment.unset(\"PartnerName\");\r",
									"pm.environment.unset(\"MerchantContact\");\r",
									"pm.environment.unset(\"CPID\");\r",
									"pm.environment.unset(\"GetResponse_PartnerId\");\r",
									"pm.environment.unset(\"AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountId\");\r",
									"for(let i=0;i<countData;i++){\r",
									"pm.environment.unset(\"random_IM\"+[i+1]);\r",
									"pm.environment.unset(\"random_ICCID\"+[i+1]);\r",
									"pm.environment.unset(\"ThingName\"+[i+1]);\r",
									"}\r",
									"pm.environment.unset(\"ThingGroupName\");\r",
									"pm.environment.unset(\"GetResponse_ThingIDArr\");\r",
									"pm.environment.unset(\"random_Sensor\");\r",
									"pm.environment.unset(\"GetResponse_ThingGroupID\");\r",
									"pm.environment.unset(\"tid\");\r",
									"pm.environment.unset(\"sessionId\");\r",
									"pm.environment.unset(\"SensorKey\");\r",
									"pm.environment.unset(\"random_Sensor_Control\");\r",
									"}, 90000); "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var Username = pm.environment.get(\"Username\");\r",
									"var Password = pm.environment.get(\"Password\");\r",
									"\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//count for loop data\r",
									"var countData = 2;\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"pm.environment.set(\"SensorKey\",fieldDataValue.CreateThingStateInfo.SensorKey)\r",
									"\r",
									"//format YYYYMMDDHHMMSSS\r",
									"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
									"// console.log('currentTmestamp',currentTmestamp);\r",
									"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- statusCodeList --------------//\r",
									"//set variable to statusCodeList JSON.parse\r",
									"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
									"//set global variable to statusCode 200\r",
									"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
									"//set global variable to statusCode 201\r",
									"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultCodeList --------------//\r",
									"//set variable to resultCodeList JSON.parse\r",
									"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
									"//set global variable to resultCode \"20000\"\r",
									"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
									"//set global variable to resultCode \"20100\"\r",
									"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionSuccessList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
									"//set global variable to resultDescription \"SignInProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
									"//set global variable to resultDescription \"CreatePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
									"//set global variable to resultDescription \"CreateAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
									"//set global variable to resultDescription \"CreateThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThing\", resultDescriptionSuccessList.resultDescriptionCreateThing);\r",
									"//set global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThingStateInfo\", resultDescriptionSuccessList.resultDescriptionCreateThingStateInfo);\r",
									"//set global variable to resultDescription \"RemovePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
									"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
									"//set global variable to resultDescription \"RemoveThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThing\", resultDescriptionSuccessList.resultDescriptionRemoveThing);\r",
									"//set global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThingStateInfo\", resultDescriptionSuccessList.resultDescriptionRemoveThingStateInfo);\r",
									"//set global variable to resultDescription \"CreateGroup is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateGroup\", resultDescriptionSuccessList.resultDescriptionCreateGroup);\r",
									"//set global variable to resultDescription \"RemoveGroup is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveGroup\", resultDescriptionSuccessList.resultDescriptionRemoveGroup);\r",
									"//set global variable to resultDescription \"Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccess\", resultDescriptionSuccessList.resultDescriptionSuccess);\r",
									"//set global variable to resultDescription \"Created Success\"\r",
									"pm.globals.set(\"resultDescriptionCreatedSuccess\", resultDescriptionSuccessList.resultDescriptionCreatedSuccess);\r",
									"//set global variable to resultDescription \"ControlOneGroup is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessControlOneGroup\", resultDescriptionSuccessList.resultDescriptionSuccessControlOneGroup);\r",
									"//set global variable to resultDescription \"InquiryThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionInquiryThing\", resultDescriptionSuccessList.resultDescriptionInquiryThing);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- HeaderList --------------//\r",
									"//set variable to HeaderList JSON.parse\r",
									"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
									"//---------------- set globals Other --------------//\r",
									"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
									"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
									"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
									"//set global variable to kbn-versio \"7.5.1\"\r",
									"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Signin_ --------------//\r",
									"//set global variable to x_ais_OrderRef \"Signin_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreatePartner --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
									"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
									"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
									"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreateAccount --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
									"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
									"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Thing --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThing\", HeaderList.Thing.x_ais_OrderRef_CreateThing);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThing\", HeaderList.Thing.x_ais_OrderDesc_CreateThing);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThing\", HeaderList.Thing.x_ais_OrderRef_RemoveThing);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThing\", HeaderList.Thing.x_ais_OrderDesc_RemoveThing);\r",
									"//set global variable to x_ais_OrderRef \"InquiryThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_InquiryThing\", HeaderList.Thing.x_ais_OrderRef_InquiryThing);\r",
									"//set global variable to x_ais_OrderDesc \"InquiryThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_InquiryThing\", HeaderList.Thing.x_ais_OrderDesc_InquiryThing);\r",
									"//set global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_RemoveThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_RemoveThingStateInfo);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Group --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateGroup_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateGroup\", HeaderList.Group.x_ais_OrderRef_CreateGroup);\r",
									"//set global variable to x_ais_OrderDesc \"CreateGroup\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateGroup\", HeaderList.Group.x_ais_OrderDesc_CreateGroup);\r",
									"//set global variable to x_ais_OrderRef \"RemoveGroup_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveGroup\", HeaderList.Group.x_ais_OrderRef_RemoveGroup);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveGroup\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveGroup\", HeaderList.Group.x_ais_OrderDesc_RemoveGroup);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Control --------------//\r",
									"//set global variable to x_ais_OrderRef \"ControlThingGroup_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ControlThingGroup\", HeaderList.Control.x_ais_OrderRef_ControlThingGroup);\r",
									"//set global variable to x_ais_OrderRef \"ControlThingGroupfail_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ControlThingGroup_fail\", HeaderList.Control.x_ais_OrderRef_ControlThingGroup_fail);\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"SignInProcess is Success\"\r",
									"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
									"//get global variable to resultDescription \"CreatePartner is Success\"\r",
									"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
									"//get global variable to resultDescription \"CreateAccount is Success\"\r",
									"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
									"//get global variable to resultDescription \"CreateThing is Success\"\r",
									"var resultDescriptionCreateThing = pm.globals.get(\"resultDescriptionCreateThing\");\r",
									"//get global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"var resultDescriptionCreateThingStateInfo = pm.globals.get(\"resultDescriptionCreateThingStateInfo\");\r",
									"//get global variable to resultDescription \"CreateGroup is Success\"\r",
									"var resultDescriptionCreateGroup = pm.globals.get(\"resultDescriptionCreateGroup\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- urlRouteList --------------//\r",
									"//set variable to urlRouteList JSON.parse\r",
									"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
									"//---------------- set url Create --------------//\r",
									"//set global variable to url \"/api/v1/auth/signin\"\r",
									"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
									"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
									"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"pm.globals.set(\"urlThingCreateThing\", urlRouteList.Thing.urlThingCreateThing);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"pm.globals.set(\"urlThingCreateThingStateInfo\", urlRouteList.Thing.urlThingCreateThingStateInfo);\r",
									"//set global variable to url \"/api/v1/Group/CreateGroup\"\r",
									"pm.globals.set(\"urlGroupCreateGroup\", urlRouteList.Group.urlGroupCreateGroup);\r",
									"//---------------- get url Create --------------//\r",
									"//get global variable to url \"/api/v1/auth/signin\"\r",
									"var urlSignin = pm.globals.get(\"urlSignin\");\r",
									"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
									"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"var urlThingCreateThing = pm.globals.get(\"urlThingCreateThing\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"var urlThingCreateThingStateInfo = pm.globals.get(\"urlThingCreateThingStateInfo\");\r",
									"//get global variable to url \"/api/v1/Group/CreateGroup\"\r",
									"var urlGroupCreateGroup = pm.globals.get(\"urlGroupCreateGroup\");\r",
									"//---------------- set url Remove --------------//\r",
									"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
									"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"pm.globals.set(\"urlThingRemoveThing\", urlRouteList.Thing.urlThingRemoveThing);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"pm.globals.set(\"urlThingRemoveThingStateInfo\", urlRouteList.Thing.urlThingRemoveThingStateInfo);\r",
									"//set global variable to url \"/api/v1/Group/RemoveGroup\"\r",
									"pm.globals.set(\"urlGroupRemoveGroup\", urlRouteList.Group.urlGroupRemoveGroup);\r",
									"//---------------- set url Inquiry --------------//\r",
									"//set global variable to url \"/api/v1/Thing/InquiryThing\"\r",
									"pm.globals.set(\"urlThingInquiryThing\", urlRouteList.Thing.urlThingInquiryThing);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Signin_ --------------//\r",
									"//get global variable to x_ais_OrderRef \"Signin_\"\r",
									"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"var x_ais_OrderRef_CreateThing = pm.globals.get(\"x_ais_OrderRef_CreateThing\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"var x_ais_OrderDesc_CreateThing = pm.globals.get(\"x_ais_OrderDesc_CreateThing\");\r",
									"//get global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"var x_ais_OrderRef_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderRef_CreateThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"var x_ais_OrderDesc_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_CreateThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Group --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateGroup_\"\r",
									"var x_ais_OrderRef_CreateGroup = pm.globals.get(\"x_ais_OrderRef_CreateGroup\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateGroup\"\r",
									"var x_ais_OrderDesc_CreateGroup = pm.globals.get(\"x_ais_OrderDesc_CreateGroup\");\r",
									"//------------------------------------------------------------//\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            // console.log('response111',response);\r",
									"            // console.log('errerrerr',err);\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// Signin get token\r",
									" Signin = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSignin = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestSignin = {\r",
									"            mode: 'raw',\r",
									"            raw: \r",
									"            JSON.stringify({\r",
									"                username:Username,\r",
									"                password:Password\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsSignin = {\r",
									"            url: url + provisioningapis + urlSignin,\r",
									"            method: 'POST',\r",
									"            header: headersOptSignin,\r",
									"            body: httpRequestSignin\r",
									"        };\r",
									"        // console.log('request Signin');\r",
									"        let response = await reqPromise(optionsSignin);\r",
									"        let jsonDataSignin = await response.json();\r",
									"\r",
									"        // setAccessToken\r",
									"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
									"\r",
									"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // SignInProcess is Success\r",
									"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
									"        });\r",
									"\r",
									"        //set random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //set PartnerName\r",
									"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
									"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
									"        //set MerchantContact\r",
									"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
									"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
									"        // set CPID\r",
									"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
									"        pm.environment.set(\"CPID\", CPIDValue)\r",
									"        \r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreatePartner\r",
									" CreatePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreatePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreatePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
									"                \"PartnerType\": [\r",
									"                    \"Supplier\",\r",
									"                    \"Customer\"\r",
									"                ],\r",
									"                \"PartnerDetail\": {\r",
									"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
									"                    \"CPID\": pm.environment.get(\"CPID\")\r",
									"                },\r",
									"                \"Property\": {\r",
									"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsCreatePartner = {\r",
									"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreatePartner,\r",
									"            body: httpRequestCreatePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsCreatePartner);\r",
									"        let jsonDataCreatePartner = await response.json();\r",
									"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
									"    \r",
									"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreatePartner is Success\r",
									"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
									"        });\r",
									"\r",
									"        //GetResponse_PartnerId\r",
									"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
									"\r",
									"        //Accountname\r",
									"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
									"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateAccount\r",
									" CreateAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreateAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
									"                })\r",
									"        };\r",
									"        \r",
									"        let optionsCreateAccount = {\r",
									"            url: url + provisioningapis + urlAccountCreateAccount,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateAccount,\r",
									"            body: httpRequestCreateAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateAccount');\r",
									"        let response = await reqPromise(optionsCreateAccount);\r",
									"        let jsonDataCreateAccount = await response.json();\r",
									"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
									"    \r",
									"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateAccount : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateAccount is Success\r",
									"        pm.test('CreateAccount : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
									"        });\r",
									"        // GetResponse_AccountName\r",
									"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
									"        // GetResponse_AccountId\r",
									"        pm.environment.set(\"GetResponse_AccountId\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
									"       \r",
									" // // random_IM\r",
									"        // pm.environment.set(\"random_IM\", _.random(10000000, 99999999)+\" \"+_.random(1000000, 9999999))\r",
									"        // // random_ICCID\r",
									"        // pm.environment.set(\"random_ICCID\", _.random(1000000, 9999999)+\" \"+_.random(100000, 999999))\r",
									"        // // random_number\r",
									"        // pm.environment.set(\"random_number\",pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        // //ThingName\r",
									"        // let thingNameValue = fieldDataValue.Thing.ThingNameValue; // \"Sensor_TestThingName\"\r",
									"        // pm.environment.set(\"ThingName\", thingNameValue + pm.environment.get(\"random_number\"))\r",
									"\r",
									"        // random_number\r",
									"        pm.environment.set(\"random_number\",pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"\r",
									"        for(let i=0;i<countData;i++){\r",
									"            // random_IM\r",
									"            pm.environment.set(\"random_IM\"+[i+1], _.random(10000000, 99999999)+\" \"+_.random(1000000, 9999999))\r",
									"            // random_ICCID\r",
									"            pm.environment.set(\"random_ICCID\"+[i+1], _.random(1000000, 9999999)+\" \"+_.random(100000, 999999))\r",
									"\r",
									"            //ThingName\r",
									"            let thingNameValue = fieldDataValue.Thing.ThingNameValue; // \"Sensor_TestThingName\"\r",
									"            pm.environment.set(\"ThingName\"+[i+1],thingNameValue + [i+1] + pm.environment.get(\"random_number\"))\r",
									"        }\r",
									"\r",
									"        //ThinggroupName\r",
									"        let ThingGroupNameValue = fieldDataValue.Group.ThingGroupNameValue; // \"Sensor_TestThingGroupName\"\r",
									"        pm.environment.set(\"ThingGroupName\",ThingGroupNameValue + pm.environment.get(\"random_number\"))\r",
									"            \r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThing\r",
									" CreateThingArr = async () =>  {\r",
									"    try {\r",
									"        \r",
									"        // header\r",
									"        let headersOptCreateThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThing');\r",
									"        let dataThingIdArr = [];\r",
									"        for(let i=0;i<countData;i++){\r",
									"            // body\r",
									"            let httpRequestCreateThing = {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                    \"ThingName\": pm.environment.get(\"ThingName\"+ [i+1]),\r",
									"                    \"IMEI\": pm.environment.get(\"random_IM\"+ [i+1]),\r",
									"                    \"IMSI\": pm.environment.get(\"random_IM\"+ [i+1]),\r",
									"                    \"ICCID\": pm.environment.get(\"random_ICCID\"+ [i+1]),\r",
									"                    \"RouteUrl\": fieldDataValue.Thing.RouteUrlValue , //[\"http://10.12.3.4:2019/api/information/AddInformation\"]\r",
									"                    \"RouteInfo\": {\r",
									"                        \"MIMO_ID\": fieldDataValue.Thing.RouteInfoMIMOIDValue , //\"606edada\"\r",
									"                        \"MIMO_SerialNo\": fieldDataValue.Thing.RouteInfoMIMOSerialNoValue //5466758878\r",
									"                    },\r",
									"                    \"RouteFlag\": {\r",
									"                        \"ThingName\": fieldDataValue.Thing.RouteFlagThingNameValue , //true\r",
									"                        \"ThingToken\": fieldDataValue.Thing.RouteFlagThingTokenValue, //true\r",
									"                        \"IMEI\": fieldDataValue.Thing.RouteFlagIMEIValue, //true\r",
									"                        \"ICCID\": fieldDataValue.Thing.RouteFlagICCIDValue, //true\r",
									"                        \"RouteInfo\": fieldDataValue.Thing.RouteFlagRouteInfoValue //true\r",
									"                    }\r",
									"                })\r",
									"            };\r",
									"            // console.log(\"httpRequestCreateThing\",httpRequestCreateThing);\r",
									"            let optionsCreateThing = {\r",
									"                url: url + provisioningapis + urlThingCreateThing,\r",
									"                method: 'POST',\r",
									"                header: headersOptCreateThing,\r",
									"                body: httpRequestCreateThing\r",
									"            };\r",
									"            let response = await reqPromise(optionsCreateThing);\r",
									"            let jsonDataCreateThing = await response.json();\r",
									"            let ThingId = await jsonDataCreateThing.ThingInfo.ThingId;\r",
									"            console.log(\"ThingId\",ThingId);\r",
									"            dataThingIdArr.push(ThingId);\r",
									"            let operationStatusCreateThing = await jsonDataCreateThing.OperationStatus;\r",
									"\r",
									"            //201\r",
									"            pm.test(\"CreateThing\"+ [i+1]+ \" : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"                pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"            });\r",
									"            //20100\r",
									"            pm.test('CreateThing'+ [i+1]+ ' : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"                pm.expect(operationStatusCreateThing).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"            });\r",
									"            //CreateThing is Success\r",
									"            pm.test('CreateThing'+ [i+1]+ ' : OperationStatus Description is '+'\"'+ resultDescriptionCreateThing+'\"', function () {\r",
									"                pm.expect(operationStatusCreateThing).to.have.property('Description', resultDescriptionCreateThing);\r",
									"            });\r",
									"        }\r",
									"        \r",
									"        console.log('dataThingIdArr',dataThingIdArr);\r",
									"        // pm.environment.set(\"GetResponse_ThingID\",jsonDataCreateThing.ThingInfo.ThingId)\r",
									"        pm.environment.set(\"GetResponse_ThingIDArr\",JSON.stringify(dataThingIdArr))\r",
									"        \r",
									"        //Get Random Sensor \r",
									"        pm.environment.set(\"random_Sensor\", _.random(100, 999))\r",
									"\r",
									"        //Get Random Sensor Control\r",
									"        pm.environment.set(\"random_Sensor_Control\", _.random(100, 999))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThingStateInfo\r",
									"CreateThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        \r",
									"        // header\r",
									"        let headersOptCreateThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        // console.log('CreateThingStateInfo');\r",
									"        // body\r",
									"        let dataThingIDArray = JSON.parse(pm.environment.get(\"GetResponse_ThingIDArr\"));\r",
									"        console.log('dataThingIDArray',dataThingIDArray);\r",
									"\r",
									"        // {\"Temp\" : pm.environment.get(\"random_Sensor\")}\r",
									"        let sensorValue = {};\r",
									"        sensorValue[fieldDataValue.CreateThingStateInfo.SensorKey] = pm.environment.get(\"random_Sensor\");\r",
									"        // console.log('sensorValue',sensorValue);\r",
									"        \r",
									"        let httpRequestCreateThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\":dataThingIDArray,\r",
									"                \"Type\": fieldDataValue.CreateThingStateInfo.Type_Report,\r",
									"                \"Sensor\": sensorValue\r",
									"            })\r",
									"        };\r",
									"            let optionsCreateThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingCreateThingStateInfo,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThingStateInfo,\r",
									"            body: httpRequestCreateThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThingStateInfo');\r",
									"        let response = await reqPromise(optionsCreateThingStateInfo);\r",
									"\r",
									"        let jsonDataCreateThingStateInfo = await response.json();\r",
									"        let operationStatusCreateThingStateInfo = await jsonDataCreateThingStateInfo.OperationStatus;\r",
									"        // console.log('operationStatusCreateThingStateInfo',operationStatusCreateThingStateInfo);\r",
									"\r",
									"        //200\r",
									"        pm.test(\"CreateThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //CreateThingStateInfo is Success\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionCreateThingStateInfo+'\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Description', resultDescriptionCreateThingStateInfo);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThingGroup\r",
									" CreateThingGroup = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThingGroup = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateGroup + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateGroup,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        let dataThingIDArray = JSON.parse(pm.environment.get(\"GetResponse_ThingIDArr\"));\r",
									"        // console.log('dataThingIDArray',dataThingIDArray);\r",
									"\r",
									"            // body\r",
									"            let httpRequestCreateThingGroup = {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                        \"ThingGroupName\": pm.environment.get(\"ThingGroupName\"),\r",
									"                        \"ThingId\": dataThingIDArray\r",
									"                        })\r",
									"            };\r",
									"             let optionsCreateThingGroup = {\r",
									"                url: url + provisioningapis + urlGroupCreateGroup,\r",
									"                method: 'POST',\r",
									"                header: headersOptCreateThingGroup,\r",
									"                body: httpRequestCreateThingGroup\r",
									"            };\r",
									"\r",
									"            // console.log('request CreateThingGroup');\r",
									"            let response = await reqPromise(optionsCreateThingGroup);\r",
									"\r",
									"            let jsonDataCreateThingGroup = await response.json();\r",
									"            let operationStatusCreateThingGroup = await jsonDataCreateThingGroup.OperationStatus;\r",
									"\r",
									"            //200\r",
									"            pm.test(\"CreateThingGroup : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"                pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"            });\r",
									"            //20000\r",
									"            pm.test('CreateThingGroup : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"                pm.expect(operationStatusCreateThingGroup).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"            });\r",
									"            //CreateThingGroup is Success\r",
									"            pm.test('CreateThingGroup : OperationStatus Description is '+'\"'+ resultDescriptionCreateGroup+'\"', function () {\r",
									"                pm.expect(operationStatusCreateThingGroup).to.have.property('Description', resultDescriptionCreateGroup);\r",
									"            });\r",
									"\r",
									"            // GetResponse_ThingGroupID\r",
									"            pm.environment.set(\"GetResponse_ThingGroupID\",jsonDataCreateThingGroup.GroupInfo.GroupId);\r",
									"           \r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"Signin();\r",
									"setTimeout(async function(){await CreatePartner();}, 3000); \r",
									"setTimeout(async function(){await CreateAccount();}, 6000); \r",
									"setTimeout(async function(){await CreateThingArr();}, 8000); \r",
									"setTimeout(async function(){await CreateThingStateInfo();}, 9000); \r",
									"setTimeout(async function(){await CreateThingGroup();}, 10000); \r",
									"setTimeout(async function(){}, 15000);  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-ais-OrderRef",
								"value": "{{x_ais_OrderRef_ControlThingGroup}}{{current_timestamp}}"
							},
							{
								"key": "x-ais-AccountKey",
								"value": "{{GetResponse_AccountId}}",
								"type": "text"
							},
							{
								"key": "x-ais-AccessToken",
								"value": "{{Bearer}} {{AccessToken}}"
							},
							{
								"key": "Accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"ThingGroupId\": \"{{GetResponse_ThingGroupID}}\",\r\n  \"Sensors\": {\r\n    \"{{SensorKey}}\": {{random_Sensor_Control}}\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{url}}{{mg4controlapis}}/api/v1/Control/ThingGroup",
							"host": [
								"{{url}}{{mg4controlapis}}"
							],
							"path": [
								"api",
								"v1",
								"Control",
								"ThingGroup"
							]
						},
						"description": "Type:Desire"
					},
					"response": []
				},
				{
					"name": "ControlThingGroup_TST_F3_1_1_002_Success_SenSorHasPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//count for loop data\r",
									"var countData = 2;\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to xAisOrderRef \"RemoveThing_\"\r",
									"var x_ais_OrderRef_RemoveThing = pm.globals.get(\"x_ais_OrderRef_RemoveThing\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"var x_ais_OrderDesc_RemoveThing = pm.globals.get(\"x_ais_OrderDesc_RemoveThing\");\r",
									"//get global variable to xAisOrderRef \"InquiryThing_\"\r",
									"var x_ais_OrderRef_InquiryThing = pm.globals.get(\"x_ais_OrderRef_InquiryThing\");\r",
									"//get global variable to x_ais_OrderDesc \"InquiryThing\"\r",
									"var x_ais_OrderDesc_InquiryThing = pm.globals.get(\"x_ais_OrderDesc_InquiryThing\");\r",
									"//get global variable to x_ais_OrderRef \"RemoveThingStateInfo_\"\r",
									"var x_ais_OrderDesc_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_RemoveThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThingStateInfo\"\r",
									"var x_ais_OrderRef_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderRef_RemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Group --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveGroup_\"\r",
									"var x_ais_OrderRef_RemoveGroup = pm.globals.get(\"x_ais_OrderRef_RemoveGroup\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveGroup\"\r",
									"var x_ais_OrderDesc_RemoveGroup = pm.globals.get(\"x_ais_OrderDesc_RemoveGroup\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Control --------------//\r",
									"//get global variable to x_ais_OrderRef \"ControlThingGroup_\"\r",
									"var x_ais_OrderRef_ControlThingGroup = pm.globals.get(\"x_ais_OrderRef_ControlThingGroup\");\r",
									"//get global variable to x_ais_OrderRef \"ControlThingGroupfail_\"\r",
									"var x_ais_OrderRef_ControlThingGroup_fail = pm.globals.get(\"x_ais_OrderRef_ControlThingGroup_fail\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get url Remove --------------//\r",
									"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
									"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"var urlThingRemoveThing = pm.globals.get(\"urlThingRemoveThing\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"var urlThingRemoveThingStateInfo = pm.globals.get(\"urlThingRemoveThingStateInfo\");\r",
									"//get global variable to url \"/api/v1/Group/RemoveGroup\"\r",
									"var urlGroupRemoveGroup = pm.globals.get(\"urlGroupRemoveGroup\");\r",
									"//---------------- get url Inquiry --------------//\r",
									"//get global variable to url \"/api/v1/Thing/InquiryThingr\"\r",
									"var urlThingInquiryThing = pm.globals.get(\"urlThingInquiryThing\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"RemovePartner is Success\"\r",
									"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
									"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
									"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
									"//get global variable to resultDescription \"RemoveThing is Success\"\r",
									"var resultDescriptionRemoveThing = pm.globals.get(\"resultDescriptionRemoveThing\");\r",
									"//get global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"var resultDescriptionRemoveThingStateInfo = pm.globals.get(\"resultDescriptionRemoveThingStateInfo\");\r",
									"//get global variable to resultDescription \"RemoveGroup is Success\"\r",
									"var resultDescriptionRemoveGroup = pm.globals.get(\"resultDescriptionRemoveGroup\");\r",
									"//get global variable to resultDescription \"InquiryThing is Success\"\r",
									"var resultDescriptionInquiryThing = pm.globals.get(\"resultDescriptionInquiryThing\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to resultDescription \"ControlOneGroup is Success\"\r",
									"// var resultDescriptionSuccessControlOneGroup = pm.globals.get(\"resultDescriptionSuccessControlOneGroup\");\r",
									"//get global variable to resultDescription \"The requested operation was successfully.\"\r",
									"var resultDescriptionTheRequestedOperationWasSuccessfully = pm.globals.get(\"resultDescriptionTheRequestedOperationWasSuccessfully\");\r",
									"//------------------------------------------------------------//\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"ControlThingGroup : Status code is \" + statusCodeSuccess, function () {\r",
									"    pm.response.to.have.status(statusCodeSuccess);\r",
									"});\r",
									"\r",
									"pm.test('ControlThingGroup : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeSuccess);\r",
									"});\r",
									"\r",
									"pm.test('ControlThingGroup : OperationStatus DeveloperMessage is '+'\"'+ resultDescriptionTheRequestedOperationWasSuccessfully+'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"});\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// RemovePartner\r",
									" RemovePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemovePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemovePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemovePartner = {\r",
									"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemovePartner,\r",
									"            body: httpRequestRemovePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request RemovePartner');\r",
									"        let response = await reqPromise(optionsRemovePartner);\r",
									"        let jsonDataRemovePartner = await response.json();\r",
									"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
									"    \r",
									"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemovePartner is Success\r",
									"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveAccount\r",
									" RemoveAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemoveAccount = {\r",
									"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveAccount,\r",
									"            body: httpRequestRemoveAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveAccount');\r",
									"        let response = await reqPromise(optionsRemoveAccount);\r",
									"        let jsonDataRemoveAccount = await response.json();\r",
									"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
									"    \r",
									"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveAccount is Success\r",
									"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThing\r",
									" RemoveThing = async () =>  {\r",
									"    try {\r",
									"\r",
									"        // header\r",
									"        let headersOptRemoveThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        let dataThingIDArray = JSON.parse(pm.environment.get(\"GetResponse_ThingIDArr\"));\r",
									"\r",
									"        for(let i=0;i<countData;i++){\r",
									"\r",
									"            // body\r",
									"            let httpRequestRemoveThing = {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                    \"ThingId\": dataThingIDArray[i]\r",
									"                })\r",
									"            };\r",
									"\r",
									"            let optionsRemoveThing = {\r",
									"                url: url + provisioningapis + urlThingRemoveThing,\r",
									"                method: 'DELETE',\r",
									"                header: headersOptRemoveThing,\r",
									"                body: httpRequestRemoveThing\r",
									"            };\r",
									"            // console.log('request RemoveThing');\r",
									"            let response = await reqPromise(optionsRemoveThing);\r",
									"            let jsonDataRemoveThing = await response.json();\r",
									"            // console.log('jsonDataRemoveThing',jsonDataRemoveThing)\r",
									"        \r",
									"            let operationStatusRemoveThing = await jsonDataRemoveThing.OperationStatus;\r",
									"\r",
									"            //200\r",
									"            pm.test(\"RemoveThing\" + [i+1]+ \" : Status code is \" + statusCodeSuccess, function () {\r",
									"                pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"            });\r",
									"            //20000\r",
									"            pm.test('RemoveThing' + [i+1]+ ' : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"                pm.expect(operationStatusRemoveThing).to.have.property('Code', resultCodeSuccess);\r",
									"            });\r",
									"            //RemoveThing is Success\r",
									"            pm.test('RemoveThing' + [i+1]+ ' : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThing+'\"', function () {\r",
									"                pm.expect(operationStatusRemoveThing).to.have.property('Description', resultDescriptionRemoveThing);\r",
									"            });\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThingStateInfo\r",
									" RemoveThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"            \r",
									"        };\r",
									"\r",
									"        let dataThingIDArray = JSON.parse(pm.environment.get(\"GetResponse_ThingIDArr\"));\r",
									"\r",
									"        for(let i=0;i<dataThingIDArray.length;i++){\r",
									"        \r",
									"            // body\r",
									"            let httpRequestRemoveThingStateInfo = {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                    \"ThingId\": dataThingIDArray[i],\r",
									"                    \"stateType\": fieldDataValue.CreateThingStateInfo.Type_Report, //Report\r",
									"                    \"stateKey\": fieldDataValue.CreateThingStateInfo.SensorKey //Temp\r",
									"                })\r",
									"            };\r",
									"\r",
									"            let optionsRemoveThingStateInfo = {\r",
									"                url: url + provisioningapis + urlThingRemoveThingStateInfo,\r",
									"                method: 'DELETE',\r",
									"                header: headersOptRemoveThingStateInfo,\r",
									"                body: httpRequestRemoveThingStateInfo\r",
									"            };\r",
									"\r",
									"            // console.log('response RemoveThingStateInfo');\r",
									"            let response = await reqPromise(optionsRemoveThingStateInfo);\r",
									"            let jsonDataRemoveThingStateInfo = await response.json();\r",
									"            // console.log('jsonDataRemoveThing',jsonDataRemoveThingStateInfo)\r",
									"        \r",
									"            let operationStatusRemoveThingStateInfo = await jsonDataRemoveThingStateInfo.OperationStatus;\r",
									"\r",
									"            //200\r",
									"            pm.test(\"RemoveThingStateInfo\" + [i+1] + \" : Status code is \" + statusCodeSuccess, function () {\r",
									"                pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"            });\r",
									"            //20000\r",
									"            pm.test('RemoveThingStateInfo' + [i+1] + ' : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"                pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"            });\r",
									"            //RemoveThingStateInfo is Success\r",
									"            pm.test('RemoveThingStateInfo' + [i+1] + ' : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThingStateInfo+'\"', function () {\r",
									"                pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Description', resultDescriptionRemoveThingStateInfo);\r",
									"            });\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveGroup\r",
									" RemoveGroup = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveGroup = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveGroup + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveGroup,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"            \r",
									"        };\r",
									"\r",
									"        // let dataThingIDArray = JSON.parse(pm.environment.get(\"GetResponse_ThingIDArr\"));\r",
									"\r",
									"        // for(let i=0;i<dataThingIDArray.length;i++){\r",
									"        \r",
									"            // body\r",
									"            let httpRequestRemoveGroup = {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                    \"GroupId\": pm.environment.get(\"GetResponse_ThingGroupID\")\r",
									"                })\r",
									"            };\r",
									"\r",
									"            let optionsRemoveGroup = {\r",
									"                url: url + provisioningapis + urlGroupRemoveGroup,\r",
									"                method: 'DELETE',\r",
									"                header: headersOptRemoveGroup,\r",
									"                body: httpRequestRemoveGroup\r",
									"            };\r",
									"\r",
									"            // console.log('response RemoveGroup');\r",
									"            let response = await reqPromise(optionsRemoveGroup);\r",
									"            let jsonDataRemoveGroup = await response.json();\r",
									"            // console.log('jsonDataRemoveThing',jsonDataRemoveGroup)\r",
									"        \r",
									"            let operationStatusRemoveGroup = await jsonDataRemoveGroup.OperationStatus;\r",
									"\r",
									"            //200\r",
									"            pm.test(\"RemoveGroup : Status code is \" + statusCodeSuccess, function () {\r",
									"                pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"            });\r",
									"            //20000\r",
									"            pm.test('RemoveGroup : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"                pm.expect(operationStatusRemoveGroup).to.have.property('Code', resultCodeSuccess);\r",
									"            });\r",
									"            //RemoveGroup is Success\r",
									"            pm.test('RemoveGroup : OperationStatus Description is '+'\"'+ resultDescriptionRemoveGroup+'\"', function () {\r",
									"                pm.expect(operationStatusRemoveGroup).to.have.property('Description', resultDescriptionRemoveGroup);\r",
									"            });\r",
									"        // }\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"//---------------- LogDefaultValue --------------//\r",
									"//set variable to LogDefaultValue JSON.parse\r",
									"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
									"// console.log('LogDefaultValue',LogDefaultValue);\r",
									"//---------------- set globals Other --------------//\r",
									"var SearchLog = LogDefaultValue.SearchLog;\r",
									"// console.log('SearchLog',SearchLog);\r",
									"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
									"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
									"var kbn_version = SearchLog.header.kbn_version;\r",
									"var authorization = SearchLog.header.Authorization;\r",
									"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
									"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
									"var namespace = LogDefaultValue.Other.namespace_control4mg;\r",
									"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
									"var header_x_ais_accountkey = LogDefaultValue.Other.header_x_ais_accountkey;\r",
									"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
									"var methodPost = LogDefaultValue.Other.methodPost;\r",
									"\r",
									"// Detail\r",
									"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
									"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
									"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
									"\r",
									"// Summary\r",
									"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
									"// ControlAPIs\r",
									"var applicationName = LogDefaultValue.Control.applicationName_mg4;\r",
									"var cmdName = LogDefaultValue.Control.cmdNameThingGroup;\r",
									"// var resultDesc = LogDefaultValue.Control.resultDescThing_success;\r",
									"var endPointNameControlAPIs = LogDefaultValue.Control.endPointNameControlAPIs;\r",
									"var endPointNameDesireEx = LogDefaultValue.Control.endPointNameDesireEx;\r",
									"var endPointNameRabbitMQ = LogDefaultValue.Control.endPointNameRabbitMQ;\r",
									"var containerId = LogDefaultValue.Control.containerId;\r",
									"var requestObjectUrlStaging = LogDefaultValue.Control.requestObjectUrlStagingThingGroup;\r",
									"var xProtocolControl = LogDefaultValue.Control.xProtocolControl;\r",
									"var responseObjectPublished = LogDefaultValue.Control.responseObjectPublished;\r",
									"\r",
									"// Check CDR (Summary Log) and EDR (Detail Log)\r",
									"SearchLogFindTid = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSearchLogFindTid = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        // let valueSearch = pm.environment.get(\"GetResponse_ThingID\"); \r",
									"        let valueSearch = x_ais_OrderRef_ControlThingGroup +  current_timestamp; \r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestSearchLogFindTid = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"\r",
									"        let optionsSearchLogFindTid = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptSearchLogFindTid,\r",
									"            body: httpRequestSearchLogFindTid\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsSearchLogFindTid);\r",
									"        let jsonDataSearchLogFindTid = await response.json();\r",
									"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
									"        console.log('hits',hits)\r",
									"  \r",
									"        // find tid\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            // let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"        \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            if(applicationNameValue == applicationName){\r",
									"                // let tid = hits[i]._source.cauldron.tid;\r",
									"                // pm.environment.set(\"tid\", tid);\r",
									"                let sessionId = hits[i]._source.cauldron.sessionId;\r",
									"                pm.environment.set(\"sessionId\", sessionId);\r",
									"                break;\r",
									"           }\r",
									"        }\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"CheckLog = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCheckLog = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = pm.environment.get(\"sessionId\");\r",
									"\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestCheckLog = {\r",
									"            mode: 'raw',\r",
									"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"        let optionsCheckLog = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptCheckLog,\r",
									"            body: httpRequestCheckLog\r",
									"        }; \r",
									"        let response = await reqPromise(optionsCheckLog);\r",
									"        let jsonDataCheckLog = await response.json();\r",
									"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
									"        \r",
									"        // //200\r",
									"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });     \r",
									"        \r",
									"        let hits = jsonDataCheckLog.hits.hits\r",
									"        console.log('hits',hits)\r",
									"  \r",
									"        // find logType\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            //  let logType = hits[i]._source.cauldron.logType\r",
									"            let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"           \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            \r",
									"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
									"            // console.log('resultDataLog',resultDataLog)\r",
									"\r",
									"            let tidControl = x_ais_OrderRef_ControlThingGroup + current_timestamp;\r",
									"            // console.log(tidControl);\r",
									"            if(applicationNameValue == applicationName){\r",
									"                 \r",
									"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ControlAPIs\r",
									"                    pm.test(\"Check Summary Log : ControlThingGroup\" , function () {\r",
									"                        console.log(\"======== Check Summary Log ( Expected = Actual) [ControlThingGroup] ==================\");\r",
									"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
									"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
									"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeSuccess);\r",
									"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
									"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        // console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
									"                        // console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
									"\r",
									"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
									"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
									"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeSuccess); \r",
									"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionTheRequestedOperationWasSuccessfully); \r",
									"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
									"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"\r",
									"                        let thingGroupId = pm.environment.get(\"GetResponse_ThingGroupID\");\r",
									"                        let customUrl= urlCheckLog + requestObjectUrlStaging;\r",
									"                        let customAccountkey = pm.environment.get(\"GetResponse_AccountId\");\r",
									"\r",
									"                        // check identity\r",
									"                        // \"identity\":\"{\\\"ThingGroupID\\\":\\\"6012a61a96d0ed0001f5616c\\\"}\"\r",
									"                        let dataSummaryIdentity = JSON.parse(resultDataLog.identity);\r",
									"\r",
									"                        console.log(\"identity.ThingGroupID : \" + dataSummaryIdentity.ThingGroupID + \" = \" + thingGroupId);\r",
									"                        pm.expect(dataSummaryIdentity.ThingGroupID).to.eql(thingGroupId); \r",
									"                       \r",
									"                        // check custom\r",
									"                        // \\\"custom\\\":{ \\\"customData\\\":{ \\\"url\\\":\\\"mg-iot.sandais.com/api/v1/Control/ThingGroup\\\", \\\"accountkey\\\":\\\"609a05c726fdbc0001c3f21a\\\", \\\"ThingGroupID\\\":[ \\\"609a05cb26fdbc0001c3f23b\\\" ] }, \\\"endPointSummary\\\":[ { \\\"no\\\":\\\"1\\\", \\\"endPointName\\\":\\\"db.AuthenticationCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:Inquiry was Success\\\", \\\"processTime\\\":0.0003 }, { \\\"no\\\":\\\"2\\\", \\\"endPointName\\\":\\\"db.ClientsCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:Inquiry was Success\\\", \\\"processTime\\\":0.0004 }, { \\\"no\\\":\\\"3\\\", \\\"endPointName\\\":\\\"db.AccountsCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:Inquiry was Success\\\", \\\"processTime\\\":0.0002 }, { \\\"no\\\":\\\"4\\\", \\\"endPointName\\\":\\\"db.GroupsCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:Inquiry was Success\\\", \\\"processTime\\\":0.0003 }, { \\\"no\\\":\\\"5\\\", \\\"endPointName\\\":\\\"db.ThingsCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:Inquiry was Success\\\", \\\"processTime\\\":0.0003 } ] }\r",
									"\r",
									"                        let customData = resultDataLog.custom.customData\r",
									"\r",
									"                        console.log(\"custom.url : \" + customData.url + \" = \" + customUrl);\r",
									"                        console.log(\"custom.accountkey : \" + customData.accountkey + \" = \" + customAccountkey);\r",
									"                        console.log(\"custom.ThingGroupID[0] : \" + customData.ThingGroupID[0] + \" = \" + thingGroupId);\r",
									"\r",
									"                        pm.expect(customData.url).to.eql(customUrl); \r",
									"                        pm.expect(customData.accountkey).to.eql(customAccountkey); \r",
									"                        pm.expect(customData.ThingGroupID[0]).to.eql(thingGroupId); \r",
									"\r",
									"                        let custom = resultDataLog.custom.endPointSummary;\r",
									"                        let countCustom = custom.length;\r",
									"                       \r",
									"                        // [\"db.AuthenticationCollection\",\"db.ClientsCollection\",\"db.AccountsCollection\",\"db.GroupsCollection\",\"db.ThingsCollection\"]\r",
									"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_ControlThingGroup;\r",
									"                        // [\"20000:Inquiry was Success\",\"20000:Inquiry was Success\",\"20000:Inquiry was Success\",\"20000:Inquiry was Success\",\"20000:Inquiry was Success\"]\r",
									"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_ControlThingGroup;\r",
									"                        let countCustomStep = dataEndPointName.length;\r",
									"\r",
									"                        console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep);\r",
									"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
									"                        \r",
									"                        for(let i=0;i<countCustomStep;i++){\r",
									"                            let no = custom[i].no;\r",
									"                            let valueEndPointName = custom[i].endPointName;\r",
									"                            let valueResponseStatus = custom[i].responseStatus;\r",
									"                            // console.log(\"i\",i);\r",
									"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
									"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
									"\r",
									"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString());\r",
									"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i]);\r",
									"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i]);\r",
									"\r",
									"                            pm.expect(no).to.eql((i+1).toString()); \r",
									"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
									"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]); \r",
									"                        }\r",
									"                    }); \r",
									"                }\r",
									"\r",
									"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ControlAPIs\r",
									"\r",
									"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
									"                    // console.log('endPointNameValue ',endPointNameValue)\r",
									"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [ControlThingGroup]\", function () {\r",
									"                        console.log(\"======== Check Detail Log ( Expected = Actual) [ControlThingGroup] ==================\");\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
									"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
									"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
									"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
									"\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
									"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
									"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
									"\r",
									"                        let url = requestObjectUrlStaging; \r",
									"                        let urlCustom = urlCheckLog + requestObjectUrlStaging; \r",
									"                        let SensorKey = fieldDataValue.CreateThingStateInfo.SensorKey;\r",
									"                        let sensor = pm.environment.get(\"random_Sensor_Control\");\r",
									"                        let x_ais_orderref = x_ais_OrderRef_ControlThingGroup + current_timestamp;\r",
									"                        let x_ais_AccountKey = pm.environment.get(\"GetResponse_AccountId\");\r",
									"                        let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken\");\r",
									"                        let thingGroupId = pm.environment.get(\"GetResponse_ThingGroupID\");\r",
									"                        let x_protocol = xProtocolControl;\r",
									"\r",
									"                        // if( endPointNameValue == endPointNameControlAPIs){     //\"endPointName\":\"ControlAPIs\"\r",
									"                        if( endPointNameValue == undefined){    //\"endPointName\":undefined\r",
									"\r",
									"                            console.log(\"custom1.endPointName : \" + resultDataLog.custom1.endPointName + \" = \" + undefined);\r",
									"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(undefined); \r",
									"                        \r",
									"                            // check requestObject\r",
									"                            // \"requestObject\":\"{\\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Control/ThingGroup\\\",\\\"method\\\":\\\"POST\\\",\\\"headers\\\":{\\\"x-ais-orderref\\\":\\\"ControlThingGroup_202101281801477\\\",\\\"x-ais-accountkey\\\":\\\"60114adca32e8c0001576d22\\\",\\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAGhfn1wJCmf68Vf1zYxZ/fak0lmQ84nNnLsXbdYpFNnXEIlAkkY2KW0\\\"},\\\"body\\\":{\\\"ThingGroupId\\\":\\\"6012a61a96d0ed0001f5616c\\\",\\\"Sensors\\\":{\\\"Temp\\\":955}}}\"\r",
									"\r",
									"                            // \\\"requestObject\\\":\\\"{ \\\\\\\"url\\\\\\\":\\\\\\\"/api/v1/Control/ThingGroup\\\\\\\", \\\\\\\"method\\\\\\\":\\\\\\\"POST\\\\\\\", \\\\\\\"headers\\\\\\\":{ \\\\\\\"Cache-Control\\\\\\\":\\\\\\\"no-cache\\\\\\\", \\\\\\\"Content-Type\\\\\\\":\\\\\\\"application/json\\\\\\\", \\\\\\\"Accept\\\\\\\":\\\\\\\"*/*\\\\\\\", \\\\\\\"Accept-Encoding\\\\\\\":\\\\\\\"gzip, deflate, br\\\\\\\", \\\\\\\"Host\\\\\\\":\\\\\\\"mg-iot.sandais.com\\\\\\\", \\\\\\\"User-Agent\\\\\\\":\\\\\\\"PostmanRuntime/7.26.8\\\\\\\", \\\\\\\"Content-Length\\\\\\\":\\\\\\\"89\\\\\\\", \\\\\\\"x-real-ip\\\\\\\":\\\\\\\"182.232.14.198\\\\\\\", \\\\\\\"x-forwarded-for\\\\\\\":\\\\\\\"182.232.14.198, 10.233.64.0\\\\\\\", \\\\\\\"x-forwarded-proto\\\\\\\":\\\\\\\"http\\\\\\\", \\\\\\\"x-ais-orderref\\\\\\\":\\\\\\\"ControlThingGroup_202105111105245\\\\\\\", \\\\\\\"x-ais-accountkey\\\\\\\":\\\\\\\"609a05c726fdbc0001c3f21a\\\\\\\", \\\\\\\"x-ais-accesstoken\\\\\\\":\\\\\\\"Bearer ibnxnVhs5Rx3IwglWv7/gVA/1TpQnKqAOBAADlRDvYhOpXwmlpYOEb5yfY5aZpoj0YRWRZM26i9HOqtc1fc1jpNDOK5JpISttmMEy59g2py7nLWonDe2YW2OPRGWSowk6+9ZihLU1fZ5d5jAqqrZaKlOAAI3N1TXDNLsHuKcOJMcERbCcaMqRaku+MY4/kzE+eyIdkfwwbjT91S2VQq+Wk2ooMWuLk6/DHVJhwbMP7bviRgywbKNruTPsNbeCuuM89Pvwv0VaDdKVegMrc8SMg==\\\\\\\", \\\\\\\"postman-token\\\\\\\":\\\\\\\"9a61ba38-943a-41a1-b20e-078c5ea9d2a8\\\\\\\", \\\\\\\"x-envoy-external-address\\\\\\\":\\\\\\\"10.233.64.0\\\\\\\", \\\\\\\"x-request-id\\\\\\\":\\\\\\\"4c7486b4-bb8a-4594-9838-04fe467bff30\\\\\\\", \\\\\\\"x-envoy-original-path\\\\\\\":\\\\\\\"/mg4controlapis/api/v1/Control/ThingGroup\\\\\\\", \\\\\\\"x-b3-traceid\\\\\\\":\\\\\\\"3316306559aac1819bdafc1c3f6d9328\\\\\\\", \\\\\\\"x-b3-spanid\\\\\\\":\\\\\\\"1084dd4156c311fd\\\\\\\", \\\\\\\"x-b3-parentspanid\\\\\\\":\\\\\\\"9bdafc1c3f6d9328\\\\\\\", \\\\\\\"x-b3-sampled\\\\\\\":\\\\\\\"0\\\\\\\", \\\\\\\"x-ais-SessionId\\\\\\\":\\\\\\\"1620706768393\\\\\\\", \\\\\\\"identity\\\\\\\":\\\\\\\"{ \\\\\\\\\\\\\\\"ThingGroupID\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"609a05cb26fdbc0001c3f23b\\\\\\\\\\\\\\\" }\\\\\\\", \\\\\\\"custom\\\\\\\":\\\\\\\"{ \\\\\\\\\\\\\\\"url\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"mg-iot.sandais.com/api/v1/Control/ThingGroup\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"accountkey\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"609a05c726fdbc0001c3f21a\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"ThingGroupID\\\\\\\\\\\\\\\":[ \\\\\\\\\\\\\\\"609a05cb26fdbc0001c3f23b\\\\\\\\\\\\\\\" ] }\\\\\\\" }, \\\\\\\"queryString\\\\\\\":{ }, \\\\\\\"routeParamteters\\\\\\\":{ }, \\\\\\\"body\\\\\\\":{ \\\\\\\"ThingGroupId\\\\\\\":\\\\\\\"609a05cb26fdbc0001c3f23b\\\\\\\", \\\\\\\"Sensors\\\\\\\":{ \\\\\\\"Temp\\\\\\\":513 } } }\\\"\r",
									"                            \r",
									"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
									"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
									"\r",
									"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
									"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
									"                            console.log(\"headers.x_ais_AccountKey : \" + jsonParseRequestObject.headers[header_x_ais_accountkey] + \" = \" + x_ais_AccountKey);\r",
									"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
									"                            \r",
									"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
									"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accountkey]).to.eql(x_ais_AccountKey);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
									"\r",
									"                            let identity = JSON.parse(jsonParseRequestObject.headers.identity)\r",
									"                            console.log(\"headers.identity.ThingGroupID : [\" + identity.ThingGroupID + \"] = [\" + thingGroupId + \"]\");\r",
									"                            pm.expect(identity.ThingGroupID).to.eql(thingGroupId);\r",
									"                            \r",
									"                            let custom = JSON.parse(jsonParseRequestObject.headers.custom)\r",
									"                            console.log(\"headers.custom.url : \" + custom.url + \" = \" + urlCustom);\r",
									"                            console.log(\"headers.custom.accountkey : \" + custom.accountkey + \" = \" + x_ais_AccountKey);\r",
									"                            console.log(\"headers.custom.ThingGroupID[0] : \" + custom.ThingGroupID + \" = \" + thingGroupId);\r",
									"                            \r",
									"                            pm.expect(custom.url).to.eql(urlCustom);\r",
									"                            pm.expect(custom.accountkey).to.eql(x_ais_AccountKey);\r",
									"                            pm.expect(custom.ThingGroupID[0]).to.eql(thingGroupId);\r",
									"\r",
									"                            console.log(\"queryString : \" + JSON.stringify(jsonParseRequestObject.queryString) + \" = \" + JSON.stringify({}));\r",
									"                            pm.expect(jsonParseRequestObject.queryString).to.eql({});\r",
									"\r",
									"                            console.log(\"routeParamteters : \" + JSON.stringify(jsonParseRequestObject.routeParamteters) + \" = \" + JSON.stringify({}));\r",
									"                            pm.expect(jsonParseRequestObject.routeParamteters).to.eql({});\r",
									"\r",
									"                            console.log(\"resquest.body.ThingGroupId : \" + jsonParseRequestObject.body.ThingGroupId + \" = \" + thingGroupId);\r",
									"                            console.log(\"resquest.body.Sensors.\" + SensorKey + \"  : \" + jsonParseRequestObject.body.Sensors[SensorKey] + \" = \" + sensor);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.body.ThingGroupId).to.eql(thingGroupId);\r",
									"                            pm.expect(jsonParseRequestObject.body.Sensors[SensorKey]).to.eql(sensor);\r",
									"\r",
									"                            // check responseObject\r",
									"                            // \\\"responseObject\\\":\\\"{ \\\\\\\"OperationStatus\\\\\\\":{ \\\\\\\"Code\\\\\\\":\\\\\\\"20000\\\\\\\", \\\\\\\"DeveloperMessage\\\\\\\":\\\\\\\"The requested operation was successfully.\\\\\\\" } }\\\"\r",
									"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
									"                            // console.log('jsonParseResponseObject',jsonParseResponseObject);\r",
									"\r",
									"                            console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeSuccess);\r",
									"                            console.log(\"response.OperationStatus.DeveloperMessage : \" + jsonParseResponseObject.OperationStatus.DeveloperMessage + \" = \" + resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"\r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeSuccess);  \r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheRequestedOperationWasSuccessfully);  \r",
									"                        }\r",
									"\r",
									"                        // if( endPointNameValue == endPointNameDesireEx){\r",
									"                        if( endPointNameValue == endPointNameRabbitMQ){\r",
									"\r",
									"                            console.log(\"custom1.endPointName : \" + resultDataLog.custom1.endPointName + \" = \" + endPointNameRabbitMQ);\r",
									"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameRabbitMQ); \r",
									"\r",
									"                            // check requestObject\r",
									"                            // \"requestObject\":\"{\\\"RoutingKey\\\":\\\"desire.pub.v1.15ef8559-0a9a-4ae8-a643-4ecc5f3321b2\\\",\\\"Payload\\\":\\\"{\\\\\\\"Temp\\\\\\\":955}\\\",\\\"Headers\\\":{\\\"timestamp_in_ms\\\":1611746014944,\\\"x-ais-orderref\\\":\\\"ControlThingGroup_202101281801477\\\",\\\"x_protocol\\\":\\\"CONTROL\\\"}}\"\r",
									"\r",
									"                            // \\\"requestObject\\\":\\\"{ \\\\\\\"url\\\\\\\":\\\\\\\"desire.pub.v1.1153bb18-2e41-44af-9456-22ae2ecff7df\\\\\\\", \\\\\\\"headers\\\\\\\":{ \\\\\\\"x-ais-orderref\\\\\\\":\\\\\\\"ControlThingGroup_202105111105245\\\\\\\", \\\\\\\"x-ais-sessionid\\\\\\\":\\\\\\\"1620706768393\\\\\\\", \\\\\\\"timestamp_in_ms\\\\\\\":\\\\\\\"1620706768425\\\\\\\", \\\\\\\"x_protocol\\\\\\\":\\\\\\\"CONTROL\\\\\\\" }, \\\\\\\"body\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"{ \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Temp\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":513 }\\\\\\\\\\\\\\\"\\\\\\\" }\\\"\r",
									"\r",
									"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
									"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
									"                        \r",
									"                            // let jsonParsePayload = JSON.parse(jsonParseRequestObject.Payload);\r",
									"                            // console.log('jsonParsePayload',jsonParsePayload);\r",
									"                            let jsonParseBody = jsonParseRequestObject.body;\r",
									"                            let jsonParseBody1 = JSON.parse(jsonParseBody);\r",
									"                            let jsonParseBody2 = JSON.parse(jsonParseBody1);\r",
									"                            // console.log('jsonParseBody',jsonParseBody);\r",
									"                            // console.log('jsonParseBody1',jsonParseBody1);\r",
									"                            // console.log('jsonParseBody2',jsonParseBody2);\r",
									"                            // console.log('jsonParseBody2',jsonParseBody2[SensorKey]);\r",
									"\r",
									"                            console.log(\"headers.timestamp_in_ms : \" + jsonParseRequestObject.headers.timestamp_in_ms + \" = \" + jsonParseRequestObject.headers.timestamp_in_ms);\r",
									"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"                            console.log(\"headers.x_protocol : \" + jsonParseRequestObject.headers.x_protocol + \" = \" + x_protocol);\r",
									"        \r",
									"                            pm.expect(jsonParseRequestObject.headers.timestamp_in_ms).to.eql(jsonParseRequestObject.headers.timestamp_in_ms);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                            pm.expect(jsonParseRequestObject.headers.x_protocol).to.eql(x_protocol);\r",
									"\r",
									"                            console.log(\"resquest.\"+ SensorKey +\" : \" + jsonParseBody2[SensorKey] + \" = \" + sensor);\r",
									"                            pm.expect(jsonParseBody2[SensorKey]).to.eql(sensor);\r",
									"                \r",
									"                            // check responseObject\r",
									"                            // \\\"responseObject\\\":\\\"\\\\\\\"\\\\\\\"\\\"\r",
									"                            // let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
									"                            // console.log('jsonParseResponseObject',jsonParseResponseObject);\r",
									"\r",
									"                            console.log(\"response.custom1.responseObject : \" + resultDataLog.custom1.responseObject + \" = \" + JSON.stringify(\"\"));\r",
									"                            pm.expect(resultDataLog.custom1.responseObject).to.eql(JSON.stringify(\"\"));  \r",
									"                        }\r",
									"\r",
									"                    }); \r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// InquiryThing\r",
									"InquiryThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptInquiryThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_InquiryThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_InquiryThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestInquiryThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsInquiryThing = {\r",
									"            url: url + provisioningapis + urlThingInquiryThing,\r",
									"            method: 'POST',\r",
									"            header: headersOptInquiryThing,\r",
									"            body: httpRequestInquiryThing\r",
									"        };\r",
									"\r",
									"        // console.log('request InquiryThing');\r",
									"        let response = await reqPromise(optionsInquiryThing);\r",
									"        let jsonDataInquiryThing = await response.json();\r",
									"        // console.log('jsonDataInquiryThing',jsonDataInquiryThing)\r",
									"    \r",
									"        let operationStatusInquiryThing = await jsonDataInquiryThing.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"InquiryThing : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('InquiryThing : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusInquiryThing).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //InquiryThing is Success\r",
									"        pm.test('InquiryThing : OperationStatus Description is '+'\"'+ resultDescriptionInquiryThing+'\"', function () {\r",
									"            pm.expect(operationStatusInquiryThing).to.have.property('Description', resultDescriptionInquiryThing);\r",
									"        });\r",
									"\r",
									"        //Check Data\r",
									"        let thingInfo = await jsonDataInquiryThing.ThingInfo;\r",
									"        console.log('thingInfo',thingInfo);\r",
									"\r",
									"        for(let i=0;i<thingInfo.length;i++){\r",
									"            pm.test('Verify DB Check Data : ControlThingGroup [StateInfo.Desire and StateInfo.Delta :{ \"'+  fieldDataValue.CreateThingStateInfo.SensorKey + '\" : \"'+ pm.environment.get(\"random_Sensor_Control\") +'\" }]' , function () {\r",
									"                console.log(\"======== Verify DB Check Data ( Expected = Actual) [ControlThingGroup] ==================\");\r",
									"                console.log(\"thingInfo[\"+ i +\"]StateInfo.Delta : \" + thingInfo[i].StateInfo.Delta[fieldDataValue.CreateThingStateInfo.SensorKey] + \" = \" + pm.environment.get(\"random_Sensor_Control\"));\r",
									"                console.log(\"thingInfo[\"+ i +\"]StateInfo.Desire : \" + thingInfo[i].StateInfo.Delta[fieldDataValue.CreateThingStateInfo.SensorKey] + \" = \" + pm.environment.get(\"random_Sensor_Control\"));\r",
									"\r",
									"                pm.expect(thingInfo[i].StateInfo.Delta).to.have.property(fieldDataValue.CreateThingStateInfo.SensorKey, pm.environment.get(\"random_Sensor_Control\"));\r",
									"                pm.expect(thingInfo[i].StateInfo.Desire).to.have.property(fieldDataValue.CreateThingStateInfo.SensorKey, pm.environment.get(\"random_Sensor_Control\"));\r",
									"            });\r",
									"        }\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"setTimeout(function(){SearchLogFindTid();}, 20000); \r",
									"setTimeout(function(){CheckLog();}, 30000); \r",
									"setTimeout(function(){InquiryThing();}, 40000); \r",
									"\r",
									"setTimeout(function(){RemoveGroup();}, 45000); \r",
									"setTimeout(function(){RemoveThingStateInfo();}, 50000); \r",
									"setTimeout(function(){RemoveThing();}, 55000); \r",
									"setTimeout(function(){RemoveAccount();}, 60000); \r",
									"setTimeout(function(){RemovePartner();}, 65000); \r",
									"\r",
									"setTimeout(function(){\r",
									"pm.environment.unset(\"current_timestamp\");\r",
									"pm.environment.unset(\"AccessToken\");\r",
									"pm.environment.unset(\"random_number\");\r",
									"pm.environment.unset(\"PartnerName\");\r",
									"pm.environment.unset(\"MerchantContact\");\r",
									"pm.environment.unset(\"CPID\");\r",
									"pm.environment.unset(\"GetResponse_PartnerId\");\r",
									"pm.environment.unset(\"AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountId\");\r",
									"for(let i=0;i<countData;i++){\r",
									"pm.environment.unset(\"random_IM\"+[i+1]);\r",
									"pm.environment.unset(\"random_ICCID\"+[i+1]);\r",
									"pm.environment.unset(\"ThingName\"+[i+1]);\r",
									"}\r",
									"pm.environment.unset(\"ThingGroupName\");\r",
									"pm.environment.unset(\"GetResponse_ThingIDArr\");\r",
									"pm.environment.unset(\"random_Sensor\");\r",
									"pm.environment.unset(\"GetResponse_ThingGroupID\");\r",
									"pm.environment.unset(\"tid\");\r",
									"pm.environment.unset(\"sessionId\");\r",
									"pm.environment.unset(\"SensorKey\");\r",
									"pm.environment.unset(\"random_Sensor_Control\");\r",
									"pm.environment.unset(\"Value_ControlThingGroup_TST_F3_1_1_002_Succees\");\r",
									"}, 90000); "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var Username = pm.environment.get(\"Username\");\r",
									"var Password = pm.environment.get(\"Password\");\r",
									"\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//count for loop data\r",
									"var countData = 2;\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"pm.environment.set(\"SensorKey\",fieldDataValue.CreateThingStateInfo.SensorKey)\r",
									"pm.environment.set(\"Value_ControlThingGroup_TST_F3_1_1_002_Succees\",fieldDataValue.Control.Value_ControlThingGroup_TST_F3_1_1_002_Succees)\r",
									"\r",
									"//format YYYYMMDDHHMMSSS\r",
									"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
									"// console.log('currentTmestamp',currentTmestamp);\r",
									"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- statusCodeList --------------//\r",
									"//set variable to statusCodeList JSON.parse\r",
									"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
									"//set global variable to statusCode 200\r",
									"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
									"//set global variable to statusCode 201\r",
									"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultCodeList --------------//\r",
									"//set variable to resultCodeList JSON.parse\r",
									"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
									"//set global variable to resultCode \"20000\"\r",
									"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
									"//set global variable to resultCode \"20100\"\r",
									"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionSuccessList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
									"//set global variable to resultDescription \"SignInProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
									"//set global variable to resultDescription \"CreatePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
									"//set global variable to resultDescription \"CreateAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
									"//set global variable to resultDescription \"CreateThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThing\", resultDescriptionSuccessList.resultDescriptionCreateThing);\r",
									"//set global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThingStateInfo\", resultDescriptionSuccessList.resultDescriptionCreateThingStateInfo);\r",
									"//set global variable to resultDescription \"RemovePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
									"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
									"//set global variable to resultDescription \"RemoveThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThing\", resultDescriptionSuccessList.resultDescriptionRemoveThing);\r",
									"//set global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThingStateInfo\", resultDescriptionSuccessList.resultDescriptionRemoveThingStateInfo);\r",
									"//set global variable to resultDescription \"CreateGroup is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateGroup\", resultDescriptionSuccessList.resultDescriptionCreateGroup);\r",
									"//set global variable to resultDescription \"RemoveGroup is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveGroup\", resultDescriptionSuccessList.resultDescriptionRemoveGroup);\r",
									"//set global variable to resultDescription \"Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccess\", resultDescriptionSuccessList.resultDescriptionSuccess);\r",
									"//set global variable to resultDescription \"Created Success\"\r",
									"pm.globals.set(\"resultDescriptionCreatedSuccess\", resultDescriptionSuccessList.resultDescriptionCreatedSuccess);\r",
									"//set global variable to resultDescription \"ControlOneGroup is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessControlOneGroup\", resultDescriptionSuccessList.resultDescriptionSuccessControlOneGroup);\r",
									"//set global variable to resultDescription \"InquiryThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionInquiryThing\", resultDescriptionSuccessList.resultDescriptionInquiryThing);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- HeaderList --------------//\r",
									"//set variable to HeaderList JSON.parse\r",
									"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
									"//---------------- set globals Other --------------//\r",
									"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
									"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
									"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
									"//set global variable to kbn-versio \"7.5.1\"\r",
									"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Signin_ --------------//\r",
									"//set global variable to x_ais_OrderRef \"Signin_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreatePartner --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
									"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
									"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
									"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreateAccount --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
									"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
									"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Thing --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThing\", HeaderList.Thing.x_ais_OrderRef_CreateThing);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThing\", HeaderList.Thing.x_ais_OrderDesc_CreateThing);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThing\", HeaderList.Thing.x_ais_OrderRef_RemoveThing);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThing\", HeaderList.Thing.x_ais_OrderDesc_RemoveThing);\r",
									"//set global variable to x_ais_OrderRef \"InquiryThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_InquiryThing\", HeaderList.Thing.x_ais_OrderRef_InquiryThing);\r",
									"//set global variable to x_ais_OrderDesc \"InquiryThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_InquiryThing\", HeaderList.Thing.x_ais_OrderDesc_InquiryThing);\r",
									"//set global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_RemoveThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_RemoveThingStateInfo);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Group --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateGroup_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateGroup\", HeaderList.Group.x_ais_OrderRef_CreateGroup);\r",
									"//set global variable to x_ais_OrderDesc \"CreateGroup\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateGroup\", HeaderList.Group.x_ais_OrderDesc_CreateGroup);\r",
									"//set global variable to x_ais_OrderRef \"RemoveGroup_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveGroup\", HeaderList.Group.x_ais_OrderRef_RemoveGroup);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveGroup\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveGroup\", HeaderList.Group.x_ais_OrderDesc_RemoveGroup);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Control --------------//\r",
									"//set global variable to x_ais_OrderRef \"ControlThingGroup_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ControlThingGroup\", HeaderList.Control.x_ais_OrderRef_ControlThingGroup);\r",
									"//set global variable to x_ais_OrderRef \"ControlThingGroupfail_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ControlThingGroup_fail\", HeaderList.Control.x_ais_OrderRef_ControlThingGroup_fail);\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"SignInProcess is Success\"\r",
									"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
									"//get global variable to resultDescription \"CreatePartner is Success\"\r",
									"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
									"//get global variable to resultDescription \"CreateAccount is Success\"\r",
									"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
									"//get global variable to resultDescription \"CreateThing is Success\"\r",
									"var resultDescriptionCreateThing = pm.globals.get(\"resultDescriptionCreateThing\");\r",
									"//get global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"var resultDescriptionCreateThingStateInfo = pm.globals.get(\"resultDescriptionCreateThingStateInfo\");\r",
									"//get global variable to resultDescription \"CreateGroup is Success\"\r",
									"var resultDescriptionCreateGroup = pm.globals.get(\"resultDescriptionCreateGroup\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- urlRouteList --------------//\r",
									"//set variable to urlRouteList JSON.parse\r",
									"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
									"//---------------- set url Create --------------//\r",
									"//set global variable to url \"/api/v1/auth/signin\"\r",
									"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
									"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
									"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"pm.globals.set(\"urlThingCreateThing\", urlRouteList.Thing.urlThingCreateThing);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"pm.globals.set(\"urlThingCreateThingStateInfo\", urlRouteList.Thing.urlThingCreateThingStateInfo);\r",
									"//set global variable to url \"/api/v1/Group/CreateGroup\"\r",
									"pm.globals.set(\"urlGroupCreateGroup\", urlRouteList.Group.urlGroupCreateGroup);\r",
									"//---------------- get url Create --------------//\r",
									"//get global variable to url \"/api/v1/auth/signin\"\r",
									"var urlSignin = pm.globals.get(\"urlSignin\");\r",
									"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
									"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"var urlThingCreateThing = pm.globals.get(\"urlThingCreateThing\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"var urlThingCreateThingStateInfo = pm.globals.get(\"urlThingCreateThingStateInfo\");\r",
									"//get global variable to url \"/api/v1/Group/CreateGroup\"\r",
									"var urlGroupCreateGroup = pm.globals.get(\"urlGroupCreateGroup\");\r",
									"//---------------- set url Remove --------------//\r",
									"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
									"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"pm.globals.set(\"urlThingRemoveThing\", urlRouteList.Thing.urlThingRemoveThing);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"pm.globals.set(\"urlThingRemoveThingStateInfo\", urlRouteList.Thing.urlThingRemoveThingStateInfo);\r",
									"//set global variable to url \"/api/v1/Group/RemoveGroup\"\r",
									"pm.globals.set(\"urlGroupRemoveGroup\", urlRouteList.Group.urlGroupRemoveGroup);\r",
									"//---------------- set url Inquiry --------------//\r",
									"//set global variable to url \"/api/v1/Thing/InquiryThing\"\r",
									"pm.globals.set(\"urlThingInquiryThing\", urlRouteList.Thing.urlThingInquiryThing);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Signin_ --------------//\r",
									"//get global variable to x_ais_OrderRef \"Signin_\"\r",
									"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"var x_ais_OrderRef_CreateThing = pm.globals.get(\"x_ais_OrderRef_CreateThing\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"var x_ais_OrderDesc_CreateThing = pm.globals.get(\"x_ais_OrderDesc_CreateThing\");\r",
									"//get global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"var x_ais_OrderRef_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderRef_CreateThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"var x_ais_OrderDesc_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_CreateThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Group --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateGroup_\"\r",
									"var x_ais_OrderRef_CreateGroup = pm.globals.get(\"x_ais_OrderRef_CreateGroup\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateGroup\"\r",
									"var x_ais_OrderDesc_CreateGroup = pm.globals.get(\"x_ais_OrderDesc_CreateGroup\");\r",
									"//------------------------------------------------------------//\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            // console.log('response111',response);\r",
									"            // console.log('errerrerr',err);\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// Signin get token\r",
									" Signin = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSignin = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestSignin = {\r",
									"            mode: 'raw',\r",
									"            raw: \r",
									"            JSON.stringify({\r",
									"                username:Username,\r",
									"                password:Password\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsSignin = {\r",
									"            url: url + provisioningapis + urlSignin,\r",
									"            method: 'POST',\r",
									"            header: headersOptSignin,\r",
									"            body: httpRequestSignin\r",
									"        };\r",
									"        // console.log('request Signin');\r",
									"        let response = await reqPromise(optionsSignin);\r",
									"        let jsonDataSignin = await response.json();\r",
									"\r",
									"        // setAccessToken\r",
									"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
									"\r",
									"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // SignInProcess is Success\r",
									"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
									"        });\r",
									"\r",
									"        //set random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //set PartnerName\r",
									"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
									"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
									"        //set MerchantContact\r",
									"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
									"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
									"        // set CPID\r",
									"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
									"        pm.environment.set(\"CPID\", CPIDValue)\r",
									"        \r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreatePartner\r",
									" CreatePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreatePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreatePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
									"                \"PartnerType\": [\r",
									"                    \"Supplier\",\r",
									"                    \"Customer\"\r",
									"                ],\r",
									"                \"PartnerDetail\": {\r",
									"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
									"                    \"CPID\": pm.environment.get(\"CPID\")\r",
									"                },\r",
									"                \"Property\": {\r",
									"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsCreatePartner = {\r",
									"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreatePartner,\r",
									"            body: httpRequestCreatePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsCreatePartner);\r",
									"        let jsonDataCreatePartner = await response.json();\r",
									"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
									"    \r",
									"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreatePartner is Success\r",
									"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
									"        });\r",
									"\r",
									"        //GetResponse_PartnerId\r",
									"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
									"\r",
									"        //Accountname\r",
									"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
									"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateAccount\r",
									" CreateAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreateAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
									"                })\r",
									"        };\r",
									"        \r",
									"        let optionsCreateAccount = {\r",
									"            url: url + provisioningapis + urlAccountCreateAccount,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateAccount,\r",
									"            body: httpRequestCreateAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateAccount');\r",
									"        let response = await reqPromise(optionsCreateAccount);\r",
									"        let jsonDataCreateAccount = await response.json();\r",
									"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
									"    \r",
									"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateAccount : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateAccount is Success\r",
									"        pm.test('CreateAccount : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
									"        });\r",
									"        // GetResponse_AccountName\r",
									"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
									"        // GetResponse_AccountId\r",
									"        pm.environment.set(\"GetResponse_AccountId\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
									"       \r",
									" // // random_IM\r",
									"        // pm.environment.set(\"random_IM\", _.random(10000000, 99999999)+\" \"+_.random(1000000, 9999999))\r",
									"        // // random_ICCID\r",
									"        // pm.environment.set(\"random_ICCID\", _.random(1000000, 9999999)+\" \"+_.random(100000, 999999))\r",
									"        // // random_number\r",
									"        // pm.environment.set(\"random_number\",pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        // //ThingName\r",
									"        // let thingNameValue = fieldDataValue.Thing.ThingNameValue; // \"Sensor_TestThingName\"\r",
									"        // pm.environment.set(\"ThingName\", thingNameValue + pm.environment.get(\"random_number\"))\r",
									"\r",
									"        // random_number\r",
									"        pm.environment.set(\"random_number\",pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"\r",
									"        for(let i=0;i<countData;i++){\r",
									"            // random_IM\r",
									"            pm.environment.set(\"random_IM\"+[i+1], _.random(10000000, 99999999)+\" \"+_.random(1000000, 9999999))\r",
									"            // random_ICCID\r",
									"            pm.environment.set(\"random_ICCID\"+[i+1], _.random(1000000, 9999999)+\" \"+_.random(100000, 999999))\r",
									"\r",
									"            //ThingName\r",
									"            let thingNameValue = fieldDataValue.Thing.ThingNameValue; // \"Sensor_TestThingName\"\r",
									"            pm.environment.set(\"ThingName\"+[i+1],thingNameValue + [i+1] + pm.environment.get(\"random_number\"))\r",
									"        }\r",
									"\r",
									"        //ThinggroupName\r",
									"        let ThingGroupNameValue = fieldDataValue.Group.ThingGroupNameValue; // \"Sensor_TestThingGroupName\"\r",
									"        pm.environment.set(\"ThingGroupName\",ThingGroupNameValue + pm.environment.get(\"random_number\"))\r",
									"            \r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThing\r",
									" CreateThingArr = async () =>  {\r",
									"    try {\r",
									"        \r",
									"        // header\r",
									"        let headersOptCreateThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThing');\r",
									"        let dataThingIdArr = [];\r",
									"        for(let i=0;i<countData;i++){\r",
									"            // body\r",
									"            let httpRequestCreateThing = {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                    \"ThingName\": pm.environment.get(\"ThingName\"+ [i+1]),\r",
									"                    \"IMEI\": pm.environment.get(\"random_IM\"+ [i+1]),\r",
									"                    \"IMSI\": pm.environment.get(\"random_IM\"+ [i+1]),\r",
									"                    \"ICCID\": pm.environment.get(\"random_ICCID\"+ [i+1]),\r",
									"                    \"RouteUrl\": fieldDataValue.Thing.RouteUrlValue , //[\"http://10.12.3.4:2019/api/information/AddInformation\"]\r",
									"                    \"RouteInfo\": {\r",
									"                        \"MIMO_ID\": fieldDataValue.Thing.RouteInfoMIMOIDValue , //\"606edada\"\r",
									"                        \"MIMO_SerialNo\": fieldDataValue.Thing.RouteInfoMIMOSerialNoValue //5466758878\r",
									"                    },\r",
									"                    \"RouteFlag\": {\r",
									"                        \"ThingName\": fieldDataValue.Thing.RouteFlagThingNameValue , //true\r",
									"                        \"ThingToken\": fieldDataValue.Thing.RouteFlagThingTokenValue, //true\r",
									"                        \"IMEI\": fieldDataValue.Thing.RouteFlagIMEIValue, //true\r",
									"                        \"ICCID\": fieldDataValue.Thing.RouteFlagICCIDValue, //true\r",
									"                        \"RouteInfo\": fieldDataValue.Thing.RouteFlagRouteInfoValue //true\r",
									"                    }\r",
									"                })\r",
									"            };\r",
									"            // console.log(\"httpRequestCreateThing\",httpRequestCreateThing);\r",
									"            let optionsCreateThing = {\r",
									"                url: url + provisioningapis + urlThingCreateThing,\r",
									"                method: 'POST',\r",
									"                header: headersOptCreateThing,\r",
									"                body: httpRequestCreateThing\r",
									"            };\r",
									"            let response = await reqPromise(optionsCreateThing);\r",
									"            let jsonDataCreateThing = await response.json();\r",
									"            let ThingId = await jsonDataCreateThing.ThingInfo.ThingId;\r",
									"            console.log(\"ThingId\",ThingId);\r",
									"            dataThingIdArr.push(ThingId);\r",
									"            let operationStatusCreateThing = await jsonDataCreateThing.OperationStatus;\r",
									"\r",
									"            //201\r",
									"            pm.test(\"CreateThing\"+ [i+1]+ \" : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"                pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"            });\r",
									"            //20100\r",
									"            pm.test('CreateThing'+ [i+1]+ ' : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"                pm.expect(operationStatusCreateThing).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"            });\r",
									"            //CreateThing is Success\r",
									"            pm.test('CreateThing'+ [i+1]+ ' : OperationStatus Description is '+'\"'+ resultDescriptionCreateThing+'\"', function () {\r",
									"                pm.expect(operationStatusCreateThing).to.have.property('Description', resultDescriptionCreateThing);\r",
									"            });\r",
									"        }\r",
									"        \r",
									"        console.log('dataThingIdArr',dataThingIdArr);\r",
									"        // pm.environment.set(\"GetResponse_ThingID\",jsonDataCreateThing.ThingInfo.ThingId)\r",
									"        pm.environment.set(\"GetResponse_ThingIDArr\",JSON.stringify(dataThingIdArr))\r",
									"        \r",
									"        //Get Random Sensor \r",
									"        pm.environment.set(\"random_Sensor\", _.random(100, 999))\r",
									"\r",
									"        //Get Random Sensor Control\r",
									"        pm.environment.set(\"random_Sensor_Control\", pm.environment.get(\"Value_ControlThingGroup_TST_F3_1_1_002_Succees\"))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThingStateInfo\r",
									"CreateThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        \r",
									"        // header\r",
									"        let headersOptCreateThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        // console.log('CreateThingStateInfo');\r",
									"        // body\r",
									"        let dataThingIDArray = JSON.parse(pm.environment.get(\"GetResponse_ThingIDArr\"));\r",
									"        console.log('dataThingIDArray',dataThingIDArray);\r",
									"\r",
									"        // {\"Temp\" : pm.environment.get(\"random_Sensor\")}\r",
									"        let sensorValue = {};\r",
									"        sensorValue[fieldDataValue.CreateThingStateInfo.SensorKey] = pm.environment.get(\"random_Sensor\");\r",
									"        // console.log('sensorValue',sensorValue);\r",
									"        \r",
									"        let httpRequestCreateThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\":dataThingIDArray,\r",
									"                \"Type\": fieldDataValue.CreateThingStateInfo.Type_Report,\r",
									"                \"Sensor\": sensorValue\r",
									"            })\r",
									"        };\r",
									"            let optionsCreateThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingCreateThingStateInfo,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThingStateInfo,\r",
									"            body: httpRequestCreateThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThingStateInfo');\r",
									"        let response = await reqPromise(optionsCreateThingStateInfo);\r",
									"\r",
									"        let jsonDataCreateThingStateInfo = await response.json();\r",
									"        let operationStatusCreateThingStateInfo = await jsonDataCreateThingStateInfo.OperationStatus;\r",
									"        // console.log('operationStatusCreateThingStateInfo',operationStatusCreateThingStateInfo);\r",
									"\r",
									"        //200\r",
									"        pm.test(\"CreateThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //CreateThingStateInfo is Success\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionCreateThingStateInfo+'\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Description', resultDescriptionCreateThingStateInfo);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThingGroup\r",
									" CreateThingGroup = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThingGroup = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateGroup + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateGroup,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        let dataThingIDArray = JSON.parse(pm.environment.get(\"GetResponse_ThingIDArr\"));\r",
									"        // console.log('dataThingIDArray',dataThingIDArray);\r",
									"\r",
									"            // body\r",
									"            let httpRequestCreateThingGroup = {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                        \"ThingGroupName\": pm.environment.get(\"ThingGroupName\"),\r",
									"                        \"ThingId\": dataThingIDArray\r",
									"                        })\r",
									"            };\r",
									"             let optionsCreateThingGroup = {\r",
									"                url: url + provisioningapis + urlGroupCreateGroup,\r",
									"                method: 'POST',\r",
									"                header: headersOptCreateThingGroup,\r",
									"                body: httpRequestCreateThingGroup\r",
									"            };\r",
									"\r",
									"            // console.log('request CreateThingGroup');\r",
									"            let response = await reqPromise(optionsCreateThingGroup);\r",
									"\r",
									"            let jsonDataCreateThingGroup = await response.json();\r",
									"            let operationStatusCreateThingGroup = await jsonDataCreateThingGroup.OperationStatus;\r",
									"\r",
									"            //200\r",
									"            pm.test(\"CreateThingGroup : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"                pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"            });\r",
									"            //20000\r",
									"            pm.test('CreateThingGroup : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"                pm.expect(operationStatusCreateThingGroup).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"            });\r",
									"            //CreateThingGroup is Success\r",
									"            pm.test('CreateThingGroup : OperationStatus Description is '+'\"'+ resultDescriptionCreateGroup+'\"', function () {\r",
									"                pm.expect(operationStatusCreateThingGroup).to.have.property('Description', resultDescriptionCreateGroup);\r",
									"            });\r",
									"\r",
									"            // GetResponse_ThingGroupID\r",
									"            pm.environment.set(\"GetResponse_ThingGroupID\",jsonDataCreateThingGroup.GroupInfo.GroupId);\r",
									"           \r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"Signin();\r",
									"setTimeout(async function(){await CreatePartner();}, 3000); \r",
									"setTimeout(async function(){await CreateAccount();}, 6000); \r",
									"setTimeout(async function(){await CreateThingArr();}, 8000); \r",
									"setTimeout(async function(){await CreateThingStateInfo();}, 9000); \r",
									"setTimeout(async function(){await CreateThingGroup();}, 10000); \r",
									"setTimeout(async function(){}, 15000);  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-ais-OrderRef",
								"value": "{{x_ais_OrderRef_ControlThingGroup}}{{current_timestamp}}"
							},
							{
								"key": "x-ais-AccountKey",
								"value": "{{GetResponse_AccountId}}",
								"type": "text"
							},
							{
								"key": "x-ais-AccessToken",
								"value": "{{Bearer}} {{AccessToken}}"
							},
							{
								"key": "Accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"ThingGroupId\": \"{{GetResponse_ThingGroupID}}\",\r\n  \"Sensors\": {\r\n    \"{{SensorKey}}\": \"{{random_Sensor_Control}}\"\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{url}}{{mg4controlapis}}/api/v1/Control/ThingGroup",
							"host": [
								"{{url}}{{mg4controlapis}}"
							],
							"path": [
								"api",
								"v1",
								"Control",
								"ThingGroup"
							]
						},
						"description": "Type:Desire"
					},
					"response": []
				},
				{
					"name": "ControlThingGroup_TST_F3_0_2_002_Error_AccountKeyMissing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//count for loop data\r",
									"var countData = 2;\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"//---------------- detailsResponse --------------//\r",
									"//set variable to detailsResponse JSON.parse\r",
									"var detailsResponse = JSON.parse(pm.environment.get(\"detailsResponse\"));\r",
									"// console.log('detailsResponse',detailsResponse);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to xAisOrderRef \"RemoveThing_\"\r",
									"var x_ais_OrderRef_RemoveThing = pm.globals.get(\"x_ais_OrderRef_RemoveThing\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"var x_ais_OrderDesc_RemoveThing = pm.globals.get(\"x_ais_OrderDesc_RemoveThing\");\r",
									"//get global variable to x_ais_OrderRef \"RemoveThingStateInfo_\"\r",
									"var x_ais_OrderDesc_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_RemoveThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThingStateInfo\"\r",
									"var x_ais_OrderRef_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderRef_RemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Group --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveGroup_\"\r",
									"var x_ais_OrderRef_RemoveGroup = pm.globals.get(\"x_ais_OrderRef_RemoveGroup\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveGroup\"\r",
									"var x_ais_OrderDesc_RemoveGroup = pm.globals.get(\"x_ais_OrderDesc_RemoveGroup\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Control --------------//\r",
									"//get global variable to x_ais_OrderRef \"ControlThingGroup_\"\r",
									"var x_ais_OrderRef_ControlThingGroup = pm.globals.get(\"x_ais_OrderRef_ControlThingGroup\");\r",
									"//get global variable to x_ais_OrderRef \"ControlThingGroupfail_\"\r",
									"var x_ais_OrderRef_ControlThingGroup_fail = pm.globals.get(\"x_ais_OrderRef_ControlThingGroup_fail\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get url Remove --------------//\r",
									"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
									"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"var urlThingRemoveThing = pm.globals.get(\"urlThingRemoveThing\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"var urlThingRemoveThingStateInfo = pm.globals.get(\"urlThingRemoveThingStateInfo\");\r",
									"//get global variable to url \"/api/v1/Group/RemoveGroup\"\r",
									"var urlGroupRemoveGroup = pm.globals.get(\"urlGroupRemoveGroup\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"RemovePartner is Success\"\r",
									"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
									"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
									"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
									"//get global variable to resultDescription \"RemoveThing is Success\"\r",
									"var resultDescriptionRemoveThing = pm.globals.get(\"resultDescriptionRemoveThing\");\r",
									"//get global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"var resultDescriptionRemoveThingStateInfo = pm.globals.get(\"resultDescriptionRemoveThingStateInfo\");\r",
									"//get global variable to resultDescription \"RemoveGroup is Success\"\r",
									"var resultDescriptionRemoveGroup = pm.globals.get(\"resultDescriptionRemoveGroup\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 403\r",
									"var statusCodeForbidden = pm.globals.get(\"statusCodeForbidden\");\r",
									"//get global variable to resultCode \"40300\"\r",
									"var resultCodeForbiddenMissingOrInvalidParameter = pm.globals.get(\"resultCodeForbiddenMissingOrInvalidParameter\");\r",
									"//get global variable to resultDescription \"The Parameter x-ais-AccountKey is Missing Or Invalid\"\r",
									"// var resultDescriptionErrorParameterXAisAccountKeyMissingOrInvalid = pm.globals.get(\"resultDescriptionErrorParameterXAisAccountKeyMissingOrInvalid\");\r",
									"//get global variable to resultDescription \"The Client Data is Missing Or Invalid Parameter\"\r",
									"var resultDescriptionTheClientDataIsMissingOrInvalidParameter = pm.globals.get(\"resultDescriptionTheClientDataIsMissingOrInvalidParameter\");\r",
									"//------------------------------------------------------------//\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"ControlThingGroup : Status code is \" + statusCodeForbidden, function () {\r",
									"    pm.response.to.have.status(statusCodeForbidden);\r",
									"});\r",
									"\r",
									"pm.test('ControlThingGroup : OperationStatus Code is '+'\"'+ resultCodeForbiddenMissingOrInvalidParameter +'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeForbiddenMissingOrInvalidParameter);\r",
									"});\r",
									"\r",
									"pm.test('ControlThingGroup : OperationStatus DeveloperMessage is '+'\"'+ resultDescriptionTheClientDataIsMissingOrInvalidParameter+'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheClientDataIsMissingOrInvalidParameter);\r",
									"});\r",
									"\r",
									"pm.test('ControlThingGroup : OperationStatus Details is '+'\"'+ detailsResponse.target_accountId + \" : \" + detailsResponse.developerMessage_accountId +'\"', function () {\r",
									"    let countDetails= jsonData.OperationStatus.Details;\r",
									"    for(let i=0;i<countDetails.length;i++){\r",
									"        pm.expect(countDetails[i].Target).to.eql(detailsResponse.target_accountId);\r",
									"        pm.expect(countDetails[i].DeveloperMessage).to.eql(detailsResponse.developerMessage_accountId);\r",
									"    }\r",
									"});\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// RemovePartner\r",
									" RemovePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemovePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemovePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemovePartner = {\r",
									"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemovePartner,\r",
									"            body: httpRequestRemovePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request RemovePartner');\r",
									"        let response = await reqPromise(optionsRemovePartner);\r",
									"        let jsonDataRemovePartner = await response.json();\r",
									"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
									"    \r",
									"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemovePartner is Success\r",
									"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveAccount\r",
									" RemoveAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemoveAccount = {\r",
									"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveAccount,\r",
									"            body: httpRequestRemoveAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveAccount');\r",
									"        let response = await reqPromise(optionsRemoveAccount);\r",
									"        let jsonDataRemoveAccount = await response.json();\r",
									"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
									"    \r",
									"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveAccount is Success\r",
									"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThing\r",
									" RemoveThing = async () =>  {\r",
									"    try {\r",
									"\r",
									"        // header\r",
									"        let headersOptRemoveThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        let dataThingIDArray = JSON.parse(pm.environment.get(\"GetResponse_ThingIDArr\"));\r",
									"\r",
									"        for(let i=0;i<countData;i++){\r",
									"\r",
									"            // body\r",
									"            let httpRequestRemoveThing = {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                    \"ThingId\": dataThingIDArray[i]\r",
									"                })\r",
									"            };\r",
									"\r",
									"            let optionsRemoveThing = {\r",
									"                url: url + provisioningapis + urlThingRemoveThing,\r",
									"                method: 'DELETE',\r",
									"                header: headersOptRemoveThing,\r",
									"                body: httpRequestRemoveThing\r",
									"            };\r",
									"            // console.log('request RemoveThing');\r",
									"            let response = await reqPromise(optionsRemoveThing);\r",
									"            let jsonDataRemoveThing = await response.json();\r",
									"            // console.log('jsonDataRemoveThing',jsonDataRemoveThing)\r",
									"        \r",
									"            let operationStatusRemoveThing = await jsonDataRemoveThing.OperationStatus;\r",
									"\r",
									"            //200\r",
									"            pm.test(\"RemoveThing\" + [i+1]+ \" : Status code is \" + statusCodeSuccess, function () {\r",
									"                pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"            });\r",
									"            //20000\r",
									"            pm.test('RemoveThing' + [i+1]+ ' : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"                pm.expect(operationStatusRemoveThing).to.have.property('Code', resultCodeSuccess);\r",
									"            });\r",
									"            //RemoveThing is Success\r",
									"            pm.test('RemoveThing' + [i+1]+ ' : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThing+'\"', function () {\r",
									"                pm.expect(operationStatusRemoveThing).to.have.property('Description', resultDescriptionRemoveThing);\r",
									"            });\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThingStateInfo\r",
									" RemoveThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"            \r",
									"        };\r",
									"\r",
									"        let dataThingIDArray = JSON.parse(pm.environment.get(\"GetResponse_ThingIDArr\"));\r",
									"\r",
									"        for(let i=0;i<dataThingIDArray.length;i++){\r",
									"        \r",
									"            // body\r",
									"            let httpRequestRemoveThingStateInfo = {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                    \"ThingId\": dataThingIDArray[i],\r",
									"                    \"stateType\": fieldDataValue.CreateThingStateInfo.Type_Report, //Report\r",
									"                    \"stateKey\": fieldDataValue.CreateThingStateInfo.SensorKey //Temp\r",
									"                })\r",
									"            };\r",
									"\r",
									"            let optionsRemoveThingStateInfo = {\r",
									"                url: url + provisioningapis + urlThingRemoveThingStateInfo,\r",
									"                method: 'DELETE',\r",
									"                header: headersOptRemoveThingStateInfo,\r",
									"                body: httpRequestRemoveThingStateInfo\r",
									"            };\r",
									"\r",
									"            // console.log('response RemoveThingStateInfo');\r",
									"            let response = await reqPromise(optionsRemoveThingStateInfo);\r",
									"            let jsonDataRemoveThingStateInfo = await response.json();\r",
									"            // console.log('jsonDataRemoveThing',jsonDataRemoveThingStateInfo)\r",
									"        \r",
									"            let operationStatusRemoveThingStateInfo = await jsonDataRemoveThingStateInfo.OperationStatus;\r",
									"\r",
									"            //200\r",
									"            pm.test(\"RemoveThingStateInfo\" + [i+1] + \" : Status code is \" + statusCodeSuccess, function () {\r",
									"                pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"            });\r",
									"            //20000\r",
									"            pm.test('RemoveThingStateInfo' + [i+1] + ' : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"                pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"            });\r",
									"            //RemoveThingStateInfo is Success\r",
									"            pm.test('RemoveThingStateInfo' + [i+1] + ' : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThingStateInfo+'\"', function () {\r",
									"                pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Description', resultDescriptionRemoveThingStateInfo);\r",
									"            });\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveGroup\r",
									"RemoveGroup = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveGroup = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveGroup + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveGroup,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"            \r",
									"        };\r",
									"\r",
									"        // let dataThingIDArray = JSON.parse(pm.environment.get(\"GetResponse_ThingIDArr\"));\r",
									"\r",
									"        // for(let i=0;i<dataThingIDArray.length;i++){\r",
									"        \r",
									"            // body\r",
									"            let httpRequestRemoveGroup = {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                    \"GroupId\": pm.environment.get(\"GetResponse_ThingGroupID\")\r",
									"                })\r",
									"            };\r",
									"\r",
									"            let optionsRemoveGroup = {\r",
									"                url: url + provisioningapis + urlGroupRemoveGroup,\r",
									"                method: 'DELETE',\r",
									"                header: headersOptRemoveGroup,\r",
									"                body: httpRequestRemoveGroup\r",
									"            };\r",
									"\r",
									"            // console.log('response RemoveGroup');\r",
									"            let response = await reqPromise(optionsRemoveGroup);\r",
									"            let jsonDataRemoveGroup = await response.json();\r",
									"            // console.log('jsonDataRemoveThing',jsonDataRemoveGroup)\r",
									"        \r",
									"            let operationStatusRemoveGroup = await jsonDataRemoveGroup.OperationStatus;\r",
									"\r",
									"            //200\r",
									"            pm.test(\"RemoveGroup : Status code is \" + statusCodeSuccess, function () {\r",
									"                pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"            });\r",
									"            //20000\r",
									"            pm.test('RemoveGroup : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"                pm.expect(operationStatusRemoveGroup).to.have.property('Code', resultCodeSuccess);\r",
									"            });\r",
									"            //RemoveGroup is Success\r",
									"            pm.test('RemoveGroup : OperationStatus Description is '+'\"'+ resultDescriptionRemoveGroup+'\"', function () {\r",
									"                pm.expect(operationStatusRemoveGroup).to.have.property('Description', resultDescriptionRemoveGroup);\r",
									"            });\r",
									"        // }\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"//---------------- LogDefaultValue --------------//\r",
									"//set variable to LogDefaultValue JSON.parse\r",
									"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
									"// console.log('LogDefaultValue',LogDefaultValue);\r",
									"//---------------- set globals Other --------------//\r",
									"var SearchLog = LogDefaultValue.SearchLog;\r",
									"// console.log('SearchLog',SearchLog);\r",
									"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
									"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
									"var kbn_version = SearchLog.header.kbn_version;\r",
									"var authorization = SearchLog.header.Authorization;\r",
									"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
									"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
									"var namespace = LogDefaultValue.Other.namespace_control4mg;\r",
									"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
									"var header_x_ais_accountkey = LogDefaultValue.Other.header_x_ais_accountkey;\r",
									"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
									"var methodPost = LogDefaultValue.Other.methodPost;\r",
									"\r",
									"// Detail\r",
									"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
									"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
									"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
									"\r",
									"// Summary\r",
									"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
									"// ControlAPIs\r",
									"var applicationName = LogDefaultValue.Control.applicationName_mg4;\r",
									"var cmdName = LogDefaultValue.Control.cmdNameThingGroup;\r",
									"// var resultDesc = LogDefaultValue.Control.resultDescThing_success;\r",
									"var endPointNameControlAPIs = LogDefaultValue.Control.endPointNameControlAPIs;\r",
									"var endPointNameDesireEx = LogDefaultValue.Control.endPointNameDesireEx;\r",
									"var containerId = LogDefaultValue.Control.containerId;\r",
									"var requestObjectUrlStaging = LogDefaultValue.Control.requestObjectUrlStagingThingGroup;\r",
									"var xProtocolControl = LogDefaultValue.Control.xProtocolControl;\r",
									"var responseObjectPublished = LogDefaultValue.Control.responseObjectPublished;\r",
									"\r",
									"// Check CDR (Summary Log) and EDR (Detail Log)\r",
									"SearchLogFindTid = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSearchLogFindTid = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = x_ais_OrderRef_ControlThingGroup_fail +  current_timestamp; \r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestSearchLogFindTid = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"\r",
									"        let optionsSearchLogFindTid = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptSearchLogFindTid,\r",
									"            body: httpRequestSearchLogFindTid\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsSearchLogFindTid);\r",
									"        let jsonDataSearchLogFindTid = await response.json();\r",
									"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
									"        console.log('hits',hits)\r",
									"  \r",
									"        // find tid\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            // let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"        \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            if(applicationNameValue == applicationName){\r",
									"                // let tid = hits[i]._source.cauldron.tid;\r",
									"                // pm.environment.set(\"tid\", tid);\r",
									"                let sessionId = hits[i]._source.cauldron.sessionId;\r",
									"                pm.environment.set(\"sessionId\", sessionId);\r",
									"                break;\r",
									"           }\r",
									"        }\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"CheckLog = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCheckLog = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = pm.environment.get(\"sessionId\");\r",
									"\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestCheckLog = {\r",
									"            mode: 'raw',\r",
									"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"        let optionsCheckLog = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptCheckLog,\r",
									"            body: httpRequestCheckLog\r",
									"        }; \r",
									"        let response = await reqPromise(optionsCheckLog);\r",
									"        let jsonDataCheckLog = await response.json();\r",
									"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
									"        \r",
									"        // //200\r",
									"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });     \r",
									"        \r",
									"        let hits = jsonDataCheckLog.hits.hits\r",
									"        console.log('hits',hits)\r",
									"  \r",
									"        // find logType\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            //  let logType = hits[i]._source.cauldron.logType\r",
									"            let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"           \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            \r",
									"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
									"            // console.log('resultDataLog',resultDataLog)\r",
									"\r",
									"            let tidControl = x_ais_OrderRef_ControlThingGroup_fail + current_timestamp;\r",
									"            // console.log(tidControl);\r",
									"            if(applicationNameValue == applicationName){\r",
									"                 \r",
									"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ControlAPIs\r",
									"                    pm.test(\"Check Summary Log : ControlThingGroup\" , function () {\r",
									"                        console.log(\"======== Check Summary Log ( Expected = Actual) [ControlThingGroup] ==================\");\r",
									"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
									"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
									"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeForbiddenMissingOrInvalidParameter);\r",
									"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionTheClientDataIsMissingOrInvalidParameter);\r",
									"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
									"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        // console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
									"                        // console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
									"\r",
									"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
									"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
									"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeForbiddenMissingOrInvalidParameter ); \r",
									"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionTheClientDataIsMissingOrInvalidParameter); \r",
									"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
									"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"\r",
									"                        let thingGroupId = pm.environment.get(\"GetResponse_ThingGroupID\");\r",
									"                        let customUrl= urlCheckLog + requestObjectUrlStaging;\r",
									"                        let customAccountkey = null //pm.environment.get(\"GetResponse_AccountId\");\r",
									"\r",
									"                        // check identity\r",
									"                        // \"identity\":\"{\\\"ThingGroupID\\\":\\\"6012a61a96d0ed0001f5616c\\\"}\"\r",
									"                        let dataSummaryIdentity = JSON.parse(resultDataLog.identity);\r",
									"\r",
									"                        console.log(\"identity.ThingGroupID : \" + dataSummaryIdentity.ThingGroupID + \" = \" + thingGroupId);\r",
									"                        pm.expect(dataSummaryIdentity.ThingGroupID).to.eql(thingGroupId); \r",
									"\r",
									"                        // check custom\r",
									"                        // \\\"custom\\\":{ \\\"customData\\\":{ \\\"url\\\":\\\"mg-iot.sandais.com/api/v1/Control/ThingGroup\\\", \\\"accountkey\\\":null, \\\"ThingGroupID\\\":[ \\\"609a58cdf1b8790001873b13\\\" ] }, \\\"endPointSummary\\\":[ ] }\r",
									"\r",
									"                        let customData = resultDataLog.custom.customData;\r",
									"\r",
									"                        console.log(\"custom.url : \" + customData.url + \" = \" + customUrl);\r",
									"                        console.log(\"custom.accountkey : \" + customData.accountkey + \" = \" + customAccountkey);\r",
									"                        console.log(\"custom.ThingGroupID[0] : \" + customData.ThingGroupID[0] + \" = \" + thingGroupId);\r",
									"\r",
									"                        pm.expect(customData.url).to.eql(customUrl); \r",
									"                        pm.expect(customData.accountkey).to.eql(customAccountkey); \r",
									"                        pm.expect(customData.ThingGroupID[0]).to.eql(thingGroupId); \r",
									"\r",
									"                        let custom = resultDataLog.custom.endPointSummary;\r",
									"\r",
									"                        console.log(\"custom.endPointSummary : \" + JSON.stringify(custom) + \" = \" + JSON.stringify([]));\r",
									"                        pm.expect(custom).to.eql([]); \r",
									"                    }); \r",
									"                }\r",
									"\r",
									"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail'\r",
									"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
									"                    // console.log('endPointNameValue ',endPointNameValue)\r",
									"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [ControlThingGroup]\", function () {\r",
									"                        console.log(\"======== Check Detail Log ( Expected = Actual) [ControlThingGroup] ==================\");\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
									"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
									"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
									"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
									"\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
									"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
									"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
									"                        // pm.expect(resultDataLog.EndPoint).to.eql(); \r",
									"                        \r",
									"                        // check requestObject\r",
									"                        // \"requestObject\":\"{\\\"headers\\\":{\\\"x-ais-orderref\\\":\\\"ControlThingsfail_202101281301827\\\",\\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAEL8HZk2RWAR3L0/hOZPjC5nvaeNw1EUMpcFyr//lMVTkIlAkkY2KW0\\\"},\\\"body\\\":{\\\"ThingId\\\":[\\\"6012886b96d0ed0001f551ad\\\",\\\"6012886b96d0ed0001f551b5\\\"],\\\"Sensors\\\":{\\\"Temp\\\":925}}}\"\r",
									"\r",
									"                        // \\\"requestObject\\\":\\\"{ \\\\\\\"url\\\\\\\":\\\\\\\"/api/v1/Control/ThingGroup\\\\\\\", \\\\\\\"method\\\\\\\":\\\\\\\"POST\\\\\\\", \\\\\\\"headers\\\\\\\":{ \\\\\\\"Cache-Control\\\\\\\":\\\\\\\"no-cache\\\\\\\", \\\\\\\"Content-Type\\\\\\\":\\\\\\\"application/json\\\\\\\", \\\\\\\"Accept\\\\\\\":\\\\\\\"*/*\\\\\\\", \\\\\\\"Accept-Encoding\\\\\\\":\\\\\\\"gzip, deflate, br\\\\\\\", \\\\\\\"Host\\\\\\\":\\\\\\\"mg-iot.sandais.com\\\\\\\", \\\\\\\"User-Agent\\\\\\\":\\\\\\\"PostmanRuntime/7.26.8\\\\\\\", \\\\\\\"Content-Length\\\\\\\":\\\\\\\"89\\\\\\\", \\\\\\\"x-real-ip\\\\\\\":\\\\\\\"182.232.14.198\\\\\\\", \\\\\\\"x-forwarded-for\\\\\\\":\\\\\\\"182.232.14.198, 10.233.64.0\\\\\\\", \\\\\\\"x-forwarded-proto\\\\\\\":\\\\\\\"http\\\\\\\", \\\\\\\"x-ais-orderref\\\\\\\":\\\\\\\"ControlThingGroupfail_202105111405172\\\\\\\", \\\\\\\"x-ais-accesstoken\\\\\\\":\\\\\\\"Bearer ibnxnVhs5Rx3IwglWv7/gVA/1TpQnKqAOBAADlRDvYhOpXwmlpYOEb5yfY5aZpoj0YRWRZM26i9HOqtc1fc1jpNDOK5JpISttmMEy59g2py7nLWonDe2YW2OPRGWSowk6+9ZihLU1fZ5d5jAqqrZaKlOAAI3N1TXDNLsHuKcOJMcERbCcaMqRaku+MY4/kzE+eyIdkfwwbjT91S2VQq+Wk2ooMWuLk6/DHVJhwbMP7bp5o33FDKsCMyJsCpVm/JoD/nvlNgLZmNKVegMrc8SMg==\\\\\\\", \\\\\\\"postman-token\\\\\\\":\\\\\\\"35d36c7c-fb32-4aa6-b298-66d08c968c5c\\\\\\\", \\\\\\\"x-envoy-external-address\\\\\\\":\\\\\\\"10.233.64.0\\\\\\\", \\\\\\\"x-request-id\\\\\\\":\\\\\\\"581e7f9b-84de-4b46-b288-ca3e637fb924\\\\\\\", \\\\\\\"x-envoy-original-path\\\\\\\":\\\\\\\"/mg4controlapis/api/v1/Control/ThingGroup\\\\\\\", \\\\\\\"x-b3-traceid\\\\\\\":\\\\\\\"ff86a0b8b8485dce880ef14d776b7a4b\\\\\\\", \\\\\\\"x-b3-spanid\\\\\\\":\\\\\\\"1be1748903b0438a\\\\\\\", \\\\\\\"x-b3-parentspanid\\\\\\\":\\\\\\\"880ef14d776b7a4b\\\\\\\", \\\\\\\"x-b3-sampled\\\\\\\":\\\\\\\"0\\\\\\\", \\\\\\\"x-ais-SessionId\\\\\\\":\\\\\\\"1620719559288\\\\\\\", \\\\\\\"identity\\\\\\\":\\\\\\\"{ \\\\\\\\\\\\\\\"ThingGroupID\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"609a37c2fa59240001c7da83\\\\\\\\\\\\\\\" }\\\\\\\", \\\\\\\"custom\\\\\\\":\\\\\\\"{ \\\\\\\\\\\\\\\"url\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"mg-iot.sandais.com/api/v1/Control/ThingGroup\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"accountkey\\\\\\\\\\\\\\\":null, \\\\\\\\\\\\\\\"ThingGroupID\\\\\\\\\\\\\\\":[ \\\\\\\\\\\\\\\"609a37c2fa59240001c7da83\\\\\\\\\\\\\\\" ] }\\\\\\\" }, \\\\\\\"queryString\\\\\\\":{ }, \\\\\\\"routeParamteters\\\\\\\":{ }, \\\\\\\"body\\\\\\\":{ \\\\\\\"ThingGroupId\\\\\\\":\\\\\\\"609a37c2fa59240001c7da83\\\\\\\", \\\\\\\"Sensors\\\\\\\":{ \\\\\\\"Temp\\\\\\\":237 } } }\\\"\r",
									"\r",
									"                        let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
									"                        // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
									"\r",
									"                        let url = requestObjectUrlStaging; \r",
									"                        let urlCustom = urlCheckLog + requestObjectUrlStaging; \r",
									"                        let SensorKey = fieldDataValue.CreateThingStateInfo.SensorKey;\r",
									"                        let sensor = pm.environment.get(\"random_Sensor_Control\");\r",
									"                        let x_ais_orderref = x_ais_OrderRef_ControlThingGroup_fail + current_timestamp;\r",
									"                        // let x_ais_AccountKey = pm.environment.get(\"GetResponse_AccountId\");\r",
									"                        let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken\");\r",
									"                        let thingGroupId = pm.environment.get(\"GetResponse_ThingGroupID\");\r",
									"\r",
									"                        console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
									"                        console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
									"                        // console.log(\"headers.x_ais_AccountKey : \" + jsonParseRequestObject.headers[header_x_ais_accountkey] + \" = \" + x_ais_AccountKey);\r",
									"                        console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"                        console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
									"\r",
									"                        pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
									"                        pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
									"                        // pm.expect(jsonParseRequestObject.headers[header_x_ais_accountkey]).to.eql(x_ais_AccountKey);\r",
									"                        pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                        pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
									"\r",
									"                        let identity = JSON.parse(jsonParseRequestObject.headers.identity)\r",
									"                        console.log(\"headers.identity.ThingGroupID : \" + identity.ThingGroupID + \" = \" + thingGroupId);\r",
									"                        pm.expect(identity.ThingGroupID).to.eql(thingGroupId);\r",
									"                        \r",
									"                        let custom = JSON.parse(jsonParseRequestObject.headers.custom)\r",
									"                        console.log(\"headers.custom.url : \" + custom.url + \" = \" + urlCustom);\r",
									"                        console.log(\"headers.custom.accountkey : \" + custom.accountkey + \" = \" + null);\r",
									"                        console.log(\"headers.custom.ThingGroupID[0] : \" + custom.ThingGroupID + \" = \" + thingGroupId);\r",
									"                        \r",
									"                        pm.expect(custom.url).to.eql(urlCustom);\r",
									"                        pm.expect(custom.accountkey).to.eql(null);\r",
									"                        pm.expect(custom.ThingGroupID[0]).to.eql(thingGroupId);\r",
									"\r",
									"                        console.log(\"queryString : \" + JSON.stringify(jsonParseRequestObject.queryString) + \" = \" + JSON.stringify({}));\r",
									"                        pm.expect(jsonParseRequestObject.queryString).to.eql({});\r",
									"\r",
									"                        console.log(\"routeParamteters : \" + JSON.stringify(jsonParseRequestObject.routeParamteters) + \" = \" + JSON.stringify({}));\r",
									"                        pm.expect(jsonParseRequestObject.routeParamteters).to.eql({});\r",
									"\r",
									"                        console.log(\"resquest.body.ThingGroupId : \" + jsonParseRequestObject.body.ThingGroupId + \" = \" + thingGroupId);\r",
									"                        console.log(\"resquest.body.Sensors.\" + SensorKey + \"  : \" + jsonParseRequestObject.body.Sensors[SensorKey] + \" = \" + sensor);\r",
									"\r",
									"                        pm.expect(jsonParseRequestObject.body.ThingGroupId).to.eql(thingGroupId);\r",
									"                        pm.expect(jsonParseRequestObject.body.Sensors[SensorKey]).to.eql(sensor);\r",
									"\r",
									"                        // check responseObject\r",
									"                        // \\\"responseObject\\\":\\\"{ \\\\\\\"OperationStatus\\\\\\\":{ \\\\\\\"Code\\\\\\\":\\\\\\\"40300\\\\\\\", \\\\\\\"DeveloperMessage\\\\\\\":\\\\\\\"The Client Data is Missing Or Invalid Parameter\\\\\\\", \\\\\\\"Details\\\\\\\":[ { \\\\\\\"Target\\\\\\\":\\\\\\\"accountId\\\\\\\", \\\\\\\"DeveloperMessage\\\\\\\":\\\\\\\"The accountId data is missing or invalid parameter.\\\\\\\" } ] } }\\\"\r",
									"                        let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
									"                        // console.log('jsonParseResponseObject',jsonParseResponseObject);\r",
									"\r",
									"                        console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeForbiddenMissingOrInvalidParameter);\r",
									"                        console.log(\"response.OperationStatus.DeveloperMessage : \" + jsonParseResponseObject.OperationStatus.DeveloperMessage + \" = \" + resultDescriptionTheClientDataIsMissingOrInvalidParameter);\r",
									"\r",
									"                        pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeForbiddenMissingOrInvalidParameter);  \r",
									"                        pm.expect(jsonParseResponseObject.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheClientDataIsMissingOrInvalidParameter);  \r",
									"\r",
									"                        let countDetails= jsonParseResponseObject.OperationStatus.Details;\r",
									"                        for(let i=0;i<countDetails.length;i++){\r",
									"\r",
									"                            console.log(\"response.OperationStatus.Details[\"+ i +\"].Target : \" + countDetails[i].Target + \" = \" + detailsResponse.target_accountId);\r",
									"                            console.log(\"response.OperationStatus.Details[\"+ i +\"].DeveloperMessage : \" + countDetails[i].DeveloperMessage + \" = \" + detailsResponse.developerMessage_accountId);\r",
									"\r",
									"                            pm.expect(countDetails[i].Target).to.eql(detailsResponse.target_accountId);\r",
									"                            pm.expect(countDetails[i].DeveloperMessage).to.eql(detailsResponse.developerMessage_accountId);\r",
									"                        } \r",
									"                    }); \r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"setTimeout(function(){SearchLogFindTid();}, 20000); \r",
									"setTimeout(function(){CheckLog();}, 30000); \r",
									"\r",
									"setTimeout(function(){RemoveGroup();}, 40000); \r",
									"setTimeout(function(){RemoveThingStateInfo();}, 45000); \r",
									"setTimeout(function(){RemoveThing();}, 50000); \r",
									"setTimeout(function(){RemoveAccount();}, 55000); \r",
									"setTimeout(function(){RemovePartner();}, 60000); \r",
									"\r",
									"setTimeout(function(){\r",
									"pm.environment.unset(\"current_timestamp\");\r",
									"pm.environment.unset(\"AccessToken\");\r",
									"pm.environment.unset(\"random_number\");\r",
									"pm.environment.unset(\"PartnerName\");\r",
									"pm.environment.unset(\"MerchantContact\");\r",
									"pm.environment.unset(\"CPID\");\r",
									"pm.environment.unset(\"GetResponse_PartnerId\");\r",
									"pm.environment.unset(\"AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountId\");\r",
									"for(let i=0;i<countData;i++){\r",
									"pm.environment.unset(\"random_IM\"+[i+1]);\r",
									"pm.environment.unset(\"random_ICCID\"+[i+1]);\r",
									"pm.environment.unset(\"ThingName\"+[i+1]);\r",
									"}\r",
									"pm.environment.unset(\"ThingGroupName\");\r",
									"pm.environment.unset(\"GetResponse_ThingIDArr\");\r",
									"pm.environment.unset(\"random_Sensor\");\r",
									"pm.environment.unset(\"GetResponse_ThingGroupID\");\r",
									"pm.environment.unset(\"tid\");\r",
									"pm.environment.unset(\"sessionId\");\r",
									"pm.environment.unset(\"SensorKey\");\r",
									"pm.environment.unset(\"random_Sensor_Control\");\r",
									"}, 90000); "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var Username = pm.environment.get(\"Username\");\r",
									"var Password = pm.environment.get(\"Password\");\r",
									"\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//count for loop data\r",
									"var countData = 2;\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"pm.environment.set(\"SensorKey\",fieldDataValue.CreateThingStateInfo.SensorKey)\r",
									"\r",
									"//format YYYYMMDDHHMMSSS\r",
									"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
									"// console.log('currentTmestamp',currentTmestamp);\r",
									"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- statusCodeList --------------//\r",
									"//set variable to statusCodeList JSON.parse\r",
									"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
									"//set global variable to statusCode 200\r",
									"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
									"//set global variable to statusCode 201\r",
									"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
									"//set global variable to statusCode 403\r",
									"pm.globals.set(\"statusCodeForbidden\", statusCodeList.statusCodeForbidden);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultCodeList --------------//\r",
									"//set variable to resultCodeList JSON.parse\r",
									"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
									"//set global variable to resultCode \"20000\"\r",
									"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
									"//set global variable to resultCode \"20100\"\r",
									"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
									"//set global variable to resultCode \"40300\"\r",
									"pm.globals.set(\"resultCodeForbiddenMissingOrInvalidParameter\", resultCodeList.resultCodeForbiddenMissingOrInvalidParameter);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionSuccessList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
									"//set global variable to resultDescription \"SignInProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
									"//set global variable to resultDescription \"CreatePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
									"//set global variable to resultDescription \"CreateAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
									"//set global variable to resultDescription \"CreateThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThing\", resultDescriptionSuccessList.resultDescriptionCreateThing);\r",
									"//set global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThingStateInfo\", resultDescriptionSuccessList.resultDescriptionCreateThingStateInfo);\r",
									"//set global variable to resultDescription \"RemovePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
									"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
									"//set global variable to resultDescription \"RemoveThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThing\", resultDescriptionSuccessList.resultDescriptionRemoveThing);\r",
									"//set global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThingStateInfo\", resultDescriptionSuccessList.resultDescriptionRemoveThingStateInfo);\r",
									"//set global variable to resultDescription \"CreateGroup is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateGroup\", resultDescriptionSuccessList.resultDescriptionCreateGroup);\r",
									"//set global variable to resultDescription \"RemoveGroup is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveGroup\", resultDescriptionSuccessList.resultDescriptionRemoveGroup);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionErrorList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
									"//set global variable to resultDescription \"The Parameter x-ais-AccountKey is Missing Or Invalid\"\r",
									"// pm.globals.set(\"resultDescriptionErrorParameterXAisAccountKeyMissingOrInvalid\", resultDescriptionErrorList.resultDescriptionErrorParameterXAisAccountKeyMissingOrInvalid);\r",
									"//set global variable to resultDescription \"The Client Data is Missing Or Invalid Parameter\"\r",
									"pm.globals.set(\"resultDescriptionTheClientDataIsMissingOrInvalidParameter\", resultDescriptionErrorList.resultDescriptionTheClientDataIsMissingOrInvalidParameter);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- HeaderList --------------//\r",
									"//set variable to HeaderList JSON.parse\r",
									"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
									"//---------------- set globals Other --------------//\r",
									"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
									"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
									"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
									"//set global variable to kbn-versio \"7.5.1\"\r",
									"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Signin_ --------------//\r",
									"//set global variable to x_ais_OrderRef \"Signin_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreatePartner --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
									"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
									"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
									"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreateAccount --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
									"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
									"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Thing --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThing\", HeaderList.Thing.x_ais_OrderRef_CreateThing);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThing\", HeaderList.Thing.x_ais_OrderDesc_CreateThing);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThing\", HeaderList.Thing.x_ais_OrderRef_RemoveThing);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThing\", HeaderList.Thing.x_ais_OrderDesc_RemoveThing);\r",
									"//set global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_RemoveThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_RemoveThingStateInfo);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Group --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateGroup_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateGroup\", HeaderList.Group.x_ais_OrderRef_CreateGroup);\r",
									"//set global variable to x_ais_OrderDesc \"CreateGroup\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateGroup\", HeaderList.Group.x_ais_OrderDesc_CreateGroup);\r",
									"//set global variable to x_ais_OrderRef \"RemoveGroup_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveGroup\", HeaderList.Group.x_ais_OrderRef_RemoveGroup);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveGroup\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveGroup\", HeaderList.Group.x_ais_OrderDesc_RemoveGroup);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Control --------------//\r",
									"//set global variable to x_ais_OrderRef \"ControlThingGroup_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ControlThingGroup\", HeaderList.Control.x_ais_OrderRef_ControlThingGroup);\r",
									"//set global variable to x_ais_OrderRef \"ControlThingGroupfail_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ControlThingGroup_fail\", HeaderList.Control.x_ais_OrderRef_ControlThingGroup_fail);\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"SignInProcess is Success\"\r",
									"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
									"//get global variable to resultDescription \"CreatePartner is Success\"\r",
									"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
									"//get global variable to resultDescription \"CreateAccount is Success\"\r",
									"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
									"//get global variable to resultDescription \"CreateThing is Success\"\r",
									"var resultDescriptionCreateThing = pm.globals.get(\"resultDescriptionCreateThing\");\r",
									"//get global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"var resultDescriptionCreateThingStateInfo = pm.globals.get(\"resultDescriptionCreateThingStateInfo\");\r",
									"//get global variable to resultDescription \"CreateGroup is Success\"\r",
									"var resultDescriptionCreateGroup = pm.globals.get(\"resultDescriptionCreateGroup\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- urlRouteList --------------//\r",
									"//set variable to urlRouteList JSON.parse\r",
									"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
									"//---------------- set url Create --------------//\r",
									"//set global variable to url \"/api/v1/auth/signin\"\r",
									"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
									"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
									"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"pm.globals.set(\"urlThingCreateThing\", urlRouteList.Thing.urlThingCreateThing);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"pm.globals.set(\"urlThingCreateThingStateInfo\", urlRouteList.Thing.urlThingCreateThingStateInfo);\r",
									"//set global variable to url \"/api/v1/Group/CreateGroup\"\r",
									"pm.globals.set(\"urlGroupCreateGroup\", urlRouteList.Group.urlGroupCreateGroup);\r",
									"//---------------- get url Create --------------//\r",
									"//get global variable to url \"/api/v1/auth/signin\"\r",
									"var urlSignin = pm.globals.get(\"urlSignin\");\r",
									"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
									"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"var urlThingCreateThing = pm.globals.get(\"urlThingCreateThing\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"var urlThingCreateThingStateInfo = pm.globals.get(\"urlThingCreateThingStateInfo\");\r",
									"//get global variable to url \"/api/v1/Group/CreateGroup\"\r",
									"var urlGroupCreateGroup = pm.globals.get(\"urlGroupCreateGroup\");\r",
									"//---------------- set url Remove --------------//\r",
									"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
									"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"pm.globals.set(\"urlThingRemoveThing\", urlRouteList.Thing.urlThingRemoveThing);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"pm.globals.set(\"urlThingRemoveThingStateInfo\", urlRouteList.Thing.urlThingRemoveThingStateInfo);\r",
									"//set global variable to url \"/api/v1/Group/RemoveGroup\"\r",
									"pm.globals.set(\"urlGroupRemoveGroup\", urlRouteList.Group.urlGroupRemoveGroup);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Signin_ --------------//\r",
									"//get global variable to x_ais_OrderRef \"Signin_\"\r",
									"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"var x_ais_OrderRef_CreateThing = pm.globals.get(\"x_ais_OrderRef_CreateThing\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"var x_ais_OrderDesc_CreateThing = pm.globals.get(\"x_ais_OrderDesc_CreateThing\");\r",
									"//get global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"var x_ais_OrderRef_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderRef_CreateThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"var x_ais_OrderDesc_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_CreateThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Group --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateGroup_\"\r",
									"var x_ais_OrderRef_CreateGroup = pm.globals.get(\"x_ais_OrderRef_CreateGroup\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateGroup\"\r",
									"var x_ais_OrderDesc_CreateGroup = pm.globals.get(\"x_ais_OrderDesc_CreateGroup\");\r",
									"//------------------------------------------------------------//\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            // console.log('response111',response);\r",
									"            // console.log('errerrerr',err);\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// Signin get token\r",
									" Signin = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSignin = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestSignin = {\r",
									"            mode: 'raw',\r",
									"            raw: \r",
									"            JSON.stringify({\r",
									"                username:Username,\r",
									"                password:Password\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsSignin = {\r",
									"            url: url + provisioningapis + urlSignin,\r",
									"            method: 'POST',\r",
									"            header: headersOptSignin,\r",
									"            body: httpRequestSignin\r",
									"        };\r",
									"        // console.log('request Signin');\r",
									"        let response = await reqPromise(optionsSignin);\r",
									"        let jsonDataSignin = await response.json();\r",
									"\r",
									"        // setAccessToken\r",
									"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
									"\r",
									"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // SignInProcess is Success\r",
									"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
									"        });\r",
									"\r",
									"        //set random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //set PartnerName\r",
									"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
									"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
									"        //set MerchantContact\r",
									"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
									"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
									"        // set CPID\r",
									"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
									"        pm.environment.set(\"CPID\", CPIDValue)\r",
									"        \r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreatePartner\r",
									" CreatePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreatePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreatePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
									"                \"PartnerType\": [\r",
									"                    \"Supplier\",\r",
									"                    \"Customer\"\r",
									"                ],\r",
									"                \"PartnerDetail\": {\r",
									"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
									"                    \"CPID\": pm.environment.get(\"CPID\")\r",
									"                },\r",
									"                \"Property\": {\r",
									"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsCreatePartner = {\r",
									"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreatePartner,\r",
									"            body: httpRequestCreatePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsCreatePartner);\r",
									"        let jsonDataCreatePartner = await response.json();\r",
									"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
									"    \r",
									"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreatePartner is Success\r",
									"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
									"        });\r",
									"\r",
									"        //GetResponse_PartnerId\r",
									"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
									"\r",
									"        //Accountname\r",
									"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
									"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateAccount\r",
									" CreateAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreateAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
									"                })\r",
									"        };\r",
									"        \r",
									"        let optionsCreateAccount = {\r",
									"            url: url + provisioningapis + urlAccountCreateAccount,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateAccount,\r",
									"            body: httpRequestCreateAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateAccount');\r",
									"        let response = await reqPromise(optionsCreateAccount);\r",
									"        let jsonDataCreateAccount = await response.json();\r",
									"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
									"    \r",
									"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateAccount : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateAccount is Success\r",
									"        pm.test('CreateAccount : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
									"        });\r",
									"        // GetResponse_AccountName\r",
									"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
									"        // GetResponse_AccountId\r",
									"        pm.environment.set(\"GetResponse_AccountId\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
									"       \r",
									"        // // random_IM\r",
									"        // pm.environment.set(\"random_IM\", _.random(10000000, 99999999)+\" \"+_.random(1000000, 9999999))\r",
									"        // // random_ICCID\r",
									"        // pm.environment.set(\"random_ICCID\", _.random(1000000, 9999999)+\" \"+_.random(100000, 999999))\r",
									"        // // random_number\r",
									"        // pm.environment.set(\"random_number\",pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        // //ThingName\r",
									"        // let thingNameValue = fieldDataValue.Thing.ThingNameValue; // \"Sensor_TestThingName\"\r",
									"        // pm.environment.set(\"ThingName\", thingNameValue + pm.environment.get(\"random_number\"))\r",
									"\r",
									"        // random_number\r",
									"        pm.environment.set(\"random_number\",pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"\r",
									"        for(let i=0;i<countData;i++){\r",
									"            // random_IM\r",
									"            pm.environment.set(\"random_IM\"+[i+1], _.random(10000000, 99999999)+\" \"+_.random(1000000, 9999999))\r",
									"            // random_ICCID\r",
									"            pm.environment.set(\"random_ICCID\"+[i+1], _.random(1000000, 9999999)+\" \"+_.random(100000, 999999))\r",
									"\r",
									"            //ThingName\r",
									"            let thingNameValue = fieldDataValue.Thing.ThingNameValue; // \"Sensor_TestThingName\"\r",
									"            pm.environment.set(\"ThingName\"+[i+1],thingNameValue + [i+1] + pm.environment.get(\"random_number\"))\r",
									"        }\r",
									"\r",
									"        //ThinggroupName\r",
									"        let ThingGroupNameValue = fieldDataValue.Group.ThingGroupNameValue; // \"Sensor_TestThingGroupName\"\r",
									"        pm.environment.set(\"ThingGroupName\",ThingGroupNameValue + pm.environment.get(\"random_number\"))\r",
									"            \r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThing\r",
									" CreateThingArr = async () =>  {\r",
									"    try {\r",
									"        \r",
									"        // header\r",
									"        let headersOptCreateThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThing');\r",
									"        let dataThingIdArr = [];\r",
									"        for(let i=0;i<countData;i++){\r",
									"            // body\r",
									"            let httpRequestCreateThing = {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                    \"ThingName\": pm.environment.get(\"ThingName\"+ [i+1]),\r",
									"                    \"IMEI\": pm.environment.get(\"random_IM\"+ [i+1]),\r",
									"                    \"IMSI\": pm.environment.get(\"random_IM\"+ [i+1]),\r",
									"                    \"ICCID\": pm.environment.get(\"random_ICCID\"+ [i+1]),\r",
									"                    \"RouteUrl\": fieldDataValue.Thing.RouteUrlValue , //[\"http://10.12.3.4:2019/api/information/AddInformation\"]\r",
									"                    \"RouteInfo\": {\r",
									"                        \"MIMO_ID\": fieldDataValue.Thing.RouteInfoMIMOIDValue , //\"606edada\"\r",
									"                        \"MIMO_SerialNo\": fieldDataValue.Thing.RouteInfoMIMOSerialNoValue //5466758878\r",
									"                    },\r",
									"                    \"RouteFlag\": {\r",
									"                        \"ThingName\": fieldDataValue.Thing.RouteFlagThingNameValue , //true\r",
									"                        \"ThingToken\": fieldDataValue.Thing.RouteFlagThingTokenValue, //true\r",
									"                        \"IMEI\": fieldDataValue.Thing.RouteFlagIMEIValue, //true\r",
									"                        \"ICCID\": fieldDataValue.Thing.RouteFlagICCIDValue, //true\r",
									"                        \"RouteInfo\": fieldDataValue.Thing.RouteFlagRouteInfoValue //true\r",
									"                    }\r",
									"                })\r",
									"            };\r",
									"            \r",
									"            let optionsCreateThing = {\r",
									"                url: url + provisioningapis + urlThingCreateThing,\r",
									"                method: 'POST',\r",
									"                header: headersOptCreateThing,\r",
									"                body: httpRequestCreateThing\r",
									"            };\r",
									"            let response = await reqPromise(optionsCreateThing);\r",
									"            let jsonDataCreateThing = await response.json();\r",
									"            let ThingId = await jsonDataCreateThing.ThingInfo.ThingId;\r",
									"            dataThingIdArr.push(ThingId);\r",
									"            let operationStatusCreateThing = await jsonDataCreateThing.OperationStatus;\r",
									"\r",
									"            //201\r",
									"            pm.test(\"CreateThing\"+ [i+1]+ \" : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"                pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"            });\r",
									"            //20100\r",
									"            pm.test('CreateThing'+ [i+1]+ ' : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"                pm.expect(operationStatusCreateThing).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"            });\r",
									"            //CreateThing is Success\r",
									"            pm.test('CreateThing'+ [i+1]+ ' : OperationStatus Description is '+'\"'+ resultDescriptionCreateThing+'\"', function () {\r",
									"                pm.expect(operationStatusCreateThing).to.have.property('Description', resultDescriptionCreateThing);\r",
									"            });\r",
									"        }\r",
									"        \r",
									"        // console.log('dataThingIdArr',dataThingIdArr);\r",
									"        // pm.environment.set(\"GetResponse_ThingID\",jsonDataCreateThing.ThingInfo.ThingId)\r",
									"        pm.environment.set(\"GetResponse_ThingIDArr\",JSON.stringify(dataThingIdArr))\r",
									"        \r",
									"        //Get Random Sensor \r",
									"        pm.environment.set(\"random_Sensor\", _.random(100, 999))\r",
									"\r",
									"        //Get Random Sensor Control\r",
									"        pm.environment.set(\"random_Sensor_Control\", _.random(100, 999))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThingStateInfo\r",
									" CreateThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"\r",
									"        // body\r",
									"        let dataThingIDArray = JSON.parse(pm.environment.get(\"GetResponse_ThingIDArr\"));\r",
									"        // console.log('dataThingIDArray',dataThingIDArray);\r",
									"\r",
									"        // {\"Temp\" : pm.environment.get(\"random_Sensor\")}\r",
									"        let sensorValue = {};\r",
									"        sensorValue[fieldDataValue.CreateThingStateInfo.SensorKey] = pm.environment.get(\"random_Sensor\");\r",
									"        // console.log('sensorValue',sensorValue);\r",
									"        \r",
									"        let httpRequestCreateThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\":dataThingIDArray,\r",
									"                \"Type\": fieldDataValue.CreateThingStateInfo.Type_Report,\r",
									"                \"Sensor\": sensorValue\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingCreateThingStateInfo,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThingStateInfo,\r",
									"            body: httpRequestCreateThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThingStateInfo');\r",
									"        let response = await reqPromise(optionsCreateThingStateInfo);\r",
									"        let jsonDataCreateThingStateInfo = await response.json();\r",
									"        let operationStatusCreateThingStateInfo = await jsonDataCreateThingStateInfo.OperationStatus;\r",
									"        // console.log('operationStatusCreateThingStateInfo',operationStatusCreateThingStateInfo);\r",
									"\r",
									"        //200\r",
									"        pm.test(\"CreateThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //CreateThingStateInfo is Success\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionCreateThingStateInfo+'\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Description', resultDescriptionCreateThingStateInfo);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThingGroup\r",
									" CreateThingGroup = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThingGroup = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateGroup + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateGroup,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        let dataThingIDArray = JSON.parse(pm.environment.get(\"GetResponse_ThingIDArr\"));\r",
									"        // console.log('dataThingIDArray',dataThingIDArray);\r",
									"\r",
									"            // body\r",
									"            let httpRequestCreateThingGroup = {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                        \"ThingGroupName\": pm.environment.get(\"ThingGroupName\"),\r",
									"                        \"ThingId\": dataThingIDArray\r",
									"                        })\r",
									"            };\r",
									"             let optionsCreateThingGroup = {\r",
									"                url: url + provisioningapis + urlGroupCreateGroup,\r",
									"                method: 'POST',\r",
									"                header: headersOptCreateThingGroup,\r",
									"                body: httpRequestCreateThingGroup\r",
									"            };\r",
									"\r",
									"            // console.log('request CreateThingGroup');\r",
									"            let response = await reqPromise(optionsCreateThingGroup);\r",
									"            let jsonDataCreateThingGroup = await response.json();\r",
									"            let operationStatusCreateThingGroup = await jsonDataCreateThingGroup.OperationStatus;\r",
									"        \r",
									"            //200\r",
									"            pm.test(\"CreateThingGroup : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"                pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"            });\r",
									"            //20000\r",
									"            pm.test('CreateThingGroup : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"                pm.expect(operationStatusCreateThingGroup).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"            });\r",
									"            //CreateThingGroup is Success\r",
									"            pm.test('CreateThingGroup : OperationStatus Description is '+'\"'+ resultDescriptionCreateGroup+'\"', function () {\r",
									"                pm.expect(operationStatusCreateThingGroup).to.have.property('Description', resultDescriptionCreateGroup);\r",
									"            });\r",
									"\r",
									"            // GetResponse_ThingGroupID\r",
									"            pm.environment.set(\"GetResponse_ThingGroupID\",jsonDataCreateThingGroup.GroupInfo.GroupId);\r",
									"           \r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"Signin();\r",
									"setTimeout(async function(){await CreatePartner();}, 3000); \r",
									"setTimeout(async function(){await CreateAccount();}, 6000); \r",
									"setTimeout(async function(){await CreateThingArr();}, 8000); \r",
									"setTimeout(async function(){await CreateThingStateInfo();}, 9000); \r",
									"setTimeout(async function(){await CreateThingGroup();}, 10000); \r",
									"setTimeout(async function(){}, 15000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-ais-OrderRef",
								"value": "{{x_ais_OrderRef_ControlThingGroup_fail}}{{current_timestamp}}"
							},
							{
								"key": "x-ais-AccountKey",
								"type": "text",
								"value": "{{GetResponse_AccountId}}",
								"disabled": true
							},
							{
								"key": "x-ais-AccessToken",
								"value": "{{Bearer}} {{AccessToken}}"
							},
							{
								"key": "Accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"ThingGroupId\": \"{{GetResponse_ThingGroupID}}\",\r\n  \"Sensors\": {\r\n    \"{{SensorKey}}\": {{random_Sensor_Control}}\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{url}}{{mg4controlapis}}/api/v1/Control/ThingGroup",
							"host": [
								"{{url}}{{mg4controlapis}}"
							],
							"path": [
								"api",
								"v1",
								"Control",
								"ThingGroup"
							]
						},
						"description": "Type:Desire"
					},
					"response": []
				},
				{
					"name": "ControlThingGroup_TST_F3_0_2_003_Error_ThingGroupIdMissing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//count for loop data\r",
									"var countData = 2;\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"//---------------- detailsResponse --------------//\r",
									"//set variable to detailsResponse JSON.parse\r",
									"var detailsResponse = JSON.parse(pm.environment.get(\"detailsResponse\"));\r",
									"// console.log('detailsResponse',detailsResponse);\r",
									"\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to xAisOrderRef \"RemoveThing_\"\r",
									"var x_ais_OrderRef_RemoveThing = pm.globals.get(\"x_ais_OrderRef_RemoveThing\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"var x_ais_OrderDesc_RemoveThing = pm.globals.get(\"x_ais_OrderDesc_RemoveThing\");\r",
									"//get global variable to x_ais_OrderRef \"RemoveThingStateInfo_\"\r",
									"var x_ais_OrderDesc_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_RemoveThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThingStateInfo\"\r",
									"var x_ais_OrderRef_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderRef_RemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Group --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveGroup_\"\r",
									"var x_ais_OrderRef_RemoveGroup = pm.globals.get(\"x_ais_OrderRef_RemoveGroup\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveGroup\"\r",
									"var x_ais_OrderDesc_RemoveGroup = pm.globals.get(\"x_ais_OrderDesc_RemoveGroup\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Control --------------//\r",
									"//get global variable to x_ais_OrderRef \"ControlThingGroup_\"\r",
									"var x_ais_OrderRef_ControlThingGroup = pm.globals.get(\"x_ais_OrderRef_ControlThingGroup\");\r",
									"//get global variable to x_ais_OrderRef \"ControlThingGroupfail_\"\r",
									"var x_ais_OrderRef_ControlThingGroup_fail = pm.globals.get(\"x_ais_OrderRef_ControlThingGroup_fail\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set url Remove --------------//\r",
									"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
									"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"var urlThingRemoveThing = pm.globals.get(\"urlThingRemoveThing\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"var urlThingRemoveThingStateInfo = pm.globals.get(\"urlThingRemoveThingStateInfo\");\r",
									"//get global variable to url \"/api/v1/Group/RemoveGroup\"\r",
									"var urlGroupRemoveGroup = pm.globals.get(\"urlGroupRemoveGroup\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"RemovePartner is Success\"\r",
									"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
									"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
									"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
									"//get global variable to resultDescription \"RemoveThing is Success\"\r",
									"var resultDescriptionRemoveThing = pm.globals.get(\"resultDescriptionRemoveThing\");\r",
									"//get global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"var resultDescriptionRemoveThingStateInfo = pm.globals.get(\"resultDescriptionRemoveThingStateInfo\");\r",
									"//get global variable to resultDescription \"RemoveGroup is Success\"\r",
									"var resultDescriptionRemoveGroup = pm.globals.get(\"resultDescriptionRemoveGroup\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 403\r",
									"var statusCodeForbidden = pm.globals.get(\"statusCodeForbidden\");\r",
									"//get global variable to resultCode \"40300\"\r",
									"var resultCodeForbiddenMissingOrInvalidParameter = pm.globals.get(\"resultCodeForbiddenMissingOrInvalidParameter\");\r",
									"//get global variable to resultDescription \"The ThingGroupId field is not Object Id.\"\r",
									"// var resultDescriptionErrorTheThingGroupIdFieldIsNotObjectId = pm.globals.get(\"resultDescriptionErrorTheThingGroupIdFieldIsNotObjectId\");\r",
									"//get global variable to statusCode 400\r",
									"var statusCodeBadRequest = pm.globals.get(\"statusCodeBadRequest\");\r",
									"//get global variable to resultCode \"40000\"\r",
									"var resultCodeBadRequest_40000 = pm.globals.get(\"resultCodeBadRequest_40000\");\r",
									"//get global variable to resultDescription \"The client requested missing or invalid  format.\"\r",
									"var resultDescriptionTheClientRequestedMissingOrInvalidFormat = pm.globals.get(\"resultDescriptionTheClientRequestedMissingOrInvalidFormat\");\r",
									"//------------------------------------------------------------//\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"ControlThingGroup : Status code is \" + statusCodeBadRequest, function () {\r",
									"    pm.response.to.have.status(statusCodeBadRequest);\r",
									"});\r",
									"\r",
									"pm.test('ControlThingGroup : OperationStatus Code is '+'\"'+ resultCodeBadRequest_40000 +'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeBadRequest_40000);\r",
									"});\r",
									"\r",
									"pm.test('ControlThingGroup : OperationStatus DeveloperMessage is '+'\"'+ resultDescriptionTheClientRequestedMissingOrInvalidFormat+'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheClientRequestedMissingOrInvalidFormat);\r",
									"});\r",
									"\r",
									"pm.test('ControlThingGroup : OperationStatus Details is '+'\"'+ detailsResponse.target_ThingGroupId + \" : \" + detailsResponse.developerMessage_ThingGroupId_notObjectId+'\"', function () {\r",
									"    let countDetails= jsonData.OperationStatus.Details;\r",
									"    for(let i=0;i<countDetails.length;i++){\r",
									"        pm.expect(countDetails[i].Target).to.eql(detailsResponse.target_ThingGroupId);\r",
									"        pm.expect(countDetails[i].DeveloperMessage).to.eql(detailsResponse.developerMessage_ThingGroupId_notObjectId);\r",
									"    }\r",
									"});\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// RemovePartner\r",
									" RemovePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemovePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemovePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemovePartner = {\r",
									"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemovePartner,\r",
									"            body: httpRequestRemovePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request RemovePartner');\r",
									"        let response = await reqPromise(optionsRemovePartner);\r",
									"        let jsonDataRemovePartner = await response.json();\r",
									"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
									"    \r",
									"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemovePartner is Success\r",
									"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveAccount\r",
									" RemoveAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemoveAccount = {\r",
									"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveAccount,\r",
									"            body: httpRequestRemoveAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveAccount');\r",
									"        let response = await reqPromise(optionsRemoveAccount);\r",
									"        let jsonDataRemoveAccount = await response.json();\r",
									"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
									"    \r",
									"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveAccount is Success\r",
									"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThing\r",
									" RemoveThing = async () =>  {\r",
									"    try {\r",
									"\r",
									"        // header\r",
									"        let headersOptRemoveThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        let dataThingIDArray = JSON.parse(pm.environment.get(\"GetResponse_ThingIDArr\"));\r",
									"\r",
									"        for(let i=0;i<countData;i++){\r",
									"\r",
									"            // body\r",
									"            let httpRequestRemoveThing = {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                    \"ThingId\": dataThingIDArray[i]\r",
									"                })\r",
									"            };\r",
									"\r",
									"            let optionsRemoveThing = {\r",
									"                url: url + provisioningapis + urlThingRemoveThing,\r",
									"                method: 'DELETE',\r",
									"                header: headersOptRemoveThing,\r",
									"                body: httpRequestRemoveThing\r",
									"            };\r",
									"            // console.log('request RemoveThing');\r",
									"            let response = await reqPromise(optionsRemoveThing);\r",
									"            let jsonDataRemoveThing = await response.json();\r",
									"            // console.log('jsonDataRemoveThing',jsonDataRemoveThing)\r",
									"        \r",
									"            let operationStatusRemoveThing = await jsonDataRemoveThing.OperationStatus;\r",
									"\r",
									"            //200\r",
									"            pm.test(\"RemoveThing\" + [i+1]+ \" : Status code is \" + statusCodeSuccess, function () {\r",
									"                pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"            });\r",
									"            //20000\r",
									"            pm.test('RemoveThing' + [i+1]+ ' : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"                pm.expect(operationStatusRemoveThing).to.have.property('Code', resultCodeSuccess);\r",
									"            });\r",
									"            //RemoveThing is Success\r",
									"            pm.test('RemoveThing' + [i+1]+ ' : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThing+'\"', function () {\r",
									"                pm.expect(operationStatusRemoveThing).to.have.property('Description', resultDescriptionRemoveThing);\r",
									"            });\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThingStateInfo\r",
									" RemoveThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"            \r",
									"        };\r",
									"\r",
									"        let dataThingIDArray = JSON.parse(pm.environment.get(\"GetResponse_ThingIDArr\"));\r",
									"\r",
									"        for(let i=0;i<dataThingIDArray.length;i++){\r",
									"        \r",
									"            // body\r",
									"            let httpRequestRemoveThingStateInfo = {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                    \"ThingId\": dataThingIDArray[i],\r",
									"                    \"stateType\": fieldDataValue.CreateThingStateInfo.Type_Report, //Report\r",
									"                    \"stateKey\": fieldDataValue.CreateThingStateInfo.SensorKey //Temp\r",
									"                })\r",
									"            };\r",
									"\r",
									"            let optionsRemoveThingStateInfo = {\r",
									"                url: url + provisioningapis + urlThingRemoveThingStateInfo,\r",
									"                method: 'DELETE',\r",
									"                header: headersOptRemoveThingStateInfo,\r",
									"                body: httpRequestRemoveThingStateInfo\r",
									"            };\r",
									"\r",
									"            // console.log('response RemoveThingStateInfo');\r",
									"            let response = await reqPromise(optionsRemoveThingStateInfo);\r",
									"            let jsonDataRemoveThingStateInfo = await response.json();\r",
									"            // console.log('jsonDataRemoveThing',jsonDataRemoveThingStateInfo)\r",
									"        \r",
									"            let operationStatusRemoveThingStateInfo = await jsonDataRemoveThingStateInfo.OperationStatus;\r",
									"\r",
									"            //200\r",
									"            pm.test(\"RemoveThingStateInfo\" + [i+1] + \" : Status code is \" + statusCodeSuccess, function () {\r",
									"                pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"            });\r",
									"            //20000\r",
									"            pm.test('RemoveThingStateInfo' + [i+1] + ' : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"                pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"            });\r",
									"            //RemoveThingStateInfo is Success\r",
									"            pm.test('RemoveThingStateInfo' + [i+1] + ' : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThingStateInfo+'\"', function () {\r",
									"                pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Description', resultDescriptionRemoveThingStateInfo);\r",
									"            });\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveGroup\r",
									"RemoveGroup = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveGroup = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveGroup + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveGroup,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"            \r",
									"        };\r",
									"\r",
									"        // let dataThingIDArray = JSON.parse(pm.environment.get(\"GetResponse_ThingIDArr\"));\r",
									"\r",
									"        // for(let i=0;i<dataThingIDArray.length;i++){\r",
									"        \r",
									"            // body\r",
									"            let httpRequestRemoveGroup = {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                    \"GroupId\": pm.environment.get(\"GetResponse_ThingGroupID\")\r",
									"                })\r",
									"            };\r",
									"\r",
									"            let optionsRemoveGroup = {\r",
									"                url: url + provisioningapis + urlGroupRemoveGroup,\r",
									"                method: 'DELETE',\r",
									"                header: headersOptRemoveGroup,\r",
									"                body: httpRequestRemoveGroup\r",
									"            };\r",
									"\r",
									"            // console.log('response RemoveGroup');\r",
									"            let response = await reqPromise(optionsRemoveGroup);\r",
									"            let jsonDataRemoveGroup = await response.json();\r",
									"            // console.log('jsonDataRemoveThing',jsonDataRemoveGroup)\r",
									"        \r",
									"            let operationStatusRemoveGroup = await jsonDataRemoveGroup.OperationStatus;\r",
									"\r",
									"            //200\r",
									"            pm.test(\"RemoveGroup : Status code is \" + statusCodeSuccess, function () {\r",
									"                pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"            });\r",
									"            //20000\r",
									"            pm.test('RemoveGroup : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"                pm.expect(operationStatusRemoveGroup).to.have.property('Code', resultCodeSuccess);\r",
									"            });\r",
									"            //RemoveGroup is Success\r",
									"            pm.test('RemoveGroup : OperationStatus Description is '+'\"'+ resultDescriptionRemoveGroup+'\"', function () {\r",
									"                pm.expect(operationStatusRemoveGroup).to.have.property('Description', resultDescriptionRemoveGroup);\r",
									"            });\r",
									"        // }\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveControlThingGroup\r",
									"//  RemoveControlThingGroup = async () =>  {\r",
									"//     try {\r",
									"//         // header\r",
									"//         let headersOptRemoveControlThing = {\r",
									"//             'x-ais-OrderRef':x_ais_OrderRef_RemoveControlThingGroup + current_timestamp,\r",
									"//             'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"//             'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"//             'Content-Type':ContentType_ApplicationJson\r",
									"//         };\r",
									"        \r",
									"//         // body\r",
									"//         let httpRequestRemoveControlThingGroup = {\r",
									"//             mode: 'raw',\r",
									"//             raw: JSON.stringify({\r",
									"//                 \"ThingId\": pm.environment.get(\"GetResponse_ThingID\"),\r",
									"//                 \"Sensors\": {\r",
									"//                     \"Temp\": pm.environment.get(\"random_Sensor\")\r",
									"//                 }\r",
									"//             })\r",
									"//         };\r",
									"\r",
									"//         let optionsRemoveControlThingGroup = {\r",
									"//             url: url + controlapis + '/api/v1/Control/RemoveThing',\r",
									"//             method: 'DELETE',\r",
									"//             header: headersOptRemoveControlThingGroup,\r",
									"//             body: httpRequestRemoveControlThingGroup\r",
									"//         };\r",
									"\r",
									"//         console.log('response RemoveControlThingGroup');\r",
									"//         let response = await reqPromise(optionsRemoveControlThingGroup);\r",
									"//         let jsonDataRemoveControlThingGroup = await response.json();\r",
									"//         console.log('jsonDataRemoveControlThingGroup',jsonDataRemoveControlThingGroup)\r",
									"    \r",
									"//         let operationStatusRemoveControlThingGroup = await jsonDataRemoveControlThingGroup.OperationStatus;\r",
									"\r",
									"//         //200\r",
									"//         pm.test(\"RemoveControlThingGroup : Status code is \" + statusCodeSuccess, function () {\r",
									"//             pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"//         });\r",
									"//         //20000\r",
									"//         pm.test('RemoveControlThingGroup : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"//             pm.expect(operationStatusRemoveControlThing).to.have.property('Code', resultCodeSuccess);\r",
									"//         });\r",
									"//         //RemoveControlThing is Success\r",
									"//         pm.test('RemoveControlThingGroup : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThingStateInfo+'\"', function () {\r",
									"//             pm.expect(operationStatusRemoveControlThing).to.have.property('Description', resultDescriptionRemoveThingStateInfo);\r",
									"//         });\r",
									"\r",
									"//     } catch (err) {\r",
									"//         console.log('err',err);\r",
									"//     }\r",
									"// }\r",
									"\r",
									"//---------------- LogDefaultValue --------------//\r",
									"//set variable to LogDefaultValue JSON.parse\r",
									"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
									"// console.log('LogDefaultValue',LogDefaultValue);\r",
									"//---------------- set globals Other --------------//\r",
									"var SearchLog = LogDefaultValue.SearchLog;\r",
									"// console.log('SearchLog',SearchLog);\r",
									"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
									"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
									"var kbn_version = SearchLog.header.kbn_version;\r",
									"var authorization = SearchLog.header.Authorization;\r",
									"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
									"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
									"var namespace = LogDefaultValue.Other.namespace_control4mg;\r",
									"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
									"var header_x_ais_accountkey = LogDefaultValue.Other.header_x_ais_accountkey;\r",
									"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
									"var methodPost = LogDefaultValue.Other.methodPost;\r",
									"\r",
									"// Detail\r",
									"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
									"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
									"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
									"\r",
									"// Summary\r",
									"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
									"// var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
									"var identitySummary = \"\";\r",
									"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
									"// ControlAPIs\r",
									"var applicationName = LogDefaultValue.Control.applicationName_mg4;\r",
									"var cmdName = LogDefaultValue.Control.cmdNameThingGroup;\r",
									"// var resultDesc = LogDefaultValue.Control.resultDescThing_success;\r",
									"var endPointNameControlAPIs = LogDefaultValue.Control.endPointNameControlAPIs;\r",
									"var endPointNameDesireEx = LogDefaultValue.Control.endPointNameDesireEx;\r",
									"var containerId = LogDefaultValue.Control.containerId;\r",
									"var requestObjectUrlStaging = LogDefaultValue.Control.requestObjectUrlStagingThingGroup;\r",
									"var xProtocolControl = LogDefaultValue.Control.xProtocolControl;\r",
									"var responseObjectPublished = LogDefaultValue.Control.responseObjectPublished;\r",
									"\r",
									"// Check CDR (Summary Log) and EDR (Detail Log)\r",
									"SearchLogFindTid = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSearchLogFindTid = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = x_ais_OrderRef_ControlThingGroup_fail +  current_timestamp; \r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestSearchLogFindTid = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"\r",
									"        let optionsSearchLogFindTid = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptSearchLogFindTid,\r",
									"            body: httpRequestSearchLogFindTid\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsSearchLogFindTid);\r",
									"        let jsonDataSearchLogFindTid = await response.json();\r",
									"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
									"        console.log('hits',hits)\r",
									"  \r",
									"        // find tid\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            // let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"        \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            if(applicationNameValue == applicationName){\r",
									"                // let tid = hits[i]._source.cauldron.tid;\r",
									"                // pm.environment.set(\"tid\", tid);\r",
									"                let sessionId = hits[i]._source.cauldron.sessionId;\r",
									"                pm.environment.set(\"sessionId\", sessionId);\r",
									"                break;\r",
									"           }\r",
									"        }\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"CheckLog = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCheckLog = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = pm.environment.get(\"sessionId\");\r",
									"\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestCheckLog = {\r",
									"            mode: 'raw',\r",
									"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"        let optionsCheckLog = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptCheckLog,\r",
									"            body: httpRequestCheckLog\r",
									"        }; \r",
									"        let response = await reqPromise(optionsCheckLog);\r",
									"        let jsonDataCheckLog = await response.json();\r",
									"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
									"        \r",
									"        // //200\r",
									"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });     \r",
									"        \r",
									"        let hits = jsonDataCheckLog.hits.hits\r",
									"        console.log('hits',hits)\r",
									"  \r",
									"        // find logType\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            //  let logType = hits[i]._source.cauldron.logType\r",
									"            let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"           \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            \r",
									"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
									"            // console.log('resultDataLog',resultDataLog)\r",
									"\r",
									"            let tidControl = x_ais_OrderRef_ControlThingGroup_fail + current_timestamp;\r",
									"            // console.log(tidControl);\r",
									"            if(applicationNameValue == applicationName){\r",
									"                 \r",
									"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ControlAPIs\r",
									"                    pm.test(\"Check Summary Log : ControlThingGroup\" , function () {\r",
									"                        console.log(\"======== Check Summary Log ( Expected = Actual) [ControlThingGroup] ==================\");\r",
									"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
									"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
									"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeBadRequest_40000);\r",
									"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionTheClientRequestedMissingOrInvalidFormat);\r",
									"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
									"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"identity : \" + JSON.stringify(resultDataLog.identity) + \" = \" + JSON.stringify(identitySummary));\r",
									"                        console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
									"\r",
									"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
									"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
									"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeBadRequest_40000 ); \r",
									"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionTheClientRequestedMissingOrInvalidFormat); \r",
									"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
									"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
									"                        pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
									"                    }); \r",
									"                }\r",
									"\r",
									"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail'\r",
									"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
									"                    // console.log('endPointNameValue ',endPointNameValue)\r",
									"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [ControlThingGroup]\", function () {\r",
									"                        console.log(\"======== Check Detail Log ( Expected = Actual) [ControlThingGroup] ==================\");\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
									"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
									"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
									"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
									"\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
									"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
									"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
									"                        // pm.expect(resultDataLog.EndPoint).to.eql(); \r",
									"\r",
									"                        // check requestObject\r",
									"                        // \"requestObject\":\"{\\\"headers\\\":{\\\"x-ais-orderref\\\":\\\"ControlThingsfail_202101281301827\\\",\\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAEL8HZk2RWAR3L0/hOZPjC5nvaeNw1EUMpcFyr//lMVTkIlAkkY2KW0\\\"},\\\"body\\\":{\\\"ThingId\\\":[\\\"6012886b96d0ed0001f551ad\\\",\\\"6012886b96d0ed0001f551b5\\\"],\\\"Sensors\\\":{\\\"Temp\\\":925}}}\"\r",
									"\r",
									"                        // \\\"requestObject\\\":\\\"{ \\\\\\\"url\\\\\\\":\\\\\\\"/api/v1/Control/ThingGroup\\\\\\\", \\\\\\\"method\\\\\\\":\\\\\\\"POST\\\\\\\", \\\\\\\"headers\\\\\\\":{ \\\\\\\"Cache-Control\\\\\\\":\\\\\\\"no-cache\\\\\\\", \\\\\\\"Content-Type\\\\\\\":\\\\\\\"application/json\\\\\\\", \\\\\\\"Accept\\\\\\\":\\\\\\\"*/*\\\\\\\", \\\\\\\"Accept-Encoding\\\\\\\":\\\\\\\"gzip, deflate, br\\\\\\\", \\\\\\\"Host\\\\\\\":\\\\\\\"mg-iot.sandais.com\\\\\\\", \\\\\\\"User-Agent\\\\\\\":\\\\\\\"PostmanRuntime/7.26.8\\\\\\\", \\\\\\\"Content-Length\\\\\\\":\\\\\\\"92\\\\\\\", \\\\\\\"x-real-ip\\\\\\\":\\\\\\\"182.232.14.198\\\\\\\", \\\\\\\"x-forwarded-for\\\\\\\":\\\\\\\"182.232.14.198, 10.233.67.0\\\\\\\", \\\\\\\"x-forwarded-proto\\\\\\\":\\\\\\\"http\\\\\\\", \\\\\\\"x-ais-orderref\\\\\\\":\\\\\\\"ControlThingGroupfail_202105111505941\\\\\\\", \\\\\\\"x-ais-accountkey\\\\\\\":\\\\\\\"609a3efcfa59240001c7e202\\\\\\\", \\\\\\\"x-ais-accesstoken\\\\\\\":\\\\\\\"Bearer ibnxnVhs5Rx3IwglWv7/gVA/1TpQnKqAOBAADlRDvYhOpXwmlpYOEb5yfY5aZpoj0YRWRZM26i9HOqtc1fc1jpNDOK5JpISttmMEy59g2py7nLWonDe2YW2OPRGWSowk6+9ZihLU1fZ5d5jAqqrZaKlOAAI3N1TXDNLsHuKcOJMcERbCcaMqRaku+MY4/kzE+eyIdkfwwbjT91S2VQq+Wk2ooMWuLk6/DHVJhwbMP7ZHFqcvKQkpSbFwWmMDyyh8VS19xfpy5D1KVegMrc8SMg==\\\\\\\", \\\\\\\"postman-token\\\\\\\":\\\\\\\"edeaf43a-c4fa-42a8-826c-858ef1b09907\\\\\\\", \\\\\\\"x-envoy-external-address\\\\\\\":\\\\\\\"10.233.67.0\\\\\\\", \\\\\\\"x-request-id\\\\\\\":\\\\\\\"48fe238d-bbc5-4687-9232-d92982feb034\\\\\\\", \\\\\\\"x-envoy-original-path\\\\\\\":\\\\\\\"/mg4controlapis/api/v1/Control/ThingGroup\\\\\\\", \\\\\\\"x-b3-traceid\\\\\\\":\\\\\\\"5833297f9ae71515324acbb1b113e64d\\\\\\\", \\\\\\\"x-b3-spanid\\\\\\\":\\\\\\\"60a84837670d27bf\\\\\\\", \\\\\\\"x-b3-parentspanid\\\\\\\":\\\\\\\"324acbb1b113e64d\\\\\\\", \\\\\\\"x-b3-sampled\\\\\\\":\\\\\\\"0\\\\\\\", \\\\\\\"x-ais-SessionId\\\\\\\":\\\\\\\"1620721413030\\\\\\\" }, \\\\\\\"queryString\\\\\\\":{ }, \\\\\\\"routeParamteters\\\\\\\":{ }, \\\\\\\"body\\\\\\\":{ \\\\\\\"ThingGroupId\\\\\\\":\\\\\\\"609a3f00fa59240001c7e223xxx\\\\\\\", \\\\\\\"Sensors\\\\\\\":{ \\\\\\\"Temp\\\\\\\":270 } } }\\\"\r",
									"\r",
									"                        let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
									"                        // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
									"\r",
									"                        let url = requestObjectUrlStaging; \r",
									"                        let urlCustom = urlCheckLog + requestObjectUrlStaging;  \r",
									"                        let SensorKey = fieldDataValue.CreateThingStateInfo.SensorKey;\r",
									"                        let sensor = pm.environment.get(\"random_Sensor_Control\");\r",
									"                        let x_ais_orderref = x_ais_OrderRef_ControlThingGroup_fail + current_timestamp;\r",
									"                        let x_ais_AccountKey = pm.environment.get(\"GetResponse_AccountId\");\r",
									"                        let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken\");\r",
									"                        let thingGroupId = pm.environment.get(\"GetResponse_ThingGroupID\") + pm.environment.get(\"Value_ControlThingGroup_TST_F3_0_2_003_Error\");\r",
									"\r",
									"                        console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
									"                        console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
									"                        console.log(\"headers.x_ais_AccountKey : \" + jsonParseRequestObject.headers[header_x_ais_accountkey] + \" = \" + x_ais_AccountKey);\r",
									"                        console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"                        console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
									"\r",
									"                        pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
									"                        pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
									"                        pm.expect(jsonParseRequestObject.headers[header_x_ais_accountkey]).to.eql(x_ais_AccountKey);\r",
									"                        pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                        pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
									"\r",
									"                        console.log(\"queryString : \" + JSON.stringify(jsonParseRequestObject.queryString) + \" = \" + JSON.stringify({}));\r",
									"                        pm.expect(jsonParseRequestObject.queryString).to.eql({});\r",
									"\r",
									"                        console.log(\"routeParamteters : \" + JSON.stringify(jsonParseRequestObject.routeParamteters) + \" = \" + JSON.stringify({}));\r",
									"                        pm.expect(jsonParseRequestObject.routeParamteters).to.eql({});\r",
									"\r",
									"                        console.log(\"resquest.body.ThingGroupId : \" + jsonParseRequestObject.body.ThingGroupId + \" = \" + thingGroupId);\r",
									"                        console.log(\"resquest.body.Sensors.\" + SensorKey + \"  : \" + jsonParseRequestObject.body.Sensors[SensorKey] + \" = \" + sensor);\r",
									"\r",
									"                        pm.expect(jsonParseRequestObject.body.ThingGroupId).to.eql(thingGroupId);\r",
									"                        pm.expect(jsonParseRequestObject.body.Sensors[SensorKey]).to.eql(sensor);\r",
									"\r",
									"                        // check responseObject\r",
									"                        // \\\"responseObject\\\":\\\"{ \\\\\\\"OperationStatus\\\\\\\":{ \\\\\\\"Code\\\\\\\":\\\\\\\"40000\\\\\\\", \\\\\\\"DeveloperMessage\\\\\\\":\\\\\\\"The client requested missing or invalid  format.\\\\\\\", \\\\\\\"Details\\\\\\\":[ { \\\\\\\"Target\\\\\\\":\\\\\\\"ThingId\\\\\\\", \\\\\\\"DeveloperMessage\\\\\\\":\\\\\\\"'ThingId' is not Object Id.\\\\\\\" } ] } }\\\"\r",
									"                        let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
									"                        // console.log('jsonParseResponseObject',jsonParseResponseObject);\r",
									"\r",
									"                        console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeBadRequest_40000);\r",
									"                        console.log(\"response.OperationStatus.DeveloperMessage : \" + jsonParseResponseObject.OperationStatus.DeveloperMessage + \" = \" + resultDescriptionTheClientRequestedMissingOrInvalidFormat);\r",
									"\r",
									"                        pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeBadRequest_40000);  \r",
									"                        pm.expect(jsonParseResponseObject.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheClientRequestedMissingOrInvalidFormat);  \r",
									"\r",
									"                        let countDetails= jsonParseResponseObject.OperationStatus.Details;\r",
									"                        for(let i=0;i<countDetails.length;i++){\r",
									"\r",
									"                            console.log(\"response.OperationStatus.Details[\"+ i +\"].Target : \" + countDetails[i].Target + \" = \" + detailsResponse.target_ThingGroupId);\r",
									"                            console.log(\"response.OperationStatus.Details[\"+ i +\"].DeveloperMessage : \" + countDetails[i].DeveloperMessage + \" = \" + detailsResponse.developerMessage_ThingGroupId_notObjectId);\r",
									"\r",
									"                            pm.expect(countDetails[i].Target).to.eql(detailsResponse.target_ThingGroupId);\r",
									"                            pm.expect(countDetails[i].DeveloperMessage).to.eql(detailsResponse.developerMessage_ThingGroupId_notObjectId);\r",
									"                        } \r",
									"                    }); \r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"setTimeout(function(){SearchLogFindTid();}, 20000); \r",
									"setTimeout(function(){CheckLog();}, 30000); \r",
									"\r",
									"setTimeout(function(){RemoveGroup();}, 40000); \r",
									"setTimeout(function(){RemoveThingStateInfo();}, 45000); \r",
									"setTimeout(function(){RemoveThing();}, 50000); \r",
									"setTimeout(function(){RemoveAccount();}, 55000); \r",
									"setTimeout(function(){RemovePartner();}, 60000); \r",
									"\r",
									"setTimeout(function(){\r",
									"pm.environment.unset(\"current_timestamp\");\r",
									"pm.environment.unset(\"AccessToken\");\r",
									"pm.environment.unset(\"random_number\");\r",
									"pm.environment.unset(\"PartnerName\");\r",
									"pm.environment.unset(\"MerchantContact\");\r",
									"pm.environment.unset(\"CPID\");\r",
									"pm.environment.unset(\"GetResponse_PartnerId\");\r",
									"pm.environment.unset(\"AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountId\");\r",
									"for(let i=0;i<countData;i++){\r",
									"pm.environment.unset(\"random_IM\"+[i+1]);\r",
									"pm.environment.unset(\"random_ICCID\"+[i+1]);\r",
									"pm.environment.unset(\"ThingName\"+[i+1]);\r",
									"}\r",
									"pm.environment.unset(\"ThingGroupName\");\r",
									"pm.environment.unset(\"GetResponse_ThingIDArr\");\r",
									"pm.environment.unset(\"random_Sensor\");\r",
									"pm.environment.unset(\"GetResponse_ThingGroupID\");\r",
									"pm.environment.unset(\"tid\");\r",
									"pm.environment.unset(\"sessionId\");\r",
									"pm.environment.unset(\"Value_ControlThingGroup_TST_F3_0_2_003_Error\");\r",
									"pm.environment.unset(\"SensorKey\");\r",
									"pm.environment.unset(\"random_Sensor_Control\");\r",
									"}, 90000); "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var Username = pm.environment.get(\"Username\");\r",
									"var Password = pm.environment.get(\"Password\");\r",
									"\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//count for loop data\r",
									"var countData = 2;\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"pm.environment.set(\"SensorKey\",fieldDataValue.CreateThingStateInfo.SensorKey)\r",
									"pm.environment.set(\"Value_ControlThingGroup_TST_F3_0_2_003_Error\",fieldDataValue.Control.Value_ControlThingGroup_TST_F3_0_2_003_Error)\r",
									"\r",
									"//format YYYYMMDDHHMMSSS\r",
									"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
									"// console.log('currentTmestamp',currentTmestamp);\r",
									"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- statusCodeList --------------//\r",
									"//set variable to statusCodeList JSON.parse\r",
									"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
									"//set global variable to statusCode 200\r",
									"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
									"//set global variable to statusCode 201\r",
									"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
									"//set global variable to statusCode 403\r",
									"pm.globals.set(\"statusCodeForbidden\", statusCodeList.statusCodeForbidden);\r",
									"//set global variable to statusCode 400\r",
									"pm.globals.set(\"statusCodeBadRequest\", statusCodeList.statusCodeBadRequest);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultCodeList --------------//\r",
									"//set variable to resultCodeList JSON.parse\r",
									"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
									"//set global variable to resultCode \"20000\"\r",
									"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
									"//set global variable to resultCode \"20100\"\r",
									"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
									"//set global variable to resultCode \"40300\"\r",
									"pm.globals.set(\"resultCodeForbiddenMissingOrInvalidParameter\", resultCodeList.resultCodeForbiddenMissingOrInvalidParameter);\r",
									"//set global variable to resultCode \"40000\"\r",
									"pm.globals.set(\"resultCodeBadRequest_40000\", resultCodeList.resultCodeBadRequest_40000);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionSuccessList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
									"//set global variable to resultDescription \"SignInProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
									"//set global variable to resultDescription \"CreatePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
									"//set global variable to resultDescription \"CreateAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
									"//set global variable to resultDescription \"CreateThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThing\", resultDescriptionSuccessList.resultDescriptionCreateThing);\r",
									"//set global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThingStateInfo\", resultDescriptionSuccessList.resultDescriptionCreateThingStateInfo);\r",
									"//set global variable to resultDescription \"RemovePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
									"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
									"//set global variable to resultDescription \"RemoveThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThing\", resultDescriptionSuccessList.resultDescriptionRemoveThing);\r",
									"//set global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThingStateInfo\", resultDescriptionSuccessList.resultDescriptionRemoveThingStateInfo);\r",
									"//set global variable to resultDescription \"CreateGroup is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateGroup\", resultDescriptionSuccessList.resultDescriptionCreateGroup);\r",
									"//set global variable to resultDescription \"RemoveGroup is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveGroup\", resultDescriptionSuccessList.resultDescriptionRemoveGroup);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionErrorList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
									"//set global variable to resultDescription \"The ThingGroupId field is not Object Id.\"\r",
									"// pm.globals.set(\"resultDescriptionErrorTheThingGroupIdFieldIsNotObjectId\", resultDescriptionErrorList.resultDescriptionErrorTheThingGroupIdFieldIsNotObjectId);\r",
									"//set global variable to resultDescription \"The client requested missing or invalid  format.\"\r",
									"pm.globals.set(\"resultDescriptionTheClientRequestedMissingOrInvalidFormat\", resultDescriptionErrorList.resultDescriptionTheClientRequestedMissingOrInvalidFormat);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- HeaderList --------------//\r",
									"//set variable to HeaderList JSON.parse\r",
									"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
									"//---------------- set globals Other --------------//\r",
									"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
									"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
									"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
									"//set global variable to kbn-versio \"7.5.1\"\r",
									"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Signin_ --------------//\r",
									"//set global variable to x_ais_OrderRef \"Signin_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreatePartner --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
									"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
									"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
									"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreateAccount --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
									"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
									"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Thing --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThing\", HeaderList.Thing.x_ais_OrderRef_CreateThing);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThing\", HeaderList.Thing.x_ais_OrderDesc_CreateThing);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThing\", HeaderList.Thing.x_ais_OrderRef_RemoveThing);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThing\", HeaderList.Thing.x_ais_OrderDesc_RemoveThing);\r",
									"//set global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_RemoveThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_RemoveThingStateInfo);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Group --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateGroup_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateGroup\", HeaderList.Group.x_ais_OrderRef_CreateGroup);\r",
									"//set global variable to x_ais_OrderDesc \"CreateGroup\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateGroup\", HeaderList.Group.x_ais_OrderDesc_CreateGroup);\r",
									"//set global variable to x_ais_OrderRef \"RemoveGroup_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveGroup\", HeaderList.Group.x_ais_OrderRef_RemoveGroup);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveGroup\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveGroup\", HeaderList.Group.x_ais_OrderDesc_RemoveGroup);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Control --------------//\r",
									"//set global variable to x_ais_OrderRef \"ControlThingGroup_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ControlThingGroup\", HeaderList.Control.x_ais_OrderRef_ControlThingGroup);\r",
									"//set global variable to x_ais_OrderRef \"ControlThingGroupfail_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ControlThingGroup_fail\", HeaderList.Control.x_ais_OrderRef_ControlThingGroup_fail);\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"SignInProcess is Success\"\r",
									"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
									"//get global variable to resultDescription \"CreatePartner is Success\"\r",
									"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
									"//get global variable to resultDescription \"CreateAccount is Success\"\r",
									"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
									"//get global variable to resultDescription \"CreateThing is Success\"\r",
									"var resultDescriptionCreateThing = pm.globals.get(\"resultDescriptionCreateThing\");\r",
									"//get global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"var resultDescriptionCreateThingStateInfo = pm.globals.get(\"resultDescriptionCreateThingStateInfo\");\r",
									"//get global variable to resultDescription \"CreateGroup is Success\"\r",
									"var resultDescriptionCreateGroup = pm.globals.get(\"resultDescriptionCreateGroup\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- urlRouteList --------------//\r",
									"//set variable to urlRouteList JSON.parse\r",
									"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
									"//---------------- set url Create --------------//\r",
									"//set global variable to url \"/api/v1/auth/signin\"\r",
									"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
									"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
									"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"pm.globals.set(\"urlThingCreateThing\", urlRouteList.Thing.urlThingCreateThing);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"pm.globals.set(\"urlThingCreateThingStateInfo\", urlRouteList.Thing.urlThingCreateThingStateInfo);\r",
									"//set global variable to url \"/api/v1/Group/CreateGroup\"\r",
									"pm.globals.set(\"urlGroupCreateGroup\", urlRouteList.Group.urlGroupCreateGroup);\r",
									"//---------------- get url Create --------------//\r",
									"//get global variable to url \"/api/v1/auth/signin\"\r",
									"var urlSignin = pm.globals.get(\"urlSignin\");\r",
									"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
									"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"var urlThingCreateThing = pm.globals.get(\"urlThingCreateThing\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"var urlThingCreateThingStateInfo = pm.globals.get(\"urlThingCreateThingStateInfo\");\r",
									"//get global variable to url \"/api/v1/Group/CreateGroup\"\r",
									"var urlGroupCreateGroup = pm.globals.get(\"urlGroupCreateGroup\");\r",
									"//---------------- set url Remove --------------//\r",
									"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
									"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"pm.globals.set(\"urlThingRemoveThing\", urlRouteList.Thing.urlThingRemoveThing);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"pm.globals.set(\"urlThingRemoveThingStateInfo\", urlRouteList.Thing.urlThingRemoveThingStateInfo);\r",
									"//set global variable to url \"/api/v1/Group/RemoveGroup\"\r",
									"pm.globals.set(\"urlGroupRemoveGroup\", urlRouteList.Group.urlGroupRemoveGroup);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Signin_ --------------//\r",
									"//get global variable to x_ais_OrderRef \"Signin_\"\r",
									"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"var x_ais_OrderRef_CreateThing = pm.globals.get(\"x_ais_OrderRef_CreateThing\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"var x_ais_OrderDesc_CreateThing = pm.globals.get(\"x_ais_OrderDesc_CreateThing\");\r",
									"//get global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"var x_ais_OrderRef_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderRef_CreateThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"var x_ais_OrderDesc_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_CreateThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Group --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateGroup_\"\r",
									"var x_ais_OrderRef_CreateGroup = pm.globals.get(\"x_ais_OrderRef_CreateGroup\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateGroup\"\r",
									"var x_ais_OrderDesc_CreateGroup = pm.globals.get(\"x_ais_OrderDesc_CreateGroup\");\r",
									"//------------------------------------------------------------//\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            // console.log('response111',response);\r",
									"            // console.log('errerrerr',err);\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// Signin get token\r",
									" Signin = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSignin = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestSignin = {\r",
									"            mode: 'raw',\r",
									"            raw: \r",
									"            JSON.stringify({\r",
									"                username:Username,\r",
									"                password:Password\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsSignin = {\r",
									"            url: url + provisioningapis + urlSignin,\r",
									"            method: 'POST',\r",
									"            header: headersOptSignin,\r",
									"            body: httpRequestSignin\r",
									"        };\r",
									"        // console.log('request Signin');\r",
									"        let response = await reqPromise(optionsSignin);\r",
									"        let jsonDataSignin = await response.json();\r",
									"\r",
									"        // setAccessToken\r",
									"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
									"\r",
									"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // SignInProcess is Success\r",
									"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
									"        });\r",
									"\r",
									"        //set random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //set PartnerName\r",
									"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
									"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
									"        //set MerchantContact\r",
									"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
									"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
									"        // set CPID\r",
									"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
									"        pm.environment.set(\"CPID\", CPIDValue)\r",
									"        \r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreatePartner\r",
									" CreatePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreatePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreatePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
									"                \"PartnerType\": [\r",
									"                    \"Supplier\",\r",
									"                    \"Customer\"\r",
									"                ],\r",
									"                \"PartnerDetail\": {\r",
									"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
									"                    \"CPID\": pm.environment.get(\"CPID\")\r",
									"                },\r",
									"                \"Property\": {\r",
									"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsCreatePartner = {\r",
									"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreatePartner,\r",
									"            body: httpRequestCreatePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsCreatePartner);\r",
									"        let jsonDataCreatePartner = await response.json();\r",
									"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
									"    \r",
									"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreatePartner is Success\r",
									"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
									"        });\r",
									"\r",
									"        //GetResponse_PartnerId\r",
									"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
									"\r",
									"        //Accountname\r",
									"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
									"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateAccount\r",
									" CreateAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreateAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
									"                })\r",
									"        };\r",
									"        \r",
									"        let optionsCreateAccount = {\r",
									"            url: url + provisioningapis + urlAccountCreateAccount,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateAccount,\r",
									"            body: httpRequestCreateAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateAccount');\r",
									"        let response = await reqPromise(optionsCreateAccount);\r",
									"        let jsonDataCreateAccount = await response.json();\r",
									"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
									"    \r",
									"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateAccount : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateAccount is Success\r",
									"        pm.test('CreateAccount : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
									"        });\r",
									"        // GetResponse_AccountName\r",
									"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
									"        // GetResponse_AccountId\r",
									"        pm.environment.set(\"GetResponse_AccountId\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
									"       \r",
									" // // random_IM\r",
									"        // pm.environment.set(\"random_IM\", _.random(10000000, 99999999)+\" \"+_.random(1000000, 9999999))\r",
									"        // // random_ICCID\r",
									"        // pm.environment.set(\"random_ICCID\", _.random(1000000, 9999999)+\" \"+_.random(100000, 999999))\r",
									"        // // random_number\r",
									"        // pm.environment.set(\"random_number\",pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        // //ThingName\r",
									"        // let thingNameValue = fieldDataValue.Thing.ThingNameValue; // \"Sensor_TestThingName\"\r",
									"        // pm.environment.set(\"ThingName\", thingNameValue + pm.environment.get(\"random_number\"))\r",
									"\r",
									"        // random_number\r",
									"        pm.environment.set(\"random_number\",pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"\r",
									"        for(let i=0;i<countData;i++){\r",
									"            // random_IM\r",
									"            pm.environment.set(\"random_IM\"+[i+1], _.random(10000000, 99999999)+\" \"+_.random(1000000, 9999999))\r",
									"            // random_ICCID\r",
									"            pm.environment.set(\"random_ICCID\"+[i+1], _.random(1000000, 9999999)+\" \"+_.random(100000, 999999))\r",
									"\r",
									"            //ThingName\r",
									"            let thingNameValue = fieldDataValue.Thing.ThingNameValue; // \"Sensor_TestThingName\"\r",
									"            pm.environment.set(\"ThingName\"+[i+1],thingNameValue + [i+1] + pm.environment.get(\"random_number\"))\r",
									"        }\r",
									"\r",
									"        //ThinggroupName\r",
									"        let ThingGroupNameValue = fieldDataValue.Group.ThingGroupNameValue; // \"Sensor_TestThingGroupName\"\r",
									"        pm.environment.set(\"ThingGroupName\",ThingGroupNameValue + pm.environment.get(\"random_number\"))\r",
									"            \r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThing\r",
									"CreateThingArr = async () =>  {\r",
									"    try {\r",
									"        \r",
									"        // header\r",
									"        let headersOptCreateThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThing');\r",
									"        let dataThingIdArr = [];\r",
									"        for(let i=0;i<countData;i++){\r",
									"            // body\r",
									"            let httpRequestCreateThing = {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                    \"ThingName\": pm.environment.get(\"ThingName\"+ [i+1]),\r",
									"                    \"IMEI\": pm.environment.get(\"random_IM\"+ [i+1]),\r",
									"                    \"IMSI\": pm.environment.get(\"random_IM\"+ [i+1]),\r",
									"                    \"ICCID\": pm.environment.get(\"random_ICCID\"+ [i+1]),\r",
									"                    \"RouteUrl\": fieldDataValue.Thing.RouteUrlValue , //[\"http://10.12.3.4:2019/api/information/AddInformation\"]\r",
									"                    \"RouteInfo\": {\r",
									"                        \"MIMO_ID\": fieldDataValue.Thing.RouteInfoMIMOIDValue , //\"606edada\"\r",
									"                        \"MIMO_SerialNo\": fieldDataValue.Thing.RouteInfoMIMOSerialNoValue //5466758878\r",
									"                    },\r",
									"                    \"RouteFlag\": {\r",
									"                        \"ThingName\": fieldDataValue.Thing.RouteFlagThingNameValue , //true\r",
									"                        \"ThingToken\": fieldDataValue.Thing.RouteFlagThingTokenValue, //true\r",
									"                        \"IMEI\": fieldDataValue.Thing.RouteFlagIMEIValue, //true\r",
									"                        \"ICCID\": fieldDataValue.Thing.RouteFlagICCIDValue, //true\r",
									"                        \"RouteInfo\": fieldDataValue.Thing.RouteFlagRouteInfoValue //true\r",
									"                    }\r",
									"                })\r",
									"            };\r",
									"            \r",
									"            let optionsCreateThing = {\r",
									"                url: url + provisioningapis + urlThingCreateThing,\r",
									"                method: 'POST',\r",
									"                header: headersOptCreateThing,\r",
									"                body: httpRequestCreateThing\r",
									"            };\r",
									"            let response = await reqPromise(optionsCreateThing);\r",
									"            let jsonDataCreateThing = await response.json();\r",
									"            let ThingId = await jsonDataCreateThing.ThingInfo.ThingId;\r",
									"            dataThingIdArr.push(ThingId);\r",
									"            let operationStatusCreateThing = await jsonDataCreateThing.OperationStatus;\r",
									"\r",
									"            //201\r",
									"            pm.test(\"CreateThing\"+ [i+1]+ \" : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"                pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"            });\r",
									"            //20100\r",
									"            pm.test('CreateThing'+ [i+1]+ ' : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"                pm.expect(operationStatusCreateThing).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"            });\r",
									"            //CreateThing is Success\r",
									"            pm.test('CreateThing'+ [i+1]+ ' : OperationStatus Description is '+'\"'+ resultDescriptionCreateThing+'\"', function () {\r",
									"                pm.expect(operationStatusCreateThing).to.have.property('Description', resultDescriptionCreateThing);\r",
									"            });\r",
									"        }\r",
									"        \r",
									"        // console.log('dataThingIdArr',dataThingIdArr);\r",
									"        // pm.environment.set(\"GetResponse_ThingID\",jsonDataCreateThing.ThingInfo.ThingId)\r",
									"        pm.environment.set(\"GetResponse_ThingIDArr\",JSON.stringify(dataThingIdArr))\r",
									"        \r",
									"        //Get Random Sensor \r",
									"        pm.environment.set(\"random_Sensor\", _.random(100, 999))\r",
									"\r",
									"        //Get Random Sensor Control\r",
									"        pm.environment.set(\"random_Sensor_Control\", _.random(100, 999))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThingStateInfo\r",
									"CreateThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let dataThingIDArray = JSON.parse(pm.environment.get(\"GetResponse_ThingIDArr\"));\r",
									"        // console.log('dataThingIDArray',dataThingIDArray);\r",
									"\r",
									"        // {\"Temp\" : pm.environment.get(\"random_Sensor\")}\r",
									"        let sensorValue = {};\r",
									"        sensorValue[fieldDataValue.CreateThingStateInfo.SensorKey] = pm.environment.get(\"random_Sensor\");\r",
									"        // console.log('sensorValue',sensorValue);\r",
									"        \r",
									"        let httpRequestCreateThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\":dataThingIDArray,\r",
									"                \"Type\": fieldDataValue.CreateThingStateInfo.Type_Report,\r",
									"                \"Sensor\": sensorValue\r",
									"            })\r",
									"        };\r",
									"            let optionsCreateThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingCreateThingStateInfo,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThingStateInfo,\r",
									"            body: httpRequestCreateThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThingStateInfo');\r",
									"        let response = await reqPromise(optionsCreateThingStateInfo);\r",
									"\r",
									"        let jsonDataCreateThingStateInfo = await response.json();\r",
									"        let operationStatusCreateThingStateInfo = await jsonDataCreateThingStateInfo.OperationStatus;\r",
									"        // console.log('operationStatusCreateThingStateInfo',operationStatusCreateThingStateInfo);\r",
									"\r",
									"        //200\r",
									"        pm.test(\"CreateThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //CreateThingStateInfo is Success\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionCreateThingStateInfo+'\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Description', resultDescriptionCreateThingStateInfo);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThingGroup\r",
									"CreateThingGroup = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThingGroup = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateGroup + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateGroup,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        let dataThingIDArray = JSON.parse(pm.environment.get(\"GetResponse_ThingIDArr\"));\r",
									"        // console.log('dataThingIDArray',dataThingIDArray);\r",
									"\r",
									"            // body\r",
									"            let httpRequestCreateThingGroup = {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                        \"ThingGroupName\": pm.environment.get(\"ThingGroupName\"),\r",
									"                        \"ThingId\": dataThingIDArray\r",
									"                        })\r",
									"            };\r",
									"             let optionsCreateThingGroup = {\r",
									"                url: url + provisioningapis + urlGroupCreateGroup,\r",
									"                method: 'POST',\r",
									"                header: headersOptCreateThingGroup,\r",
									"                body: httpRequestCreateThingGroup\r",
									"            };\r",
									"\r",
									"            // console.log('request CreateThingGroup');\r",
									"            let response = await reqPromise(optionsCreateThingGroup);\r",
									"            let jsonDataCreateThingGroup = await response.json();\r",
									"            let operationStatusCreateThingGroup = await jsonDataCreateThingGroup.OperationStatus;\r",
									"        \r",
									"            //200\r",
									"            pm.test(\"CreateThingGroup : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"                pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"            });\r",
									"            //20000\r",
									"            pm.test('CreateThingGroup : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"                pm.expect(operationStatusCreateThingGroup).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"            });\r",
									"            //CreateThingGroup is Success\r",
									"            pm.test('CreateThingGroup : OperationStatus Description is '+'\"'+ resultDescriptionCreateGroup+'\"', function () {\r",
									"                pm.expect(operationStatusCreateThingGroup).to.have.property('Description', resultDescriptionCreateGroup);\r",
									"            });\r",
									"           \r",
									"           // GetResponse_ThingGroupID\r",
									"            pm.environment.set(\"GetResponse_ThingGroupID\",jsonDataCreateThingGroup.GroupInfo.GroupId);\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"Signin();\r",
									"setTimeout(async function(){await CreatePartner();}, 3000); \r",
									"setTimeout(async function(){await CreateAccount();}, 6000); \r",
									"setTimeout(async function(){await CreateThingArr();}, 8000); \r",
									"setTimeout(async function(){await CreateThingStateInfo();}, 9000); \r",
									"setTimeout(async function(){await CreateThingGroup();}, 10000); \r",
									"setTimeout(async function(){}, 15000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-ais-OrderRef",
								"value": "{{x_ais_OrderRef_ControlThingGroup_fail}}{{current_timestamp}}"
							},
							{
								"key": "x-ais-AccountKey",
								"type": "text",
								"value": "{{GetResponse_AccountId}}"
							},
							{
								"key": "x-ais-AccessToken",
								"value": "{{Bearer}} {{AccessToken}}"
							},
							{
								"key": "Accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"ThingGroupId\": \"{{GetResponse_ThingGroupID}}{{Value_ControlThingGroup_TST_F3_0_2_003_Error}}\",\r\n  \"Sensors\": {\r\n    \"{{SensorKey}}\": {{random_Sensor_Control}}\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{url}}{{mg4controlapis}}/api/v1/Control/ThingGroup",
							"host": [
								"{{url}}{{mg4controlapis}}"
							],
							"path": [
								"api",
								"v1",
								"Control",
								"ThingGroup"
							]
						},
						"description": "Type:Desire"
					},
					"response": []
				},
				{
					"name": "ControlThingGroup_TST_F3_0_2_004_Error_ThingGroupIdNotFound",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//count for loop data\r",
									"var countData = 2;\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"//---------------- detailsResponse --------------//\r",
									"//set variable to detailsResponse JSON.parse\r",
									"var detailsResponse = JSON.parse(pm.environment.get(\"detailsResponse\"));\r",
									"// console.log('detailsResponse',detailsResponse);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to xAisOrderRef \"RemoveThing_\"\r",
									"var x_ais_OrderRef_RemoveThing = pm.globals.get(\"x_ais_OrderRef_RemoveThing\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"var x_ais_OrderDesc_RemoveThing = pm.globals.get(\"x_ais_OrderDesc_RemoveThing\");\r",
									"//get global variable to x_ais_OrderRef \"RemoveThingStateInfo_\"\r",
									"var x_ais_OrderDesc_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_RemoveThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThingStateInfo\"\r",
									"var x_ais_OrderRef_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderRef_RemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Group --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveGroup_\"\r",
									"var x_ais_OrderRef_RemoveGroup = pm.globals.get(\"x_ais_OrderRef_RemoveGroup\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveGroup\"\r",
									"var x_ais_OrderDesc_RemoveGroup = pm.globals.get(\"x_ais_OrderDesc_RemoveGroup\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Control --------------//\r",
									"//get global variable to x_ais_OrderRef \"ControlThingGroup_\"\r",
									"var x_ais_OrderRef_ControlThingGroup = pm.globals.get(\"x_ais_OrderRef_ControlThingGroup\");\r",
									"//get global variable to x_ais_OrderRef \"ControlThingGroupfail_\"\r",
									"var x_ais_OrderRef_ControlThingGroup_fail = pm.globals.get(\"x_ais_OrderRef_ControlThingGroup_fail\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- url Remove --------------//\r",
									"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
									"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"var urlThingRemoveThing = pm.globals.get(\"urlThingRemoveThing\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"var urlThingRemoveThingStateInfo = pm.globals.get(\"urlThingRemoveThingStateInfo\");\r",
									"//get global variable to url \"/api/v1/Group/RemoveGroup\"\r",
									"var urlGroupRemoveGroup = pm.globals.get(\"urlGroupRemoveGroup\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"RemovePartner is Success\"\r",
									"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
									"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
									"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
									"//get global variable to resultDescription \"RemoveThing is Success\"\r",
									"var resultDescriptionRemoveThing = pm.globals.get(\"resultDescriptionRemoveThing\");\r",
									"//get global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"var resultDescriptionRemoveThingStateInfo = pm.globals.get(\"resultDescriptionRemoveThingStateInfo\");\r",
									"//get global variable to resultDescription \"RemoveGroup is Success\"\r",
									"var resultDescriptionRemoveGroup = pm.globals.get(\"resultDescriptionRemoveGroup\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 404\r",
									"var statusCodeNotFound = pm.globals.get(\"statusCodeNotFound\");\r",
									"//get global variable to resultCode \"40400\"\r",
									"var resultCodeNotFound = pm.globals.get(\"resultCodeNotFound\");\r",
									"//get global variable to resultDescription \"The ThingGroupId is Not Found\"\r",
									"// var resultDescriptionErrorTheThingGroupIdIsNotFound = pm.globals.get(\"resultDescriptionErrorTheThingGroupIdIsNotFound\");\r",
									"//get global variable to resultDescription \"The requested operation could not be found.\"\r",
									"var resultDescriptionTheRequestedOperationCouldNotBeFound = pm.globals.get(\"resultDescriptionTheRequestedOperationCouldNotBeFound\");\r",
									"//get global variable to resultDescription \"The ThingGroupId \"\r",
									"var resultDescriptionErrorTheThingGroupId2 = pm.globals.get(\"resultDescriptionErrorTheThingGroupId2\");\r",
									"//get global variable to resultDescription \" could not be found.\"\r",
									"var resultDescriptionErrorCouldNotBeFound = pm.globals.get(\"resultDescriptionErrorCouldNotBeFound\");\r",
									"let thingGroupId = pm.environment.get(\"Value_ControlThingGroup_TST_F3_0_2_004_Error\");\r",
									"//------------------------------------------------------------//\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"ControlThingGroup : Status code is \" + statusCodeNotFound, function () {\r",
									"    pm.response.to.have.status(statusCodeNotFound);\r",
									"});\r",
									"\r",
									"pm.test('ControlThingGroup : OperationStatus Code is '+'\"'+ resultCodeNotFound +'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeNotFound);\r",
									"});\r",
									"\r",
									"pm.test('ControlThingGroup : OperationStatus DeveloperMessage is '+'\"'+ resultDescriptionTheRequestedOperationCouldNotBeFound+'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheRequestedOperationCouldNotBeFound);\r",
									"});\r",
									"\r",
									"pm.test('ControlThingGroup : OperationStatus Details is '+'\"'+ detailsResponse.target_ThingGroupId + \" : \" + resultDescriptionErrorTheThingGroupId2 + \"'\"+ thingGroupId + \"'\"+ resultDescriptionErrorCouldNotBeFound+'\"', function () {\r",
									"    let countDetails= jsonData.OperationStatus.Details;\r",
									"    for(let i=0;i<countDetails.length;i++){\r",
									"        pm.expect(countDetails[i].Target).to.eql(detailsResponse.target_ThingGroupId);\r",
									"        pm.expect(countDetails[i].DeveloperMessage).to.eql(resultDescriptionErrorTheThingGroupId2 + \"'\"+ thingGroupId + \"'\"+ resultDescriptionErrorCouldNotBeFound);\r",
									"    }\r",
									"});\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// RemovePartner\r",
									" RemovePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemovePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemovePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemovePartner = {\r",
									"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemovePartner,\r",
									"            body: httpRequestRemovePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request RemovePartner');\r",
									"        let response = await reqPromise(optionsRemovePartner);\r",
									"        let jsonDataRemovePartner = await response.json();\r",
									"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
									"    \r",
									"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemovePartner is Success\r",
									"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveAccount\r",
									" RemoveAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemoveAccount = {\r",
									"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveAccount,\r",
									"            body: httpRequestRemoveAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveAccount');\r",
									"        let response = await reqPromise(optionsRemoveAccount);\r",
									"        let jsonDataRemoveAccount = await response.json();\r",
									"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
									"    \r",
									"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveAccount is Success\r",
									"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThing\r",
									" RemoveThing = async () =>  {\r",
									"    try {\r",
									"\r",
									"        // header\r",
									"        let headersOptRemoveThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        let dataThingIDArray = JSON.parse(pm.environment.get(\"GetResponse_ThingIDArr\"));\r",
									"\r",
									"        for(let i=0;i<countData;i++){\r",
									"\r",
									"            // body\r",
									"            let httpRequestRemoveThing = {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                    \"ThingId\": dataThingIDArray[i]\r",
									"                })\r",
									"            };\r",
									"\r",
									"            let optionsRemoveThing = {\r",
									"                url: url + provisioningapis + urlThingRemoveThing,\r",
									"                method: 'DELETE',\r",
									"                header: headersOptRemoveThing,\r",
									"                body: httpRequestRemoveThing\r",
									"            };\r",
									"            // console.log('request RemoveThing');\r",
									"            let response = await reqPromise(optionsRemoveThing);\r",
									"            let jsonDataRemoveThing = await response.json();\r",
									"            // console.log('jsonDataRemoveThing',jsonDataRemoveThing)\r",
									"        \r",
									"            let operationStatusRemoveThing = await jsonDataRemoveThing.OperationStatus;\r",
									"\r",
									"            //200\r",
									"            pm.test(\"RemoveThing\" + [i+1]+ \" : Status code is \" + statusCodeSuccess, function () {\r",
									"                pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"            });\r",
									"            //20000\r",
									"            pm.test('RemoveThing' + [i+1]+ ' : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"                pm.expect(operationStatusRemoveThing).to.have.property('Code', resultCodeSuccess);\r",
									"            });\r",
									"            //RemoveThing is Success\r",
									"            pm.test('RemoveThing' + [i+1]+ ' : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThing+'\"', function () {\r",
									"                pm.expect(operationStatusRemoveThing).to.have.property('Description', resultDescriptionRemoveThing);\r",
									"            });\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThingStateInfo\r",
									" RemoveThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"            \r",
									"        };\r",
									"\r",
									"        let dataThingIDArray = JSON.parse(pm.environment.get(\"GetResponse_ThingIDArr\"));\r",
									"\r",
									"        for(let i=0;i<dataThingIDArray.length;i++){\r",
									"        \r",
									"            // body\r",
									"            let httpRequestRemoveThingStateInfo = {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                    \"ThingId\": dataThingIDArray[i],\r",
									"                    \"stateType\": fieldDataValue.CreateThingStateInfo.Type_Report, //Report\r",
									"                    \"stateKey\": fieldDataValue.CreateThingStateInfo.SensorKey //Temp\r",
									"                })\r",
									"            };\r",
									"\r",
									"            let optionsRemoveThingStateInfo = {\r",
									"                url: url + provisioningapis + urlThingRemoveThingStateInfo,\r",
									"                method: 'DELETE',\r",
									"                header: headersOptRemoveThingStateInfo,\r",
									"                body: httpRequestRemoveThingStateInfo\r",
									"            };\r",
									"\r",
									"            // console.log('response RemoveThingStateInfo');\r",
									"            let response = await reqPromise(optionsRemoveThingStateInfo);\r",
									"            let jsonDataRemoveThingStateInfo = await response.json();\r",
									"            // console.log('jsonDataRemoveThing',jsonDataRemoveThingStateInfo)\r",
									"        \r",
									"            let operationStatusRemoveThingStateInfo = await jsonDataRemoveThingStateInfo.OperationStatus;\r",
									"\r",
									"            //200\r",
									"            pm.test(\"RemoveThingStateInfo\" + [i+1] + \" : Status code is \" + statusCodeSuccess, function () {\r",
									"                pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"            });\r",
									"            //20000\r",
									"            pm.test('RemoveThingStateInfo' + [i+1] + ' : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"                pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"            });\r",
									"            //RemoveThingStateInfo is Success\r",
									"            pm.test('RemoveThingStateInfo' + [i+1] + ' : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThingStateInfo+'\"', function () {\r",
									"                pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Description', resultDescriptionRemoveThingStateInfo);\r",
									"            });\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveGroup\r",
									"// RemoveGroup\r",
									"RemoveGroup = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveGroup = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveGroup + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveGroup,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"            \r",
									"        };\r",
									"\r",
									"        // let dataThingIDArray = JSON.parse(pm.environment.get(\"GetResponse_ThingIDArr\"));\r",
									"\r",
									"        // for(let i=0;i<dataThingIDArray.length;i++){\r",
									"        \r",
									"            // body\r",
									"            let httpRequestRemoveGroup = {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                    \"GroupId\": pm.environment.get(\"GetResponse_ThingGroupID\")\r",
									"                })\r",
									"            };\r",
									"\r",
									"            let optionsRemoveGroup = {\r",
									"                url: url + provisioningapis + urlGroupRemoveGroup,\r",
									"                method: 'DELETE',\r",
									"                header: headersOptRemoveGroup,\r",
									"                body: httpRequestRemoveGroup\r",
									"            };\r",
									"\r",
									"            // console.log('response RemoveGroup');\r",
									"            let response = await reqPromise(optionsRemoveGroup);\r",
									"            let jsonDataRemoveGroup = await response.json();\r",
									"            // console.log('jsonDataRemoveThing',jsonDataRemoveGroup)\r",
									"        \r",
									"            let operationStatusRemoveGroup = await jsonDataRemoveGroup.OperationStatus;\r",
									"\r",
									"            //200\r",
									"            pm.test(\"RemoveGroup : Status code is \" + statusCodeSuccess, function () {\r",
									"                pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"            });\r",
									"            //20000\r",
									"            pm.test('RemoveGroup : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"                pm.expect(operationStatusRemoveGroup).to.have.property('Code', resultCodeSuccess);\r",
									"            });\r",
									"            //RemoveGroup is Success\r",
									"            pm.test('RemoveGroup : OperationStatus Description is '+'\"'+ resultDescriptionRemoveGroup+'\"', function () {\r",
									"                pm.expect(operationStatusRemoveGroup).to.have.property('Description', resultDescriptionRemoveGroup);\r",
									"            });\r",
									"        // }\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"//---------------- LogDefaultValue --------------//\r",
									"//set variable to LogDefaultValue JSON.parse\r",
									"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
									"// console.log('LogDefaultValue',LogDefaultValue);\r",
									"//---------------- set globals Other --------------//\r",
									"var SearchLog = LogDefaultValue.SearchLog;\r",
									"// console.log('SearchLog',SearchLog);\r",
									"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
									"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
									"var kbn_version = SearchLog.header.kbn_version;\r",
									"var authorization = SearchLog.header.Authorization;\r",
									"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
									"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
									"var namespace = LogDefaultValue.Other.namespace_control4mg;\r",
									"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
									"var header_x_ais_accountkey = LogDefaultValue.Other.header_x_ais_accountkey;\r",
									"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
									"var methodPost = LogDefaultValue.Other.methodPost;\r",
									"\r",
									"// Detail\r",
									"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
									"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
									"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
									"\r",
									"// Summary\r",
									"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
									"// ControlAPIs\r",
									"var applicationName = LogDefaultValue.Control.applicationName_mg4;\r",
									"var cmdName = LogDefaultValue.Control.cmdNameThingGroup;\r",
									"// var resultDesc = LogDefaultValue.Control.resultDescThing_success;\r",
									"var endPointNameControlAPIs = LogDefaultValue.Control.endPointNameControlAPIs;\r",
									"var endPointNameDesireEx = LogDefaultValue.Control.endPointNameDesireEx;\r",
									"var containerId = LogDefaultValue.Control.containerId;\r",
									"var requestObjectUrlStaging = LogDefaultValue.Control.requestObjectUrlStagingThingGroup;\r",
									"var xProtocolControl = LogDefaultValue.Control.xProtocolControl;\r",
									"var responseObjectPublished = LogDefaultValue.Control.responseObjectPublished;\r",
									"\r",
									"// Check CDR (Summary Log) and EDR (Detail Log)\r",
									"SearchLogFindTid = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSearchLogFindTid = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = x_ais_OrderRef_ControlThingGroup_fail +  current_timestamp; \r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestSearchLogFindTid = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"\r",
									"        let optionsSearchLogFindTid = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptSearchLogFindTid,\r",
									"            body: httpRequestSearchLogFindTid\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsSearchLogFindTid);\r",
									"        let jsonDataSearchLogFindTid = await response.json();\r",
									"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
									"        console.log('hits',hits)\r",
									"  \r",
									"        // find tid\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            // let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"        \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            if(applicationNameValue == applicationName){\r",
									"                // let tid = hits[i]._source.cauldron.tid;\r",
									"                // pm.environment.set(\"tid\", tid);\r",
									"                let sessionId = hits[i]._source.cauldron.sessionId;\r",
									"                pm.environment.set(\"sessionId\", sessionId);\r",
									"                break;\r",
									"           }\r",
									"        }\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"CheckLog = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCheckLog = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = pm.environment.get(\"sessionId\");\r",
									"\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestCheckLog = {\r",
									"            mode: 'raw',\r",
									"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"        let optionsCheckLog = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptCheckLog,\r",
									"            body: httpRequestCheckLog\r",
									"        }; \r",
									"        let response = await reqPromise(optionsCheckLog);\r",
									"        let jsonDataCheckLog = await response.json();\r",
									"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
									"        \r",
									"        // //200\r",
									"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });     \r",
									"        \r",
									"        let hits = jsonDataCheckLog.hits.hits\r",
									"        console.log('hits',hits)\r",
									"  \r",
									"        // find logType\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            //  let logType = hits[i]._source.cauldron.logType\r",
									"            let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"           \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            \r",
									"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
									"            // console.log('resultDataLog',resultDataLog)\r",
									"\r",
									"            let tidControl = x_ais_OrderRef_ControlThingGroup_fail + current_timestamp;\r",
									"            // console.log(tidControl);\r",
									"            if(applicationNameValue == applicationName){\r",
									"                 \r",
									"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ControlAPIs\r",
									"                    pm.test(\"Check Summary Log : ControlThingGroup\" , function () {\r",
									"                        console.log(\"======== Check Summary Log ( Expected = Actual) [ControlThingGroup] ==================\");\r",
									"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
									"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
									"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeNotFound);\r",
									"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionTheRequestedOperationCouldNotBeFound);\r",
									"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
									"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        // console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
									"                        // console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
									"\r",
									"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
									"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
									"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeNotFound); \r",
									"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionTheRequestedOperationCouldNotBeFound); \r",
									"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
									"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"\r",
									"                        let thingGroupId = pm.environment.get(\"Value_ControlThingGroup_TST_F3_0_2_004_Error\");\r",
									"                        let customUrl= urlCheckLog + requestObjectUrlStaging;\r",
									"                        let customAccountkey = pm.environment.get(\"GetResponse_AccountId\");\r",
									"\r",
									"                        // check identity\r",
									"                        // \"identity\":\"{\\\"ThingGroupID\\\":\\\"6012a61a96d0ed0001f5616c\\\"}\"\r",
									"                        let dataSummaryIdentity = JSON.parse(resultDataLog.identity);\r",
									"\r",
									"                        console.log(\"identity.ThingGroupID : \" + dataSummaryIdentity.ThingGroupID + \" = \" + thingGroupId);\r",
									"                        pm.expect(dataSummaryIdentity.ThingGroupID).to.eql(thingGroupId); \r",
									"\r",
									"                        // check custom\r",
									"                        // \\\"custom\\\":{ \\\"customData\\\":{ \\\"url\\\":\\\"mg-iot.sandais.com/api/v1/Control/ThingGroup\\\", \\\"accountkey\\\":\\\"609a6289f1b87900018746c9\\\", \\\"ThingGroupID\\\":[ \\\"5fa8efc8e1c3c90001303c68\\\" ] }, \\\"endPointSummary\\\":[ { \\\"no\\\":\\\"1\\\", \\\"endPointName\\\":\\\"db.AuthenticationCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:Inquiry was Success\\\", \\\"processTime\\\":0.0003 }, { \\\"no\\\":\\\"2\\\", \\\"endPointName\\\":\\\"db.ClientsCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:Inquiry was Success\\\", \\\"processTime\\\":0.0006 }, { \\\"no\\\":\\\"3\\\", \\\"endPointName\\\":\\\"db.AccountsCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:Inquiry was Success\\\", \\\"processTime\\\":0.0002 }, { \\\"no\\\":\\\"4\\\", \\\"endPointName\\\":\\\"db.GroupsCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:Inquiry was Success\\\", \\\"processTime\\\":0.001 } ] }\r",
									"\r",
									"                        let customData = resultDataLog.custom.customData\r",
									"\r",
									"                        console.log(\"custom.url : \" + customData.url + \" = \" + customUrl);\r",
									"                        console.log(\"custom.accountkey : \" + customData.accountkey + \" = \" + customAccountkey);\r",
									"                        console.log(\"custom.ThingGroupID[0] : \" + customData.ThingGroupID[0] + \" = \" + thingGroupId);\r",
									"\r",
									"                        pm.expect(customData.url).to.eql(customUrl); \r",
									"                        pm.expect(customData.accountkey).to.eql(customAccountkey); \r",
									"                        pm.expect(customData.ThingGroupID[0]).to.eql(thingGroupId); \r",
									"\r",
									"                        let custom = resultDataLog.custom.endPointSummary;\r",
									"                        let countCustom = custom.length;\r",
									"                       \r",
									"                        // [\"db.AuthenticationCollection\",\"db.ClientsCollection\",\"db.AccountsCollection\",\"db.GroupsCollection\"]\r",
									"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_ControlThingGroup_004;\r",
									"                        // [\"20000:Inquiry was Success\",\"20000:Inquiry was Success\",\"20000:Inquiry was Success\",\"20000:Inquiry was Success\"]\r",
									"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_ControlThingGroup_004;\r",
									"                        let countCustomStep = dataEndPointName.length;\r",
									"\r",
									"                        console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep);\r",
									"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
									"                        \r",
									"                        for(let i=0;i<countCustomStep;i++){\r",
									"                            let no = custom[i].no;\r",
									"                            let valueEndPointName = custom[i].endPointName;\r",
									"                            let valueResponseStatus = custom[i].responseStatus;\r",
									"                            // console.log(\"i\",i);\r",
									"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
									"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
									"\r",
									"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString());\r",
									"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i]);\r",
									"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i]);\r",
									"\r",
									"                            pm.expect(no).to.eql((i+1).toString()); \r",
									"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
									"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]); \r",
									"                        }\r",
									"                    }); \r",
									"                }\r",
									"\r",
									"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail'\r",
									"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
									"                    // console.log('endPointNameValue ',endPointNameValue)\r",
									"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [ControlThingGroup]\", function () {\r",
									"                        console.log(\"======== Check Detail Log ( Expected = Actual) [ControlThingGroup] ==================\");\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
									"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
									"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
									"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
									"\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
									"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
									"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
									"                        // pm.expect(resultDataLog.EndPoint).to.eql(); \r",
									"                        \r",
									"                        // check requestObject\r",
									"                        // \"requestObject\":\"{\\\"headers\\\":{\\\"x-ais-orderref\\\":\\\"ControlThingsfail_202101281301827\\\",\\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAEL8HZk2RWAR3L0/hOZPjC5nvaeNw1EUMpcFyr//lMVTkIlAkkY2KW0\\\"},\\\"body\\\":{\\\"ThingId\\\":[\\\"6012886b96d0ed0001f551ad\\\",\\\"6012886b96d0ed0001f551b5\\\"],\\\"Sensors\\\":{\\\"Temp\\\":925}}}\"\r",
									"\r",
									"                        // \\\"requestObject\\\":\\\"{ \\\\\\\"url\\\\\\\":\\\\\\\"/api/v1/Control/ThingGroup\\\\\\\", \\\\\\\"method\\\\\\\":\\\\\\\"POST\\\\\\\", \\\\\\\"headers\\\\\\\":{ \\\\\\\"Cache-Control\\\\\\\":\\\\\\\"no-cache\\\\\\\", \\\\\\\"Content-Type\\\\\\\":\\\\\\\"application/json\\\\\\\", \\\\\\\"Accept\\\\\\\":\\\\\\\"*/*\\\\\\\", \\\\\\\"Accept-Encoding\\\\\\\":\\\\\\\"gzip, deflate, br\\\\\\\", \\\\\\\"Host\\\\\\\":\\\\\\\"mg-iot.sandais.com\\\\\\\", \\\\\\\"User-Agent\\\\\\\":\\\\\\\"PostmanRuntime/7.26.8\\\\\\\", \\\\\\\"Content-Length\\\\\\\":\\\\\\\"95\\\\\\\", \\\\\\\"x-real-ip\\\\\\\":\\\\\\\"182.232.183.255\\\\\\\", \\\\\\\"x-forwarded-for\\\\\\\":\\\\\\\"182.232.183.255, 10.233.64.0\\\\\\\", \\\\\\\"x-forwarded-proto\\\\\\\":\\\\\\\"http\\\\\\\", \\\\\\\"x-ais-orderref\\\\\\\":\\\\\\\"ControlThingGroupfail_202105111705190\\\\\\\", \\\\\\\"x-ais-accountkey\\\\\\\":\\\\\\\"609a6289f1b87900018746c9\\\\\\\", \\\\\\\"x-ais-accesstoken\\\\\\\":\\\\\\\"Bearer ibnxnVhs5Rx3IwglWv7/gVA/1TpQnKqAOBAADlRDvYhOpXwmlpYOEb5yfY5aZpoj0YRWRZM26i9HOqtc1fc1jpNDOK5JpISttmMEy59g2py7nLWonDe2YW2OPRGWSowk6+9ZihLU1fZ5d5jAqqrZaKlOAAI3N1TXDNLsHuKcOJMcERbCcaMqRaku+MY4/kzE+eyIdkfwwbjT91S2VQq+Wk2ooMWuLk6/DHVJhwbMP7bl3jb0xcp+QB9n71qXvDq+Q8nrQQsJIXxKVegMrc8SMg==\\\\\\\", \\\\\\\"postman-token\\\\\\\":\\\\\\\"ef237bcc-fe07-43a9-9cb4-5aed26aee722\\\\\\\", \\\\\\\"x-envoy-external-address\\\\\\\":\\\\\\\"10.233.64.0\\\\\\\", \\\\\\\"x-request-id\\\\\\\":\\\\\\\"d33fd0d3-208a-4284-9e8c-73559872fd16\\\\\\\", \\\\\\\"x-envoy-original-path\\\\\\\":\\\\\\\"/mg4controlapis/api/v1/Control/ThingGroup\\\\\\\", \\\\\\\"x-b3-traceid\\\\\\\":\\\\\\\"c30a3d4e956dfc8857bc4101305889d1\\\\\\\", \\\\\\\"x-b3-spanid\\\\\\\":\\\\\\\"35b24872f86d32ac\\\\\\\", \\\\\\\"x-b3-parentspanid\\\\\\\":\\\\\\\"57bc4101305889d1\\\\\\\", \\\\\\\"x-b3-sampled\\\\\\\":\\\\\\\"0\\\\\\\", \\\\\\\"x-ais-SessionId\\\\\\\":\\\\\\\"1620730514203\\\\\\\", \\\\\\\"identity\\\\\\\":\\\\\\\"{ \\\\\\\\\\\\\\\"ThingGroupID\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"5fa8efc8e1c3c90001303c68\\\\\\\\\\\\\\\" }\\\\\\\", \\\\\\\"custom\\\\\\\":\\\\\\\"{ \\\\\\\\\\\\\\\"url\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"mg-iot.sandais.com/api/v1/Control/ThingGroup\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"accountkey\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"609a6289f1b87900018746c9\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"ThingGroupID\\\\\\\\\\\\\\\":[ \\\\\\\\\\\\\\\"5fa8efc8e1c3c90001303c68\\\\\\\\\\\\\\\" ] }\\\\\\\" }, \\\\\\\"queryString\\\\\\\":{ }, \\\\\\\"routeParamteters\\\\\\\":{ }, \\\\\\\"body\\\\\\\":{ \\\\\\\"ThingGroupId\\\\\\\":\\\\\\\"5fa8efc8e1c3c90001303c68\\\\\\\", \\\\\\\"Sensors\\\\\\\":{ \\\\\\\"Temp\\\\\\\":303 } } }\\\",\r",
									"\r",
									"                        let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
									"                        // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
									"\r",
									"                        let url = requestObjectUrlStaging; \r",
									"                        let urlCustom = urlCheckLog + requestObjectUrlStaging;\r",
									"                        let SensorKey = fieldDataValue.CreateThingStateInfo.SensorKey;\r",
									"                        let sensor = pm.environment.get(\"random_Sensor_Control\");\r",
									"                        let x_ais_orderref = x_ais_OrderRef_ControlThingGroup_fail + current_timestamp;\r",
									"                        let x_ais_AccountKey = pm.environment.get(\"GetResponse_AccountId\");\r",
									"                        let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken\");\r",
									"                        let thingGroupId = pm.environment.get(\"Value_ControlThingGroup_TST_F3_0_2_004_Error\");\r",
									"\r",
									"                        console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
									"                        console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
									"                        console.log(\"headers.x_ais_AccountKey : \" + jsonParseRequestObject.headers[header_x_ais_accountkey] + \" = \" + x_ais_AccountKey);\r",
									"                        console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"                        console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
									"\r",
									"                        pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
									"                        pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
									"                        pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                        pm.expect(jsonParseRequestObject.headers[header_x_ais_accountkey]).to.eql(x_ais_AccountKey);\r",
									"                        pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
									"\r",
									"                        let identity = JSON.parse(jsonParseRequestObject.headers.identity)\r",
									"                        console.log(\"headers.identity.ThingGroupID : \" + identity.ThingGroupID + \" = \" + thingGroupId);\r",
									"                        pm.expect(identity.ThingGroupID).to.eql(thingGroupId);\r",
									"                        \r",
									"                        let custom = JSON.parse(jsonParseRequestObject.headers.custom)\r",
									"                        console.log(\"headers.custom.url : \" + custom.url + \" = \" + urlCustom);\r",
									"                        console.log(\"headers.custom.accountkey : \" + custom.accountkey + \" = \" + x_ais_AccountKey);\r",
									"                        console.log(\"headers.custom.ThingGroupID[0] : \" + custom.ThingGroupID + \" = \" + thingGroupId );\r",
									"                        \r",
									"                        pm.expect(custom.url).to.eql(urlCustom);\r",
									"                        pm.expect(custom.accountkey).to.eql(x_ais_AccountKey);\r",
									"                        pm.expect(custom.ThingGroupID[0]).to.eql(thingGroupId);\r",
									"\r",
									"                        console.log(\"queryString : \" + JSON.stringify(jsonParseRequestObject.queryString) + \" = \" + JSON.stringify({}));\r",
									"                        pm.expect(jsonParseRequestObject.queryString).to.eql({});\r",
									"\r",
									"                        console.log(\"routeParamteters : \" + JSON.stringify(jsonParseRequestObject.routeParamteters) + \" = \" + JSON.stringify({}));\r",
									"                        pm.expect(jsonParseRequestObject.routeParamteters).to.eql({});\r",
									"\r",
									"                        console.log(\"resquest.body.ThingGroupId : \" + jsonParseRequestObject.body.ThingGroupId + \" = \" + thingGroupId);\r",
									"                        console.log(\"resquest.body.Sensors.\" + SensorKey + \"  : \" + jsonParseRequestObject.body.Sensors[SensorKey] + \" = \" + sensor);\r",
									"\r",
									"                        pm.expect(jsonParseRequestObject.body.ThingGroupId).to.eql(thingGroupId);\r",
									"                        pm.expect(jsonParseRequestObject.body.Sensors[SensorKey]).to.eql(sensor);\r",
									"\r",
									"                        // check responseObject\r",
									"                            // \\\"responseObject\\\":\\\"{ \\\\\\\"OperationStatus\\\\\\\":{ \\\\\\\"Code\\\\\\\":\\\\\\\"40400\\\\\\\", \\\\\\\"DeveloperMessage\\\\\\\":\\\\\\\"The requested operation could not be found.\\\\\\\", \\\\\\\"Details\\\\\\\":[ { \\\\\\\"Target\\\\\\\":\\\\\\\"ThingId\\\\\\\", \\\\\\\"DeveloperMessage\\\\\\\":\\\\\\\"The ThingId '5f61cf2d51c1f10001fb779b' could not be found.\\\\\\\" } ] } }\\\"\r",
									"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
									"                            // console.log('jsonParseResponseObject',jsonParseResponseObject);\r",
									"\r",
									"                            console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeNotFound);\r",
									"                            console.log(\"response.OperationStatus.DeveloperMessage : \" + jsonParseResponseObject.OperationStatus.DeveloperMessage + \" = \" + resultDescriptionTheRequestedOperationCouldNotBeFound);\r",
									"\r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeNotFound);  \r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheRequestedOperationCouldNotBeFound);  \r",
									"\r",
									"                            let countDetails= jsonData.OperationStatus.Details;\r",
									"                            for(let i=0;i<countDetails.length;i++){\r",
									"\r",
									"                                console.log(\"response.OperationStatus.Details[\"+ i +\"].Target : \" + countDetails[i].Target + \" = \" + detailsResponse.target_ThingGroupId);\r",
									"                                console.log(\"response.OperationStatus.Details[\"+ i +\"].DeveloperMessage : \" + countDetails[i].DeveloperMessage + \" = \" + resultDescriptionErrorTheThingGroupId2 + \"'\"+ thingGroupId+ \"'\"+ resultDescriptionErrorCouldNotBeFound);\r",
									"\r",
									"                                pm.expect(countDetails[i].Target).to.eql(detailsResponse.target_ThingGroupId);\r",
									"                                pm.expect(countDetails[i].DeveloperMessage).to.eql(resultDescriptionErrorTheThingGroupId2 + \"'\"+ thingGroupId+ \"'\"+ resultDescriptionErrorCouldNotBeFound);\r",
									"                            } \r",
									"                    }); \r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"setTimeout(function(){SearchLogFindTid();}, 20000); \r",
									"setTimeout(function(){CheckLog();}, 30000); \r",
									"\r",
									"setTimeout(function(){RemoveGroup();}, 40000); \r",
									"setTimeout(function(){RemoveThingStateInfo();}, 45000); \r",
									"setTimeout(function(){RemoveThing();}, 50000); \r",
									"setTimeout(function(){RemoveAccount();}, 55000); \r",
									"setTimeout(function(){RemovePartner();}, 60000); \r",
									"\r",
									"setTimeout(function(){\r",
									"pm.environment.unset(\"current_timestamp\");\r",
									"pm.environment.unset(\"AccessToken\");\r",
									"pm.environment.unset(\"random_number\");\r",
									"pm.environment.unset(\"PartnerName\");\r",
									"pm.environment.unset(\"MerchantContact\");\r",
									"pm.environment.unset(\"CPID\");\r",
									"pm.environment.unset(\"GetResponse_PartnerId\");\r",
									"pm.environment.unset(\"AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountId\");\r",
									"for(let i=0;i<countData;i++){\r",
									"pm.environment.unset(\"random_IM\"+[i+1]);\r",
									"pm.environment.unset(\"random_ICCID\"+[i+1]);\r",
									"pm.environment.unset(\"ThingName\"+[i+1]);\r",
									"}\r",
									"pm.environment.unset(\"ThingGroupName\");\r",
									"pm.environment.unset(\"GetResponse_ThingIDArr\");\r",
									"pm.environment.unset(\"random_Sensor\");\r",
									"pm.environment.unset(\"GetResponse_ThingGroupID\");\r",
									"pm.environment.unset(\"tid\");\r",
									"pm.environment.unset(\"sessionId\");\r",
									"pm.environment.unset(\"Value_ControlThingGroup_TST_F3_0_2_004_Error\");\r",
									"pm.environment.unset(\"SensorKey\");\r",
									"pm.environment.unset(\"random_Sensor_Control\");\r",
									"}, 90000); "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var Username = pm.environment.get(\"Username\");\r",
									"var Password = pm.environment.get(\"Password\");\r",
									"\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//count for loop data\r",
									"var countData = 2;\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"pm.environment.set(\"SensorKey\",fieldDataValue.CreateThingStateInfo.SensorKey)\r",
									"pm.environment.set(\"Value_ControlThingGroup_TST_F3_0_2_004_Error\",fieldDataValue.Control.Value_ControlThingGroup_TST_F3_0_2_004_Error)\r",
									"\r",
									"//format YYYYMMDDHHMMSSS\r",
									"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
									"// console.log('currentTmestamp',currentTmestamp);\r",
									"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- statusCodeList --------------//\r",
									"//set variable to statusCodeList JSON.parse\r",
									"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
									"//set global variable to statusCode 200\r",
									"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
									"//set global variable to statusCode 201\r",
									"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
									"//set global variable to statusCode 404\r",
									"pm.globals.set(\"statusCodeNotFound\", statusCodeList.statusCodeNotFound);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultCodeList --------------//\r",
									"//set variable to resultCodeList JSON.parse\r",
									"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
									"//set global variable to resultCode \"20000\"\r",
									"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
									"//set global variable to resultCode \"20100\"\r",
									"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
									"//set global variable to resultCode \"40400\"\r",
									"pm.globals.set(\"resultCodeNotFound\", resultCodeList.resultCodeNotFound);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionSuccessList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
									"//set global variable to resultDescription \"SignInProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
									"//set global variable to resultDescription \"CreatePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
									"//set global variable to resultDescription \"CreateAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
									"//set global variable to resultDescription \"CreateThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThing\", resultDescriptionSuccessList.resultDescriptionCreateThing);\r",
									"//set global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThingStateInfo\", resultDescriptionSuccessList.resultDescriptionCreateThingStateInfo);\r",
									"//set global variable to resultDescription \"RemovePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
									"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
									"//set global variable to resultDescription \"RemoveThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThing\", resultDescriptionSuccessList.resultDescriptionRemoveThing);\r",
									"//set global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThingStateInfo\", resultDescriptionSuccessList.resultDescriptionRemoveThingStateInfo);\r",
									"//set global variable to resultDescription \"CreateGroup is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateGroup\", resultDescriptionSuccessList.resultDescriptionCreateGroup);\r",
									"//set global variable to resultDescription \"RemoveGroup is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveGroup\", resultDescriptionSuccessList.resultDescriptionRemoveGroup);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionErrorList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
									"//set global variable to resultDescription \"The ThingGroupId is Not Found\"\r",
									"// pm.globals.set(\"resultDescriptionErrorTheThingGroupIdIsNotFound\", resultDescriptionErrorList.resultDescriptionErrorTheThingGroupIdIsNotFound);\r",
									"//set global variable to resultDescription \"The requested operation could not be found.\"\r",
									"pm.globals.set(\"resultDescriptionTheRequestedOperationCouldNotBeFound\", resultDescriptionErrorList.resultDescriptionTheRequestedOperationCouldNotBeFound);\r",
									"//set global variable to resultDescription \"The ThingGroupId \"\r",
									"pm.globals.set(\"resultDescriptionErrorTheThingGroupId2\", resultDescriptionErrorList.resultDescriptionErrorTheThingGroupId2);\r",
									"//set global variable to resultDescription \" could not be found.\"\r",
									"pm.globals.set(\"resultDescriptionErrorCouldNotBeFound\", resultDescriptionErrorList.resultDescriptionErrorCouldNotBeFound);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- HeaderList --------------//\r",
									"//set variable to HeaderList JSON.parse\r",
									"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
									"//---------------- set globals Other --------------//\r",
									"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
									"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
									"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
									"//set global variable to kbn-versio \"7.5.1\"\r",
									"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Signin_ --------------//\r",
									"//set global variable to x_ais_OrderRef \"Signin_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreatePartner --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
									"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
									"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
									"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreateAccount --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
									"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
									"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Thing --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThing\", HeaderList.Thing.x_ais_OrderRef_CreateThing);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThing\", HeaderList.Thing.x_ais_OrderDesc_CreateThing);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThing\", HeaderList.Thing.x_ais_OrderRef_RemoveThing);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThing\", HeaderList.Thing.x_ais_OrderDesc_RemoveThing);\r",
									"//set global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_RemoveThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_RemoveThingStateInfo);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Group --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateGroup_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateGroup\", HeaderList.Group.x_ais_OrderRef_CreateGroup);\r",
									"//set global variable to x_ais_OrderDesc \"CreateGroup\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateGroup\", HeaderList.Group.x_ais_OrderDesc_CreateGroup);\r",
									"//set global variable to x_ais_OrderRef \"RemoveGroup_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveGroup\", HeaderList.Group.x_ais_OrderRef_RemoveGroup);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveGroup\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveGroup\", HeaderList.Group.x_ais_OrderDesc_RemoveGroup);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Control --------------//\r",
									"//set global variable to x_ais_OrderRef \"ControlThingGroup_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ControlThingGroup\", HeaderList.Control.x_ais_OrderRef_ControlThingGroup);\r",
									"//set global variable to x_ais_OrderRef \"ControlThingGroupfail_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ControlThingGroup_fail\", HeaderList.Control.x_ais_OrderRef_ControlThingGroup_fail);\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"SignInProcess is Success\"\r",
									"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
									"//get global variable to resultDescription \"CreatePartner is Success\"\r",
									"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
									"//get global variable to resultDescription \"CreateAccount is Success\"\r",
									"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
									"//get global variable to resultDescription \"CreateThing is Success\"\r",
									"var resultDescriptionCreateThing = pm.globals.get(\"resultDescriptionCreateThing\");\r",
									"//get global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"var resultDescriptionCreateThingStateInfo = pm.globals.get(\"resultDescriptionCreateThingStateInfo\");\r",
									"//get global variable to resultDescription \"CreateGroup is Success\"\r",
									"var resultDescriptionCreateGroup = pm.globals.get(\"resultDescriptionCreateGroup\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- urlRouteList --------------//\r",
									"//set variable to urlRouteList JSON.parse\r",
									"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
									"//---------------- set url Create --------------//\r",
									"//set global variable to url \"/api/v1/auth/signin\"\r",
									"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
									"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
									"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"pm.globals.set(\"urlThingCreateThing\", urlRouteList.Thing.urlThingCreateThing);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"pm.globals.set(\"urlThingCreateThingStateInfo\", urlRouteList.Thing.urlThingCreateThingStateInfo);\r",
									"//set global variable to url \"/api/v1/Group/CreateGroup\"\r",
									"pm.globals.set(\"urlGroupCreateGroup\", urlRouteList.Group.urlGroupCreateGroup);\r",
									"//---------------- get url Create --------------//\r",
									"//get global variable to url \"/api/v1/auth/signin\"\r",
									"var urlSignin = pm.globals.get(\"urlSignin\");\r",
									"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
									"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"var urlThingCreateThing = pm.globals.get(\"urlThingCreateThing\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"var urlThingCreateThingStateInfo = pm.globals.get(\"urlThingCreateThingStateInfo\");\r",
									"//get global variable to url \"/api/v1/Group/CreateGroup\"\r",
									"var urlGroupCreateGroup = pm.globals.get(\"urlGroupCreateGroup\");\r",
									"//---------------- set url Remove --------------//\r",
									"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
									"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"pm.globals.set(\"urlThingRemoveThing\", urlRouteList.Thing.urlThingRemoveThing);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"pm.globals.set(\"urlThingRemoveThingStateInfo\", urlRouteList.Thing.urlThingRemoveThingStateInfo);\r",
									"//set global variable to url \"/api/v1/Group/RemoveGroup\"\r",
									"pm.globals.set(\"urlGroupRemoveGroup\", urlRouteList.Group.urlGroupRemoveGroup);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Signin_ --------------//\r",
									"//get global variable to x_ais_OrderRef \"Signin_\"\r",
									"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"var x_ais_OrderRef_CreateThing = pm.globals.get(\"x_ais_OrderRef_CreateThing\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"var x_ais_OrderDesc_CreateThing = pm.globals.get(\"x_ais_OrderDesc_CreateThing\");\r",
									"//get global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"var x_ais_OrderRef_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderRef_CreateThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"var x_ais_OrderDesc_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_CreateThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Group --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateGroup_\"\r",
									"var x_ais_OrderRef_CreateGroup = pm.globals.get(\"x_ais_OrderRef_CreateGroup\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateGroup\"\r",
									"var x_ais_OrderDesc_CreateGroup = pm.globals.get(\"x_ais_OrderDesc_CreateGroup\");\r",
									"//------------------------------------------------------------//\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            // console.log('response111',response);\r",
									"            // console.log('errerrerr',err);\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// Signin get token\r",
									" Signin = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSignin = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestSignin = {\r",
									"            mode: 'raw',\r",
									"            raw: \r",
									"            JSON.stringify({\r",
									"                username:Username,\r",
									"                password:Password\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsSignin = {\r",
									"            url: url + provisioningapis + urlSignin,\r",
									"            method: 'POST',\r",
									"            header: headersOptSignin,\r",
									"            body: httpRequestSignin\r",
									"        };\r",
									"        // console.log('request Signin');\r",
									"        let response = await reqPromise(optionsSignin);\r",
									"        let jsonDataSignin = await response.json();\r",
									"\r",
									"        // setAccessToken\r",
									"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
									"\r",
									"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // SignInProcess is Success\r",
									"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
									"        });\r",
									"\r",
									"        //set random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //set PartnerName\r",
									"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
									"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
									"        //set MerchantContact\r",
									"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
									"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
									"        // set CPID\r",
									"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
									"        pm.environment.set(\"CPID\", CPIDValue)\r",
									"        \r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreatePartner\r",
									" CreatePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreatePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreatePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
									"                \"PartnerType\": [\r",
									"                    \"Supplier\",\r",
									"                    \"Customer\"\r",
									"                ],\r",
									"                \"PartnerDetail\": {\r",
									"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
									"                    \"CPID\": pm.environment.get(\"CPID\")\r",
									"                },\r",
									"                \"Property\": {\r",
									"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsCreatePartner = {\r",
									"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreatePartner,\r",
									"            body: httpRequestCreatePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsCreatePartner);\r",
									"        let jsonDataCreatePartner = await response.json();\r",
									"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
									"    \r",
									"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreatePartner is Success\r",
									"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
									"        });\r",
									"\r",
									"        //GetResponse_PartnerId\r",
									"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
									"\r",
									"        //Accountname\r",
									"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
									"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateAccount\r",
									" CreateAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreateAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
									"                })\r",
									"        };\r",
									"        \r",
									"        let optionsCreateAccount = {\r",
									"            url: url + provisioningapis + urlAccountCreateAccount,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateAccount,\r",
									"            body: httpRequestCreateAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateAccount');\r",
									"        let response = await reqPromise(optionsCreateAccount);\r",
									"        let jsonDataCreateAccount = await response.json();\r",
									"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
									"    \r",
									"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateAccount : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateAccount is Success\r",
									"        pm.test('CreateAccount : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
									"        });\r",
									"        // GetResponse_AccountName\r",
									"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
									"        // GetResponse_AccountId\r",
									"        pm.environment.set(\"GetResponse_AccountId\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
									"       \r",
									"        // // random_IM\r",
									"        // pm.environment.set(\"random_IM\", _.random(10000000, 99999999)+\" \"+_.random(1000000, 9999999))\r",
									"        // // random_ICCID\r",
									"        // pm.environment.set(\"random_ICCID\", _.random(1000000, 9999999)+\" \"+_.random(100000, 999999))\r",
									"        // // random_number\r",
									"        // pm.environment.set(\"random_number\",pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        // //ThingName\r",
									"        // let thingNameValue = fieldDataValue.Thing.ThingNameValue; // \"Sensor_TestThingName\"\r",
									"        // pm.environment.set(\"ThingName\", thingNameValue + pm.environment.get(\"random_number\"))\r",
									"\r",
									"        // random_number\r",
									"        pm.environment.set(\"random_number\",pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"\r",
									"        for(let i=0;i<countData;i++){\r",
									"            // random_IM\r",
									"            pm.environment.set(\"random_IM\"+[i+1], _.random(10000000, 99999999)+\" \"+_.random(1000000, 9999999))\r",
									"            // random_ICCID\r",
									"            pm.environment.set(\"random_ICCID\"+[i+1], _.random(1000000, 9999999)+\" \"+_.random(100000, 999999))\r",
									"\r",
									"            //ThingName\r",
									"            let thingNameValue = fieldDataValue.Thing.ThingNameValue; // \"Sensor_TestThingName\"\r",
									"            pm.environment.set(\"ThingName\"+[i+1],thingNameValue + [i+1] + pm.environment.get(\"random_number\"))\r",
									"        }\r",
									"\r",
									"        //ThinggroupName\r",
									"        let ThingGroupNameValue = fieldDataValue.Group.ThingGroupNameValue; // \"Sensor_TestThingGroupName\"\r",
									"        pm.environment.set(\"ThingGroupName\",ThingGroupNameValue + pm.environment.get(\"random_number\"))\r",
									"            \r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThing\r",
									"CreateThingArr = async () =>  {\r",
									"    try {\r",
									"        \r",
									"        // header\r",
									"        let headersOptCreateThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThing');\r",
									"        let dataThingIdArr = [];\r",
									"        for(let i=0;i<countData;i++){\r",
									"            // body\r",
									"            let httpRequestCreateThing = {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                    \"ThingName\": pm.environment.get(\"ThingName\"+ [i+1]),\r",
									"                    \"IMEI\": pm.environment.get(\"random_IM\"+ [i+1]),\r",
									"                    \"IMSI\": pm.environment.get(\"random_IM\"+ [i+1]),\r",
									"                    \"ICCID\": pm.environment.get(\"random_ICCID\"+ [i+1]),\r",
									"                    \"RouteUrl\": fieldDataValue.Thing.RouteUrlValue , //[\"http://10.12.3.4:2019/api/information/AddInformation\"]\r",
									"                    \"RouteInfo\": {\r",
									"                        \"MIMO_ID\": fieldDataValue.Thing.RouteInfoMIMOIDValue , //\"606edada\"\r",
									"                        \"MIMO_SerialNo\": fieldDataValue.Thing.RouteInfoMIMOSerialNoValue //5466758878\r",
									"                    },\r",
									"                    \"RouteFlag\": {\r",
									"                        \"ThingName\": fieldDataValue.Thing.RouteFlagThingNameValue , //true\r",
									"                        \"ThingToken\": fieldDataValue.Thing.RouteFlagThingTokenValue, //true\r",
									"                        \"IMEI\": fieldDataValue.Thing.RouteFlagIMEIValue, //true\r",
									"                        \"ICCID\": fieldDataValue.Thing.RouteFlagICCIDValue, //true\r",
									"                        \"RouteInfo\": fieldDataValue.Thing.RouteFlagRouteInfoValue //true\r",
									"                    }\r",
									"                })\r",
									"            };\r",
									"            \r",
									"            let optionsCreateThing = {\r",
									"                url: url + provisioningapis + urlThingCreateThing,\r",
									"                method: 'POST',\r",
									"                header: headersOptCreateThing,\r",
									"                body: httpRequestCreateThing\r",
									"            };\r",
									"            let response = await reqPromise(optionsCreateThing);\r",
									"            let jsonDataCreateThing = await response.json();\r",
									"            let ThingId = await jsonDataCreateThing.ThingInfo.ThingId;\r",
									"            dataThingIdArr.push(ThingId);\r",
									"            let operationStatusCreateThing = await jsonDataCreateThing.OperationStatus;\r",
									"\r",
									"            //201\r",
									"            pm.test(\"CreateThing\"+ [i+1]+ \" : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"                pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"            });\r",
									"            //20100\r",
									"            pm.test('CreateThing'+ [i+1]+ ' : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"                pm.expect(operationStatusCreateThing).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"            });\r",
									"            //CreateThing is Success\r",
									"            pm.test('CreateThing'+ [i+1]+ ' : OperationStatus Description is '+'\"'+ resultDescriptionCreateThing+'\"', function () {\r",
									"                pm.expect(operationStatusCreateThing).to.have.property('Description', resultDescriptionCreateThing);\r",
									"            });\r",
									"        }\r",
									"        \r",
									"        // console.log('dataThingIdArr',dataThingIdArr);\r",
									"        // pm.environment.set(\"GetResponse_ThingID\",jsonDataCreateThing.ThingInfo.ThingId)\r",
									"        pm.environment.set(\"GetResponse_ThingIDArr\",JSON.stringify(dataThingIdArr))\r",
									"        \r",
									"        //Get Random Sensor \r",
									"        pm.environment.set(\"random_Sensor\", _.random(100, 999))\r",
									"\r",
									"        //Get Random Sensor Control\r",
									"        pm.environment.set(\"random_Sensor_Control\", _.random(100, 999))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThingStateInfo\r",
									"CreateThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let dataThingIDArray = JSON.parse(pm.environment.get(\"GetResponse_ThingIDArr\"));\r",
									"        // console.log('dataThingIDArray',dataThingIDArray);\r",
									"\r",
									"        // {\"Temp\" : pm.environment.get(\"random_Sensor\")}\r",
									"        let sensorValue = {};\r",
									"        sensorValue[fieldDataValue.CreateThingStateInfo.SensorKey] = pm.environment.get(\"random_Sensor\");\r",
									"        // console.log('sensorValue',sensorValue);\r",
									"        \r",
									"        let httpRequestCreateThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\":dataThingIDArray,\r",
									"                \"Type\": fieldDataValue.CreateThingStateInfo.Type_Report,\r",
									"                \"Sensor\": sensorValue\r",
									"            })\r",
									"        };\r",
									"            let optionsCreateThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingCreateThingStateInfo,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThingStateInfo,\r",
									"            body: httpRequestCreateThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThingStateInfo');\r",
									"        let response = await reqPromise(optionsCreateThingStateInfo);\r",
									"\r",
									"        let jsonDataCreateThingStateInfo = await response.json();\r",
									"        let operationStatusCreateThingStateInfo = await jsonDataCreateThingStateInfo.OperationStatus;\r",
									"        // console.log('operationStatusCreateThingStateInfo',operationStatusCreateThingStateInfo);\r",
									"\r",
									"        //200\r",
									"        pm.test(\"CreateThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //CreateThingStateInfo is Success\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionCreateThingStateInfo+'\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Description', resultDescriptionCreateThingStateInfo);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThingGroup\r",
									"CreateThingGroup = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThingGroup = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateGroup + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateGroup,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        let dataThingIDArray = JSON.parse(pm.environment.get(\"GetResponse_ThingIDArr\"));\r",
									"        // console.log('dataThingIDArray',dataThingIDArray);\r",
									"\r",
									"            // body\r",
									"            let httpRequestCreateThingGroup = {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                        \"ThingGroupName\": pm.environment.get(\"ThingGroupName\"),\r",
									"                        \"ThingId\": dataThingIDArray\r",
									"                        })\r",
									"            };\r",
									"             let optionsCreateThingGroup = {\r",
									"                url: url + provisioningapis + urlGroupCreateGroup,\r",
									"                method: 'POST',\r",
									"                header: headersOptCreateThingGroup,\r",
									"                body: httpRequestCreateThingGroup\r",
									"            };\r",
									"\r",
									"            // console.log('request CreateThingGroup');\r",
									"            let response = await reqPromise(optionsCreateThingGroup);\r",
									"            let jsonDataCreateThingGroup = await response.json();\r",
									"            let operationStatusCreateThingGroup = await jsonDataCreateThingGroup.OperationStatus;\r",
									"        \r",
									"            //200\r",
									"            pm.test(\"CreateThingGroup : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"                pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"            });\r",
									"            //20000\r",
									"            pm.test('CreateThingGroup : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"                pm.expect(operationStatusCreateThingGroup).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"            });\r",
									"            //CreateThingGroup is Success\r",
									"            pm.test('CreateThingGroup : OperationStatus Description is '+'\"'+ resultDescriptionCreateGroup+'\"', function () {\r",
									"                pm.expect(operationStatusCreateThingGroup).to.have.property('Description', resultDescriptionCreateGroup);\r",
									"            });\r",
									"           \r",
									"           // GetResponse_ThingGroupID\r",
									"            pm.environment.set(\"GetResponse_ThingGroupID\",jsonDataCreateThingGroup.GroupInfo.GroupId);\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"Signin();\r",
									"setTimeout(async function(){await CreatePartner();}, 3000); \r",
									"setTimeout(async function(){await CreateAccount();}, 6000); \r",
									"setTimeout(async function(){await CreateThingArr();}, 8000); \r",
									"setTimeout(async function(){await CreateThingStateInfo();}, 9000); \r",
									"setTimeout(async function(){await CreateThingGroup();}, 10000); \r",
									"setTimeout(async function(){}, 15000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-ais-OrderRef",
								"value": "{{x_ais_OrderRef_ControlThingGroup_fail}}{{current_timestamp}}"
							},
							{
								"key": "x-ais-AccountKey",
								"type": "text",
								"value": "{{GetResponse_AccountId}}"
							},
							{
								"key": "x-ais-AccessToken",
								"value": "{{Bearer}} {{AccessToken}}"
							},
							{
								"key": "Accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"ThingGroupId\": \"{{Value_ControlThingGroup_TST_F3_0_2_004_Error}}\",\r\n  \"Sensors\": {\r\n    \"{{SensorKey}}\": {{random_Sensor_Control}}\r\n    \r\n  }\r\n}"
						},
						"url": {
							"raw": "{{url}}{{mg4controlapis}}/api/v1/Control/ThingGroup",
							"host": [
								"{{url}}{{mg4controlapis}}"
							],
							"path": [
								"api",
								"v1",
								"Control",
								"ThingGroup"
							]
						},
						"description": "Type:Desire"
					},
					"response": []
				}
			]
		},
		{
			"name": "ControlThingGroups",
			"item": [
				{
					"name": "ControlThingGroups_TST_F4_1_1_001_Success_SensorIsText",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" const moment = require('moment');\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//count for loop data\r",
									"var countData = 2;\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to xAisOrderRef \"RemoveThing_\"\r",
									"var x_ais_OrderRef_RemoveThing = pm.globals.get(\"x_ais_OrderRef_RemoveThing\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"var x_ais_OrderDesc_RemoveThing = pm.globals.get(\"x_ais_OrderDesc_RemoveThing\");\r",
									"//get global variable to xAisOrderRef \"InquiryThing_\"\r",
									"var x_ais_OrderRef_InquiryThing = pm.globals.get(\"x_ais_OrderRef_InquiryThing\");\r",
									"//get global variable to x_ais_OrderDesc \"InquiryThing\"\r",
									"var x_ais_OrderDesc_InquiryThing = pm.globals.get(\"x_ais_OrderDesc_InquiryThing\");\r",
									"//get global variable to x_ais_OrderRef \"RemoveThingStateInfo_\"\r",
									"var x_ais_OrderDesc_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_RemoveThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThingStateInfo\"\r",
									"var x_ais_OrderRef_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderRef_RemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Group --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveGroup_\"\r",
									"var x_ais_OrderRef_RemoveGroup = pm.globals.get(\"x_ais_OrderRef_RemoveGroup\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveGroup\"\r",
									"var x_ais_OrderDesc_RemoveGroup = pm.globals.get(\"x_ais_OrderDesc_RemoveGroup\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Control --------------//\r",
									"//get global variable to x_ais_OrderRef \"ControlThingGroups_\"\r",
									"var x_ais_OrderRef_ControlThingGroups = pm.globals.get(\"x_ais_OrderRef_ControlThingGroups\");\r",
									"//get global variable to x_ais_OrderRef \"ControlThingGroupsfail_\"\r",
									"var x_ais_OrderRef_ControlThingGroups_fail = pm.globals.get(\"x_ais_OrderRef_ControlThingGroups_fail\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get url Remove --------------//\r",
									"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
									"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"var urlThingRemoveThing = pm.globals.get(\"urlThingRemoveThing\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"var urlThingRemoveThingStateInfo = pm.globals.get(\"urlThingRemoveThingStateInfo\");\r",
									"//get global variable to url \"/api/v1/Group/RemoveGroup\"\r",
									"var urlGroupRemoveGroup = pm.globals.get(\"urlGroupRemoveGroup\");\r",
									"//---------------- get url Inquiry --------------//\r",
									"//get global variable to url \"/api/v1/Thing/InquiryThingr\"\r",
									"var urlThingInquiryThing = pm.globals.get(\"urlThingInquiryThing\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"RemovePartner is Success\"\r",
									"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
									"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
									"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
									"//get global variable to resultDescription \"RemoveThing is Success\"\r",
									"var resultDescriptionRemoveThing = pm.globals.get(\"resultDescriptionRemoveThing\");\r",
									"//get global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"var resultDescriptionRemoveThingStateInfo = pm.globals.get(\"resultDescriptionRemoveThingStateInfo\");\r",
									"//get global variable to resultDescription \"RemoveGroup is Success\"\r",
									"var resultDescriptionRemoveGroup = pm.globals.get(\"resultDescriptionRemoveGroup\");\r",
									"//get global variable to resultDescription \"InquiryThing is Success\"\r",
									"var resultDescriptionInquiryThing = pm.globals.get(\"resultDescriptionInquiryThing\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to resultDescription \"ControlManyGroups is Success\"\r",
									"// var resultDescriptionSuccessControlManyGroups = pm.globals.get(\"resultDescriptionSuccessControlManyGroups\");\r",
									"//get global variable to resultDescription \"The requested operation was successfully.\"\r",
									"var resultDescriptionTheRequestedOperationWasSuccessfully = pm.globals.get(\"resultDescriptionTheRequestedOperationWasSuccessfully\");\r",
									"//------------------------------------------------------------//\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"ControlThingGroups : Status code is \" + statusCodeSuccess, function () {\r",
									"    pm.response.to.have.status(statusCodeSuccess);\r",
									"});\r",
									"\r",
									"pm.test('ControlThingGroups : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeSuccess);\r",
									"});\r",
									"\r",
									"pm.test('ControlThingGroups : OperationStatus DeveloperMessage is '+'\"'+ resultDescriptionTheRequestedOperationWasSuccessfully+'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"});\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// RemovePartner\r",
									" RemovePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemovePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemovePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemovePartner = {\r",
									"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemovePartner,\r",
									"            body: httpRequestRemovePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request RemovePartner');\r",
									"        let response = await reqPromise(optionsRemovePartner);\r",
									"        let jsonDataRemovePartner = await response.json();\r",
									"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
									"    \r",
									"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemovePartner is Success\r",
									"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveAccount\r",
									" RemoveAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemoveAccount = {\r",
									"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveAccount,\r",
									"            body: httpRequestRemoveAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveAccount');\r",
									"        let response = await reqPromise(optionsRemoveAccount);\r",
									"        let jsonDataRemoveAccount = await response.json();\r",
									"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
									"    \r",
									"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveAccount is Success\r",
									"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThing\r",
									" RemoveThing = async () =>  {\r",
									"    try {\r",
									"\r",
									"        // header\r",
									"        let headersOptRemoveThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        let dataThingIDArray = JSON.parse(pm.environment.get(\"GetResponse_ThingIDArr\"));\r",
									"\r",
									"        for(let i=0;i<countData;i++){\r",
									"\r",
									"            // body\r",
									"            let httpRequestRemoveThing = {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                    \"ThingId\": dataThingIDArray[i]\r",
									"                })\r",
									"            };\r",
									"\r",
									"            let optionsRemoveThing = {\r",
									"                url: url + provisioningapis + urlThingRemoveThing,\r",
									"                method: 'DELETE',\r",
									"                header: headersOptRemoveThing,\r",
									"                body: httpRequestRemoveThing\r",
									"            };\r",
									"            // console.log('request RemoveThing');\r",
									"            let response = await reqPromise(optionsRemoveThing);\r",
									"            let jsonDataRemoveThing = await response.json();\r",
									"            // console.log('jsonDataRemoveThing',jsonDataRemoveThing)\r",
									"        \r",
									"            let operationStatusRemoveThing = await jsonDataRemoveThing.OperationStatus;\r",
									"\r",
									"            //200\r",
									"            pm.test(\"RemoveThing\" + [i+1]+ \" : Status code is \" + statusCodeSuccess, function () {\r",
									"                pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"            });\r",
									"            //20000\r",
									"            pm.test('RemoveThing' + [i+1]+ ' : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"                pm.expect(operationStatusRemoveThing).to.have.property('Code', resultCodeSuccess);\r",
									"            });\r",
									"            //RemoveThing is Success\r",
									"            pm.test('RemoveThing' + [i+1]+ ' : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThing+'\"', function () {\r",
									"                pm.expect(operationStatusRemoveThing).to.have.property('Description', resultDescriptionRemoveThing);\r",
									"            });\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThingStateInfo\r",
									"RemoveThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"\r",
									"        let dataThingIDArray = JSON.parse(pm.environment.get(\"GetResponse_ThingIDArr\"));\r",
									"        // console.log('dataThingIDArray',dataThingIDArray);\r",
									"        for(let i=0;i<dataThingIDArray.length;i++){\r",
									"        \r",
									"            // body\r",
									"            let httpRequestRemoveThingStateInfo = {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                    \"ThingId\": dataThingIDArray[i],\r",
									"                    \"stateType\": fieldDataValue.CreateThingStateInfo.Type_Report, //Report\r",
									"                    \"stateKey\": fieldDataValue.CreateThingStateInfo.SensorKey //Temp\r",
									"                })\r",
									"            };\r",
									"\r",
									"            let optionsRemoveThingStateInfo = {\r",
									"                url: url + provisioningapis + urlThingRemoveThingStateInfo,\r",
									"                method: 'DELETE',\r",
									"                header: headersOptRemoveThingStateInfo,\r",
									"                body: httpRequestRemoveThingStateInfo\r",
									"            };\r",
									"\r",
									"            // console.log('response RemoveThingStateInfo');\r",
									"            let response = await reqPromise(optionsRemoveThingStateInfo);\r",
									"            let jsonDataRemoveThingStateInfo = await response.json();\r",
									"            // console.log('jsonDataRemoveThingStateInfo',jsonDataRemoveThingStateInfo)\r",
									"        \r",
									"            let operationStatusRemoveThingStateInfo = await jsonDataRemoveThingStateInfo.OperationStatus;\r",
									"\r",
									"            //200\r",
									"            pm.test(\"RemoveThingStateInfo\" + [i+1]+ \" : Status code is \" + statusCodeSuccess, function () {\r",
									"                pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"            });\r",
									"            //20000\r",
									"            pm.test('RemoveThingStateInfo' + [i+1]+ ' : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"                pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"            });\r",
									"            //RemoveThingStateInfo is Success\r",
									"            pm.test('RemoveThingStateInfo' + [i+1]+ ' : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThingStateInfo+'\"', function () {\r",
									"                pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Description', resultDescriptionRemoveThingStateInfo);\r",
									"            });\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveGroup\r",
									" RemoveGroup = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveGroup = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveGroup + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveGroup,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"            \r",
									"        };\r",
									"\r",
									"        let dataThingGroupIDArray = JSON.parse(pm.environment.get(\"GetResponse_ThingGroupIDArr\"));\r",
									"\r",
									"        for(let i=0;i<dataThingGroupIDArray.length;i++){\r",
									"        \r",
									"            // body\r",
									"            let httpRequestRemoveGroup = {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                    \"GroupId\": dataThingGroupIDArray[i]\r",
									"                })\r",
									"            };\r",
									"\r",
									"            let optionsRemoveGroup = {\r",
									"                url: url + provisioningapis + urlGroupRemoveGroup,\r",
									"                method: 'DELETE',\r",
									"                header: headersOptRemoveGroup,\r",
									"                body: httpRequestRemoveGroup\r",
									"            };\r",
									"\r",
									"            // console.log('response RemoveGroup');\r",
									"            let response = await reqPromise(optionsRemoveGroup);\r",
									"            let jsonDataRemoveGroup = await response.json();\r",
									"            // console.log('jsonDataRemoveThing',jsonDataRemoveGroup)\r",
									"        \r",
									"            let operationStatusRemoveGroup = await jsonDataRemoveGroup.OperationStatus;\r",
									"\r",
									"            //200\r",
									"            pm.test(\"RemoveGroup\" + [i+1]+ \" : Status code is \" + statusCodeSuccess, function () {\r",
									"                pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"            });\r",
									"            //20000\r",
									"            pm.test('RemoveGroup' + [i+1]+ ' : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"                pm.expect(operationStatusRemoveGroup).to.have.property('Code', resultCodeSuccess);\r",
									"            });\r",
									"            //RemoveGroup is Success\r",
									"            pm.test('RemoveGroup' + [i+1]+ ' : OperationStatus Description is '+'\"'+ resultDescriptionRemoveGroup+'\"', function () {\r",
									"                pm.expect(operationStatusRemoveGroup).to.have.property('Description', resultDescriptionRemoveGroup);\r",
									"            });\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"//---------------- LogDefaultValue --------------//\r",
									"//set variable to LogDefaultValue JSON.parse\r",
									"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
									"// console.log('LogDefaultValue',LogDefaultValue);\r",
									"//---------------- set globals Other --------------//\r",
									"var SearchLog = LogDefaultValue.SearchLog;\r",
									"// console.log('SearchLog',SearchLog);\r",
									"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
									"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
									"var kbn_version = SearchLog.header.kbn_version;\r",
									"var authorization = SearchLog.header.Authorization;\r",
									"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
									"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
									"var namespace = LogDefaultValue.Other.namespace_control4mg;\r",
									"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
									"var header_x_ais_accountkey = LogDefaultValue.Other.header_x_ais_accountkey;\r",
									"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
									"var methodPost = LogDefaultValue.Other.methodPost;\r",
									"\r",
									"// Detail\r",
									"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
									"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
									"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
									"\r",
									"// Summary\r",
									"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
									"// ControlAPIs\r",
									"var applicationName = LogDefaultValue.Control.applicationName_mg4;\r",
									"var cmdName = LogDefaultValue.Control.cmdNameThingGroups;\r",
									"// var resultDesc = LogDefaultValue.Control.resultDescThing_success;\r",
									"var endPointNameControlAPIs = LogDefaultValue.Control.endPointNameControlAPIs;\r",
									"var endPointNameDesireEx = LogDefaultValue.Control.endPointNameDesireEx;\r",
									"var endPointNameRabbitMQ = LogDefaultValue.Control.endPointNameRabbitMQ;\r",
									"var containerId = LogDefaultValue.Control.containerId;\r",
									"var requestObjectUrlStaging = LogDefaultValue.Control.requestObjectUrlStagingThingGroups;\r",
									"var xProtocolControl = LogDefaultValue.Control.xProtocolControl;\r",
									"var responseObjectPublished = LogDefaultValue.Control.responseObjectPublished;\r",
									"\r",
									"// Check CDR (Summary Log) and EDR (Detail Log)\r",
									"SearchLogFindTid = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSearchLogFindTid = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        // let valueSearch = pm.environment.get(\"GetResponse_ThingID\"); \r",
									"        let valueSearch = x_ais_OrderRef_ControlThingGroups +  current_timestamp; \r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestSearchLogFindTid = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"\r",
									"        let optionsSearchLogFindTid = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptSearchLogFindTid,\r",
									"            body: httpRequestSearchLogFindTid\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsSearchLogFindTid);\r",
									"        let jsonDataSearchLogFindTid = await response.json();\r",
									"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
									"        console.log('hits',hits)\r",
									"  \r",
									"        // find tid\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            // let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"        \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            if(applicationNameValue == applicationName){\r",
									"                // let tid = hits[i]._source.cauldron.tid;\r",
									"                // pm.environment.set(\"tid\", tid);\r",
									"                let sessionId = hits[i]._source.cauldron.sessionId;\r",
									"                pm.environment.set(\"sessionId\", sessionId);\r",
									"                break;\r",
									"           }\r",
									"        }\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"CheckLog = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCheckLog = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = pm.environment.get(\"sessionId\");\r",
									"\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestCheckLog = {\r",
									"            mode: 'raw',\r",
									"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"        let optionsCheckLog = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptCheckLog,\r",
									"            body: httpRequestCheckLog\r",
									"        }; \r",
									"        let response = await reqPromise(optionsCheckLog);\r",
									"        let jsonDataCheckLog = await response.json();\r",
									"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
									"        \r",
									"        // //200\r",
									"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });     \r",
									"        \r",
									"        let hits = jsonDataCheckLog.hits.hits\r",
									"        console.log('hits',hits)\r",
									"  \r",
									"        // find logType\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            //  let logType = hits[i]._source.cauldron.logType\r",
									"            let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"           \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            \r",
									"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
									"            // console.log('resultDataLog',resultDataLog)\r",
									"\r",
									"            let tidControl = x_ais_OrderRef_ControlThingGroups + current_timestamp;\r",
									"            // console.log(tidControl);\r",
									"            if(applicationNameValue == applicationName){\r",
									"                 \r",
									"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ControlAPIs\r",
									"                    pm.test(\"Check Summary Log : ControlThingGroups\" , function () {\r",
									"                        console.log(\"======== Check Summary Log ( Expected = Actual) [ControlThingGroups] ==================\");\r",
									"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
									"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
									"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeSuccess);\r",
									"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
									"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        // console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
									"                        // console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
									"                        \r",
									"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
									"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
									"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeSuccess); \r",
									"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionTheRequestedOperationWasSuccessfully); \r",
									"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
									"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"\r",
									"                        let thingGroupId = JSON.parse(pm.environment.get(\"GetResponse_ThingGroupIDArr\"));\r",
									"                        let customUrl= urlCheckLog + requestObjectUrlStaging;\r",
									"                        let customAccountkey = pm.environment.get(\"GetResponse_AccountId\");\r",
									"\r",
									"                        // check identity\r",
									"                        // \"identity\":\"{\\\"ThingGroupsID\\\":[\\\"6013763596d0ed0001f59626\\\",\\\"6013763596d0ed0001f5962c\\\"]\"}\"\r",
									"                        let dataSummaryIdentity = JSON.parse(resultDataLog.identity);\r",
									"\r",
									"                        console.log(\"identity.ThingGroupID : [\" + dataSummaryIdentity.ThingGroupID + \"] = [\" + thingGroupId + \"]\");\r",
									"                        pm.expect(dataSummaryIdentity.ThingGroupID).to.eql(thingGroupId); \r",
									"\r",
									"                        // check custom\r",
									"                        // \\\"custom\\\":{ \\\"customData\\\":{ \\\"url\\\":\\\"mg-iot.sandais.com/api/v1/Control/ThingGroups\\\", \\\"accountkey\\\":\\\"609a033526fdbc0001c3f016\\\", \\\"ThingGroupID\\\":[ \\\"609a035726fdbc0001c3f037\\\", \\\"609a035726fdbc0001c3f03f\\\" ] }, \\\"endPointSummary\\\":[ { \\\"no\\\":\\\"1\\\", \\\"endPointName\\\":\\\"db.AuthenticationCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:Inquiry was Success\\\", \\\"processTime\\\":0.0002 }, { \\\"no\\\":\\\"2\\\", \\\"endPointName\\\":\\\"db.ClientsCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:Inquiry was Success\\\", \\\"processTime\\\":0.0005 }, { \\\"no\\\":\\\"3\\\", \\\"endPointName\\\":\\\"db.AccountsCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:Inquiry was Success\\\", \\\"processTime\\\":0.0002 }, { \\\"no\\\":\\\"4\\\", \\\"endPointName\\\":\\\"db.GroupsCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:Inquiry was Success\\\", \\\"processTime\\\":0.0002 }, { \\\"no\\\":\\\"5\\\", \\\"endPointName\\\":\\\"db.ThingsCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:Inquiry was Success\\\", \\\"processTime\\\":0.0002 }, { \\\"no\\\":\\\"6\\\", \\\"endPointName\\\":\\\"db.ThingsCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:Inquiry was Success\\\", \\\"processTime\\\":0.0002 } ] }\r",
									"\r",
									"                        let customData = resultDataLog.custom.customData\r",
									"\r",
									"                        console.log(\"custom.url : \" + customData.url + \" = \" + customUrl);\r",
									"                        console.log(\"custom.accountkey : \" + customData.accountkey + \" = \" + customAccountkey);\r",
									"                        console.log(\"custom.ThingGroupID : [\" + customData.ThingGroupID + \"] = [\" + thingGroupId + \"]\");\r",
									"\r",
									"                        pm.expect(customData.url).to.eql(customUrl); \r",
									"                        pm.expect(customData.accountkey).to.eql(customAccountkey); \r",
									"                        pm.expect(customData.ThingGroupID).to.eql(thingGroupId); \r",
									"\r",
									"                        let custom = resultDataLog.custom.endPointSummary;\r",
									"                        let countCustom = custom.length;\r",
									"                       \r",
									"                        // [\"db.AuthenticationCollection\",\"db.ClientsCollection\",\"db.AccountsCollection\",\"db.GroupsCollection\",\"db.ThingsCollection\",\"db.ThingsCollection\"]\r",
									"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_ControlThingGroups;\r",
									"                        // [\"20000:Inquiry was Success\",\"20000:Inquiry was Success\",\"20000:Inquiry was Success\",\"20000:Inquiry was Success\",\"20000:Inquiry was Success\",\"20000:Inquiry was Success\"]\r",
									"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_ControlThingGroups;\r",
									"                        let countCustomStep = dataEndPointName.length;\r",
									"\r",
									"                        console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep);\r",
									"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
									"                        \r",
									"                        for(let i=0;i<countCustomStep;i++){\r",
									"                            let no = custom[i].no;\r",
									"                            let valueEndPointName = custom[i].endPointName;\r",
									"                            let valueResponseStatus = custom[i].responseStatus;\r",
									"                            // console.log(\"i\",i);\r",
									"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
									"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
									"\r",
									"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString());\r",
									"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i]);\r",
									"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i]);\r",
									"\r",
									"                            pm.expect(no).to.eql((i+1).toString()); \r",
									"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
									"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]); \r",
									"                        }\r",
									"                    }); \r",
									"                }\r",
									"\r",
									"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ControlAPIs\r",
									"\r",
									"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
									"                    // console.log('endPointNameValue ',endPointNameValue)\r",
									"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [ControlThingGroups]\", function () {\r",
									"                        console.log(\"======== Check Detail Log ( Expected = Actual) [ControlThingGroups] ==================\");\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
									"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
									"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
									"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
									"\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
									"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
									"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
									"\r",
									"                        let url = requestObjectUrlStaging; \r",
									"                        let urlCustom = urlCheckLog + requestObjectUrlStaging; \r",
									"                        let SensorKey = fieldDataValue.CreateThingStateInfo.SensorKey;\r",
									"                        let sensor = pm.environment.get(\"random_Sensor_Control\");\r",
									"                        let x_ais_orderref = x_ais_OrderRef_ControlThingGroups + current_timestamp;\r",
									"                        let x_ais_AccountKey = pm.environment.get(\"GetResponse_AccountId\");\r",
									"                        let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken\");\r",
									"                        let thingGroupId = JSON.parse(pm.environment.get(\"GetResponse_ThingGroupIDArr\"));\r",
									"                        let x_protocol = xProtocolControl;\r",
									"\r",
									"                        // if( endPointNameValue == endPointNameControlAPIs){     //\"endPointName\":\"ControlAPIs\"\r",
									"                        if( endPointNameValue == undefined){    //\"endPointName\":undefined\r",
									"\r",
									"                            console.log(\"custom1.endPointName : \" + resultDataLog.custom1.endPointName + \" = \" + undefined);\r",
									"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(undefined); \r",
									"\r",
									"                            // check requestObject\r",
									"                            // \"requestObject\":\"{\\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Control/ThingGroups\\\",\\\"method\\\":\\\"POST\\\",\\\"headers\\\":{\\\"x-ais-orderref\\\":\\\"ControlThingGroups_202101290901653\\\",\\\"x-ais-accountkey\\\":\\\"60114adca32e8c0001576d22\\\",\\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAGhfn1wJCmf68Vf1zYxZ/fak0lmQ84nNnLsXbdYpFNnXEIlAkkY2KW0\\\"},\\\"body\\\":{\\\"ThingGroupId\\\":[\\\"6013763596d0ed0001f59626\\\",\\\"6013763596d0ed0001f5962c\\\"] ,\\\"Sensors\\\":{\\\"Temp\\\":955}}}\"\r",
									"\r",
									"                            // \\\"requestObject\\\":\\\"{ \\\\\\\"url\\\\\\\":\\\\\\\"/api/v1/Control/ThingGroups\\\\\\\", \\\\\\\"method\\\\\\\":\\\\\\\"POST\\\\\\\", \\\\\\\"headers\\\\\\\":{ \\\\\\\"Cache-Control\\\\\\\":\\\\\\\"no-cache\\\\\\\", \\\\\\\"Content-Type\\\\\\\":\\\\\\\"application/json\\\\\\\", \\\\\\\"Accept\\\\\\\":\\\\\\\"*/*\\\\\\\", \\\\\\\"Accept-Encoding\\\\\\\":\\\\\\\"gzip, deflate, br\\\\\\\", \\\\\\\"Host\\\\\\\":\\\\\\\"mg-iot.sandais.com\\\\\\\", \\\\\\\"User-Agent\\\\\\\":\\\\\\\"PostmanRuntime/7.26.8\\\\\\\", \\\\\\\"Content-Length\\\\\\\":\\\\\\\"118\\\\\\\", \\\\\\\"x-real-ip\\\\\\\":\\\\\\\"182.232.14.198\\\\\\\", \\\\\\\"x-forwarded-for\\\\\\\":\\\\\\\"182.232.14.198, 10.233.68.0\\\\\\\", \\\\\\\"x-forwarded-proto\\\\\\\":\\\\\\\"http\\\\\\\", \\\\\\\"x-ais-orderref\\\\\\\":\\\\\\\"ControlThingGroups_202105111105595\\\\\\\", \\\\\\\"x-ais-accountkey\\\\\\\":\\\\\\\"609a033526fdbc0001c3f016\\\\\\\", \\\\\\\"x-ais-accesstoken\\\\\\\":\\\\\\\"Bearer ibnxnVhs5Rx3IwglWv7/gVA/1TpQnKqAOBAADlRDvYhOpXwmlpYOEb5yfY5aZpoj0YRWRZM26i9HOqtc1fc1jpNDOK5JpISttmMEy59g2py7nLWonDe2YW2OPRGWSowk6+9ZihLU1fZ5d5jAqqrZaKlOAAI3N1TXDNLsHuKcOJMcERbCcaMqRaku+MY4/kzE+eyIdkfwwbjT91S2VQq+Wk2ooMWuLk6/DHVJhwbMP7aJvAm4KG8JKSNC6L62rLZ8KBmXFBYt/0BKVegMrc8SMg==\\\\\\\", \\\\\\\"postman-token\\\\\\\":\\\\\\\"34ae15af-cc19-48b6-8979-8a4ea3a9c264\\\\\\\", \\\\\\\"x-envoy-external-address\\\\\\\":\\\\\\\"10.233.68.0\\\\\\\", \\\\\\\"x-request-id\\\\\\\":\\\\\\\"f8a9927f-f237-4f61-aeea-b9119196916f\\\\\\\", \\\\\\\"x-envoy-original-path\\\\\\\":\\\\\\\"/mg4controlapis/api/v1/Control/ThingGroups\\\\\\\", \\\\\\\"x-b3-traceid\\\\\\\":\\\\\\\"351b2bf0ad4c19832d333588842e3f3c\\\\\\\", \\\\\\\"x-b3-spanid\\\\\\\":\\\\\\\"370ee4e7ca55e4f2\\\\\\\", \\\\\\\"x-b3-parentspanid\\\\\\\":\\\\\\\"2d333588842e3f3c\\\\\\\", \\\\\\\"x-b3-sampled\\\\\\\":\\\\\\\"0\\\\\\\", \\\\\\\"x-ais-SessionId\\\\\\\":\\\\\\\"1620706140755\\\\\\\", \\\\\\\"identity\\\\\\\":\\\\\\\"{ \\\\\\\\\\\\\\\"ThingGroupID\\\\\\\\\\\\\\\":[ \\\\\\\\\\\\\\\"609a035726fdbc0001c3f037\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"609a035726fdbc0001c3f03f\\\\\\\\\\\\\\\" ] }\\\\\\\", \\\\\\\"custom\\\\\\\":\\\\\\\"{ \\\\\\\\\\\\\\\"url\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"mg-iot.sandais.com/api/v1/Control/ThingGroups\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"accountkey\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"609a033526fdbc0001c3f016\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"ThingGroupID\\\\\\\\\\\\\\\":[ \\\\\\\\\\\\\\\"609a035726fdbc0001c3f037\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"609a035726fdbc0001c3f03f\\\\\\\\\\\\\\\" ] }\\\\\\\" }, \\\\\\\"queryString\\\\\\\":{ }, \\\\\\\"routeParamteters\\\\\\\":{ }, \\\\\\\"body\\\\\\\":{ \\\\\\\"ThingGroupId\\\\\\\":[ \\\\\\\"609a035726fdbc0001c3f037\\\\\\\", \\\\\\\"609a035726fdbc0001c3f03f\\\\\\\" ], \\\\\\\"Sensors\\\\\\\":{ \\\\\\\"Temp\\\\\\\":227 } } }\\\"\r",
									"                            \r",
									"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
									"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
									"\r",
									"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
									"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
									"                            console.log(\"headers.x_ais_AccountKey : \" + jsonParseRequestObject.headers[header_x_ais_accountkey] + \" = \" + x_ais_AccountKey);\r",
									"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
									"                            \r",
									"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
									"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accountkey]).to.eql(x_ais_AccountKey);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
									"\r",
									"                            let identity = JSON.parse(jsonParseRequestObject.headers.identity)\r",
									"                            console.log(\"headers.identity.ThingGroupID : [\" + identity.ThingGroupID + \"] = [\" + thingGroupId + \"]\");\r",
									"                            pm.expect(identity.ThingGroupID).to.eql(thingGroupId);\r",
									"                            \r",
									"                            let custom = JSON.parse(jsonParseRequestObject.headers.custom)\r",
									"                            console.log(\"headers.custom.url : \" + custom.url + \" = \" + urlCustom);\r",
									"                            console.log(\"headers.custom.accountkey : \" + custom.accountkey + \" = \" + x_ais_AccountKey);\r",
									"                            console.log(\"headers.custom.ThingGroupID : [\" + custom.ThingGroupID + \"] = [\" + thingGroupId + \"]\");\r",
									"                            \r",
									"                            pm.expect(custom.url).to.eql(urlCustom);\r",
									"                            pm.expect(custom.accountkey).to.eql(x_ais_AccountKey);\r",
									"                            pm.expect(custom.ThingGroupID).to.eql(thingGroupId);\r",
									"\r",
									"                            console.log(\"queryString : \" + JSON.stringify(jsonParseRequestObject.queryString) + \" = \" + JSON.stringify({}));\r",
									"                            pm.expect(jsonParseRequestObject.queryString).to.eql({});\r",
									"\r",
									"                            console.log(\"routeParamteters : \" + JSON.stringify(jsonParseRequestObject.routeParamteters) + \" = \" + JSON.stringify({}));\r",
									"                            pm.expect(jsonParseRequestObject.routeParamteters).to.eql({});\r",
									"\r",
									"                            console.log(\"resquest.body.ThingGroupId : [\" + jsonParseRequestObject.body.ThingGroupId + \"] = [\" + thingGroupId + \"]\");\r",
									"                            console.log(\"resquest.body.Sensors.\" + SensorKey + \"  : \" + jsonParseRequestObject.body.Sensors[SensorKey] + \" = \" + sensor);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.body.ThingGroupId).to.eql(thingGroupId);\r",
									"                            pm.expect(jsonParseRequestObject.body.Sensors[SensorKey]).to.eql(sensor);\r",
									"\r",
									"                            // check responseObject\r",
									"                            // \\\"responseObject\\\":\\\"{ \\\\\\\"OperationStatus\\\\\\\":{ \\\\\\\"Code\\\\\\\":\\\\\\\"20000\\\\\\\", \\\\\\\"DeveloperMessage\\\\\\\":\\\\\\\"The requested operation was successfully.\\\\\\\" } }\\\"\r",
									"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
									"                            // console.log('jsonParseResponseObject',jsonParseResponseObject);\r",
									"\r",
									"                            console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeSuccess);\r",
									"                            console.log(\"response.OperationStatus.DeveloperMessage : \" + jsonParseResponseObject.OperationStatus.DeveloperMessage + \" = \" + resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"\r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeSuccess);  \r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheRequestedOperationWasSuccessfully);  \r",
									"                        }\r",
									"\r",
									"                        // if( endPointNameValue == endPointNameDesireEx){\r",
									"                        if( endPointNameValue == endPointNameRabbitMQ){\r",
									"\r",
									"                            console.log(\"custom1.endPointName : \" + resultDataLog.custom1.endPointName + \" = \" + endPointNameRabbitMQ);\r",
									"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameRabbitMQ);  \r",
									"\r",
									"                            // check requestObject\r",
									"                            // \"requestObject\":\"{\\\"RoutingKey\\\":\\\"desire.pub.v1.15ef8559-0a9a-4ae8-a643-4ecc5f3321b2\\\",\\\"Payload\\\":\\\"{\\\\\\\"Temp\\\\\\\":955}\\\",\\\"Headers\\\":{\\\"timestamp_in_ms\\\":1611746014944,\\\"x-ais-orderref\\\":\\\"ControlThingGroup_202101281801477\\\",\\\"x_protocol\\\":\\\"CONTROL\\\"}}\"\r",
									"\r",
									"                            // \\\"requestObject\\\":\\\"{ \\\\\\\"url\\\\\\\":\\\\\\\"desire.pub.v1.bcaf8427-2315-4ae8-a2a0-c799d37d5511\\\\\\\", \\\\\\\"headers\\\\\\\":{ \\\\\\\"x-ais-orderref\\\\\\\":\\\\\\\"ControlThingGroups_202105111105595\\\\\\\", \\\\\\\"x-ais-sessionid\\\\\\\":\\\\\\\"1620706140755\\\\\\\", \\\\\\\"timestamp_in_ms\\\\\\\":\\\\\\\"1620706140785\\\\\\\", \\\\\\\"x_protocol\\\\\\\":\\\\\\\"CONTROL\\\\\\\" }, \\\\\\\"body\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"{ \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Temp\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":227 }\\\\\\\\\\\\\\\"\\\\\\\" }\\\"\r",
									"\r",
									"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
									"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
									"                            \r",
									"                            // let jsonParsePayload = JSON.parse(jsonParseRequestObject.Payload);\r",
									"                            // console.log('jsonParsePayload',jsonParsePayload);\r",
									"                            let jsonParseBody = jsonParseRequestObject.body;\r",
									"                            let jsonParseBody1 = JSON.parse(jsonParseBody);\r",
									"                            let jsonParseBody2 = JSON.parse(jsonParseBody1);\r",
									"                            // console.log('jsonParseBody',jsonParseBody);\r",
									"                            // console.log('jsonParseBody1',jsonParseBody1);\r",
									"                            // console.log('jsonParseBody2',jsonParseBody2);\r",
									"                            // console.log('jsonParseBody2',jsonParseBody2[SensorKey]);\r",
									"\r",
									"                            console.log(\"headers.timestamp_in_ms : \" + jsonParseRequestObject.headers.timestamp_in_ms + \" = \" + jsonParseRequestObject.headers.timestamp_in_ms);\r",
									"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"                            console.log(\"headers.x_protocol : \" + jsonParseRequestObject.headers.x_protocol + \" = \" + x_protocol);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.headers.timestamp_in_ms).to.eql(jsonParseRequestObject.headers.timestamp_in_ms);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                            pm.expect(jsonParseRequestObject.headers.x_protocol).to.eql(x_protocol);\r",
									"\r",
									"                            console.log(\"resquest.\"+ SensorKey +\" : \" + jsonParseBody2[SensorKey] + \" = \" + sensor);\r",
									"                            pm.expect(jsonParseBody2[SensorKey]).to.eql(sensor);\r",
									"                \r",
									"                            // check responseObject\r",
									"                            // \\\"responseObject\\\":\\\"\\\\\\\"\\\\\\\"\\\"\r",
									"                            // let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
									"                            // console.log('jsonParseResponseObject',jsonParseResponseObject);\r",
									"\r",
									"                            console.log(\"response.custom1.responseObject : \" + resultDataLog.custom1.responseObject + \" = \" + JSON.stringify(\"\"));\r",
									"                            pm.expect(resultDataLog.custom1.responseObject).to.eql(JSON.stringify(\"\"));  \r",
									"                        }\r",
									"\r",
									"                    }); \r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// InquiryThing\r",
									"InquiryThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptInquiryThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_InquiryThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_InquiryThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestInquiryThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsInquiryThing = {\r",
									"            url: url + provisioningapis + urlThingInquiryThing,\r",
									"            method: 'POST',\r",
									"            header: headersOptInquiryThing,\r",
									"            body: httpRequestInquiryThing\r",
									"        };\r",
									"\r",
									"        // console.log('request InquiryThing');\r",
									"        let response = await reqPromise(optionsInquiryThing);\r",
									"        let jsonDataInquiryThing = await response.json();\r",
									"        // console.log('jsonDataInquiryThing',jsonDataInquiryThing)\r",
									"    \r",
									"        let operationStatusInquiryThing = await jsonDataInquiryThing.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"InquiryThing : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('InquiryThing : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusInquiryThing).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //InquiryThing is Success\r",
									"        pm.test('InquiryThing : OperationStatus Description is '+'\"'+ resultDescriptionInquiryThing+'\"', function () {\r",
									"            pm.expect(operationStatusInquiryThing).to.have.property('Description', resultDescriptionInquiryThing);\r",
									"        });\r",
									"\r",
									"        //Check Data\r",
									"        let thingInfo = await jsonDataInquiryThing.ThingInfo;\r",
									"        console.log('thingInfo',thingInfo);\r",
									"\r",
									"        for(let i=0;i<thingInfo.length;i++){\r",
									"            pm.test('Verify DB Check Data : ControlThingGroups [StateInfo.Desire and StateInfo.Delta :{ \"'+  fieldDataValue.CreateThingStateInfo.SensorKey + '\" : '+ pm.environment.get(\"random_Sensor_Control\") +' }]' , function () {\r",
									"                console.log(\"======== Verify DB Check Data ( Expected = Actual) [ControlThingGroups] ==================\");\r",
									"                console.log(\"thingInfo[\"+ i +\"]StateInfo.Delta : \" + thingInfo[i].StateInfo.Delta[fieldDataValue.CreateThingStateInfo.SensorKey] + \" = \" + pm.environment.get(\"random_Sensor_Control\"));\r",
									"                console.log(\"thingInfo[\"+ i +\"]StateInfo.Desire : \" + thingInfo[i].StateInfo.Delta[fieldDataValue.CreateThingStateInfo.SensorKey] + \" = \" + pm.environment.get(\"random_Sensor_Control\"));\r",
									"\r",
									"                pm.expect(thingInfo[i].StateInfo.Delta).to.have.property(fieldDataValue.CreateThingStateInfo.SensorKey, pm.environment.get(\"random_Sensor_Control\"));\r",
									"                pm.expect(thingInfo[i].StateInfo.Desire).to.have.property(fieldDataValue.CreateThingStateInfo.SensorKey, pm.environment.get(\"random_Sensor_Control\"));\r",
									"            });\r",
									"        }\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"setTimeout(function(){SearchLogFindTid();}, 40000); \r",
									"setTimeout(function(){CheckLog();}, 50000); \r",
									"setTimeout(function(){InquiryThing();}, 60000); \r",
									"\r",
									"setTimeout(function(){RemoveGroup();}, 65000); \r",
									"setTimeout(function(){RemoveThingStateInfo();}, 70000); \r",
									"setTimeout(function(){RemoveThing();}, 75000); \r",
									"setTimeout(function(){RemoveAccount();}, 80000); \r",
									"setTimeout(function(){RemovePartner();}, 85000); \r",
									"\r",
									"setTimeout(function(){\r",
									"pm.environment.unset(\"current_timestamp\");\r",
									"pm.environment.unset(\"AccessToken\");\r",
									"pm.environment.unset(\"random_number\");\r",
									"pm.environment.unset(\"PartnerName\");\r",
									"pm.environment.unset(\"MerchantContact\");\r",
									"pm.environment.unset(\"CPID\");\r",
									"pm.environment.unset(\"GetResponse_PartnerId\");\r",
									"pm.environment.unset(\"AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountId\");\r",
									"for(let i=0;i<countData;i++){\r",
									"pm.environment.unset(\"random_IM\"+[i+1]);\r",
									"pm.environment.unset(\"random_ICCID\"+[i+1]);\r",
									"pm.environment.unset(\"ThingName\"+[i+1]);\r",
									"pm.environment.unset(\"ThingGroupName\"+[i+1]);\r",
									"}\r",
									"\r",
									"pm.environment.unset(\"GetResponse_ThingIDArr\");\r",
									"pm.environment.unset(\"random_Sensor\");\r",
									"pm.environment.unset(\"GetResponse_ThingGroupIDArr\");\r",
									"pm.environment.unset(\"tid\");\r",
									"pm.environment.unset(\"sessionId\");\r",
									"pm.environment.unset(\"SensorKey\");\r",
									"pm.environment.unset(\"random_Sensor_Control\");\r",
									"}, 90000); "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var Username = pm.environment.get(\"Username\");\r",
									"var Password = pm.environment.get(\"Password\");\r",
									"\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//count for loop data\r",
									"var countData = 2;\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"pm.environment.set(\"SensorKey\",fieldDataValue.CreateThingStateInfo.SensorKey)\r",
									"\r",
									"//format YYYYMMDDHHMMSSS\r",
									"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
									"// console.log('currentTmestamp',currentTmestamp);\r",
									"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- statusCodeList --------------//\r",
									"//set variable to statusCodeList JSON.parse\r",
									"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
									"//set global variable to statusCode 200\r",
									"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
									"//set global variable to statusCode 201\r",
									"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultCodeList --------------//\r",
									"//set variable to resultCodeList JSON.parse\r",
									"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
									"//set global variable to resultCode \"20000\"\r",
									"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
									"//set global variable to resultCode \"20100\"\r",
									"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionSuccessList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
									"//set global variable to resultDescription \"SignInProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
									"//set global variable to resultDescription \"CreatePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
									"//set global variable to resultDescription \"CreateAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
									"//set global variable to resultDescription \"CreateThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThing\", resultDescriptionSuccessList.resultDescriptionCreateThing);\r",
									"//set global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThingStateInfo\", resultDescriptionSuccessList.resultDescriptionCreateThingStateInfo);\r",
									"//set global variable to resultDescription \"RemovePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
									"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
									"//set global variable to resultDescription \"RemoveThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThing\", resultDescriptionSuccessList.resultDescriptionRemoveThing);\r",
									"//set global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThingStateInfo\", resultDescriptionSuccessList.resultDescriptionRemoveThingStateInfo);\r",
									"//set global variable to resultDescription \"CreateGroup is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateGroup\", resultDescriptionSuccessList.resultDescriptionCreateGroup);\r",
									"//set global variable to resultDescription \"RemoveGroup is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveGroup\", resultDescriptionSuccessList.resultDescriptionRemoveGroup);\r",
									"//set global variable to resultDescription \"Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccess\", resultDescriptionSuccessList.resultDescriptionSuccess);\r",
									"//set global variable to resultDescription \"Created Success\"\r",
									"pm.globals.set(\"resultDescriptionCreatedSuccess\", resultDescriptionSuccessList.resultDescriptionCreatedSuccess);\r",
									"//set global variable to resultDescription \"ControlManyGroups is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessControlManyGroups\", resultDescriptionSuccessList.resultDescriptionSuccessControlManyGroups);\r",
									"//set global variable to resultDescription \"InquiryThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionInquiryThing\", resultDescriptionSuccessList.resultDescriptionInquiryThing);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- HeaderList --------------//\r",
									"//set variable to HeaderList JSON.parse\r",
									"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
									"//---------------- set globals Other --------------//\r",
									"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
									"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
									"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
									"//set global variable to kbn-versio \"7.5.1\"\r",
									"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Signin_ --------------//\r",
									"//set global variable to x_ais_OrderRef \"Signin_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreatePartner --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
									"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
									"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
									"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreateAccount --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
									"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
									"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Thing --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThing\", HeaderList.Thing.x_ais_OrderRef_CreateThing);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThing\", HeaderList.Thing.x_ais_OrderDesc_CreateThing);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThing\", HeaderList.Thing.x_ais_OrderRef_RemoveThing);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThing\", HeaderList.Thing.x_ais_OrderDesc_RemoveThing);\r",
									"//set global variable to x_ais_OrderRef \"InquiryThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_InquiryThing\", HeaderList.Thing.x_ais_OrderRef_InquiryThing);\r",
									"//set global variable to x_ais_OrderDesc \"InquiryThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_InquiryThing\", HeaderList.Thing.x_ais_OrderDesc_InquiryThing);\r",
									"//set global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_RemoveThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_RemoveThingStateInfo);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Group --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateGroup_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateGroup\", HeaderList.Group.x_ais_OrderRef_CreateGroup);\r",
									"//set global variable to x_ais_OrderDesc \"CreateGroup\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateGroup\", HeaderList.Group.x_ais_OrderDesc_CreateGroup);\r",
									"//set global variable to x_ais_OrderRef \"RemoveGroup_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveGroup\", HeaderList.Group.x_ais_OrderRef_RemoveGroup);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveGroup\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveGroup\", HeaderList.Group.x_ais_OrderDesc_RemoveGroup);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Control --------------//\r",
									"//set global variable to x_ais_OrderRef \"ControlThingGroups_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ControlThingGroups\", HeaderList.Control.x_ais_OrderRef_ControlThingGroups);\r",
									"//set global variable to x_ais_OrderRef \"ControlThingGroupsfail_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ControlThingGroups_fail\", HeaderList.Control.x_ais_OrderRef_ControlThingGroups_fail);\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"SignInProcess is Success\"\r",
									"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
									"//get global variable to resultDescription \"CreatePartner is Success\"\r",
									"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
									"//get global variable to resultDescription \"CreateAccount is Success\"\r",
									"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
									"//get global variable to resultDescription \"CreateThing is Success\"\r",
									"var resultDescriptionCreateThing = pm.globals.get(\"resultDescriptionCreateThing\");\r",
									"//get global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"var resultDescriptionCreateThingStateInfo = pm.globals.get(\"resultDescriptionCreateThingStateInfo\");\r",
									"//get global variable to resultDescription \"CreateGroup is Success\"\r",
									"var resultDescriptionCreateGroup = pm.globals.get(\"resultDescriptionCreateGroup\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- urlRouteList --------------//\r",
									"//set variable to urlRouteList JSON.parse\r",
									"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
									"//---------------- set url Create --------------//\r",
									"//set global variable to url \"/api/v1/auth/signin\"\r",
									"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
									"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
									"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"pm.globals.set(\"urlThingCreateThing\", urlRouteList.Thing.urlThingCreateThing);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"pm.globals.set(\"urlThingCreateThingStateInfo\", urlRouteList.Thing.urlThingCreateThingStateInfo);\r",
									"//set global variable to url \"/api/v1/Group/CreateGroup\"\r",
									"pm.globals.set(\"urlGroupCreateGroup\", urlRouteList.Group.urlGroupCreateGroup);\r",
									"//---------------- get url Create --------------//\r",
									"//get global variable to url \"/api/v1/auth/signin\"\r",
									"var urlSignin = pm.globals.get(\"urlSignin\");\r",
									"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
									"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"var urlThingCreateThing = pm.globals.get(\"urlThingCreateThing\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"var urlThingCreateThingStateInfo = pm.globals.get(\"urlThingCreateThingStateInfo\");\r",
									"//get global variable to url \"/api/v1/Group/CreateGroup\"\r",
									"var urlGroupCreateGroup = pm.globals.get(\"urlGroupCreateGroup\");\r",
									"//---------------- set url Remove --------------//\r",
									"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
									"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"pm.globals.set(\"urlThingRemoveThing\", urlRouteList.Thing.urlThingRemoveThing);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"pm.globals.set(\"urlThingRemoveThingStateInfo\", urlRouteList.Thing.urlThingRemoveThingStateInfo);\r",
									"//set global variable to url \"/api/v1/Group/RemoveGroup\"\r",
									"pm.globals.set(\"urlGroupRemoveGroup\", urlRouteList.Group.urlGroupRemoveGroup);\r",
									"//---------------- set url Inquiry --------------//\r",
									"//set global variable to url \"/api/v1/Thing/InquiryThing\"\r",
									"pm.globals.set(\"urlThingInquiryThing\", urlRouteList.Thing.urlThingInquiryThing);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Signin_ --------------//\r",
									"//get global variable to x_ais_OrderRef \"Signin_\"\r",
									"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"var x_ais_OrderRef_CreateThing = pm.globals.get(\"x_ais_OrderRef_CreateThing\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"var x_ais_OrderDesc_CreateThing = pm.globals.get(\"x_ais_OrderDesc_CreateThing\");\r",
									"//get global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"var x_ais_OrderRef_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderRef_CreateThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"var x_ais_OrderDesc_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_CreateThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Group --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateGroup_\"\r",
									"var x_ais_OrderRef_CreateGroup = pm.globals.get(\"x_ais_OrderRef_CreateGroup\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateGroup\"\r",
									"var x_ais_OrderDesc_CreateGroup = pm.globals.get(\"x_ais_OrderDesc_CreateGroup\");\r",
									"//------------------------------------------------------------//\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            // console.log('response111',response);\r",
									"            // console.log('errerrerr',err);\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// Signin get token\r",
									" Signin = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSignin = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestSignin = {\r",
									"            mode: 'raw',\r",
									"            raw: \r",
									"            JSON.stringify({\r",
									"                username:Username,\r",
									"                password:Password\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsSignin = {\r",
									"            url: url + provisioningapis + urlSignin,\r",
									"            method: 'POST',\r",
									"            header: headersOptSignin,\r",
									"            body: httpRequestSignin\r",
									"        };\r",
									"        // console.log('request Signin');\r",
									"        let response = await reqPromise(optionsSignin);\r",
									"        let jsonDataSignin = await response.json();\r",
									"\r",
									"        // setAccessToken\r",
									"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
									"\r",
									"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // SignInProcess is Success\r",
									"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
									"        });\r",
									"\r",
									"        //set random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //set PartnerName\r",
									"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
									"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
									"        //set MerchantContact\r",
									"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
									"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
									"        // set CPID\r",
									"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
									"        pm.environment.set(\"CPID\", CPIDValue)\r",
									"        \r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreatePartner\r",
									" CreatePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreatePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreatePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
									"                \"PartnerType\": [\r",
									"                    \"Supplier\",\r",
									"                    \"Customer\"\r",
									"                ],\r",
									"                \"PartnerDetail\": {\r",
									"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
									"                    \"CPID\": pm.environment.get(\"CPID\")\r",
									"                },\r",
									"                \"Property\": {\r",
									"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsCreatePartner = {\r",
									"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreatePartner,\r",
									"            body: httpRequestCreatePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsCreatePartner);\r",
									"        let jsonDataCreatePartner = await response.json();\r",
									"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
									"    \r",
									"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreatePartner is Success\r",
									"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
									"        });\r",
									"\r",
									"        //GetResponse_PartnerId\r",
									"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
									"\r",
									"        //Accountname\r",
									"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
									"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateAccount\r",
									" CreateAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreateAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
									"                })\r",
									"        };\r",
									"        \r",
									"        let optionsCreateAccount = {\r",
									"            url: url + provisioningapis + urlAccountCreateAccount,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateAccount,\r",
									"            body: httpRequestCreateAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateAccount');\r",
									"        let response = await reqPromise(optionsCreateAccount);\r",
									"        let jsonDataCreateAccount = await response.json();\r",
									"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
									"    \r",
									"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateAccount : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateAccount is Success\r",
									"        pm.test('CreateAccount : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
									"        });\r",
									"        // GetResponse_AccountName\r",
									"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
									"        // GetResponse_AccountId\r",
									"        pm.environment.set(\"GetResponse_AccountId\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
									"       \r",
									"        // // random_IM\r",
									"        // pm.environment.set(\"random_IM\", _.random(10000000, 99999999)+\" \"+_.random(1000000, 9999999))\r",
									"        // // random_ICCID\r",
									"        // pm.environment.set(\"random_ICCID\", _.random(1000000, 9999999)+\" \"+_.random(100000, 999999))\r",
									"        // // random_number\r",
									"        // pm.environment.set(\"random_number\",pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        // //ThingName\r",
									"        // let thingNameValue = fieldDataValue.Thing.ThingNameValue; // \"Sensor_TestThingName\"\r",
									"        // pm.environment.set(\"ThingName\", thingNameValue + pm.environment.get(\"random_number\"))\r",
									"\r",
									"        // random_number\r",
									"        pm.environment.set(\"random_number\",pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"\r",
									"        for(let i=0;i<countData;i++){\r",
									"            // random_IM\r",
									"            pm.environment.set(\"random_IM\"+[i+1], _.random(10000000, 99999999)+\" \"+_.random(1000000, 9999999))\r",
									"            // random_ICCID\r",
									"            pm.environment.set(\"random_ICCID\"+[i+1], _.random(1000000, 9999999)+\" \"+_.random(100000, 999999))\r",
									"\r",
									"            //ThingName\r",
									"            let thingNameValue = fieldDataValue.Thing.ThingNameValue; // \"Sensor_TestThingName\"\r",
									"            pm.environment.set(\"ThingName\"+[i+1],thingNameValue + [i+1] + pm.environment.get(\"random_number\"))\r",
									"\r",
									"            //ThinggroupName\r",
									"            let ThingGroupNameValue = fieldDataValue.Group.ThingGroupNameValue; // \"Sensor_TestThingGroupName\"\r",
									"            pm.environment.set(\"ThingGroupName\"+[i+1],ThingGroupNameValue + [i+1] + pm.environment.get(\"random_number\"))\r",
									"        }\r",
									"            \r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThing\r",
									" CreateThingArr = async () =>  {\r",
									"    try {\r",
									"        \r",
									"        // header\r",
									"        let headersOptCreateThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThing');\r",
									"        let dataThingIdArr = [];\r",
									"        for(let i=0;i<countData;i++){\r",
									"            // body\r",
									"            let httpRequestCreateThing = {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                    \"ThingName\": pm.environment.get(\"ThingName\"+ [i+1]),\r",
									"                    \"IMEI\": pm.environment.get(\"random_IM\"+ [i+1]),\r",
									"                    \"IMSI\": pm.environment.get(\"random_IM\"+ [i+1]),\r",
									"                    \"ICCID\": pm.environment.get(\"random_ICCID\"+ [i+1]),\r",
									"                    \"RouteUrl\": fieldDataValue.Thing.RouteUrlValue , //[\"http://10.12.3.4:2019/api/information/AddInformation\"]\r",
									"                    \"RouteInfo\": {\r",
									"                        \"MIMO_ID\": fieldDataValue.Thing.RouteInfoMIMOIDValue , //\"606edada\"\r",
									"                        \"MIMO_SerialNo\": fieldDataValue.Thing.RouteInfoMIMOSerialNoValue //5466758878\r",
									"                    },\r",
									"                    \"RouteFlag\": {\r",
									"                        \"ThingName\": fieldDataValue.Thing.RouteFlagThingNameValue , //true\r",
									"                        \"ThingToken\": fieldDataValue.Thing.RouteFlagThingTokenValue, //true\r",
									"                        \"IMEI\": fieldDataValue.Thing.RouteFlagIMEIValue, //true\r",
									"                        \"ICCID\": fieldDataValue.Thing.RouteFlagICCIDValue, //true\r",
									"                        \"RouteInfo\": fieldDataValue.Thing.RouteFlagRouteInfoValue //true\r",
									"                    }\r",
									"                })\r",
									"            };\r",
									"            \r",
									"            let optionsCreateThing = {\r",
									"                url: url + provisioningapis + urlThingCreateThing,\r",
									"                method: 'POST',\r",
									"                header: headersOptCreateThing,\r",
									"                body: httpRequestCreateThing\r",
									"            };\r",
									"            let response = await reqPromise(optionsCreateThing);\r",
									"            let jsonDataCreateThing = await response.json();\r",
									"            let ThingId = await jsonDataCreateThing.ThingInfo.ThingId;\r",
									"            dataThingIdArr.push(ThingId);\r",
									"            let operationStatusCreateThing = await jsonDataCreateThing.OperationStatus;\r",
									"\r",
									"            //201\r",
									"            pm.test(\"CreateThing\"+ [i+1]+ \" : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"                pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"            });\r",
									"            //20100\r",
									"            pm.test('CreateThing'+ [i+1]+ ' : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"                pm.expect(operationStatusCreateThing).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"            });\r",
									"            //CreateThing is Success\r",
									"            pm.test('CreateThing'+ [i+1]+ ' : OperationStatus Description is '+'\"'+ resultDescriptionCreateThing+'\"', function () {\r",
									"                pm.expect(operationStatusCreateThing).to.have.property('Description', resultDescriptionCreateThing);\r",
									"            });\r",
									"        }\r",
									"        \r",
									"        // console.log('dataThingIdArr',dataThingIdArr);\r",
									"        // pm.environment.set(\"GetResponse_ThingID\",jsonDataCreateThing.ThingInfo.ThingId)\r",
									"        pm.environment.set(\"GetResponse_ThingIDArr\",JSON.stringify(dataThingIdArr))\r",
									"\r",
									"        //Get Random Sensor \r",
									"        pm.environment.set(\"random_Sensor\", _.random(100, 999))\r",
									"\r",
									"        //Get Random Sensor Control\r",
									"        pm.environment.set(\"random_Sensor_Control\", _.random(100, 999))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThingStateInfo\r",
									" CreateThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let dataThingIDArray = JSON.parse(pm.environment.get(\"GetResponse_ThingIDArr\"));\r",
									"        // console.log('dataThingIDArray',dataThingIDArray);\r",
									"\r",
									"        // {\"Temp\" : pm.environment.get(\"random_Sensor\")}\r",
									"        let sensorValue = {};\r",
									"        sensorValue[fieldDataValue.CreateThingStateInfo.SensorKey] = pm.environment.get(\"random_Sensor\");\r",
									"        // console.log('sensorValue',sensorValue);\r",
									"        \r",
									"        let httpRequestCreateThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": dataThingIDArray,\r",
									"                \"Type\": fieldDataValue.CreateThingStateInfo.Type_Report,\r",
									"                \"Sensor\": sensorValue\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingCreateThingStateInfo,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThingStateInfo,\r",
									"            body: httpRequestCreateThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThingStateInfo');\r",
									"        let response = await reqPromise(optionsCreateThingStateInfo);\r",
									"\r",
									"        let jsonDataCreateThingStateInfo = await response.json();\r",
									"        let operationStatusCreateThingStateInfo = await jsonDataCreateThingStateInfo.OperationStatus;\r",
									"        // console.log('operationStatusCreateThingStateInfo',operationStatusCreateThingStateInfo);\r",
									"\r",
									"        //200\r",
									"        pm.test(\"CreateThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //CreateThingStateInfo is Success\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionCreateThingStateInfo+'\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Description', resultDescriptionCreateThingStateInfo);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThingGroup\r",
									" CreateThingGroupArr = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThingGroup = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateGroup + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateGroup,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        let dataThingIDArray = JSON.parse(pm.environment.get(\"GetResponse_ThingIDArr\"));\r",
									"\r",
									"        // console.log('dataThingIDArray',dataThingIDArray);\r",
									"        let dataThingGroupIdArr = [];\r",
									"        for(let i=0;i<countData;i++){\r",
									"            // body\r",
									"            let httpRequestCreateThingGroup = {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                        \"ThingGroupName\": pm.environment.get(\"ThingGroupName\"+ [i+1]),\r",
									"                        \"ThingId\": dataThingIDArray\r",
									"                        })\r",
									"            };\r",
									"             let optionsCreateThingGroup = {\r",
									"                url: url + provisioningapis + urlGroupCreateGroup,\r",
									"                method: 'POST',\r",
									"                header: headersOptCreateThingGroup,\r",
									"                body: httpRequestCreateThingGroup\r",
									"            };\r",
									"\r",
									"            // console.log('request CreateThingGroup');\r",
									"            let response = await reqPromise(optionsCreateThingGroup);\r",
									"\r",
									"            let jsonDataCreateThingGroup = await response.json();\r",
									"            let operationStatusCreateThingGroup = await jsonDataCreateThingGroup.OperationStatus;\r",
									"        \r",
									"            //200\r",
									"            pm.test(\"CreateThingGroup\"+ [i+1]+ \" : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"                pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"            });\r",
									"            //20000\r",
									"            pm.test('CreateThingGroup'+ [i+1]+ ' : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"                pm.expect(operationStatusCreateThingGroup).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"            });\r",
									"            //CreateThingGroup is Success\r",
									"            pm.test('CreateThingGroup'+ [i+1]+ ' : OperationStatus Description is '+'\"'+ resultDescriptionCreateGroup+'\"', function () {\r",
									"                pm.expect(operationStatusCreateThingGroup).to.have.property('Description', resultDescriptionCreateGroup);\r",
									"            });\r",
									"\r",
									"            dataThingGroupIdArr.push(jsonDataCreateThingGroup.GroupInfo.GroupId);\r",
									"            \r",
									"        }\r",
									"            // console.log('dataThingGroupIdArr',dataThingGroupIdArr);\r",
									"            // GetResponse_ThingGroupID\r",
									"            pm.environment.set(\"GetResponse_ThingGroupIDArr\",JSON.stringify(dataThingGroupIdArr));\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"Signin();\r",
									"setTimeout(async function(){await CreatePartner();}, 3000); \r",
									"setTimeout(async function(){await CreateAccount();}, 6000); \r",
									"setTimeout(async function(){await CreateThingArr();}, 8000); \r",
									"setTimeout(async function(){await CreateThingStateInfo();}, 20000); \r",
									"setTimeout(async function(){await CreateThingGroupArr();}, 30000); \r",
									"setTimeout(async function(){}, 35000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-ais-OrderRef",
								"value": "{{x_ais_OrderRef_ControlThingGroups}}{{current_timestamp}}"
							},
							{
								"key": "x-ais-AccountKey",
								"value": "{{GetResponse_AccountId}}",
								"type": "text"
							},
							{
								"key": "x-ais-AccessToken",
								"value": "{{Bearer}} {{AccessToken}}"
							},
							{
								"key": "Accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"ThingGroupId\": {{GetResponse_ThingGroupIDArr}},\r\n  \"Sensors\": {\r\n    \"{{SensorKey}}\": {{random_Sensor_Control}}\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{url}}{{mg4controlapis}}/api/v1/Control/ThingGroups",
							"host": [
								"{{url}}{{mg4controlapis}}"
							],
							"path": [
								"api",
								"v1",
								"Control",
								"ThingGroups"
							]
						},
						"description": "Type:Desire"
					},
					"response": []
				},
				{
					"name": "ControlThingGroups_TST_F4_1_1_002_Success_SenSorHasPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" const moment = require('moment');\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//count for loop data\r",
									"var countData = 2;\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to xAisOrderRef \"RemoveThing_\"\r",
									"var x_ais_OrderRef_RemoveThing = pm.globals.get(\"x_ais_OrderRef_RemoveThing\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"var x_ais_OrderDesc_RemoveThing = pm.globals.get(\"x_ais_OrderDesc_RemoveThing\");\r",
									"//get global variable to xAisOrderRef \"InquiryThing_\"\r",
									"var x_ais_OrderRef_InquiryThing = pm.globals.get(\"x_ais_OrderRef_InquiryThing\");\r",
									"//get global variable to x_ais_OrderDesc \"InquiryThing\"\r",
									"var x_ais_OrderDesc_InquiryThing = pm.globals.get(\"x_ais_OrderDesc_InquiryThing\");\r",
									"//get global variable to x_ais_OrderRef \"RemoveThingStateInfo_\"\r",
									"var x_ais_OrderDesc_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_RemoveThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThingStateInfo\"\r",
									"var x_ais_OrderRef_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderRef_RemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Group --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveGroup_\"\r",
									"var x_ais_OrderRef_RemoveGroup = pm.globals.get(\"x_ais_OrderRef_RemoveGroup\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveGroup\"\r",
									"var x_ais_OrderDesc_RemoveGroup = pm.globals.get(\"x_ais_OrderDesc_RemoveGroup\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Control --------------//\r",
									"//get global variable to x_ais_OrderRef \"ControlThingGroups_\"\r",
									"var x_ais_OrderRef_ControlThingGroups = pm.globals.get(\"x_ais_OrderRef_ControlThingGroups\");\r",
									"//get global variable to x_ais_OrderRef \"ControlThingGroupsfail_\"\r",
									"var x_ais_OrderRef_ControlThingGroups_fail = pm.globals.get(\"x_ais_OrderRef_ControlThingGroups_fail\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get url Remove --------------//\r",
									"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
									"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"var urlThingRemoveThing = pm.globals.get(\"urlThingRemoveThing\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"var urlThingRemoveThingStateInfo = pm.globals.get(\"urlThingRemoveThingStateInfo\");\r",
									"//get global variable to url \"/api/v1/Group/RemoveGroup\"\r",
									"var urlGroupRemoveGroup = pm.globals.get(\"urlGroupRemoveGroup\");\r",
									"//---------------- get url Inquiry --------------//\r",
									"//get global variable to url \"/api/v1/Thing/InquiryThingr\"\r",
									"var urlThingInquiryThing = pm.globals.get(\"urlThingInquiryThing\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"RemovePartner is Success\"\r",
									"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
									"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
									"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
									"//get global variable to resultDescription \"RemoveThing is Success\"\r",
									"var resultDescriptionRemoveThing = pm.globals.get(\"resultDescriptionRemoveThing\");\r",
									"//get global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"var resultDescriptionRemoveThingStateInfo = pm.globals.get(\"resultDescriptionRemoveThingStateInfo\");\r",
									"//get global variable to resultDescription \"RemoveGroup is Success\"\r",
									"var resultDescriptionRemoveGroup = pm.globals.get(\"resultDescriptionRemoveGroup\");\r",
									"//get global variable to resultDescription \"InquiryThing is Success\"\r",
									"var resultDescriptionInquiryThing = pm.globals.get(\"resultDescriptionInquiryThing\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to resultDescription \"ControlManyGroups is Success\"\r",
									"// var resultDescriptionSuccessControlManyGroups = pm.globals.get(\"resultDescriptionSuccessControlManyGroups\");\r",
									"//get global variable to resultDescription \"The requested operation was successfully.\"\r",
									"var resultDescriptionTheRequestedOperationWasSuccessfully = pm.globals.get(\"resultDescriptionTheRequestedOperationWasSuccessfully\");\r",
									"//------------------------------------------------------------//\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"ControlThingGroups : Status code is \" + statusCodeSuccess, function () {\r",
									"    pm.response.to.have.status(statusCodeSuccess);\r",
									"});\r",
									"\r",
									"pm.test('ControlThingGroups : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeSuccess);\r",
									"});\r",
									"\r",
									"pm.test('ControlThingGroups : OperationStatus DeveloperMessage is '+'\"'+ resultDescriptionTheRequestedOperationWasSuccessfully+'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"});\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// RemovePartner\r",
									" RemovePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemovePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemovePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemovePartner = {\r",
									"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemovePartner,\r",
									"            body: httpRequestRemovePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request RemovePartner');\r",
									"        let response = await reqPromise(optionsRemovePartner);\r",
									"        let jsonDataRemovePartner = await response.json();\r",
									"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
									"    \r",
									"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemovePartner is Success\r",
									"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveAccount\r",
									" RemoveAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemoveAccount = {\r",
									"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveAccount,\r",
									"            body: httpRequestRemoveAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveAccount');\r",
									"        let response = await reqPromise(optionsRemoveAccount);\r",
									"        let jsonDataRemoveAccount = await response.json();\r",
									"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
									"    \r",
									"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveAccount is Success\r",
									"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThing\r",
									" RemoveThing = async () =>  {\r",
									"    try {\r",
									"\r",
									"        // header\r",
									"        let headersOptRemoveThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        let dataThingIDArray = JSON.parse(pm.environment.get(\"GetResponse_ThingIDArr\"));\r",
									"\r",
									"        for(let i=0;i<countData;i++){\r",
									"\r",
									"            // body\r",
									"            let httpRequestRemoveThing = {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                    \"ThingId\": dataThingIDArray[i]\r",
									"                })\r",
									"            };\r",
									"\r",
									"            let optionsRemoveThing = {\r",
									"                url: url + provisioningapis + urlThingRemoveThing,\r",
									"                method: 'DELETE',\r",
									"                header: headersOptRemoveThing,\r",
									"                body: httpRequestRemoveThing\r",
									"            };\r",
									"            // console.log('request RemoveThing');\r",
									"            let response = await reqPromise(optionsRemoveThing);\r",
									"            let jsonDataRemoveThing = await response.json();\r",
									"            // console.log('jsonDataRemoveThing',jsonDataRemoveThing)\r",
									"        \r",
									"            let operationStatusRemoveThing = await jsonDataRemoveThing.OperationStatus;\r",
									"\r",
									"            //200\r",
									"            pm.test(\"RemoveThing\" + [i+1]+ \" : Status code is \" + statusCodeSuccess, function () {\r",
									"                pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"            });\r",
									"            //20000\r",
									"            pm.test('RemoveThing' + [i+1]+ ' : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"                pm.expect(operationStatusRemoveThing).to.have.property('Code', resultCodeSuccess);\r",
									"            });\r",
									"            //RemoveThing is Success\r",
									"            pm.test('RemoveThing' + [i+1]+ ' : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThing+'\"', function () {\r",
									"                pm.expect(operationStatusRemoveThing).to.have.property('Description', resultDescriptionRemoveThing);\r",
									"            });\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThingStateInfo\r",
									"RemoveThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"\r",
									"        let dataThingIDArray = JSON.parse(pm.environment.get(\"GetResponse_ThingIDArr\"));\r",
									"        // console.log('dataThingIDArray',dataThingIDArray);\r",
									"        for(let i=0;i<dataThingIDArray.length;i++){\r",
									"        \r",
									"            // body\r",
									"            let httpRequestRemoveThingStateInfo = {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                    \"ThingId\": dataThingIDArray[i],\r",
									"                    \"stateType\": fieldDataValue.CreateThingStateInfo.Type_Report, //Report\r",
									"                    \"stateKey\": fieldDataValue.CreateThingStateInfo.SensorKey //Temp\r",
									"                })\r",
									"            };\r",
									"\r",
									"            let optionsRemoveThingStateInfo = {\r",
									"                url: url + provisioningapis + urlThingRemoveThingStateInfo,\r",
									"                method: 'DELETE',\r",
									"                header: headersOptRemoveThingStateInfo,\r",
									"                body: httpRequestRemoveThingStateInfo\r",
									"            };\r",
									"\r",
									"            // console.log('response RemoveThingStateInfo');\r",
									"            let response = await reqPromise(optionsRemoveThingStateInfo);\r",
									"            let jsonDataRemoveThingStateInfo = await response.json();\r",
									"            // console.log('jsonDataRemoveThingStateInfo',jsonDataRemoveThingStateInfo)\r",
									"        \r",
									"            let operationStatusRemoveThingStateInfo = await jsonDataRemoveThingStateInfo.OperationStatus;\r",
									"\r",
									"            //200\r",
									"            pm.test(\"RemoveThingStateInfo\" + [i+1]+ \" : Status code is \" + statusCodeSuccess, function () {\r",
									"                pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"            });\r",
									"            //20000\r",
									"            pm.test('RemoveThingStateInfo' + [i+1]+ ' : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"                pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"            });\r",
									"            //RemoveThingStateInfo is Success\r",
									"            pm.test('RemoveThingStateInfo' + [i+1]+ ' : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThingStateInfo+'\"', function () {\r",
									"                pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Description', resultDescriptionRemoveThingStateInfo);\r",
									"            });\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveGroup\r",
									" RemoveGroup = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveGroup = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveGroup + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveGroup,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"            \r",
									"        };\r",
									"\r",
									"        let dataThingGroupIDArray = JSON.parse(pm.environment.get(\"GetResponse_ThingGroupIDArr\"));\r",
									"\r",
									"        for(let i=0;i<dataThingGroupIDArray.length;i++){\r",
									"        \r",
									"            // body\r",
									"            let httpRequestRemoveGroup = {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                    \"GroupId\": dataThingGroupIDArray[i]\r",
									"                })\r",
									"            };\r",
									"\r",
									"            let optionsRemoveGroup = {\r",
									"                url: url + provisioningapis + urlGroupRemoveGroup,\r",
									"                method: 'DELETE',\r",
									"                header: headersOptRemoveGroup,\r",
									"                body: httpRequestRemoveGroup\r",
									"            };\r",
									"\r",
									"            // console.log('response RemoveGroup');\r",
									"            let response = await reqPromise(optionsRemoveGroup);\r",
									"            let jsonDataRemoveGroup = await response.json();\r",
									"            // console.log('jsonDataRemoveThing',jsonDataRemoveGroup)\r",
									"        \r",
									"            let operationStatusRemoveGroup = await jsonDataRemoveGroup.OperationStatus;\r",
									"\r",
									"            //200\r",
									"            pm.test(\"RemoveGroup\" + [i+1]+ \" : Status code is \" + statusCodeSuccess, function () {\r",
									"                pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"            });\r",
									"            //20000\r",
									"            pm.test('RemoveGroup' + [i+1]+ ' : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"                pm.expect(operationStatusRemoveGroup).to.have.property('Code', resultCodeSuccess);\r",
									"            });\r",
									"            //RemoveGroup is Success\r",
									"            pm.test('RemoveGroup' + [i+1]+ ' : OperationStatus Description is '+'\"'+ resultDescriptionRemoveGroup+'\"', function () {\r",
									"                pm.expect(operationStatusRemoveGroup).to.have.property('Description', resultDescriptionRemoveGroup);\r",
									"            });\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"//---------------- LogDefaultValue --------------//\r",
									"//set variable to LogDefaultValue JSON.parse\r",
									"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
									"// console.log('LogDefaultValue',LogDefaultValue);\r",
									"//---------------- set globals Other --------------//\r",
									"var SearchLog = LogDefaultValue.SearchLog;\r",
									"// console.log('SearchLog',SearchLog);\r",
									"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
									"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
									"var kbn_version = SearchLog.header.kbn_version;\r",
									"var authorization = SearchLog.header.Authorization;\r",
									"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
									"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
									"var namespace = LogDefaultValue.Other.namespace_control4mg;\r",
									"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
									"var header_x_ais_accountkey = LogDefaultValue.Other.header_x_ais_accountkey;\r",
									"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
									"var methodPost = LogDefaultValue.Other.methodPost;\r",
									"\r",
									"// Detail\r",
									"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
									"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
									"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
									"\r",
									"// Summary\r",
									"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
									"// ControlAPIs\r",
									"var applicationName = LogDefaultValue.Control.applicationName_mg4;\r",
									"var cmdName = LogDefaultValue.Control.cmdNameThingGroups;\r",
									"// var resultDesc = LogDefaultValue.Control.resultDescThing_success;\r",
									"var endPointNameControlAPIs = LogDefaultValue.Control.endPointNameControlAPIs;\r",
									"var endPointNameDesireEx = LogDefaultValue.Control.endPointNameDesireEx;\r",
									"var endPointNameRabbitMQ = LogDefaultValue.Control.endPointNameRabbitMQ;\r",
									"var containerId = LogDefaultValue.Control.containerId;\r",
									"var requestObjectUrlStaging = LogDefaultValue.Control.requestObjectUrlStagingThingGroups;\r",
									"var xProtocolControl = LogDefaultValue.Control.xProtocolControl;\r",
									"var responseObjectPublished = LogDefaultValue.Control.responseObjectPublished;\r",
									"\r",
									"// Check CDR (Summary Log) and EDR (Detail Log)\r",
									"SearchLogFindTid = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSearchLogFindTid = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        // let valueSearch = pm.environment.get(\"GetResponse_ThingID\"); \r",
									"        let valueSearch = x_ais_OrderRef_ControlThingGroups +  current_timestamp; \r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestSearchLogFindTid = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"\r",
									"        let optionsSearchLogFindTid = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptSearchLogFindTid,\r",
									"            body: httpRequestSearchLogFindTid\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsSearchLogFindTid);\r",
									"        let jsonDataSearchLogFindTid = await response.json();\r",
									"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
									"        console.log('hits',hits)\r",
									"  \r",
									"        // find tid\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            // let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"        \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            if(applicationNameValue == applicationName){\r",
									"                // let tid = hits[i]._source.cauldron.tid;\r",
									"                // pm.environment.set(\"tid\", tid);\r",
									"                let sessionId = hits[i]._source.cauldron.sessionId;\r",
									"                pm.environment.set(\"sessionId\", sessionId);\r",
									"                break;\r",
									"           }\r",
									"        }\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"CheckLog = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCheckLog = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = pm.environment.get(\"sessionId\");\r",
									"\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestCheckLog = {\r",
									"            mode: 'raw',\r",
									"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"        let optionsCheckLog = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptCheckLog,\r",
									"            body: httpRequestCheckLog\r",
									"        }; \r",
									"        let response = await reqPromise(optionsCheckLog);\r",
									"        let jsonDataCheckLog = await response.json();\r",
									"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
									"        \r",
									"        // //200\r",
									"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });     \r",
									"        \r",
									"        let hits = jsonDataCheckLog.hits.hits\r",
									"        console.log('hits',hits)\r",
									"  \r",
									"        // find logType\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            //  let logType = hits[i]._source.cauldron.logType\r",
									"            let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"           \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            \r",
									"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
									"            // console.log('resultDataLog',resultDataLog)\r",
									"\r",
									"            let tidControl = x_ais_OrderRef_ControlThingGroups + current_timestamp;\r",
									"            // console.log(tidControl);\r",
									"            if(applicationNameValue == applicationName){\r",
									"                 \r",
									"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ControlAPIs\r",
									"                    pm.test(\"Check Summary Log : ControlThingGroups\" , function () {\r",
									"                        console.log(\"======== Check Summary Log ( Expected = Actual) [ControlThingGroups] ==================\");\r",
									"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
									"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
									"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeSuccess);\r",
									"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
									"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        // console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
									"                        // console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
									"                        \r",
									"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
									"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
									"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeSuccess); \r",
									"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionTheRequestedOperationWasSuccessfully); \r",
									"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
									"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"\r",
									"                        let thingGroupId = JSON.parse(pm.environment.get(\"GetResponse_ThingGroupIDArr\"));\r",
									"                        let customUrl= urlCheckLog + requestObjectUrlStaging;\r",
									"                        let customAccountkey = pm.environment.get(\"GetResponse_AccountId\");\r",
									"\r",
									"                        // check identity\r",
									"                        // \"identity\":\"{\\\"ThingGroupsID\\\":[\\\"6013763596d0ed0001f59626\\\",\\\"6013763596d0ed0001f5962c\\\"]\"}\"\r",
									"                        let dataSummaryIdentity = JSON.parse(resultDataLog.identity);\r",
									"\r",
									"                        console.log(\"identity.ThingGroupID : [\" + dataSummaryIdentity.ThingGroupID + \"] = [\" + thingGroupId + \"]\");\r",
									"                        pm.expect(dataSummaryIdentity.ThingGroupID).to.eql(thingGroupId); \r",
									"\r",
									"                        // check custom\r",
									"                        // \\\"custom\\\":{ \\\"customData\\\":{ \\\"url\\\":\\\"mg-iot.sandais.com/api/v1/Control/ThingGroups\\\", \\\"accountkey\\\":\\\"609a033526fdbc0001c3f016\\\", \\\"ThingGroupID\\\":[ \\\"609a035726fdbc0001c3f037\\\", \\\"609a035726fdbc0001c3f03f\\\" ] }, \\\"endPointSummary\\\":[ { \\\"no\\\":\\\"1\\\", \\\"endPointName\\\":\\\"db.AuthenticationCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:Inquiry was Success\\\", \\\"processTime\\\":0.0002 }, { \\\"no\\\":\\\"2\\\", \\\"endPointName\\\":\\\"db.ClientsCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:Inquiry was Success\\\", \\\"processTime\\\":0.0005 }, { \\\"no\\\":\\\"3\\\", \\\"endPointName\\\":\\\"db.AccountsCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:Inquiry was Success\\\", \\\"processTime\\\":0.0002 }, { \\\"no\\\":\\\"4\\\", \\\"endPointName\\\":\\\"db.GroupsCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:Inquiry was Success\\\", \\\"processTime\\\":0.0002 }, { \\\"no\\\":\\\"5\\\", \\\"endPointName\\\":\\\"db.ThingsCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:Inquiry was Success\\\", \\\"processTime\\\":0.0002 }, { \\\"no\\\":\\\"6\\\", \\\"endPointName\\\":\\\"db.ThingsCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:Inquiry was Success\\\", \\\"processTime\\\":0.0002 } ] }\r",
									"\r",
									"                        let customData = resultDataLog.custom.customData\r",
									"\r",
									"                        console.log(\"custom.url : \" + customData.url + \" = \" + customUrl);\r",
									"                        console.log(\"custom.accountkey : \" + customData.accountkey + \" = \" + customAccountkey);\r",
									"                        console.log(\"custom.ThingGroupID : [\" + customData.ThingGroupID + \"] = [\" + thingGroupId + \"]\");\r",
									"\r",
									"                        pm.expect(customData.url).to.eql(customUrl); \r",
									"                        pm.expect(customData.accountkey).to.eql(customAccountkey); \r",
									"                        pm.expect(customData.ThingGroupID).to.eql(thingGroupId); \r",
									"\r",
									"                        let custom = resultDataLog.custom.endPointSummary;\r",
									"                        let countCustom = custom.length;\r",
									"                       \r",
									"                        // [\"db.AuthenticationCollection\",\"db.ClientsCollection\",\"db.AccountsCollection\",\"db.GroupsCollection\",\"db.ThingsCollection\",\"db.ThingsCollection\"]\r",
									"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_ControlThingGroups;\r",
									"                        // [\"20000:Inquiry was Success\",\"20000:Inquiry was Success\",\"20000:Inquiry was Success\",\"20000:Inquiry was Success\",\"20000:Inquiry was Success\",\"20000:Inquiry was Success\"]\r",
									"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_ControlThingGroups;\r",
									"                        let countCustomStep = dataEndPointName.length;\r",
									"\r",
									"                        console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep);\r",
									"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
									"                        \r",
									"                        for(let i=0;i<countCustomStep;i++){\r",
									"                            let no = custom[i].no;\r",
									"                            let valueEndPointName = custom[i].endPointName;\r",
									"                            let valueResponseStatus = custom[i].responseStatus;\r",
									"                            // console.log(\"i\",i);\r",
									"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
									"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
									"\r",
									"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString());\r",
									"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i]);\r",
									"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i]);\r",
									"\r",
									"                            pm.expect(no).to.eql((i+1).toString()); \r",
									"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
									"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]); \r",
									"                        }\r",
									"                    }); \r",
									"                }\r",
									"\r",
									"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ControlAPIs\r",
									"\r",
									"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
									"                    // console.log('endPointNameValue ',endPointNameValue)\r",
									"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [ControlThingGroups]\", function () {\r",
									"                        console.log(\"======== Check Detail Log ( Expected = Actual) [ControlThingGroups] ==================\");\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
									"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
									"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
									"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
									"\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
									"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
									"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
									"\r",
									"                        let url = requestObjectUrlStaging; \r",
									"                        let urlCustom = urlCheckLog + requestObjectUrlStaging; \r",
									"                        let SensorKey = fieldDataValue.CreateThingStateInfo.SensorKey;\r",
									"                        let sensor = pm.environment.get(\"random_Sensor_Control\");\r",
									"                        let x_ais_orderref = x_ais_OrderRef_ControlThingGroups + current_timestamp;\r",
									"                        let x_ais_AccountKey = pm.environment.get(\"GetResponse_AccountId\");\r",
									"                        let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken\");\r",
									"                        let thingGroupId = JSON.parse(pm.environment.get(\"GetResponse_ThingGroupIDArr\"));\r",
									"                        let x_protocol = xProtocolControl;\r",
									"\r",
									"                        // if( endPointNameValue == endPointNameControlAPIs){     //\"endPointName\":\"ControlAPIs\"\r",
									"                        if( endPointNameValue == undefined){    //\"endPointName\":undefined\r",
									"\r",
									"                            console.log(\"custom1.endPointName : \" + resultDataLog.custom1.endPointName + \" = \" + undefined);\r",
									"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(undefined); \r",
									"\r",
									"                            // check requestObject\r",
									"                            // \"requestObject\":\"{\\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Control/ThingGroups\\\",\\\"method\\\":\\\"POST\\\",\\\"headers\\\":{\\\"x-ais-orderref\\\":\\\"ControlThingGroups_202101290901653\\\",\\\"x-ais-accountkey\\\":\\\"60114adca32e8c0001576d22\\\",\\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAGhfn1wJCmf68Vf1zYxZ/fak0lmQ84nNnLsXbdYpFNnXEIlAkkY2KW0\\\"},\\\"body\\\":{\\\"ThingGroupId\\\":[\\\"6013763596d0ed0001f59626\\\",\\\"6013763596d0ed0001f5962c\\\"] ,\\\"Sensors\\\":{\\\"Temp\\\":955}}}\"\r",
									"\r",
									"                            // \\\"requestObject\\\":\\\"{ \\\\\\\"url\\\\\\\":\\\\\\\"/api/v1/Control/ThingGroups\\\\\\\", \\\\\\\"method\\\\\\\":\\\\\\\"POST\\\\\\\", \\\\\\\"headers\\\\\\\":{ \\\\\\\"Cache-Control\\\\\\\":\\\\\\\"no-cache\\\\\\\", \\\\\\\"Content-Type\\\\\\\":\\\\\\\"application/json\\\\\\\", \\\\\\\"Accept\\\\\\\":\\\\\\\"*/*\\\\\\\", \\\\\\\"Accept-Encoding\\\\\\\":\\\\\\\"gzip, deflate, br\\\\\\\", \\\\\\\"Host\\\\\\\":\\\\\\\"mg-iot.sandais.com\\\\\\\", \\\\\\\"User-Agent\\\\\\\":\\\\\\\"PostmanRuntime/7.26.8\\\\\\\", \\\\\\\"Content-Length\\\\\\\":\\\\\\\"118\\\\\\\", \\\\\\\"x-real-ip\\\\\\\":\\\\\\\"182.232.14.198\\\\\\\", \\\\\\\"x-forwarded-for\\\\\\\":\\\\\\\"182.232.14.198, 10.233.68.0\\\\\\\", \\\\\\\"x-forwarded-proto\\\\\\\":\\\\\\\"http\\\\\\\", \\\\\\\"x-ais-orderref\\\\\\\":\\\\\\\"ControlThingGroups_202105111105595\\\\\\\", \\\\\\\"x-ais-accountkey\\\\\\\":\\\\\\\"609a033526fdbc0001c3f016\\\\\\\", \\\\\\\"x-ais-accesstoken\\\\\\\":\\\\\\\"Bearer ibnxnVhs5Rx3IwglWv7/gVA/1TpQnKqAOBAADlRDvYhOpXwmlpYOEb5yfY5aZpoj0YRWRZM26i9HOqtc1fc1jpNDOK5JpISttmMEy59g2py7nLWonDe2YW2OPRGWSowk6+9ZihLU1fZ5d5jAqqrZaKlOAAI3N1TXDNLsHuKcOJMcERbCcaMqRaku+MY4/kzE+eyIdkfwwbjT91S2VQq+Wk2ooMWuLk6/DHVJhwbMP7aJvAm4KG8JKSNC6L62rLZ8KBmXFBYt/0BKVegMrc8SMg==\\\\\\\", \\\\\\\"postman-token\\\\\\\":\\\\\\\"34ae15af-cc19-48b6-8979-8a4ea3a9c264\\\\\\\", \\\\\\\"x-envoy-external-address\\\\\\\":\\\\\\\"10.233.68.0\\\\\\\", \\\\\\\"x-request-id\\\\\\\":\\\\\\\"f8a9927f-f237-4f61-aeea-b9119196916f\\\\\\\", \\\\\\\"x-envoy-original-path\\\\\\\":\\\\\\\"/mg4controlapis/api/v1/Control/ThingGroups\\\\\\\", \\\\\\\"x-b3-traceid\\\\\\\":\\\\\\\"351b2bf0ad4c19832d333588842e3f3c\\\\\\\", \\\\\\\"x-b3-spanid\\\\\\\":\\\\\\\"370ee4e7ca55e4f2\\\\\\\", \\\\\\\"x-b3-parentspanid\\\\\\\":\\\\\\\"2d333588842e3f3c\\\\\\\", \\\\\\\"x-b3-sampled\\\\\\\":\\\\\\\"0\\\\\\\", \\\\\\\"x-ais-SessionId\\\\\\\":\\\\\\\"1620706140755\\\\\\\", \\\\\\\"identity\\\\\\\":\\\\\\\"{ \\\\\\\\\\\\\\\"ThingGroupID\\\\\\\\\\\\\\\":[ \\\\\\\\\\\\\\\"609a035726fdbc0001c3f037\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"609a035726fdbc0001c3f03f\\\\\\\\\\\\\\\" ] }\\\\\\\", \\\\\\\"custom\\\\\\\":\\\\\\\"{ \\\\\\\\\\\\\\\"url\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"mg-iot.sandais.com/api/v1/Control/ThingGroups\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"accountkey\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"609a033526fdbc0001c3f016\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"ThingGroupID\\\\\\\\\\\\\\\":[ \\\\\\\\\\\\\\\"609a035726fdbc0001c3f037\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"609a035726fdbc0001c3f03f\\\\\\\\\\\\\\\" ] }\\\\\\\" }, \\\\\\\"queryString\\\\\\\":{ }, \\\\\\\"routeParamteters\\\\\\\":{ }, \\\\\\\"body\\\\\\\":{ \\\\\\\"ThingGroupId\\\\\\\":[ \\\\\\\"609a035726fdbc0001c3f037\\\\\\\", \\\\\\\"609a035726fdbc0001c3f03f\\\\\\\" ], \\\\\\\"Sensors\\\\\\\":{ \\\\\\\"Temp\\\\\\\":227 } } }\\\"\r",
									"                            \r",
									"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
									"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
									"\r",
									"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
									"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
									"                            console.log(\"headers.x_ais_AccountKey : \" + jsonParseRequestObject.headers[header_x_ais_accountkey] + \" = \" + x_ais_AccountKey);\r",
									"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
									"                            \r",
									"                            pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
									"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accountkey]).to.eql(x_ais_AccountKey);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
									"\r",
									"                            let identity = JSON.parse(jsonParseRequestObject.headers.identity)\r",
									"                            console.log(\"headers.identity.ThingGroupID : [\" + identity.ThingGroupID + \"] = [\" + thingGroupId + \"]\");\r",
									"                            pm.expect(identity.ThingGroupID).to.eql(thingGroupId);\r",
									"                            \r",
									"                            let custom = JSON.parse(jsonParseRequestObject.headers.custom)\r",
									"                            console.log(\"headers.custom.url : \" + custom.url + \" = \" + urlCustom);\r",
									"                            console.log(\"headers.custom.accountkey : \" + custom.accountkey + \" = \" + x_ais_AccountKey);\r",
									"                            console.log(\"headers.custom.ThingGroupID : [\" + custom.ThingGroupID + \"] = [\" + thingGroupId + \"]\");\r",
									"                            \r",
									"                            pm.expect(custom.url).to.eql(urlCustom);\r",
									"                            pm.expect(custom.accountkey).to.eql(x_ais_AccountKey);\r",
									"                            pm.expect(custom.ThingGroupID).to.eql(thingGroupId);\r",
									"\r",
									"                            console.log(\"queryString : \" + JSON.stringify(jsonParseRequestObject.queryString) + \" = \" + JSON.stringify({}));\r",
									"                            pm.expect(jsonParseRequestObject.queryString).to.eql({});\r",
									"\r",
									"                            console.log(\"routeParamteters : \" + JSON.stringify(jsonParseRequestObject.routeParamteters) + \" = \" + JSON.stringify({}));\r",
									"                            pm.expect(jsonParseRequestObject.routeParamteters).to.eql({});\r",
									"\r",
									"                            console.log(\"resquest.body.ThingGroupId : [\" + jsonParseRequestObject.body.ThingGroupId + \"] = [\" + thingGroupId + \"]\");\r",
									"                            console.log(\"resquest.body.Sensors.\" + SensorKey + \"  : \" + jsonParseRequestObject.body.Sensors[SensorKey] + \" = \" + sensor);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.body.ThingGroupId).to.eql(thingGroupId);\r",
									"                            pm.expect(jsonParseRequestObject.body.Sensors[SensorKey]).to.eql(sensor);\r",
									"\r",
									"                            // check responseObject\r",
									"                            // \\\"responseObject\\\":\\\"{ \\\\\\\"OperationStatus\\\\\\\":{ \\\\\\\"Code\\\\\\\":\\\\\\\"20000\\\\\\\", \\\\\\\"DeveloperMessage\\\\\\\":\\\\\\\"The requested operation was successfully.\\\\\\\" } }\\\"\r",
									"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
									"                            // console.log('jsonParseResponseObject',jsonParseResponseObject);\r",
									"\r",
									"                            console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeSuccess);\r",
									"                            console.log(\"response.OperationStatus.DeveloperMessage : \" + jsonParseResponseObject.OperationStatus.DeveloperMessage + \" = \" + resultDescriptionTheRequestedOperationWasSuccessfully);\r",
									"\r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeSuccess);  \r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheRequestedOperationWasSuccessfully);  \r",
									"                        }\r",
									"\r",
									"                        // if( endPointNameValue == endPointNameDesireEx){\r",
									"                        if( endPointNameValue == endPointNameRabbitMQ){\r",
									"\r",
									"                            console.log(\"custom1.endPointName : \" + resultDataLog.custom1.endPointName + \" = \" + endPointNameRabbitMQ);\r",
									"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameRabbitMQ);  \r",
									"\r",
									"                            // check requestObject\r",
									"                            // \"requestObject\":\"{\\\"RoutingKey\\\":\\\"desire.pub.v1.15ef8559-0a9a-4ae8-a643-4ecc5f3321b2\\\",\\\"Payload\\\":\\\"{\\\\\\\"Temp\\\\\\\":955}\\\",\\\"Headers\\\":{\\\"timestamp_in_ms\\\":1611746014944,\\\"x-ais-orderref\\\":\\\"ControlThingGroup_202101281801477\\\",\\\"x_protocol\\\":\\\"CONTROL\\\"}}\"\r",
									"\r",
									"                            // \\\"requestObject\\\":\\\"{ \\\\\\\"url\\\\\\\":\\\\\\\"desire.pub.v1.bcaf8427-2315-4ae8-a2a0-c799d37d5511\\\\\\\", \\\\\\\"headers\\\\\\\":{ \\\\\\\"x-ais-orderref\\\\\\\":\\\\\\\"ControlThingGroups_202105111105595\\\\\\\", \\\\\\\"x-ais-sessionid\\\\\\\":\\\\\\\"1620706140755\\\\\\\", \\\\\\\"timestamp_in_ms\\\\\\\":\\\\\\\"1620706140785\\\\\\\", \\\\\\\"x_protocol\\\\\\\":\\\\\\\"CONTROL\\\\\\\" }, \\\\\\\"body\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"{ \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Temp\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":227 }\\\\\\\\\\\\\\\"\\\\\\\" }\\\"\r",
									"\r",
									"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
									"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
									"                            \r",
									"                            // let jsonParsePayload = JSON.parse(jsonParseRequestObject.Payload);\r",
									"                            // console.log('jsonParsePayload',jsonParsePayload);\r",
									"                            let jsonParseBody = jsonParseRequestObject.body;\r",
									"                            let jsonParseBody1 = JSON.parse(jsonParseBody);\r",
									"                            let jsonParseBody2 = JSON.parse(jsonParseBody1);\r",
									"                            // console.log('jsonParseBody',jsonParseBody);\r",
									"                            // console.log('jsonParseBody1',jsonParseBody1);\r",
									"                            // console.log('jsonParseBody2',jsonParseBody2);\r",
									"                            // console.log('jsonParseBody2',jsonParseBody2[SensorKey]);\r",
									"\r",
									"                            console.log(\"headers.timestamp_in_ms : \" + jsonParseRequestObject.headers.timestamp_in_ms + \" = \" + jsonParseRequestObject.headers.timestamp_in_ms);\r",
									"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"                            console.log(\"headers.x_protocol : \" + jsonParseRequestObject.headers.x_protocol + \" = \" + x_protocol);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.headers.timestamp_in_ms).to.eql(jsonParseRequestObject.headers.timestamp_in_ms);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                            pm.expect(jsonParseRequestObject.headers.x_protocol).to.eql(x_protocol);\r",
									"\r",
									"                            console.log(\"resquest.\"+ SensorKey +\" : \" + jsonParseBody2[SensorKey] + \" = \" + sensor);\r",
									"                            pm.expect(jsonParseBody2[SensorKey]).to.eql(sensor);\r",
									"                \r",
									"                            // check responseObject\r",
									"                            // \\\"responseObject\\\":\\\"\\\\\\\"\\\\\\\"\\\"\r",
									"                            // let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
									"                            // console.log('jsonParseResponseObject',jsonParseResponseObject);\r",
									"\r",
									"                            console.log(\"response.custom1.responseObject : \" + resultDataLog.custom1.responseObject + \" = \" + JSON.stringify(\"\"));\r",
									"                            pm.expect(resultDataLog.custom1.responseObject).to.eql(JSON.stringify(\"\"));  \r",
									"                        }\r",
									"\r",
									"                    }); \r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// InquiryThing\r",
									"InquiryThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptInquiryThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_InquiryThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_InquiryThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestInquiryThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsInquiryThing = {\r",
									"            url: url + provisioningapis + urlThingInquiryThing,\r",
									"            method: 'POST',\r",
									"            header: headersOptInquiryThing,\r",
									"            body: httpRequestInquiryThing\r",
									"        };\r",
									"\r",
									"        // console.log('request InquiryThing');\r",
									"        let response = await reqPromise(optionsInquiryThing);\r",
									"        let jsonDataInquiryThing = await response.json();\r",
									"        // console.log('jsonDataInquiryThing',jsonDataInquiryThing)\r",
									"    \r",
									"        let operationStatusInquiryThing = await jsonDataInquiryThing.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"InquiryThing : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('InquiryThing : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusInquiryThing).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //InquiryThing is Success\r",
									"        pm.test('InquiryThing : OperationStatus Description is '+'\"'+ resultDescriptionInquiryThing+'\"', function () {\r",
									"            pm.expect(operationStatusInquiryThing).to.have.property('Description', resultDescriptionInquiryThing);\r",
									"        });\r",
									"\r",
									"        //Check Data\r",
									"        let thingInfo = await jsonDataInquiryThing.ThingInfo;\r",
									"        console.log('thingInfo',thingInfo);\r",
									"\r",
									"        for(let i=0;i<thingInfo.length;i++){\r",
									"            pm.test('Verify DB Check Data : ControlThingGroups [StateInfo.Desire and StateInfo.Delta :{ \"'+  fieldDataValue.CreateThingStateInfo.SensorKey + '\" : \"'+ pm.environment.get(\"random_Sensor_Control\") +'\" }]' , function () {\r",
									"                console.log(\"======== Verify DB Check Data ( Expected = Actual) [ControlThingGroups] ==================\");\r",
									"                console.log(\"thingInfo[\"+ i +\"]StateInfo.Delta : \" + thingInfo[i].StateInfo.Delta[fieldDataValue.CreateThingStateInfo.SensorKey] + \" = \" + pm.environment.get(\"random_Sensor_Control\"));\r",
									"                console.log(\"thingInfo[\"+ i +\"]StateInfo.Desire : \" + thingInfo[i].StateInfo.Delta[fieldDataValue.CreateThingStateInfo.SensorKey] + \" = \" + pm.environment.get(\"random_Sensor_Control\"));\r",
									"\r",
									"                pm.expect(thingInfo[i].StateInfo.Delta).to.have.property(fieldDataValue.CreateThingStateInfo.SensorKey, pm.environment.get(\"random_Sensor_Control\"));\r",
									"                pm.expect(thingInfo[i].StateInfo.Desire).to.have.property(fieldDataValue.CreateThingStateInfo.SensorKey, pm.environment.get(\"random_Sensor_Control\"));\r",
									"            });\r",
									"        }\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"setTimeout(function(){SearchLogFindTid();}, 40000); \r",
									"setTimeout(function(){CheckLog();}, 50000); \r",
									"setTimeout(function(){InquiryThing();}, 60000); \r",
									"\r",
									"setTimeout(function(){RemoveGroup();}, 65000); \r",
									"setTimeout(function(){RemoveThingStateInfo();}, 70000); \r",
									"setTimeout(function(){RemoveThing();}, 75000); \r",
									"setTimeout(function(){RemoveAccount();}, 80000); \r",
									"setTimeout(function(){RemovePartner();}, 85000);\r",
									"\r",
									"setTimeout(function(){\r",
									"pm.environment.unset(\"current_timestamp\");\r",
									"pm.environment.unset(\"AccessToken\");\r",
									"pm.environment.unset(\"random_number\");\r",
									"pm.environment.unset(\"PartnerName\");\r",
									"pm.environment.unset(\"MerchantContact\");\r",
									"pm.environment.unset(\"CPID\");\r",
									"pm.environment.unset(\"GetResponse_PartnerId\");\r",
									"pm.environment.unset(\"AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountId\");\r",
									"for(let i=0;i<countData;i++){\r",
									"pm.environment.unset(\"random_IM\"+[i+1]);\r",
									"pm.environment.unset(\"random_ICCID\"+[i+1]);\r",
									"pm.environment.unset(\"ThingName\"+[i+1]);\r",
									"pm.environment.unset(\"ThingGroupName\"+[i+1]);\r",
									"}\r",
									"\r",
									"pm.environment.unset(\"GetResponse_ThingIDArr\");\r",
									"pm.environment.unset(\"random_Sensor\");\r",
									"pm.environment.unset(\"GetResponse_ThingGroupIDArr\");\r",
									"pm.environment.unset(\"tid\");\r",
									"pm.environment.unset(\"sessionId\");\r",
									"pm.environment.unset(\"SensorKey\");\r",
									"pm.environment.unset(\"random_Sensor_Control\");\r",
									"pm.environment.unset(\"Value_ControlThingGroup_TST_F4_1_1_002_Succees\");\r",
									"}, 90000); "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var Username = pm.environment.get(\"Username\");\r",
									"var Password = pm.environment.get(\"Password\");\r",
									"\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//count for loop data\r",
									"var countData = 2;\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"pm.environment.set(\"SensorKey\",fieldDataValue.CreateThingStateInfo.SensorKey)\r",
									"pm.environment.set(\"Value_ControlThingGroup_TST_F4_1_1_002_Succees\",fieldDataValue.Control.Value_ControlThingGroup_TST_F4_1_1_002_Succees)\r",
									"\r",
									"//format YYYYMMDDHHMMSSS\r",
									"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
									"// console.log('currentTmestamp',currentTmestamp);\r",
									"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- statusCodeList --------------//\r",
									"//set variable to statusCodeList JSON.parse\r",
									"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
									"//set global variable to statusCode 200\r",
									"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
									"//set global variable to statusCode 201\r",
									"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultCodeList --------------//\r",
									"//set variable to resultCodeList JSON.parse\r",
									"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
									"//set global variable to resultCode \"20000\"\r",
									"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
									"//set global variable to resultCode \"20100\"\r",
									"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionSuccessList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
									"//set global variable to resultDescription \"SignInProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
									"//set global variable to resultDescription \"CreatePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
									"//set global variable to resultDescription \"CreateAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
									"//set global variable to resultDescription \"CreateThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThing\", resultDescriptionSuccessList.resultDescriptionCreateThing);\r",
									"//set global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThingStateInfo\", resultDescriptionSuccessList.resultDescriptionCreateThingStateInfo);\r",
									"//set global variable to resultDescription \"RemovePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
									"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
									"//set global variable to resultDescription \"RemoveThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThing\", resultDescriptionSuccessList.resultDescriptionRemoveThing);\r",
									"//set global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThingStateInfo\", resultDescriptionSuccessList.resultDescriptionRemoveThingStateInfo);\r",
									"//set global variable to resultDescription \"CreateGroup is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateGroup\", resultDescriptionSuccessList.resultDescriptionCreateGroup);\r",
									"//set global variable to resultDescription \"RemoveGroup is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveGroup\", resultDescriptionSuccessList.resultDescriptionRemoveGroup);\r",
									"//set global variable to resultDescription \"Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccess\", resultDescriptionSuccessList.resultDescriptionSuccess);\r",
									"//set global variable to resultDescription \"Created Success\"\r",
									"pm.globals.set(\"resultDescriptionCreatedSuccess\", resultDescriptionSuccessList.resultDescriptionCreatedSuccess);\r",
									"//set global variable to resultDescription \"ControlManyGroups is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessControlManyGroups\", resultDescriptionSuccessList.resultDescriptionSuccessControlManyGroups);\r",
									"//set global variable to resultDescription \"InquiryThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionInquiryThing\", resultDescriptionSuccessList.resultDescriptionInquiryThing);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- HeaderList --------------//\r",
									"//set variable to HeaderList JSON.parse\r",
									"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
									"//---------------- set globals Other --------------//\r",
									"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
									"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
									"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
									"//set global variable to kbn-versio \"7.5.1\"\r",
									"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Signin_ --------------//\r",
									"//set global variable to x_ais_OrderRef \"Signin_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreatePartner --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
									"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
									"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
									"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreateAccount --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
									"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
									"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Thing --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThing\", HeaderList.Thing.x_ais_OrderRef_CreateThing);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThing\", HeaderList.Thing.x_ais_OrderDesc_CreateThing);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThing\", HeaderList.Thing.x_ais_OrderRef_RemoveThing);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThing\", HeaderList.Thing.x_ais_OrderDesc_RemoveThing);\r",
									"//set global variable to x_ais_OrderRef \"InquiryThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_InquiryThing\", HeaderList.Thing.x_ais_OrderRef_InquiryThing);\r",
									"//set global variable to x_ais_OrderDesc \"InquiryThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_InquiryThing\", HeaderList.Thing.x_ais_OrderDesc_InquiryThing);\r",
									"//set global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_RemoveThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_RemoveThingStateInfo);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Group --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateGroup_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateGroup\", HeaderList.Group.x_ais_OrderRef_CreateGroup);\r",
									"//set global variable to x_ais_OrderDesc \"CreateGroup\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateGroup\", HeaderList.Group.x_ais_OrderDesc_CreateGroup);\r",
									"//set global variable to x_ais_OrderRef \"RemoveGroup_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveGroup\", HeaderList.Group.x_ais_OrderRef_RemoveGroup);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveGroup\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveGroup\", HeaderList.Group.x_ais_OrderDesc_RemoveGroup);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Control --------------//\r",
									"//set global variable to x_ais_OrderRef \"ControlThingGroups_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ControlThingGroups\", HeaderList.Control.x_ais_OrderRef_ControlThingGroups);\r",
									"//set global variable to x_ais_OrderRef \"ControlThingGroupsfail_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ControlThingGroups_fail\", HeaderList.Control.x_ais_OrderRef_ControlThingGroups_fail);\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"SignInProcess is Success\"\r",
									"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
									"//get global variable to resultDescription \"CreatePartner is Success\"\r",
									"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
									"//get global variable to resultDescription \"CreateAccount is Success\"\r",
									"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
									"//get global variable to resultDescription \"CreateThing is Success\"\r",
									"var resultDescriptionCreateThing = pm.globals.get(\"resultDescriptionCreateThing\");\r",
									"//get global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"var resultDescriptionCreateThingStateInfo = pm.globals.get(\"resultDescriptionCreateThingStateInfo\");\r",
									"//get global variable to resultDescription \"CreateGroup is Success\"\r",
									"var resultDescriptionCreateGroup = pm.globals.get(\"resultDescriptionCreateGroup\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- urlRouteList --------------//\r",
									"//set variable to urlRouteList JSON.parse\r",
									"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
									"//---------------- set url Create --------------//\r",
									"//set global variable to url \"/api/v1/auth/signin\"\r",
									"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
									"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
									"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"pm.globals.set(\"urlThingCreateThing\", urlRouteList.Thing.urlThingCreateThing);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"pm.globals.set(\"urlThingCreateThingStateInfo\", urlRouteList.Thing.urlThingCreateThingStateInfo);\r",
									"//set global variable to url \"/api/v1/Group/CreateGroup\"\r",
									"pm.globals.set(\"urlGroupCreateGroup\", urlRouteList.Group.urlGroupCreateGroup);\r",
									"//---------------- get url Create --------------//\r",
									"//get global variable to url \"/api/v1/auth/signin\"\r",
									"var urlSignin = pm.globals.get(\"urlSignin\");\r",
									"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
									"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"var urlThingCreateThing = pm.globals.get(\"urlThingCreateThing\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"var urlThingCreateThingStateInfo = pm.globals.get(\"urlThingCreateThingStateInfo\");\r",
									"//get global variable to url \"/api/v1/Group/CreateGroup\"\r",
									"var urlGroupCreateGroup = pm.globals.get(\"urlGroupCreateGroup\");\r",
									"//---------------- set url Remove --------------//\r",
									"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
									"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"pm.globals.set(\"urlThingRemoveThing\", urlRouteList.Thing.urlThingRemoveThing);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"pm.globals.set(\"urlThingRemoveThingStateInfo\", urlRouteList.Thing.urlThingRemoveThingStateInfo);\r",
									"//set global variable to url \"/api/v1/Group/RemoveGroup\"\r",
									"pm.globals.set(\"urlGroupRemoveGroup\", urlRouteList.Group.urlGroupRemoveGroup);\r",
									"//---------------- set url Inquiry --------------//\r",
									"//set global variable to url \"/api/v1/Thing/InquiryThing\"\r",
									"pm.globals.set(\"urlThingInquiryThing\", urlRouteList.Thing.urlThingInquiryThing);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Signin_ --------------//\r",
									"//get global variable to x_ais_OrderRef \"Signin_\"\r",
									"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"var x_ais_OrderRef_CreateThing = pm.globals.get(\"x_ais_OrderRef_CreateThing\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"var x_ais_OrderDesc_CreateThing = pm.globals.get(\"x_ais_OrderDesc_CreateThing\");\r",
									"//get global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"var x_ais_OrderRef_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderRef_CreateThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"var x_ais_OrderDesc_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_CreateThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Group --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateGroup_\"\r",
									"var x_ais_OrderRef_CreateGroup = pm.globals.get(\"x_ais_OrderRef_CreateGroup\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateGroup\"\r",
									"var x_ais_OrderDesc_CreateGroup = pm.globals.get(\"x_ais_OrderDesc_CreateGroup\");\r",
									"//------------------------------------------------------------//\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            // console.log('response111',response);\r",
									"            // console.log('errerrerr',err);\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// Signin get token\r",
									" Signin = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSignin = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestSignin = {\r",
									"            mode: 'raw',\r",
									"            raw: \r",
									"            JSON.stringify({\r",
									"                username:Username,\r",
									"                password:Password\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsSignin = {\r",
									"            url: url + provisioningapis + urlSignin,\r",
									"            method: 'POST',\r",
									"            header: headersOptSignin,\r",
									"            body: httpRequestSignin\r",
									"        };\r",
									"        // console.log('request Signin');\r",
									"        let response = await reqPromise(optionsSignin);\r",
									"        let jsonDataSignin = await response.json();\r",
									"\r",
									"        // setAccessToken\r",
									"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
									"\r",
									"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // SignInProcess is Success\r",
									"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
									"        });\r",
									"\r",
									"        //set random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //set PartnerName\r",
									"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
									"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
									"        //set MerchantContact\r",
									"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
									"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
									"        // set CPID\r",
									"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
									"        pm.environment.set(\"CPID\", CPIDValue)\r",
									"        \r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreatePartner\r",
									" CreatePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreatePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreatePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
									"                \"PartnerType\": [\r",
									"                    \"Supplier\",\r",
									"                    \"Customer\"\r",
									"                ],\r",
									"                \"PartnerDetail\": {\r",
									"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
									"                    \"CPID\": pm.environment.get(\"CPID\")\r",
									"                },\r",
									"                \"Property\": {\r",
									"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsCreatePartner = {\r",
									"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreatePartner,\r",
									"            body: httpRequestCreatePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsCreatePartner);\r",
									"        let jsonDataCreatePartner = await response.json();\r",
									"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
									"    \r",
									"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreatePartner is Success\r",
									"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
									"        });\r",
									"\r",
									"        //GetResponse_PartnerId\r",
									"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
									"\r",
									"        //Accountname\r",
									"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
									"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateAccount\r",
									" CreateAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreateAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
									"                })\r",
									"        };\r",
									"        \r",
									"        let optionsCreateAccount = {\r",
									"            url: url + provisioningapis + urlAccountCreateAccount,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateAccount,\r",
									"            body: httpRequestCreateAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateAccount');\r",
									"        let response = await reqPromise(optionsCreateAccount);\r",
									"        let jsonDataCreateAccount = await response.json();\r",
									"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
									"    \r",
									"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateAccount : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateAccount is Success\r",
									"        pm.test('CreateAccount : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
									"        });\r",
									"        // GetResponse_AccountName\r",
									"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
									"        // GetResponse_AccountId\r",
									"        pm.environment.set(\"GetResponse_AccountId\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
									"       \r",
									"        // // random_IM\r",
									"        // pm.environment.set(\"random_IM\", _.random(10000000, 99999999)+\" \"+_.random(1000000, 9999999))\r",
									"        // // random_ICCID\r",
									"        // pm.environment.set(\"random_ICCID\", _.random(1000000, 9999999)+\" \"+_.random(100000, 999999))\r",
									"        // // random_number\r",
									"        // pm.environment.set(\"random_number\",pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        // //ThingName\r",
									"        // let thingNameValue = fieldDataValue.Thing.ThingNameValue; // \"Sensor_TestThingName\"\r",
									"        // pm.environment.set(\"ThingName\", thingNameValue + pm.environment.get(\"random_number\"))\r",
									"\r",
									"        // random_number\r",
									"        pm.environment.set(\"random_number\",pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"\r",
									"        for(let i=0;i<countData;i++){\r",
									"            // random_IM\r",
									"            pm.environment.set(\"random_IM\"+[i+1], _.random(10000000, 99999999)+\" \"+_.random(1000000, 9999999))\r",
									"            // random_ICCID\r",
									"            pm.environment.set(\"random_ICCID\"+[i+1], _.random(1000000, 9999999)+\" \"+_.random(100000, 999999))\r",
									"\r",
									"            //ThingName\r",
									"            let thingNameValue = fieldDataValue.Thing.ThingNameValue; // \"Sensor_TestThingName\"\r",
									"            pm.environment.set(\"ThingName\"+[i+1],thingNameValue + [i+1] + pm.environment.get(\"random_number\"))\r",
									"\r",
									"            //ThinggroupName\r",
									"            let ThingGroupNameValue = fieldDataValue.Group.ThingGroupNameValue; // \"Sensor_TestThingGroupName\"\r",
									"            pm.environment.set(\"ThingGroupName\"+[i+1],ThingGroupNameValue + [i+1] + pm.environment.get(\"random_number\"))\r",
									"        }\r",
									"            \r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThing\r",
									" CreateThingArr = async () =>  {\r",
									"    try {\r",
									"        \r",
									"        // header\r",
									"        let headersOptCreateThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThing');\r",
									"        let dataThingIdArr = [];\r",
									"        for(let i=0;i<countData;i++){\r",
									"            // body\r",
									"            let httpRequestCreateThing = {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                    \"ThingName\": pm.environment.get(\"ThingName\"+ [i+1]),\r",
									"                    \"IMEI\": pm.environment.get(\"random_IM\"+ [i+1]),\r",
									"                    \"IMSI\": pm.environment.get(\"random_IM\"+ [i+1]),\r",
									"                    \"ICCID\": pm.environment.get(\"random_ICCID\"+ [i+1]),\r",
									"                    \"RouteUrl\": fieldDataValue.Thing.RouteUrlValue , //[\"http://10.12.3.4:2019/api/information/AddInformation\"]\r",
									"                    \"RouteInfo\": {\r",
									"                        \"MIMO_ID\": fieldDataValue.Thing.RouteInfoMIMOIDValue , //\"606edada\"\r",
									"                        \"MIMO_SerialNo\": fieldDataValue.Thing.RouteInfoMIMOSerialNoValue //5466758878\r",
									"                    },\r",
									"                    \"RouteFlag\": {\r",
									"                        \"ThingName\": fieldDataValue.Thing.RouteFlagThingNameValue , //true\r",
									"                        \"ThingToken\": fieldDataValue.Thing.RouteFlagThingTokenValue, //true\r",
									"                        \"IMEI\": fieldDataValue.Thing.RouteFlagIMEIValue, //true\r",
									"                        \"ICCID\": fieldDataValue.Thing.RouteFlagICCIDValue, //true\r",
									"                        \"RouteInfo\": fieldDataValue.Thing.RouteFlagRouteInfoValue //true\r",
									"                    }\r",
									"                })\r",
									"            };\r",
									"            \r",
									"            let optionsCreateThing = {\r",
									"                url: url + provisioningapis + urlThingCreateThing,\r",
									"                method: 'POST',\r",
									"                header: headersOptCreateThing,\r",
									"                body: httpRequestCreateThing\r",
									"            };\r",
									"            let response = await reqPromise(optionsCreateThing);\r",
									"            let jsonDataCreateThing = await response.json();\r",
									"            let ThingId = await jsonDataCreateThing.ThingInfo.ThingId;\r",
									"            dataThingIdArr.push(ThingId);\r",
									"            let operationStatusCreateThing = await jsonDataCreateThing.OperationStatus;\r",
									"\r",
									"            //201\r",
									"            pm.test(\"CreateThing\"+ [i+1]+ \" : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"                pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"            });\r",
									"            //20100\r",
									"            pm.test('CreateThing'+ [i+1]+ ' : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"                pm.expect(operationStatusCreateThing).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"            });\r",
									"            //CreateThing is Success\r",
									"            pm.test('CreateThing'+ [i+1]+ ' : OperationStatus Description is '+'\"'+ resultDescriptionCreateThing+'\"', function () {\r",
									"                pm.expect(operationStatusCreateThing).to.have.property('Description', resultDescriptionCreateThing);\r",
									"            });\r",
									"        }\r",
									"        \r",
									"        // console.log('dataThingIdArr',dataThingIdArr);\r",
									"        // pm.environment.set(\"GetResponse_ThingID\",jsonDataCreateThing.ThingInfo.ThingId)\r",
									"        pm.environment.set(\"GetResponse_ThingIDArr\",JSON.stringify(dataThingIdArr))\r",
									"\r",
									"        //Get Random Sensor \r",
									"        pm.environment.set(\"random_Sensor\", _.random(100, 999))\r",
									"\r",
									"        //Get Random Sensor Control\r",
									"        pm.environment.set(\"random_Sensor_Control\", pm.environment.get(\"Value_ControlThingGroup_TST_F4_1_1_002_Succees\"))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThingStateInfo\r",
									" CreateThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let dataThingIDArray = JSON.parse(pm.environment.get(\"GetResponse_ThingIDArr\"));\r",
									"        // console.log('dataThingIDArray',dataThingIDArray);\r",
									"\r",
									"        // {\"Temp\" : pm.environment.get(\"random_Sensor\")}\r",
									"        let sensorValue = {};\r",
									"        sensorValue[fieldDataValue.CreateThingStateInfo.SensorKey] = pm.environment.get(\"random_Sensor\");\r",
									"        // console.log('sensorValue',sensorValue);\r",
									"        \r",
									"        let httpRequestCreateThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": dataThingIDArray,\r",
									"                \"Type\": fieldDataValue.CreateThingStateInfo.Type_Report,\r",
									"                \"Sensor\": sensorValue\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingCreateThingStateInfo,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThingStateInfo,\r",
									"            body: httpRequestCreateThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThingStateInfo');\r",
									"        let response = await reqPromise(optionsCreateThingStateInfo);\r",
									"\r",
									"        let jsonDataCreateThingStateInfo = await response.json();\r",
									"        let operationStatusCreateThingStateInfo = await jsonDataCreateThingStateInfo.OperationStatus;\r",
									"        // console.log('operationStatusCreateThingStateInfo',operationStatusCreateThingStateInfo);\r",
									"\r",
									"        //200\r",
									"        pm.test(\"CreateThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //CreateThingStateInfo is Success\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionCreateThingStateInfo+'\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Description', resultDescriptionCreateThingStateInfo);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThingGroup\r",
									" CreateThingGroupArr = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThingGroup = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateGroup + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateGroup,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        let dataThingIDArray = JSON.parse(pm.environment.get(\"GetResponse_ThingIDArr\"));\r",
									"\r",
									"        // console.log('dataThingIDArray',dataThingIDArray);\r",
									"        let dataThingGroupIdArr = [];\r",
									"        for(let i=0;i<countData;i++){\r",
									"            // body\r",
									"            let httpRequestCreateThingGroup = {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                        \"ThingGroupName\": pm.environment.get(\"ThingGroupName\"+ [i+1]),\r",
									"                        \"ThingId\": dataThingIDArray\r",
									"                        })\r",
									"            };\r",
									"             let optionsCreateThingGroup = {\r",
									"                url: url + provisioningapis + urlGroupCreateGroup,\r",
									"                method: 'POST',\r",
									"                header: headersOptCreateThingGroup,\r",
									"                body: httpRequestCreateThingGroup\r",
									"            };\r",
									"\r",
									"            // console.log('request CreateThingGroup');\r",
									"            let response = await reqPromise(optionsCreateThingGroup);\r",
									"\r",
									"            let jsonDataCreateThingGroup = await response.json();\r",
									"            let operationStatusCreateThingGroup = await jsonDataCreateThingGroup.OperationStatus;\r",
									"        \r",
									"            //200\r",
									"            pm.test(\"CreateThingGroup\"+ [i+1]+ \" : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"                pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"            });\r",
									"            //20000\r",
									"            pm.test('CreateThingGroup'+ [i+1]+ ' : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"                pm.expect(operationStatusCreateThingGroup).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"            });\r",
									"            //CreateThingGroup is Success\r",
									"            pm.test('CreateThingGroup'+ [i+1]+ ' : OperationStatus Description is '+'\"'+ resultDescriptionCreateGroup+'\"', function () {\r",
									"                pm.expect(operationStatusCreateThingGroup).to.have.property('Description', resultDescriptionCreateGroup);\r",
									"            });\r",
									"\r",
									"            dataThingGroupIdArr.push(jsonDataCreateThingGroup.GroupInfo.GroupId);\r",
									"            \r",
									"        }\r",
									"            // console.log('dataThingGroupIdArr',dataThingGroupIdArr);\r",
									"            // GetResponse_ThingGroupID\r",
									"            pm.environment.set(\"GetResponse_ThingGroupIDArr\",JSON.stringify(dataThingGroupIdArr));\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"Signin();\r",
									"setTimeout(async function(){await CreatePartner();}, 3000); \r",
									"setTimeout(async function(){await CreateAccount();}, 6000); \r",
									"setTimeout(async function(){await CreateThingArr();}, 8000); \r",
									"setTimeout(async function(){await CreateThingStateInfo();}, 20000); \r",
									"setTimeout(async function(){await CreateThingGroupArr();}, 30000); \r",
									"setTimeout(async function(){}, 35000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-ais-OrderRef",
								"value": "{{x_ais_OrderRef_ControlThingGroups}}{{current_timestamp}}"
							},
							{
								"key": "x-ais-AccountKey",
								"value": "{{GetResponse_AccountId}}",
								"type": "text"
							},
							{
								"key": "x-ais-AccessToken",
								"value": "{{Bearer}} {{AccessToken}}"
							},
							{
								"key": "Accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"ThingGroupId\": {{GetResponse_ThingGroupIDArr}},\r\n  \"Sensors\": {\r\n    \"{{SensorKey}}\": \"{{random_Sensor_Control}}\"\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{url}}{{mg4controlapis}}/api/v1/Control/ThingGroups",
							"host": [
								"{{url}}{{mg4controlapis}}"
							],
							"path": [
								"api",
								"v1",
								"Control",
								"ThingGroups"
							]
						},
						"description": "Type:Desire"
					},
					"response": []
				},
				{
					"name": "ControlThingGroups_TST_F4_0_2_002_Error_AccountKeyMissing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//count for loop data\r",
									"var countData = 2;\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"//---------------- detailsResponse --------------//\r",
									"//set variable to detailsResponse JSON.parse\r",
									"var detailsResponse = JSON.parse(pm.environment.get(\"detailsResponse\"));\r",
									"// console.log('detailsResponse',detailsResponse);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to xAisOrderRef \"RemoveThing_\"\r",
									"var x_ais_OrderRef_RemoveThing = pm.globals.get(\"x_ais_OrderRef_RemoveThing\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"var x_ais_OrderDesc_RemoveThing = pm.globals.get(\"x_ais_OrderDesc_RemoveThing\");\r",
									"//get global variable to x_ais_OrderRef \"RemoveThingStateInfo_\"\r",
									"var x_ais_OrderDesc_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_RemoveThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThingStateInfo\"\r",
									"var x_ais_OrderRef_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderRef_RemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Group --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveGroup_\"\r",
									"var x_ais_OrderRef_RemoveGroup = pm.globals.get(\"x_ais_OrderRef_RemoveGroup\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveGroup\"\r",
									"var x_ais_OrderDesc_RemoveGroup = pm.globals.get(\"x_ais_OrderDesc_RemoveGroup\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Control --------------//\r",
									"//get global variable to x_ais_OrderRef \"ControlThingGroups_\"\r",
									"var x_ais_OrderRef_ControlThingGroups = pm.globals.get(\"x_ais_OrderRef_ControlThingGroups\");\r",
									"//get global variable to x_ais_OrderRef \"ControlThingGroupsfail_\"\r",
									"var x_ais_OrderRef_ControlThingGroups_fail = pm.globals.get(\"x_ais_OrderRef_ControlThingGroups_fail\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get url Remove --------------//\r",
									"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
									"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"var urlThingRemoveThing = pm.globals.get(\"urlThingRemoveThing\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"var urlThingRemoveThingStateInfo = pm.globals.get(\"urlThingRemoveThingStateInfo\");\r",
									"//get global variable to url \"/api/v1/Group/RemoveGroup\"\r",
									"var urlGroupRemoveGroup = pm.globals.get(\"urlGroupRemoveGroup\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"RemovePartner is Success\"\r",
									"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
									"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
									"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
									"//get global variable to resultDescription \"RemoveThing is Success\"\r",
									"var resultDescriptionRemoveThing = pm.globals.get(\"resultDescriptionRemoveThing\");\r",
									"//get global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"var resultDescriptionRemoveThingStateInfo = pm.globals.get(\"resultDescriptionRemoveThingStateInfo\");\r",
									"//get global variable to resultDescription \"RemoveGroup is Success\"\r",
									"var resultDescriptionRemoveGroup = pm.globals.get(\"resultDescriptionRemoveGroup\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 403\r",
									"var statusCodeForbidden = pm.globals.get(\"statusCodeForbidden\");\r",
									"//get global variable to resultCode \"40300\"\r",
									"var resultCodeForbiddenMissingOrInvalidParameter = pm.globals.get(\"resultCodeForbiddenMissingOrInvalidParameter\");\r",
									"//get global variable to resultDescription \"The Parameter x-ais-AccountKey is Missing Or Invalid\"\r",
									"// var resultDescriptionErrorParameterXAisAccountKeyMissingOrInvalid = pm.globals.get(\"resultDescriptionErrorParameterXAisAccountKeyMissingOrInvalid\");\r",
									"//get global variable to resultDescription \"The Client Data is Missing Or Invalid Parameter\"\r",
									"var resultDescriptionTheClientDataIsMissingOrInvalidParameter = pm.globals.get(\"resultDescriptionTheClientDataIsMissingOrInvalidParameter\");\r",
									"//------------------------------------------------------------//\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"ControlThingGroups : Status code is \" + statusCodeForbidden, function () {\r",
									"    pm.response.to.have.status(statusCodeForbidden);\r",
									"});\r",
									"\r",
									"pm.test('ControlThingGroups : OperationStatus Code is '+'\"'+ resultCodeForbiddenMissingOrInvalidParameter +'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeForbiddenMissingOrInvalidParameter);\r",
									"});\r",
									"\r",
									"pm.test('ControlThingGroups : OperationStatus DeveloperMessage is '+'\"'+ resultDescriptionTheClientDataIsMissingOrInvalidParameter+'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheClientDataIsMissingOrInvalidParameter);\r",
									"});\r",
									"\r",
									"pm.test('ControlThingGroups : OperationStatus Details is '+'\"'+ detailsResponse.target_accountId + \" : \" + detailsResponse.developerMessage_accountId +'\"', function () {\r",
									"    let countDetails= jsonData.OperationStatus.Details;\r",
									"    for(let i=0;i<countDetails.length;i++){\r",
									"        pm.expect(countDetails[i].Target).to.eql(detailsResponse.target_accountId);\r",
									"        pm.expect(countDetails[i].DeveloperMessage).to.eql(detailsResponse.developerMessage_accountId);\r",
									"    }\r",
									"});\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// RemovePartner\r",
									" RemovePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemovePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemovePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemovePartner = {\r",
									"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemovePartner,\r",
									"            body: httpRequestRemovePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request RemovePartner');\r",
									"        let response = await reqPromise(optionsRemovePartner);\r",
									"        let jsonDataRemovePartner = await response.json();\r",
									"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
									"    \r",
									"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemovePartner is Success\r",
									"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveAccount\r",
									" RemoveAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemoveAccount = {\r",
									"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveAccount,\r",
									"            body: httpRequestRemoveAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveAccount');\r",
									"        let response = await reqPromise(optionsRemoveAccount);\r",
									"        let jsonDataRemoveAccount = await response.json();\r",
									"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
									"    \r",
									"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveAccount is Success\r",
									"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThing\r",
									" RemoveThing = async () =>  {\r",
									"    try {\r",
									"\r",
									"        // header\r",
									"        let headersOptRemoveThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        let dataThingIDArray = JSON.parse(pm.environment.get(\"GetResponse_ThingIDArr\"));\r",
									"\r",
									"        for(let i=0;i<countData;i++){\r",
									"\r",
									"            // body\r",
									"            let httpRequestRemoveThing = {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                    \"ThingId\": dataThingIDArray[i]\r",
									"                })\r",
									"            };\r",
									"\r",
									"            let optionsRemoveThing = {\r",
									"                url: url + provisioningapis + urlThingRemoveThing,\r",
									"                method: 'DELETE',\r",
									"                header: headersOptRemoveThing,\r",
									"                body: httpRequestRemoveThing\r",
									"            };\r",
									"            // console.log('request RemoveThing');\r",
									"            let response = await reqPromise(optionsRemoveThing);\r",
									"            let jsonDataRemoveThing = await response.json();\r",
									"            // console.log('jsonDataRemoveThing',jsonDataRemoveThing)\r",
									"        \r",
									"            let operationStatusRemoveThing = await jsonDataRemoveThing.OperationStatus;\r",
									"\r",
									"            //200\r",
									"            pm.test(\"RemoveThing\" + [i+1]+ \" : Status code is \" + statusCodeSuccess, function () {\r",
									"                pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"            });\r",
									"            //20000\r",
									"            pm.test('RemoveThing' + [i+1]+ ' : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"                pm.expect(operationStatusRemoveThing).to.have.property('Code', resultCodeSuccess);\r",
									"            });\r",
									"            //RemoveThing is Success\r",
									"            pm.test('RemoveThing' + [i+1]+ ' : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThing+'\"', function () {\r",
									"                pm.expect(operationStatusRemoveThing).to.have.property('Description', resultDescriptionRemoveThing);\r",
									"            });\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThingStateInfo\r",
									" RemoveThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"            \r",
									"        };\r",
									"\r",
									"        let dataThingIDArray = JSON.parse(pm.environment.get(\"GetResponse_ThingIDArr\"));\r",
									"\r",
									"        for(let i=0;i<dataThingIDArray.length;i++){\r",
									"        \r",
									"            // body\r",
									"            let httpRequestRemoveThingStateInfo = {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                    \"ThingId\": dataThingIDArray[i],\r",
									"                    \"stateType\": fieldDataValue.CreateThingStateInfo.Type_Report, //Report\r",
									"                    \"stateKey\": fieldDataValue.CreateThingStateInfo.SensorKey //Temp\r",
									"                })\r",
									"            };\r",
									"\r",
									"            let optionsRemoveThingStateInfo = {\r",
									"                url: url + provisioningapis + urlThingRemoveThingStateInfo,\r",
									"                method: 'DELETE',\r",
									"                header: headersOptRemoveThingStateInfo,\r",
									"                body: httpRequestRemoveThingStateInfo\r",
									"            };\r",
									"\r",
									"            // console.log('response RemoveThingStateInfo');\r",
									"            let response = await reqPromise(optionsRemoveThingStateInfo);\r",
									"            let jsonDataRemoveThingStateInfo = await response.json();\r",
									"            // console.log('jsonDataRemoveThing',jsonDataRemoveThingStateInfo)\r",
									"        \r",
									"            let operationStatusRemoveThingStateInfo = await jsonDataRemoveThingStateInfo.OperationStatus;\r",
									"\r",
									"            //200\r",
									"            pm.test(\"RemoveThingStateInfo\" + [i+1]+ \" : Status code is \" + statusCodeSuccess, function () {\r",
									"                pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"            });\r",
									"            //20000\r",
									"            pm.test('RemoveThingStateInfo' + [i+1]+ ' : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"                pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"            });\r",
									"            //RemoveThingStateInfo is Success\r",
									"            pm.test('RemoveThingStateInfo' + [i+1]+ ' : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThingStateInfo+'\"', function () {\r",
									"                pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Description', resultDescriptionRemoveThingStateInfo);\r",
									"            });\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveGroup\r",
									" RemoveGroup = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveGroup = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveGroup + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveGroup,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"            \r",
									"        };\r",
									"\r",
									"        let dataThingGroupIDArray = JSON.parse(pm.environment.get(\"GetResponse_ThingGroupIDArr\"));\r",
									"\r",
									"        for(let i=0;i<dataThingGroupIDArray.length;i++){\r",
									"        \r",
									"            // body\r",
									"            let httpRequestRemoveGroup = {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                    \"GroupId\": dataThingGroupIDArray[i]\r",
									"                })\r",
									"            };\r",
									"\r",
									"            let optionsRemoveGroup = {\r",
									"                url: url + provisioningapis + urlGroupRemoveGroup,\r",
									"                method: 'DELETE',\r",
									"                header: headersOptRemoveGroup,\r",
									"                body: httpRequestRemoveGroup\r",
									"            };\r",
									"\r",
									"            // console.log('response RemoveGroup');\r",
									"            let response = await reqPromise(optionsRemoveGroup);\r",
									"            let jsonDataRemoveGroup = await response.json();\r",
									"            // console.log('jsonDataRemoveThing',jsonDataRemoveGroup)\r",
									"        \r",
									"            let operationStatusRemoveGroup = await jsonDataRemoveGroup.OperationStatus;\r",
									"\r",
									"            //200\r",
									"            pm.test(\"RemoveGroup\" + [i+1]+ \" : Status code is \" + statusCodeSuccess, function () {\r",
									"                pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"            });\r",
									"            //20000\r",
									"            pm.test('RemoveGroup' + [i+1]+ ' : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"                pm.expect(operationStatusRemoveGroup).to.have.property('Code', resultCodeSuccess);\r",
									"            });\r",
									"            //RemoveGroup is Success\r",
									"            pm.test('RemoveGroup' + [i+1]+ ' : OperationStatus Description is '+'\"'+ resultDescriptionRemoveGroup+'\"', function () {\r",
									"                pm.expect(operationStatusRemoveGroup).to.have.property('Description', resultDescriptionRemoveGroup);\r",
									"            });\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"//---------------- LogDefaultValue --------------//\r",
									"//set variable to LogDefaultValue JSON.parse\r",
									"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
									"// console.log('LogDefaultValue',LogDefaultValue);\r",
									"//---------------- set globals Other --------------//\r",
									"var SearchLog = LogDefaultValue.SearchLog;\r",
									"// console.log('SearchLog',SearchLog);\r",
									"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
									"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
									"var kbn_version = SearchLog.header.kbn_version;\r",
									"var authorization = SearchLog.header.Authorization;\r",
									"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
									"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
									"var namespace = LogDefaultValue.Other.namespace_control4mg;\r",
									"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
									"var header_x_ais_accountkey = LogDefaultValue.Other.header_x_ais_accountkey;\r",
									"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
									"var methodPost = LogDefaultValue.Other.methodPost;\r",
									"\r",
									"// Detail\r",
									"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
									"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
									"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
									"\r",
									"// Summary\r",
									"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
									"// ControlAPIs\r",
									"var applicationName = LogDefaultValue.Control.applicationName_mg4;\r",
									"var cmdName = LogDefaultValue.Control.cmdNameThingGroups;\r",
									"// var resultDesc = LogDefaultValue.Control.resultDescThing_success;\r",
									"var endPointNameControlAPIs = LogDefaultValue.Control.endPointNameControlAPIs;\r",
									"var endPointNameDesireEx = LogDefaultValue.Control.endPointNameDesireEx;\r",
									"var containerId = LogDefaultValue.Control.containerId;\r",
									"var requestObjectUrlStaging = LogDefaultValue.Control.requestObjectUrlStagingThingGroups;\r",
									"var xProtocolControl = LogDefaultValue.Control.xProtocolControl;\r",
									"var responseObjectPublished = LogDefaultValue.Control.responseObjectPublished;\r",
									"\r",
									"// Check CDR (Summary Log) and EDR (Detail Log)\r",
									"SearchLogFindTid = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSearchLogFindTid = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = x_ais_OrderRef_ControlThingGroups_fail +  current_timestamp; \r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestSearchLogFindTid = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"\r",
									"        let optionsSearchLogFindTid = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptSearchLogFindTid,\r",
									"            body: httpRequestSearchLogFindTid\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsSearchLogFindTid);\r",
									"        let jsonDataSearchLogFindTid = await response.json();\r",
									"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
									"        console.log('hits',hits)\r",
									"  \r",
									"        // find tid\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            // let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"        \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            if(applicationNameValue == applicationName){\r",
									"                // let tid = hits[i]._source.cauldron.tid;\r",
									"                // pm.environment.set(\"tid\", tid);\r",
									"                let sessionId = hits[i]._source.cauldron.sessionId;\r",
									"                pm.environment.set(\"sessionId\", sessionId);\r",
									"                break;\r",
									"           }\r",
									"        }\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"CheckLog = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCheckLog = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = pm.environment.get(\"sessionId\");\r",
									"\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestCheckLog = {\r",
									"            mode: 'raw',\r",
									"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"        let optionsCheckLog = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptCheckLog,\r",
									"            body: httpRequestCheckLog\r",
									"        }; \r",
									"        let response = await reqPromise(optionsCheckLog);\r",
									"        let jsonDataCheckLog = await response.json();\r",
									"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
									"        \r",
									"        // //200\r",
									"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });     \r",
									"        \r",
									"        let hits = jsonDataCheckLog.hits.hits\r",
									"        console.log('hits',hits)\r",
									"  \r",
									"        // find logType\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            //  let logType = hits[i]._source.cauldron.logType\r",
									"            let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"           \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            \r",
									"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
									"            // console.log('resultDataLog',resultDataLog)\r",
									"\r",
									"            let tidControl = x_ais_OrderRef_ControlThingGroups_fail + current_timestamp;\r",
									"            // console.log(tidControl);\r",
									"            if(applicationNameValue == applicationName){\r",
									"                 \r",
									"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ControlAPIs\r",
									"                    pm.test(\"Check Summary Log : ControlThingGroups\" , function () {\r",
									"                        console.log(\"======== Check Summary Log ( Expected = Actual) [ControlThingGroups] ==================\");\r",
									"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
									"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
									"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeForbiddenMissingOrInvalidParameter);\r",
									"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionTheClientDataIsMissingOrInvalidParameter);\r",
									"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
									"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        // console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
									"                        // console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
									"\r",
									"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
									"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
									"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeForbiddenMissingOrInvalidParameter ); \r",
									"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionTheClientDataIsMissingOrInvalidParameter); \r",
									"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
									"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"\r",
									"                        let thingGroupId = JSON.parse(pm.environment.get(\"GetResponse_ThingGroupIDArr\"));\r",
									"                        let customUrl= urlCheckLog + requestObjectUrlStaging;\r",
									"                        let customAccountkey = null //pm.environment.get(\"GetResponse_AccountId\");\r",
									"\r",
									"                        // check identity\r",
									"                        // \"identity\":\"{\\\"ThingGroupsID\\\":[\\\"6013763596d0ed0001f59626\\\",\\\"6013763596d0ed0001f5962c\\\"]\"}\"\r",
									"                        let dataSummaryIdentity = JSON.parse(resultDataLog.identity);\r",
									"\r",
									"                        console.log(\"identity.ThingGroupID : [\" + dataSummaryIdentity.ThingGroupID + \"] = [\" + thingGroupId + \"]\");\r",
									"                        pm.expect(dataSummaryIdentity.ThingGroupID).to.eql(thingGroupId); \r",
									"\r",
									"                        // check custom\r",
									"                        // \\\"custom\\\":{ \\\"customData\\\":{ \\\"url\\\":\\\"mg-iot.sandais.com/api/v1/Control/ThingGroups\\\", \\\"accountkey\\\":null, \\\"ThingGroupID\\\":[ \\\"609a3868fa59240001c7db7d\\\", \\\"609a3868fa59240001c7db85\\\" ] }, \\\"endPointSummary\\\":[ ] }\r",
									"\r",
									"                        let customData = resultDataLog.custom.customData;\r",
									"\r",
									"                        console.log(\"custom.url : \" + customData.url + \" = \" + customUrl);\r",
									"                        console.log(\"custom.accountkey : \" + customData.accountkey + \" = \" + customAccountkey);\r",
									"                        console.log(\"custom.ThingGroupID : [\" + customData.ThingGroupID + \"] = [\" + thingGroupId + \"]\");\r",
									"\r",
									"                        pm.expect(customData.url).to.eql(customUrl); \r",
									"                        pm.expect(customData.accountkey).to.eql(customAccountkey); \r",
									"                        pm.expect(customData.ThingGroupID).to.eql(thingGroupId); \r",
									"\r",
									"                        let custom = resultDataLog.custom.endPointSummary;\r",
									"\r",
									"                        console.log(\"custom.endPointSummary : \" + JSON.stringify(custom) + \" = \" + JSON.stringify([]));\r",
									"                        pm.expect(custom).to.eql([]); \r",
									"                    }); \r",
									"                }\r",
									"\r",
									"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail'\r",
									"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
									"                    // console.log('endPointNameValue ',endPointNameValue)\r",
									"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [ControlThingGroups]\", function () {\r",
									"                        console.log(\"======== Check Detail Log ( Expected = Actual) [ControlThingGroups] ==================\");\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
									"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
									"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
									"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
									"\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
									"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
									"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
									"                        // pm.expect(resultDataLog.EndPoint).to.eql(); \r",
									"\r",
									"                        // check requestObject\r",
									"                        // \"requestObject\":\"{\\\"headers\\\":{\\\"x-ais-orderref\\\":\\\"ControlThingGroups_202101290901653\\\",\\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAEL8HZk2RWAR3L0/hOZPjC5nvaeNw1EUMpcFyr//lMVTkIlAkkY2KW0\\\"},\\\"body\\\":{\\\"ThingGroupId\\\":[\\\"6013763596d0ed0001f59626\\\",\\\"6013763596d0ed0001f5962c\\\"],\\\"Sensors\\\":{\\\"Temp\\\":925}}}\"\r",
									"\r",
									"                        // \\\"requestObject\\\":\\\"{ \\\\\\\"url\\\\\\\":\\\\\\\"/api/v1/Control/ThingGroups\\\\\\\", \\\\\\\"method\\\\\\\":\\\\\\\"POST\\\\\\\", \\\\\\\"headers\\\\\\\":{ \\\\\\\"Cache-Control\\\\\\\":\\\\\\\"no-cache\\\\\\\", \\\\\\\"Content-Type\\\\\\\":\\\\\\\"application/json\\\\\\\", \\\\\\\"Accept\\\\\\\":\\\\\\\"*/*\\\\\\\", \\\\\\\"Accept-Encoding\\\\\\\":\\\\\\\"gzip, deflate, br\\\\\\\", \\\\\\\"Host\\\\\\\":\\\\\\\"mg-iot.sandais.com\\\\\\\", \\\\\\\"User-Agent\\\\\\\":\\\\\\\"PostmanRuntime/7.26.8\\\\\\\", \\\\\\\"Content-Length\\\\\\\":\\\\\\\"118\\\\\\\", \\\\\\\"x-real-ip\\\\\\\":\\\\\\\"182.232.14.198\\\\\\\", \\\\\\\"x-forwarded-for\\\\\\\":\\\\\\\"182.232.14.198, 10.233.67.0\\\\\\\", \\\\\\\"x-forwarded-proto\\\\\\\":\\\\\\\"http\\\\\\\", \\\\\\\"x-ais-orderref\\\\\\\":\\\\\\\"ControlThingGroupsfail_202105111405444\\\\\\\", \\\\\\\"x-ais-accesstoken\\\\\\\":\\\\\\\"Bearer ibnxnVhs5Rx3IwglWv7/gVA/1TpQnKqAOBAADlRDvYhOpXwmlpYOEb5yfY5aZpoj0YRWRZM26i9HOqtc1fc1jpNDOK5JpISttmMEy59g2py7nLWonDe2YW2OPRGWSowk6+9ZihLU1fZ5d5jAqqrZaKlOAAI3N1TXDNLsHuKcOJMcERbCcaMqRaku+MY4/kzE+eyIdkfwwbjT91S2VQq+Wk2ooMWuLk6/DHVJhwbMP7bp5o33FDKsCHSMLkoxE9UGvQpRFgG62CNKVegMrc8SMg==\\\\\\\", \\\\\\\"postman-token\\\\\\\":\\\\\\\"c4aa592e-eaaa-4c6b-a910-9718c377c0cd\\\\\\\", \\\\\\\"x-envoy-external-address\\\\\\\":\\\\\\\"10.233.67.0\\\\\\\", \\\\\\\"x-request-id\\\\\\\":\\\\\\\"2998fe12-ceda-4900-9f35-877e9e2f72ec\\\\\\\", \\\\\\\"x-envoy-original-path\\\\\\\":\\\\\\\"/mg4controlapis/api/v1/Control/ThingGroups\\\\\\\", \\\\\\\"x-b3-traceid\\\\\\\":\\\\\\\"2fe294cdd499d780e2af402bd8c6c9ff\\\\\\\", \\\\\\\"x-b3-spanid\\\\\\\":\\\\\\\"16b643a9cd31c076\\\\\\\", \\\\\\\"x-b3-parentspanid\\\\\\\":\\\\\\\"e2af402bd8c6c9ff\\\\\\\", \\\\\\\"x-b3-sampled\\\\\\\":\\\\\\\"0\\\\\\\", \\\\\\\"x-ais-SessionId\\\\\\\":\\\\\\\"1620719725542\\\\\\\", \\\\\\\"identity\\\\\\\":\\\\\\\"{ \\\\\\\\\\\\\\\"ThingGroupID\\\\\\\\\\\\\\\":[ \\\\\\\\\\\\\\\"609a3868fa59240001c7db7d\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"609a3868fa59240001c7db85\\\\\\\\\\\\\\\" ] }\\\\\\\", \\\\\\\"custom\\\\\\\":\\\\\\\"{ \\\\\\\\\\\\\\\"url\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"mg-iot.sandais.com/api/v1/Control/ThingGroups\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"accountkey\\\\\\\\\\\\\\\":null, \\\\\\\\\\\\\\\"ThingGroupID\\\\\\\\\\\\\\\":[ \\\\\\\\\\\\\\\"609a3868fa59240001c7db7d\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"609a3868fa59240001c7db85\\\\\\\\\\\\\\\" ] }\\\\\\\" }, \\\\\\\"queryString\\\\\\\":{ }, \\\\\\\"routeParamteters\\\\\\\":{ }, \\\\\\\"body\\\\\\\":{ \\\\\\\"ThingGroupId\\\\\\\":[ \\\\\\\"609a3868fa59240001c7db7d\\\\\\\", \\\\\\\"609a3868fa59240001c7db85\\\\\\\" ], \\\\\\\"Sensors\\\\\\\":{ \\\\\\\"Temp\\\\\\\":772 } } }\\\"\r",
									"                        \r",
									"                        let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
									"                        // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
									"                        \r",
									"                        let url = requestObjectUrlStaging; \r",
									"                        let urlCustom = urlCheckLog + requestObjectUrlStaging; \r",
									"                        let SensorKey = fieldDataValue.CreateThingStateInfo.SensorKey;\r",
									"                        let sensor = pm.environment.get(\"random_Sensor_Control\");\r",
									"                        let x_ais_orderref = x_ais_OrderRef_ControlThingGroups_fail + current_timestamp;\r",
									"                        // let x_ais_AccountKey = pm.environment.get(\"GetResponse_AccountId\");\r",
									"                        let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken\");\r",
									"                        let thingGroupId = JSON.parse(pm.environment.get(\"GetResponse_ThingGroupIDArr\"));\r",
									"\r",
									"                        console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
									"                        console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
									"                        // console.log(\"headers.x_ais_AccountKey : \" + jsonParseRequestObject.headers[header_x_ais_accountkey] + \" = \" + x_ais_AccountKey);\r",
									"                        console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"                        console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
									"\r",
									"                        pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
									"                        pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
									"                        // pm.expect(jsonParseRequestObject.headers[header_x_ais_accountkey]).to.eql(x_ais_AccountKey);\r",
									"                        pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                        pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
									"\r",
									"                        let identity = JSON.parse(jsonParseRequestObject.headers.identity)\r",
									"                        console.log(\"headers.identity.ThingGroupID : [\" + identity.ThingGroupID + \"] = [\" + thingGroupId + \"]\");\r",
									"                        pm.expect(identity.ThingGroupID).to.eql(thingGroupId);\r",
									"                        \r",
									"                        let custom = JSON.parse(jsonParseRequestObject.headers.custom)\r",
									"                        console.log(\"headers.custom.url : \" + custom.url + \" = \" + urlCustom);\r",
									"                        console.log(\"headers.custom.accountkey : \" + custom.accountkey + \" = \" + null);\r",
									"                        console.log(\"headers.custom.ThingGroupID : [\" + custom.ThingGroupID + \"] = [\" + thingGroupId + \"]\" );\r",
									"                        \r",
									"                        pm.expect(custom.url).to.eql(urlCustom);\r",
									"                        pm.expect(custom.accountkey).to.eql(null);\r",
									"                        pm.expect(custom.ThingGroupID).to.eql(thingGroupId);\r",
									"\r",
									"                        console.log(\"queryString : \" + JSON.stringify(jsonParseRequestObject.queryString) + \" = \" + JSON.stringify({}));\r",
									"                        pm.expect(jsonParseRequestObject.queryString).to.eql({});\r",
									"\r",
									"                        console.log(\"routeParamteters : \" + JSON.stringify(jsonParseRequestObject.routeParamteters) + \" = \" + JSON.stringify({}));\r",
									"                        pm.expect(jsonParseRequestObject.routeParamteters).to.eql({});\r",
									"\r",
									"                        console.log(\"resquest.body.ThingGroupId : [\" + jsonParseRequestObject.body.ThingGroupId + \"] = [\" + thingGroupId + \"]\");\r",
									"                        console.log(\"resquest.body.Sensors.\" + SensorKey + \"  : \" + jsonParseRequestObject.body.Sensors[SensorKey] + \" = \" + sensor);\r",
									"\r",
									"                        pm.expect(jsonParseRequestObject.body.ThingGroupId).to.eql(thingGroupId);\r",
									"                        pm.expect(jsonParseRequestObject.body.Sensors[SensorKey]).to.eql(sensor);\r",
									"\r",
									"                        // check responseObject\r",
									"                        // \\\"responseObject\\\":\\\"{ \\\\\\\"OperationStatus\\\\\\\":{ \\\\\\\"Code\\\\\\\":\\\\\\\"40300\\\\\\\", \\\\\\\"DeveloperMessage\\\\\\\":\\\\\\\"The Client Data is Missing Or Invalid Parameter\\\\\\\", \\\\\\\"Details\\\\\\\":[ { \\\\\\\"Target\\\\\\\":\\\\\\\"accountId\\\\\\\", \\\\\\\"DeveloperMessage\\\\\\\":\\\\\\\"The accountId data is missing or invalid parameter.\\\\\\\" } ] } }\\\"\r",
									"                        let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
									"                        // console.log('jsonParseResponseObject',jsonParseResponseObject);\r",
									"\r",
									"                        console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeForbiddenMissingOrInvalidParameter);\r",
									"                        console.log(\"response.OperationStatus.DeveloperMessage : \" + jsonParseResponseObject.OperationStatus.DeveloperMessage + \" = \" + resultDescriptionTheClientDataIsMissingOrInvalidParameter);\r",
									"\r",
									"                        pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeForbiddenMissingOrInvalidParameter);  \r",
									"                        pm.expect(jsonParseResponseObject.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheClientDataIsMissingOrInvalidParameter);  \r",
									"\r",
									"                        let countDetails= jsonParseResponseObject.OperationStatus.Details;\r",
									"                        for(let i=0;i<countDetails.length;i++){\r",
									"\r",
									"                            console.log(\"response.OperationStatus.Details[\"+ i +\"].Target : \" + countDetails[i].Target + \" = \" + detailsResponse.target_accountId);\r",
									"                            console.log(\"response.OperationStatus.Details[\"+ i +\"].DeveloperMessage : \" + countDetails[i].DeveloperMessage + \" = \" + detailsResponse.developerMessage_accountId);\r",
									"\r",
									"                            pm.expect(countDetails[i].Target).to.eql(detailsResponse.target_accountId);\r",
									"                            pm.expect(countDetails[i].DeveloperMessage).to.eql(detailsResponse.developerMessage_accountId);\r",
									"                        } \r",
									"                    }); \r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"setTimeout(function(){SearchLogFindTid();}, 40000); \r",
									"setTimeout(function(){CheckLog();}, 50000); \r",
									"\r",
									"setTimeout(function(){RemoveGroup();}, 55000); \r",
									"setTimeout(function(){RemoveThingStateInfo();}, 60000); \r",
									"setTimeout(function(){RemoveThing();}, 65000); \r",
									"setTimeout(function(){RemoveAccount();}, 70000); \r",
									"setTimeout(function(){RemovePartner();}, 75000); \r",
									"\r",
									"setTimeout(function(){\r",
									"pm.environment.unset(\"current_timestamp\");\r",
									"pm.environment.unset(\"AccessToken\");\r",
									"pm.environment.unset(\"random_number\");\r",
									"pm.environment.unset(\"PartnerName\");\r",
									"pm.environment.unset(\"MerchantContact\");\r",
									"pm.environment.unset(\"CPID\");\r",
									"pm.environment.unset(\"GetResponse_PartnerId\");\r",
									"pm.environment.unset(\"AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountId\");\r",
									"for(let i=0;i<countData;i++){\r",
									"pm.environment.unset(\"random_IM\"+[i+1]);\r",
									"pm.environment.unset(\"random_ICCID\"+[i+1]);\r",
									"pm.environment.unset(\"ThingName\"+[i+1]);\r",
									"pm.environment.unset(\"ThingGroupName\"+[i+1]);\r",
									"}\r",
									"\r",
									"pm.environment.unset(\"GetResponse_ThingIDArr\");\r",
									"pm.environment.unset(\"random_Sensor\");\r",
									"pm.environment.unset(\"GetResponse_ThingGroupIDArr\");\r",
									"pm.environment.unset(\"tid\");\r",
									"pm.environment.unset(\"sessionId\");\r",
									"pm.environment.unset(\"SensorKey\");\r",
									"pm.environment.unset(\"random_Sensor_Control\");\r",
									"}, 90000); "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									" const moment = require('moment');\r",
									"var Username = pm.environment.get(\"Username\");\r",
									"var Password = pm.environment.get(\"Password\");\r",
									"\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//count for loop data\r",
									"var countData = 2;\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"pm.environment.set(\"SensorKey\",fieldDataValue.CreateThingStateInfo.SensorKey)\r",
									"\r",
									"//format YYYYMMDDHHMMSSS\r",
									"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
									"// console.log('currentTmestamp',currentTmestamp);\r",
									"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- statusCodeList --------------//\r",
									"//set variable to statusCodeList JSON.parse\r",
									"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
									"//set global variable to statusCode 200\r",
									"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
									"//set global variable to statusCode 201\r",
									"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
									"//set global variable to statusCode 403\r",
									"pm.globals.set(\"statusCodeForbidden\", statusCodeList.statusCodeForbidden);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultCodeList --------------//\r",
									"//set variable to resultCodeList JSON.parse\r",
									"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
									"//set global variable to resultCode \"20000\"\r",
									"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
									"//set global variable to resultCode \"20100\"\r",
									"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
									"//set global variable to resultCode \"40300\"\r",
									"pm.globals.set(\"resultCodeForbiddenMissingOrInvalidParameter\", resultCodeList.resultCodeForbiddenMissingOrInvalidParameter);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionSuccessList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
									"//set global variable to resultDescription \"SignInProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
									"//set global variable to resultDescription \"CreatePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
									"//set global variable to resultDescription \"CreateAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
									"//set global variable to resultDescription \"CreateThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThing\", resultDescriptionSuccessList.resultDescriptionCreateThing);\r",
									"//set global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThingStateInfo\", resultDescriptionSuccessList.resultDescriptionCreateThingStateInfo);\r",
									"//set global variable to resultDescription \"RemovePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
									"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
									"//set global variable to resultDescription \"RemoveThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThing\", resultDescriptionSuccessList.resultDescriptionRemoveThing);\r",
									"//set global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThingStateInfo\", resultDescriptionSuccessList.resultDescriptionRemoveThingStateInfo);\r",
									"//set global variable to resultDescription \"CreateGroup is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateGroup\", resultDescriptionSuccessList.resultDescriptionCreateGroup);\r",
									"//set global variable to resultDescription \"RemoveGroup is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveGroup\", resultDescriptionSuccessList.resultDescriptionRemoveGroup);\r",
									"//set global variable to resultDescription \"Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccess\", resultDescriptionSuccessList.resultDescriptionSuccess);\r",
									"//set global variable to resultDescription \"Created Success\"\r",
									"pm.globals.set(\"resultDescriptionCreatedSuccess\", resultDescriptionSuccessList.resultDescriptionCreatedSuccess);\r",
									"//set global variable to resultDescription \"ControlManyGroups is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessControlManyGroups\", resultDescriptionSuccessList.resultDescriptionSuccessControlManyGroups);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionErrorList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
									"//set global variable to resultDescription \"The Parameter x-ais-AccountKey is Missing Or Invalid\"\r",
									"// pm.globals.set(\"resultDescriptionErrorParameterXAisAccountKeyMissingOrInvalid\", resultDescriptionErrorList.resultDescriptionErrorParameterXAisAccountKeyMissingOrInvalid);\r",
									"//set global variable to resultDescription \"The Client Data is Missing Or Invalid Parameter\"\r",
									"pm.globals.set(\"resultDescriptionTheClientDataIsMissingOrInvalidParameter\", resultDescriptionErrorList.resultDescriptionTheClientDataIsMissingOrInvalidParameter);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- HeaderList --------------//\r",
									"//set variable to HeaderList JSON.parse\r",
									"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
									"//---------------- set globals Other --------------//\r",
									"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
									"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
									"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
									"//set global variable to kbn-versio \"7.5.1\"\r",
									"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Signin_ --------------//\r",
									"//set global variable to x_ais_OrderRef \"Signin_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreatePartner --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
									"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
									"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
									"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreateAccount --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
									"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
									"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Thing --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThing\", HeaderList.Thing.x_ais_OrderRef_CreateThing);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThing\", HeaderList.Thing.x_ais_OrderDesc_CreateThing);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThing\", HeaderList.Thing.x_ais_OrderRef_RemoveThing);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThing\", HeaderList.Thing.x_ais_OrderDesc_RemoveThing);\r",
									"//set global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_RemoveThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_RemoveThingStateInfo);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Group --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateGroup_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateGroup\", HeaderList.Group.x_ais_OrderRef_CreateGroup);\r",
									"//set global variable to x_ais_OrderDesc \"CreateGroup\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateGroup\", HeaderList.Group.x_ais_OrderDesc_CreateGroup);\r",
									"//set global variable to x_ais_OrderRef \"RemoveGroup_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveGroup\", HeaderList.Group.x_ais_OrderRef_RemoveGroup);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveGroup\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveGroup\", HeaderList.Group.x_ais_OrderDesc_RemoveGroup);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Control --------------//\r",
									"//set global variable to x_ais_OrderRef \"ControlThingGroups_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ControlThingGroups\", HeaderList.Control.x_ais_OrderRef_ControlThingGroups);\r",
									"//set global variable to x_ais_OrderRef \"ControlThingGroupsfail_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ControlThingGroups_fail\", HeaderList.Control.x_ais_OrderRef_ControlThingGroups_fail);\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"SignInProcess is Success\"\r",
									"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
									"//get global variable to resultDescription \"CreatePartner is Success\"\r",
									"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
									"//get global variable to resultDescription \"CreateAccount is Success\"\r",
									"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
									"//get global variable to resultDescription \"CreateThing is Success\"\r",
									"var resultDescriptionCreateThing = pm.globals.get(\"resultDescriptionCreateThing\");\r",
									"//get global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"var resultDescriptionCreateThingStateInfo = pm.globals.get(\"resultDescriptionCreateThingStateInfo\");\r",
									"//get global variable to resultDescription \"CreateGroup is Success\"\r",
									"var resultDescriptionCreateGroup = pm.globals.get(\"resultDescriptionCreateGroup\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- urlRouteList --------------//\r",
									"//set variable to urlRouteList JSON.parse\r",
									"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
									"//---------------- set url Create --------------//\r",
									"//set global variable to url \"/api/v1/auth/signin\"\r",
									"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
									"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
									"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"pm.globals.set(\"urlThingCreateThing\", urlRouteList.Thing.urlThingCreateThing);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"pm.globals.set(\"urlThingCreateThingStateInfo\", urlRouteList.Thing.urlThingCreateThingStateInfo);\r",
									"//set global variable to url \"/api/v1/Group/CreateGroup\"\r",
									"pm.globals.set(\"urlGroupCreateGroup\", urlRouteList.Group.urlGroupCreateGroup);\r",
									"//---------------- get url Create --------------//\r",
									"//get global variable to url \"/api/v1/auth/signin\"\r",
									"var urlSignin = pm.globals.get(\"urlSignin\");\r",
									"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
									"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"var urlThingCreateThing = pm.globals.get(\"urlThingCreateThing\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"var urlThingCreateThingStateInfo = pm.globals.get(\"urlThingCreateThingStateInfo\");\r",
									"//get global variable to url \"/api/v1/Group/CreateGroup\"\r",
									"var urlGroupCreateGroup = pm.globals.get(\"urlGroupCreateGroup\");\r",
									"//---------------- set url Remove --------------//\r",
									"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
									"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"pm.globals.set(\"urlThingRemoveThing\", urlRouteList.Thing.urlThingRemoveThing);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"pm.globals.set(\"urlThingRemoveThingStateInfo\", urlRouteList.Thing.urlThingRemoveThingStateInfo);\r",
									"//set global variable to url \"/api/v1/Group/RemoveGroup\"\r",
									"pm.globals.set(\"urlGroupRemoveGroup\", urlRouteList.Group.urlGroupRemoveGroup);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Signin_ --------------//\r",
									"//get global variable to x_ais_OrderRef \"Signin_\"\r",
									"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"var x_ais_OrderRef_CreateThing = pm.globals.get(\"x_ais_OrderRef_CreateThing\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"var x_ais_OrderDesc_CreateThing = pm.globals.get(\"x_ais_OrderDesc_CreateThing\");\r",
									"//get global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"var x_ais_OrderRef_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderRef_CreateThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"var x_ais_OrderDesc_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_CreateThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Group --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateGroup_\"\r",
									"var x_ais_OrderRef_CreateGroup = pm.globals.get(\"x_ais_OrderRef_CreateGroup\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateGroup\"\r",
									"var x_ais_OrderDesc_CreateGroup = pm.globals.get(\"x_ais_OrderDesc_CreateGroup\");\r",
									"//------------------------------------------------------------//\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            // console.log('response111',response);\r",
									"            // console.log('errerrerr',err);\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// Signin get token\r",
									" Signin = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSignin = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestSignin = {\r",
									"            mode: 'raw',\r",
									"            raw: \r",
									"            JSON.stringify({\r",
									"                username:Username,\r",
									"                password:Password\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsSignin = {\r",
									"            url: url + provisioningapis + urlSignin,\r",
									"            method: 'POST',\r",
									"            header: headersOptSignin,\r",
									"            body: httpRequestSignin\r",
									"        };\r",
									"        // console.log('request Signin');\r",
									"        let response = await reqPromise(optionsSignin);\r",
									"        let jsonDataSignin = await response.json();\r",
									"\r",
									"        // setAccessToken\r",
									"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
									"\r",
									"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // SignInProcess is Success\r",
									"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
									"        });\r",
									"\r",
									"        //set random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //set PartnerName\r",
									"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
									"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
									"        //set MerchantContact\r",
									"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
									"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
									"        // set CPID\r",
									"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
									"        pm.environment.set(\"CPID\", CPIDValue)\r",
									"        \r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreatePartner\r",
									" CreatePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreatePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreatePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
									"                \"PartnerType\": [\r",
									"                    \"Supplier\",\r",
									"                    \"Customer\"\r",
									"                ],\r",
									"                \"PartnerDetail\": {\r",
									"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
									"                    \"CPID\": pm.environment.get(\"CPID\")\r",
									"                },\r",
									"                \"Property\": {\r",
									"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsCreatePartner = {\r",
									"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreatePartner,\r",
									"            body: httpRequestCreatePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsCreatePartner);\r",
									"        let jsonDataCreatePartner = await response.json();\r",
									"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
									"    \r",
									"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreatePartner is Success\r",
									"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
									"        });\r",
									"\r",
									"        //GetResponse_PartnerId\r",
									"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
									"\r",
									"        //Accountname\r",
									"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
									"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateAccount\r",
									" CreateAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreateAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
									"                })\r",
									"        };\r",
									"        \r",
									"        let optionsCreateAccount = {\r",
									"            url: url + provisioningapis + urlAccountCreateAccount,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateAccount,\r",
									"            body: httpRequestCreateAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateAccount');\r",
									"        let response = await reqPromise(optionsCreateAccount);\r",
									"        let jsonDataCreateAccount = await response.json();\r",
									"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
									"    \r",
									"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateAccount : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateAccount is Success\r",
									"        pm.test('CreateAccount : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
									"        });\r",
									"        // GetResponse_AccountName\r",
									"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
									"        // GetResponse_AccountId\r",
									"        pm.environment.set(\"GetResponse_AccountId\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
									"       \r",
									" // // random_IM\r",
									"        // pm.environment.set(\"random_IM\", _.random(10000000, 99999999)+\" \"+_.random(1000000, 9999999))\r",
									"        // // random_ICCID\r",
									"        // pm.environment.set(\"random_ICCID\", _.random(1000000, 9999999)+\" \"+_.random(100000, 999999))\r",
									"        // // random_number\r",
									"        // pm.environment.set(\"random_number\",pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        // //ThingName\r",
									"        // let thingNameValue = fieldDataValue.Thing.ThingNameValue; // \"Sensor_TestThingName\"\r",
									"        // pm.environment.set(\"ThingName\", thingNameValue + pm.environment.get(\"random_number\"))\r",
									"\r",
									"        // random_number\r",
									"        pm.environment.set(\"random_number\",pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"\r",
									"        for(let i=0;i<countData;i++){\r",
									"            // random_IM\r",
									"            pm.environment.set(\"random_IM\"+[i+1], _.random(10000000, 99999999)+\" \"+_.random(1000000, 9999999))\r",
									"            // random_ICCID\r",
									"            pm.environment.set(\"random_ICCID\"+[i+1], _.random(1000000, 9999999)+\" \"+_.random(100000, 999999))\r",
									"\r",
									"            //ThingName\r",
									"            let thingNameValue = fieldDataValue.Thing.ThingNameValue; // \"Sensor_TestThingName\"\r",
									"            pm.environment.set(\"ThingName\"+[i+1],thingNameValue + [i+1] + pm.environment.get(\"random_number\"))\r",
									"\r",
									"            //ThinggroupName\r",
									"            let ThingGroupNameValue = fieldDataValue.Group.ThingGroupNameValue; // \"Sensor_TestThingGroupName\"\r",
									"            pm.environment.set(\"ThingGroupName\"+[i+1],ThingGroupNameValue + [i+1] + pm.environment.get(\"random_number\"))\r",
									"        }\r",
									"            \r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThing\r",
									" CreateThingArr = async () =>  {\r",
									"    try {\r",
									"        \r",
									"        // header\r",
									"        let headersOptCreateThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThing');\r",
									"        let dataThingIdArr = [];\r",
									"        for(let i=0;i<countData;i++){\r",
									"            // body\r",
									"            let httpRequestCreateThing = {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                    \"ThingName\": pm.environment.get(\"ThingName\"+ [i+1]),\r",
									"                    \"IMEI\": pm.environment.get(\"random_IM\"+ [i+1]),\r",
									"                    \"IMSI\": pm.environment.get(\"random_IM\"+ [i+1]),\r",
									"                    \"ICCID\": pm.environment.get(\"random_ICCID\"+ [i+1]),\r",
									"                    \"RouteUrl\": fieldDataValue.Thing.RouteUrlValue , //[\"http://10.12.3.4:2019/api/information/AddInformation\"]\r",
									"                    \"RouteInfo\": {\r",
									"                        \"MIMO_ID\": fieldDataValue.Thing.RouteInfoMIMOIDValue , //\"606edada\"\r",
									"                        \"MIMO_SerialNo\": fieldDataValue.Thing.RouteInfoMIMOSerialNoValue //5466758878\r",
									"                    },\r",
									"                    \"RouteFlag\": {\r",
									"                        \"ThingName\": fieldDataValue.Thing.RouteFlagThingNameValue , //true\r",
									"                        \"ThingToken\": fieldDataValue.Thing.RouteFlagThingTokenValue, //true\r",
									"                        \"IMEI\": fieldDataValue.Thing.RouteFlagIMEIValue, //true\r",
									"                        \"ICCID\": fieldDataValue.Thing.RouteFlagICCIDValue, //true\r",
									"                        \"RouteInfo\": fieldDataValue.Thing.RouteFlagRouteInfoValue //true\r",
									"                    }\r",
									"                })\r",
									"            };\r",
									"            \r",
									"            let optionsCreateThing = {\r",
									"                url: url + provisioningapis + urlThingCreateThing,\r",
									"                method: 'POST',\r",
									"                header: headersOptCreateThing,\r",
									"                body: httpRequestCreateThing\r",
									"            };\r",
									"            let response = await reqPromise(optionsCreateThing);\r",
									"            let jsonDataCreateThing = await response.json();\r",
									"            let ThingId = await jsonDataCreateThing.ThingInfo.ThingId;\r",
									"            dataThingIdArr.push(ThingId);\r",
									"            let operationStatusCreateThing = await jsonDataCreateThing.OperationStatus;\r",
									"\r",
									"            //201\r",
									"            pm.test(\"CreateThing\"+ [i+1]+ \" : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"                pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"            });\r",
									"            //20100\r",
									"            pm.test('CreateThing'+ [i+1]+ ' : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"                pm.expect(operationStatusCreateThing).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"            });\r",
									"            //CreateThing is Success\r",
									"            pm.test('CreateThing'+ [i+1]+ ' : OperationStatus Description is '+'\"'+ resultDescriptionCreateThing+'\"', function () {\r",
									"                pm.expect(operationStatusCreateThing).to.have.property('Description', resultDescriptionCreateThing);\r",
									"            });\r",
									"        }\r",
									"        \r",
									"        // console.log('dataThingIdArr',dataThingIdArr);\r",
									"        // pm.environment.set(\"GetResponse_ThingID\",jsonDataCreateThing.ThingInfo.ThingId)\r",
									"        pm.environment.set(\"GetResponse_ThingIDArr\",JSON.stringify(dataThingIdArr))\r",
									"        \r",
									"        //Get Random Sensor \r",
									"        pm.environment.set(\"random_Sensor\", _.random(100, 999))\r",
									"\r",
									"        //Get Random Sensor Control\r",
									"        pm.environment.set(\"random_Sensor_Control\", _.random(100, 999))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThingStateInfo\r",
									" CreateThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let dataThingIDArray = JSON.parse(pm.environment.get(\"GetResponse_ThingIDArr\"));\r",
									"        // console.log('dataThingIDArray',dataThingIDArray);\r",
									"\r",
									"        // {\"Temp\" : pm.environment.get(\"random_Sensor\")}\r",
									"        let sensorValue = {};\r",
									"        sensorValue[fieldDataValue.CreateThingStateInfo.SensorKey] = pm.environment.get(\"random_Sensor\");\r",
									"        // console.log('sensorValue',sensorValue);\r",
									"        \r",
									"        let httpRequestCreateThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": dataThingIDArray,\r",
									"                \"Type\": fieldDataValue.CreateThingStateInfo.Type_Report,\r",
									"                \"Sensor\": sensorValue\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingCreateThingStateInfo,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThingStateInfo,\r",
									"            body: httpRequestCreateThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThingStateInfo');\r",
									"        let response = await reqPromise(optionsCreateThingStateInfo);\r",
									"\r",
									"        let jsonDataCreateThingStateInfo = await response.json();\r",
									"        let operationStatusCreateThingStateInfo = await jsonDataCreateThingStateInfo.OperationStatus;\r",
									"        // console.log('operationStatusCreateThingStateInfo',operationStatusCreateThingStateInfo);\r",
									"\r",
									"        //200\r",
									"        pm.test(\"CreateThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //CreateThingStateInfo is Success\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionCreateThingStateInfo+'\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Description', resultDescriptionCreateThingStateInfo);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThingGroup\r",
									" CreateThingGroupArr = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThingGroup = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateGroup + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateGroup,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        let dataThingIDArray = JSON.parse(pm.environment.get(\"GetResponse_ThingIDArr\"));\r",
									"        // console.log('dataThingIDArray',dataThingIDArray);\r",
									"\r",
									"        let dataThingGroupIdArr = [];\r",
									"        for(let i=0;i<countData;i++){\r",
									"            // body\r",
									"            let httpRequestCreateThingGroup = {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                        \"ThingGroupName\": pm.environment.get(\"ThingGroupName\"+ [i+1]),\r",
									"                        \"ThingId\": dataThingIDArray\r",
									"                        })\r",
									"            };\r",
									"             let optionsCreateThingGroup = {\r",
									"                url: url + provisioningapis + urlGroupCreateGroup,\r",
									"                method: 'POST',\r",
									"                header: headersOptCreateThingGroup,\r",
									"                body: httpRequestCreateThingGroup\r",
									"            };\r",
									"\r",
									"            // console.log('request CreateThingGroup');\r",
									"            let response = await reqPromise(optionsCreateThingGroup);\r",
									"\r",
									"            let jsonDataCreateThingGroup = await response.json();\r",
									"            let operationStatusCreateThingGroup = await jsonDataCreateThingGroup.OperationStatus;\r",
									"        \r",
									"            //200\r",
									"            pm.test(\"CreateThingGroup\"+ [i+1]+ \" : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"                pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"            });\r",
									"            //20000\r",
									"            pm.test('CreateThingGroup'+ [i+1]+ ' : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"                pm.expect(operationStatusCreateThingGroup).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"            });\r",
									"            //CreateThingGroup is Success\r",
									"            pm.test('CreateThingGroup'+ [i+1]+ ' : OperationStatus Description is '+'\"'+ resultDescriptionCreateGroup+'\"', function () {\r",
									"                pm.expect(operationStatusCreateThingGroup).to.have.property('Description', resultDescriptionCreateGroup);\r",
									"            });\r",
									"\r",
									"            dataThingGroupIdArr.push(jsonDataCreateThingGroup.GroupInfo.GroupId);\r",
									"            \r",
									"        }\r",
									"            // console.log('dataThingGroupIdArr',dataThingGroupIdArr);\r",
									"            // GetResponse_ThingGroupID\r",
									"            pm.environment.set(\"GetResponse_ThingGroupIDArr\",JSON.stringify(dataThingGroupIdArr));\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"Signin();\r",
									"setTimeout(async function(){await CreatePartner();}, 3000); \r",
									"setTimeout(async function(){await CreateAccount();}, 6000); \r",
									"setTimeout(async function(){await CreateThingArr();}, 8000); \r",
									"setTimeout(async function(){await CreateThingStateInfo();}, 20000); \r",
									"setTimeout(async function(){await CreateThingGroupArr();}, 30000); \r",
									"setTimeout(async function(){}, 35000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-ais-OrderRef",
								"value": "{{x_ais_OrderRef_ControlThingGroups_fail}}{{current_timestamp}}"
							},
							{
								"key": "x-ais-AccountKey",
								"type": "text",
								"value": "{{GetResponse_AccountId}}",
								"disabled": true
							},
							{
								"key": "x-ais-AccessToken",
								"value": "{{Bearer}} {{AccessToken}}"
							},
							{
								"key": "Accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"ThingGroupId\": {{GetResponse_ThingGroupIDArr}},\r\n  \"Sensors\": {\r\n    \"{{SensorKey}}\": {{random_Sensor_Control}}\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{url}}{{mg4controlapis}}/api/v1/Control/ThingGroups",
							"host": [
								"{{url}}{{mg4controlapis}}"
							],
							"path": [
								"api",
								"v1",
								"Control",
								"ThingGroups"
							]
						},
						"description": "Type:Desire"
					},
					"response": []
				},
				{
					"name": "ControlThingGroups_TST_F4_0_2_003_Error_ThingGroupNotObjectId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//count for loop data\r",
									"var countData = 2;\r",
									"var countDataGrop = 1;\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"//---------------- detailsResponse --------------//\r",
									"//set variable to detailsResponse JSON.parse\r",
									"var detailsResponse = JSON.parse(pm.environment.get(\"detailsResponse\"));\r",
									"// console.log('detailsResponse',detailsResponse);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to xAisOrderRef \"RemoveThing_\"\r",
									"var x_ais_OrderRef_RemoveThing = pm.globals.get(\"x_ais_OrderRef_RemoveThing\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"var x_ais_OrderDesc_RemoveThing = pm.globals.get(\"x_ais_OrderDesc_RemoveThing\");\r",
									"//get global variable to x_ais_OrderRef \"RemoveThingStateInfo_\"\r",
									"var x_ais_OrderDesc_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_RemoveThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThingStateInfo\"\r",
									"var x_ais_OrderRef_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderRef_RemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Group --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveGroup_\"\r",
									"var x_ais_OrderRef_RemoveGroup = pm.globals.get(\"x_ais_OrderRef_RemoveGroup\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveGroup\"\r",
									"var x_ais_OrderDesc_RemoveGroup = pm.globals.get(\"x_ais_OrderDesc_RemoveGroup\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Control --------------//\r",
									"//get global variable to x_ais_OrderRef \"ControlThingGroups_\"\r",
									"var x_ais_OrderRef_ControlThingGroups = pm.globals.get(\"x_ais_OrderRef_ControlThingGroups\");\r",
									"//get global variable to x_ais_OrderRef \"ControlThingGroupsfail_\"\r",
									"var x_ais_OrderRef_ControlThingGroups_fail = pm.globals.get(\"x_ais_OrderRef_ControlThingGroups_fail\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get url Remove --------------//\r",
									"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
									"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"var urlThingRemoveThing = pm.globals.get(\"urlThingRemoveThing\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"var urlThingRemoveThingStateInfo = pm.globals.get(\"urlThingRemoveThingStateInfo\");\r",
									"//get global variable to url \"/api/v1/Group/RemoveGroup\"\r",
									"var urlGroupRemoveGroup = pm.globals.get(\"urlGroupRemoveGroup\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"RemovePartner is Success\"\r",
									"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
									"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
									"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
									"//get global variable to resultDescription \"RemoveThing is Success\"\r",
									"var resultDescriptionRemoveThing = pm.globals.get(\"resultDescriptionRemoveThing\");\r",
									"//get global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"var resultDescriptionRemoveThingStateInfo = pm.globals.get(\"resultDescriptionRemoveThingStateInfo\");\r",
									"//get global variable to resultDescription \"RemoveGroup is Success\"\r",
									"var resultDescriptionRemoveGroup = pm.globals.get(\"resultDescriptionRemoveGroup\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 403\r",
									"var statusCodeForbidden = pm.globals.get(\"statusCodeForbidden\");\r",
									"//get global variable to resultCode \"40300\"\r",
									"var resultCodeForbiddenMissingOrInvalidParameter = pm.globals.get(\"resultCodeForbiddenMissingOrInvalidParameter\");\r",
									"//get global variable to resultDescription \"The ThingGroupId is Not Found\"\r",
									"// var resultDescriptionErrorTheThingGroupIdFieldIsNotObjectId = pm.globals.get(\"resultDescriptionErrorTheThingGroupIdFieldIsNotObjectId\");\r",
									"//get global variable to statusCode 400\r",
									"var statusCodeBadRequest = pm.globals.get(\"statusCodeBadRequest\");\r",
									"//get global variable to resultCode \"40000\"\r",
									"var resultCodeBadRequest_40000 = pm.globals.get(\"resultCodeBadRequest_40000\");\r",
									"//get global variable to resultDescription \"The client requested missing or invalid  format.\"\r",
									"var resultDescriptionTheClientRequestedMissingOrInvalidFormat = pm.globals.get(\"resultDescriptionTheClientRequestedMissingOrInvalidFormat\");\r",
									"//------------------------------------------------------------//\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"ControlThingGroups : Status code is \" + statusCodeBadRequest, function () {\r",
									"    pm.response.to.have.status(statusCodeBadRequest);\r",
									"});\r",
									"\r",
									"pm.test('ControlThingGroups : OperationStatus Code is '+'\"'+ resultCodeBadRequest_40000 +'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeBadRequest_40000);\r",
									"});\r",
									"\r",
									"pm.test('ControlThingGroups : OperationStatus DeveloperMessage is '+'\"'+ resultDescriptionTheClientRequestedMissingOrInvalidFormat+'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheClientRequestedMissingOrInvalidFormat);\r",
									"});\r",
									"\r",
									"pm.test('ControlThingGroups : OperationStatus Details is '+'\"'+ detailsResponse.target_ThingGroupId + \" : \" + detailsResponse.developerMessage_ThingGroupId_notObjectId+'\"', function () {\r",
									"    let countDetails= jsonData.OperationStatus.Details;\r",
									"    for(let i=0;i<countDetails.length;i++){\r",
									"        pm.expect(countDetails[i].Target).to.eql(detailsResponse.target_ThingGroupId);\r",
									"        pm.expect(countDetails[i].DeveloperMessage).to.eql(detailsResponse.developerMessage_ThingGroupId_notObjectId);\r",
									"    }\r",
									"});\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// RemovePartner\r",
									" RemovePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemovePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemovePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemovePartner = {\r",
									"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemovePartner,\r",
									"            body: httpRequestRemovePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request RemovePartner');\r",
									"        let response = await reqPromise(optionsRemovePartner);\r",
									"        let jsonDataRemovePartner = await response.json();\r",
									"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
									"    \r",
									"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemovePartner is Success\r",
									"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveAccount\r",
									" RemoveAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemoveAccount = {\r",
									"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveAccount,\r",
									"            body: httpRequestRemoveAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveAccount');\r",
									"        let response = await reqPromise(optionsRemoveAccount);\r",
									"        let jsonDataRemoveAccount = await response.json();\r",
									"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
									"    \r",
									"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveAccount is Success\r",
									"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThing\r",
									" RemoveThing = async () =>  {\r",
									"    try {\r",
									"\r",
									"        // header\r",
									"        let headersOptRemoveThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        let dataThingIDArray = JSON.parse(pm.environment.get(\"GetResponse_ThingIDArr\"));\r",
									"\r",
									"        for(let i=0;i<countData;i++){\r",
									"\r",
									"            // body\r",
									"            let httpRequestRemoveThing = {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                    \"ThingId\": dataThingIDArray[i]\r",
									"                })\r",
									"            };\r",
									"\r",
									"            let optionsRemoveThing = {\r",
									"                url: url + provisioningapis + urlThingRemoveThing,\r",
									"                method: 'DELETE',\r",
									"                header: headersOptRemoveThing,\r",
									"                body: httpRequestRemoveThing\r",
									"            };\r",
									"            // console.log('request RemoveThing');\r",
									"            let response = await reqPromise(optionsRemoveThing);\r",
									"            let jsonDataRemoveThing = await response.json();\r",
									"            // console.log('jsonDataRemoveThing',jsonDataRemoveThing)\r",
									"        \r",
									"            let operationStatusRemoveThing = await jsonDataRemoveThing.OperationStatus;\r",
									"\r",
									"            //200\r",
									"            pm.test(\"RemoveThing\" + [i+1]+ \" : Status code is \" + statusCodeSuccess, function () {\r",
									"                pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"            });\r",
									"            //20000\r",
									"            pm.test('RemoveThing' + [i+1]+ ' : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"                pm.expect(operationStatusRemoveThing).to.have.property('Code', resultCodeSuccess);\r",
									"            });\r",
									"            //RemoveThing is Success\r",
									"            pm.test('RemoveThing' + [i+1]+ ' : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThing+'\"', function () {\r",
									"                pm.expect(operationStatusRemoveThing).to.have.property('Description', resultDescriptionRemoveThing);\r",
									"            });\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThingStateInfo\r",
									" RemoveThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"            \r",
									"        };\r",
									"\r",
									"        let dataThingIDArray = JSON.parse(pm.environment.get(\"GetResponse_ThingIDArr\"));\r",
									"\r",
									"        for(let i=0;i<dataThingIDArray.length;i++){\r",
									"        \r",
									"            // body\r",
									"            let httpRequestRemoveThingStateInfo = {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                    \"ThingId\": dataThingIDArray[i],\r",
									"                    \"stateType\": fieldDataValue.CreateThingStateInfo.Type_Report, //Report\r",
									"                    \"stateKey\": fieldDataValue.CreateThingStateInfo.SensorKey //Temp\r",
									"                })\r",
									"            };\r",
									"\r",
									"            let optionsRemoveThingStateInfo = {\r",
									"                url: url + provisioningapis + urlThingRemoveThingStateInfo,\r",
									"                method: 'DELETE',\r",
									"                header: headersOptRemoveThingStateInfo,\r",
									"                body: httpRequestRemoveThingStateInfo\r",
									"            };\r",
									"\r",
									"            // console.log('response RemoveThingStateInfo');\r",
									"            let response = await reqPromise(optionsRemoveThingStateInfo);\r",
									"            let jsonDataRemoveThingStateInfo = await response.json();\r",
									"            // console.log('jsonDataRemoveThing',jsonDataRemoveThingStateInfo)\r",
									"        \r",
									"            let operationStatusRemoveThingStateInfo = await jsonDataRemoveThingStateInfo.OperationStatus;\r",
									"\r",
									"            //200\r",
									"            pm.test(\"RemoveThingStateInfo\" + [i+1]+ \" : Status code is \" + statusCodeSuccess, function () {\r",
									"                pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"            });\r",
									"            //20000\r",
									"            pm.test('RemoveThingStateInfo' + [i+1]+ ' : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"                pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"            });\r",
									"            //RemoveThingStateInfo is Success\r",
									"            pm.test('RemoveThingStateInfo' + [i+1]+ ' : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThingStateInfo+'\"', function () {\r",
									"                pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Description', resultDescriptionRemoveThingStateInfo);\r",
									"            });\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveGroup\r",
									" RemoveGroup = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveGroup = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveGroup + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveGroup,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"            \r",
									"        };\r",
									"\r",
									"        let dataThingGroupIDArray = JSON.parse(pm.environment.get(\"GetResponse_ThingGroupIDArr\"));\r",
									"\r",
									"        for(let i=0;i<countDataGrop;i++){\r",
									"        \r",
									"            // body\r",
									"            let httpRequestRemoveGroup = {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                    \"GroupId\": dataThingGroupIDArray[0]\r",
									"                })\r",
									"            };\r",
									"\r",
									"            let optionsRemoveGroup = {\r",
									"                url: url + provisioningapis + urlGroupRemoveGroup,\r",
									"                method: 'DELETE',\r",
									"                header: headersOptRemoveGroup,\r",
									"                body: httpRequestRemoveGroup\r",
									"            };\r",
									"\r",
									"            // console.log('response RemoveGroup');\r",
									"            let response = await reqPromise(optionsRemoveGroup);\r",
									"            let jsonDataRemoveGroup = await response.json();\r",
									"            // console.log('jsonDataRemoveThing',jsonDataRemoveGroup)\r",
									"        \r",
									"            let operationStatusRemoveGroup = await jsonDataRemoveGroup.OperationStatus;\r",
									"\r",
									"            //200\r",
									"            pm.test(\"RemoveGroup\" + [i+1]+ \" : Status code is \" + statusCodeSuccess, function () {\r",
									"                pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"            });\r",
									"            //20000\r",
									"            pm.test('RemoveGroup' + [i+1]+ ' : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"                pm.expect(operationStatusRemoveGroup).to.have.property('Code', resultCodeSuccess);\r",
									"            });\r",
									"            //RemoveGroup is Success\r",
									"            pm.test('RemoveGroup' + [i+1]+ ' : OperationStatus Description is '+'\"'+ resultDescriptionRemoveGroup+'\"', function () {\r",
									"                pm.expect(operationStatusRemoveGroup).to.have.property('Description', resultDescriptionRemoveGroup);\r",
									"            });\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"//---------------- LogDefaultValue --------------//\r",
									"//set variable to LogDefaultValue JSON.parse\r",
									"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
									"// console.log('LogDefaultValue',LogDefaultValue);\r",
									"//---------------- set globals Other --------------//\r",
									"var SearchLog = LogDefaultValue.SearchLog;\r",
									"// console.log('SearchLog',SearchLog);\r",
									"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
									"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
									"var kbn_version = SearchLog.header.kbn_version;\r",
									"var authorization = SearchLog.header.Authorization;\r",
									"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
									"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
									"var namespace = LogDefaultValue.Other.namespace_control4mg;\r",
									"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
									"var header_x_ais_accountkey = LogDefaultValue.Other.header_x_ais_accountkey;\r",
									"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
									"var methodPost = LogDefaultValue.Other.methodPost;\r",
									"\r",
									"// Detail\r",
									"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
									"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
									"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
									"\r",
									"// Summary\r",
									"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
									"// var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
									"var identitySummary = \"\";\r",
									"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
									"// ControlAPIs\r",
									"var applicationName = LogDefaultValue.Control.applicationName_mg4;\r",
									"var cmdName = LogDefaultValue.Control.cmdNameThingGroups;\r",
									"// var resultDesc = LogDefaultValue.Control.resultDescThing_success;\r",
									"var endPointNameControlAPIs = LogDefaultValue.Control.endPointNameControlAPIs;\r",
									"var endPointNameDesireEx = LogDefaultValue.Control.endPointNameDesireEx;\r",
									"var containerId = LogDefaultValue.Control.containerId;\r",
									"var requestObjectUrlStaging = LogDefaultValue.Control.requestObjectUrlStagingThingGroups;\r",
									"var xProtocolControl = LogDefaultValue.Control.xProtocolControl;\r",
									"var responseObjectPublished = LogDefaultValue.Control.responseObjectPublished;\r",
									"\r",
									"// Check CDR (Summary Log) and EDR (Detail Log)\r",
									"SearchLogFindTid = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSearchLogFindTid = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = x_ais_OrderRef_ControlThingGroups_fail +  current_timestamp; \r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestSearchLogFindTid = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"\r",
									"        let optionsSearchLogFindTid = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptSearchLogFindTid,\r",
									"            body: httpRequestSearchLogFindTid\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsSearchLogFindTid);\r",
									"        let jsonDataSearchLogFindTid = await response.json();\r",
									"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
									"        console.log('hits',hits)\r",
									"  \r",
									"        // find tid\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            // let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"        \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            if(applicationNameValue == applicationName){\r",
									"                // let tid = hits[i]._source.cauldron.tid;\r",
									"                // pm.environment.set(\"tid\", tid);\r",
									"                let sessionId = hits[i]._source.cauldron.sessionId;\r",
									"                pm.environment.set(\"sessionId\", sessionId);\r",
									"                break;\r",
									"           }\r",
									"        }\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"CheckLog = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCheckLog = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = pm.environment.get(\"sessionId\");\r",
									"\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestCheckLog = {\r",
									"            mode: 'raw',\r",
									"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"        let optionsCheckLog = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptCheckLog,\r",
									"            body: httpRequestCheckLog\r",
									"        }; \r",
									"        let response = await reqPromise(optionsCheckLog);\r",
									"        let jsonDataCheckLog = await response.json();\r",
									"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
									"        \r",
									"        // //200\r",
									"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });     \r",
									"        \r",
									"        let hits = jsonDataCheckLog.hits.hits\r",
									"        console.log('hits',hits)\r",
									"  \r",
									"        // find logType\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            //  let logType = hits[i]._source.cauldron.logType\r",
									"            let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"           \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            \r",
									"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
									"            // console.log('resultDataLog',resultDataLog)\r",
									"\r",
									"            let tidControl = x_ais_OrderRef_ControlThingGroups_fail + current_timestamp;\r",
									"            // console.log(tidControl);\r",
									"            if(applicationNameValue == applicationName){\r",
									"                 \r",
									"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ControlAPIs\r",
									"                    pm.test(\"Check Summary Log : ControlThingGroups\" , function () {\r",
									"                        console.log(\"======== Check Summary Log ( Expected = Actual) [ControlThingGroups] ==================\");\r",
									"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
									"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
									"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeBadRequest_40000);\r",
									"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionTheClientRequestedMissingOrInvalidFormat);\r",
									"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
									"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"identity : \" + JSON.stringify(resultDataLog.identity) + \" = \" + JSON.stringify(identitySummary));\r",
									"                        console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
									"\r",
									"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
									"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
									"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeBadRequest_40000 ); \r",
									"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionTheClientRequestedMissingOrInvalidFormat); \r",
									"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
									"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
									"                        pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
									"                    }); \r",
									"                }\r",
									"\r",
									"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail'\r",
									"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
									"                    // console.log('endPointNameValue ',endPointNameValue)\r",
									"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [ControlThingGroups]\", function () {\r",
									"                        console.log(\"======== Check Detail Log ( Expected = Actual) [ControlThingGroups] ==================\");\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
									"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
									"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
									"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
									"\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
									"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
									"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
									"                        // pm.expect(resultDataLog.EndPoint).to.eql(); \r",
									" \r",
									"                        // check requestObject\r",
									"                        // \"requestObject\":\"{\\\"headers\\\":{\\\"x-ais-orderref\\\":\\\"ControlThingGroups_202101290901653\\\",\\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAEL8HZk2RWAR3L0/hOZPjC5nvaeNw1EUMpcFyr//lMVTkIlAkkY2KW0\\\"},\\\"body\\\":{\\\"ThingGroupId\\\":[\\\"6013763596d0ed0001f59626\\\",\\\"6013763596d0ed0001f5962c\\\"],\\\"Sensors\\\":{\\\"Temp\\\":925}}}\"\r",
									"\r",
									"                        // \\\"requestObject\\\":\\\"{ \\\\\\\"url\\\\\\\":\\\\\\\"/api/v1/Control/ThingGroups\\\\\\\", \\\\\\\"method\\\\\\\":\\\\\\\"POST\\\\\\\", \\\\\\\"headers\\\\\\\":{ \\\\\\\"Cache-Control\\\\\\\":\\\\\\\"no-cache\\\\\\\", \\\\\\\"Content-Type\\\\\\\":\\\\\\\"application/json\\\\\\\", \\\\\\\"Accept\\\\\\\":\\\\\\\"*/*\\\\\\\", \\\\\\\"Accept-Encoding\\\\\\\":\\\\\\\"gzip, deflate, br\\\\\\\", \\\\\\\"Host\\\\\\\":\\\\\\\"mg-iot.sandais.com\\\\\\\", \\\\\\\"User-Agent\\\\\\\":\\\\\\\"PostmanRuntime/7.26.8\\\\\\\", \\\\\\\"Content-Length\\\\\\\":\\\\\\\"121\\\\\\\", \\\\\\\"x-real-ip\\\\\\\":\\\\\\\"182.232.14.198\\\\\\\", \\\\\\\"x-forwarded-for\\\\\\\":\\\\\\\"182.232.14.198, 10.233.64.0\\\\\\\", \\\\\\\"x-forwarded-proto\\\\\\\":\\\\\\\"http\\\\\\\", \\\\\\\"x-ais-orderref\\\\\\\":\\\\\\\"ControlThingGroupsfail_202105111505466\\\\\\\", \\\\\\\"x-ais-accountkey\\\\\\\":\\\\\\\"609a3f4dfa59240001c7e239\\\\\\\", \\\\\\\"x-ais-accesstoken\\\\\\\":\\\\\\\"Bearer ibnxnVhs5Rx3IwglWv7/gVA/1TpQnKqAOBAADlRDvYhOpXwmlpYOEb5yfY5aZpoj0YRWRZM26i9HOqtc1fc1jpNDOK5JpISttmMEy59g2py7nLWonDe2YW2OPRGWSowk6+9ZihLU1fZ5d5jAqqrZaKlOAAI3N1TXDNLsHuKcOJMcERbCcaMqRaku+MY4/kzE+eyIdkfwwbjT91S2VQq+Wk2ooMWuLk6/DHVJhwbMP7ZHFqcvKQkpSXm/cnf5HdXpK8xQnBGN0glKVegMrc8SMg==\\\\\\\", \\\\\\\"postman-token\\\\\\\":\\\\\\\"fc979ba7-1d10-4e7c-a38d-57ca1397f56e\\\\\\\", \\\\\\\"x-envoy-external-address\\\\\\\":\\\\\\\"10.233.64.0\\\\\\\", \\\\\\\"x-request-id\\\\\\\":\\\\\\\"d51e176e-4215-4aec-94de-18642a658278\\\\\\\", \\\\\\\"x-envoy-original-path\\\\\\\":\\\\\\\"/mg4controlapis/api/v1/Control/ThingGroups\\\\\\\", \\\\\\\"x-b3-traceid\\\\\\\":\\\\\\\"e10afecad43f2ba021b6f0fac217f678\\\\\\\", \\\\\\\"x-b3-spanid\\\\\\\":\\\\\\\"3e30d3519e740004\\\\\\\", \\\\\\\"x-b3-parentspanid\\\\\\\":\\\\\\\"21b6f0fac217f678\\\\\\\", \\\\\\\"x-b3-sampled\\\\\\\":\\\\\\\"0\\\\\\\", \\\\\\\"x-ais-SessionId\\\\\\\":\\\\\\\"1620721524544\\\\\\\" }, \\\\\\\"queryString\\\\\\\":{ }, \\\\\\\"routeParamteters\\\\\\\":{ }, \\\\\\\"body\\\\\\\":{ \\\\\\\"ThingGroupId\\\\\\\":[ \\\\\\\"609a3f6ffa59240001c7e316\\\\\\\", \\\\\\\"5e047c611ac4c60001ca3ecexxx\\\\\\\" ], \\\\\\\"Sensors\\\\\\\":{ \\\\\\\"Temp\\\\\\\":382 } } }\\\"\r",
									"                        \r",
									"                        let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
									"                        // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
									"                        \r",
									"                        let url = requestObjectUrlStaging; \r",
									"                        let urlCustom = urlCheckLog + requestObjectUrlStaging;\r",
									"                        let SensorKey = fieldDataValue.CreateThingStateInfo.SensorKey;\r",
									"                        let sensor = pm.environment.get(\"random_Sensor_Control\");\r",
									"                        let x_ais_orderref = x_ais_OrderRef_ControlThingGroups_fail + current_timestamp;\r",
									"                        let x_ais_AccountKey = pm.environment.get(\"GetResponse_AccountId\");\r",
									"                        let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken\");\r",
									"                        let thingGroupId = JSON.parse(pm.environment.get(\"GetResponse_ThingGroupIDArr\"));\r",
									"\r",
									"                        console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
									"                        console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
									"                        console.log(\"headers.x_ais_AccountKey : \" + jsonParseRequestObject.headers[header_x_ais_accountkey] + \" = \" + x_ais_AccountKey);\r",
									"                        console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"                        console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
									"\r",
									"                        pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
									"                        pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
									"                        pm.expect(jsonParseRequestObject.headers[header_x_ais_accountkey]).to.eql(x_ais_AccountKey);\r",
									"                        pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                        pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
									"\r",
									"                        console.log(\"queryString : \" + JSON.stringify(jsonParseRequestObject.queryString) + \" = \" + JSON.stringify({}));\r",
									"                        pm.expect(jsonParseRequestObject.queryString).to.eql({});\r",
									"\r",
									"                        console.log(\"routeParamteters : \" + JSON.stringify(jsonParseRequestObject.routeParamteters) + \" = \" + JSON.stringify({}));\r",
									"                        pm.expect(jsonParseRequestObject.routeParamteters).to.eql({});\r",
									"\r",
									"                        console.log(\"resquest.body.ThingGroupId : [\" + jsonParseRequestObject.body.ThingGroupId + \"] = [\" + thingGroupId + \"]\");\r",
									"                        console.log(\"resquest.body.Sensors.\" + SensorKey + \"  : \" + jsonParseRequestObject.body.Sensors[SensorKey] + \" = \" + sensor);\r",
									"\r",
									"                        pm.expect(jsonParseRequestObject.body.ThingGroupId).to.eql(thingGroupId);\r",
									"                        pm.expect(jsonParseRequestObject.body.Sensors[SensorKey]).to.eql(sensor);\r",
									"\r",
									"                        // check responseObject\r",
									"                        // \\\"responseObject\\\":\\\"{ \\\\\\\"OperationStatus\\\\\\\":{ \\\\\\\"Code\\\\\\\":\\\\\\\"40000\\\\\\\", \\\\\\\"DeveloperMessage\\\\\\\":\\\\\\\"The client requested missing or invalid  format.\\\\\\\", \\\\\\\"Details\\\\\\\":[ { \\\\\\\"Target\\\\\\\":\\\\\\\"ThingId\\\\\\\", \\\\\\\"DeveloperMessage\\\\\\\":\\\\\\\"'ThingId' is not Object Id.\\\\\\\" } ] } }\\\"\r",
									"                        let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
									"                        // console.log('jsonParseResponseObject',jsonParseResponseObject);\r",
									"\r",
									"                        console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeBadRequest_40000);\r",
									"                        console.log(\"response.OperationStatus.DeveloperMessage : \" + jsonParseResponseObject.OperationStatus.DeveloperMessage + \" = \" + resultDescriptionTheClientRequestedMissingOrInvalidFormat);\r",
									"\r",
									"                        pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeBadRequest_40000);  \r",
									"                        pm.expect(jsonParseResponseObject.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheClientRequestedMissingOrInvalidFormat);  \r",
									"\r",
									"                        let countDetails= jsonParseResponseObject.OperationStatus.Details;\r",
									"                        for(let i=0;i<countDetails.length;i++){\r",
									"\r",
									"                            console.log(\"response.OperationStatus.Details[\"+ i +\"].Target : \" + countDetails[i].Target + \" = \" + detailsResponse.target_ThingGroupId);\r",
									"                            console.log(\"response.OperationStatus.Details[\"+ i +\"].DeveloperMessage : \" + countDetails[i].DeveloperMessage + \" = \" + detailsResponse.developerMessage_ThingGroupId_notObjectId);\r",
									"\r",
									"                            pm.expect(countDetails[i].Target).to.eql(detailsResponse.target_ThingGroupId);\r",
									"                            pm.expect(countDetails[i].DeveloperMessage).to.eql(detailsResponse.developerMessage_ThingGroupId_notObjectId);\r",
									"                        }  \r",
									"                    }); \r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"setTimeout(function(){SearchLogFindTid();}, 40000); \r",
									"setTimeout(function(){CheckLog();}, 50000); \r",
									"\r",
									"setTimeout(function(){RemoveGroup();}, 60000); \r",
									"setTimeout(function(){RemoveThingStateInfo();}, 65000); \r",
									"setTimeout(function(){RemoveThing();}, 70000); \r",
									"setTimeout(function(){RemoveAccount();}, 75000); \r",
									"setTimeout(function(){RemovePartner();}, 80000); \r",
									"\r",
									"setTimeout(function(){\r",
									"pm.environment.unset(\"current_timestamp\");\r",
									"pm.environment.unset(\"AccessToken\");\r",
									"pm.environment.unset(\"random_number\");\r",
									"pm.environment.unset(\"PartnerName\");\r",
									"pm.environment.unset(\"MerchantContact\");\r",
									"pm.environment.unset(\"CPID\");\r",
									"pm.environment.unset(\"GetResponse_PartnerId\");\r",
									"pm.environment.unset(\"AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountId\");\r",
									"for(let i=0;i<countData;i++){\r",
									"pm.environment.unset(\"random_IM\"+[i+1]);\r",
									"pm.environment.unset(\"random_ICCID\"+[i+1]);\r",
									"pm.environment.unset(\"ThingName\"+[i+1]);\r",
									"pm.environment.unset(\"ThingGroupName\"+[i+1]);\r",
									"}\r",
									"\r",
									"pm.environment.unset(\"GetResponse_ThingIDArr\");\r",
									"pm.environment.unset(\"random_Sensor\");\r",
									"pm.environment.unset(\"GetResponse_ThingGroupIDArr\");\r",
									"pm.environment.unset(\"tid\");\r",
									"pm.environment.unset(\"sessionId\");\r",
									"pm.environment.unset(\"SensorKey\");\r",
									"pm.environment.unset(\"random_Sensor_Control\");\r",
									"}, 90000); "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var Username = pm.environment.get(\"Username\");\r",
									"var Password = pm.environment.get(\"Password\");\r",
									"\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//count for loop data\r",
									"var countData = 2;\r",
									"var countDataGrop = 1;\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"pm.environment.set(\"SensorKey\",fieldDataValue.CreateThingStateInfo.SensorKey)\r",
									"\r",
									"//mockup Data for case Control_Thing_TST_F4_0_2_003 \"5e047c611ac4c60001ca3ecexxx\"\r",
									"var mockupData = fieldDataValue.Control.Value_ControlThingGroup_TST_F4_0_2_003_Error; \r",
									"\r",
									"//format YYYYMMDDHHMMSSS\r",
									"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
									"// console.log('currentTmestamp',currentTmestamp);\r",
									"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- statusCodeList --------------//\r",
									"//set variable to statusCodeList JSON.parse\r",
									"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
									"//set global variable to statusCode 200\r",
									"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
									"//set global variable to statusCode 201\r",
									"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
									"//set global variable to statusCode 403\r",
									"pm.globals.set(\"statusCodeForbidden\", statusCodeList.statusCodeForbidden);\r",
									"//set global variable to statusCode 400\r",
									"pm.globals.set(\"statusCodeBadRequest\", statusCodeList.statusCodeBadRequest);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultCodeList --------------//\r",
									"//set variable to resultCodeList JSON.parse\r",
									"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
									"//set global variable to resultCode \"20000\"\r",
									"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
									"//set global variable to resultCode \"20100\"\r",
									"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
									"//set global variable to resultCode \"40300\"\r",
									"pm.globals.set(\"resultCodeForbiddenMissingOrInvalidParameter\", resultCodeList.resultCodeForbiddenMissingOrInvalidParameter);\r",
									"//set global variable to resultCode \"40000\"\r",
									"pm.globals.set(\"resultCodeBadRequest_40000\", resultCodeList.resultCodeBadRequest_40000);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionSuccessList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
									"//set global variable to resultDescription \"SignInProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
									"//set global variable to resultDescription \"CreatePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
									"//set global variable to resultDescription \"CreateAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
									"//set global variable to resultDescription \"CreateThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThing\", resultDescriptionSuccessList.resultDescriptionCreateThing);\r",
									"//set global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThingStateInfo\", resultDescriptionSuccessList.resultDescriptionCreateThingStateInfo);\r",
									"//set global variable to resultDescription \"RemovePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
									"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
									"//set global variable to resultDescription \"RemoveThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThing\", resultDescriptionSuccessList.resultDescriptionRemoveThing);\r",
									"//set global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThingStateInfo\", resultDescriptionSuccessList.resultDescriptionRemoveThingStateInfo);\r",
									"//set global variable to resultDescription \"CreateGroup is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateGroup\", resultDescriptionSuccessList.resultDescriptionCreateGroup);\r",
									"//set global variable to resultDescription \"RemoveGroup is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveGroup\", resultDescriptionSuccessList.resultDescriptionRemoveGroup);\r",
									"//set global variable to resultDescription \"Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccess\", resultDescriptionSuccessList.resultDescriptionSuccess);\r",
									"//set global variable to resultDescription \"Created Success\"\r",
									"pm.globals.set(\"resultDescriptionCreatedSuccess\", resultDescriptionSuccessList.resultDescriptionCreatedSuccess);\r",
									"//set global variable to resultDescription \"ControlManyGroups is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessControlManyGroups\", resultDescriptionSuccessList.resultDescriptionSuccessControlManyGroups);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionErrorList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
									"//set global variable to resultDescription \"The ThingGroupId field is not Object Id.\"\r",
									"// pm.globals.set(\"resultDescriptionErrorTheThingGroupIdFieldIsNotObjectId\", resultDescriptionErrorList.resultDescriptionErrorTheThingGroupIdFieldIsNotObjectId);\r",
									"//set global variable to resultDescription \"The client requested missing or invalid  format.\"\r",
									"pm.globals.set(\"resultDescriptionTheClientRequestedMissingOrInvalidFormat\", resultDescriptionErrorList.resultDescriptionTheClientRequestedMissingOrInvalidFormat);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- HeaderList --------------//\r",
									"//set variable to HeaderList JSON.parse\r",
									"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
									"//---------------- set globals Other --------------//\r",
									"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
									"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
									"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
									"//set global variable to kbn-versio \"7.5.1\"\r",
									"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Signin_ --------------//\r",
									"//set global variable to x_ais_OrderRef \"Signin_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreatePartner --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
									"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
									"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
									"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreateAccount --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
									"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
									"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Thing --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThing\", HeaderList.Thing.x_ais_OrderRef_CreateThing);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThing\", HeaderList.Thing.x_ais_OrderDesc_CreateThing);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThing\", HeaderList.Thing.x_ais_OrderRef_RemoveThing);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThing\", HeaderList.Thing.x_ais_OrderDesc_RemoveThing);\r",
									"//set global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_RemoveThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_RemoveThingStateInfo);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Group --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateGroup_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateGroup\", HeaderList.Group.x_ais_OrderRef_CreateGroup);\r",
									"//set global variable to x_ais_OrderDesc \"CreateGroup\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateGroup\", HeaderList.Group.x_ais_OrderDesc_CreateGroup);\r",
									"//set global variable to x_ais_OrderRef \"RemoveGroup_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveGroup\", HeaderList.Group.x_ais_OrderRef_RemoveGroup);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveGroup\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveGroup\", HeaderList.Group.x_ais_OrderDesc_RemoveGroup);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Control --------------//\r",
									"//set global variable to x_ais_OrderRef \"ControlThingGroups_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ControlThingGroups\", HeaderList.Control.x_ais_OrderRef_ControlThingGroups);\r",
									"//set global variable to x_ais_OrderRef \"ControlThingGroupsfail_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ControlThingGroups_fail\", HeaderList.Control.x_ais_OrderRef_ControlThingGroups_fail);\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"SignInProcess is Success\"\r",
									"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
									"//get global variable to resultDescription \"CreatePartner is Success\"\r",
									"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
									"//get global variable to resultDescription \"CreateAccount is Success\"\r",
									"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
									"//get global variable to resultDescription \"CreateThing is Success\"\r",
									"var resultDescriptionCreateThing = pm.globals.get(\"resultDescriptionCreateThing\");\r",
									"//get global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"var resultDescriptionCreateThingStateInfo = pm.globals.get(\"resultDescriptionCreateThingStateInfo\");\r",
									"//get global variable to resultDescription \"CreateGroup is Success\"\r",
									"var resultDescriptionCreateGroup = pm.globals.get(\"resultDescriptionCreateGroup\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- urlRouteList --------------//\r",
									"//set variable to urlRouteList JSON.parse\r",
									"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
									"//---------------- set url Create --------------//\r",
									"//set global variable to url \"/api/v1/auth/signin\"\r",
									"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
									"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
									"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"pm.globals.set(\"urlThingCreateThing\", urlRouteList.Thing.urlThingCreateThing);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"pm.globals.set(\"urlThingCreateThingStateInfo\", urlRouteList.Thing.urlThingCreateThingStateInfo);\r",
									"//set global variable to url \"/api/v1/Group/CreateGroup\"\r",
									"pm.globals.set(\"urlGroupCreateGroup\", urlRouteList.Group.urlGroupCreateGroup);\r",
									"//---------------- get url Create --------------//\r",
									"//get global variable to url \"/api/v1/auth/signin\"\r",
									"var urlSignin = pm.globals.get(\"urlSignin\");\r",
									"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
									"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"var urlThingCreateThing = pm.globals.get(\"urlThingCreateThing\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"var urlThingCreateThingStateInfo = pm.globals.get(\"urlThingCreateThingStateInfo\");\r",
									"//get global variable to url \"/api/v1/Group/CreateGroup\"\r",
									"var urlGroupCreateGroup = pm.globals.get(\"urlGroupCreateGroup\");\r",
									"//---------------- set url Remove --------------//\r",
									"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
									"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"pm.globals.set(\"urlThingRemoveThing\", urlRouteList.Thing.urlThingRemoveThing);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"pm.globals.set(\"urlThingRemoveThingStateInfo\", urlRouteList.Thing.urlThingRemoveThingStateInfo);\r",
									"//set global variable to url \"/api/v1/Group/RemoveGroup\"\r",
									"pm.globals.set(\"urlGroupRemoveGroup\", urlRouteList.Group.urlGroupRemoveGroup);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Signin_ --------------//\r",
									"//get global variable to x_ais_OrderRef \"Signin_\"\r",
									"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"var x_ais_OrderRef_CreateThing = pm.globals.get(\"x_ais_OrderRef_CreateThing\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"var x_ais_OrderDesc_CreateThing = pm.globals.get(\"x_ais_OrderDesc_CreateThing\");\r",
									"//get global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"var x_ais_OrderRef_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderRef_CreateThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"var x_ais_OrderDesc_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_CreateThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Group --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateGroup_\"\r",
									"var x_ais_OrderRef_CreateGroup = pm.globals.get(\"x_ais_OrderRef_CreateGroup\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateGroup\"\r",
									"var x_ais_OrderDesc_CreateGroup = pm.globals.get(\"x_ais_OrderDesc_CreateGroup\");\r",
									"//------------------------------------------------------------//\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            // console.log('response111',response);\r",
									"            // console.log('errerrerr',err);\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// Signin get token\r",
									" Signin = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSignin = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestSignin = {\r",
									"            mode: 'raw',\r",
									"            raw: \r",
									"            JSON.stringify({\r",
									"                username:Username,\r",
									"                password:Password\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsSignin = {\r",
									"            url: url + provisioningapis + urlSignin,\r",
									"            method: 'POST',\r",
									"            header: headersOptSignin,\r",
									"            body: httpRequestSignin\r",
									"        };\r",
									"        // console.log('request Signin');\r",
									"        let response = await reqPromise(optionsSignin);\r",
									"        let jsonDataSignin = await response.json();\r",
									"\r",
									"        // setAccessToken\r",
									"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
									"\r",
									"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // SignInProcess is Success\r",
									"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
									"        });\r",
									"\r",
									"        //set random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //set PartnerName\r",
									"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
									"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
									"        //set MerchantContact\r",
									"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
									"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
									"        // set CPID\r",
									"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
									"        pm.environment.set(\"CPID\", CPIDValue)\r",
									"        \r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreatePartner\r",
									" CreatePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreatePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreatePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
									"                \"PartnerType\": [\r",
									"                    \"Supplier\",\r",
									"                    \"Customer\"\r",
									"                ],\r",
									"                \"PartnerDetail\": {\r",
									"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
									"                    \"CPID\": pm.environment.get(\"CPID\")\r",
									"                },\r",
									"                \"Property\": {\r",
									"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsCreatePartner = {\r",
									"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreatePartner,\r",
									"            body: httpRequestCreatePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsCreatePartner);\r",
									"        let jsonDataCreatePartner = await response.json();\r",
									"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
									"    \r",
									"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreatePartner is Success\r",
									"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
									"        });\r",
									"\r",
									"        //GetResponse_PartnerId\r",
									"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
									"\r",
									"        //Accountname\r",
									"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
									"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateAccount\r",
									" CreateAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreateAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
									"                })\r",
									"        };\r",
									"        \r",
									"        let optionsCreateAccount = {\r",
									"            url: url + provisioningapis + urlAccountCreateAccount,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateAccount,\r",
									"            body: httpRequestCreateAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateAccount');\r",
									"        let response = await reqPromise(optionsCreateAccount);\r",
									"        let jsonDataCreateAccount = await response.json();\r",
									"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
									"    \r",
									"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateAccount : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateAccount is Success\r",
									"        pm.test('CreateAccount : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
									"        });\r",
									"        // GetResponse_AccountName\r",
									"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
									"        // GetResponse_AccountId\r",
									"        pm.environment.set(\"GetResponse_AccountId\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
									"       \r",
									" // // random_IM\r",
									"        // pm.environment.set(\"random_IM\", _.random(10000000, 99999999)+\" \"+_.random(1000000, 9999999))\r",
									"        // // random_ICCID\r",
									"        // pm.environment.set(\"random_ICCID\", _.random(1000000, 9999999)+\" \"+_.random(100000, 999999))\r",
									"        // // random_number\r",
									"        // pm.environment.set(\"random_number\",pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        // //ThingName\r",
									"        // let thingNameValue = fieldDataValue.Thing.ThingNameValue; // \"Sensor_TestThingName\"\r",
									"        // pm.environment.set(\"ThingName\", thingNameValue + pm.environment.get(\"random_number\"))\r",
									"\r",
									"        // random_number\r",
									"        pm.environment.set(\"random_number\",pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"\r",
									"        for(let i=0;i<countData;i++){\r",
									"            // random_IM\r",
									"            pm.environment.set(\"random_IM\"+[i+1], _.random(10000000, 99999999)+\" \"+_.random(1000000, 9999999))\r",
									"            // random_ICCID\r",
									"            pm.environment.set(\"random_ICCID\"+[i+1], _.random(1000000, 9999999)+\" \"+_.random(100000, 999999))\r",
									"\r",
									"            //ThingName\r",
									"            let thingNameValue = fieldDataValue.Thing.ThingNameValue; // \"Sensor_TestThingName\"\r",
									"            pm.environment.set(\"ThingName\"+[i+1],thingNameValue + [i+1] + pm.environment.get(\"random_number\"))\r",
									"        }\r",
									"\r",
									"        for(let i=0;i<countDataGrop;i++){\r",
									"            //ThinggroupName\r",
									"            let ThingGroupNameValue = fieldDataValue.Group.ThingGroupNameValue; // \"Sensor_TestThingGroupName\"\r",
									"            pm.environment.set(\"ThingGroupName\"+[i+1],ThingGroupNameValue + [i+1] + pm.environment.get(\"random_number\"))\r",
									"        }        \r",
									"            \r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThing\r",
									" CreateThingArr = async () =>  {\r",
									"    try {\r",
									"        \r",
									"        // header\r",
									"        let headersOptCreateThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThing');\r",
									"        let dataThingIdArr = [];\r",
									"        for(let i=0;i<countData;i++){\r",
									"            // body\r",
									"            let httpRequestCreateThing = {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                    \"ThingName\": pm.environment.get(\"ThingName\"+ [i+1]),\r",
									"                    \"IMEI\": pm.environment.get(\"random_IM\"+ [i+1]),\r",
									"                    \"IMSI\": pm.environment.get(\"random_IM\"+ [i+1]),\r",
									"                    \"ICCID\": pm.environment.get(\"random_ICCID\"+ [i+1]),\r",
									"                    \"RouteUrl\": fieldDataValue.Thing.RouteUrlValue , //[\"http://10.12.3.4:2019/api/information/AddInformation\"]\r",
									"                    \"RouteInfo\": {\r",
									"                        \"MIMO_ID\": fieldDataValue.Thing.RouteInfoMIMOIDValue , //\"606edada\"\r",
									"                        \"MIMO_SerialNo\": fieldDataValue.Thing.RouteInfoMIMOSerialNoValue //5466758878\r",
									"                    },\r",
									"                    \"RouteFlag\": {\r",
									"                        \"ThingName\": fieldDataValue.Thing.RouteFlagThingNameValue , //true\r",
									"                        \"ThingToken\": fieldDataValue.Thing.RouteFlagThingTokenValue, //true\r",
									"                        \"IMEI\": fieldDataValue.Thing.RouteFlagIMEIValue, //true\r",
									"                        \"ICCID\": fieldDataValue.Thing.RouteFlagICCIDValue, //true\r",
									"                        \"RouteInfo\": fieldDataValue.Thing.RouteFlagRouteInfoValue //true\r",
									"                    }\r",
									"                })\r",
									"            };\r",
									"            \r",
									"            let optionsCreateThing = {\r",
									"                url: url + provisioningapis + urlThingCreateThing,\r",
									"                method: 'POST',\r",
									"                header: headersOptCreateThing,\r",
									"                body: httpRequestCreateThing\r",
									"            };\r",
									"            let response = await reqPromise(optionsCreateThing);\r",
									"            let jsonDataCreateThing = await response.json();\r",
									"            let ThingId = await jsonDataCreateThing.ThingInfo.ThingId;\r",
									"            dataThingIdArr.push(ThingId);\r",
									"            let operationStatusCreateThing = await jsonDataCreateThing.OperationStatus;\r",
									"\r",
									"            //201\r",
									"            pm.test(\"CreateThing\"+ [i+1]+ \" : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"                pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"            });\r",
									"            //20100\r",
									"            pm.test('CreateThing'+ [i+1]+ ' : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"                pm.expect(operationStatusCreateThing).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"            });\r",
									"            //CreateThing is Success\r",
									"            pm.test('CreateThing'+ [i+1]+ ' : OperationStatus Description is '+'\"'+ resultDescriptionCreateThing+'\"', function () {\r",
									"                pm.expect(operationStatusCreateThing).to.have.property('Description', resultDescriptionCreateThing);\r",
									"            });\r",
									"        }\r",
									"        \r",
									"        // console.log('dataThingIdArr',dataThingIdArr);\r",
									"        // pm.environment.set(\"GetResponse_ThingID\",jsonDataCreateThing.ThingInfo.ThingId)\r",
									"        pm.environment.set(\"GetResponse_ThingIDArr\",JSON.stringify(dataThingIdArr))\r",
									"        \r",
									"        //Get Random Sensor \r",
									"        pm.environment.set(\"random_Sensor\", _.random(100, 999))\r",
									"\r",
									"        //Get Random Sensor Control\r",
									"        pm.environment.set(\"random_Sensor_Control\", _.random(100, 999))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThingStateInfo\r",
									" CreateThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let dataThingIDArray = JSON.parse(pm.environment.get(\"GetResponse_ThingIDArr\"));\r",
									"        // console.log('dataThingIDArray',dataThingIDArray);\r",
									"\r",
									"        // {\"Temp\" : pm.environment.get(\"random_Sensor\")}\r",
									"        let sensorValue = {};\r",
									"        sensorValue[fieldDataValue.CreateThingStateInfo.SensorKey] = pm.environment.get(\"random_Sensor\");\r",
									"        // console.log('sensorValue',sensorValue);\r",
									"        \r",
									"        let httpRequestCreateThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": dataThingIDArray,\r",
									"                \"Type\": fieldDataValue.CreateThingStateInfo.Type_Report,\r",
									"                \"Sensor\": sensorValue\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingCreateThingStateInfo,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThingStateInfo,\r",
									"            body: httpRequestCreateThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThingStateInfo');\r",
									"        let response = await reqPromise(optionsCreateThingStateInfo);\r",
									"\r",
									"        let jsonDataCreateThingStateInfo = await response.json();\r",
									"        let operationStatusCreateThingStateInfo = await jsonDataCreateThingStateInfo.OperationStatus;\r",
									"        // console.log('operationStatusCreateThingStateInfo',operationStatusCreateThingStateInfo);\r",
									"\r",
									"        //200\r",
									"        pm.test(\"CreateThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //CreateThingStateInfo is Success\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionCreateThingStateInfo+'\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Description', resultDescriptionCreateThingStateInfo);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThingGroup\r",
									" CreateThingGroupArr = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThingGroup = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateGroup + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateGroup,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        let dataThingIDArray = JSON.parse(pm.environment.get(\"GetResponse_ThingIDArr\"));\r",
									"        // console.log('dataThingIDArray',dataThingIDArray);\r",
									"\r",
									"        let dataThingGroupIdArr = [];\r",
									"        for(let i=0;i<countDataGrop;i++){\r",
									"            // body\r",
									"            let httpRequestCreateThingGroup = {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                        \"ThingGroupName\": pm.environment.get(\"ThingGroupName\"+ [i+1]),\r",
									"                        \"ThingId\": dataThingIDArray\r",
									"                        })\r",
									"            };\r",
									"             let optionsCreateThingGroup = {\r",
									"                url: url + provisioningapis + urlGroupCreateGroup,\r",
									"                method: 'POST',\r",
									"                header: headersOptCreateThingGroup,\r",
									"                body: httpRequestCreateThingGroup\r",
									"            };\r",
									"\r",
									"            // console.log('request CreateThingGroup');\r",
									"            let response = await reqPromise(optionsCreateThingGroup);\r",
									"\r",
									"            let jsonDataCreateThingGroup = await response.json();\r",
									"            let operationStatusCreateThingGroup = await jsonDataCreateThingGroup.OperationStatus;\r",
									"        \r",
									"            //200\r",
									"            pm.test(\"CreateThingGroup\"+ [i+1]+ \" : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"                pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"            });\r",
									"            //20000\r",
									"            pm.test('CreateThingGroup'+ [i+1]+ ' : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"                pm.expect(operationStatusCreateThingGroup).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"            });\r",
									"            //CreateThingGroup is Success\r",
									"            pm.test('CreateThingGroup'+ [i+1]+ ' : OperationStatus Description is '+'\"'+ resultDescriptionCreateGroup+'\"', function () {\r",
									"                pm.expect(operationStatusCreateThingGroup).to.have.property('Description', resultDescriptionCreateGroup);\r",
									"            });\r",
									"\r",
									"            dataThingGroupIdArr.push(jsonDataCreateThingGroup.GroupInfo.GroupId);\r",
									"            \r",
									"        }\r",
									"            \r",
									"            dataThingGroupIdArr.push(mockupData);\r",
									"            // GetResponse_ThingGroupID\r",
									"            pm.environment.set(\"GetResponse_ThingGroupIDArr\",JSON.stringify(dataThingGroupIdArr));\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"Signin();\r",
									"setTimeout(async function(){await CreatePartner();}, 3000); \r",
									"setTimeout(async function(){await CreateAccount();}, 6000); \r",
									"setTimeout(async function(){await CreateThingArr();}, 8000); \r",
									"setTimeout(async function(){await CreateThingStateInfo();}, 20000); \r",
									"setTimeout(async function(){await CreateThingGroupArr();}, 30000); \r",
									"setTimeout(async function(){}, 35000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-ais-OrderRef",
								"value": "{{x_ais_OrderRef_ControlThingGroups_fail}}{{current_timestamp}}"
							},
							{
								"key": "x-ais-AccountKey",
								"type": "text",
								"value": "{{GetResponse_AccountId}}"
							},
							{
								"key": "x-ais-AccessToken",
								"value": "{{Bearer}} {{AccessToken}}"
							},
							{
								"key": "Accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"ThingGroupId\": {{GetResponse_ThingGroupIDArr}},\r\n  \"Sensors\": {\r\n    \"{{SensorKey}}\": {{random_Sensor_Control}}\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{url}}{{mg4controlapis}}/api/v1/Control/ThingGroups",
							"host": [
								"{{url}}{{mg4controlapis}}"
							],
							"path": [
								"api",
								"v1",
								"Control",
								"ThingGroups"
							]
						},
						"description": "Type:Desire"
					},
					"response": []
				},
				{
					"name": "ControlThingGroups_TST_F4_0_2_004_Error_ThingGroupIdNotFound",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//count for loop data\r",
									"var countData = 2;\r",
									"var countDataGrop = 1;\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"//get environment variable to ThingId \"5fa8efc8e1c3c90001303c68\"\r",
									"var ThingGroupId_Value_ControlThings_004 = fieldDataValue.Control.Value_ControlThingGroup_TST_F4_0_2_004_Error;\r",
									"\r",
									"//---------------- detailsResponse --------------//\r",
									"//set variable to detailsResponse JSON.parse\r",
									"var detailsResponse = JSON.parse(pm.environment.get(\"detailsResponse\"));\r",
									"// console.log('detailsResponse',detailsResponse);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to xAisOrderRef \"RemoveThing_\"\r",
									"var x_ais_OrderRef_RemoveThing = pm.globals.get(\"x_ais_OrderRef_RemoveThing\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"var x_ais_OrderDesc_RemoveThing = pm.globals.get(\"x_ais_OrderDesc_RemoveThing\");\r",
									"//get global variable to x_ais_OrderRef \"RemoveThingStateInfo_\"\r",
									"var x_ais_OrderDesc_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_RemoveThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThingStateInfo\"\r",
									"var x_ais_OrderRef_RemoveThingStateInfo = pm.globals.get(\"x_ais_OrderRef_RemoveThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Group --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveGroup_\"\r",
									"var x_ais_OrderRef_RemoveGroup = pm.globals.get(\"x_ais_OrderRef_RemoveGroup\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveGroup\"\r",
									"var x_ais_OrderDesc_RemoveGroup = pm.globals.get(\"x_ais_OrderDesc_RemoveGroup\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Control --------------//\r",
									"//get global variable to x_ais_OrderRef \"ControlThingGroups_\"\r",
									"var x_ais_OrderRef_ControlThingGroups = pm.globals.get(\"x_ais_OrderRef_ControlThingGroups\");\r",
									"//get global variable to x_ais_OrderRef \"ControlThingGroupsfail_\"\r",
									"var x_ais_OrderRef_ControlThingGroups_fail = pm.globals.get(\"x_ais_OrderRef_ControlThingGroups_fail\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get url Remove --------------//\r",
									"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
									"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"var urlThingRemoveThing = pm.globals.get(\"urlThingRemoveThing\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"var urlThingRemoveThingStateInfo = pm.globals.get(\"urlThingRemoveThingStateInfo\");\r",
									"//get global variable to url \"/api/v1/Group/RemoveGroup\"\r",
									"var urlGroupRemoveGroup = pm.globals.get(\"urlGroupRemoveGroup\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"RemovePartner is Success\"\r",
									"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
									"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
									"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
									"//get global variable to resultDescription \"RemoveThing is Success\"\r",
									"var resultDescriptionRemoveThing = pm.globals.get(\"resultDescriptionRemoveThing\");\r",
									"//get global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"var resultDescriptionRemoveThingStateInfo = pm.globals.get(\"resultDescriptionRemoveThingStateInfo\");\r",
									"//get global variable to resultDescription \"RemoveGroup is Success\"\r",
									"var resultDescriptionRemoveGroup = pm.globals.get(\"resultDescriptionRemoveGroup\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 404\r",
									"var statusCodeNotFound = pm.globals.get(\"statusCodeNotFound\");\r",
									"//get global variable to resultCode \"40400\"\r",
									"var resultCodeNotFound = pm.globals.get(\"resultCodeNotFound\");\r",
									"//get global variable to resultDescription \"The ThingGroupId : \"\r",
									"// var resultDescriptionErrorTheThingGroupId = pm.globals.get(\"resultDescriptionErrorTheThingGroupId\");\r",
									"//get global variable to resultDescription \" is Not Found\"\r",
									"// var resultDescriptionErrorTheThingIsNotFound = pm.globals.get(\"resultDescriptionErrorTheThingIsNotFound\");\r",
									"//get global variable to resultDescription \"The requested operation could not be found.\"\r",
									"var resultDescriptionTheRequestedOperationCouldNotBeFound = pm.globals.get(\"resultDescriptionTheRequestedOperationCouldNotBeFound\");\r",
									"//get global variable to resultDescription \"The ThingGroupId \"\r",
									"var resultDescriptionErrorTheThingGroupId2 = pm.globals.get(\"resultDescriptionErrorTheThingGroupId2\");\r",
									"//get global variable to resultDescription \" could not be found.\"\r",
									"var resultDescriptionErrorCouldNotBeFound = pm.globals.get(\"resultDescriptionErrorCouldNotBeFound\");\r",
									"//get environment variable to ThingId \"5fa8efc8e1c3c90001303c68\"\r",
									"var ThingGroupId_Value_ControlThingGroups_004 = fieldDataValue.Control.Value_ControlThingGroup_TST_F4_0_2_004_Error;\r",
									"//------------------------------------------------------------//\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"ControlThingGroups : Status code is \" + statusCodeNotFound, function () {\r",
									"    pm.response.to.have.status(statusCodeNotFound);\r",
									"});\r",
									"\r",
									"pm.test('ControlThingGroups : OperationStatus Code is '+'\"'+ resultCodeNotFound +'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeNotFound);\r",
									"});\r",
									"\r",
									"pm.test('ControlThingGroups : OperationStatus DeveloperMessage is '+'\"'+ resultDescriptionTheRequestedOperationCouldNotBeFound +'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheRequestedOperationCouldNotBeFound);\r",
									"});\r",
									"\r",
									"pm.test('ControlThingGroups : OperationStatus Details is '+'\"'+ detailsResponse.target_ThingGroupId + \" : \" + resultDescriptionErrorTheThingGroupId2 + \"'\"+ ThingGroupId_Value_ControlThingGroups_004 + \"'\"+ resultDescriptionErrorCouldNotBeFound+'\"', function () {\r",
									"    let countDetails= jsonData.OperationStatus.Details;\r",
									"    for(let i=0;i<countDetails.length;i++){\r",
									"        pm.expect(countDetails[i].Target).to.eql(detailsResponse.target_ThingGroupId);\r",
									"        pm.expect(countDetails[i].DeveloperMessage).to.eql(resultDescriptionErrorTheThingGroupId2 + \"'\"+ ThingGroupId_Value_ControlThingGroups_004 + \"'\"+ resultDescriptionErrorCouldNotBeFound);\r",
									"    }\r",
									"});\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// RemovePartner\r",
									" RemovePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemovePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemovePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemovePartner = {\r",
									"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemovePartner,\r",
									"            body: httpRequestRemovePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request RemovePartner');\r",
									"        let response = await reqPromise(optionsRemovePartner);\r",
									"        let jsonDataRemovePartner = await response.json();\r",
									"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
									"    \r",
									"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemovePartner is Success\r",
									"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveAccount\r",
									" RemoveAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemoveAccount = {\r",
									"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveAccount,\r",
									"            body: httpRequestRemoveAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveAccount');\r",
									"        let response = await reqPromise(optionsRemoveAccount);\r",
									"        let jsonDataRemoveAccount = await response.json();\r",
									"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
									"    \r",
									"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveAccount is Success\r",
									"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThing\r",
									" RemoveThing = async () =>  {\r",
									"    try {\r",
									"\r",
									"        // header\r",
									"        let headersOptRemoveThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        let dataThingIDArray = JSON.parse(pm.environment.get(\"GetResponse_ThingIDArr\"));\r",
									"\r",
									"        for(let i=0;i<countData;i++){\r",
									"\r",
									"            // body\r",
									"            let httpRequestRemoveThing = {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                    \"ThingId\": dataThingIDArray[i]\r",
									"                })\r",
									"            };\r",
									"\r",
									"            let optionsRemoveThing = {\r",
									"                url: url + provisioningapis + urlThingRemoveThing,\r",
									"                method: 'DELETE',\r",
									"                header: headersOptRemoveThing,\r",
									"                body: httpRequestRemoveThing\r",
									"            };\r",
									"            // console.log('request RemoveThing');\r",
									"            let response = await reqPromise(optionsRemoveThing);\r",
									"            let jsonDataRemoveThing = await response.json();\r",
									"            // console.log('jsonDataRemoveThing',jsonDataRemoveThing)\r",
									"        \r",
									"            let operationStatusRemoveThing = await jsonDataRemoveThing.OperationStatus;\r",
									"\r",
									"            //200\r",
									"            pm.test(\"RemoveThing\" + [i+1]+ \" : Status code is \" + statusCodeSuccess, function () {\r",
									"                pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"            });\r",
									"            //20000\r",
									"            pm.test('RemoveThing' + [i+1]+ ' : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"                pm.expect(operationStatusRemoveThing).to.have.property('Code', resultCodeSuccess);\r",
									"            });\r",
									"            //RemoveThing is Success\r",
									"            pm.test('RemoveThing' + [i+1]+ ' : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThing+'\"', function () {\r",
									"                pm.expect(operationStatusRemoveThing).to.have.property('Description', resultDescriptionRemoveThing);\r",
									"            });\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThingStateInfo\r",
									" RemoveThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"            \r",
									"        };\r",
									"\r",
									"        let dataThingIDArray = JSON.parse(pm.environment.get(\"GetResponse_ThingIDArr\"));\r",
									"\r",
									"        for(let i=0;i<dataThingIDArray.length;i++){\r",
									"        \r",
									"            // body\r",
									"            let httpRequestRemoveThingStateInfo = {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                    \"ThingId\": dataThingIDArray[i],\r",
									"                    \"stateType\": fieldDataValue.CreateThingStateInfo.Type_Report, //Report\r",
									"                    \"stateKey\": fieldDataValue.CreateThingStateInfo.SensorKey //Temp\r",
									"                })\r",
									"            };\r",
									"\r",
									"            let optionsRemoveThingStateInfo = {\r",
									"                url: url + provisioningapis + urlThingRemoveThingStateInfo,\r",
									"                method: 'DELETE',\r",
									"                header: headersOptRemoveThingStateInfo,\r",
									"                body: httpRequestRemoveThingStateInfo\r",
									"            };\r",
									"\r",
									"            // console.log('response RemoveThingStateInfo');\r",
									"            let response = await reqPromise(optionsRemoveThingStateInfo);\r",
									"            let jsonDataRemoveThingStateInfo = await response.json();\r",
									"            // console.log('jsonDataRemoveThing',jsonDataRemoveThingStateInfo)\r",
									"        \r",
									"            let operationStatusRemoveThingStateInfo = await jsonDataRemoveThingStateInfo.OperationStatus;\r",
									"\r",
									"            //200\r",
									"            pm.test(\"RemoveThingStateInfo\" + [i+1]+ \" : Status code is \" + statusCodeSuccess, function () {\r",
									"                pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"            });\r",
									"            //20000\r",
									"            pm.test('RemoveThingStateInfo' + [i+1]+ ' : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"                pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"            });\r",
									"            //RemoveThingStateInfo is Success\r",
									"            pm.test('RemoveThingStateInfo' + [i+1]+ ' : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThingStateInfo+'\"', function () {\r",
									"                pm.expect(operationStatusRemoveThingStateInfo).to.have.property('Description', resultDescriptionRemoveThingStateInfo);\r",
									"            });\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveGroup\r",
									" RemoveGroup = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveGroup = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveGroup + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveGroup,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"            \r",
									"        };\r",
									"\r",
									"        let dataThingGroupIDArray = JSON.parse(pm.environment.get(\"GetResponse_ThingGroupIDArr\"));\r",
									"\r",
									"        for(let i=0;i<countDataGrop;i++){\r",
									"        \r",
									"            // body\r",
									"            let httpRequestRemoveGroup = {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                    \"GroupId\": dataThingGroupIDArray[0]\r",
									"                })\r",
									"            };\r",
									"\r",
									"            let optionsRemoveGroup = {\r",
									"                url: url + provisioningapis + urlGroupRemoveGroup,\r",
									"                method: 'DELETE',\r",
									"                header: headersOptRemoveGroup,\r",
									"                body: httpRequestRemoveGroup\r",
									"            };\r",
									"\r",
									"            // console.log('response RemoveGroup');\r",
									"            let response = await reqPromise(optionsRemoveGroup);\r",
									"            let jsonDataRemoveGroup = await response.json();\r",
									"            // console.log('jsonDataRemoveThing',jsonDataRemoveGroup)\r",
									"        \r",
									"            let operationStatusRemoveGroup = await jsonDataRemoveGroup.OperationStatus;\r",
									"\r",
									"            //200\r",
									"            pm.test(\"RemoveGroup\" + [i+1]+ \" : Status code is \" + statusCodeSuccess, function () {\r",
									"                pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"            });\r",
									"            //20000\r",
									"            pm.test('RemoveGroup' + [i+1]+ ' : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"                pm.expect(operationStatusRemoveGroup).to.have.property('Code', resultCodeSuccess);\r",
									"            });\r",
									"            //RemoveGroup is Success\r",
									"            pm.test('RemoveGroup' + [i+1]+ ' : OperationStatus Description is '+'\"'+ resultDescriptionRemoveGroup+'\"', function () {\r",
									"                pm.expect(operationStatusRemoveGroup).to.have.property('Description', resultDescriptionRemoveGroup);\r",
									"            });\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"//---------------- LogDefaultValue --------------//\r",
									"//set variable to LogDefaultValue JSON.parse\r",
									"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
									"// console.log('LogDefaultValue',LogDefaultValue);\r",
									"//---------------- set globals Other --------------//\r",
									"var SearchLog = LogDefaultValue.SearchLog;\r",
									"// console.log('SearchLog',SearchLog);\r",
									"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
									"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
									"var kbn_version = SearchLog.header.kbn_version;\r",
									"var authorization = SearchLog.header.Authorization;\r",
									"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
									"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
									"var namespace = LogDefaultValue.Other.namespace_control4mg;\r",
									"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
									"var header_x_ais_accountkey = LogDefaultValue.Other.header_x_ais_accountkey;\r",
									"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
									"var methodPost = LogDefaultValue.Other.methodPost;\r",
									"\r",
									"// Detail\r",
									"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
									"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
									"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
									"\r",
									"// Summary\r",
									"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
									"// ControlAPIs\r",
									"var applicationName = LogDefaultValue.Control.applicationName_mg4;\r",
									"var cmdName = LogDefaultValue.Control.cmdNameThingGroups;\r",
									"// var resultDesc = LogDefaultValue.Control.resultDescThing_success;\r",
									"var endPointNameControlAPIs = LogDefaultValue.Control.endPointNameControlAPIs;\r",
									"var endPointNameDesireEx = LogDefaultValue.Control.endPointNameDesireEx;\r",
									"var containerId = LogDefaultValue.Control.containerId;\r",
									"var requestObjectUrlStaging = LogDefaultValue.Control.requestObjectUrlStagingThingGroups;\r",
									"var xProtocolControl = LogDefaultValue.Control.xProtocolControl;\r",
									"var responseObjectPublished = LogDefaultValue.Control.responseObjectPublished;\r",
									"\r",
									"// Check CDR (Summary Log) and EDR (Detail Log)\r",
									"SearchLogFindTid = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSearchLogFindTid = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = x_ais_OrderRef_ControlThingGroups_fail +  current_timestamp; \r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestSearchLogFindTid = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"\r",
									"        let optionsSearchLogFindTid = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptSearchLogFindTid,\r",
									"            body: httpRequestSearchLogFindTid\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsSearchLogFindTid);\r",
									"        let jsonDataSearchLogFindTid = await response.json();\r",
									"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
									"        console.log('hits',hits)\r",
									"  \r",
									"        // find tid\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            // let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"        \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            if(applicationNameValue == applicationName){\r",
									"                // let tid = hits[i]._source.cauldron.tid;\r",
									"                // pm.environment.set(\"tid\", tid);\r",
									"                let sessionId = hits[i]._source.cauldron.sessionId;\r",
									"                pm.environment.set(\"sessionId\", sessionId);\r",
									"                break;\r",
									"           }\r",
									"        }\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"CheckLog = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCheckLog = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = pm.environment.get(\"sessionId\");\r",
									"\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestCheckLog = {\r",
									"            mode: 'raw',\r",
									"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"        let optionsCheckLog = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptCheckLog,\r",
									"            body: httpRequestCheckLog\r",
									"        }; \r",
									"        let response = await reqPromise(optionsCheckLog);\r",
									"        let jsonDataCheckLog = await response.json();\r",
									"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
									"        \r",
									"        // //200\r",
									"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });     \r",
									"        \r",
									"        let hits = jsonDataCheckLog.hits.hits\r",
									"        console.log('hits',hits)\r",
									"  \r",
									"        // find logType\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            //  let logType = hits[i]._source.cauldron.logType\r",
									"            let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"           \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            \r",
									"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
									"            // console.log('resultDataLog',resultDataLog)\r",
									"\r",
									"            let tidControl = x_ais_OrderRef_ControlThingGroups_fail + current_timestamp;\r",
									"            // console.log(tidControl);\r",
									"            if(applicationNameValue == applicationName){\r",
									"                 \r",
									"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ControlAPIs\r",
									"                    pm.test(\"Check Summary Log : ControlThingGroups\" , function () {\r",
									"                        console.log(\"======== Check Summary Log ( Expected = Actual) [ControlThingGroups] ==================\");\r",
									"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
									"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
									"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeNotFound);\r",
									"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionTheRequestedOperationCouldNotBeFound);\r",
									"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
									"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        // console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
									"                        // console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
									"                        \r",
									"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
									"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
									"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeNotFound); \r",
									"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionTheRequestedOperationCouldNotBeFound); \r",
									"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
									"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"\r",
									"                        let thingGroupId = JSON.parse(pm.environment.get(\"GetResponse_ThingGroupIDArr\"));\r",
									"                        let customUrl= urlCheckLog + requestObjectUrlStaging;\r",
									"                        let customAccountkey = pm.environment.get(\"GetResponse_AccountId\");\r",
									"\r",
									"                        // check identity\r",
									"                        // \"identity\":\"{\\\"ThingGroupsID\\\":[\\\"6013763596d0ed0001f59626\\\",\\\"6013763596d0ed0001f5962c\\\"]\"}\"\r",
									"                        let dataSummaryIdentity = JSON.parse(resultDataLog.identity);\r",
									"\r",
									"                        console.log(\"identity.ThingGroupID : [\" + dataSummaryIdentity.ThingGroupID + \"] = [\" + thingGroupId +\"]\");\r",
									"                        pm.expect(dataSummaryIdentity.ThingGroupID).to.eql(thingGroupId); \r",
									"\r",
									"                        // check custom\r",
									"                        // \\\"custom\\\":{ \\\"customData\\\":{ \\\"url\\\":\\\"mg-iot.sandais.com/api/v1/Control/ThingGroups\\\", \\\"accountkey\\\":\\\"609a6e83f1b87900018753cd\\\", \\\"ThingGroupID\\\":[ \\\"609a6ea5f1b87900018753ee\\\", \\\"5fa8efc8e1c3c90001303c68\\\" ] }, \\\"endPointSummary\\\":[ { \\\"no\\\":\\\"1\\\", \\\"endPointName\\\":\\\"db.AuthenticationCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:Inquiry was Success\\\", \\\"processTime\\\":0.0003 }, { \\\"no\\\":\\\"2\\\", \\\"endPointName\\\":\\\"db.ClientsCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:Inquiry was Success\\\", \\\"processTime\\\":0.0007 }, { \\\"no\\\":\\\"3\\\", \\\"endPointName\\\":\\\"db.AccountsCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:Inquiry was Success\\\", \\\"processTime\\\":0.0002 }, { \\\"no\\\":\\\"4\\\", \\\"endPointName\\\":\\\"db.GroupsCollection\\\", \\\"endPointURL\\\":null, \\\"responseStatus\\\":\\\"20000:Inquiry was Success\\\", \\\"processTime\\\":0.0003 } ] }\r",
									"\r",
									"                        let customData = resultDataLog.custom.customData\r",
									"\r",
									"                        console.log(\"custom.url : \" + customData.url + \" = \" + customUrl);\r",
									"                        console.log(\"custom.accountkey : \" + customData.accountkey + \" = \" + customAccountkey);\r",
									"                        console.log(\"custom.ThingGroupID : [\" + customData.ThingGroupID + \"] = [\" + thingGroupId +\"]\");\r",
									"\r",
									"                        pm.expect(customData.url).to.eql(customUrl); \r",
									"                        pm.expect(customData.accountkey).to.eql(customAccountkey); \r",
									"                        pm.expect(customData.ThingGroupID).to.eql(thingGroupId); \r",
									"\r",
									"                        let custom = resultDataLog.custom.endPointSummary;\r",
									"                        let countCustom = custom.length;\r",
									"                       \r",
									"                        // [\"db.AuthenticationCollection\",\"db.ClientsCollection\",\"db.AccountsCollection\",\"db.GroupsCollection\"]\r",
									"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_ControlThingGroups_004;\r",
									"                        // [\"20000:Inquiry was Success\",\"20000:Inquiry was Success\",\"20000:Inquiry was Success\",\"20000:Inquiry was Success\"]\r",
									"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_ControlThingGroups_004;\r",
									"                        let countCustomStep = dataEndPointName.length;\r",
									"\r",
									"                        console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep);\r",
									"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
									"                        \r",
									"                        for(let i=0;i<countCustomStep;i++){\r",
									"                            let no = custom[i].no;\r",
									"                            let valueEndPointName = custom[i].endPointName;\r",
									"                            let valueResponseStatus = custom[i].responseStatus;\r",
									"                            // console.log(\"i\",i);\r",
									"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
									"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
									"\r",
									"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString());\r",
									"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i]);\r",
									"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i]);\r",
									"\r",
									"                            pm.expect(no).to.eql((i+1).toString()); \r",
									"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
									"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]); \r",
									"                        }\r",
									"                    }); \r",
									"                }\r",
									"\r",
									"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail'\r",
									"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
									"                    // console.log('endPointNameValue ',endPointNameValue)\r",
									"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [ControlThingGroups]\", function () {\r",
									"                        console.log(\"======== Check Detail Log ( Expected = Actual) [ControlThingGroups] ==================\");\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
									"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
									"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
									"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
									"\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
									"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
									"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
									"                        // pm.expect(resultDataLog.EndPoint).to.eql(); \r",
									" \r",
									"                        // check requestObject\r",
									"                        // \"requestObject\":\"{\\\"headers\\\":{\\\"x-ais-orderref\\\":\\\"ControlThingGroups_202101290901653\\\",\\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAEL8HZk2RWAR3L0/hOZPjC5nvaeNw1EUMpcFyr//lMVTkIlAkkY2KW0\\\"},\\\"body\\\":{\\\"ThingGroupId\\\":[\\\"6013763596d0ed0001f59626\\\",\\\"6013763596d0ed0001f5962c\\\"],\\\"Sensors\\\":{\\\"Temp\\\":925}}}\"\r",
									"\r",
									"                        // \\\"requestObject\\\":\\\"{ \\\\\\\"url\\\\\\\":\\\\\\\"/api/v1/Control/ThingGroups\\\\\\\", \\\\\\\"method\\\\\\\":\\\\\\\"POST\\\\\\\", \\\\\\\"headers\\\\\\\":{ \\\\\\\"Cache-Control\\\\\\\":\\\\\\\"no-cache\\\\\\\", \\\\\\\"Content-Type\\\\\\\":\\\\\\\"application/json\\\\\\\", \\\\\\\"Accept\\\\\\\":\\\\\\\"*/*\\\\\\\", \\\\\\\"Accept-Encoding\\\\\\\":\\\\\\\"gzip, deflate, br\\\\\\\", \\\\\\\"Host\\\\\\\":\\\\\\\"mg-iot.sandais.com\\\\\\\", \\\\\\\"User-Agent\\\\\\\":\\\\\\\"PostmanRuntime/7.26.8\\\\\\\", \\\\\\\"Content-Length\\\\\\\":\\\\\\\"118\\\\\\\", \\\\\\\"x-real-ip\\\\\\\":\\\\\\\"182.232.183.255\\\\\\\", \\\\\\\"x-forwarded-for\\\\\\\":\\\\\\\"182.232.183.255, 10.233.67.0\\\\\\\", \\\\\\\"x-forwarded-proto\\\\\\\":\\\\\\\"http\\\\\\\", \\\\\\\"x-ais-orderref\\\\\\\":\\\\\\\"ControlThingGroupsfail_202105111805429\\\\\\\", \\\\\\\"x-ais-accountkey\\\\\\\":\\\\\\\"609a6e83f1b87900018753cd\\\\\\\", \\\\\\\"x-ais-accesstoken\\\\\\\":\\\\\\\"Bearer ibnxnVhs5Rx3IwglWv7/gVA/1TpQnKqAOBAADlRDvYhOpXwmlpYOEb5yfY5aZpoj0YRWRZM26i9HOqtc1fc1jpNDOK5JpISttmMEy59g2py7nLWonDe2YW2OPRGWSowk6+9ZihLU1fZ5d5jAqqrZaKlOAAI3N1TXDNLsHuKcOJMcERbCcaMqRaku+MY4/kzE+eyIdkfwwbjT91S2VQq+Wk2ooMWuLk6/DHVJhwbMP7YpnUSbPrxKFCX3+KLw/h9ST7JEHBms9wdKVegMrc8SMg==\\\\\\\", \\\\\\\"postman-token\\\\\\\":\\\\\\\"2d6670bd-90bf-4d07-9397-dfc7ede7c8ab\\\\\\\", \\\\\\\"x-envoy-external-address\\\\\\\":\\\\\\\"10.233.67.0\\\\\\\", \\\\\\\"x-request-id\\\\\\\":\\\\\\\"b238a178-57bf-4747-95e5-e617b433a6f8\\\\\\\", \\\\\\\"x-envoy-original-path\\\\\\\":\\\\\\\"/mg4controlapis/api/v1/Control/ThingGroups\\\\\\\", \\\\\\\"x-b3-traceid\\\\\\\":\\\\\\\"87b7df1a58095792a682eb3103d8e283\\\\\\\", \\\\\\\"x-b3-spanid\\\\\\\":\\\\\\\"8ade33777ab209bd\\\\\\\", \\\\\\\"x-b3-parentspanid\\\\\\\":\\\\\\\"a682eb3103d8e283\\\\\\\", \\\\\\\"x-b3-sampled\\\\\\\":\\\\\\\"0\\\\\\\", \\\\\\\"x-ais-SessionId\\\\\\\":\\\\\\\"1620733610368\\\\\\\", \\\\\\\"identity\\\\\\\":\\\\\\\"{ \\\\\\\\\\\\\\\"ThingGroupID\\\\\\\\\\\\\\\":[ \\\\\\\\\\\\\\\"609a6ea5f1b87900018753ee\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"5fa8efc8e1c3c90001303c68\\\\\\\\\\\\\\\" ] }\\\\\\\", \\\\\\\"custom\\\\\\\":\\\\\\\"{ \\\\\\\\\\\\\\\"url\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"mg-iot.sandais.com/api/v1/Control/ThingGroups\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"accountkey\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"609a6e83f1b87900018753cd\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"ThingGroupID\\\\\\\\\\\\\\\":[ \\\\\\\\\\\\\\\"609a6ea5f1b87900018753ee\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"5fa8efc8e1c3c90001303c68\\\\\\\\\\\\\\\" ] }\\\\\\\" }, \\\\\\\"queryString\\\\\\\":{ }, \\\\\\\"routeParamteters\\\\\\\":{ }, \\\\\\\"body\\\\\\\":{ \\\\\\\"ThingGroupId\\\\\\\":[ \\\\\\\"609a6ea5f1b87900018753ee\\\\\\\", \\\\\\\"5fa8efc8e1c3c90001303c68\\\\\\\" ], \\\\\\\"Sensors\\\\\\\":{ \\\\\\\"Temp\\\\\\\":185 } } }\\\"\r",
									"                       \r",
									"                        let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
									"                        // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
									"                        \r",
									"                        let url = requestObjectUrlStaging; \r",
									"                        let urlCustom = urlCheckLog + requestObjectUrlStaging;\r",
									"                        let SensorKey = fieldDataValue.CreateThingStateInfo.SensorKey;\r",
									"                        let sensor = pm.environment.get(\"random_Sensor_Control\");\r",
									"                        let x_ais_orderref = x_ais_OrderRef_ControlThingGroups_fail + current_timestamp;\r",
									"                        let x_ais_AccountKey = pm.environment.get(\"GetResponse_AccountId\");\r",
									"                        let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken\");\r",
									"                        let thingGroupId = JSON.parse(pm.environment.get(\"GetResponse_ThingGroupIDArr\"));\r",
									"\r",
									"                        console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
									"                        console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
									"                        console.log(\"headers.x_ais_AccountKey : \" + jsonParseRequestObject.headers[header_x_ais_accountkey] + \" = \" + x_ais_AccountKey);\r",
									"                        console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"                        console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
									"\r",
									"                        pm.expect(jsonParseRequestObject.url).to.eql(url); \r",
									"                        pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
									"                        pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                        pm.expect(jsonParseRequestObject.headers[header_x_ais_accountkey]).to.eql(x_ais_AccountKey);\r",
									"                        pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
									"\r",
									"                        let identity = JSON.parse(jsonParseRequestObject.headers.identity)\r",
									"                        console.log(\"headers.identity.ThingGroupID : [\" + identity.ThingGroupID + \"] = [\" + thingGroupId + \"]\" );\r",
									"                        pm.expect(identity.ThingGroupID).to.eql(thingGroupId);\r",
									"                        \r",
									"                        let custom = JSON.parse(jsonParseRequestObject.headers.custom)\r",
									"                        console.log(\"headers.custom.url : \" + custom.url + \" = \" + urlCustom);\r",
									"                        console.log(\"headers.custom.accountkey : \" + custom.accountkey + \" = \" + x_ais_AccountKey);\r",
									"                        console.log(\"headers.custom.ThingGroupID : [\" + custom.ThingGroupID + \"] = [\" + thingGroupId+ \"]\" );\r",
									"                        \r",
									"                        pm.expect(custom.url).to.eql(urlCustom);\r",
									"                        pm.expect(custom.accountkey).to.eql(x_ais_AccountKey);\r",
									"                        pm.expect(custom.ThingGroupID).to.eql(thingGroupId);\r",
									"\r",
									"                        console.log(\"queryString : \" + JSON.stringify(jsonParseRequestObject.queryString) + \" = \" + JSON.stringify({}));\r",
									"                        pm.expect(jsonParseRequestObject.queryString).to.eql({});\r",
									"\r",
									"                        console.log(\"routeParamteters : \" + JSON.stringify(jsonParseRequestObject.routeParamteters) + \" = \" + JSON.stringify({}));\r",
									"                        pm.expect(jsonParseRequestObject.routeParamteters).to.eql({});\r",
									"\r",
									"                        console.log(\"resquest.body.ThingGroupId : [\" + jsonParseRequestObject.body.ThingGroupId + \"] = [\" + thingGroupId + \"]\");\r",
									"                        console.log(\"resquest.body.Sensors.\" + SensorKey + \"  : \" + jsonParseRequestObject.body.Sensors[SensorKey] + \" = \" + sensor);\r",
									"\r",
									"                        pm.expect(jsonParseRequestObject.body.ThingGroupId).to.eql(thingGroupId);\r",
									"                        pm.expect(jsonParseRequestObject.body.Sensors[SensorKey]).to.eql(sensor);\r",
									"\r",
									"                        // check responseObject\r",
									"                            // \\\"responseObject\\\":\\\"{ \\\\\\\"OperationStatus\\\\\\\":{ \\\\\\\"Code\\\\\\\":\\\\\\\"40400\\\\\\\", \\\\\\\"DeveloperMessage\\\\\\\":\\\\\\\"The requested operation could not be found.\\\\\\\", \\\\\\\"Details\\\\\\\":[ { \\\\\\\"Target\\\\\\\":\\\\\\\"ThingId\\\\\\\", \\\\\\\"DeveloperMessage\\\\\\\":\\\\\\\"The ThingId '5f61cf2d51c1f10001fb779b' could not be found.\\\\\\\" } ] } }\\\"\r",
									"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
									"                            // console.log('jsonParseResponseObject',jsonParseResponseObject);\r",
									"\r",
									"                            console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeNotFound);\r",
									"                            console.log(\"response.OperationStatus.DeveloperMessage : \" + jsonParseResponseObject.OperationStatus.DeveloperMessage + \" = \" + resultDescriptionTheRequestedOperationCouldNotBeFound);\r",
									"\r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeNotFound);  \r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.DeveloperMessage).to.eql(resultDescriptionTheRequestedOperationCouldNotBeFound);  \r",
									"\r",
									"                            let countDetails= jsonData.OperationStatus.Details;\r",
									"                            for(let i=0;i<countDetails.length;i++){\r",
									"\r",
									"                                console.log(\"response.OperationStatus.Details[\"+ i +\"].Target : \" + countDetails[i].Target + \" = \" + detailsResponse.target_ThingGroupId);\r",
									"                                console.log(\"response.OperationStatus.Details[\"+ i +\"].DeveloperMessage : \" + countDetails[i].DeveloperMessage + \" = \" + resultDescriptionErrorTheThingGroupId2 + \"'\"+ ThingGroupId_Value_ControlThingGroups_004+ \"'\"+ resultDescriptionErrorCouldNotBeFound);\r",
									"\r",
									"                                pm.expect(countDetails[i].Target).to.eql(detailsResponse.target_ThingGroupId);\r",
									"                                pm.expect(countDetails[i].DeveloperMessage).to.eql(resultDescriptionErrorTheThingGroupId2 + \"'\"+ ThingGroupId_Value_ControlThingGroups_004+ \"'\"+ resultDescriptionErrorCouldNotBeFound);\r",
									"                            } \r",
									"                    }); \r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"setTimeout(function(){SearchLogFindTid();}, 40000); \r",
									"setTimeout(function(){CheckLog();}, 50000); \r",
									"\r",
									"setTimeout(function(){RemoveGroup();}, 60000); \r",
									"setTimeout(function(){RemoveThingStateInfo();}, 65000); \r",
									"setTimeout(function(){RemoveThing();}, 70000); \r",
									"setTimeout(function(){RemoveAccount();}, 80000); \r",
									"setTimeout(function(){RemovePartner();}, 85000); \r",
									"\r",
									"setTimeout(function(){\r",
									"pm.environment.unset(\"current_timestamp\");\r",
									"pm.environment.unset(\"AccessToken\");\r",
									"pm.environment.unset(\"random_number\");\r",
									"pm.environment.unset(\"PartnerName\");\r",
									"pm.environment.unset(\"MerchantContact\");\r",
									"pm.environment.unset(\"CPID\");\r",
									"pm.environment.unset(\"GetResponse_PartnerId\");\r",
									"pm.environment.unset(\"AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountId\");\r",
									"for(let i=0;i<countData;i++){\r",
									"pm.environment.unset(\"random_IM\"+[i+1]);\r",
									"pm.environment.unset(\"random_ICCID\"+[i+1]);\r",
									"pm.environment.unset(\"ThingName\"+[i+1]);\r",
									"pm.environment.unset(\"ThingGroupName\"+[i+1]);\r",
									"}\r",
									"\r",
									"pm.environment.unset(\"GetResponse_ThingIDArr\");\r",
									"pm.environment.unset(\"random_Sensor\");\r",
									"pm.environment.unset(\"GetResponse_ThingGroupIDArr\");\r",
									"pm.environment.unset(\"tid\");\r",
									"pm.environment.unset(\"sessionId\");\r",
									"pm.environment.unset(\"SensorKey\");\r",
									"pm.environment.unset(\"random_Sensor_Control\");\r",
									"}, 90000); "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var Username = pm.environment.get(\"Username\");\r",
									"var Password = pm.environment.get(\"Password\");\r",
									"\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//count for loop data\r",
									"var countData = 2;\r",
									"var countDataGrop = 1;\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"pm.environment.set(\"SensorKey\",fieldDataValue.CreateThingStateInfo.SensorKey)\r",
									"\r",
									"//mockup Data for case Control_Thing_TST_F4_0_2_004 \"5fa8efc8e1c3c90001303c68\"\r",
									"var mockupData = fieldDataValue.Control.Value_ControlThingGroup_TST_F4_0_2_004_Error;\r",
									"\r",
									"//format YYYYMMDDHHMMSSS\r",
									"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
									"// console.log('currentTmestamp',currentTmestamp);\r",
									"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- statusCodeList --------------//\r",
									"//set variable to statusCodeList JSON.parse\r",
									"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
									"//set global variable to statusCode 200\r",
									"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
									"//set global variable to statusCode 201\r",
									"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
									"//set global variable to statusCode 404\r",
									"pm.globals.set(\"statusCodeNotFound\", statusCodeList.statusCodeNotFound);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultCodeList --------------//\r",
									"//set variable to resultCodeList JSON.parse\r",
									"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
									"//set global variable to resultCode \"20000\"\r",
									"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
									"//set global variable to resultCode \"20100\"\r",
									"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
									"//set global variable to resultCode \"40400\"\r",
									"pm.globals.set(\"resultCodeNotFound\", resultCodeList.resultCodeNotFound);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionSuccessList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
									"//set global variable to resultDescription \"SignInProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
									"//set global variable to resultDescription \"CreatePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
									"//set global variable to resultDescription \"CreateAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
									"//set global variable to resultDescription \"CreateThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThing\", resultDescriptionSuccessList.resultDescriptionCreateThing);\r",
									"//set global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThingStateInfo\", resultDescriptionSuccessList.resultDescriptionCreateThingStateInfo);\r",
									"//set global variable to resultDescription \"RemovePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
									"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
									"//set global variable to resultDescription \"RemoveThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThing\", resultDescriptionSuccessList.resultDescriptionRemoveThing);\r",
									"//set global variable to resultDescription \"RemoveThingStateInfo is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThingStateInfo\", resultDescriptionSuccessList.resultDescriptionRemoveThingStateInfo);\r",
									"//set global variable to resultDescription \"CreateGroup is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateGroup\", resultDescriptionSuccessList.resultDescriptionCreateGroup);\r",
									"//set global variable to resultDescription \"RemoveGroup is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveGroup\", resultDescriptionSuccessList.resultDescriptionRemoveGroup);\r",
									"//set global variable to resultDescription \"Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccess\", resultDescriptionSuccessList.resultDescriptionSuccess);\r",
									"//set global variable to resultDescription \"Created Success\"\r",
									"pm.globals.set(\"resultDescriptionCreatedSuccess\", resultDescriptionSuccessList.resultDescriptionCreatedSuccess);\r",
									"//set global variable to resultDescription \"ControlManyGroups is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessControlManyGroups\", resultDescriptionSuccessList.resultDescriptionSuccessControlManyGroups);\r",
									"//set global variable to resultDescription \"InquiryThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionInquiryThing\", resultDescriptionSuccessList.resultDescriptionInquiryThing);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionErrorList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
									"//set global variable to resultDescription \"The ThingGroupId : \"\r",
									"// pm.globals.set(\"resultDescriptionErrorTheThingGroupId\", resultDescriptionErrorList.resultDescriptionErrorTheThingGroupId);\r",
									"//set global variable to resultDescription \" is Not Found\"\r",
									"// pm.globals.set(\"resultDescriptionErrorTheThingIsNotFound\", resultDescriptionErrorList.resultDescriptionErrorTheThingIsNotFound);\r",
									"//set global variable to resultDescription \"The requested operation could not be found.\"\r",
									"pm.globals.set(\"resultDescriptionTheRequestedOperationCouldNotBeFound\", resultDescriptionErrorList.resultDescriptionTheRequestedOperationCouldNotBeFound);\r",
									"//set global variable to resultDescription \"The ThingGroupId \"\r",
									"pm.globals.set(\"resultDescriptionErrorTheThingGroupId2\", resultDescriptionErrorList.resultDescriptionErrorTheThingGroupId2);\r",
									"//set global variable to resultDescription \" could not be found.\"\r",
									"pm.globals.set(\"resultDescriptionErrorCouldNotBeFound\", resultDescriptionErrorList.resultDescriptionErrorCouldNotBeFound);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- HeaderList --------------//\r",
									"//set variable to HeaderList JSON.parse\r",
									"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
									"//---------------- set globals Other --------------//\r",
									"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
									"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
									"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
									"//set global variable to kbn-versio \"7.5.1\"\r",
									"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Signin_ --------------//\r",
									"//set global variable to x_ais_OrderRef \"Signin_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreatePartner --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
									"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
									"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
									"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreateAccount --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
									"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
									"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Thing --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThing\", HeaderList.Thing.x_ais_OrderRef_CreateThing);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThing\", HeaderList.Thing.x_ais_OrderDesc_CreateThing);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThing\", HeaderList.Thing.x_ais_OrderRef_RemoveThing);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThing\", HeaderList.Thing.x_ais_OrderDesc_RemoveThing);\r",
									"//set global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_CreateThingStateInfo);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThingStateInfo\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderDesc_RemoveThingStateInfo);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThingStateInfo_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThingStateInfo\", HeaderList.Thing.x_ais_OrderRef_RemoveThingStateInfo);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Group --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateGroup_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateGroup\", HeaderList.Group.x_ais_OrderRef_CreateGroup);\r",
									"//set global variable to x_ais_OrderDesc \"CreateGroup\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateGroup\", HeaderList.Group.x_ais_OrderDesc_CreateGroup);\r",
									"//set global variable to x_ais_OrderRef \"RemoveGroup_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveGroup\", HeaderList.Group.x_ais_OrderRef_RemoveGroup);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveGroup\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveGroup\", HeaderList.Group.x_ais_OrderDesc_RemoveGroup);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Control --------------//\r",
									"//set global variable to x_ais_OrderRef \"ControlThingGroups_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ControlThingGroups\", HeaderList.Control.x_ais_OrderRef_ControlThingGroups);\r",
									"//set global variable to x_ais_OrderRef \"ControlThingGroupsfail_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_ControlThingGroups_fail\", HeaderList.Control.x_ais_OrderRef_ControlThingGroups_fail);\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"SignInProcess is Success\"\r",
									"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
									"//get global variable to resultDescription \"CreatePartner is Success\"\r",
									"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
									"//get global variable to resultDescription \"CreateAccount is Success\"\r",
									"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
									"//get global variable to resultDescription \"CreateThing is Success\"\r",
									"var resultDescriptionCreateThing = pm.globals.get(\"resultDescriptionCreateThing\");\r",
									"//get global variable to resultDescription \"CreateThingStateInfo is Success\"\r",
									"var resultDescriptionCreateThingStateInfo = pm.globals.get(\"resultDescriptionCreateThingStateInfo\");\r",
									"//get global variable to resultDescription \"CreateGroup is Success\"\r",
									"var resultDescriptionCreateGroup = pm.globals.get(\"resultDescriptionCreateGroup\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- urlRouteList --------------//\r",
									"//set variable to urlRouteList JSON.parse\r",
									"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
									"//---------------- set url Create --------------//\r",
									"//set global variable to url \"/api/v1/auth/signin\"\r",
									"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
									"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
									"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"pm.globals.set(\"urlThingCreateThing\", urlRouteList.Thing.urlThingCreateThing);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"pm.globals.set(\"urlThingCreateThingStateInfo\", urlRouteList.Thing.urlThingCreateThingStateInfo);\r",
									"//set global variable to url \"/api/v1/Group/CreateGroup\"\r",
									"pm.globals.set(\"urlGroupCreateGroup\", urlRouteList.Group.urlGroupCreateGroup);\r",
									"//---------------- get url Create --------------//\r",
									"//get global variable to url \"/api/v1/auth/signin\"\r",
									"var urlSignin = pm.globals.get(\"urlSignin\");\r",
									"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
									"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"var urlThingCreateThing = pm.globals.get(\"urlThingCreateThing\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThingStateInfo\"\r",
									"var urlThingCreateThingStateInfo = pm.globals.get(\"urlThingCreateThingStateInfo\");\r",
									"//get global variable to url \"/api/v1/Group/CreateGroup\"\r",
									"var urlGroupCreateGroup = pm.globals.get(\"urlGroupCreateGroup\");\r",
									"//---------------- set url Remove --------------//\r",
									"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
									"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"pm.globals.set(\"urlThingRemoveThing\", urlRouteList.Thing.urlThingRemoveThing);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThingStateInfo\"\r",
									"pm.globals.set(\"urlThingRemoveThingStateInfo\", urlRouteList.Thing.urlThingRemoveThingStateInfo);\r",
									"//set global variable to url \"/api/v1/Group/RemoveGroup\"\r",
									"pm.globals.set(\"urlGroupRemoveGroup\", urlRouteList.Group.urlGroupRemoveGroup);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Signin_ --------------//\r",
									"//get global variable to x_ais_OrderRef \"Signin_\"\r",
									"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"var x_ais_OrderRef_CreateThing = pm.globals.get(\"x_ais_OrderRef_CreateThing\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"var x_ais_OrderDesc_CreateThing = pm.globals.get(\"x_ais_OrderDesc_CreateThing\");\r",
									"//get global variable to x_ais_OrderRef \"CreateThingStateInfo_\"\r",
									"var x_ais_OrderRef_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderRef_CreateThingStateInfo\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThingStateInfo\"\r",
									"var x_ais_OrderDesc_CreateThingStateInfo = pm.globals.get(\"x_ais_OrderDesc_CreateThingStateInfo\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Group --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateGroup_\"\r",
									"var x_ais_OrderRef_CreateGroup = pm.globals.get(\"x_ais_OrderRef_CreateGroup\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateGroup\"\r",
									"var x_ais_OrderDesc_CreateGroup = pm.globals.get(\"x_ais_OrderDesc_CreateGroup\");\r",
									"//------------------------------------------------------------//\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            // console.log('response111',response);\r",
									"            // console.log('errerrerr',err);\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// Signin get token\r",
									" Signin = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSignin = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestSignin = {\r",
									"            mode: 'raw',\r",
									"            raw: \r",
									"            JSON.stringify({\r",
									"                username:Username,\r",
									"                password:Password\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsSignin = {\r",
									"            url: url + provisioningapis + urlSignin,\r",
									"            method: 'POST',\r",
									"            header: headersOptSignin,\r",
									"            body: httpRequestSignin\r",
									"        };\r",
									"        // console.log('request Signin');\r",
									"        let response = await reqPromise(optionsSignin);\r",
									"        let jsonDataSignin = await response.json();\r",
									"\r",
									"        // setAccessToken\r",
									"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
									"\r",
									"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // SignInProcess is Success\r",
									"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
									"        });\r",
									"\r",
									"        //set random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //set PartnerName\r",
									"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
									"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
									"        //set MerchantContact\r",
									"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
									"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
									"        // set CPID\r",
									"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
									"        pm.environment.set(\"CPID\", CPIDValue)\r",
									"        \r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreatePartner\r",
									" CreatePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreatePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreatePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
									"                \"PartnerType\": [\r",
									"                    \"Supplier\",\r",
									"                    \"Customer\"\r",
									"                ],\r",
									"                \"PartnerDetail\": {\r",
									"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
									"                    \"CPID\": pm.environment.get(\"CPID\")\r",
									"                },\r",
									"                \"Property\": {\r",
									"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsCreatePartner = {\r",
									"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreatePartner,\r",
									"            body: httpRequestCreatePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsCreatePartner);\r",
									"        let jsonDataCreatePartner = await response.json();\r",
									"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
									"    \r",
									"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreatePartner is Success\r",
									"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
									"        });\r",
									"\r",
									"        //GetResponse_PartnerId\r",
									"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
									"\r",
									"        //Accountname\r",
									"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
									"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateAccount\r",
									" CreateAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreateAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
									"                })\r",
									"        };\r",
									"        \r",
									"        let optionsCreateAccount = {\r",
									"            url: url + provisioningapis + urlAccountCreateAccount,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateAccount,\r",
									"            body: httpRequestCreateAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateAccount');\r",
									"        let response = await reqPromise(optionsCreateAccount);\r",
									"        let jsonDataCreateAccount = await response.json();\r",
									"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
									"    \r",
									"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateAccount : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateAccount is Success\r",
									"        pm.test('CreateAccount : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
									"        });\r",
									"        // GetResponse_AccountName\r",
									"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
									"        // GetResponse_AccountId\r",
									"        pm.environment.set(\"GetResponse_AccountId\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
									"       \r",
									" // // random_IM\r",
									"        // pm.environment.set(\"random_IM\", _.random(10000000, 99999999)+\" \"+_.random(1000000, 9999999))\r",
									"        // // random_ICCID\r",
									"        // pm.environment.set(\"random_ICCID\", _.random(1000000, 9999999)+\" \"+_.random(100000, 999999))\r",
									"        // // random_number\r",
									"        // pm.environment.set(\"random_number\",pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        // //ThingName\r",
									"        // pm.environment.set(\"ThingName\",\"Sensor_TestThingName\"+pm.environment.get(\"random_number\"))\r",
									"\r",
									"        // random_number\r",
									"        pm.environment.set(\"random_number\",pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"\r",
									"        for(let i=0;i<countData;i++){\r",
									"            // random_IM\r",
									"            pm.environment.set(\"random_IM\"+[i+1], _.random(10000000, 99999999)+\" \"+_.random(1000000, 9999999))\r",
									"            // random_ICCID\r",
									"            pm.environment.set(\"random_ICCID\"+[i+1], _.random(1000000, 9999999)+\" \"+_.random(100000, 999999))\r",
									"\r",
									"            //ThingName\r",
									"            let thingNameValue = fieldDataValue.Thing.ThingNameValue; // \"Sensor_TestThingName\"\r",
									"            pm.environment.set(\"ThingName\"+[i+1],thingNameValue + [i+1] + pm.environment.get(\"random_number\"))            \r",
									"        }\r",
									"        for(let i=0;i<countDataGrop;i++){\r",
									"            //ThinggroupName\r",
									"            let ThingGroupNameValue = fieldDataValue.Group.ThingGroupNameValue; // \"Sensor_TestThingGroupName\"\r",
									"            pm.environment.set(\"ThingGroupName\"+[i+1],ThingGroupNameValue + [i+1] + pm.environment.get(\"random_number\"))\r",
									"        }\r",
									"            \r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThing\r",
									" CreateThingArr = async () =>  {\r",
									"    try {\r",
									"        \r",
									"        // header\r",
									"        let headersOptCreateThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThing');\r",
									"        let dataThingIdArr = [];\r",
									"        for(let i=0;i<countData;i++){\r",
									"            // body\r",
									"            let httpRequestCreateThing = {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                    \"ThingName\": pm.environment.get(\"ThingName\"+ [i+1]),\r",
									"                    \"IMEI\": pm.environment.get(\"random_IM\"+ [i+1]),\r",
									"                    \"IMSI\": pm.environment.get(\"random_IM\"+ [i+1]),\r",
									"                    \"ICCID\": pm.environment.get(\"random_ICCID\"+ [i+1]),\r",
									"                    \"RouteUrl\": fieldDataValue.Thing.RouteUrlValue , //[\"http://10.12.3.4:2019/api/information/AddInformation\"]\r",
									"                    \"RouteInfo\": {\r",
									"                        \"MIMO_ID\": fieldDataValue.Thing.RouteInfoMIMOIDValue , //\"606edada\"\r",
									"                        \"MIMO_SerialNo\": fieldDataValue.Thing.RouteInfoMIMOSerialNoValue //5466758878\r",
									"                    },\r",
									"                    \"RouteFlag\": {\r",
									"                        \"ThingName\": fieldDataValue.Thing.RouteFlagThingNameValue , //true\r",
									"                        \"ThingToken\": fieldDataValue.Thing.RouteFlagThingTokenValue, //true\r",
									"                        \"IMEI\": fieldDataValue.Thing.RouteFlagIMEIValue, //true\r",
									"                        \"ICCID\": fieldDataValue.Thing.RouteFlagICCIDValue, //true\r",
									"                        \"RouteInfo\": fieldDataValue.Thing.RouteFlagRouteInfoValue //true\r",
									"                    }\r",
									"                })\r",
									"            };\r",
									"            \r",
									"            let optionsCreateThing = {\r",
									"                url: url + provisioningapis + urlThingCreateThing,\r",
									"                method: 'POST',\r",
									"                header: headersOptCreateThing,\r",
									"                body: httpRequestCreateThing\r",
									"            };\r",
									"            let response = await reqPromise(optionsCreateThing);\r",
									"            let jsonDataCreateThing = await response.json();\r",
									"            let ThingId = await jsonDataCreateThing.ThingInfo.ThingId;\r",
									"            dataThingIdArr.push(ThingId);\r",
									"            let operationStatusCreateThing = await jsonDataCreateThing.OperationStatus;\r",
									"\r",
									"            //201\r",
									"            pm.test(\"CreateThing\"+ [i+1]+ \" : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"                pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"            });\r",
									"            //20100\r",
									"            pm.test('CreateThing'+ [i+1]+ ' : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"                pm.expect(operationStatusCreateThing).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"            });\r",
									"            //CreateThing is Success\r",
									"            pm.test('CreateThing'+ [i+1]+ ' : OperationStatus Description is '+'\"'+ resultDescriptionCreateThing+'\"', function () {\r",
									"                pm.expect(operationStatusCreateThing).to.have.property('Description', resultDescriptionCreateThing);\r",
									"            });\r",
									"        }\r",
									"        \r",
									"        // console.log('dataThingIdArr',dataThingIdArr);\r",
									"        // pm.environment.set(\"GetResponse_ThingID\",jsonDataCreateThing.ThingInfo.ThingId)\r",
									"        pm.environment.set(\"GetResponse_ThingIDArr\",JSON.stringify(dataThingIdArr))\r",
									"        \r",
									"        //Get Random Sensor \r",
									"        pm.environment.set(\"random_Sensor\", _.random(100, 999))\r",
									"\r",
									"        //Get Random Sensor Control\r",
									"        pm.environment.set(\"random_Sensor_Control\", _.random(100, 999))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThingStateInfo\r",
									" CreateThingStateInfo = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThingStateInfo = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateThingStateInfo + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateThingStateInfo,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let dataThingIDArray = JSON.parse(pm.environment.get(\"GetResponse_ThingIDArr\"));\r",
									"        // console.log('dataThingIDArray',dataThingIDArray);\r",
									"\r",
									"        // {\"Temp\" : pm.environment.get(\"random_Sensor\")}\r",
									"        let sensorValue = {};\r",
									"        sensorValue[fieldDataValue.CreateThingStateInfo.SensorKey] = pm.environment.get(\"random_Sensor\");\r",
									"        // console.log('sensorValue',sensorValue);\r",
									"        \r",
									"        let httpRequestCreateThingStateInfo = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": dataThingIDArray,\r",
									"                \"Type\": fieldDataValue.CreateThingStateInfo.Type_Report,\r",
									"                \"Sensor\": sensorValue\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsCreateThingStateInfo = {\r",
									"            url: url + provisioningapis + urlThingCreateThingStateInfo,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThingStateInfo,\r",
									"            body: httpRequestCreateThingStateInfo\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThingStateInfo');\r",
									"        let response = await reqPromise(optionsCreateThingStateInfo);\r",
									"\r",
									"        let jsonDataCreateThingStateInfo = await response.json();\r",
									"        let operationStatusCreateThingStateInfo = await jsonDataCreateThingStateInfo.OperationStatus;\r",
									"        // console.log('operationStatusCreateThingStateInfo',operationStatusCreateThingStateInfo);\r",
									"\r",
									"        //200\r",
									"        pm.test(\"CreateThingStateInfo : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //CreateThingStateInfo is Success\r",
									"        pm.test('CreateThingStateInfo : OperationStatus Description is '+'\"'+ resultDescriptionCreateThingStateInfo+'\"', function () {\r",
									"            pm.expect(operationStatusCreateThingStateInfo).to.have.property('Description', resultDescriptionCreateThingStateInfo);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThingGroup\r",
									" CreateThingGroupArr = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThingGroup = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateGroup + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateGroup,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        let dataThingIDArray = JSON.parse(pm.environment.get(\"GetResponse_ThingIDArr\"));\r",
									"        // console.log('dataThingIDArray',dataThingIDArray);\r",
									"\r",
									"        let dataThingGroupIdArr = [];\r",
									"        for(let i=0;i<countDataGrop;i++){\r",
									"            // body\r",
									"            let httpRequestCreateThingGroup = {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                        \"ThingGroupName\": pm.environment.get(\"ThingGroupName\"+ [i+1]),\r",
									"                        \"ThingId\": dataThingIDArray\r",
									"                        })\r",
									"            };\r",
									"             let optionsCreateThingGroup = {\r",
									"                url: url + provisioningapis + urlGroupCreateGroup,\r",
									"                method: 'POST',\r",
									"                header: headersOptCreateThingGroup,\r",
									"                body: httpRequestCreateThingGroup\r",
									"            };\r",
									"\r",
									"            // console.log('request CreateThingGroup');\r",
									"            let response = await reqPromise(optionsCreateThingGroup);\r",
									"\r",
									"            let jsonDataCreateThingGroup = await response.json();\r",
									"            let operationStatusCreateThingGroup = await jsonDataCreateThingGroup.OperationStatus;\r",
									"        \r",
									"            //200\r",
									"            pm.test(\"CreateThingGroup\"+ [i+1]+ \" : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"                pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"            });\r",
									"            //20000\r",
									"            pm.test('CreateThingGroup'+ [i+1]+ ' : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"                pm.expect(operationStatusCreateThingGroup).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"            });\r",
									"            //CreateThingGroup is Success\r",
									"            pm.test('CreateThingGroup'+ [i+1]+ ' : OperationStatus Description is '+'\"'+ resultDescriptionCreateGroup+'\"', function () {\r",
									"                pm.expect(operationStatusCreateThingGroup).to.have.property('Description', resultDescriptionCreateGroup);\r",
									"            });\r",
									"            \r",
									"            dataThingGroupIdArr.push(jsonDataCreateThingGroup.GroupInfo.GroupId);\r",
									"            \r",
									"        }\r",
									"            dataThingGroupIdArr.push(mockupData);\r",
									"            // GetResponse_ThingGroupID\r",
									"            pm.environment.set(\"GetResponse_ThingGroupIDArr\",JSON.stringify(dataThingGroupIdArr));\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"Signin();\r",
									"setTimeout(async function(){await CreatePartner();}, 3000); \r",
									"setTimeout(async function(){await CreateAccount();}, 6000); \r",
									"setTimeout(async function(){await CreateThingArr();}, 8000); \r",
									"setTimeout(async function(){await CreateThingStateInfo();}, 20000); \r",
									"setTimeout(async function(){await CreateThingGroupArr();}, 30000); \r",
									"setTimeout(async function(){}, 35000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-ais-OrderRef",
								"value": "{{x_ais_OrderRef_ControlThingGroups_fail}}{{current_timestamp}}"
							},
							{
								"key": "x-ais-AccountKey",
								"type": "text",
								"value": "{{GetResponse_AccountId}}"
							},
							{
								"key": "x-ais-AccessToken",
								"value": "{{Bearer}} {{AccessToken}}"
							},
							{
								"key": "Accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"ThingGroupId\": {{GetResponse_ThingGroupIDArr}},\r\n  \"Sensors\": {\r\n    \"{{SensorKey}}\": {{random_Sensor_Control}}\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{url}}{{mg4controlapis}}/api/v1/Control/ThingGroups",
							"host": [
								"{{url}}{{mg4controlapis}}"
							],
							"path": [
								"api",
								"v1",
								"Control",
								"ThingGroups"
							]
						},
						"description": "Type:Desire"
					},
					"response": []
				}
			]
		}
	]
}