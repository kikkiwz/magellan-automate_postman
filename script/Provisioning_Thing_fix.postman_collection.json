{
	"info": {
		"_postman_id": "f946c078-8f7c-44a5-bc71-ee0fd5e653dd",
		"name": "Provisioning_Thing_fix",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "InquiryThing",
			"item": [
				{
					"name": "InquiryThing_TST_F13_1_1_001_Success_InquiryAll_RootAdmin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to x_ais_OrderRef \"InquiryThing_\"\r",
									"var x_ais_OrderRef_InquiryThing = pm.globals.get(\"x_ais_OrderRef_InquiryThing\");\r",
									"//get global variable to x_ais_OrderDesc \"InquiryThing\"\r",
									"var x_ais_OrderDesc_InquiryThing = pm.globals.get(\"x_ais_OrderDesc_InquiryThing\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get url Remove --------------//\r",
									"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
									"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"RemovePartner is Success\"\r",
									"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
									"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
									"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to resultDescription \"InquiryThing is Success\"\r",
									"var resultDescriptionInquiryThing = pm.globals.get(\"resultDescriptionInquiryThing\");\r",
									"//------------------------------------------------------------//\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"InquiryThing : Status code is \" + statusCodeSuccess, function () {\r",
									"    pm.response.to.have.status(statusCodeSuccess);\r",
									"});\r",
									"\r",
									"pm.test('InquiryThing : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeSuccess);\r",
									"});\r",
									"\r",
									"pm.test('InquiryThing : OperationStatus Description is '+'\"'+ resultDescriptionInquiryThing+'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionInquiryThing);\r",
									"});\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// RemovePartner\r",
									" RemovePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemovePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemovePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemovePartner = {\r",
									"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemovePartner,\r",
									"            body: httpRequestRemovePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request RemovePartner');\r",
									"        let response = await reqPromise(optionsRemovePartner);\r",
									"        let jsonDataRemovePartner = await response.json();\r",
									"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
									"    \r",
									"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemovePartner is Success\r",
									"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveAccount\r",
									" RemoveAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemoveAccount = {\r",
									"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveAccount,\r",
									"            body: httpRequestRemoveAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveAccount');\r",
									"        let response = await reqPromise(optionsRemoveAccount);\r",
									"        let jsonDataRemoveAccount = await response.json();\r",
									"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
									"    \r",
									"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveAccount is Success\r",
									"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"//---------------- LogDefaultValue --------------//\r",
									"//set variable to LogDefaultValue JSON.parse\r",
									"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
									"// console.log('LogDefaultValue',LogDefaultValue);\r",
									"//---------------- set globals Other --------------//\r",
									"var SearchLog = LogDefaultValue.SearchLog;\r",
									"// console.log('SearchLog',SearchLog);\r",
									"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
									"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
									"var kbn_version = SearchLog.header.kbn_version;\r",
									"var authorization = SearchLog.header.Authorization;\r",
									"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
									"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
									"var namespace = LogDefaultValue.Other.namespace;\r",
									"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
									"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
									"var header_x_ais_username = LogDefaultValue.Other.header_x_ais_username;\r",
									"var header_x_ais_accountkey = LogDefaultValue.Other.header_x_ais_accountkey;\r",
									"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
									"var methodPost = LogDefaultValue.Other.methodPost;\r",
									"\r",
									"// Detail\r",
									"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
									"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
									"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
									"\r",
									"// Summary\r",
									"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
									"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
									"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
									"\r",
									"// ProvisioningAPIs [InquiryThing]\r",
									"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
									"var cmdName = LogDefaultValue.Provisioning.Thing.cmdNameInquiryThing;\r",
									"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
									"var containerId = LogDefaultValue.Provisioning.containerId;\r",
									"var requestObjectUrlStaging = LogDefaultValue.Provisioning.Thing.requestObjectUrlInquiryThingMgStaging;\r",
									"\r",
									"// Check CDR (Summary Log) and EDR (Detail Log)\r",
									"SearchLogFindTid = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSearchLogFindTid = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = x_ais_OrderRef_InquiryThing + current_timestamp;\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\", valueSearch)\r",
									"\r",
									"        // body\r",
									"        let httpRequestSearchLogFindTid = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({ \"version\": \"true\", \"size\": 500, \"sort\": [{ \"@timestamp_es\": { \"order\": \"desc\", \"unmapped_type\": \"boolean\" } }], \"_source\": { \"excludes\": [] }, \"aggs\": { \"2\": { \"date_histogram\": { \"field\": \"@timestamp_es\", \"fixed_interval\": \"30s\", \"time_zone\": \"Asia/Bangkok\", \"min_doc_count\": 1 } } }, \"stored_fields\": [\"*\"], \"script_fields\": {}, \"docvalue_fields\": [{ \"field\": \"@timestamp_es\", \"format\": \"date_time\" }, { \"field\": \"cauldron.custom1.activityLog.endTime\", \"format\": \"date_time\" }, { \"field\": \"cauldron.custom1.activityLog.startTime\", \"format\": \"date_time\" }, { \"field\": \"time\", \"format\": \"date_time\" }], \"query\": { \"bool\": { \"must\": [], \"filter\": [{ \"multi_match\": { \"type\": \"best_fields\", \"query\": '\"' + valueSearch + '\"', \"lenient\": \"true\" } }, { \"range\": { \"@timestamp_es\": { \"format\": \"strict_date_optional_time\", \"gte\": setRangeGTE, \"lte\": setRangeLTE } } }], \"should\": [], \"must_not\": [] } }, \"highlight\": { \"pre_tags\": [\"@kibana-highlighted-field@\"], \"post_tags\": [\"@/kibana-highlighted-field@\"], \"fields\": { \"*\": {} }, \"fragment_size\": 2147483647 } })\r",
									"        };\r",
									"\r",
									"        let optionsSearchLogFindTid = {\r",
									"            url: url_staging_azure_cauldron,\r",
									"            method: 'POST',\r",
									"            header: headersOptSearchLogFindTid,\r",
									"            body: httpRequestSearchLogFindTid\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsSearchLogFindTid);\r",
									"        let jsonDataSearchLogFindTid = await response.json();\r",
									"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
									"        console.log('hits', hits)\r",
									"\r",
									"        // find tid\r",
									"        for (let i = 0; i < hits.length; i++) {\r",
									"            // let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"\r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            if (applicationNameValue == applicationName) {\r",
									"                let tid = hits[i]._source.cauldron.tid;\r",
									"                pm.environment.set(\"tid\", tid);\r",
									"                break;\r",
									"            }\r",
									"        }\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"CheckLog = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCheckLog = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = pm.environment.get(\"tid\");\r",
									"\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\", valueSearch)\r",
									"\r",
									"        // body\r",
									"        let httpRequestCheckLog = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({ \"version\": true, \"size\": 500, \"sort\": [{ \"@timestamp_es\": { \"order\": \"desc\", \"unmapped_type\": \"boolean\" } }], \"_source\": { \"excludes\": [] }, \"aggs\": { \"2\": { \"date_histogram\": { \"field\": \"@timestamp_es\", \"fixed_interval\": \"30s\", \"time_zone\": \"Asia/Bangkok\", \"min_doc_count\": 1 } } }, \"stored_fields\": [\"*\"], \"script_fields\": {}, \"docvalue_fields\": [{ \"field\": \"@timestamp_es\", \"format\": \"date_time\" }, { \"field\": \"cauldron.custom1.activityLog.endTime\", \"format\": \"date_time\" }, { \"field\": \"cauldron.custom1.activityLog.startTime\", \"format\": \"date_time\" }, { \"field\": \"time\", \"format\": \"date_time\" }], \"query\": { \"bool\": { \"must\": [], \"filter\": [{ \"multi_match\": { \"type\": \"best_fields\", \"query\": '\"' + valueSearch + '\"', \"lenient\": true } }, { \"range\": { \"@timestamp_es\": { \"format\": \"strict_date_optional_time\", \"gte\": setRangeGTE, \"lte\": setRangeLTE } } }], \"should\": [], \"must_not\": [] } }, \"highlight\": { \"pre_tags\": [\"@kibana-highlighted-field@\"], \"post_tags\": [\"@/kibana-highlighted-field@\"], \"fields\": { \"*\": {} }, \"fragment_size\": 2147483647 } })\r",
									"        };\r",
									"        let optionsCheckLog = {\r",
									"            url: url_staging_azure_cauldron,\r",
									"            method: 'POST',\r",
									"            header: headersOptCheckLog,\r",
									"            body: httpRequestCheckLog\r",
									"        };\r",
									"        let response = await reqPromise(optionsCheckLog);\r",
									"        let jsonDataCheckLog = await response.json();\r",
									"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataCheckLog.hits.hits\r",
									"        console.log('hits', hits)\r",
									"\r",
									"        // find logType\r",
									"        for (let i = 0; i < hits.length; i++) {\r",
									"            //  let logType = hits[i]._source.cauldron.logType\r",
									"            let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"\r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"\r",
									"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
									"            // console.log('resultDataLog',resultDataLog)\r",
									"\r",
									"            let tidControl = x_ais_OrderRef_InquiryThing + current_timestamp;\r",
									"            // console.log(tidControl);\r",
									"            if (applicationNameValue == applicationName) {\r",
									"\r",
									"                if (logType == logTypeSummary && applicationNameValue == applicationName) { // 'Summary' and ProvisioningAPIs\r",
									"                    pm.test(\"Check Summary Log : InquiryThing\" , function () {\r",
									"                        console.log(\"======== Check Summary Log ( Expected = Actual) [InquiryThing] ==================\");\r",
									"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
									"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
									"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeSuccess);\r",
									"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionInquiryThing);\r",
									"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
									"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
									"                        // console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
									"\r",
									"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp);\r",
									"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName);\r",
									"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeSuccess);\r",
									"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionInquiryThing);\r",
									"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp);\r",
									"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary);\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace);\r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName);\r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId);\r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
									"                        // pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
									"\r",
									"                        // check custom\r",
									"                        // \\\"custom\\\":{ \\\"endPointSummary\\\":[ { \\\"no\\\":\\\"1\\\", \\\"endPointName\\\":\\\"db.AccountsCollection\\\", \\\"responseStatus\\\":\\\"Success:InquiryAccount was successfully.\\\", \\\"processTime\\\":2.6059 }, { \\\"no\\\":\\\"2\\\", \\\"endPointName\\\":\\\"db.ThingsCollection\\\", \\\"responseStatus\\\":\\\"Success:InquiryThing was successfully.\\\", \\\"processTime\\\":4.2244 } ] }\r",
									"                        let custom = resultDataLog.custom.endPointSummary;\r",
									"                        let countCustom = custom.length;\r",
									"                       \r",
									"                        // [\"db.AccountsCollection\",\"db.ThingsCollection\"]\r",
									"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_InquiryThing;\r",
									"                        // [\"Success:InquiryAccount was successfully.\",\"Success:InquiryThing was successfully.\"]\r",
									"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_InquiryThing;\r",
									"                        let countCustomStep = dataEndPointName.length;\r",
									"\r",
									"                        console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep);\r",
									"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
									"                        \r",
									"                        for(let i=0;i<countCustomStep;i++){\r",
									"                            let no = custom[i].no;\r",
									"                            let valueEndPointName = custom[i].endPointName;\r",
									"                            let valueResponseStatus = custom[i].responseStatus;\r",
									"                            // console.log(\"i\",i);\r",
									"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
									"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
									"\r",
									"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString());\r",
									"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i]);\r",
									"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i]);\r",
									"\r",
									"                            pm.expect(no).to.eql((i+1).toString()); \r",
									"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
									"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]); \r",
									"                        }\r",
									"                    });\r",
									"                }\r",
									"\r",
									"                if (logType == logTypeDetail && applicationNameValue == applicationName) { //'Detail' and ProvisioningAPIs\r",
									"\r",
									"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
									"                    // console.log('endPointNameValue ',endPointNameValue)\r",
									"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [InquiryThing]\", function () {\r",
									"                        console.log(\"======== Check Detail Log ( Expected = Actual) [InquiryThing] ==================\");\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
									"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
									"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
									"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.custom1.activityLog.processTime + \" = \" + resultDataLog.custom1.activityLog.processTime);\r",
									"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
									"\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail);\r",
									"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail);\r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace);\r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName);\r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId);\r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime);\r",
									"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail);\r",
									"\r",
									"                        if (endPointNameValue == endPointNameProvisioningAPIs) {     //\"endPointName\":\"ProvisioningAPIs\"\r",
									"                            console.log(\"custom1.endPointName : \" + resultDataLog.custom1.endPointName + \" = \" + endPointNameProvisioningAPIs); \r",
									"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs);\r",
									"\r",
									"                            // check requestObject\r",
									"                            // \"requestObject\":\"{ \\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Thing/InquiryThing\\\", \\\"method\\\":\\\"POST\\\", \\\"headers\\\":{ \\\"x-ais-username\\\":\\\"AisPartner\\\", \\\"x-ais-orderref\\\":\\\"InquiryThing_202104081704512\\\", \\\"x-ais-orderdesc\\\":\\\"InquiryThing\\\", \\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAGUJ9zLPcvr1pAD3hVGH9ePoo/D5pkv7DQ6X3lEGyqh4UIlAkkY2KW0\\\", \\\"x-ais-accountkey\\\":\\\"606ed92063fa0e0001bf6d26\\\" }, \\\"body\\\":{ } }\"\r",
									"\r",
									"                            // \\\"requestObject\\\":\\\"{ \\\\\\\"url\\\\\\\":\\\\\\\"mg-iot.sandais.com/api/v1/Thing/InquiryThing\\\\\\\", \\\\\\\"method\\\\\\\":\\\\\\\"POST\\\\\\\", \\\\\\\"headers\\\\\\\":{ \\\\\\\"x-ais-username\\\\\\\":\\\\\\\"AisPartner\\\\\\\", \\\\\\\"x-ais-orderref\\\\\\\":\\\\\\\"InquiryThing_202105101605767\\\\\\\", \\\\\\\"x-ais-orderdesc\\\\\\\":\\\\\\\"InquiryThing\\\\\\\", \\\\\\\"x-ais-accesstoken\\\\\\\":\\\\\\\"Bearer ibnxnVhs5Rx3IwglWv7/gVA/1TpQnKqAOBAADlRDvYhOpXwmlpYOEb5yfY5aZpoj0YRWRZM26i9HOqtc1fc1jpNDOK5JpISttmMEy59g2py7nLWonDe2YW2OPRGWSowk6+9ZihLU1fZ5d5jAqqrZaKlOAAI3N1TXDNLsHuKcOJMcERbCcaMqRaku+MY4/kzE+eyIdkfwwbjT91S2VQq+Wk2ooMWuLk6/DHVJhwbMP7Y8okAOp9ce942jT9rvza3sVoQpiZlI7L1KVegMrc8SMg==\\\\\\\", \\\\\\\"x-ais-accountkey\\\\\\\":\\\\\\\"6098fa1d5316540001b19d52\\\\\\\" }, \\\\\\\"body\\\\\\\":{ } }\\\", \\\"responseObject\\\":\\\"{ \\\\\\\"ThingInfo\\\\\\\":[ ], \\\\\\\"_Metadata\\\\\\\":{ \\\\\\\"TotalCount\\\\\\\":0, \\\\\\\"Limit\\\\\\\":10000, \\\\\\\"OffSet\\\\\\\":0 }, \\\\\\\"OperationStatus\\\\\\\":{ \\\\\\\"Code\\\\\\\":\\\\\\\"20000\\\\\\\", \\\\\\\"Description\\\\\\\":\\\\\\\"InquiryThing is Success\\\\\\\" } }\\\"\r",
									"\r",
									"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
									"                            //  console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
									"\r",
									"                            let url = urlCheckLog + requestObjectUrlStaging;\r",
									"                            let x_ais_orderref = x_ais_OrderRef_InquiryThing + current_timestamp;\r",
									"                            let x_ais_orderdesc = x_ais_OrderDesc_InquiryThing;\r",
									"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken\");\r",
									"                            let x_ais_userName = x_ais_UserName_AisPartner;\r",
									"                            let x_ais_AccountKey = pm.environment.get(\"GetResponse_AccountId\");\r",
									"                            \r",
									"                            let body = {};\r",
									"\r",
									"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
									"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
									"                            console.log(\"headers.x_ais_userName : \" + jsonParseRequestObject.headers[header_x_ais_username] + \" = \" + x_ais_userName);\r",
									"                            console.log(\"headers.x_ais_AccountKey : \" + jsonParseRequestObject.headers[header_x_ais_accountkey] + \" = \" + x_ais_AccountKey);\r",
									"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
									"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.url).to.eql(url);\r",
									"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_username]).to.eql(x_ais_userName);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accountkey]).to.eql(x_ais_AccountKey);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
									"\r",
									"                            console.log(\"resquest.body : \" + JSON.stringify(jsonParseRequestObject.body) + \" = \" + JSON.stringify(body));\r",
									"                            pm.expect(jsonParseRequestObject.body).to.eql(body);\r",
									"\r",
									"                            // check responseObject\r",
									"                            // \"responseObject\":\"{\\\"ThingInfo\\\":[],\\\"_Metadata\\\":{\\\"TotalCount\\\":0,\\\"Limit\\\":10000,\\\"OffSet\\\":0 },\\\"OperationStatus\\\":{\\\"Code\\\":\\\"20000\\\", \\\"Description\\\":\\\"InquiryThing is Success\\\"}}\"\r",
									"\r",
									"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
									"                            // console.log('jsonParseResponseObject',jsonParseResponseObject);\r",
									"\r",
									"                            console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeSuccess);\r",
									"                            console.log(\"response.OperationStatus.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionInquiryThing); \r",
									"\r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeSuccess);\r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionInquiryThing);\r",
									"                        }\r",
									"                    });\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"setTimeout(function(){SearchLogFindTid();}, 8000); \r",
									"setTimeout(function(){CheckLog();}, 20000); \r",
									"\r",
									"setTimeout(function(){RemoveAccount();}, 30000); \r",
									"setTimeout(function(){RemovePartner();}, 40000); \r",
									"\r",
									"setTimeout(function(){\r",
									"pm.environment.unset(\"current_timestamp\");\r",
									"pm.environment.unset(\"AccessToken\");\r",
									"pm.environment.unset(\"random_number\");\r",
									"pm.environment.unset(\"PartnerName\");\r",
									"pm.environment.unset(\"MerchantContact\");\r",
									"pm.environment.unset(\"CPID\");\r",
									"pm.environment.unset(\"GetResponse_PartnerId\");\r",
									"pm.environment.unset(\"AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountId\");\r",
									"pm.environment.unset(\"random_IM\");\r",
									"pm.environment.unset(\"random_ICCID\");\r",
									"pm.environment.unset(\"ThingName\");\r",
									"pm.environment.unset(\"tid\");\r",
									"}, 45000);\r",
									"setTimeout(function(){}, 50000); "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var Username = pm.environment.get(\"Username\");\r",
									"var Password = pm.environment.get(\"Password\");\r",
									"\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"//format YYYYMMDDHHMMSSS\r",
									"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
									"// console.log('currentTmestamp',currentTmestamp);\r",
									"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- statusCodeList --------------//\r",
									"//set variable to statusCodeList JSON.parse\r",
									"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
									"//set global variable to statusCode 200\r",
									"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
									"//set global variable to statusCode 201\r",
									"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultCodeList --------------//\r",
									"//set variable to resultCodeList JSON.parse\r",
									"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
									"//set global variable to resultCode \"20000\"\r",
									"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
									"//set global variable to resultCode \"20100\"\r",
									"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionSuccessList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
									"//set global variable to resultDescription \"SignInProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
									"//set global variable to resultDescription \"CreatePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
									"//set global variable to resultDescription \"CreateAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
									"//set global variable to resultDescription \"RemovePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
									"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
									"//set global variable to resultDescription \"InquiryThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionInquiryThing\", resultDescriptionSuccessList.resultDescriptionInquiryThing);\r",
									"//---------------- HeaderList --------------//\r",
									"//set variable to HeaderList JSON.parse\r",
									"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
									"//---------------- set globals Other --------------//\r",
									"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
									"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
									"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
									"//set global variable to kbn-versio \"7.5.1\"\r",
									"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Signin_ --------------//\r",
									"//set global variable to x_ais_OrderRef \"Signin_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreatePartner --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
									"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
									"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
									"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreateAccount --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
									"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
									"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Thing --------------//\r",
									"//set global variable to x_ais_OrderRef \"InquiryThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_InquiryThing\", HeaderList.Thing.x_ais_OrderRef_InquiryThing);\r",
									"//set global variable to x_ais_OrderDesc \"InquiryThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_InquiryThing\", HeaderList.Thing.x_ais_OrderDesc_InquiryThing);\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"SignInProcess is Success\"\r",
									"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
									"//get global variable to resultDescription \"CreatePartner is Success\"\r",
									"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
									"//get global variable to resultDescription \"CreateAccount is Success\"\r",
									"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- urlRouteList --------------//\r",
									"//set variable to urlRouteList JSON.parse\r",
									"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
									"//---------------- set url Create --------------//\r",
									"//set global variable to url \"/api/v1/auth/signin\"\r",
									"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
									"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
									"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"pm.globals.set(\"urlThingCreateThing\", urlRouteList.Thing.urlThingCreateThing);\r",
									"//---------------- get url Create --------------//\r",
									"//get global variable to url \"/api/v1/auth/signin\"\r",
									"var urlSignin = pm.globals.get(\"urlSignin\");\r",
									"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
									"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"var urlThingCreateThing = pm.globals.get(\"urlThingCreateThing\");\r",
									"//---------------- set url Remove --------------//\r",
									"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
									"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Signin_ --------------//\r",
									"//get global variable to x_ais_OrderRef \"Signin_\"\r",
									"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
									"//------------------------------------------------------------//\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// Signin get token\r",
									" Signin = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSignin = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestSignin = {\r",
									"            mode: 'raw',\r",
									"            raw: \r",
									"            JSON.stringify({\r",
									"                username:Username,\r",
									"                password:Password\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsSignin = {\r",
									"            url: url + provisioningapis + urlSignin,\r",
									"            method: 'POST',\r",
									"            header: headersOptSignin,\r",
									"            body: httpRequestSignin\r",
									"        };\r",
									"        // console.log('request Signin');\r",
									"        let response = await reqPromise(optionsSignin);\r",
									"        let jsonDataSignin = await response.json();\r",
									"\r",
									"        // setAccessToken\r",
									"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
									"\r",
									"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // SignInProcess is Success\r",
									"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
									"        });\r",
									"\r",
									"        //set random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //set PartnerName\r",
									"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
									"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
									"        //set MerchantContact\r",
									"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
									"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
									"        // set CPID\r",
									"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
									"        pm.environment.set(\"CPID\", CPIDValue)\r",
									"        \r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreatePartner\r",
									" CreatePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreatePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreatePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
									"                \"PartnerType\": fieldDataValue.Partner.PartnerTypeValue, //[\"Supplier\",\"Customer\"]\r",
									"                \"PartnerDetail\": {\r",
									"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
									"                    \"CPID\": pm.environment.get(\"CPID\")\r",
									"                },\r",
									"                \"Property\": {\r",
									"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsCreatePartner = {\r",
									"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreatePartner,\r",
									"            body: httpRequestCreatePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsCreatePartner);\r",
									"        let jsonDataCreatePartner = await response.json();\r",
									"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
									"    \r",
									"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreatePartner is Success\r",
									"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
									"        });\r",
									"\r",
									"        //GetResponse_PartnerId\r",
									"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
									"\r",
									"        //Accountname\r",
									"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
									"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateAccount\r",
									" CreateAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreateAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
									"                })\r",
									"        };\r",
									"        \r",
									"        let optionsCreateAccount = {\r",
									"            url: url + provisioningapis + urlAccountCreateAccount,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateAccount,\r",
									"            body: httpRequestCreateAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateAccount');\r",
									"        let response = await reqPromise(optionsCreateAccount);\r",
									"        let jsonDataCreateAccount = await response.json();\r",
									"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
									"    \r",
									"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateAccount : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateAccount is Success\r",
									"        pm.test('CreateAccount : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
									"        });\r",
									"        // GetResponse_AccountName\r",
									"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
									"        // GetResponse_AccountId\r",
									"        pm.environment.set(\"GetResponse_AccountId\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
									"        // random_IM\r",
									"        pm.environment.set(\"random_IM\", _.random(10000000, 99999999)+\" \"+_.random(1000000, 9999999))\r",
									"        // random_ICCID\r",
									"        pm.environment.set(\"random_ICCID\", _.random(1000000, 9999999)+\" \"+_.random(100000, 999999))\r",
									"        // random_number\r",
									"        pm.environment.set(\"random_number\",pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //ThingName\r",
									"        let thingNameValue = fieldDataValue.Provisioning.Thing.ThingNameValue; // \"QAtestthing_T01\"\r",
									"        pm.environment.set(\"ThingName\", thingNameValue + pm.environment.get(\"random_number\"))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"Signin();\r",
									"setTimeout(async function(){await CreatePartner();}, 3000); \r",
									"setTimeout(async function(){await CreateAccount();}, 6000); \r",
									"setTimeout(async function(){}, 6500);  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-ais-UserName",
								"type": "text",
								"value": "{{x_ais_UserName_AisPartner}}"
							},
							{
								"key": "x-ais-OrderRef",
								"value": "{{x_ais_OrderRef_InquiryThing}}{{current_timestamp}}"
							},
							{
								"key": "x-ais-OrderDesc",
								"type": "text",
								"value": "{{x_ais_OrderDesc_InquiryThing}}"
							},
							{
								"key": "x-ais-AccessToken",
								"value": "{{Bearer}} {{AccessToken}}"
							},
							{
								"key": "x-ais-AccountKey",
								"type": "text",
								"value": "{{GetResponse_AccountId}}"
							},
							{
								"key": "Accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}{{provisioningapis}}/api/v1/Thing/InquiryThing",
							"host": [
								"{{url}}{{provisioningapis}}"
							],
							"path": [
								"api",
								"v1",
								"Thing",
								"InquiryThing"
							]
						},
						"description": "Type:Desire"
					},
					"response": []
				},
				{
					"name": "InquiryThing_TST_F13_1_1_002_Success_InquiryByConfigGroupId_RootAdmin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to xAisOrderRef \"RemoveThing_\"\r",
									"var x_ais_OrderRef_RemoveThing = pm.globals.get(\"x_ais_OrderRef_RemoveThing\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"var x_ais_OrderDesc_RemoveThing = pm.globals.get(\"x_ais_OrderDesc_RemoveThing\");\r",
									"//get global variable to x_ais_OrderRef \"InquiryThing_\"\r",
									"var x_ais_OrderRef_InquiryThing = pm.globals.get(\"x_ais_OrderRef_InquiryThing\");\r",
									"//get global variable to x_ais_OrderDesc \"InquiryThing\"\r",
									"var x_ais_OrderDesc_InquiryThing = pm.globals.get(\"x_ais_OrderDesc_InquiryThing\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get url Remove --------------//\r",
									"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
									"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"var urlThingRemoveThing = pm.globals.get(\"urlThingRemoveThing\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"RemovePartner is Success\"\r",
									"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
									"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
									"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
									"//get global variable to resultDescription \"RemoveThing is Success\"\r",
									"var resultDescriptionRemoveThing = pm.globals.get(\"resultDescriptionRemoveThing\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to resultDescription \"InquiryThing is Success\"\r",
									"var resultDescriptionInquiryThing = pm.globals.get(\"resultDescriptionInquiryThing\");\r",
									"//------------------------------------------------------------//\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"InquiryThing : Status code is \" + statusCodeSuccess, function () {\r",
									"    pm.response.to.have.status(statusCodeSuccess);\r",
									"});\r",
									"\r",
									"pm.test('InquiryThing : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeSuccess);\r",
									"});\r",
									"\r",
									"pm.test('InquiryThing : OperationStatus Description is '+'\"'+ resultDescriptionInquiryThing+'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionInquiryThing);\r",
									"});\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// RemovePartner\r",
									" RemovePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemovePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemovePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemovePartner = {\r",
									"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemovePartner,\r",
									"            body: httpRequestRemovePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request RemovePartner');\r",
									"        let response = await reqPromise(optionsRemovePartner);\r",
									"        let jsonDataRemovePartner = await response.json();\r",
									"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
									"    \r",
									"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemovePartner is Success\r",
									"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveAccount\r",
									" RemoveAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemoveAccount = {\r",
									"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveAccount,\r",
									"            body: httpRequestRemoveAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveAccount');\r",
									"        let response = await reqPromise(optionsRemoveAccount);\r",
									"        let jsonDataRemoveAccount = await response.json();\r",
									"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
									"    \r",
									"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveAccount is Success\r",
									"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThing\r",
									" RemoveThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThing = {\r",
									"            url: url + provisioningapis + urlThingRemoveThing,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThing,\r",
									"            body: httpRequestRemoveThing\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveThing');\r",
									"        let response = await reqPromise(optionsRemoveThing);\r",
									"        let jsonDataRemoveThing = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThing)\r",
									"    \r",
									"        let operationStatusRemoveThing = await jsonDataRemoveThing.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThing : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThing : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThing is Success\r",
									"        pm.test('RemoveThing : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThing+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Description', resultDescriptionRemoveThing);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"\r",
									"//---------------- LogDefaultValue --------------//\r",
									"//set variable to LogDefaultValue JSON.parse\r",
									"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
									"// console.log('LogDefaultValue',LogDefaultValue);\r",
									"//---------------- set globals Other --------------//\r",
									"var SearchLog = LogDefaultValue.SearchLog;\r",
									"// console.log('SearchLog',SearchLog);\r",
									"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
									"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
									"var kbn_version = SearchLog.header.kbn_version;\r",
									"var authorization = SearchLog.header.Authorization;\r",
									"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
									"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
									"var namespace = LogDefaultValue.Other.namespace;\r",
									"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
									"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
									"var header_x_ais_username = LogDefaultValue.Other.header_x_ais_username;\r",
									"var header_x_ais_accountkey = LogDefaultValue.Other.header_x_ais_accountkey;\r",
									"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
									"var methodPost = LogDefaultValue.Other.methodPost;\r",
									"\r",
									"// Detail\r",
									"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
									"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
									"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
									"\r",
									"// Summary\r",
									"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
									"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
									"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
									"\r",
									"// ProvisioningAPIs [InquiryThing]\r",
									"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
									"var cmdName = LogDefaultValue.Provisioning.Thing.cmdNameInquiryThing;\r",
									"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
									"var containerId = LogDefaultValue.Provisioning.containerId;\r",
									"var requestObjectUrlStaging = LogDefaultValue.Provisioning.Thing.requestObjectUrlInquiryThingMgStaging;\r",
									"\r",
									"// Check CDR (Summary Log) and EDR (Detail Log)\r",
									"SearchLogFindTid = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSearchLogFindTid = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = x_ais_OrderRef_InquiryThing + current_timestamp;\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\", valueSearch)\r",
									"\r",
									"        // body\r",
									"        let httpRequestSearchLogFindTid = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({ \"version\": \"true\", \"size\": 500, \"sort\": [{ \"@timestamp_es\": { \"order\": \"desc\", \"unmapped_type\": \"boolean\" } }], \"_source\": { \"excludes\": [] }, \"aggs\": { \"2\": { \"date_histogram\": { \"field\": \"@timestamp_es\", \"fixed_interval\": \"30s\", \"time_zone\": \"Asia/Bangkok\", \"min_doc_count\": 1 } } }, \"stored_fields\": [\"*\"], \"script_fields\": {}, \"docvalue_fields\": [{ \"field\": \"@timestamp_es\", \"format\": \"date_time\" }, { \"field\": \"cauldron.custom1.activityLog.endTime\", \"format\": \"date_time\" }, { \"field\": \"cauldron.custom1.activityLog.startTime\", \"format\": \"date_time\" }, { \"field\": \"time\", \"format\": \"date_time\" }], \"query\": { \"bool\": { \"must\": [], \"filter\": [{ \"multi_match\": { \"type\": \"best_fields\", \"query\": '\"' + valueSearch + '\"', \"lenient\": \"true\" } }, { \"range\": { \"@timestamp_es\": { \"format\": \"strict_date_optional_time\", \"gte\": setRangeGTE, \"lte\": setRangeLTE } } }], \"should\": [], \"must_not\": [] } }, \"highlight\": { \"pre_tags\": [\"@kibana-highlighted-field@\"], \"post_tags\": [\"@/kibana-highlighted-field@\"], \"fields\": { \"*\": {} }, \"fragment_size\": 2147483647 } })\r",
									"        };\r",
									"\r",
									"        let optionsSearchLogFindTid = {\r",
									"            url: url_staging_azure_cauldron,\r",
									"            method: 'POST',\r",
									"            header: headersOptSearchLogFindTid,\r",
									"            body: httpRequestSearchLogFindTid\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsSearchLogFindTid);\r",
									"        let jsonDataSearchLogFindTid = await response.json();\r",
									"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
									"        console.log('hits', hits)\r",
									"\r",
									"        // find tid\r",
									"        for (let i = 0; i < hits.length; i++) {\r",
									"            // let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"\r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            if (applicationNameValue == applicationName) {\r",
									"                let tid = hits[i]._source.cauldron.tid;\r",
									"                pm.environment.set(\"tid\", tid);\r",
									"                break;\r",
									"            }\r",
									"        }\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"CheckLog = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCheckLog = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = pm.environment.get(\"tid\");\r",
									"\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\", valueSearch)\r",
									"\r",
									"        // body\r",
									"        let httpRequestCheckLog = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({ \"version\": true, \"size\": 500, \"sort\": [{ \"@timestamp_es\": { \"order\": \"desc\", \"unmapped_type\": \"boolean\" } }], \"_source\": { \"excludes\": [] }, \"aggs\": { \"2\": { \"date_histogram\": { \"field\": \"@timestamp_es\", \"fixed_interval\": \"30s\", \"time_zone\": \"Asia/Bangkok\", \"min_doc_count\": 1 } } }, \"stored_fields\": [\"*\"], \"script_fields\": {}, \"docvalue_fields\": [{ \"field\": \"@timestamp_es\", \"format\": \"date_time\" }, { \"field\": \"cauldron.custom1.activityLog.endTime\", \"format\": \"date_time\" }, { \"field\": \"cauldron.custom1.activityLog.startTime\", \"format\": \"date_time\" }, { \"field\": \"time\", \"format\": \"date_time\" }], \"query\": { \"bool\": { \"must\": [], \"filter\": [{ \"multi_match\": { \"type\": \"best_fields\", \"query\": '\"' + valueSearch + '\"', \"lenient\": true } }, { \"range\": { \"@timestamp_es\": { \"format\": \"strict_date_optional_time\", \"gte\": setRangeGTE, \"lte\": setRangeLTE } } }], \"should\": [], \"must_not\": [] } }, \"highlight\": { \"pre_tags\": [\"@kibana-highlighted-field@\"], \"post_tags\": [\"@/kibana-highlighted-field@\"], \"fields\": { \"*\": {} }, \"fragment_size\": 2147483647 } })\r",
									"        };\r",
									"        let optionsCheckLog = {\r",
									"            url: url_staging_azure_cauldron,\r",
									"            method: 'POST',\r",
									"            header: headersOptCheckLog,\r",
									"            body: httpRequestCheckLog\r",
									"        };\r",
									"        let response = await reqPromise(optionsCheckLog);\r",
									"        let jsonDataCheckLog = await response.json();\r",
									"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataCheckLog.hits.hits\r",
									"        console.log('hits', hits)\r",
									"\r",
									"        // find logType\r",
									"        for (let i = 0; i < hits.length; i++) {\r",
									"            //  let logType = hits[i]._source.cauldron.logType\r",
									"            let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"\r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"\r",
									"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
									"            // console.log('resultDataLog',resultDataLog)\r",
									"\r",
									"            let tidControl = x_ais_OrderRef_InquiryThing + current_timestamp;\r",
									"            // console.log(tidControl);\r",
									"            if (applicationNameValue == applicationName) {\r",
									"\r",
									"                if (logType == logTypeSummary && applicationNameValue == applicationName) { // 'Summary' and ProvisioningAPIs\r",
									"                    pm.test(\"Check Summary Log : InquiryThing\" , function () {\r",
									"                        console.log(\"======== Check Summary Log ( Expected = Actual) [InquiryThing] ==================\");\r",
									"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
									"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
									"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeSuccess);\r",
									"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionInquiryThing);\r",
									"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
									"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
									"                        // console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
									"\r",
									"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp);\r",
									"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName);\r",
									"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeSuccess);\r",
									"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionInquiryThing);\r",
									"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp);\r",
									"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary);\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace);\r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName);\r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId);\r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
									"                        // pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
									"\r",
									"                        // check custom\r",
									"                        // \\\"custom\\\":{ \\\"endPointSummary\\\":[ { \\\"no\\\":\\\"1\\\", \\\"endPointName\\\":\\\"db.AccountsCollection\\\", \\\"responseStatus\\\":\\\"Success:InquiryAccount was successfully.\\\", \\\"processTime\\\":10.6148 }, { \\\"no\\\":\\\"2\\\", \\\"endPointName\\\":\\\"db.ThingsCollection\\\", \\\"responseStatus\\\":\\\"Success:InquiryThing was successfully.\\\", \\\"processTime\\\":9.0435 } ] }\r",
									"                        let custom = resultDataLog.custom.endPointSummary;\r",
									"                        let countCustom = custom.length;\r",
									"                       \r",
									"                        // [\"db.AccountsCollection\",\"db.ThingsCollection\"]\r",
									"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_InquiryThing;\r",
									"                        // [\"Success:InquiryAccount was successfully.\",\"Success:InquiryThing was successfully.\"]\r",
									"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_InquiryThing;\r",
									"                        let countCustomStep = dataEndPointName.length;\r",
									"\r",
									"                        console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep);\r",
									"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
									"                        \r",
									"                        for(let i=0;i<countCustomStep;i++){\r",
									"                            let no = custom[i].no;\r",
									"                            let valueEndPointName = custom[i].endPointName;\r",
									"                            let valueResponseStatus = custom[i].responseStatus;\r",
									"                            // console.log(\"i\",i);\r",
									"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
									"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
									"\r",
									"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString());\r",
									"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i]);\r",
									"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i]);\r",
									"\r",
									"                            pm.expect(no).to.eql((i+1).toString()); \r",
									"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
									"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]); \r",
									"                        }\r",
									"                    });\r",
									"                }\r",
									"\r",
									"                if (logType == logTypeDetail && applicationNameValue == applicationName) { //'Detail' and ProvisioningAPIs\r",
									"\r",
									"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
									"                    // console.log('endPointNameValue ',endPointNameValue)\r",
									"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [InquiryThing]\", function () {\r",
									"                        console.log(\"======== Check Detail Log ( Expected = Actual) [InquiryThing] ==================\");\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
									"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
									"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
									"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.custom1.activityLog.processTime + \" = \" + resultDataLog.custom1.activityLog.processTime);\r",
									"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
									"\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail);\r",
									"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail);\r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace);\r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName);\r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId);\r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime);\r",
									"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail);\r",
									"\r",
									"                        if (endPointNameValue == endPointNameProvisioningAPIs) {     //\"endPointName\":\"ProvisioningAPIs\"\r",
									"                            console.log(\"custom1.endPointName : \" + resultDataLog.custom1.endPointName + \" = \" + endPointNameProvisioningAPIs); \r",
									"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs);\r",
									"\r",
									"                            // check requestObject\r",
									"                            // \"requestObject\":\"{ \\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Thing/InquiryThing\\\", \\\"method\\\":\\\"POST\\\", \\\"headers\\\":{ \\\"x-ais-username\\\":\\\"AisPartner\\\", \\\"x-ais-orderref\\\":\\\"InquiryThing_202104081704157\\\", \\\"x-ais-orderdesc\\\":\\\"InquiryThing\\\", \\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAGUJ9zLPcvr1srlapD3VLIkylxBptnfFGrsXbdYpFNnXEIlAkkY2KW0\\\", \\\"x-ais-accountkey\\\":\\\"606edc1663fa0e0001bf6e45\\\" }, \\\"body\\\":{ \\\"ThingId\\\":\\\"606edc1863fa0e0001bf6e4d\\\" } }\"\r",
									"\r",
									"                            // \\\"requestObject\\\":\\\"{ \\\\\\\"url\\\\\\\":\\\\\\\"mg-iot.sandais.com/api/v1/Thing/InquiryThing\\\\\\\", \\\\\\\"method\\\\\\\":\\\\\\\"POST\\\\\\\", \\\\\\\"headers\\\\\\\":{ \\\\\\\"x-ais-username\\\\\\\":\\\\\\\"AisPartner\\\\\\\", \\\\\\\"x-ais-orderref\\\\\\\":\\\\\\\"InquiryThing_202105101605655\\\\\\\", \\\\\\\"x-ais-orderdesc\\\\\\\":\\\\\\\"InquiryThing\\\\\\\", \\\\\\\"x-ais-accesstoken\\\\\\\":\\\\\\\"Bearer ibnxnVhs5Rx3IwglWv7/gVA/1TpQnKqAOBAADlRDvYhOpXwmlpYOEb5yfY5aZpoj0YRWRZM26i9HOqtc1fc1jpNDOK5JpISttmMEy59g2py7nLWonDe2YW2OPRGWSowk6+9ZihLU1fZ5d5jAqqrZaKlOAAI3N1TXDNLsHuKcOJMcERbCcaMqRaku+MY4/kzE+eyIdkfwwbjT91S2VQq+Wk2ooMWuLk6/DHVJhwbMP7Y8okAOp9ce95xhEKZA2al3WNgbucFuMgxKVegMrc8SMg==\\\\\\\", \\\\\\\"x-ais-accountkey\\\\\\\":\\\\\\\"6098fa735316540001b19d6d\\\\\\\" }, \\\\\\\"body\\\\\\\":{ \\\\\\\"ThingId\\\\\\\":\\\\\\\"6098fa755316540001b19d77\\\\\\\" } }\\\"\r",
									"\r",
									"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
									"                            //  console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
									"\r",
									"                            let url = urlCheckLog + requestObjectUrlStaging;\r",
									"                            let x_ais_orderref = x_ais_OrderRef_InquiryThing + current_timestamp;\r",
									"                            let x_ais_orderdesc = x_ais_OrderDesc_InquiryThing;\r",
									"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken\");\r",
									"                            let x_ais_userName = x_ais_UserName_AisPartner;\r",
									"                            let x_ais_AccountKey = pm.environment.get(\"GetResponse_AccountId\");\r",
									"                            \r",
									"                            let ThingId = pm.environment.get(\"GetResponse_ThingID\");\r",
									"                            let ThingName = pm.environment.get(\"ThingName\");\r",
									"                            let resIMEI = (pm.environment.get(\"random_IM\")).replace(\" \", \"\");\r",
									"                            let resIMSI = (pm.environment.get(\"random_IM\")).replace(\" \", \"\");\r",
									"                            let resICCID = fieldDataValue.Provisioning.Thing.CreateThing.ICCIDPre + (pm.environment.get(\"random_ICCID\")).replace(\" \", \"\");\r",
									"                            let RouteInfoMIMO_ID = pm.environment.get(\"MIMO_ID\");\r",
									"                            let RouteInfoMIMO_SerialNo = pm.environment.get(\"MIMO_SerialNo\");\r",
									"\r",
									"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
									"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
									"                            console.log(\"headers.x_ais_userName : \" + jsonParseRequestObject.headers[header_x_ais_username] + \" = \" + x_ais_userName);\r",
									"                            console.log(\"headers.x_ais_AccountKey : \" + jsonParseRequestObject.headers[header_x_ais_accountkey] + \" = \" + x_ais_AccountKey);\r",
									"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
									"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.url).to.eql(url);\r",
									"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_username]).to.eql(x_ais_userName);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accountkey]).to.eql(x_ais_AccountKey);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
									"\r",
									"                            console.log(\"resquest.body.ThingId : \" + jsonParseRequestObject.body.ThingId + \" = \" + ThingId);\r",
									"                            pm.expect(jsonParseRequestObject.body.ThingId).to.eql(ThingId);\r",
									"\r",
									"                            // check responseObject\r",
									"                            // \"responseObject\":\"{\\\"ThingInfo\\\":[{\\\"ThingId\\\":\\\"606edc1863fa0e0001bf6e4d\\\",\\\"ThingName\\\":\\\"QAtestthing_T01511537\\\",\\\"ThingToken\\\":\\\"6d53ab03-cfbc-40f7-bd07-cc5d74cb2679\\\",\\\"ThingStatus\\\":\\\"Active\\\",\\\"IMEI\\\":\\\"427666067926748\\\",\\\"IMSI\\\":\\\"427666067926748\\\", \\\"ICCID\\\":\\\"8966034190840384338\\\",\\\"RouteInfo\\\":{\\\"MIMO_ID\\\":\\\"606edada\\\",\\\"MIMO_SerialNo\\\":\\\"5466758878\\\"},\\\"StateInfo\\\":{}}],\\\"_Metadata\\\":{\\\"TotalCount\\\":1,\\\"Limit\\\":10000,\\\"OffSet\\\":0 },\\\"OperationStatus\\\":{\\\"Code\\\":\\\"20000\\\",\\\"Description\\\":\\\"InquiryThing is Success\\\"}}\"\r",
									"\r",
									"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
									"                            // console.log('jsonParseResponseObject',jsonParseResponseObject);\r",
									"                            let countRes = jsonParseResponseObject.ThingInfo;\r",
									"                            for(let i=0;i<countRes.length;i++){\r",
									"                                console.log(\"response.ThingInfo[\" + [i] +\"].ThingId : \" + jsonParseResponseObject.ThingInfo[i].ThingId + \" = \" + ThingId);\r",
									"                                console.log(\"response.ThingInfo[\" + [i] +\"].ThingName : \" + jsonParseResponseObject.ThingInfo[i].ThingName + \" = \" + ThingName);\r",
									"                                console.log(\"response.ThingInfo[\" + [i] +\"].IMEI : \" + jsonParseResponseObject.ThingInfo[i].IMEI + \" = \" + resIMEI);\r",
									"                                console.log(\"response.ThingInfo[\" + [i] +\"].IMSI : \" + jsonParseResponseObject.ThingInfo[i].IMSI + \" = \" + resIMSI);\r",
									"                                console.log(\"response.ThingInfo[\" + [i] +\"].ICCID : \" + jsonParseResponseObject.ThingInfo[i].ICCID + \" = \" + resICCID);\r",
									"                                console.log(\"response.ThingInfo[\" + [i] +\"].RouteInfo.MIMO_ID : \" + jsonParseResponseObject.ThingInfo[i].RouteInfo.MIMO_ID + \" = \" + RouteInfoMIMO_ID);\r",
									"                                console.log(\"response.ThingInfo[\" + [i] +\"].RouteInfo.MIMO_SerialNo : \" + jsonParseResponseObject.ThingInfo[i].RouteInfo.MIMO_SerialNo + \" = \" + RouteInfoMIMO_SerialNo);\r",
									"\r",
									"                                pm.expect(jsonParseResponseObject.ThingInfo[i].ThingId).to.eql(ThingId);\r",
									"                                pm.expect(jsonParseResponseObject.ThingInfo[i].ThingName).to.eql(ThingName);\r",
									"                                pm.expect(jsonParseResponseObject.ThingInfo[i].IMEI).to.eql(resIMEI);\r",
									"                                pm.expect(jsonParseResponseObject.ThingInfo[i].IMSI).to.eql(resIMSI);\r",
									"                                pm.expect(jsonParseResponseObject.ThingInfo[i].ICCID).to.eql(resICCID);\r",
									"                                pm.expect(jsonParseResponseObject.ThingInfo[i].RouteInfo.MIMO_ID).to.eql(RouteInfoMIMO_ID);\r",
									"                                pm.expect(jsonParseResponseObject.ThingInfo[i].RouteInfo.MIMO_SerialNo).to.eql(RouteInfoMIMO_SerialNo);\r",
									"                            }\r",
									"    \r",
									"                            console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeSuccess);\r",
									"                            console.log(\"response.OperationStatus.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionInquiryThing); \r",
									"\r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeSuccess);\r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionInquiryThing);\r",
									"                        }\r",
									"                    });\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"setTimeout(function(){SearchLogFindTid();}, 9000); \r",
									"setTimeout(function(){CheckLog();}, 20000); \r",
									"\r",
									"setTimeout(function(){RemoveThing();}, 40000); \r",
									"setTimeout(function(){RemoveAccount();}, 50000); \r",
									"setTimeout(function(){RemovePartner();}, 60000); \r",
									"\r",
									"setTimeout(function(){\r",
									"pm.environment.unset(\"current_timestamp\");\r",
									"pm.environment.unset(\"AccessToken\");\r",
									"pm.environment.unset(\"random_number\");\r",
									"pm.environment.unset(\"PartnerName\");\r",
									"pm.environment.unset(\"MerchantContact\");\r",
									"pm.environment.unset(\"CPID\");\r",
									"pm.environment.unset(\"GetResponse_PartnerId\");\r",
									"pm.environment.unset(\"AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountId\");\r",
									"pm.environment.unset(\"random_IM\");\r",
									"pm.environment.unset(\"random_ICCID\");\r",
									"pm.environment.unset(\"ThingName\");\r",
									"pm.environment.unset(\"RouteUrl\");\r",
									"pm.environment.unset(\"MIMO_ID\");\r",
									"pm.environment.unset(\"MIMO_SerialNo\");\r",
									"pm.environment.unset(\"GetResponse_ThingID\");\r",
									"pm.environment.unset(\"tid\");\r",
									"}, 65000);\r",
									"setTimeout(function(){}, 70000); "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var Username = pm.environment.get(\"Username\");\r",
									"var Password = pm.environment.get(\"Password\");\r",
									"\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"pm.environment.set(\"MIMO_ID\",fieldDataValue.Provisioning.Thing.CreateThing.RouteInfoMIMOIDValue)\r",
									"pm.environment.set(\"MIMO_SerialNo\",fieldDataValue.Provisioning.Thing.CreateThing.RouteInfoMIMOSerialNoValue)\r",
									"\r",
									"//format YYYYMMDDHHMMSSS\r",
									"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
									"// console.log('currentTmestamp',currentTmestamp);\r",
									"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- statusCodeList --------------//\r",
									"//set variable to statusCodeList JSON.parse\r",
									"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
									"//set global variable to statusCode 200\r",
									"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
									"//set global variable to statusCode 201\r",
									"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultCodeList --------------//\r",
									"//set variable to resultCodeList JSON.parse\r",
									"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
									"//set global variable to resultCode \"20000\"\r",
									"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
									"//set global variable to resultCode \"20100\"\r",
									"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionSuccessList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
									"//set global variable to resultDescription \"SignInProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
									"//set global variable to resultDescription \"CreatePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
									"//set global variable to resultDescription \"CreateAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
									"//set global variable to resultDescription \"CreateThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThing\", resultDescriptionSuccessList.resultDescriptionCreateThing);\r",
									"//set global variable to resultDescription \"RemovePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
									"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
									"//set global variable to resultDescription \"RemoveThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThing\", resultDescriptionSuccessList.resultDescriptionRemoveThing);\r",
									"//set global variable to resultDescription \"InquiryThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionInquiryThing\", resultDescriptionSuccessList.resultDescriptionInquiryThing);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- HeaderList --------------//\r",
									"//set variable to HeaderList JSON.parse\r",
									"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
									"//---------------- set globals Other --------------//\r",
									"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
									"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
									"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
									"//set global variable to kbn-versio \"7.5.1\"\r",
									"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Signin_ --------------//\r",
									"//set global variable to x_ais_OrderRef \"Signin_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreatePartner --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
									"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
									"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
									"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreateAccount --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
									"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
									"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Thing --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThing\", HeaderList.Thing.x_ais_OrderRef_CreateThing);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThing\", HeaderList.Thing.x_ais_OrderDesc_CreateThing);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThing\", HeaderList.Thing.x_ais_OrderRef_RemoveThing);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThing\", HeaderList.Thing.x_ais_OrderDesc_RemoveThing);\r",
									"//set global variable to x_ais_OrderRef \"InquiryThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_InquiryThing\", HeaderList.Thing.x_ais_OrderRef_InquiryThing);\r",
									"//set global variable to x_ais_OrderDesc \"InquiryThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_InquiryThing\", HeaderList.Thing.x_ais_OrderDesc_InquiryThing);\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"SignInProcess is Success\"\r",
									"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
									"//get global variable to resultDescription \"CreatePartner is Success\"\r",
									"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
									"//get global variable to resultDescription \"CreateAccount is Success\"\r",
									"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
									"//get global variable to resultDescription \"CreateThing is Success\"\r",
									"var resultDescriptionCreateThing = pm.globals.get(\"resultDescriptionCreateThing\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- urlRouteList --------------//\r",
									"//set variable to urlRouteList JSON.parse\r",
									"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
									"//---------------- set url Create --------------//\r",
									"//set global variable to url \"/api/v1/auth/signin\"\r",
									"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
									"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
									"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"pm.globals.set(\"urlThingCreateThing\", urlRouteList.Thing.urlThingCreateThing);\r",
									"//---------------- get url Create --------------//\r",
									"//get global variable to url \"/api/v1/auth/signin\"\r",
									"var urlSignin = pm.globals.get(\"urlSignin\");\r",
									"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
									"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"var urlThingCreateThing = pm.globals.get(\"urlThingCreateThing\");\r",
									"//---------------- set url Remove --------------//\r",
									"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
									"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"pm.globals.set(\"urlThingRemoveThing\", urlRouteList.Thing.urlThingRemoveThing);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Signin_ --------------//\r",
									"//get global variable to x_ais_OrderRef \"Signin_\"\r",
									"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"var x_ais_OrderRef_CreateThing = pm.globals.get(\"x_ais_OrderRef_CreateThing\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"var x_ais_OrderDesc_CreateThing = pm.globals.get(\"x_ais_OrderDesc_CreateThing\");\r",
									"//------------------------------------------------------------//\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// Signin get token\r",
									" Signin = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSignin = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestSignin = {\r",
									"            mode: 'raw',\r",
									"            raw: \r",
									"            JSON.stringify({\r",
									"                username:Username,\r",
									"                password:Password\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsSignin = {\r",
									"            url: url + provisioningapis + urlSignin,\r",
									"            method: 'POST',\r",
									"            header: headersOptSignin,\r",
									"            body: httpRequestSignin\r",
									"        };\r",
									"        // console.log('request Signin');\r",
									"        let response = await reqPromise(optionsSignin);\r",
									"        let jsonDataSignin = await response.json();\r",
									"\r",
									"        // setAccessToken\r",
									"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
									"\r",
									"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // SignInProcess is Success\r",
									"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
									"        });\r",
									"\r",
									"        //set random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //set PartnerName\r",
									"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
									"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
									"        //set MerchantContact\r",
									"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
									"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
									"        // set CPID\r",
									"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
									"        pm.environment.set(\"CPID\", CPIDValue)\r",
									"        \r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreatePartner\r",
									" CreatePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreatePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreatePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
									"                \"PartnerType\": fieldDataValue.Partner.PartnerTypeValue, //[\"Supplier\",\"Customer\"]\r",
									"                \"PartnerDetail\": {\r",
									"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
									"                    \"CPID\": pm.environment.get(\"CPID\")\r",
									"                },\r",
									"                \"Property\": {\r",
									"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsCreatePartner = {\r",
									"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreatePartner,\r",
									"            body: httpRequestCreatePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsCreatePartner);\r",
									"        let jsonDataCreatePartner = await response.json();\r",
									"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
									"    \r",
									"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreatePartner is Success\r",
									"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
									"        });\r",
									"\r",
									"        //GetResponse_PartnerId\r",
									"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
									"\r",
									"        //Accountname\r",
									"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
									"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateAccount\r",
									" CreateAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreateAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
									"                })\r",
									"        };\r",
									"        \r",
									"        let optionsCreateAccount = {\r",
									"            url: url + provisioningapis + urlAccountCreateAccount,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateAccount,\r",
									"            body: httpRequestCreateAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateAccount');\r",
									"        let response = await reqPromise(optionsCreateAccount);\r",
									"        let jsonDataCreateAccount = await response.json();\r",
									"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
									"    \r",
									"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateAccount : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateAccount is Success\r",
									"        pm.test('CreateAccount : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
									"        });\r",
									"        // GetResponse_AccountName\r",
									"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
									"        // GetResponse_AccountId\r",
									"        pm.environment.set(\"GetResponse_AccountId\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
									"        // random_IM\r",
									"        pm.environment.set(\"random_IM\", _.random(10000000, 99999999)+\" \"+_.random(1000000, 9999999))\r",
									"        // random_ICCID\r",
									"        pm.environment.set(\"random_ICCID\", _.random(1000000, 9999999)+\" \"+_.random(100000, 999999))\r",
									"        // random_number\r",
									"        pm.environment.set(\"random_number\",pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //ThingName\r",
									"        let thingNameValue = fieldDataValue.Provisioning.Thing.ThingNameValue; // \"QAtestthing_T01\"\r",
									"        pm.environment.set(\"ThingName\", thingNameValue + pm.environment.get(\"random_number\"))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThing\r",
									"CreateThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateThing+ current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreateThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingName\": pm.environment.get(\"ThingName\"),\r",
									"                \"IMEI\": pm.environment.get(\"random_IM\"),\r",
									"                \"IMSI\": pm.environment.get(\"random_IM\"),\r",
									"                \"ICCID\": pm.environment.get(\"random_ICCID\"),\r",
									"                \"RouteUrl\": fieldDataValue.Provisioning.Thing.CreateThing.RouteUrlValue , //[\"http://10.12.3.4:2019/api/information/AddInformation\"]\r",
									"                \"RouteInfo\": {\r",
									"                    \"MIMO_ID\": pm.environment.get(\"MIMO_ID\") , //\"606edada\"\r",
									"                    \"MIMO_SerialNo\": pm.environment.get(\"MIMO_SerialNo\") //5466758878\r",
									"                },\r",
									"                \"RouteFlag\": {\r",
									"                    \"ThingName\": fieldDataValue.Provisioning.Thing.CreateThing.RouteFlagThingNameValue , //true\r",
									"                    \"ThingToken\": fieldDataValue.Provisioning.Thing.CreateThing.RouteFlagThingTokenValue, //true\r",
									"                    \"IMEI\": fieldDataValue.Provisioning.Thing.CreateThing.RouteFlagIMEIValue, //true\r",
									"                    \"ICCID\": fieldDataValue.Provisioning.Thing.CreateThing.RouteFlagICCIDValue, //true\r",
									"                    \"RouteInfo\": fieldDataValue.Provisioning.Thing.CreateThing.RouteFlagRouteInfoValue //true\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsCreateThing = {\r",
									"            url: url + provisioningapis + urlThingCreateThing,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThing,\r",
									"            body: httpRequestCreateThing\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThing');\r",
									"        let response = await reqPromise(optionsCreateThing);\r",
									"        let jsonDataCreateThing = await response.json();\r",
									"        // console.log('jsonDataCreateThing',jsonDataCreateThing)\r",
									"    \r",
									"        let operationStatusCreateThing = await jsonDataCreateThing.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateThing : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateThing : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateThing is Success\r",
									"        pm.test('CreateThing : OperationStatus Description is '+'\"'+ resultDescriptionCreateThing+'\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Description', resultDescriptionCreateThing);\r",
									"        });\r",
									"\r",
									"        pm.environment.set(\"GetResponse_ThingID\",jsonDataCreateThing.ThingInfo.ThingId)\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"Signin();\r",
									"setTimeout(async function(){await CreatePartner();}, 3000); \r",
									"setTimeout(async function(){await CreateAccount();}, 6000); \r",
									"setTimeout(async function(){await CreateThing();}, 8000); \r",
									"setTimeout(async function(){}, 8500);  \r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-ais-UserName",
								"type": "text",
								"value": "{{x_ais_UserName_AisPartner}}"
							},
							{
								"key": "x-ais-OrderRef",
								"value": "{{x_ais_OrderRef_InquiryThing}}{{current_timestamp}}"
							},
							{
								"key": "x-ais-OrderDesc",
								"type": "text",
								"value": "{{x_ais_OrderDesc_InquiryThing}}"
							},
							{
								"key": "x-ais-AccessToken",
								"value": "{{Bearer}} {{AccessToken}}"
							},
							{
								"key": "x-ais-AccountKey",
								"type": "text",
								"value": "{{GetResponse_AccountId}}"
							},
							{
								"key": "Accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"ThingId\": \"{{GetResponse_ThingID}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}{{provisioningapis}}/api/v1/Thing/InquiryThing",
							"host": [
								"{{url}}{{provisioningapis}}"
							],
							"path": [
								"api",
								"v1",
								"Thing",
								"InquiryThing"
							]
						},
						"description": "Type:Desire"
					},
					"response": []
				},
				{
					"name": "InquiryThing_TST_F13_1_1_003_Success_InquiryAll_SupplierAdmin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to x_ais_OrderRef \"InquiryThing_\"\r",
									"var x_ais_OrderRef_InquiryThing = pm.globals.get(\"x_ais_OrderRef_InquiryThing\");\r",
									"//get global variable to x_ais_OrderDesc \"InquiryThing\"\r",
									"var x_ais_OrderDesc_InquiryThing = pm.globals.get(\"x_ais_OrderDesc_InquiryThing\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get url Remove --------------//\r",
									"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
									"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"RemovePartner is Success\"\r",
									"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
									"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
									"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to resultDescription \"InquiryThing is Success\"\r",
									"var resultDescriptionInquiryThing = pm.globals.get(\"resultDescriptionInquiryThing\");\r",
									"//------------------------------------------------------------//\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"InquiryThing : Status code is \" + statusCodeSuccess, function () {\r",
									"    pm.response.to.have.status(statusCodeSuccess);\r",
									"});\r",
									"\r",
									"pm.test('InquiryThing : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeSuccess);\r",
									"});\r",
									"\r",
									"pm.test('InquiryThing : OperationStatus Description is '+'\"'+ resultDescriptionInquiryThing+'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionInquiryThing);\r",
									"});\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// RemovePartner\r",
									" RemovePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemovePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemovePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemovePartner = {\r",
									"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemovePartner,\r",
									"            body: httpRequestRemovePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request RemovePartner');\r",
									"        let response = await reqPromise(optionsRemovePartner);\r",
									"        let jsonDataRemovePartner = await response.json();\r",
									"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
									"    \r",
									"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemovePartner is Success\r",
									"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveAccount\r",
									" RemoveAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemoveAccount = {\r",
									"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveAccount,\r",
									"            body: httpRequestRemoveAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveAccount');\r",
									"        let response = await reqPromise(optionsRemoveAccount);\r",
									"        let jsonDataRemoveAccount = await response.json();\r",
									"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
									"    \r",
									"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveAccount is Success\r",
									"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"//---------------- LogDefaultValue --------------//\r",
									"//set variable to LogDefaultValue JSON.parse\r",
									"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
									"// console.log('LogDefaultValue',LogDefaultValue);\r",
									"//---------------- set globals Other --------------//\r",
									"var SearchLog = LogDefaultValue.SearchLog;\r",
									"// console.log('SearchLog',SearchLog);\r",
									"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
									"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
									"var kbn_version = SearchLog.header.kbn_version;\r",
									"var authorization = SearchLog.header.Authorization;\r",
									"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
									"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
									"var namespace = LogDefaultValue.Other.namespace;\r",
									"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
									"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
									"var header_x_ais_username = LogDefaultValue.Other.header_x_ais_username;\r",
									"var header_x_ais_accountkey = LogDefaultValue.Other.header_x_ais_accountkey;\r",
									"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
									"var methodPost = LogDefaultValue.Other.methodPost;\r",
									"\r",
									"// Detail\r",
									"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
									"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
									"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
									"\r",
									"// Summary\r",
									"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
									"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
									"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
									"\r",
									"// ProvisioningAPIs [InquiryThing]\r",
									"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
									"var cmdName = LogDefaultValue.Provisioning.Thing.cmdNameInquiryThing;\r",
									"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
									"var containerId = LogDefaultValue.Provisioning.containerId;\r",
									"var requestObjectUrlStaging = LogDefaultValue.Provisioning.Thing.requestObjectUrlInquiryThingMgStaging;\r",
									"\r",
									"// Check CDR (Summary Log) and EDR (Detail Log)\r",
									"SearchLogFindTid = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSearchLogFindTid = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = x_ais_OrderRef_InquiryThing + current_timestamp;\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\", valueSearch)\r",
									"\r",
									"        // body\r",
									"        let httpRequestSearchLogFindTid = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({ \"version\": \"true\", \"size\": 500, \"sort\": [{ \"@timestamp_es\": { \"order\": \"desc\", \"unmapped_type\": \"boolean\" } }], \"_source\": { \"excludes\": [] }, \"aggs\": { \"2\": { \"date_histogram\": { \"field\": \"@timestamp_es\", \"fixed_interval\": \"30s\", \"time_zone\": \"Asia/Bangkok\", \"min_doc_count\": 1 } } }, \"stored_fields\": [\"*\"], \"script_fields\": {}, \"docvalue_fields\": [{ \"field\": \"@timestamp_es\", \"format\": \"date_time\" }, { \"field\": \"cauldron.custom1.activityLog.endTime\", \"format\": \"date_time\" }, { \"field\": \"cauldron.custom1.activityLog.startTime\", \"format\": \"date_time\" }, { \"field\": \"time\", \"format\": \"date_time\" }], \"query\": { \"bool\": { \"must\": [], \"filter\": [{ \"multi_match\": { \"type\": \"best_fields\", \"query\": '\"' + valueSearch + '\"', \"lenient\": \"true\" } }, { \"range\": { \"@timestamp_es\": { \"format\": \"strict_date_optional_time\", \"gte\": setRangeGTE, \"lte\": setRangeLTE } } }], \"should\": [], \"must_not\": [] } }, \"highlight\": { \"pre_tags\": [\"@kibana-highlighted-field@\"], \"post_tags\": [\"@/kibana-highlighted-field@\"], \"fields\": { \"*\": {} }, \"fragment_size\": 2147483647 } })\r",
									"        };\r",
									"\r",
									"        let optionsSearchLogFindTid = {\r",
									"            url: url_staging_azure_cauldron,\r",
									"            method: 'POST',\r",
									"            header: headersOptSearchLogFindTid,\r",
									"            body: httpRequestSearchLogFindTid\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsSearchLogFindTid);\r",
									"        let jsonDataSearchLogFindTid = await response.json();\r",
									"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
									"        console.log('hits', hits)\r",
									"\r",
									"        // find tid\r",
									"        for (let i = 0; i < hits.length; i++) {\r",
									"            // let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"\r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            if (applicationNameValue == applicationName) {\r",
									"                let tid = hits[i]._source.cauldron.tid;\r",
									"                pm.environment.set(\"tid\", tid);\r",
									"                break;\r",
									"            }\r",
									"        }\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"CheckLog = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCheckLog = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = pm.environment.get(\"tid\");\r",
									"\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\", valueSearch)\r",
									"\r",
									"        // body\r",
									"        let httpRequestCheckLog = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({ \"version\": true, \"size\": 500, \"sort\": [{ \"@timestamp_es\": { \"order\": \"desc\", \"unmapped_type\": \"boolean\" } }], \"_source\": { \"excludes\": [] }, \"aggs\": { \"2\": { \"date_histogram\": { \"field\": \"@timestamp_es\", \"fixed_interval\": \"30s\", \"time_zone\": \"Asia/Bangkok\", \"min_doc_count\": 1 } } }, \"stored_fields\": [\"*\"], \"script_fields\": {}, \"docvalue_fields\": [{ \"field\": \"@timestamp_es\", \"format\": \"date_time\" }, { \"field\": \"cauldron.custom1.activityLog.endTime\", \"format\": \"date_time\" }, { \"field\": \"cauldron.custom1.activityLog.startTime\", \"format\": \"date_time\" }, { \"field\": \"time\", \"format\": \"date_time\" }], \"query\": { \"bool\": { \"must\": [], \"filter\": [{ \"multi_match\": { \"type\": \"best_fields\", \"query\": '\"' + valueSearch + '\"', \"lenient\": true } }, { \"range\": { \"@timestamp_es\": { \"format\": \"strict_date_optional_time\", \"gte\": setRangeGTE, \"lte\": setRangeLTE } } }], \"should\": [], \"must_not\": [] } }, \"highlight\": { \"pre_tags\": [\"@kibana-highlighted-field@\"], \"post_tags\": [\"@/kibana-highlighted-field@\"], \"fields\": { \"*\": {} }, \"fragment_size\": 2147483647 } })\r",
									"        };\r",
									"        let optionsCheckLog = {\r",
									"            url: url_staging_azure_cauldron,\r",
									"            method: 'POST',\r",
									"            header: headersOptCheckLog,\r",
									"            body: httpRequestCheckLog\r",
									"        };\r",
									"        let response = await reqPromise(optionsCheckLog);\r",
									"        let jsonDataCheckLog = await response.json();\r",
									"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataCheckLog.hits.hits\r",
									"        console.log('hits', hits)\r",
									"\r",
									"        // find logType\r",
									"        for (let i = 0; i < hits.length; i++) {\r",
									"            //  let logType = hits[i]._source.cauldron.logType\r",
									"            let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"\r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"\r",
									"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
									"            // console.log('resultDataLog',resultDataLog)\r",
									"\r",
									"            let tidControl = x_ais_OrderRef_InquiryThing + current_timestamp;\r",
									"            // console.log(tidControl);\r",
									"            if (applicationNameValue == applicationName) {\r",
									"\r",
									"                if (logType == logTypeSummary && applicationNameValue == applicationName) { // 'Summary' and ProvisioningAPIs\r",
									"                    pm.test(\"Check Summary Log : InquiryThing\" , function () {\r",
									"                        console.log(\"======== Check Summary Log ( Expected = Actual) [InquiryThing] ==================\");\r",
									"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
									"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
									"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeSuccess);\r",
									"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionInquiryThing);\r",
									"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
									"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
									"                        // console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
									"\r",
									"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp);\r",
									"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName);\r",
									"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeSuccess);\r",
									"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionInquiryThing);\r",
									"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp);\r",
									"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary);\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace);\r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName);\r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId);\r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
									"                        // pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
									"\r",
									"                        // check custom\r",
									"                        // \\\"custom\\\":{ \\\"endPointSummary\\\":[ { \\\"no\\\":\\\"1\\\", \\\"endPointName\\\":\\\"db.AccountsCollection\\\", \\\"responseStatus\\\":\\\"Success:InquiryAccount was successfully.\\\", \\\"processTime\\\":2.6059 }, { \\\"no\\\":\\\"2\\\", \\\"endPointName\\\":\\\"db.ThingsCollection\\\", \\\"responseStatus\\\":\\\"Success:InquiryThing was successfully.\\\", \\\"processTime\\\":4.2244 } ] }\r",
									"                        let custom = resultDataLog.custom.endPointSummary;\r",
									"                        let countCustom = custom.length;\r",
									"                       \r",
									"                        // [\"db.AccountsCollection\",\"db.ThingsCollection\"]\r",
									"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_InquiryThing;\r",
									"                        // [\"Success:InquiryAccount was successfully.\",\"Success:InquiryThing was successfully.\"]\r",
									"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_InquiryThing;\r",
									"                        let countCustomStep = dataEndPointName.length;\r",
									"\r",
									"                        console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep);\r",
									"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
									"                        \r",
									"                        for(let i=0;i<countCustomStep;i++){\r",
									"                            let no = custom[i].no;\r",
									"                            let valueEndPointName = custom[i].endPointName;\r",
									"                            let valueResponseStatus = custom[i].responseStatus;\r",
									"                            // console.log(\"i\",i);\r",
									"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
									"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
									"\r",
									"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString());\r",
									"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i]);\r",
									"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i]);\r",
									"\r",
									"                            pm.expect(no).to.eql((i+1).toString()); \r",
									"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
									"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]); \r",
									"                        }\r",
									"                    });\r",
									"                }\r",
									"\r",
									"                if (logType == logTypeDetail && applicationNameValue == applicationName) { //'Detail' and ProvisioningAPIs\r",
									"\r",
									"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
									"                    // console.log('endPointNameValue ',endPointNameValue)\r",
									"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [InquiryThing]\", function () {\r",
									"                        console.log(\"======== Check Detail Log ( Expected = Actual) [InquiryThing] ==================\");\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
									"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
									"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
									"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.custom1.activityLog.processTime + \" = \" + resultDataLog.custom1.activityLog.processTime);\r",
									"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
									"\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail);\r",
									"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail);\r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace);\r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName);\r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId);\r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime);\r",
									"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail);\r",
									"\r",
									"                        if (endPointNameValue == endPointNameProvisioningAPIs) {     //\"endPointName\":\"ProvisioningAPIs\"\r",
									"                            console.log(\"custom1.endPointName : \" + resultDataLog.custom1.endPointName + \" = \" + endPointNameProvisioningAPIs); \r",
									"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs);\r",
									"\r",
									"                            // check requestObject\r",
									"                            // \"requestObject\":\"{ \\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Thing/InquiryThing\\\", \\\"method\\\":\\\"POST\\\", \\\"headers\\\":{ \\\"x-ais-username\\\":\\\"AisPartner\\\", \\\"x-ais-orderref\\\":\\\"InquiryThing_202104081704512\\\", \\\"x-ais-orderdesc\\\":\\\"InquiryThing\\\", \\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAGUJ9zLPcvr1pAD3hVGH9ePoo/D5pkv7DQ6X3lEGyqh4UIlAkkY2KW0\\\", \\\"x-ais-accountkey\\\":\\\"606ed92063fa0e0001bf6d26\\\" }, \\\"body\\\":{ } }\"\r",
									"\r",
									"                            // \\\"requestObject\\\":\\\"{ \\\\\\\"url\\\\\\\":\\\\\\\"mg-iot.sandais.com/api/v1/Thing/InquiryThing\\\\\\\", \\\\\\\"method\\\\\\\":\\\\\\\"POST\\\\\\\", \\\\\\\"headers\\\\\\\":{ \\\\\\\"x-ais-username\\\\\\\":\\\\\\\"AisPartner\\\\\\\", \\\\\\\"x-ais-orderref\\\\\\\":\\\\\\\"InquiryThing_202105101605767\\\\\\\", \\\\\\\"x-ais-orderdesc\\\\\\\":\\\\\\\"InquiryThing\\\\\\\", \\\\\\\"x-ais-accesstoken\\\\\\\":\\\\\\\"Bearer ibnxnVhs5Rx3IwglWv7/gVA/1TpQnKqAOBAADlRDvYhOpXwmlpYOEb5yfY5aZpoj0YRWRZM26i9HOqtc1fc1jpNDOK5JpISttmMEy59g2py7nLWonDe2YW2OPRGWSowk6+9ZihLU1fZ5d5jAqqrZaKlOAAI3N1TXDNLsHuKcOJMcERbCcaMqRaku+MY4/kzE+eyIdkfwwbjT91S2VQq+Wk2ooMWuLk6/DHVJhwbMP7Y8okAOp9ce942jT9rvza3sVoQpiZlI7L1KVegMrc8SMg==\\\\\\\", \\\\\\\"x-ais-accountkey\\\\\\\":\\\\\\\"6098fa1d5316540001b19d52\\\\\\\" }, \\\\\\\"body\\\\\\\":{ } }\\\", \\\"responseObject\\\":\\\"{ \\\\\\\"ThingInfo\\\\\\\":[ ], \\\\\\\"_Metadata\\\\\\\":{ \\\\\\\"TotalCount\\\\\\\":0, \\\\\\\"Limit\\\\\\\":10000, \\\\\\\"OffSet\\\\\\\":0 }, \\\\\\\"OperationStatus\\\\\\\":{ \\\\\\\"Code\\\\\\\":\\\\\\\"20000\\\\\\\", \\\\\\\"Description\\\\\\\":\\\\\\\"InquiryThing is Success\\\\\\\" } }\\\"\r",
									"\r",
									"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
									"                            //  console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
									"\r",
									"                            let url = urlCheckLog + requestObjectUrlStaging;\r",
									"                            let x_ais_orderref = x_ais_OrderRef_InquiryThing + current_timestamp;\r",
									"                            let x_ais_orderdesc = x_ais_OrderDesc_InquiryThing;\r",
									"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken2\");\r",
									"                            let x_ais_userName = x_ais_UserName_AisPartner;\r",
									"                            let x_ais_AccountKey = pm.environment.get(\"accountId_role_other\");\r",
									"                            \r",
									"                            let body = {};\r",
									"\r",
									"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
									"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
									"                            console.log(\"headers.x_ais_userName : \" + jsonParseRequestObject.headers[header_x_ais_username] + \" = \" + x_ais_userName);\r",
									"                            console.log(\"headers.x_ais_AccountKey : \" + jsonParseRequestObject.headers[header_x_ais_accountkey] + \" = \" + x_ais_AccountKey);\r",
									"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
									"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.url).to.eql(url);\r",
									"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_username]).to.eql(x_ais_userName);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accountkey]).to.eql(x_ais_AccountKey);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
									"\r",
									"                            console.log(\"resquest.body : \" + JSON.stringify(jsonParseRequestObject.body) + \" = \" + JSON.stringify(body));\r",
									"                            pm.expect(jsonParseRequestObject.body).to.eql(body);\r",
									"\r",
									"                            // check responseObject\r",
									"                            // \"responseObject\":\"{\\\"ThingInfo\\\":[],\\\"_Metadata\\\":{\\\"TotalCount\\\":0,\\\"Limit\\\":10000,\\\"OffSet\\\":0 },\\\"OperationStatus\\\":{\\\"Code\\\":\\\"20000\\\", \\\"Description\\\":\\\"InquiryThing is Success\\\"}}\"\r",
									"\r",
									"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
									"                            // console.log('jsonParseResponseObject',jsonParseResponseObject);\r",
									"\r",
									"                            console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeSuccess);\r",
									"                            console.log(\"response.OperationStatus.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionInquiryThing); \r",
									"\r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeSuccess);\r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionInquiryThing);\r",
									"                        }\r",
									"                    });\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"setTimeout(function(){SearchLogFindTid();}, 8000); \r",
									"setTimeout(function(){CheckLog();}, 20000); \r",
									"\r",
									"setTimeout(function(){RemoveAccount();}, 30000); \r",
									"setTimeout(function(){RemovePartner();}, 40000); \r",
									"\r",
									"setTimeout(function(){\r",
									"pm.environment.unset(\"current_timestamp\");\r",
									"pm.environment.unset(\"AccessToken\");\r",
									"pm.environment.unset(\"AccessToken2\");\r",
									"pm.environment.unset(\"random_number\");\r",
									"pm.environment.unset(\"PartnerName\");\r",
									"pm.environment.unset(\"MerchantContact\");\r",
									"pm.environment.unset(\"CPID\");\r",
									"pm.environment.unset(\"GetResponse_PartnerId\");\r",
									"pm.environment.unset(\"AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountId\");\r",
									"pm.environment.unset(\"random_IM\");\r",
									"pm.environment.unset(\"random_ICCID\");\r",
									"pm.environment.unset(\"ThingName\");\r",
									"pm.environment.unset(\"tid\");\r",
									"}, 45000);\r",
									"setTimeout(function(){}, 50000); "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var Username = pm.environment.get(\"Username\");\r",
									"var Password = pm.environment.get(\"Password\");\r",
									"var Username_SupplierAdmin = pm.environment.get(\"Username_SupplierAdmin\");\r",
									"var Password_SupplierAdmin = pm.environment.get(\"Password_SupplierAdmin\");\r",
									"\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"//format YYYYMMDDHHMMSSS\r",
									"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
									"// console.log('currentTmestamp',currentTmestamp);\r",
									"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- statusCodeList --------------//\r",
									"//set variable to statusCodeList JSON.parse\r",
									"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
									"//set global variable to statusCode 200\r",
									"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
									"//set global variable to statusCode 201\r",
									"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultCodeList --------------//\r",
									"//set variable to resultCodeList JSON.parse\r",
									"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
									"//set global variable to resultCode \"20000\"\r",
									"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
									"//set global variable to resultCode \"20100\"\r",
									"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionSuccessList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
									"//set global variable to resultDescription \"SignInProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
									"//set global variable to resultDescription \"CreatePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
									"//set global variable to resultDescription \"CreateAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
									"//set global variable to resultDescription \"RemovePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
									"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
									"//set global variable to resultDescription \"InquiryThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionInquiryThing\", resultDescriptionSuccessList.resultDescriptionInquiryThing);\r",
									"//---------------- HeaderList --------------//\r",
									"//set variable to HeaderList JSON.parse\r",
									"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
									"//---------------- set globals Other --------------//\r",
									"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
									"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
									"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
									"//set global variable to kbn-versio \"7.5.1\"\r",
									"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Signin_ --------------//\r",
									"//set global variable to x_ais_OrderRef \"Signin_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreatePartner --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
									"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
									"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
									"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreateAccount --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
									"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
									"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Thing --------------//\r",
									"//set global variable to x_ais_OrderRef \"InquiryThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_InquiryThing\", HeaderList.Thing.x_ais_OrderRef_InquiryThing);\r",
									"//set global variable to x_ais_OrderDesc \"InquiryThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_InquiryThing\", HeaderList.Thing.x_ais_OrderDesc_InquiryThing);\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"SignInProcess is Success\"\r",
									"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
									"//get global variable to resultDescription \"CreatePartner is Success\"\r",
									"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
									"//get global variable to resultDescription \"CreateAccount is Success\"\r",
									"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- urlRouteList --------------//\r",
									"//set variable to urlRouteList JSON.parse\r",
									"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
									"//---------------- set url Create --------------//\r",
									"//set global variable to url \"/api/v1/auth/signin\"\r",
									"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
									"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
									"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"pm.globals.set(\"urlThingCreateThing\", urlRouteList.Thing.urlThingCreateThing);\r",
									"//---------------- get url Create --------------//\r",
									"//get global variable to url \"/api/v1/auth/signin\"\r",
									"var urlSignin = pm.globals.get(\"urlSignin\");\r",
									"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
									"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"var urlThingCreateThing = pm.globals.get(\"urlThingCreateThing\");\r",
									"//---------------- set url Remove --------------//\r",
									"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
									"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Signin_ --------------//\r",
									"//get global variable to x_ais_OrderRef \"Signin_\"\r",
									"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
									"//------------------------------------------------------------//\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// Signin get token\r",
									" Signin = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSignin = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestSignin = {\r",
									"            mode: 'raw',\r",
									"            raw: \r",
									"            JSON.stringify({\r",
									"                username:Username,\r",
									"                password:Password\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsSignin = {\r",
									"            url: url + provisioningapis + urlSignin,\r",
									"            method: 'POST',\r",
									"            header: headersOptSignin,\r",
									"            body: httpRequestSignin\r",
									"        };\r",
									"        // console.log('request Signin');\r",
									"        let response = await reqPromise(optionsSignin);\r",
									"        let jsonDataSignin = await response.json();\r",
									"\r",
									"        // setAccessToken\r",
									"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
									"\r",
									"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // SignInProcess is Success\r",
									"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
									"        });\r",
									"\r",
									"        //set random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //set PartnerName\r",
									"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
									"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
									"        //set MerchantContact\r",
									"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
									"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
									"        // set CPID\r",
									"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
									"        pm.environment.set(\"CPID\", CPIDValue)\r",
									"        \r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreatePartner\r",
									" CreatePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreatePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreatePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
									"                \"PartnerType\": fieldDataValue.Partner.PartnerTypeValue, //[\"Supplier\",\"Customer\"]\r",
									"                \"PartnerDetail\": {\r",
									"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
									"                    \"CPID\": pm.environment.get(\"CPID\")\r",
									"                },\r",
									"                \"Property\": {\r",
									"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsCreatePartner = {\r",
									"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreatePartner,\r",
									"            body: httpRequestCreatePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsCreatePartner);\r",
									"        let jsonDataCreatePartner = await response.json();\r",
									"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
									"    \r",
									"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreatePartner is Success\r",
									"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
									"        });\r",
									"\r",
									"        //GetResponse_PartnerId\r",
									"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
									"\r",
									"        //Accountname\r",
									"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
									"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateAccount\r",
									" CreateAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreateAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
									"                })\r",
									"        };\r",
									"        \r",
									"        let optionsCreateAccount = {\r",
									"            url: url + provisioningapis + urlAccountCreateAccount,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateAccount,\r",
									"            body: httpRequestCreateAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateAccount');\r",
									"        let response = await reqPromise(optionsCreateAccount);\r",
									"        let jsonDataCreateAccount = await response.json();\r",
									"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
									"    \r",
									"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateAccount : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateAccount is Success\r",
									"        pm.test('CreateAccount : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
									"        });\r",
									"        // GetResponse_AccountName\r",
									"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
									"        // GetResponse_AccountId\r",
									"        pm.environment.set(\"GetResponse_AccountId\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
									"        // random_IM\r",
									"        pm.environment.set(\"random_IM\", _.random(10000000, 99999999)+\" \"+_.random(1000000, 9999999))\r",
									"        // random_ICCID\r",
									"        pm.environment.set(\"random_ICCID\", _.random(1000000, 9999999)+\" \"+_.random(100000, 999999))\r",
									"        // random_number\r",
									"        pm.environment.set(\"random_number\",pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //ThingName\r",
									"        let thingNameValue = fieldDataValue.Provisioning.Thing.ThingNameValue; // \"QAtestthing_T01\"\r",
									"        pm.environment.set(\"ThingName\", thingNameValue + pm.environment.get(\"random_number\"))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// Signin get token\r",
									" Signin2 = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSignin = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestSignin = {\r",
									"            mode: 'raw',\r",
									"            raw: \r",
									"            JSON.stringify({\r",
									"                username:Username_SupplierAdmin,\r",
									"                password:Password_SupplierAdmin\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsSignin = {\r",
									"            url: url + provisioningapis + urlSignin,\r",
									"            method: 'POST',\r",
									"            header: headersOptSignin,\r",
									"            body: httpRequestSignin\r",
									"        };\r",
									"        // console.log('request Signin');\r",
									"        let response = await reqPromise(optionsSignin);\r",
									"        let jsonDataSignin = await response.json();\r",
									"\r",
									"        // setAccessToken\r",
									"        await pm.environment.set(\"AccessToken2\" , jsonDataSignin.AccessToken);\r",
									"\r",
									"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // SignInProcess is Success\r",
									"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
									"        });\r",
									"        \r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"Signin();\r",
									"setTimeout(async function(){await CreatePartner();}, 3000); \r",
									"setTimeout(async function(){await CreateAccount();}, 6000); \r",
									"setTimeout(async function(){await Signin2();}, 7000); \r",
									"setTimeout(async function(){}, 7500);  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-ais-UserName",
								"type": "text",
								"value": "{{x_ais_UserName_AisPartner}}"
							},
							{
								"key": "x-ais-OrderRef",
								"value": "{{x_ais_OrderRef_InquiryThing}}{{current_timestamp}}"
							},
							{
								"key": "x-ais-OrderDesc",
								"type": "text",
								"value": "{{x_ais_OrderDesc_InquiryThing}}"
							},
							{
								"key": "x-ais-AccessToken",
								"value": "{{Bearer}} {{AccessToken2}}"
							},
							{
								"key": "x-ais-AccountKey",
								"type": "text",
								"value": "{{accountId_role_other}}"
							},
							{
								"key": "Accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}{{provisioningapis}}/api/v1/Thing/InquiryThing",
							"host": [
								"{{url}}{{provisioningapis}}"
							],
							"path": [
								"api",
								"v1",
								"Thing",
								"InquiryThing"
							]
						},
						"description": "Type:Desire"
					},
					"response": []
				},
				{
					"name": "InquiryThing_TST_F13_1_1_004_Success_InquiryAll_CustomerAdmin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to x_ais_OrderRef \"InquiryThing_\"\r",
									"var x_ais_OrderRef_InquiryThing = pm.globals.get(\"x_ais_OrderRef_InquiryThing\");\r",
									"//get global variable to x_ais_OrderDesc \"InquiryThing\"\r",
									"var x_ais_OrderDesc_InquiryThing = pm.globals.get(\"x_ais_OrderDesc_InquiryThing\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get url Remove --------------//\r",
									"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
									"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"RemovePartner is Success\"\r",
									"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
									"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
									"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to resultDescription \"InquiryThing is Success\"\r",
									"var resultDescriptionInquiryThing = pm.globals.get(\"resultDescriptionInquiryThing\");\r",
									"//------------------------------------------------------------//\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"InquiryThing : Status code is \" + statusCodeSuccess, function () {\r",
									"    pm.response.to.have.status(statusCodeSuccess);\r",
									"});\r",
									"\r",
									"pm.test('InquiryThing : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeSuccess);\r",
									"});\r",
									"\r",
									"pm.test('InquiryThing : OperationStatus Description is '+'\"'+ resultDescriptionInquiryThing+'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionInquiryThing);\r",
									"});\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// RemovePartner\r",
									" RemovePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemovePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemovePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemovePartner = {\r",
									"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemovePartner,\r",
									"            body: httpRequestRemovePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request RemovePartner');\r",
									"        let response = await reqPromise(optionsRemovePartner);\r",
									"        let jsonDataRemovePartner = await response.json();\r",
									"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
									"    \r",
									"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemovePartner is Success\r",
									"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveAccount\r",
									" RemoveAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemoveAccount = {\r",
									"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveAccount,\r",
									"            body: httpRequestRemoveAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveAccount');\r",
									"        let response = await reqPromise(optionsRemoveAccount);\r",
									"        let jsonDataRemoveAccount = await response.json();\r",
									"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
									"    \r",
									"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveAccount is Success\r",
									"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"//---------------- LogDefaultValue --------------//\r",
									"//set variable to LogDefaultValue JSON.parse\r",
									"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
									"// console.log('LogDefaultValue',LogDefaultValue);\r",
									"//---------------- set globals Other --------------//\r",
									"var SearchLog = LogDefaultValue.SearchLog;\r",
									"// console.log('SearchLog',SearchLog);\r",
									"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
									"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
									"var kbn_version = SearchLog.header.kbn_version;\r",
									"var authorization = SearchLog.header.Authorization;\r",
									"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
									"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
									"var namespace = LogDefaultValue.Other.namespace;\r",
									"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
									"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
									"var header_x_ais_username = LogDefaultValue.Other.header_x_ais_username;\r",
									"var header_x_ais_accountkey = LogDefaultValue.Other.header_x_ais_accountkey;\r",
									"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
									"var methodPost = LogDefaultValue.Other.methodPost;\r",
									"\r",
									"// Detail\r",
									"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
									"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
									"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
									"\r",
									"// Summary\r",
									"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
									"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
									"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
									"\r",
									"// ProvisioningAPIs [InquiryThing]\r",
									"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
									"var cmdName = LogDefaultValue.Provisioning.Thing.cmdNameInquiryThing;\r",
									"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
									"var containerId = LogDefaultValue.Provisioning.containerId;\r",
									"var requestObjectUrlStaging = LogDefaultValue.Provisioning.Thing.requestObjectUrlInquiryThingMgStaging;\r",
									"\r",
									"// Check CDR (Summary Log) and EDR (Detail Log)\r",
									"SearchLogFindTid = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSearchLogFindTid = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = x_ais_OrderRef_InquiryThing + current_timestamp;\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\", valueSearch)\r",
									"\r",
									"        // body\r",
									"        let httpRequestSearchLogFindTid = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({ \"version\": \"true\", \"size\": 500, \"sort\": [{ \"@timestamp_es\": { \"order\": \"desc\", \"unmapped_type\": \"boolean\" } }], \"_source\": { \"excludes\": [] }, \"aggs\": { \"2\": { \"date_histogram\": { \"field\": \"@timestamp_es\", \"fixed_interval\": \"30s\", \"time_zone\": \"Asia/Bangkok\", \"min_doc_count\": 1 } } }, \"stored_fields\": [\"*\"], \"script_fields\": {}, \"docvalue_fields\": [{ \"field\": \"@timestamp_es\", \"format\": \"date_time\" }, { \"field\": \"cauldron.custom1.activityLog.endTime\", \"format\": \"date_time\" }, { \"field\": \"cauldron.custom1.activityLog.startTime\", \"format\": \"date_time\" }, { \"field\": \"time\", \"format\": \"date_time\" }], \"query\": { \"bool\": { \"must\": [], \"filter\": [{ \"multi_match\": { \"type\": \"best_fields\", \"query\": '\"' + valueSearch + '\"', \"lenient\": \"true\" } }, { \"range\": { \"@timestamp_es\": { \"format\": \"strict_date_optional_time\", \"gte\": setRangeGTE, \"lte\": setRangeLTE } } }], \"should\": [], \"must_not\": [] } }, \"highlight\": { \"pre_tags\": [\"@kibana-highlighted-field@\"], \"post_tags\": [\"@/kibana-highlighted-field@\"], \"fields\": { \"*\": {} }, \"fragment_size\": 2147483647 } })\r",
									"        };\r",
									"\r",
									"        let optionsSearchLogFindTid = {\r",
									"            url: url_staging_azure_cauldron,\r",
									"            method: 'POST',\r",
									"            header: headersOptSearchLogFindTid,\r",
									"            body: httpRequestSearchLogFindTid\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsSearchLogFindTid);\r",
									"        let jsonDataSearchLogFindTid = await response.json();\r",
									"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
									"        console.log('hits', hits)\r",
									"\r",
									"        // find tid\r",
									"        for (let i = 0; i < hits.length; i++) {\r",
									"            // let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"\r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            if (applicationNameValue == applicationName) {\r",
									"                let tid = hits[i]._source.cauldron.tid;\r",
									"                pm.environment.set(\"tid\", tid);\r",
									"                break;\r",
									"            }\r",
									"        }\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"CheckLog = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCheckLog = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = pm.environment.get(\"tid\");\r",
									"\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\", valueSearch)\r",
									"\r",
									"        // body\r",
									"        let httpRequestCheckLog = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({ \"version\": true, \"size\": 500, \"sort\": [{ \"@timestamp_es\": { \"order\": \"desc\", \"unmapped_type\": \"boolean\" } }], \"_source\": { \"excludes\": [] }, \"aggs\": { \"2\": { \"date_histogram\": { \"field\": \"@timestamp_es\", \"fixed_interval\": \"30s\", \"time_zone\": \"Asia/Bangkok\", \"min_doc_count\": 1 } } }, \"stored_fields\": [\"*\"], \"script_fields\": {}, \"docvalue_fields\": [{ \"field\": \"@timestamp_es\", \"format\": \"date_time\" }, { \"field\": \"cauldron.custom1.activityLog.endTime\", \"format\": \"date_time\" }, { \"field\": \"cauldron.custom1.activityLog.startTime\", \"format\": \"date_time\" }, { \"field\": \"time\", \"format\": \"date_time\" }], \"query\": { \"bool\": { \"must\": [], \"filter\": [{ \"multi_match\": { \"type\": \"best_fields\", \"query\": '\"' + valueSearch + '\"', \"lenient\": true } }, { \"range\": { \"@timestamp_es\": { \"format\": \"strict_date_optional_time\", \"gte\": setRangeGTE, \"lte\": setRangeLTE } } }], \"should\": [], \"must_not\": [] } }, \"highlight\": { \"pre_tags\": [\"@kibana-highlighted-field@\"], \"post_tags\": [\"@/kibana-highlighted-field@\"], \"fields\": { \"*\": {} }, \"fragment_size\": 2147483647 } })\r",
									"        };\r",
									"        let optionsCheckLog = {\r",
									"            url: url_staging_azure_cauldron,\r",
									"            method: 'POST',\r",
									"            header: headersOptCheckLog,\r",
									"            body: httpRequestCheckLog\r",
									"        };\r",
									"        let response = await reqPromise(optionsCheckLog);\r",
									"        let jsonDataCheckLog = await response.json();\r",
									"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataCheckLog.hits.hits\r",
									"        console.log('hits', hits)\r",
									"\r",
									"        // find logType\r",
									"        for (let i = 0; i < hits.length; i++) {\r",
									"            //  let logType = hits[i]._source.cauldron.logType\r",
									"            let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"\r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"\r",
									"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
									"            // console.log('resultDataLog',resultDataLog)\r",
									"\r",
									"            let tidControl = x_ais_OrderRef_InquiryThing + current_timestamp;\r",
									"            // console.log(tidControl);\r",
									"            if (applicationNameValue == applicationName) {\r",
									"\r",
									"                if (logType == logTypeSummary && applicationNameValue == applicationName) { // 'Summary' and ProvisioningAPIs\r",
									"                    pm.test(\"Check Summary Log : InquiryThing\" , function () {\r",
									"                        console.log(\"======== Check Summary Log ( Expected = Actual) [InquiryThing] ==================\");\r",
									"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
									"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
									"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeSuccess);\r",
									"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionInquiryThing);\r",
									"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
									"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
									"                        // console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
									"\r",
									"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp);\r",
									"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName);\r",
									"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeSuccess);\r",
									"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionInquiryThing);\r",
									"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp);\r",
									"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary);\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace);\r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName);\r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId);\r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
									"                        // pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
									"\r",
									"                        // check custom\r",
									"                        // \\\"custom\\\":{ \\\"endPointSummary\\\":[ { \\\"no\\\":\\\"1\\\", \\\"endPointName\\\":\\\"db.AccountsCollection\\\", \\\"responseStatus\\\":\\\"Success:InquiryAccount was successfully.\\\", \\\"processTime\\\":2.6059 }, { \\\"no\\\":\\\"2\\\", \\\"endPointName\\\":\\\"db.ThingsCollection\\\", \\\"responseStatus\\\":\\\"Success:InquiryThing was successfully.\\\", \\\"processTime\\\":4.2244 } ] }\r",
									"                        let custom = resultDataLog.custom.endPointSummary;\r",
									"                        let countCustom = custom.length;\r",
									"                       \r",
									"                        // [\"db.AccountsCollection\",\"db.ThingsCollection\"]\r",
									"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_InquiryThing;\r",
									"                        // [\"Success:InquiryAccount was successfully.\",\"Success:InquiryThing was successfully.\"]\r",
									"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_InquiryThing;\r",
									"                        let countCustomStep = dataEndPointName.length;\r",
									"\r",
									"                        console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep);\r",
									"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
									"                        \r",
									"                        for(let i=0;i<countCustomStep;i++){\r",
									"                            let no = custom[i].no;\r",
									"                            let valueEndPointName = custom[i].endPointName;\r",
									"                            let valueResponseStatus = custom[i].responseStatus;\r",
									"                            // console.log(\"i\",i);\r",
									"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
									"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
									"\r",
									"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString());\r",
									"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i]);\r",
									"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i]);\r",
									"\r",
									"                            pm.expect(no).to.eql((i+1).toString()); \r",
									"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
									"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]); \r",
									"                        }\r",
									"                    });\r",
									"                }\r",
									"\r",
									"                if (logType == logTypeDetail && applicationNameValue == applicationName) { //'Detail' and ProvisioningAPIs\r",
									"\r",
									"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
									"                    // console.log('endPointNameValue ',endPointNameValue)\r",
									"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [InquiryThing]\", function () {\r",
									"                        console.log(\"======== Check Detail Log ( Expected = Actual) [InquiryThing] ==================\");\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
									"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
									"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
									"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.custom1.activityLog.processTime + \" = \" + resultDataLog.custom1.activityLog.processTime);\r",
									"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
									"\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail);\r",
									"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail);\r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace);\r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName);\r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId);\r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime);\r",
									"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail);\r",
									"\r",
									"                        if (endPointNameValue == endPointNameProvisioningAPIs) {     //\"endPointName\":\"ProvisioningAPIs\"\r",
									"                            console.log(\"custom1.endPointName : \" + resultDataLog.custom1.endPointName + \" = \" + endPointNameProvisioningAPIs); \r",
									"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs);\r",
									"\r",
									"                            // check requestObject\r",
									"                            // \"requestObject\":\"{ \\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Thing/InquiryThing\\\", \\\"method\\\":\\\"POST\\\", \\\"headers\\\":{ \\\"x-ais-username\\\":\\\"AisPartner\\\", \\\"x-ais-orderref\\\":\\\"InquiryThing_202104081704512\\\", \\\"x-ais-orderdesc\\\":\\\"InquiryThing\\\", \\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAGUJ9zLPcvr1pAD3hVGH9ePoo/D5pkv7DQ6X3lEGyqh4UIlAkkY2KW0\\\", \\\"x-ais-accountkey\\\":\\\"606ed92063fa0e0001bf6d26\\\" }, \\\"body\\\":{ } }\"\r",
									"\r",
									"                            // \\\"requestObject\\\":\\\"{ \\\\\\\"url\\\\\\\":\\\\\\\"mg-iot.sandais.com/api/v1/Thing/InquiryThing\\\\\\\", \\\\\\\"method\\\\\\\":\\\\\\\"POST\\\\\\\", \\\\\\\"headers\\\\\\\":{ \\\\\\\"x-ais-username\\\\\\\":\\\\\\\"AisPartner\\\\\\\", \\\\\\\"x-ais-orderref\\\\\\\":\\\\\\\"InquiryThing_202105101605767\\\\\\\", \\\\\\\"x-ais-orderdesc\\\\\\\":\\\\\\\"InquiryThing\\\\\\\", \\\\\\\"x-ais-accesstoken\\\\\\\":\\\\\\\"Bearer ibnxnVhs5Rx3IwglWv7/gVA/1TpQnKqAOBAADlRDvYhOpXwmlpYOEb5yfY5aZpoj0YRWRZM26i9HOqtc1fc1jpNDOK5JpISttmMEy59g2py7nLWonDe2YW2OPRGWSowk6+9ZihLU1fZ5d5jAqqrZaKlOAAI3N1TXDNLsHuKcOJMcERbCcaMqRaku+MY4/kzE+eyIdkfwwbjT91S2VQq+Wk2ooMWuLk6/DHVJhwbMP7Y8okAOp9ce942jT9rvza3sVoQpiZlI7L1KVegMrc8SMg==\\\\\\\", \\\\\\\"x-ais-accountkey\\\\\\\":\\\\\\\"6098fa1d5316540001b19d52\\\\\\\" }, \\\\\\\"body\\\\\\\":{ } }\\\", \\\"responseObject\\\":\\\"{ \\\\\\\"ThingInfo\\\\\\\":[ ], \\\\\\\"_Metadata\\\\\\\":{ \\\\\\\"TotalCount\\\\\\\":0, \\\\\\\"Limit\\\\\\\":10000, \\\\\\\"OffSet\\\\\\\":0 }, \\\\\\\"OperationStatus\\\\\\\":{ \\\\\\\"Code\\\\\\\":\\\\\\\"20000\\\\\\\", \\\\\\\"Description\\\\\\\":\\\\\\\"InquiryThing is Success\\\\\\\" } }\\\"\r",
									"\r",
									"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
									"                            //  console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
									"\r",
									"                            let url = urlCheckLog + requestObjectUrlStaging;\r",
									"                            let x_ais_orderref = x_ais_OrderRef_InquiryThing + current_timestamp;\r",
									"                            let x_ais_orderdesc = x_ais_OrderDesc_InquiryThing;\r",
									"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken2\");\r",
									"                            let x_ais_userName = x_ais_UserName_AisPartner;\r",
									"                            let x_ais_AccountKey = pm.environment.get(\"accountId_role_other\");\r",
									"                            \r",
									"                            let body = {};\r",
									"\r",
									"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
									"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
									"                            console.log(\"headers.x_ais_userName : \" + jsonParseRequestObject.headers[header_x_ais_username] + \" = \" + x_ais_userName);\r",
									"                            console.log(\"headers.x_ais_AccountKey : \" + jsonParseRequestObject.headers[header_x_ais_accountkey] + \" = \" + x_ais_AccountKey);\r",
									"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
									"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.url).to.eql(url);\r",
									"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_username]).to.eql(x_ais_userName);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accountkey]).to.eql(x_ais_AccountKey);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
									"\r",
									"                            console.log(\"resquest.body : \" + JSON.stringify(jsonParseRequestObject.body) + \" = \" + JSON.stringify(body));\r",
									"                            pm.expect(jsonParseRequestObject.body).to.eql(body);\r",
									"\r",
									"                            // check responseObject\r",
									"                            // \"responseObject\":\"{\\\"ThingInfo\\\":[],\\\"_Metadata\\\":{\\\"TotalCount\\\":0,\\\"Limit\\\":10000,\\\"OffSet\\\":0 },\\\"OperationStatus\\\":{\\\"Code\\\":\\\"20000\\\", \\\"Description\\\":\\\"InquiryThing is Success\\\"}}\"\r",
									"\r",
									"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
									"                            // console.log('jsonParseResponseObject',jsonParseResponseObject);\r",
									"\r",
									"                            console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeSuccess);\r",
									"                            console.log(\"response.OperationStatus.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionInquiryThing); \r",
									"\r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeSuccess);\r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionInquiryThing);\r",
									"                        }\r",
									"                    });\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"setTimeout(function(){SearchLogFindTid();}, 8000); \r",
									"setTimeout(function(){CheckLog();}, 20000); \r",
									"\r",
									"setTimeout(function(){RemoveAccount();}, 30000); \r",
									"setTimeout(function(){RemovePartner();}, 40000); \r",
									"\r",
									"setTimeout(function(){\r",
									"pm.environment.unset(\"current_timestamp\");\r",
									"pm.environment.unset(\"AccessToken\");\r",
									"pm.environment.unset(\"AccessToken2\");\r",
									"pm.environment.unset(\"random_number\");\r",
									"pm.environment.unset(\"PartnerName\");\r",
									"pm.environment.unset(\"MerchantContact\");\r",
									"pm.environment.unset(\"CPID\");\r",
									"pm.environment.unset(\"GetResponse_PartnerId\");\r",
									"pm.environment.unset(\"AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountId\");\r",
									"pm.environment.unset(\"random_IM\");\r",
									"pm.environment.unset(\"random_ICCID\");\r",
									"pm.environment.unset(\"ThingName\");\r",
									"pm.environment.unset(\"tid\");\r",
									"}, 45000);\r",
									"setTimeout(function(){}, 50000); "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var Username = pm.environment.get(\"Username\");\r",
									"var Password = pm.environment.get(\"Password\");\r",
									"var Username_CustomerAdmin = pm.environment.get(\"Username_CustomerAdmin\");\r",
									"var Password_CustomerAdmin = pm.environment.get(\"Password_CustomerAdmin\");\r",
									"\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"//format YYYYMMDDHHMMSSS\r",
									"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
									"// console.log('currentTmestamp',currentTmestamp);\r",
									"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- statusCodeList --------------//\r",
									"//set variable to statusCodeList JSON.parse\r",
									"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
									"//set global variable to statusCode 200\r",
									"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
									"//set global variable to statusCode 201\r",
									"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultCodeList --------------//\r",
									"//set variable to resultCodeList JSON.parse\r",
									"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
									"//set global variable to resultCode \"20000\"\r",
									"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
									"//set global variable to resultCode \"20100\"\r",
									"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionSuccessList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
									"//set global variable to resultDescription \"SignInProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
									"//set global variable to resultDescription \"CreatePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
									"//set global variable to resultDescription \"CreateAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
									"//set global variable to resultDescription \"RemovePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
									"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
									"//set global variable to resultDescription \"InquiryThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionInquiryThing\", resultDescriptionSuccessList.resultDescriptionInquiryThing);\r",
									"//---------------- HeaderList --------------//\r",
									"//set variable to HeaderList JSON.parse\r",
									"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
									"//---------------- set globals Other --------------//\r",
									"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
									"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
									"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
									"//set global variable to kbn-versio \"7.5.1\"\r",
									"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Signin_ --------------//\r",
									"//set global variable to x_ais_OrderRef \"Signin_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreatePartner --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
									"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
									"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
									"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreateAccount --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
									"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
									"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Thing --------------//\r",
									"//set global variable to x_ais_OrderRef \"InquiryThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_InquiryThing\", HeaderList.Thing.x_ais_OrderRef_InquiryThing);\r",
									"//set global variable to x_ais_OrderDesc \"InquiryThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_InquiryThing\", HeaderList.Thing.x_ais_OrderDesc_InquiryThing);\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"SignInProcess is Success\"\r",
									"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
									"//get global variable to resultDescription \"CreatePartner is Success\"\r",
									"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
									"//get global variable to resultDescription \"CreateAccount is Success\"\r",
									"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- urlRouteList --------------//\r",
									"//set variable to urlRouteList JSON.parse\r",
									"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
									"//---------------- set url Create --------------//\r",
									"//set global variable to url \"/api/v1/auth/signin\"\r",
									"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
									"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
									"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"pm.globals.set(\"urlThingCreateThing\", urlRouteList.Thing.urlThingCreateThing);\r",
									"//---------------- get url Create --------------//\r",
									"//get global variable to url \"/api/v1/auth/signin\"\r",
									"var urlSignin = pm.globals.get(\"urlSignin\");\r",
									"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
									"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"var urlThingCreateThing = pm.globals.get(\"urlThingCreateThing\");\r",
									"//---------------- set url Remove --------------//\r",
									"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
									"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Signin_ --------------//\r",
									"//get global variable to x_ais_OrderRef \"Signin_\"\r",
									"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
									"//------------------------------------------------------------//\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// Signin get token\r",
									" Signin = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSignin = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestSignin = {\r",
									"            mode: 'raw',\r",
									"            raw: \r",
									"            JSON.stringify({\r",
									"                username:Username,\r",
									"                password:Password\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsSignin = {\r",
									"            url: url + provisioningapis + urlSignin,\r",
									"            method: 'POST',\r",
									"            header: headersOptSignin,\r",
									"            body: httpRequestSignin\r",
									"        };\r",
									"        // console.log('request Signin');\r",
									"        let response = await reqPromise(optionsSignin);\r",
									"        let jsonDataSignin = await response.json();\r",
									"\r",
									"        // setAccessToken\r",
									"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
									"\r",
									"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // SignInProcess is Success\r",
									"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
									"        });\r",
									"\r",
									"        //set random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //set PartnerName\r",
									"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
									"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
									"        //set MerchantContact\r",
									"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
									"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
									"        // set CPID\r",
									"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
									"        pm.environment.set(\"CPID\", CPIDValue)\r",
									"        \r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreatePartner\r",
									" CreatePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreatePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreatePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
									"                \"PartnerType\": fieldDataValue.Partner.PartnerTypeValue, //[\"Supplier\",\"Customer\"]\r",
									"                \"PartnerDetail\": {\r",
									"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
									"                    \"CPID\": pm.environment.get(\"CPID\")\r",
									"                },\r",
									"                \"Property\": {\r",
									"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsCreatePartner = {\r",
									"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreatePartner,\r",
									"            body: httpRequestCreatePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsCreatePartner);\r",
									"        let jsonDataCreatePartner = await response.json();\r",
									"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
									"    \r",
									"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreatePartner is Success\r",
									"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
									"        });\r",
									"\r",
									"        //GetResponse_PartnerId\r",
									"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
									"\r",
									"        //Accountname\r",
									"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
									"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateAccount\r",
									" CreateAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreateAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
									"                })\r",
									"        };\r",
									"        \r",
									"        let optionsCreateAccount = {\r",
									"            url: url + provisioningapis + urlAccountCreateAccount,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateAccount,\r",
									"            body: httpRequestCreateAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateAccount');\r",
									"        let response = await reqPromise(optionsCreateAccount);\r",
									"        let jsonDataCreateAccount = await response.json();\r",
									"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
									"    \r",
									"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateAccount : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateAccount is Success\r",
									"        pm.test('CreateAccount : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
									"        });\r",
									"        // GetResponse_AccountName\r",
									"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
									"        // GetResponse_AccountId\r",
									"        pm.environment.set(\"GetResponse_AccountId\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
									"        // random_IM\r",
									"        pm.environment.set(\"random_IM\", _.random(10000000, 99999999)+\" \"+_.random(1000000, 9999999))\r",
									"        // random_ICCID\r",
									"        pm.environment.set(\"random_ICCID\", _.random(1000000, 9999999)+\" \"+_.random(100000, 999999))\r",
									"        // random_number\r",
									"        pm.environment.set(\"random_number\",pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //ThingName\r",
									"        let thingNameValue = fieldDataValue.Provisioning.Thing.ThingNameValue; // \"QAtestthing_T01\"\r",
									"        pm.environment.set(\"ThingName\", thingNameValue + pm.environment.get(\"random_number\"))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// Signin get token\r",
									" Signin2 = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSignin = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestSignin = {\r",
									"            mode: 'raw',\r",
									"            raw: \r",
									"            JSON.stringify({\r",
									"                username:Username_CustomerAdmin,\r",
									"                password:Password_CustomerAdmin\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsSignin = {\r",
									"            url: url + provisioningapis + urlSignin,\r",
									"            method: 'POST',\r",
									"            header: headersOptSignin,\r",
									"            body: httpRequestSignin\r",
									"        };\r",
									"        // console.log('request Signin');\r",
									"        let response = await reqPromise(optionsSignin);\r",
									"        let jsonDataSignin = await response.json();\r",
									"\r",
									"        // setAccessToken\r",
									"        await pm.environment.set(\"AccessToken2\" , jsonDataSignin.AccessToken);\r",
									"\r",
									"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // SignInProcess is Success\r",
									"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
									"        });\r",
									"        \r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"Signin();\r",
									"setTimeout(async function(){await CreatePartner();}, 3000); \r",
									"setTimeout(async function(){await CreateAccount();}, 6000); \r",
									"setTimeout(async function(){await Signin2();}, 7000); \r",
									"setTimeout(async function(){}, 7500);  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-ais-UserName",
								"type": "text",
								"value": "{{x_ais_UserName_AisPartner}}"
							},
							{
								"key": "x-ais-OrderRef",
								"value": "{{x_ais_OrderRef_InquiryThing}}{{current_timestamp}}"
							},
							{
								"key": "x-ais-OrderDesc",
								"type": "text",
								"value": "{{x_ais_OrderDesc_InquiryThing}}"
							},
							{
								"key": "x-ais-AccessToken",
								"value": "{{Bearer}} {{AccessToken2}}"
							},
							{
								"key": "x-ais-AccountKey",
								"type": "text",
								"value": "{{accountId_role_other}}"
							},
							{
								"key": "Accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}{{provisioningapis}}/api/v1/Thing/InquiryThing",
							"host": [
								"{{url}}{{provisioningapis}}"
							],
							"path": [
								"api",
								"v1",
								"Thing",
								"InquiryThing"
							]
						},
						"description": "Type:Desire"
					},
					"response": []
				},
				{
					"name": "InquiryThing_TST_F13_1_1_005_Success_InquiryAll_Supplier",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to x_ais_OrderRef \"InquiryThing_\"\r",
									"var x_ais_OrderRef_InquiryThing = pm.globals.get(\"x_ais_OrderRef_InquiryThing\");\r",
									"//get global variable to x_ais_OrderDesc \"InquiryThing\"\r",
									"var x_ais_OrderDesc_InquiryThing = pm.globals.get(\"x_ais_OrderDesc_InquiryThing\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get url Remove --------------//\r",
									"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
									"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"RemovePartner is Success\"\r",
									"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
									"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
									"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to resultDescription \"InquiryThing is Success\"\r",
									"var resultDescriptionInquiryThing = pm.globals.get(\"resultDescriptionInquiryThing\");\r",
									"//------------------------------------------------------------//\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"InquiryThing : Status code is \" + statusCodeSuccess, function () {\r",
									"    pm.response.to.have.status(statusCodeSuccess);\r",
									"});\r",
									"\r",
									"pm.test('InquiryThing : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeSuccess);\r",
									"});\r",
									"\r",
									"pm.test('InquiryThing : OperationStatus Description is '+'\"'+ resultDescriptionInquiryThing+'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionInquiryThing);\r",
									"});\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// RemovePartner\r",
									" RemovePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemovePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemovePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemovePartner = {\r",
									"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemovePartner,\r",
									"            body: httpRequestRemovePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request RemovePartner');\r",
									"        let response = await reqPromise(optionsRemovePartner);\r",
									"        let jsonDataRemovePartner = await response.json();\r",
									"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
									"    \r",
									"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemovePartner is Success\r",
									"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveAccount\r",
									" RemoveAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemoveAccount = {\r",
									"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveAccount,\r",
									"            body: httpRequestRemoveAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveAccount');\r",
									"        let response = await reqPromise(optionsRemoveAccount);\r",
									"        let jsonDataRemoveAccount = await response.json();\r",
									"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
									"    \r",
									"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveAccount is Success\r",
									"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"//---------------- LogDefaultValue --------------//\r",
									"//set variable to LogDefaultValue JSON.parse\r",
									"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
									"// console.log('LogDefaultValue',LogDefaultValue);\r",
									"//---------------- set globals Other --------------//\r",
									"var SearchLog = LogDefaultValue.SearchLog;\r",
									"// console.log('SearchLog',SearchLog);\r",
									"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
									"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
									"var kbn_version = SearchLog.header.kbn_version;\r",
									"var authorization = SearchLog.header.Authorization;\r",
									"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
									"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
									"var namespace = LogDefaultValue.Other.namespace;\r",
									"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
									"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
									"var header_x_ais_username = LogDefaultValue.Other.header_x_ais_username;\r",
									"var header_x_ais_accountkey = LogDefaultValue.Other.header_x_ais_accountkey;\r",
									"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
									"var methodPost = LogDefaultValue.Other.methodPost;\r",
									"\r",
									"// Detail\r",
									"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
									"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
									"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
									"\r",
									"// Summary\r",
									"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
									"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
									"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
									"\r",
									"// ProvisioningAPIs [InquiryThing]\r",
									"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
									"var cmdName = LogDefaultValue.Provisioning.Thing.cmdNameInquiryThing;\r",
									"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
									"var containerId = LogDefaultValue.Provisioning.containerId;\r",
									"var requestObjectUrlStaging = LogDefaultValue.Provisioning.Thing.requestObjectUrlInquiryThingMgStaging;\r",
									"\r",
									"// Check CDR (Summary Log) and EDR (Detail Log)\r",
									"SearchLogFindTid = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSearchLogFindTid = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = x_ais_OrderRef_InquiryThing + current_timestamp;\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\", valueSearch)\r",
									"\r",
									"        // body\r",
									"        let httpRequestSearchLogFindTid = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({ \"version\": \"true\", \"size\": 500, \"sort\": [{ \"@timestamp_es\": { \"order\": \"desc\", \"unmapped_type\": \"boolean\" } }], \"_source\": { \"excludes\": [] }, \"aggs\": { \"2\": { \"date_histogram\": { \"field\": \"@timestamp_es\", \"fixed_interval\": \"30s\", \"time_zone\": \"Asia/Bangkok\", \"min_doc_count\": 1 } } }, \"stored_fields\": [\"*\"], \"script_fields\": {}, \"docvalue_fields\": [{ \"field\": \"@timestamp_es\", \"format\": \"date_time\" }, { \"field\": \"cauldron.custom1.activityLog.endTime\", \"format\": \"date_time\" }, { \"field\": \"cauldron.custom1.activityLog.startTime\", \"format\": \"date_time\" }, { \"field\": \"time\", \"format\": \"date_time\" }], \"query\": { \"bool\": { \"must\": [], \"filter\": [{ \"multi_match\": { \"type\": \"best_fields\", \"query\": '\"' + valueSearch + '\"', \"lenient\": \"true\" } }, { \"range\": { \"@timestamp_es\": { \"format\": \"strict_date_optional_time\", \"gte\": setRangeGTE, \"lte\": setRangeLTE } } }], \"should\": [], \"must_not\": [] } }, \"highlight\": { \"pre_tags\": [\"@kibana-highlighted-field@\"], \"post_tags\": [\"@/kibana-highlighted-field@\"], \"fields\": { \"*\": {} }, \"fragment_size\": 2147483647 } })\r",
									"        };\r",
									"\r",
									"        let optionsSearchLogFindTid = {\r",
									"            url: url_staging_azure_cauldron,\r",
									"            method: 'POST',\r",
									"            header: headersOptSearchLogFindTid,\r",
									"            body: httpRequestSearchLogFindTid\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsSearchLogFindTid);\r",
									"        let jsonDataSearchLogFindTid = await response.json();\r",
									"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
									"        console.log('hits', hits)\r",
									"\r",
									"        // find tid\r",
									"        for (let i = 0; i < hits.length; i++) {\r",
									"            // let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"\r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            if (applicationNameValue == applicationName) {\r",
									"                let tid = hits[i]._source.cauldron.tid;\r",
									"                pm.environment.set(\"tid\", tid);\r",
									"                break;\r",
									"            }\r",
									"        }\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"CheckLog = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCheckLog = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = pm.environment.get(\"tid\");\r",
									"\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\", valueSearch)\r",
									"\r",
									"        // body\r",
									"        let httpRequestCheckLog = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({ \"version\": true, \"size\": 500, \"sort\": [{ \"@timestamp_es\": { \"order\": \"desc\", \"unmapped_type\": \"boolean\" } }], \"_source\": { \"excludes\": [] }, \"aggs\": { \"2\": { \"date_histogram\": { \"field\": \"@timestamp_es\", \"fixed_interval\": \"30s\", \"time_zone\": \"Asia/Bangkok\", \"min_doc_count\": 1 } } }, \"stored_fields\": [\"*\"], \"script_fields\": {}, \"docvalue_fields\": [{ \"field\": \"@timestamp_es\", \"format\": \"date_time\" }, { \"field\": \"cauldron.custom1.activityLog.endTime\", \"format\": \"date_time\" }, { \"field\": \"cauldron.custom1.activityLog.startTime\", \"format\": \"date_time\" }, { \"field\": \"time\", \"format\": \"date_time\" }], \"query\": { \"bool\": { \"must\": [], \"filter\": [{ \"multi_match\": { \"type\": \"best_fields\", \"query\": '\"' + valueSearch + '\"', \"lenient\": true } }, { \"range\": { \"@timestamp_es\": { \"format\": \"strict_date_optional_time\", \"gte\": setRangeGTE, \"lte\": setRangeLTE } } }], \"should\": [], \"must_not\": [] } }, \"highlight\": { \"pre_tags\": [\"@kibana-highlighted-field@\"], \"post_tags\": [\"@/kibana-highlighted-field@\"], \"fields\": { \"*\": {} }, \"fragment_size\": 2147483647 } })\r",
									"        };\r",
									"        let optionsCheckLog = {\r",
									"            url: url_staging_azure_cauldron,\r",
									"            method: 'POST',\r",
									"            header: headersOptCheckLog,\r",
									"            body: httpRequestCheckLog\r",
									"        };\r",
									"        let response = await reqPromise(optionsCheckLog);\r",
									"        let jsonDataCheckLog = await response.json();\r",
									"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataCheckLog.hits.hits\r",
									"        console.log('hits', hits)\r",
									"\r",
									"        // find logType\r",
									"        for (let i = 0; i < hits.length; i++) {\r",
									"            //  let logType = hits[i]._source.cauldron.logType\r",
									"            let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"\r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"\r",
									"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
									"            // console.log('resultDataLog',resultDataLog)\r",
									"\r",
									"            let tidControl = x_ais_OrderRef_InquiryThing + current_timestamp;\r",
									"            // console.log(tidControl);\r",
									"            if (applicationNameValue == applicationName) {\r",
									"\r",
									"                if (logType == logTypeSummary && applicationNameValue == applicationName) { // 'Summary' and ProvisioningAPIs\r",
									"                    pm.test(\"Check Summary Log : InquiryThing\" , function () {\r",
									"                        console.log(\"======== Check Summary Log ( Expected = Actual) [InquiryThing] ==================\");\r",
									"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
									"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
									"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeSuccess);\r",
									"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionInquiryThing);\r",
									"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
									"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
									"                        // console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
									"\r",
									"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp);\r",
									"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName);\r",
									"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeSuccess);\r",
									"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionInquiryThing);\r",
									"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp);\r",
									"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary);\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace);\r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName);\r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId);\r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
									"                        // pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
									"\r",
									"                        // check custom\r",
									"                        // \\\"custom\\\":{ \\\"endPointSummary\\\":[ { \\\"no\\\":\\\"1\\\", \\\"endPointName\\\":\\\"db.AccountsCollection\\\", \\\"responseStatus\\\":\\\"Success:InquiryAccount was successfully.\\\", \\\"processTime\\\":2.6059 }, { \\\"no\\\":\\\"2\\\", \\\"endPointName\\\":\\\"db.ThingsCollection\\\", \\\"responseStatus\\\":\\\"Success:InquiryThing was successfully.\\\", \\\"processTime\\\":4.2244 } ] }\r",
									"                        let custom = resultDataLog.custom.endPointSummary;\r",
									"                        let countCustom = custom.length;\r",
									"                       \r",
									"                        // [\"db.AccountsCollection\",\"db.ThingsCollection\"]\r",
									"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_InquiryThing;\r",
									"                        // [\"Success:InquiryAccount was successfully.\",\"Success:InquiryThing was successfully.\"]\r",
									"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_InquiryThing;\r",
									"                        let countCustomStep = dataEndPointName.length;\r",
									"\r",
									"                        console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep);\r",
									"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
									"                        \r",
									"                        for(let i=0;i<countCustomStep;i++){\r",
									"                            let no = custom[i].no;\r",
									"                            let valueEndPointName = custom[i].endPointName;\r",
									"                            let valueResponseStatus = custom[i].responseStatus;\r",
									"                            // console.log(\"i\",i);\r",
									"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
									"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
									"\r",
									"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString());\r",
									"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i]);\r",
									"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i]);\r",
									"\r",
									"                            pm.expect(no).to.eql((i+1).toString()); \r",
									"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
									"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]); \r",
									"                        }\r",
									"                    });\r",
									"                }\r",
									"\r",
									"                if (logType == logTypeDetail && applicationNameValue == applicationName) { //'Detail' and ProvisioningAPIs\r",
									"\r",
									"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
									"                    // console.log('endPointNameValue ',endPointNameValue)\r",
									"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [InquiryThing]\", function () {\r",
									"                        console.log(\"======== Check Detail Log ( Expected = Actual) [InquiryThing] ==================\");\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
									"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
									"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
									"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.custom1.activityLog.processTime + \" = \" + resultDataLog.custom1.activityLog.processTime);\r",
									"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
									"\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail);\r",
									"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail);\r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace);\r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName);\r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId);\r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime);\r",
									"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail);\r",
									"\r",
									"                        if (endPointNameValue == endPointNameProvisioningAPIs) {     //\"endPointName\":\"ProvisioningAPIs\"\r",
									"                            console.log(\"custom1.endPointName : \" + resultDataLog.custom1.endPointName + \" = \" + endPointNameProvisioningAPIs); \r",
									"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs);\r",
									"\r",
									"                            // check requestObject\r",
									"                            // \"requestObject\":\"{ \\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Thing/InquiryThing\\\", \\\"method\\\":\\\"POST\\\", \\\"headers\\\":{ \\\"x-ais-username\\\":\\\"AisPartner\\\", \\\"x-ais-orderref\\\":\\\"InquiryThing_202104081704512\\\", \\\"x-ais-orderdesc\\\":\\\"InquiryThing\\\", \\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAGUJ9zLPcvr1pAD3hVGH9ePoo/D5pkv7DQ6X3lEGyqh4UIlAkkY2KW0\\\", \\\"x-ais-accountkey\\\":\\\"606ed92063fa0e0001bf6d26\\\" }, \\\"body\\\":{ } }\"\r",
									"\r",
									"                            // \\\"requestObject\\\":\\\"{ \\\\\\\"url\\\\\\\":\\\\\\\"mg-iot.sandais.com/api/v1/Thing/InquiryThing\\\\\\\", \\\\\\\"method\\\\\\\":\\\\\\\"POST\\\\\\\", \\\\\\\"headers\\\\\\\":{ \\\\\\\"x-ais-username\\\\\\\":\\\\\\\"AisPartner\\\\\\\", \\\\\\\"x-ais-orderref\\\\\\\":\\\\\\\"InquiryThing_202105101605767\\\\\\\", \\\\\\\"x-ais-orderdesc\\\\\\\":\\\\\\\"InquiryThing\\\\\\\", \\\\\\\"x-ais-accesstoken\\\\\\\":\\\\\\\"Bearer ibnxnVhs5Rx3IwglWv7/gVA/1TpQnKqAOBAADlRDvYhOpXwmlpYOEb5yfY5aZpoj0YRWRZM26i9HOqtc1fc1jpNDOK5JpISttmMEy59g2py7nLWonDe2YW2OPRGWSowk6+9ZihLU1fZ5d5jAqqrZaKlOAAI3N1TXDNLsHuKcOJMcERbCcaMqRaku+MY4/kzE+eyIdkfwwbjT91S2VQq+Wk2ooMWuLk6/DHVJhwbMP7Y8okAOp9ce942jT9rvza3sVoQpiZlI7L1KVegMrc8SMg==\\\\\\\", \\\\\\\"x-ais-accountkey\\\\\\\":\\\\\\\"6098fa1d5316540001b19d52\\\\\\\" }, \\\\\\\"body\\\\\\\":{ } }\\\", \\\"responseObject\\\":\\\"{ \\\\\\\"ThingInfo\\\\\\\":[ ], \\\\\\\"_Metadata\\\\\\\":{ \\\\\\\"TotalCount\\\\\\\":0, \\\\\\\"Limit\\\\\\\":10000, \\\\\\\"OffSet\\\\\\\":0 }, \\\\\\\"OperationStatus\\\\\\\":{ \\\\\\\"Code\\\\\\\":\\\\\\\"20000\\\\\\\", \\\\\\\"Description\\\\\\\":\\\\\\\"InquiryThing is Success\\\\\\\" } }\\\"\r",
									"\r",
									"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
									"                            //  console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
									"\r",
									"                            let url = urlCheckLog + requestObjectUrlStaging;\r",
									"                            let x_ais_orderref = x_ais_OrderRef_InquiryThing + current_timestamp;\r",
									"                            let x_ais_orderdesc = x_ais_OrderDesc_InquiryThing;\r",
									"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken2\");\r",
									"                            let x_ais_userName = x_ais_UserName_AisPartner;\r",
									"                            let x_ais_AccountKey = pm.environment.get(\"accountId_role_other\");\r",
									"                            \r",
									"                            let body = {};\r",
									"\r",
									"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
									"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
									"                            console.log(\"headers.x_ais_userName : \" + jsonParseRequestObject.headers[header_x_ais_username] + \" = \" + x_ais_userName);\r",
									"                            console.log(\"headers.x_ais_AccountKey : \" + jsonParseRequestObject.headers[header_x_ais_accountkey] + \" = \" + x_ais_AccountKey);\r",
									"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
									"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.url).to.eql(url);\r",
									"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_username]).to.eql(x_ais_userName);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accountkey]).to.eql(x_ais_AccountKey);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
									"\r",
									"                            console.log(\"resquest.body : \" + JSON.stringify(jsonParseRequestObject.body) + \" = \" + JSON.stringify(body));\r",
									"                            pm.expect(jsonParseRequestObject.body).to.eql(body);\r",
									"\r",
									"                            // check responseObject\r",
									"                            // \"responseObject\":\"{\\\"ThingInfo\\\":[],\\\"_Metadata\\\":{\\\"TotalCount\\\":0,\\\"Limit\\\":10000,\\\"OffSet\\\":0 },\\\"OperationStatus\\\":{\\\"Code\\\":\\\"20000\\\", \\\"Description\\\":\\\"InquiryThing is Success\\\"}}\"\r",
									"\r",
									"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
									"                            // console.log('jsonParseResponseObject',jsonParseResponseObject);\r",
									"\r",
									"                            console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeSuccess);\r",
									"                            console.log(\"response.OperationStatus.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionInquiryThing); \r",
									"\r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeSuccess);\r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionInquiryThing);\r",
									"                        }\r",
									"                    });\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"setTimeout(function(){SearchLogFindTid();}, 8000); \r",
									"setTimeout(function(){CheckLog();}, 20000); \r",
									"\r",
									"setTimeout(function(){RemoveAccount();}, 30000); \r",
									"setTimeout(function(){RemovePartner();}, 40000); \r",
									"\r",
									"setTimeout(function(){\r",
									"pm.environment.unset(\"current_timestamp\");\r",
									"pm.environment.unset(\"AccessToken\");\r",
									"pm.environment.unset(\"AccessToken2\");\r",
									"pm.environment.unset(\"random_number\");\r",
									"pm.environment.unset(\"PartnerName\");\r",
									"pm.environment.unset(\"MerchantContact\");\r",
									"pm.environment.unset(\"CPID\");\r",
									"pm.environment.unset(\"GetResponse_PartnerId\");\r",
									"pm.environment.unset(\"AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountId\");\r",
									"pm.environment.unset(\"random_IM\");\r",
									"pm.environment.unset(\"random_ICCID\");\r",
									"pm.environment.unset(\"ThingName\");\r",
									"pm.environment.unset(\"tid\");\r",
									"}, 45000);\r",
									"setTimeout(function(){}, 50000); "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var Username = pm.environment.get(\"Username\");\r",
									"var Password = pm.environment.get(\"Password\");\r",
									"var Username_Supplier = pm.environment.get(\"Username_Supplier\");\r",
									"var Password_Supplier = pm.environment.get(\"Password_Supplier\");\r",
									"\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"//format YYYYMMDDHHMMSSS\r",
									"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
									"// console.log('currentTmestamp',currentTmestamp);\r",
									"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- statusCodeList --------------//\r",
									"//set variable to statusCodeList JSON.parse\r",
									"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
									"//set global variable to statusCode 200\r",
									"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
									"//set global variable to statusCode 201\r",
									"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultCodeList --------------//\r",
									"//set variable to resultCodeList JSON.parse\r",
									"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
									"//set global variable to resultCode \"20000\"\r",
									"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
									"//set global variable to resultCode \"20100\"\r",
									"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionSuccessList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
									"//set global variable to resultDescription \"SignInProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
									"//set global variable to resultDescription \"CreatePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
									"//set global variable to resultDescription \"CreateAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
									"//set global variable to resultDescription \"RemovePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
									"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
									"//set global variable to resultDescription \"InquiryThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionInquiryThing\", resultDescriptionSuccessList.resultDescriptionInquiryThing);\r",
									"//---------------- HeaderList --------------//\r",
									"//set variable to HeaderList JSON.parse\r",
									"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
									"//---------------- set globals Other --------------//\r",
									"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
									"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
									"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
									"//set global variable to kbn-versio \"7.5.1\"\r",
									"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Signin_ --------------//\r",
									"//set global variable to x_ais_OrderRef \"Signin_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreatePartner --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
									"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
									"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
									"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreateAccount --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
									"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
									"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Thing --------------//\r",
									"//set global variable to x_ais_OrderRef \"InquiryThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_InquiryThing\", HeaderList.Thing.x_ais_OrderRef_InquiryThing);\r",
									"//set global variable to x_ais_OrderDesc \"InquiryThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_InquiryThing\", HeaderList.Thing.x_ais_OrderDesc_InquiryThing);\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"SignInProcess is Success\"\r",
									"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
									"//get global variable to resultDescription \"CreatePartner is Success\"\r",
									"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
									"//get global variable to resultDescription \"CreateAccount is Success\"\r",
									"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- urlRouteList --------------//\r",
									"//set variable to urlRouteList JSON.parse\r",
									"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
									"//---------------- set url Create --------------//\r",
									"//set global variable to url \"/api/v1/auth/signin\"\r",
									"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
									"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
									"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"pm.globals.set(\"urlThingCreateThing\", urlRouteList.Thing.urlThingCreateThing);\r",
									"//---------------- get url Create --------------//\r",
									"//get global variable to url \"/api/v1/auth/signin\"\r",
									"var urlSignin = pm.globals.get(\"urlSignin\");\r",
									"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
									"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"var urlThingCreateThing = pm.globals.get(\"urlThingCreateThing\");\r",
									"//---------------- set url Remove --------------//\r",
									"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
									"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Signin_ --------------//\r",
									"//get global variable to x_ais_OrderRef \"Signin_\"\r",
									"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
									"//------------------------------------------------------------//\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// Signin get token\r",
									" Signin = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSignin = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestSignin = {\r",
									"            mode: 'raw',\r",
									"            raw: \r",
									"            JSON.stringify({\r",
									"                username:Username,\r",
									"                password:Password\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsSignin = {\r",
									"            url: url + provisioningapis + urlSignin,\r",
									"            method: 'POST',\r",
									"            header: headersOptSignin,\r",
									"            body: httpRequestSignin\r",
									"        };\r",
									"        // console.log('request Signin');\r",
									"        let response = await reqPromise(optionsSignin);\r",
									"        let jsonDataSignin = await response.json();\r",
									"\r",
									"        // setAccessToken\r",
									"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
									"\r",
									"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // SignInProcess is Success\r",
									"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
									"        });\r",
									"\r",
									"        //set random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //set PartnerName\r",
									"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
									"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
									"        //set MerchantContact\r",
									"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
									"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
									"        // set CPID\r",
									"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
									"        pm.environment.set(\"CPID\", CPIDValue)\r",
									"        \r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreatePartner\r",
									" CreatePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreatePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreatePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
									"                \"PartnerType\": fieldDataValue.Partner.PartnerTypeValue, //[\"Supplier\",\"Customer\"]\r",
									"                \"PartnerDetail\": {\r",
									"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
									"                    \"CPID\": pm.environment.get(\"CPID\")\r",
									"                },\r",
									"                \"Property\": {\r",
									"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsCreatePartner = {\r",
									"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreatePartner,\r",
									"            body: httpRequestCreatePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsCreatePartner);\r",
									"        let jsonDataCreatePartner = await response.json();\r",
									"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
									"    \r",
									"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreatePartner is Success\r",
									"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
									"        });\r",
									"\r",
									"        //GetResponse_PartnerId\r",
									"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
									"\r",
									"        //Accountname\r",
									"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
									"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateAccount\r",
									" CreateAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreateAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
									"                })\r",
									"        };\r",
									"        \r",
									"        let optionsCreateAccount = {\r",
									"            url: url + provisioningapis + urlAccountCreateAccount,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateAccount,\r",
									"            body: httpRequestCreateAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateAccount');\r",
									"        let response = await reqPromise(optionsCreateAccount);\r",
									"        let jsonDataCreateAccount = await response.json();\r",
									"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
									"    \r",
									"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateAccount : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateAccount is Success\r",
									"        pm.test('CreateAccount : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
									"        });\r",
									"        // GetResponse_AccountName\r",
									"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
									"        // GetResponse_AccountId\r",
									"        pm.environment.set(\"GetResponse_AccountId\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
									"        // random_IM\r",
									"        pm.environment.set(\"random_IM\", _.random(10000000, 99999999)+\" \"+_.random(1000000, 9999999))\r",
									"        // random_ICCID\r",
									"        pm.environment.set(\"random_ICCID\", _.random(1000000, 9999999)+\" \"+_.random(100000, 999999))\r",
									"        // random_number\r",
									"        pm.environment.set(\"random_number\",pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //ThingName\r",
									"        let thingNameValue = fieldDataValue.Provisioning.Thing.ThingNameValue; // \"QAtestthing_T01\"\r",
									"        pm.environment.set(\"ThingName\", thingNameValue + pm.environment.get(\"random_number\"))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// Signin get token\r",
									" Signin2 = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSignin = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestSignin = {\r",
									"            mode: 'raw',\r",
									"            raw: \r",
									"            JSON.stringify({\r",
									"                username:Username_Supplier,\r",
									"                password:Password_Supplier\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsSignin = {\r",
									"            url: url + provisioningapis + urlSignin,\r",
									"            method: 'POST',\r",
									"            header: headersOptSignin,\r",
									"            body: httpRequestSignin\r",
									"        };\r",
									"        // console.log('request Signin');\r",
									"        let response = await reqPromise(optionsSignin);\r",
									"        let jsonDataSignin = await response.json();\r",
									"\r",
									"        // setAccessToken\r",
									"        await pm.environment.set(\"AccessToken2\" , jsonDataSignin.AccessToken);\r",
									"\r",
									"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // SignInProcess is Success\r",
									"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
									"        });\r",
									"        \r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"Signin();\r",
									"setTimeout(async function(){await CreatePartner();}, 3000); \r",
									"setTimeout(async function(){await CreateAccount();}, 6000); \r",
									"setTimeout(async function(){await Signin2();}, 7000); \r",
									"setTimeout(async function(){}, 7500);  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-ais-UserName",
								"type": "text",
								"value": "{{x_ais_UserName_AisPartner}}"
							},
							{
								"key": "x-ais-OrderRef",
								"value": "{{x_ais_OrderRef_InquiryThing}}{{current_timestamp}}"
							},
							{
								"key": "x-ais-OrderDesc",
								"type": "text",
								"value": "{{x_ais_OrderDesc_InquiryThing}}"
							},
							{
								"key": "x-ais-AccessToken",
								"value": "{{Bearer}} {{AccessToken2}}"
							},
							{
								"key": "x-ais-AccountKey",
								"type": "text",
								"value": "{{accountId_role_other}}"
							},
							{
								"key": "Accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}{{provisioningapis}}/api/v1/Thing/InquiryThing",
							"host": [
								"{{url}}{{provisioningapis}}"
							],
							"path": [
								"api",
								"v1",
								"Thing",
								"InquiryThing"
							]
						},
						"description": "Type:Desire"
					},
					"response": []
				},
				{
					"name": "InquiryThing_TST_F13_0_2_002_Error_x_ais_AccountKeyMissing_RootAdmin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to x_ais_OrderRef \"InquiryThingfail_\"\r",
									"var x_ais_OrderRef_InquiryThing_fail = pm.globals.get(\"x_ais_OrderRef_InquiryThing_fail\");\r",
									"//get global variable to x_ais_OrderDesc \"InquiryThing\"\r",
									"var x_ais_OrderDesc_InquiryThing = pm.globals.get(\"x_ais_OrderDesc_InquiryThing\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get url Remove --------------//\r",
									"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
									"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"RemovePartner is Success\"\r",
									"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
									"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
									"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 403\r",
									"var statusCodeForbidden = pm.globals.get(\"statusCodeForbidden\");\r",
									"//get global variable to resultCode \"40300\"\r",
									"var resultCodeForbiddenMissingOrInvalidParameter = pm.globals.get(\"resultCodeForbiddenMissingOrInvalidParameter\");\r",
									"//get global variable to resultDescription \"The x_ais_AccountKey field is required.\"\r",
									"var resultDescriptionThexaisAccountKeyFieldIsRequired = pm.globals.get(\"resultDescriptionThexaisAccountKeyFieldIsRequired\");\r",
									"//------------------------------------------------------------//\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"InquiryThing : Status code is \" + statusCodeForbidden, function () {\r",
									"    pm.response.to.have.status(statusCodeForbidden);\r",
									"});\r",
									"\r",
									"pm.test('InquiryThing : OperationStatus code is '+'\"'+ resultCodeForbiddenMissingOrInvalidParameter +'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeForbiddenMissingOrInvalidParameter);\r",
									"});\r",
									"\r",
									"pm.test('InquiryThing : OperationStatus Description is '+'\"'+ resultDescriptionThexaisAccountKeyFieldIsRequired+'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionThexaisAccountKeyFieldIsRequired);\r",
									"});\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// RemovePartner\r",
									" RemovePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemovePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemovePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemovePartner = {\r",
									"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemovePartner,\r",
									"            body: httpRequestRemovePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request RemovePartner');\r",
									"        let response = await reqPromise(optionsRemovePartner);\r",
									"        let jsonDataRemovePartner = await response.json();\r",
									"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
									"    \r",
									"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemovePartner is Success\r",
									"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveAccount\r",
									" RemoveAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemoveAccount = {\r",
									"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveAccount,\r",
									"            body: httpRequestRemoveAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveAccount');\r",
									"        let response = await reqPromise(optionsRemoveAccount);\r",
									"        let jsonDataRemoveAccount = await response.json();\r",
									"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
									"    \r",
									"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveAccount is Success\r",
									"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"//---------------- LogDefaultValue --------------//\r",
									"//set variable to LogDefaultValue JSON.parse\r",
									"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
									"// console.log('LogDefaultValue',LogDefaultValue);\r",
									"//---------------- set globals Other --------------//\r",
									"var SearchLog = LogDefaultValue.SearchLog;\r",
									"// console.log('SearchLog',SearchLog);\r",
									"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
									"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
									"var kbn_version = SearchLog.header.kbn_version;\r",
									"var authorization = SearchLog.header.Authorization;\r",
									"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
									"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
									"var namespace = LogDefaultValue.Other.namespace;\r",
									"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
									"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
									"var header_x_ais_username = LogDefaultValue.Other.header_x_ais_username;\r",
									"var header_x_ais_accountkey = LogDefaultValue.Other.header_x_ais_accountkey;\r",
									"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
									"var methodPost = LogDefaultValue.Other.methodPost;\r",
									"\r",
									"// Detail\r",
									"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
									"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
									"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
									"\r",
									"// Summary\r",
									"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
									"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
									"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
									"\r",
									"// ProvisioningAPIs [InquiryThing]\r",
									"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
									"var cmdName = LogDefaultValue.Provisioning.Thing.cmdNameInquiryThing;\r",
									"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
									"var containerId = LogDefaultValue.Provisioning.containerId;\r",
									"var requestObjectUrlStaging = LogDefaultValue.Provisioning.Thing.requestObjectUrlInquiryThingMgStaging;\r",
									"\r",
									"// Check CDR (Summary Log) and EDR (Detail Log)\r",
									"SearchLogFindTid = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSearchLogFindTid = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = x_ais_OrderRef_InquiryThing_fail + current_timestamp;\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestSearchLogFindTid = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"\r",
									"        let optionsSearchLogFindTid = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptSearchLogFindTid,\r",
									"            body: httpRequestSearchLogFindTid\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsSearchLogFindTid);\r",
									"        let jsonDataSearchLogFindTid = await response.json();\r",
									"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
									"        console.log('hits',hits)\r",
									"  \r",
									"        // find tid\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            // let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"        \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            if(applicationNameValue == applicationName){\r",
									"                let tid = hits[i]._source.cauldron.tid;\r",
									"                pm.environment.set(\"tid\", tid);\r",
									"                break;\r",
									"           }\r",
									"        }\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"CheckLog = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCheckLog = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = pm.environment.get(\"tid\");\r",
									"\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestCheckLog = {\r",
									"            mode: 'raw',\r",
									"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"        let optionsCheckLog = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptCheckLog,\r",
									"            body: httpRequestCheckLog\r",
									"        }; \r",
									"        let response = await reqPromise(optionsCheckLog);\r",
									"        let jsonDataCheckLog = await response.json();\r",
									"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
									"        \r",
									"        // //200\r",
									"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });     \r",
									"        \r",
									"        let hits = jsonDataCheckLog.hits.hits\r",
									"        console.log('hits',hits)\r",
									"  \r",
									"        // find logType\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            //  let logType = hits[i]._source.cauldron.logType\r",
									"            let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"           \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            \r",
									"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
									"            // console.log('resultDataLog',resultDataLog)\r",
									"\r",
									"            let tidControl = x_ais_OrderRef_InquiryThing_fail + current_timestamp;\r",
									"            // console.log(tidControl);\r",
									"            if(applicationNameValue == applicationName){\r",
									"                 \r",
									"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ProvisioningAPIs\r",
									"                    pm.test(\"Check Summary Log : InquiryThing\" , function () {\r",
									"                        console.log(\"======== Check Summary Log ( Expected = Actual) [InquiryThing] ==================\");\r",
									"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
									"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
									"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeForbiddenMissingOrInvalidParameter);\r",
									"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionThexaisAccountKeyFieldIsRequired);\r",
									"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
									"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
									"                        console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
									"\r",
									"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
									"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
									"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeForbiddenMissingOrInvalidParameter); \r",
									"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionThexaisAccountKeyFieldIsRequired); \r",
									"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
									"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
									"                        pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
									"                    }); \r",
									"                }\r",
									"\r",
									"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ProvisioningAPIs\r",
									"\r",
									"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
									"                    // console.log('endPointNameValue ',endPointNameValue)\r",
									"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [InquiryThing]\", function () {\r",
									"                        console.log(\"======== Check Detail Log ( Expected = Actual) [InquiryThing] ==================\");\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
									"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
									"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
									"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.custom1.activityLog.processTime + \" = \" + resultDataLog.custom1.activityLog.processTime);\r",
									"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
									"\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
									"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
									"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
									"\r",
									"                        if( endPointNameValue == endPointNameProvisioningAPIs){     //\"endPointName\":\"ProvisioningAPIs\"\r",
									"                            console.log(\"custom1.endPointName : \" + resultDataLog.custom1.endPointName + \" = \" + endPointNameProvisioningAPIs); \r",
									"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs); \r",
									"                        \r",
									"                            // check requestObject\r",
									"                            // \"requestObject\":\"{ \\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Thing/InquiryThing\\\", \\\"method\\\":\\\"POST\\\", \\\"headers\\\":{ \\\"x-ais-username\\\":\\\"AisPartner\\\", \\\"x-ais-orderref\\\":\\\"InquiryThingfail_202104081804899\\\", \\\"x-ais-orderdesc\\\":\\\"InquiryThing\\\", \\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAGUJ9zLPcvr1os2Lti77YL+R7DkbdGIvnavuC4tlIIbY0IlAkkY2KW0\\\" }, \\\"body\\\":{ } }\"\r",
									"\r",
									"                            // \\\"requestObject\\\":\\\"{ \\\\\\\"url\\\\\\\":\\\\\\\"mg-iot.sandais.com/api/v1/Thing/InquiryThing\\\\\\\", \\\\\\\"method\\\\\\\":\\\\\\\"POST\\\\\\\", \\\\\\\"headers\\\\\\\":{ \\\\\\\"x-ais-username\\\\\\\":\\\\\\\"AisPartner\\\\\\\", \\\\\\\"x-ais-orderref\\\\\\\":\\\\\\\"InquiryThingfail_202105101605949\\\\\\\", \\\\\\\"x-ais-orderdesc\\\\\\\":\\\\\\\"InquiryThing\\\\\\\", \\\\\\\"x-ais-accesstoken\\\\\\\":\\\\\\\"Bearer ibnxnVhs5Rx3IwglWv7/gVA/1TpQnKqAOBAADlRDvYhOpXwmlpYOEb5yfY5aZpoj0YRWRZM26i9HOqtc1fc1jpNDOK5JpISttmMEy59g2py7nLWonDe2YW2OPRGWSowk6+9ZihLU1fZ5d5jAqqrZaKlOAAI3N1TXDNLsHuKcOJMcERbCcaMqRaku+MY4/kzE+eyIdkfwwbjT91S2VQq+Wk2ooMWuLk6/DHVJhwbMP7YhB7x2MeVVLfjX2r/BuUejispzLsHuXUlKVegMrc8SMg==\\\\\\\" }, \\\\\\\"body\\\\\\\":{ } }\\\"\r",
									"                            \r",
									"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
									"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
									"                            \r",
									"                            let url = urlCheckLog + requestObjectUrlStaging;\r",
									"                            let x_ais_orderref = x_ais_OrderRef_InquiryThing_fail + current_timestamp;\r",
									"                            let x_ais_orderdesc = x_ais_OrderDesc_InquiryThing;\r",
									"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken\");\r",
									"                            let x_ais_userName = x_ais_UserName_AisPartner;\r",
									"                            // let x_ais_AccountKey = pm.environment.get(\"GetResponse_AccountId\");\r",
									"                            \r",
									"                            let body = {};\r",
									"\r",
									"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
									"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
									"                            console.log(\"headers.x_ais_userName : \" + jsonParseRequestObject.headers[header_x_ais_username] + \" = \" + x_ais_userName);\r",
									"                            // console.log(\"headers.x_ais_AccountKey : \" + jsonParseRequestObject.headers[header_x_ais_accountkey] + \" = \" + x_ais_AccountKey);\r",
									"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
									"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.url).to.eql(url);\r",
									"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_username]).to.eql(x_ais_userName);\r",
									"                            // pm.expect(jsonParseRequestObject.headers[header_x_ais_accountkey]).to.eql(x_ais_AccountKey);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
									"\r",
									"                            console.log(\"resquest.body : \" + JSON.stringify(jsonParseRequestObject.body) + \" = \" + JSON.stringify(body));\r",
									"                            pm.expect(jsonParseRequestObject.body).to.eql(body);\r",
									"                            \r",
									"                            // check responseObject\r",
									"                            // \"responseObject\":\"{ \\\"OperationStatus\\\":{ \\\"Code\\\":\\\"40300\\\", \\\"Description\\\":\\\"The x_ais_AccountKey field is required.\\\" } }\"\r",
									"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
									"                            // console.log('jsonParseResponseObject',jsonParseResponseObject);  \r",
									"\r",
									"                            console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeForbiddenMissingOrInvalidParameter);\r",
									"                            console.log(\"response.OperationStatus.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionThexaisAccountKeyFieldIsRequired); \r",
									"\r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeForbiddenMissingOrInvalidParameter);  \r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionThexaisAccountKeyFieldIsRequired);  \r",
									"                        }\r",
									"\r",
									"                    }); \r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"setTimeout(function(){SearchLogFindTid();}, 8000); \r",
									"setTimeout(function(){CheckLog();}, 20000); \r",
									"\r",
									"setTimeout(function(){RemoveAccount();}, 30000); \r",
									"setTimeout(function(){RemovePartner();}, 40000); \r",
									"\r",
									"setTimeout(function(){\r",
									"pm.environment.unset(\"current_timestamp\");\r",
									"pm.environment.unset(\"AccessToken\");\r",
									"pm.environment.unset(\"random_number\");\r",
									"pm.environment.unset(\"PartnerName\");\r",
									"pm.environment.unset(\"MerchantContact\");\r",
									"pm.environment.unset(\"CPID\");\r",
									"pm.environment.unset(\"GetResponse_PartnerId\");\r",
									"pm.environment.unset(\"AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountId\");\r",
									"pm.environment.unset(\"random_IM\");\r",
									"pm.environment.unset(\"random_ICCID\");\r",
									"pm.environment.unset(\"ThingName\");\r",
									"pm.environment.unset(\"tid\");\r",
									"}, 45000);\r",
									"setTimeout(function(){}, 50000); "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var Username = pm.environment.get(\"Username\");\r",
									"var Password = pm.environment.get(\"Password\");\r",
									"\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"//format YYYYMMDDHHMMSSS\r",
									"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
									"// console.log('currentTmestamp',currentTmestamp);\r",
									"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- statusCodeList --------------//\r",
									"//set variable to statusCodeList JSON.parse\r",
									"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
									"//set global variable to statusCode 200\r",
									"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
									"//set global variable to statusCode 201\r",
									"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
									"//set global variable to statusCode 403\r",
									"pm.globals.set(\"statusCodeForbidden\", statusCodeList.statusCodeForbidden);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultCodeList --------------//\r",
									"//set variable to resultCodeList JSON.parse\r",
									"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
									"//set global variable to resultCode \"20000\"\r",
									"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
									"//set global variable to resultCode \"20100\"\r",
									"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
									"//set global variable to resultCode \"40300\"\r",
									"pm.globals.set(\"resultCodeForbiddenMissingOrInvalidParameter\", resultCodeList.resultCodeForbiddenMissingOrInvalidParameter);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionSuccessList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
									"//set global variable to resultDescription \"SignInProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
									"//set global variable to resultDescription \"CreatePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
									"//set global variable to resultDescription \"CreateAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
									"//set global variable to resultDescription \"RemovePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
									"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionErrorList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
									"//set global variable to resultDescription \"The x_ais_AccountKey field is required.\"\r",
									"pm.globals.set(\"resultDescriptionThexaisAccountKeyFieldIsRequired\", resultDescriptionErrorList.resultDescriptionThexaisAccountKeyFieldIsRequired);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- HeaderList --------------//\r",
									"//set variable to HeaderList JSON.parse\r",
									"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
									"//---------------- set globals Other --------------//\r",
									"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
									"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
									"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
									"//set global variable to kbn-versio \"7.5.1\"\r",
									"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Signin_ --------------//\r",
									"//set global variable to x_ais_OrderRef \"Signin_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreatePartner --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
									"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
									"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
									"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreateAccount --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
									"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
									"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Thing --------------//\r",
									"//set global variable to x_ais_OrderRef \"InquiryThingfail_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_InquiryThing_fail\", HeaderList.Thing.x_ais_OrderRef_InquiryThing_fail);\r",
									"//set global variable to x_ais_OrderDesc \"InquiryThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_InquiryThing\", HeaderList.Thing.x_ais_OrderDesc_InquiryThing);\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"SignInProcess is Success\"\r",
									"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
									"//get global variable to resultDescription \"CreatePartner is Success\"\r",
									"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
									"//get global variable to resultDescription \"CreateAccount is Success\"\r",
									"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- urlRouteList --------------//\r",
									"//set variable to urlRouteList JSON.parse\r",
									"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
									"//---------------- set url Create --------------//\r",
									"//set global variable to url \"/api/v1/auth/signin\"\r",
									"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
									"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
									"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
									"//---------------- get url Create --------------//\r",
									"//get global variable to url \"/api/v1/auth/signin\"\r",
									"var urlSignin = pm.globals.get(\"urlSignin\");\r",
									"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
									"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
									"//---------------- set url Remove --------------//\r",
									"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
									"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Signin_ --------------//\r",
									"//get global variable to x_ais_OrderRef \"Signin_\"\r",
									"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
									"//------------------------------------------------------------//\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// Signin get token\r",
									" Signin = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSignin = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestSignin = {\r",
									"            mode: 'raw',\r",
									"            raw: \r",
									"            JSON.stringify({\r",
									"                username:Username,\r",
									"                password:Password\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsSignin = {\r",
									"            url: url + provisioningapis + urlSignin,\r",
									"            method: 'POST',\r",
									"            header: headersOptSignin,\r",
									"            body: httpRequestSignin\r",
									"        };\r",
									"        // console.log('request Signin');\r",
									"        let response = await reqPromise(optionsSignin);\r",
									"        let jsonDataSignin = await response.json();\r",
									"\r",
									"        // setAccessToken\r",
									"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
									"\r",
									"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // SignInProcess is Success\r",
									"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
									"        });\r",
									"\r",
									"        //set random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //set PartnerName\r",
									"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
									"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
									"        //set MerchantContact\r",
									"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
									"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
									"        // set CPID\r",
									"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
									"        pm.environment.set(\"CPID\", CPIDValue)\r",
									"        \r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreatePartner\r",
									" CreatePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreatePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreatePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
									"                \"PartnerType\": fieldDataValue.Partner.PartnerTypeValue, //[\"Supplier\",\"Customer\"]\r",
									"                \"PartnerDetail\": {\r",
									"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
									"                    \"CPID\": pm.environment.get(\"CPID\")\r",
									"                },\r",
									"                \"Property\": {\r",
									"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsCreatePartner = {\r",
									"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreatePartner,\r",
									"            body: httpRequestCreatePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsCreatePartner);\r",
									"        let jsonDataCreatePartner = await response.json();\r",
									"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
									"    \r",
									"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreatePartner is Success\r",
									"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
									"        });\r",
									"\r",
									"        //GetResponse_PartnerId\r",
									"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
									"\r",
									"        //Accountname\r",
									"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
									"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateAccount\r",
									" CreateAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreateAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
									"                })\r",
									"        };\r",
									"        \r",
									"        let optionsCreateAccount = {\r",
									"            url: url + provisioningapis + urlAccountCreateAccount,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateAccount,\r",
									"            body: httpRequestCreateAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateAccount');\r",
									"        let response = await reqPromise(optionsCreateAccount);\r",
									"        let jsonDataCreateAccount = await response.json();\r",
									"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
									"    \r",
									"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateAccount : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateAccount is Success\r",
									"        pm.test('CreateAccount : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
									"        });\r",
									"        // GetResponse_AccountName\r",
									"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
									"        // GetResponse_AccountId\r",
									"        pm.environment.set(\"GetResponse_AccountId\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
									"        // random_IM\r",
									"        pm.environment.set(\"random_IM\", _.random(10000000, 99999999)+\" \"+_.random(1000000, 9999999))\r",
									"        // random_ICCID\r",
									"        pm.environment.set(\"random_ICCID\", _.random(1000000, 9999999)+\" \"+_.random(100000, 999999))\r",
									"        // random_number\r",
									"        pm.environment.set(\"random_number\",pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //ThingName\r",
									"        let thingNameValue = fieldDataValue.Provisioning.Thing.ThingNameValue; // \"QAtestthing_T01\"\r",
									"        pm.environment.set(\"ThingName\", thingNameValue + pm.environment.get(\"random_number\"))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"\r",
									"Signin();\r",
									"setTimeout(async function(){await CreatePartner();}, 3000); \r",
									"setTimeout(async function(){await CreateAccount();}, 6000); \r",
									"setTimeout(async function(){}, 6500);   "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-ais-UserName",
								"type": "text",
								"value": "{{x_ais_UserName_AisPartner}}"
							},
							{
								"key": "x-ais-OrderRef",
								"value": "{{x_ais_OrderRef_InquiryThing_fail}}{{current_timestamp}}"
							},
							{
								"key": "x-ais-OrderDesc",
								"type": "text",
								"value": "{{x_ais_OrderDesc_InquiryThing}}"
							},
							{
								"key": "x-ais-AccessToken",
								"value": "{{Bearer}} {{AccessToken}}"
							},
							{
								"key": "Accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-ais-AccountKey",
								"type": "text",
								"value": "{{GetResponse_AccountId}}",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}{{provisioningapis}}/api/v1/Thing/InquiryThing",
							"host": [
								"{{url}}{{provisioningapis}}"
							],
							"path": [
								"api",
								"v1",
								"Thing",
								"InquiryThing"
							]
						},
						"description": "Type:Desire"
					},
					"response": []
				},
				{
					"name": "InquiryThing_TST_F13_1_1_006_Success_InquiryAll_Customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to x_ais_OrderRef \"InquiryThing_\"\r",
									"var x_ais_OrderRef_InquiryThing = pm.globals.get(\"x_ais_OrderRef_InquiryThing\");\r",
									"//get global variable to x_ais_OrderDesc \"InquiryThing\"\r",
									"var x_ais_OrderDesc_InquiryThing = pm.globals.get(\"x_ais_OrderDesc_InquiryThing\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get url Remove --------------//\r",
									"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
									"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"RemovePartner is Success\"\r",
									"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
									"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
									"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to resultDescription \"InquiryThing is Success\"\r",
									"var resultDescriptionInquiryThing = pm.globals.get(\"resultDescriptionInquiryThing\");\r",
									"//------------------------------------------------------------//\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"InquiryThing : Status code is \" + statusCodeSuccess, function () {\r",
									"    pm.response.to.have.status(statusCodeSuccess);\r",
									"});\r",
									"\r",
									"pm.test('InquiryThing : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeSuccess);\r",
									"});\r",
									"\r",
									"pm.test('InquiryThing : OperationStatus Description is '+'\"'+ resultDescriptionInquiryThing+'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionInquiryThing);\r",
									"});\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// RemovePartner\r",
									" RemovePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemovePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemovePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemovePartner = {\r",
									"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemovePartner,\r",
									"            body: httpRequestRemovePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request RemovePartner');\r",
									"        let response = await reqPromise(optionsRemovePartner);\r",
									"        let jsonDataRemovePartner = await response.json();\r",
									"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
									"    \r",
									"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemovePartner is Success\r",
									"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveAccount\r",
									" RemoveAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemoveAccount = {\r",
									"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveAccount,\r",
									"            body: httpRequestRemoveAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveAccount');\r",
									"        let response = await reqPromise(optionsRemoveAccount);\r",
									"        let jsonDataRemoveAccount = await response.json();\r",
									"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
									"    \r",
									"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveAccount is Success\r",
									"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"//---------------- LogDefaultValue --------------//\r",
									"//set variable to LogDefaultValue JSON.parse\r",
									"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
									"// console.log('LogDefaultValue',LogDefaultValue);\r",
									"//---------------- set globals Other --------------//\r",
									"var SearchLog = LogDefaultValue.SearchLog;\r",
									"// console.log('SearchLog',SearchLog);\r",
									"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
									"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
									"var kbn_version = SearchLog.header.kbn_version;\r",
									"var authorization = SearchLog.header.Authorization;\r",
									"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
									"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
									"var namespace = LogDefaultValue.Other.namespace;\r",
									"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
									"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
									"var header_x_ais_username = LogDefaultValue.Other.header_x_ais_username;\r",
									"var header_x_ais_accountkey = LogDefaultValue.Other.header_x_ais_accountkey;\r",
									"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
									"var methodPost = LogDefaultValue.Other.methodPost;\r",
									"\r",
									"// Detail\r",
									"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
									"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
									"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
									"\r",
									"// Summary\r",
									"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
									"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
									"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
									"\r",
									"// ProvisioningAPIs [InquiryThing]\r",
									"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
									"var cmdName = LogDefaultValue.Provisioning.Thing.cmdNameInquiryThing;\r",
									"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
									"var containerId = LogDefaultValue.Provisioning.containerId;\r",
									"var requestObjectUrlStaging = LogDefaultValue.Provisioning.Thing.requestObjectUrlInquiryThingMgStaging;\r",
									"\r",
									"// Check CDR (Summary Log) and EDR (Detail Log)\r",
									"SearchLogFindTid = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSearchLogFindTid = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = x_ais_OrderRef_InquiryThing + current_timestamp;\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\", valueSearch)\r",
									"\r",
									"        // body\r",
									"        let httpRequestSearchLogFindTid = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({ \"version\": \"true\", \"size\": 500, \"sort\": [{ \"@timestamp_es\": { \"order\": \"desc\", \"unmapped_type\": \"boolean\" } }], \"_source\": { \"excludes\": [] }, \"aggs\": { \"2\": { \"date_histogram\": { \"field\": \"@timestamp_es\", \"fixed_interval\": \"30s\", \"time_zone\": \"Asia/Bangkok\", \"min_doc_count\": 1 } } }, \"stored_fields\": [\"*\"], \"script_fields\": {}, \"docvalue_fields\": [{ \"field\": \"@timestamp_es\", \"format\": \"date_time\" }, { \"field\": \"cauldron.custom1.activityLog.endTime\", \"format\": \"date_time\" }, { \"field\": \"cauldron.custom1.activityLog.startTime\", \"format\": \"date_time\" }, { \"field\": \"time\", \"format\": \"date_time\" }], \"query\": { \"bool\": { \"must\": [], \"filter\": [{ \"multi_match\": { \"type\": \"best_fields\", \"query\": '\"' + valueSearch + '\"', \"lenient\": \"true\" } }, { \"range\": { \"@timestamp_es\": { \"format\": \"strict_date_optional_time\", \"gte\": setRangeGTE, \"lte\": setRangeLTE } } }], \"should\": [], \"must_not\": [] } }, \"highlight\": { \"pre_tags\": [\"@kibana-highlighted-field@\"], \"post_tags\": [\"@/kibana-highlighted-field@\"], \"fields\": { \"*\": {} }, \"fragment_size\": 2147483647 } })\r",
									"        };\r",
									"\r",
									"        let optionsSearchLogFindTid = {\r",
									"            url: url_staging_azure_cauldron,\r",
									"            method: 'POST',\r",
									"            header: headersOptSearchLogFindTid,\r",
									"            body: httpRequestSearchLogFindTid\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsSearchLogFindTid);\r",
									"        let jsonDataSearchLogFindTid = await response.json();\r",
									"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
									"        console.log('hits', hits)\r",
									"\r",
									"        // find tid\r",
									"        for (let i = 0; i < hits.length; i++) {\r",
									"            // let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"\r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            if (applicationNameValue == applicationName) {\r",
									"                let tid = hits[i]._source.cauldron.tid;\r",
									"                pm.environment.set(\"tid\", tid);\r",
									"                break;\r",
									"            }\r",
									"        }\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"CheckLog = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCheckLog = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = pm.environment.get(\"tid\");\r",
									"\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\", valueSearch)\r",
									"\r",
									"        // body\r",
									"        let httpRequestCheckLog = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({ \"version\": true, \"size\": 500, \"sort\": [{ \"@timestamp_es\": { \"order\": \"desc\", \"unmapped_type\": \"boolean\" } }], \"_source\": { \"excludes\": [] }, \"aggs\": { \"2\": { \"date_histogram\": { \"field\": \"@timestamp_es\", \"fixed_interval\": \"30s\", \"time_zone\": \"Asia/Bangkok\", \"min_doc_count\": 1 } } }, \"stored_fields\": [\"*\"], \"script_fields\": {}, \"docvalue_fields\": [{ \"field\": \"@timestamp_es\", \"format\": \"date_time\" }, { \"field\": \"cauldron.custom1.activityLog.endTime\", \"format\": \"date_time\" }, { \"field\": \"cauldron.custom1.activityLog.startTime\", \"format\": \"date_time\" }, { \"field\": \"time\", \"format\": \"date_time\" }], \"query\": { \"bool\": { \"must\": [], \"filter\": [{ \"multi_match\": { \"type\": \"best_fields\", \"query\": '\"' + valueSearch + '\"', \"lenient\": true } }, { \"range\": { \"@timestamp_es\": { \"format\": \"strict_date_optional_time\", \"gte\": setRangeGTE, \"lte\": setRangeLTE } } }], \"should\": [], \"must_not\": [] } }, \"highlight\": { \"pre_tags\": [\"@kibana-highlighted-field@\"], \"post_tags\": [\"@/kibana-highlighted-field@\"], \"fields\": { \"*\": {} }, \"fragment_size\": 2147483647 } })\r",
									"        };\r",
									"        let optionsCheckLog = {\r",
									"            url: url_staging_azure_cauldron,\r",
									"            method: 'POST',\r",
									"            header: headersOptCheckLog,\r",
									"            body: httpRequestCheckLog\r",
									"        };\r",
									"        let response = await reqPromise(optionsCheckLog);\r",
									"        let jsonDataCheckLog = await response.json();\r",
									"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataCheckLog.hits.hits\r",
									"        console.log('hits', hits)\r",
									"\r",
									"        // find logType\r",
									"        for (let i = 0; i < hits.length; i++) {\r",
									"            //  let logType = hits[i]._source.cauldron.logType\r",
									"            let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"\r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"\r",
									"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
									"            // console.log('resultDataLog',resultDataLog)\r",
									"\r",
									"            let tidControl = x_ais_OrderRef_InquiryThing + current_timestamp;\r",
									"            // console.log(tidControl);\r",
									"            if (applicationNameValue == applicationName) {\r",
									"\r",
									"                if (logType == logTypeSummary && applicationNameValue == applicationName) { // 'Summary' and ProvisioningAPIs\r",
									"                    pm.test(\"Check Summary Log : InquiryThing\" , function () {\r",
									"                        console.log(\"======== Check Summary Log ( Expected = Actual) [InquiryThing] ==================\");\r",
									"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
									"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
									"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeSuccess);\r",
									"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionInquiryThing);\r",
									"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
									"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
									"                        // console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
									"\r",
									"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp);\r",
									"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName);\r",
									"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeSuccess);\r",
									"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionInquiryThing);\r",
									"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp);\r",
									"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary);\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace);\r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName);\r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId);\r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
									"                        // pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
									"\r",
									"                        // check custom\r",
									"                        // \\\"custom\\\":{ \\\"endPointSummary\\\":[ { \\\"no\\\":\\\"1\\\", \\\"endPointName\\\":\\\"db.AccountsCollection\\\", \\\"responseStatus\\\":\\\"Success:InquiryAccount was successfully.\\\", \\\"processTime\\\":2.6059 }, { \\\"no\\\":\\\"2\\\", \\\"endPointName\\\":\\\"db.ThingsCollection\\\", \\\"responseStatus\\\":\\\"Success:InquiryThing was successfully.\\\", \\\"processTime\\\":4.2244 } ] }\r",
									"                        let custom = resultDataLog.custom.endPointSummary;\r",
									"                        let countCustom = custom.length;\r",
									"                       \r",
									"                        // [\"db.AccountsCollection\",\"db.ThingsCollection\"]\r",
									"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_InquiryThing;\r",
									"                        // [\"Success:InquiryAccount was successfully.\",\"Success:InquiryThing was successfully.\"]\r",
									"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_InquiryThing;\r",
									"                        let countCustomStep = dataEndPointName.length;\r",
									"\r",
									"                        console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep);\r",
									"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
									"                        \r",
									"                        for(let i=0;i<countCustomStep;i++){\r",
									"                            let no = custom[i].no;\r",
									"                            let valueEndPointName = custom[i].endPointName;\r",
									"                            let valueResponseStatus = custom[i].responseStatus;\r",
									"                            // console.log(\"i\",i);\r",
									"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
									"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
									"\r",
									"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString());\r",
									"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i]);\r",
									"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i]);\r",
									"\r",
									"                            pm.expect(no).to.eql((i+1).toString()); \r",
									"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
									"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]); \r",
									"                        }\r",
									"                    });\r",
									"                }\r",
									"\r",
									"                if (logType == logTypeDetail && applicationNameValue == applicationName) { //'Detail' and ProvisioningAPIs\r",
									"\r",
									"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
									"                    // console.log('endPointNameValue ',endPointNameValue)\r",
									"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [InquiryThing]\", function () {\r",
									"                        console.log(\"======== Check Detail Log ( Expected = Actual) [InquiryThing] ==================\");\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
									"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
									"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
									"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.custom1.activityLog.processTime + \" = \" + resultDataLog.custom1.activityLog.processTime);\r",
									"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
									"\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail);\r",
									"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail);\r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace);\r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName);\r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId);\r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime);\r",
									"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail);\r",
									"\r",
									"                        if (endPointNameValue == endPointNameProvisioningAPIs) {     //\"endPointName\":\"ProvisioningAPIs\"\r",
									"                            console.log(\"custom1.endPointName : \" + resultDataLog.custom1.endPointName + \" = \" + endPointNameProvisioningAPIs); \r",
									"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs);\r",
									"\r",
									"                            // check requestObject\r",
									"                            // \"requestObject\":\"{ \\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Thing/InquiryThing\\\", \\\"method\\\":\\\"POST\\\", \\\"headers\\\":{ \\\"x-ais-username\\\":\\\"AisPartner\\\", \\\"x-ais-orderref\\\":\\\"InquiryThing_202104081704512\\\", \\\"x-ais-orderdesc\\\":\\\"InquiryThing\\\", \\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAGUJ9zLPcvr1pAD3hVGH9ePoo/D5pkv7DQ6X3lEGyqh4UIlAkkY2KW0\\\", \\\"x-ais-accountkey\\\":\\\"606ed92063fa0e0001bf6d26\\\" }, \\\"body\\\":{ } }\"\r",
									"\r",
									"                            // \\\"requestObject\\\":\\\"{ \\\\\\\"url\\\\\\\":\\\\\\\"mg-iot.sandais.com/api/v1/Thing/InquiryThing\\\\\\\", \\\\\\\"method\\\\\\\":\\\\\\\"POST\\\\\\\", \\\\\\\"headers\\\\\\\":{ \\\\\\\"x-ais-username\\\\\\\":\\\\\\\"AisPartner\\\\\\\", \\\\\\\"x-ais-orderref\\\\\\\":\\\\\\\"InquiryThing_202105101605767\\\\\\\", \\\\\\\"x-ais-orderdesc\\\\\\\":\\\\\\\"InquiryThing\\\\\\\", \\\\\\\"x-ais-accesstoken\\\\\\\":\\\\\\\"Bearer ibnxnVhs5Rx3IwglWv7/gVA/1TpQnKqAOBAADlRDvYhOpXwmlpYOEb5yfY5aZpoj0YRWRZM26i9HOqtc1fc1jpNDOK5JpISttmMEy59g2py7nLWonDe2YW2OPRGWSowk6+9ZihLU1fZ5d5jAqqrZaKlOAAI3N1TXDNLsHuKcOJMcERbCcaMqRaku+MY4/kzE+eyIdkfwwbjT91S2VQq+Wk2ooMWuLk6/DHVJhwbMP7Y8okAOp9ce942jT9rvza3sVoQpiZlI7L1KVegMrc8SMg==\\\\\\\", \\\\\\\"x-ais-accountkey\\\\\\\":\\\\\\\"6098fa1d5316540001b19d52\\\\\\\" }, \\\\\\\"body\\\\\\\":{ } }\\\", \\\"responseObject\\\":\\\"{ \\\\\\\"ThingInfo\\\\\\\":[ ], \\\\\\\"_Metadata\\\\\\\":{ \\\\\\\"TotalCount\\\\\\\":0, \\\\\\\"Limit\\\\\\\":10000, \\\\\\\"OffSet\\\\\\\":0 }, \\\\\\\"OperationStatus\\\\\\\":{ \\\\\\\"Code\\\\\\\":\\\\\\\"20000\\\\\\\", \\\\\\\"Description\\\\\\\":\\\\\\\"InquiryThing is Success\\\\\\\" } }\\\"\r",
									"\r",
									"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
									"                            //  console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
									"\r",
									"                            let url = urlCheckLog + requestObjectUrlStaging;\r",
									"                            let x_ais_orderref = x_ais_OrderRef_InquiryThing + current_timestamp;\r",
									"                            let x_ais_orderdesc = x_ais_OrderDesc_InquiryThing;\r",
									"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken2\");\r",
									"                            let x_ais_userName = x_ais_UserName_AisPartner;\r",
									"                            let x_ais_AccountKey = pm.environment.get(\"accountId_role_other\");\r",
									"                            \r",
									"                            let body = {};\r",
									"\r",
									"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
									"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
									"                            console.log(\"headers.x_ais_userName : \" + jsonParseRequestObject.headers[header_x_ais_username] + \" = \" + x_ais_userName);\r",
									"                            console.log(\"headers.x_ais_AccountKey : \" + jsonParseRequestObject.headers[header_x_ais_accountkey] + \" = \" + x_ais_AccountKey);\r",
									"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
									"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.url).to.eql(url);\r",
									"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_username]).to.eql(x_ais_userName);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accountkey]).to.eql(x_ais_AccountKey);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
									"\r",
									"                            console.log(\"resquest.body : \" + JSON.stringify(jsonParseRequestObject.body) + \" = \" + JSON.stringify(body));\r",
									"                            pm.expect(jsonParseRequestObject.body).to.eql(body);\r",
									"\r",
									"                            // check responseObject\r",
									"                            // \"responseObject\":\"{\\\"ThingInfo\\\":[],\\\"_Metadata\\\":{\\\"TotalCount\\\":0,\\\"Limit\\\":10000,\\\"OffSet\\\":0 },\\\"OperationStatus\\\":{\\\"Code\\\":\\\"20000\\\", \\\"Description\\\":\\\"InquiryThing is Success\\\"}}\"\r",
									"\r",
									"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
									"                            // console.log('jsonParseResponseObject',jsonParseResponseObject);\r",
									"\r",
									"                            console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeSuccess);\r",
									"                            console.log(\"response.OperationStatus.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionInquiryThing); \r",
									"\r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeSuccess);\r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionInquiryThing);\r",
									"                        }\r",
									"                    });\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"setTimeout(function(){SearchLogFindTid();}, 8000); \r",
									"setTimeout(function(){CheckLog();}, 20000); \r",
									"\r",
									"setTimeout(function(){RemoveAccount();}, 30000); \r",
									"setTimeout(function(){RemovePartner();}, 40000); \r",
									"\r",
									"setTimeout(function(){\r",
									"pm.environment.unset(\"current_timestamp\");\r",
									"pm.environment.unset(\"AccessToken\");\r",
									"pm.environment.unset(\"AccessToken2\");\r",
									"pm.environment.unset(\"random_number\");\r",
									"pm.environment.unset(\"PartnerName\");\r",
									"pm.environment.unset(\"MerchantContact\");\r",
									"pm.environment.unset(\"CPID\");\r",
									"pm.environment.unset(\"GetResponse_PartnerId\");\r",
									"pm.environment.unset(\"AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountId\");\r",
									"pm.environment.unset(\"random_IM\");\r",
									"pm.environment.unset(\"random_ICCID\");\r",
									"pm.environment.unset(\"ThingName\");\r",
									"pm.environment.unset(\"tid\");\r",
									"}, 45000);\r",
									"setTimeout(function(){}, 50000); "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var Username = pm.environment.get(\"Username\");\r",
									"var Password = pm.environment.get(\"Password\");\r",
									"var Username_Customer = pm.environment.get(\"Username_Customer\");\r",
									"var Password_Customer = pm.environment.get(\"Password_Customer\");\r",
									"\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"//format YYYYMMDDHHMMSSS\r",
									"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
									"// console.log('currentTmestamp',currentTmestamp);\r",
									"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- statusCodeList --------------//\r",
									"//set variable to statusCodeList JSON.parse\r",
									"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
									"//set global variable to statusCode 200\r",
									"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
									"//set global variable to statusCode 201\r",
									"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultCodeList --------------//\r",
									"//set variable to resultCodeList JSON.parse\r",
									"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
									"//set global variable to resultCode \"20000\"\r",
									"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
									"//set global variable to resultCode \"20100\"\r",
									"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionSuccessList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
									"//set global variable to resultDescription \"SignInProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
									"//set global variable to resultDescription \"CreatePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
									"//set global variable to resultDescription \"CreateAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
									"//set global variable to resultDescription \"RemovePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
									"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
									"//set global variable to resultDescription \"InquiryThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionInquiryThing\", resultDescriptionSuccessList.resultDescriptionInquiryThing);\r",
									"//---------------- HeaderList --------------//\r",
									"//set variable to HeaderList JSON.parse\r",
									"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
									"//---------------- set globals Other --------------//\r",
									"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
									"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
									"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
									"//set global variable to kbn-versio \"7.5.1\"\r",
									"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Signin_ --------------//\r",
									"//set global variable to x_ais_OrderRef \"Signin_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreatePartner --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
									"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
									"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
									"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreateAccount --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
									"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
									"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Thing --------------//\r",
									"//set global variable to x_ais_OrderRef \"InquiryThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_InquiryThing\", HeaderList.Thing.x_ais_OrderRef_InquiryThing);\r",
									"//set global variable to x_ais_OrderDesc \"InquiryThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_InquiryThing\", HeaderList.Thing.x_ais_OrderDesc_InquiryThing);\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"SignInProcess is Success\"\r",
									"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
									"//get global variable to resultDescription \"CreatePartner is Success\"\r",
									"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
									"//get global variable to resultDescription \"CreateAccount is Success\"\r",
									"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- urlRouteList --------------//\r",
									"//set variable to urlRouteList JSON.parse\r",
									"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
									"//---------------- set url Create --------------//\r",
									"//set global variable to url \"/api/v1/auth/signin\"\r",
									"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
									"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
									"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"pm.globals.set(\"urlThingCreateThing\", urlRouteList.Thing.urlThingCreateThing);\r",
									"//---------------- get url Create --------------//\r",
									"//get global variable to url \"/api/v1/auth/signin\"\r",
									"var urlSignin = pm.globals.get(\"urlSignin\");\r",
									"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
									"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"var urlThingCreateThing = pm.globals.get(\"urlThingCreateThing\");\r",
									"//---------------- set url Remove --------------//\r",
									"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
									"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Signin_ --------------//\r",
									"//get global variable to x_ais_OrderRef \"Signin_\"\r",
									"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
									"//------------------------------------------------------------//\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// Signin get token\r",
									" Signin = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSignin = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestSignin = {\r",
									"            mode: 'raw',\r",
									"            raw: \r",
									"            JSON.stringify({\r",
									"                username:Username,\r",
									"                password:Password\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsSignin = {\r",
									"            url: url + provisioningapis + urlSignin,\r",
									"            method: 'POST',\r",
									"            header: headersOptSignin,\r",
									"            body: httpRequestSignin\r",
									"        };\r",
									"        // console.log('request Signin');\r",
									"        let response = await reqPromise(optionsSignin);\r",
									"        let jsonDataSignin = await response.json();\r",
									"\r",
									"        // setAccessToken\r",
									"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
									"\r",
									"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // SignInProcess is Success\r",
									"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
									"        });\r",
									"\r",
									"        //set random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //set PartnerName\r",
									"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
									"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
									"        //set MerchantContact\r",
									"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
									"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
									"        // set CPID\r",
									"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
									"        pm.environment.set(\"CPID\", CPIDValue)\r",
									"        \r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreatePartner\r",
									" CreatePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreatePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreatePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
									"                \"PartnerType\": fieldDataValue.Partner.PartnerTypeValue, //[\"Supplier\",\"Customer\"]\r",
									"                \"PartnerDetail\": {\r",
									"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
									"                    \"CPID\": pm.environment.get(\"CPID\")\r",
									"                },\r",
									"                \"Property\": {\r",
									"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsCreatePartner = {\r",
									"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreatePartner,\r",
									"            body: httpRequestCreatePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsCreatePartner);\r",
									"        let jsonDataCreatePartner = await response.json();\r",
									"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
									"    \r",
									"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreatePartner is Success\r",
									"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
									"        });\r",
									"\r",
									"        //GetResponse_PartnerId\r",
									"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
									"\r",
									"        //Accountname\r",
									"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
									"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateAccount\r",
									" CreateAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreateAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
									"                })\r",
									"        };\r",
									"        \r",
									"        let optionsCreateAccount = {\r",
									"            url: url + provisioningapis + urlAccountCreateAccount,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateAccount,\r",
									"            body: httpRequestCreateAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateAccount');\r",
									"        let response = await reqPromise(optionsCreateAccount);\r",
									"        let jsonDataCreateAccount = await response.json();\r",
									"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
									"    \r",
									"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateAccount : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateAccount is Success\r",
									"        pm.test('CreateAccount : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
									"        });\r",
									"        // GetResponse_AccountName\r",
									"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
									"        // GetResponse_AccountId\r",
									"        pm.environment.set(\"GetResponse_AccountId\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
									"        // random_IM\r",
									"        pm.environment.set(\"random_IM\", _.random(10000000, 99999999)+\" \"+_.random(1000000, 9999999))\r",
									"        // random_ICCID\r",
									"        pm.environment.set(\"random_ICCID\", _.random(1000000, 9999999)+\" \"+_.random(100000, 999999))\r",
									"        // random_number\r",
									"        pm.environment.set(\"random_number\",pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //ThingName\r",
									"        let thingNameValue = fieldDataValue.Provisioning.Thing.ThingNameValue; // \"QAtestthing_T01\"\r",
									"        pm.environment.set(\"ThingName\", thingNameValue + pm.environment.get(\"random_number\"))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// Signin get token\r",
									" Signin2 = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSignin = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestSignin = {\r",
									"            mode: 'raw',\r",
									"            raw: \r",
									"            JSON.stringify({\r",
									"                username:Username_Customer,\r",
									"                password:Password_Customer\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsSignin = {\r",
									"            url: url + provisioningapis + urlSignin,\r",
									"            method: 'POST',\r",
									"            header: headersOptSignin,\r",
									"            body: httpRequestSignin\r",
									"        };\r",
									"        // console.log('request Signin');\r",
									"        let response = await reqPromise(optionsSignin);\r",
									"        let jsonDataSignin = await response.json();\r",
									"\r",
									"        // setAccessToken\r",
									"        await pm.environment.set(\"AccessToken2\" , jsonDataSignin.AccessToken);\r",
									"\r",
									"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // SignInProcess is Success\r",
									"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
									"        });\r",
									"        \r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"Signin();\r",
									"setTimeout(async function(){await CreatePartner();}, 3000); \r",
									"setTimeout(async function(){await CreateAccount();}, 6000); \r",
									"setTimeout(async function(){await Signin2();}, 7000); \r",
									"setTimeout(async function(){}, 7500);  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-ais-UserName",
								"type": "text",
								"value": "{{x_ais_UserName_AisPartner}}"
							},
							{
								"key": "x-ais-OrderRef",
								"value": "{{x_ais_OrderRef_InquiryThing}}{{current_timestamp}}"
							},
							{
								"key": "x-ais-OrderDesc",
								"type": "text",
								"value": "{{x_ais_OrderDesc_InquiryThing}}"
							},
							{
								"key": "x-ais-AccessToken",
								"value": "{{Bearer}} {{AccessToken2}}"
							},
							{
								"key": "x-ais-AccountKey",
								"type": "text",
								"value": "{{accountId_role_other}}"
							},
							{
								"key": "Accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}{{provisioningapis}}/api/v1/Thing/InquiryThing",
							"host": [
								"{{url}}{{provisioningapis}}"
							],
							"path": [
								"api",
								"v1",
								"Thing",
								"InquiryThing"
							]
						},
						"description": "Type:Desire"
					},
					"response": []
				},
				{
					"name": "InquiryThing_TST_F13_1_1_007_Success_InquiryByConfigGroupId_SupplierAdmin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to xAisOrderRef \"RemoveThing_\"\r",
									"var x_ais_OrderRef_RemoveThing = pm.globals.get(\"x_ais_OrderRef_RemoveThing\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"var x_ais_OrderDesc_RemoveThing = pm.globals.get(\"x_ais_OrderDesc_RemoveThing\");\r",
									"//get global variable to x_ais_OrderRef \"InquiryThing_\"\r",
									"var x_ais_OrderRef_InquiryThing = pm.globals.get(\"x_ais_OrderRef_InquiryThing\");\r",
									"//get global variable to x_ais_OrderDesc \"InquiryThing\"\r",
									"var x_ais_OrderDesc_InquiryThing = pm.globals.get(\"x_ais_OrderDesc_InquiryThing\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get url Remove --------------//\r",
									"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
									"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"var urlThingRemoveThing = pm.globals.get(\"urlThingRemoveThing\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"RemovePartner is Success\"\r",
									"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
									"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
									"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
									"//get global variable to resultDescription \"RemoveThing is Success\"\r",
									"var resultDescriptionRemoveThing = pm.globals.get(\"resultDescriptionRemoveThing\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to resultDescription \"InquiryThing is Success\"\r",
									"var resultDescriptionInquiryThing = pm.globals.get(\"resultDescriptionInquiryThing\");\r",
									"//------------------------------------------------------------//\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"InquiryThing : Status code is \" + statusCodeSuccess, function () {\r",
									"    pm.response.to.have.status(statusCodeSuccess);\r",
									"});\r",
									"\r",
									"pm.test('InquiryThing : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeSuccess);\r",
									"});\r",
									"\r",
									"pm.test('InquiryThing : OperationStatus Description is '+'\"'+ resultDescriptionInquiryThing+'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionInquiryThing);\r",
									"});\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// RemovePartner\r",
									" RemovePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemovePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemovePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemovePartner = {\r",
									"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemovePartner,\r",
									"            body: httpRequestRemovePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request RemovePartner');\r",
									"        let response = await reqPromise(optionsRemovePartner);\r",
									"        let jsonDataRemovePartner = await response.json();\r",
									"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
									"    \r",
									"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemovePartner is Success\r",
									"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveAccount\r",
									" RemoveAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemoveAccount = {\r",
									"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveAccount,\r",
									"            body: httpRequestRemoveAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveAccount');\r",
									"        let response = await reqPromise(optionsRemoveAccount);\r",
									"        let jsonDataRemoveAccount = await response.json();\r",
									"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
									"    \r",
									"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveAccount is Success\r",
									"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThing\r",
									" RemoveThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"accountId_role_other\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThing = {\r",
									"            url: url + provisioningapis + urlThingRemoveThing,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThing,\r",
									"            body: httpRequestRemoveThing\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveThing');\r",
									"        let response = await reqPromise(optionsRemoveThing);\r",
									"        let jsonDataRemoveThing = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThing)\r",
									"    \r",
									"        let operationStatusRemoveThing = await jsonDataRemoveThing.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThing : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThing : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThing is Success\r",
									"        pm.test('RemoveThing : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThing+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Description', resultDescriptionRemoveThing);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"\r",
									"//---------------- LogDefaultValue --------------//\r",
									"//set variable to LogDefaultValue JSON.parse\r",
									"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
									"// console.log('LogDefaultValue',LogDefaultValue);\r",
									"//---------------- set globals Other --------------//\r",
									"var SearchLog = LogDefaultValue.SearchLog;\r",
									"// console.log('SearchLog',SearchLog);\r",
									"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
									"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
									"var kbn_version = SearchLog.header.kbn_version;\r",
									"var authorization = SearchLog.header.Authorization;\r",
									"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
									"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
									"var namespace = LogDefaultValue.Other.namespace;\r",
									"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
									"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
									"var header_x_ais_username = LogDefaultValue.Other.header_x_ais_username;\r",
									"var header_x_ais_accountkey = LogDefaultValue.Other.header_x_ais_accountkey;\r",
									"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
									"var methodPost = LogDefaultValue.Other.methodPost;\r",
									"\r",
									"// Detail\r",
									"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
									"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
									"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
									"\r",
									"// Summary\r",
									"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
									"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
									"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
									"\r",
									"// ProvisioningAPIs [InquiryThing]\r",
									"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
									"var cmdName = LogDefaultValue.Provisioning.Thing.cmdNameInquiryThing;\r",
									"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
									"var containerId = LogDefaultValue.Provisioning.containerId;\r",
									"var requestObjectUrlStaging = LogDefaultValue.Provisioning.Thing.requestObjectUrlInquiryThingMgStaging;\r",
									"\r",
									"// Check CDR (Summary Log) and EDR (Detail Log)\r",
									"SearchLogFindTid = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSearchLogFindTid = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = x_ais_OrderRef_InquiryThing + current_timestamp;\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\", valueSearch)\r",
									"\r",
									"        // body\r",
									"        let httpRequestSearchLogFindTid = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({ \"version\": \"true\", \"size\": 500, \"sort\": [{ \"@timestamp_es\": { \"order\": \"desc\", \"unmapped_type\": \"boolean\" } }], \"_source\": { \"excludes\": [] }, \"aggs\": { \"2\": { \"date_histogram\": { \"field\": \"@timestamp_es\", \"fixed_interval\": \"30s\", \"time_zone\": \"Asia/Bangkok\", \"min_doc_count\": 1 } } }, \"stored_fields\": [\"*\"], \"script_fields\": {}, \"docvalue_fields\": [{ \"field\": \"@timestamp_es\", \"format\": \"date_time\" }, { \"field\": \"cauldron.custom1.activityLog.endTime\", \"format\": \"date_time\" }, { \"field\": \"cauldron.custom1.activityLog.startTime\", \"format\": \"date_time\" }, { \"field\": \"time\", \"format\": \"date_time\" }], \"query\": { \"bool\": { \"must\": [], \"filter\": [{ \"multi_match\": { \"type\": \"best_fields\", \"query\": '\"' + valueSearch + '\"', \"lenient\": \"true\" } }, { \"range\": { \"@timestamp_es\": { \"format\": \"strict_date_optional_time\", \"gte\": setRangeGTE, \"lte\": setRangeLTE } } }], \"should\": [], \"must_not\": [] } }, \"highlight\": { \"pre_tags\": [\"@kibana-highlighted-field@\"], \"post_tags\": [\"@/kibana-highlighted-field@\"], \"fields\": { \"*\": {} }, \"fragment_size\": 2147483647 } })\r",
									"        };\r",
									"\r",
									"        let optionsSearchLogFindTid = {\r",
									"            url: url_staging_azure_cauldron,\r",
									"            method: 'POST',\r",
									"            header: headersOptSearchLogFindTid,\r",
									"            body: httpRequestSearchLogFindTid\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsSearchLogFindTid);\r",
									"        let jsonDataSearchLogFindTid = await response.json();\r",
									"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
									"        console.log('hits', hits)\r",
									"\r",
									"        // find tid\r",
									"        for (let i = 0; i < hits.length; i++) {\r",
									"            // let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"\r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            if (applicationNameValue == applicationName) {\r",
									"                let tid = hits[i]._source.cauldron.tid;\r",
									"                pm.environment.set(\"tid\", tid);\r",
									"                break;\r",
									"            }\r",
									"        }\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"CheckLog = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCheckLog = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = pm.environment.get(\"tid\");\r",
									"\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\", valueSearch)\r",
									"\r",
									"        // body\r",
									"        let httpRequestCheckLog = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({ \"version\": true, \"size\": 500, \"sort\": [{ \"@timestamp_es\": { \"order\": \"desc\", \"unmapped_type\": \"boolean\" } }], \"_source\": { \"excludes\": [] }, \"aggs\": { \"2\": { \"date_histogram\": { \"field\": \"@timestamp_es\", \"fixed_interval\": \"30s\", \"time_zone\": \"Asia/Bangkok\", \"min_doc_count\": 1 } } }, \"stored_fields\": [\"*\"], \"script_fields\": {}, \"docvalue_fields\": [{ \"field\": \"@timestamp_es\", \"format\": \"date_time\" }, { \"field\": \"cauldron.custom1.activityLog.endTime\", \"format\": \"date_time\" }, { \"field\": \"cauldron.custom1.activityLog.startTime\", \"format\": \"date_time\" }, { \"field\": \"time\", \"format\": \"date_time\" }], \"query\": { \"bool\": { \"must\": [], \"filter\": [{ \"multi_match\": { \"type\": \"best_fields\", \"query\": '\"' + valueSearch + '\"', \"lenient\": true } }, { \"range\": { \"@timestamp_es\": { \"format\": \"strict_date_optional_time\", \"gte\": setRangeGTE, \"lte\": setRangeLTE } } }], \"should\": [], \"must_not\": [] } }, \"highlight\": { \"pre_tags\": [\"@kibana-highlighted-field@\"], \"post_tags\": [\"@/kibana-highlighted-field@\"], \"fields\": { \"*\": {} }, \"fragment_size\": 2147483647 } })\r",
									"        };\r",
									"        let optionsCheckLog = {\r",
									"            url: url_staging_azure_cauldron,\r",
									"            method: 'POST',\r",
									"            header: headersOptCheckLog,\r",
									"            body: httpRequestCheckLog\r",
									"        };\r",
									"        let response = await reqPromise(optionsCheckLog);\r",
									"        let jsonDataCheckLog = await response.json();\r",
									"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataCheckLog.hits.hits\r",
									"        console.log('hits', hits)\r",
									"\r",
									"        // find logType\r",
									"        for (let i = 0; i < hits.length; i++) {\r",
									"            //  let logType = hits[i]._source.cauldron.logType\r",
									"            let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"\r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"\r",
									"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
									"            // console.log('resultDataLog',resultDataLog)\r",
									"\r",
									"            let tidControl = x_ais_OrderRef_InquiryThing + current_timestamp;\r",
									"            // console.log(tidControl);\r",
									"            if (applicationNameValue == applicationName) {\r",
									"\r",
									"                if (logType == logTypeSummary && applicationNameValue == applicationName) { // 'Summary' and ProvisioningAPIs\r",
									"                    pm.test(\"Check Summary Log : InquiryThing\" , function () {\r",
									"                        console.log(\"======== Check Summary Log ( Expected = Actual) [InquiryThing] ==================\");\r",
									"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
									"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
									"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeSuccess);\r",
									"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionInquiryThing);\r",
									"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
									"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
									"                        // console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
									"\r",
									"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp);\r",
									"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName);\r",
									"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeSuccess);\r",
									"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionInquiryThing);\r",
									"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp);\r",
									"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary);\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace);\r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName);\r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId);\r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
									"                        // pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
									"\r",
									"                        // check custom\r",
									"                        // \\\"custom\\\":{ \\\"endPointSummary\\\":[ { \\\"no\\\":\\\"1\\\", \\\"endPointName\\\":\\\"db.AccountsCollection\\\", \\\"responseStatus\\\":\\\"Success:InquiryAccount was successfully.\\\", \\\"processTime\\\":10.6148 }, { \\\"no\\\":\\\"2\\\", \\\"endPointName\\\":\\\"db.ThingsCollection\\\", \\\"responseStatus\\\":\\\"Success:InquiryThing was successfully.\\\", \\\"processTime\\\":9.0435 } ] }\r",
									"                        let custom = resultDataLog.custom.endPointSummary;\r",
									"                        let countCustom = custom.length;\r",
									"                       \r",
									"                        // [\"db.AccountsCollection\",\"db.ThingsCollection\"]\r",
									"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_InquiryThing;\r",
									"                        // [\"Success:InquiryAccount was successfully.\",\"Success:InquiryThing was successfully.\"]\r",
									"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_InquiryThing;\r",
									"                        let countCustomStep = dataEndPointName.length;\r",
									"\r",
									"                        console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep);\r",
									"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
									"                        \r",
									"                        for(let i=0;i<countCustomStep;i++){\r",
									"                            let no = custom[i].no;\r",
									"                            let valueEndPointName = custom[i].endPointName;\r",
									"                            let valueResponseStatus = custom[i].responseStatus;\r",
									"                            // console.log(\"i\",i);\r",
									"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
									"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
									"\r",
									"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString());\r",
									"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i]);\r",
									"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i]);\r",
									"\r",
									"                            pm.expect(no).to.eql((i+1).toString()); \r",
									"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
									"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]); \r",
									"                        }\r",
									"                    });\r",
									"                }\r",
									"\r",
									"                if (logType == logTypeDetail && applicationNameValue == applicationName) { //'Detail' and ProvisioningAPIs\r",
									"\r",
									"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
									"                    // console.log('endPointNameValue ',endPointNameValue)\r",
									"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [InquiryThing]\", function () {\r",
									"                        console.log(\"======== Check Detail Log ( Expected = Actual) [InquiryThing] ==================\");\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
									"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
									"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
									"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.custom1.activityLog.processTime + \" = \" + resultDataLog.custom1.activityLog.processTime);\r",
									"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
									"\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail);\r",
									"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail);\r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace);\r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName);\r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId);\r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime);\r",
									"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail);\r",
									"\r",
									"                        if (endPointNameValue == endPointNameProvisioningAPIs) {     //\"endPointName\":\"ProvisioningAPIs\"\r",
									"                            console.log(\"custom1.endPointName : \" + resultDataLog.custom1.endPointName + \" = \" + endPointNameProvisioningAPIs); \r",
									"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs);\r",
									"\r",
									"                            // check requestObject\r",
									"                            // \"requestObject\":\"{ \\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Thing/InquiryThing\\\", \\\"method\\\":\\\"POST\\\", \\\"headers\\\":{ \\\"x-ais-username\\\":\\\"AisPartner\\\", \\\"x-ais-orderref\\\":\\\"InquiryThing_202104081704157\\\", \\\"x-ais-orderdesc\\\":\\\"InquiryThing\\\", \\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAGUJ9zLPcvr1srlapD3VLIkylxBptnfFGrsXbdYpFNnXEIlAkkY2KW0\\\", \\\"x-ais-accountkey\\\":\\\"606edc1663fa0e0001bf6e45\\\" }, \\\"body\\\":{ \\\"ThingId\\\":\\\"606edc1863fa0e0001bf6e4d\\\" } }\"\r",
									"\r",
									"                            // \\\"requestObject\\\":\\\"{ \\\\\\\"url\\\\\\\":\\\\\\\"mg-iot.sandais.com/api/v1/Thing/InquiryThing\\\\\\\", \\\\\\\"method\\\\\\\":\\\\\\\"POST\\\\\\\", \\\\\\\"headers\\\\\\\":{ \\\\\\\"x-ais-username\\\\\\\":\\\\\\\"AisPartner\\\\\\\", \\\\\\\"x-ais-orderref\\\\\\\":\\\\\\\"InquiryThing_202105101605655\\\\\\\", \\\\\\\"x-ais-orderdesc\\\\\\\":\\\\\\\"InquiryThing\\\\\\\", \\\\\\\"x-ais-accesstoken\\\\\\\":\\\\\\\"Bearer ibnxnVhs5Rx3IwglWv7/gVA/1TpQnKqAOBAADlRDvYhOpXwmlpYOEb5yfY5aZpoj0YRWRZM26i9HOqtc1fc1jpNDOK5JpISttmMEy59g2py7nLWonDe2YW2OPRGWSowk6+9ZihLU1fZ5d5jAqqrZaKlOAAI3N1TXDNLsHuKcOJMcERbCcaMqRaku+MY4/kzE+eyIdkfwwbjT91S2VQq+Wk2ooMWuLk6/DHVJhwbMP7Y8okAOp9ce95xhEKZA2al3WNgbucFuMgxKVegMrc8SMg==\\\\\\\", \\\\\\\"x-ais-accountkey\\\\\\\":\\\\\\\"6098fa735316540001b19d6d\\\\\\\" }, \\\\\\\"body\\\\\\\":{ \\\\\\\"ThingId\\\\\\\":\\\\\\\"6098fa755316540001b19d77\\\\\\\" } }\\\"\r",
									"\r",
									"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
									"                            //  console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
									"\r",
									"                            let url = urlCheckLog + requestObjectUrlStaging;\r",
									"                            let x_ais_orderref = x_ais_OrderRef_InquiryThing + current_timestamp;\r",
									"                            let x_ais_orderdesc = x_ais_OrderDesc_InquiryThing;\r",
									"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken2\");\r",
									"                            let x_ais_userName = x_ais_UserName_AisPartner;\r",
									"                            let x_ais_AccountKey = pm.environment.get(\"accountId_role_other\");\r",
									"                            \r",
									"                            let ThingId = pm.environment.get(\"GetResponse_ThingID\");\r",
									"                            let ThingName = pm.environment.get(\"ThingName\");\r",
									"                            let resIMEI = (pm.environment.get(\"random_IM\")).replace(\" \", \"\");\r",
									"                            let resIMSI = (pm.environment.get(\"random_IM\")).replace(\" \", \"\");\r",
									"                            let resICCID = fieldDataValue.Provisioning.Thing.CreateThing.ICCIDPre + (pm.environment.get(\"random_ICCID\")).replace(\" \", \"\");\r",
									"                            let RouteInfoMIMO_ID = pm.environment.get(\"MIMO_ID\");\r",
									"                            let RouteInfoMIMO_SerialNo = pm.environment.get(\"MIMO_SerialNo\");\r",
									"\r",
									"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
									"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
									"                            console.log(\"headers.x_ais_userName : \" + jsonParseRequestObject.headers[header_x_ais_username] + \" = \" + x_ais_userName);\r",
									"                            console.log(\"headers.x_ais_AccountKey : \" + jsonParseRequestObject.headers[header_x_ais_accountkey] + \" = \" + x_ais_AccountKey);\r",
									"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
									"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.url).to.eql(url);\r",
									"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_username]).to.eql(x_ais_userName);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accountkey]).to.eql(x_ais_AccountKey);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
									"\r",
									"                            console.log(\"resquest.body.ThingId : \" + jsonParseRequestObject.body.ThingId + \" = \" + ThingId);\r",
									"                            pm.expect(jsonParseRequestObject.body.ThingId).to.eql(ThingId);\r",
									"\r",
									"                            // check responseObject\r",
									"                            // \"responseObject\":\"{\\\"ThingInfo\\\":[{\\\"ThingId\\\":\\\"606edc1863fa0e0001bf6e4d\\\",\\\"ThingName\\\":\\\"QAtestthing_T01511537\\\",\\\"ThingToken\\\":\\\"6d53ab03-cfbc-40f7-bd07-cc5d74cb2679\\\",\\\"ThingStatus\\\":\\\"Active\\\",\\\"IMEI\\\":\\\"427666067926748\\\",\\\"IMSI\\\":\\\"427666067926748\\\", \\\"ICCID\\\":\\\"8966034190840384338\\\",\\\"RouteInfo\\\":{\\\"MIMO_ID\\\":\\\"606edada\\\",\\\"MIMO_SerialNo\\\":\\\"5466758878\\\"},\\\"StateInfo\\\":{}}],\\\"_Metadata\\\":{\\\"TotalCount\\\":1,\\\"Limit\\\":10000,\\\"OffSet\\\":0 },\\\"OperationStatus\\\":{\\\"Code\\\":\\\"20000\\\",\\\"Description\\\":\\\"InquiryThing is Success\\\"}}\"\r",
									"\r",
									"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
									"                            // console.log('jsonParseResponseObject',jsonParseResponseObject);\r",
									"                            let countRes = jsonParseResponseObject.ThingInfo;\r",
									"                            for(let i=0;i<countRes.length;i++){\r",
									"                                console.log(\"response.ThingInfo[\" + [i] +\"].ThingId : \" + jsonParseResponseObject.ThingInfo[i].ThingId + \" = \" + ThingId);\r",
									"                                console.log(\"response.ThingInfo[\" + [i] +\"].ThingName : \" + jsonParseResponseObject.ThingInfo[i].ThingName + \" = \" + ThingName);\r",
									"                                console.log(\"response.ThingInfo[\" + [i] +\"].IMEI : \" + jsonParseResponseObject.ThingInfo[i].IMEI + \" = \" + resIMEI);\r",
									"                                console.log(\"response.ThingInfo[\" + [i] +\"].IMSI : \" + jsonParseResponseObject.ThingInfo[i].IMSI + \" = \" + resIMSI);\r",
									"                                console.log(\"response.ThingInfo[\" + [i] +\"].ICCID : \" + jsonParseResponseObject.ThingInfo[i].ICCID + \" = \" + resICCID);\r",
									"                                console.log(\"response.ThingInfo[\" + [i] +\"].RouteInfo.MIMO_ID : \" + jsonParseResponseObject.ThingInfo[i].RouteInfo.MIMO_ID + \" = \" + RouteInfoMIMO_ID);\r",
									"                                console.log(\"response.ThingInfo[\" + [i] +\"].RouteInfo.MIMO_SerialNo : \" + jsonParseResponseObject.ThingInfo[i].RouteInfo.MIMO_SerialNo + \" = \" + RouteInfoMIMO_SerialNo);\r",
									"\r",
									"                                pm.expect(jsonParseResponseObject.ThingInfo[i].ThingId).to.eql(ThingId);\r",
									"                                pm.expect(jsonParseResponseObject.ThingInfo[i].ThingName).to.eql(ThingName);\r",
									"                                pm.expect(jsonParseResponseObject.ThingInfo[i].IMEI).to.eql(resIMEI);\r",
									"                                pm.expect(jsonParseResponseObject.ThingInfo[i].IMSI).to.eql(resIMSI);\r",
									"                                pm.expect(jsonParseResponseObject.ThingInfo[i].ICCID).to.eql(resICCID);\r",
									"                                pm.expect(jsonParseResponseObject.ThingInfo[i].RouteInfo.MIMO_ID).to.eql(RouteInfoMIMO_ID);\r",
									"                                pm.expect(jsonParseResponseObject.ThingInfo[i].RouteInfo.MIMO_SerialNo).to.eql(RouteInfoMIMO_SerialNo);\r",
									"                            }\r",
									"    \r",
									"                            console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeSuccess);\r",
									"                            console.log(\"response.OperationStatus.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionInquiryThing); \r",
									"\r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeSuccess);\r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionInquiryThing);\r",
									"                        }\r",
									"                    });\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"setTimeout(function(){SearchLogFindTid();}, 10000); \r",
									"setTimeout(function(){CheckLog();}, 30000); \r",
									"\r",
									"setTimeout(function(){RemoveThing();}, 40000); \r",
									"setTimeout(function(){RemoveAccount();}, 50000); \r",
									"setTimeout(function(){RemovePartner();}, 60000); \r",
									"\r",
									"setTimeout(function(){\r",
									"pm.environment.unset(\"current_timestamp\");\r",
									"pm.environment.unset(\"AccessToken\");\r",
									"pm.environment.unset(\"AccessToken2\");\r",
									"pm.environment.unset(\"random_number\");\r",
									"pm.environment.unset(\"PartnerName\");\r",
									"pm.environment.unset(\"MerchantContact\");\r",
									"pm.environment.unset(\"CPID\");\r",
									"pm.environment.unset(\"GetResponse_PartnerId\");\r",
									"pm.environment.unset(\"AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountId\");\r",
									"pm.environment.unset(\"random_IM\");\r",
									"pm.environment.unset(\"random_ICCID\");\r",
									"pm.environment.unset(\"ThingName\");\r",
									"pm.environment.unset(\"RouteUrl\");\r",
									"pm.environment.unset(\"MIMO_ID\");\r",
									"pm.environment.unset(\"MIMO_SerialNo\");\r",
									"pm.environment.unset(\"GetResponse_ThingID\");\r",
									"pm.environment.unset(\"tid\");\r",
									"}, 65000);\r",
									"setTimeout(function(){}, 70000); "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var Username = pm.environment.get(\"Username\");\r",
									"var Password = pm.environment.get(\"Password\");\r",
									"var Username_SupplierAdmin = pm.environment.get(\"Username_SupplierAdmin\");\r",
									"var Password_SupplierAdmin = pm.environment.get(\"Password_SupplierAdmin\");\r",
									"var accountId_role_other = pm.environment.get(\"accountId_role_other\");\r",
									"\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"pm.environment.set(\"MIMO_ID\",fieldDataValue.Provisioning.Thing.CreateThing.RouteInfoMIMOIDValue)\r",
									"pm.environment.set(\"MIMO_SerialNo\",fieldDataValue.Provisioning.Thing.CreateThing.RouteInfoMIMOSerialNoValue)\r",
									"\r",
									"//format YYYYMMDDHHMMSSS\r",
									"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
									"// console.log('currentTmestamp',currentTmestamp);\r",
									"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- statusCodeList --------------//\r",
									"//set variable to statusCodeList JSON.parse\r",
									"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
									"//set global variable to statusCode 200\r",
									"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
									"//set global variable to statusCode 201\r",
									"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultCodeList --------------//\r",
									"//set variable to resultCodeList JSON.parse\r",
									"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
									"//set global variable to resultCode \"20000\"\r",
									"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
									"//set global variable to resultCode \"20100\"\r",
									"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionSuccessList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
									"//set global variable to resultDescription \"SignInProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
									"//set global variable to resultDescription \"CreatePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
									"//set global variable to resultDescription \"CreateAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
									"//set global variable to resultDescription \"CreateThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThing\", resultDescriptionSuccessList.resultDescriptionCreateThing);\r",
									"//set global variable to resultDescription \"RemovePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
									"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
									"//set global variable to resultDescription \"RemoveThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThing\", resultDescriptionSuccessList.resultDescriptionRemoveThing);\r",
									"//set global variable to resultDescription \"InquiryThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionInquiryThing\", resultDescriptionSuccessList.resultDescriptionInquiryThing);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- HeaderList --------------//\r",
									"//set variable to HeaderList JSON.parse\r",
									"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
									"//---------------- set globals Other --------------//\r",
									"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
									"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
									"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
									"//set global variable to kbn-versio \"7.5.1\"\r",
									"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Signin_ --------------//\r",
									"//set global variable to x_ais_OrderRef \"Signin_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreatePartner --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
									"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
									"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
									"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreateAccount --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
									"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
									"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Thing --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThing\", HeaderList.Thing.x_ais_OrderRef_CreateThing);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThing\", HeaderList.Thing.x_ais_OrderDesc_CreateThing);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThing\", HeaderList.Thing.x_ais_OrderRef_RemoveThing);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThing\", HeaderList.Thing.x_ais_OrderDesc_RemoveThing);\r",
									"//set global variable to x_ais_OrderRef \"InquiryThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_InquiryThing\", HeaderList.Thing.x_ais_OrderRef_InquiryThing);\r",
									"//set global variable to x_ais_OrderDesc \"InquiryThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_InquiryThing\", HeaderList.Thing.x_ais_OrderDesc_InquiryThing);\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"SignInProcess is Success\"\r",
									"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
									"//get global variable to resultDescription \"CreatePartner is Success\"\r",
									"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
									"//get global variable to resultDescription \"CreateAccount is Success\"\r",
									"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
									"//get global variable to resultDescription \"CreateThing is Success\"\r",
									"var resultDescriptionCreateThing = pm.globals.get(\"resultDescriptionCreateThing\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- urlRouteList --------------//\r",
									"//set variable to urlRouteList JSON.parse\r",
									"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
									"//---------------- set url Create --------------//\r",
									"//set global variable to url \"/api/v1/auth/signin\"\r",
									"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
									"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
									"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"pm.globals.set(\"urlThingCreateThing\", urlRouteList.Thing.urlThingCreateThing);\r",
									"//---------------- get url Create --------------//\r",
									"//get global variable to url \"/api/v1/auth/signin\"\r",
									"var urlSignin = pm.globals.get(\"urlSignin\");\r",
									"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
									"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"var urlThingCreateThing = pm.globals.get(\"urlThingCreateThing\");\r",
									"//---------------- set url Remove --------------//\r",
									"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
									"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"pm.globals.set(\"urlThingRemoveThing\", urlRouteList.Thing.urlThingRemoveThing);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Signin_ --------------//\r",
									"//get global variable to x_ais_OrderRef \"Signin_\"\r",
									"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"var x_ais_OrderRef_CreateThing = pm.globals.get(\"x_ais_OrderRef_CreateThing\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"var x_ais_OrderDesc_CreateThing = pm.globals.get(\"x_ais_OrderDesc_CreateThing\");\r",
									"//------------------------------------------------------------//\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// Signin get token\r",
									" Signin = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSignin = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestSignin = {\r",
									"            mode: 'raw',\r",
									"            raw: \r",
									"            JSON.stringify({\r",
									"                username:Username,\r",
									"                password:Password\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsSignin = {\r",
									"            url: url + provisioningapis + urlSignin,\r",
									"            method: 'POST',\r",
									"            header: headersOptSignin,\r",
									"            body: httpRequestSignin\r",
									"        };\r",
									"        // console.log('request Signin');\r",
									"        let response = await reqPromise(optionsSignin);\r",
									"        let jsonDataSignin = await response.json();\r",
									"\r",
									"        // setAccessToken\r",
									"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
									"\r",
									"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // SignInProcess is Success\r",
									"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
									"        });\r",
									"\r",
									"        //set random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //set PartnerName\r",
									"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
									"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
									"        //set MerchantContact\r",
									"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
									"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
									"        // set CPID\r",
									"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
									"        pm.environment.set(\"CPID\", CPIDValue)\r",
									"        \r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreatePartner\r",
									" CreatePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreatePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreatePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
									"                \"PartnerType\": fieldDataValue.Partner.PartnerTypeValue, //[\"Supplier\",\"Customer\"]\r",
									"                \"PartnerDetail\": {\r",
									"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
									"                    \"CPID\": pm.environment.get(\"CPID\")\r",
									"                },\r",
									"                \"Property\": {\r",
									"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsCreatePartner = {\r",
									"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreatePartner,\r",
									"            body: httpRequestCreatePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsCreatePartner);\r",
									"        let jsonDataCreatePartner = await response.json();\r",
									"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
									"    \r",
									"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreatePartner is Success\r",
									"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
									"        });\r",
									"\r",
									"        //GetResponse_PartnerId\r",
									"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
									"\r",
									"        //Accountname\r",
									"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
									"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateAccount\r",
									" CreateAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreateAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
									"                })\r",
									"        };\r",
									"        \r",
									"        let optionsCreateAccount = {\r",
									"            url: url + provisioningapis + urlAccountCreateAccount,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateAccount,\r",
									"            body: httpRequestCreateAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateAccount');\r",
									"        let response = await reqPromise(optionsCreateAccount);\r",
									"        let jsonDataCreateAccount = await response.json();\r",
									"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
									"    \r",
									"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateAccount : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateAccount is Success\r",
									"        pm.test('CreateAccount : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
									"        });\r",
									"        // GetResponse_AccountName\r",
									"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
									"        // GetResponse_AccountId\r",
									"        pm.environment.set(\"GetResponse_AccountId\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
									"        // random_IM\r",
									"        pm.environment.set(\"random_IM\", _.random(10000000, 99999999)+\" \"+_.random(1000000, 9999999))\r",
									"        // random_ICCID\r",
									"        pm.environment.set(\"random_ICCID\", _.random(1000000, 9999999)+\" \"+_.random(100000, 999999))\r",
									"        // random_number\r",
									"        pm.environment.set(\"random_number\",pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //ThingName\r",
									"        let thingNameValue = fieldDataValue.Provisioning.Thing.ThingNameValue; // \"QAtestthing_T01\"\r",
									"        pm.environment.set(\"ThingName\", thingNameValue + pm.environment.get(\"random_number\"))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThing\r",
									"CreateThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateThing+ current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey':accountId_role_other,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreateThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingName\": pm.environment.get(\"ThingName\"),\r",
									"                \"IMEI\": pm.environment.get(\"random_IM\"),\r",
									"                \"IMSI\": pm.environment.get(\"random_IM\"),\r",
									"                \"ICCID\": pm.environment.get(\"random_ICCID\"),\r",
									"                \"RouteUrl\": fieldDataValue.Provisioning.Thing.CreateThing.RouteUrlValue , //[\"http://10.12.3.4:2019/api/information/AddInformation\"]\r",
									"                \"RouteInfo\": {\r",
									"                    \"MIMO_ID\": pm.environment.get(\"MIMO_ID\") , //\"606edada\"\r",
									"                    \"MIMO_SerialNo\": pm.environment.get(\"MIMO_SerialNo\") //5466758878\r",
									"                },\r",
									"                \"RouteFlag\": {\r",
									"                    \"ThingName\": fieldDataValue.Provisioning.Thing.CreateThing.RouteFlagThingNameValue , //true\r",
									"                    \"ThingToken\": fieldDataValue.Provisioning.Thing.CreateThing.RouteFlagThingTokenValue, //true\r",
									"                    \"IMEI\": fieldDataValue.Provisioning.Thing.CreateThing.RouteFlagIMEIValue, //true\r",
									"                    \"ICCID\": fieldDataValue.Provisioning.Thing.CreateThing.RouteFlagICCIDValue, //true\r",
									"                    \"RouteInfo\": fieldDataValue.Provisioning.Thing.CreateThing.RouteFlagRouteInfoValue //true\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsCreateThing = {\r",
									"            url: url + provisioningapis + urlThingCreateThing,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThing,\r",
									"            body: httpRequestCreateThing\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThing');\r",
									"        let response = await reqPromise(optionsCreateThing);\r",
									"        let jsonDataCreateThing = await response.json();\r",
									"        // console.log('jsonDataCreateThing',jsonDataCreateThing)\r",
									"    \r",
									"        let operationStatusCreateThing = await jsonDataCreateThing.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateThing : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateThing : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateThing is Success\r",
									"        pm.test('CreateThing : OperationStatus Description is '+'\"'+ resultDescriptionCreateThing+'\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Description', resultDescriptionCreateThing);\r",
									"        });\r",
									"\r",
									"        pm.environment.set(\"GetResponse_ThingID\",jsonDataCreateThing.ThingInfo.ThingId)\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// Signin get token\r",
									" Signin2 = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSignin = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestSignin = {\r",
									"            mode: 'raw',\r",
									"            raw: \r",
									"            JSON.stringify({\r",
									"                username:Username_SupplierAdmin,\r",
									"                password:Password_SupplierAdmin\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsSignin = {\r",
									"            url: url + provisioningapis + urlSignin,\r",
									"            method: 'POST',\r",
									"            header: headersOptSignin,\r",
									"            body: httpRequestSignin\r",
									"        };\r",
									"        // console.log('request Signin');\r",
									"        let response = await reqPromise(optionsSignin);\r",
									"        let jsonDataSignin = await response.json();\r",
									"\r",
									"        // setAccessToken\r",
									"        await pm.environment.set(\"AccessToken2\" , jsonDataSignin.AccessToken);\r",
									"\r",
									"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // SignInProcess is Success\r",
									"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
									"        });\r",
									"        \r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"Signin();\r",
									"setTimeout(async function(){await CreatePartner();}, 3000); \r",
									"setTimeout(async function(){await CreateAccount();}, 6000); \r",
									"setTimeout(async function(){await CreateThing();}, 8000); \r",
									"setTimeout(async function(){await Signin2();}, 9000); \r",
									"setTimeout(async function(){}, 9500);  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-ais-UserName",
								"type": "text",
								"value": "{{x_ais_UserName_AisPartner}}"
							},
							{
								"key": "x-ais-OrderRef",
								"value": "{{x_ais_OrderRef_InquiryThing}}{{current_timestamp}}"
							},
							{
								"key": "x-ais-OrderDesc",
								"type": "text",
								"value": "{{x_ais_OrderDesc_InquiryThing}}"
							},
							{
								"key": "x-ais-AccessToken",
								"value": "{{Bearer}} {{AccessToken2}}"
							},
							{
								"key": "x-ais-AccountKey",
								"type": "text",
								"value": "{{accountId_role_other}}"
							},
							{
								"key": "Accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"ThingId\": \"{{GetResponse_ThingID}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}{{provisioningapis}}/api/v1/Thing/InquiryThing",
							"host": [
								"{{url}}{{provisioningapis}}"
							],
							"path": [
								"api",
								"v1",
								"Thing",
								"InquiryThing"
							]
						},
						"description": "Type:Desire"
					},
					"response": []
				},
				{
					"name": "InquiryThing_TST_F13_1_1_008_Success_InquiryByConfigGroupId_CustomerAdmin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to xAisOrderRef \"RemoveThing_\"\r",
									"var x_ais_OrderRef_RemoveThing = pm.globals.get(\"x_ais_OrderRef_RemoveThing\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"var x_ais_OrderDesc_RemoveThing = pm.globals.get(\"x_ais_OrderDesc_RemoveThing\");\r",
									"//get global variable to x_ais_OrderRef \"InquiryThing_\"\r",
									"var x_ais_OrderRef_InquiryThing = pm.globals.get(\"x_ais_OrderRef_InquiryThing\");\r",
									"//get global variable to x_ais_OrderDesc \"InquiryThing\"\r",
									"var x_ais_OrderDesc_InquiryThing = pm.globals.get(\"x_ais_OrderDesc_InquiryThing\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get url Remove --------------//\r",
									"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
									"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"var urlThingRemoveThing = pm.globals.get(\"urlThingRemoveThing\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"RemovePartner is Success\"\r",
									"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
									"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
									"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
									"//get global variable to resultDescription \"RemoveThing is Success\"\r",
									"var resultDescriptionRemoveThing = pm.globals.get(\"resultDescriptionRemoveThing\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to resultDescription \"InquiryThing is Success\"\r",
									"var resultDescriptionInquiryThing = pm.globals.get(\"resultDescriptionInquiryThing\");\r",
									"//------------------------------------------------------------//\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"InquiryThing : Status code is \" + statusCodeSuccess, function () {\r",
									"    pm.response.to.have.status(statusCodeSuccess);\r",
									"});\r",
									"\r",
									"pm.test('InquiryThing : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeSuccess);\r",
									"});\r",
									"\r",
									"pm.test('InquiryThing : OperationStatus Description is '+'\"'+ resultDescriptionInquiryThing+'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionInquiryThing);\r",
									"});\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// RemovePartner\r",
									" RemovePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemovePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemovePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemovePartner = {\r",
									"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemovePartner,\r",
									"            body: httpRequestRemovePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request RemovePartner');\r",
									"        let response = await reqPromise(optionsRemovePartner);\r",
									"        let jsonDataRemovePartner = await response.json();\r",
									"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
									"    \r",
									"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemovePartner is Success\r",
									"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveAccount\r",
									" RemoveAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemoveAccount = {\r",
									"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveAccount,\r",
									"            body: httpRequestRemoveAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveAccount');\r",
									"        let response = await reqPromise(optionsRemoveAccount);\r",
									"        let jsonDataRemoveAccount = await response.json();\r",
									"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
									"    \r",
									"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveAccount is Success\r",
									"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThing\r",
									" RemoveThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"accountId_role_other\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThing = {\r",
									"            url: url + provisioningapis + urlThingRemoveThing,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThing,\r",
									"            body: httpRequestRemoveThing\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveThing');\r",
									"        let response = await reqPromise(optionsRemoveThing);\r",
									"        let jsonDataRemoveThing = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThing)\r",
									"    \r",
									"        let operationStatusRemoveThing = await jsonDataRemoveThing.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThing : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThing : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThing is Success\r",
									"        pm.test('RemoveThing : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThing+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Description', resultDescriptionRemoveThing);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"\r",
									"//---------------- LogDefaultValue --------------//\r",
									"//set variable to LogDefaultValue JSON.parse\r",
									"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
									"// console.log('LogDefaultValue',LogDefaultValue);\r",
									"//---------------- set globals Other --------------//\r",
									"var SearchLog = LogDefaultValue.SearchLog;\r",
									"// console.log('SearchLog',SearchLog);\r",
									"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
									"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
									"var kbn_version = SearchLog.header.kbn_version;\r",
									"var authorization = SearchLog.header.Authorization;\r",
									"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
									"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
									"var namespace = LogDefaultValue.Other.namespace;\r",
									"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
									"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
									"var header_x_ais_username = LogDefaultValue.Other.header_x_ais_username;\r",
									"var header_x_ais_accountkey = LogDefaultValue.Other.header_x_ais_accountkey;\r",
									"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
									"var methodPost = LogDefaultValue.Other.methodPost;\r",
									"\r",
									"// Detail\r",
									"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
									"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
									"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
									"\r",
									"// Summary\r",
									"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
									"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
									"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
									"\r",
									"// ProvisioningAPIs [InquiryThing]\r",
									"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
									"var cmdName = LogDefaultValue.Provisioning.Thing.cmdNameInquiryThing;\r",
									"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
									"var containerId = LogDefaultValue.Provisioning.containerId;\r",
									"var requestObjectUrlStaging = LogDefaultValue.Provisioning.Thing.requestObjectUrlInquiryThingMgStaging;\r",
									"\r",
									"// Check CDR (Summary Log) and EDR (Detail Log)\r",
									"SearchLogFindTid = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSearchLogFindTid = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = x_ais_OrderRef_InquiryThing + current_timestamp;\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\", valueSearch)\r",
									"\r",
									"        // body\r",
									"        let httpRequestSearchLogFindTid = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({ \"version\": \"true\", \"size\": 500, \"sort\": [{ \"@timestamp_es\": { \"order\": \"desc\", \"unmapped_type\": \"boolean\" } }], \"_source\": { \"excludes\": [] }, \"aggs\": { \"2\": { \"date_histogram\": { \"field\": \"@timestamp_es\", \"fixed_interval\": \"30s\", \"time_zone\": \"Asia/Bangkok\", \"min_doc_count\": 1 } } }, \"stored_fields\": [\"*\"], \"script_fields\": {}, \"docvalue_fields\": [{ \"field\": \"@timestamp_es\", \"format\": \"date_time\" }, { \"field\": \"cauldron.custom1.activityLog.endTime\", \"format\": \"date_time\" }, { \"field\": \"cauldron.custom1.activityLog.startTime\", \"format\": \"date_time\" }, { \"field\": \"time\", \"format\": \"date_time\" }], \"query\": { \"bool\": { \"must\": [], \"filter\": [{ \"multi_match\": { \"type\": \"best_fields\", \"query\": '\"' + valueSearch + '\"', \"lenient\": \"true\" } }, { \"range\": { \"@timestamp_es\": { \"format\": \"strict_date_optional_time\", \"gte\": setRangeGTE, \"lte\": setRangeLTE } } }], \"should\": [], \"must_not\": [] } }, \"highlight\": { \"pre_tags\": [\"@kibana-highlighted-field@\"], \"post_tags\": [\"@/kibana-highlighted-field@\"], \"fields\": { \"*\": {} }, \"fragment_size\": 2147483647 } })\r",
									"        };\r",
									"\r",
									"        let optionsSearchLogFindTid = {\r",
									"            url: url_staging_azure_cauldron,\r",
									"            method: 'POST',\r",
									"            header: headersOptSearchLogFindTid,\r",
									"            body: httpRequestSearchLogFindTid\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsSearchLogFindTid);\r",
									"        let jsonDataSearchLogFindTid = await response.json();\r",
									"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
									"        console.log('hits', hits)\r",
									"\r",
									"        // find tid\r",
									"        for (let i = 0; i < hits.length; i++) {\r",
									"            // let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"\r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            if (applicationNameValue == applicationName) {\r",
									"                let tid = hits[i]._source.cauldron.tid;\r",
									"                pm.environment.set(\"tid\", tid);\r",
									"                break;\r",
									"            }\r",
									"        }\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"CheckLog = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCheckLog = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = pm.environment.get(\"tid\");\r",
									"\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\", valueSearch)\r",
									"\r",
									"        // body\r",
									"        let httpRequestCheckLog = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({ \"version\": true, \"size\": 500, \"sort\": [{ \"@timestamp_es\": { \"order\": \"desc\", \"unmapped_type\": \"boolean\" } }], \"_source\": { \"excludes\": [] }, \"aggs\": { \"2\": { \"date_histogram\": { \"field\": \"@timestamp_es\", \"fixed_interval\": \"30s\", \"time_zone\": \"Asia/Bangkok\", \"min_doc_count\": 1 } } }, \"stored_fields\": [\"*\"], \"script_fields\": {}, \"docvalue_fields\": [{ \"field\": \"@timestamp_es\", \"format\": \"date_time\" }, { \"field\": \"cauldron.custom1.activityLog.endTime\", \"format\": \"date_time\" }, { \"field\": \"cauldron.custom1.activityLog.startTime\", \"format\": \"date_time\" }, { \"field\": \"time\", \"format\": \"date_time\" }], \"query\": { \"bool\": { \"must\": [], \"filter\": [{ \"multi_match\": { \"type\": \"best_fields\", \"query\": '\"' + valueSearch + '\"', \"lenient\": true } }, { \"range\": { \"@timestamp_es\": { \"format\": \"strict_date_optional_time\", \"gte\": setRangeGTE, \"lte\": setRangeLTE } } }], \"should\": [], \"must_not\": [] } }, \"highlight\": { \"pre_tags\": [\"@kibana-highlighted-field@\"], \"post_tags\": [\"@/kibana-highlighted-field@\"], \"fields\": { \"*\": {} }, \"fragment_size\": 2147483647 } })\r",
									"        };\r",
									"        let optionsCheckLog = {\r",
									"            url: url_staging_azure_cauldron,\r",
									"            method: 'POST',\r",
									"            header: headersOptCheckLog,\r",
									"            body: httpRequestCheckLog\r",
									"        };\r",
									"        let response = await reqPromise(optionsCheckLog);\r",
									"        let jsonDataCheckLog = await response.json();\r",
									"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataCheckLog.hits.hits\r",
									"        console.log('hits', hits)\r",
									"\r",
									"        // find logType\r",
									"        for (let i = 0; i < hits.length; i++) {\r",
									"            //  let logType = hits[i]._source.cauldron.logType\r",
									"            let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"\r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"\r",
									"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
									"            // console.log('resultDataLog',resultDataLog)\r",
									"\r",
									"            let tidControl = x_ais_OrderRef_InquiryThing + current_timestamp;\r",
									"            // console.log(tidControl);\r",
									"            if (applicationNameValue == applicationName) {\r",
									"\r",
									"                if (logType == logTypeSummary && applicationNameValue == applicationName) { // 'Summary' and ProvisioningAPIs\r",
									"                    pm.test(\"Check Summary Log : InquiryThing\" , function () {\r",
									"                        console.log(\"======== Check Summary Log ( Expected = Actual) [InquiryThing] ==================\");\r",
									"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
									"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
									"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeSuccess);\r",
									"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionInquiryThing);\r",
									"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
									"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
									"                        // console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
									"\r",
									"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp);\r",
									"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName);\r",
									"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeSuccess);\r",
									"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionInquiryThing);\r",
									"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp);\r",
									"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary);\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace);\r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName);\r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId);\r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
									"                        // pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
									"\r",
									"                        // check custom\r",
									"                        // \\\"custom\\\":{ \\\"endPointSummary\\\":[ { \\\"no\\\":\\\"1\\\", \\\"endPointName\\\":\\\"db.AccountsCollection\\\", \\\"responseStatus\\\":\\\"Success:InquiryAccount was successfully.\\\", \\\"processTime\\\":10.6148 }, { \\\"no\\\":\\\"2\\\", \\\"endPointName\\\":\\\"db.ThingsCollection\\\", \\\"responseStatus\\\":\\\"Success:InquiryThing was successfully.\\\", \\\"processTime\\\":9.0435 } ] }\r",
									"                        let custom = resultDataLog.custom.endPointSummary;\r",
									"                        let countCustom = custom.length;\r",
									"                       \r",
									"                        // [\"db.AccountsCollection\",\"db.ThingsCollection\"]\r",
									"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_InquiryThing;\r",
									"                        // [\"Success:InquiryAccount was successfully.\",\"Success:InquiryThing was successfully.\"]\r",
									"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_InquiryThing;\r",
									"                        let countCustomStep = dataEndPointName.length;\r",
									"\r",
									"                        console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep);\r",
									"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
									"                        \r",
									"                        for(let i=0;i<countCustomStep;i++){\r",
									"                            let no = custom[i].no;\r",
									"                            let valueEndPointName = custom[i].endPointName;\r",
									"                            let valueResponseStatus = custom[i].responseStatus;\r",
									"                            // console.log(\"i\",i);\r",
									"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
									"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
									"\r",
									"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString());\r",
									"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i]);\r",
									"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i]);\r",
									"\r",
									"                            pm.expect(no).to.eql((i+1).toString()); \r",
									"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
									"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]); \r",
									"                        }\r",
									"                    });\r",
									"                }\r",
									"\r",
									"                if (logType == logTypeDetail && applicationNameValue == applicationName) { //'Detail' and ProvisioningAPIs\r",
									"\r",
									"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
									"                    // console.log('endPointNameValue ',endPointNameValue)\r",
									"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [InquiryThing]\", function () {\r",
									"                        console.log(\"======== Check Detail Log ( Expected = Actual) [InquiryThing] ==================\");\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
									"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
									"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
									"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.custom1.activityLog.processTime + \" = \" + resultDataLog.custom1.activityLog.processTime);\r",
									"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
									"\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail);\r",
									"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail);\r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace);\r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName);\r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId);\r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime);\r",
									"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail);\r",
									"\r",
									"                        if (endPointNameValue == endPointNameProvisioningAPIs) {     //\"endPointName\":\"ProvisioningAPIs\"\r",
									"                            console.log(\"custom1.endPointName : \" + resultDataLog.custom1.endPointName + \" = \" + endPointNameProvisioningAPIs); \r",
									"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs);\r",
									"\r",
									"                            // check requestObject\r",
									"                            // \"requestObject\":\"{ \\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Thing/InquiryThing\\\", \\\"method\\\":\\\"POST\\\", \\\"headers\\\":{ \\\"x-ais-username\\\":\\\"AisPartner\\\", \\\"x-ais-orderref\\\":\\\"InquiryThing_202104081704157\\\", \\\"x-ais-orderdesc\\\":\\\"InquiryThing\\\", \\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAGUJ9zLPcvr1srlapD3VLIkylxBptnfFGrsXbdYpFNnXEIlAkkY2KW0\\\", \\\"x-ais-accountkey\\\":\\\"606edc1663fa0e0001bf6e45\\\" }, \\\"body\\\":{ \\\"ThingId\\\":\\\"606edc1863fa0e0001bf6e4d\\\" } }\"\r",
									"\r",
									"                            // \\\"requestObject\\\":\\\"{ \\\\\\\"url\\\\\\\":\\\\\\\"mg-iot.sandais.com/api/v1/Thing/InquiryThing\\\\\\\", \\\\\\\"method\\\\\\\":\\\\\\\"POST\\\\\\\", \\\\\\\"headers\\\\\\\":{ \\\\\\\"x-ais-username\\\\\\\":\\\\\\\"AisPartner\\\\\\\", \\\\\\\"x-ais-orderref\\\\\\\":\\\\\\\"InquiryThing_202105101605655\\\\\\\", \\\\\\\"x-ais-orderdesc\\\\\\\":\\\\\\\"InquiryThing\\\\\\\", \\\\\\\"x-ais-accesstoken\\\\\\\":\\\\\\\"Bearer ibnxnVhs5Rx3IwglWv7/gVA/1TpQnKqAOBAADlRDvYhOpXwmlpYOEb5yfY5aZpoj0YRWRZM26i9HOqtc1fc1jpNDOK5JpISttmMEy59g2py7nLWonDe2YW2OPRGWSowk6+9ZihLU1fZ5d5jAqqrZaKlOAAI3N1TXDNLsHuKcOJMcERbCcaMqRaku+MY4/kzE+eyIdkfwwbjT91S2VQq+Wk2ooMWuLk6/DHVJhwbMP7Y8okAOp9ce95xhEKZA2al3WNgbucFuMgxKVegMrc8SMg==\\\\\\\", \\\\\\\"x-ais-accountkey\\\\\\\":\\\\\\\"6098fa735316540001b19d6d\\\\\\\" }, \\\\\\\"body\\\\\\\":{ \\\\\\\"ThingId\\\\\\\":\\\\\\\"6098fa755316540001b19d77\\\\\\\" } }\\\"\r",
									"\r",
									"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
									"                            //  console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
									"\r",
									"                            let url = urlCheckLog + requestObjectUrlStaging;\r",
									"                            let x_ais_orderref = x_ais_OrderRef_InquiryThing + current_timestamp;\r",
									"                            let x_ais_orderdesc = x_ais_OrderDesc_InquiryThing;\r",
									"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken2\");\r",
									"                            let x_ais_userName = x_ais_UserName_AisPartner;\r",
									"                            let x_ais_AccountKey = pm.environment.get(\"accountId_role_other\");\r",
									"                            \r",
									"                            let ThingId = pm.environment.get(\"GetResponse_ThingID\");\r",
									"                            let ThingName = pm.environment.get(\"ThingName\");\r",
									"                            let resIMEI = (pm.environment.get(\"random_IM\")).replace(\" \", \"\");\r",
									"                            let resIMSI = (pm.environment.get(\"random_IM\")).replace(\" \", \"\");\r",
									"                            let resICCID = fieldDataValue.Provisioning.Thing.CreateThing.ICCIDPre + (pm.environment.get(\"random_ICCID\")).replace(\" \", \"\");\r",
									"                            let RouteInfoMIMO_ID = pm.environment.get(\"MIMO_ID\");\r",
									"                            let RouteInfoMIMO_SerialNo = pm.environment.get(\"MIMO_SerialNo\");\r",
									"\r",
									"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
									"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
									"                            console.log(\"headers.x_ais_userName : \" + jsonParseRequestObject.headers[header_x_ais_username] + \" = \" + x_ais_userName);\r",
									"                            console.log(\"headers.x_ais_AccountKey : \" + jsonParseRequestObject.headers[header_x_ais_accountkey] + \" = \" + x_ais_AccountKey);\r",
									"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
									"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.url).to.eql(url);\r",
									"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_username]).to.eql(x_ais_userName);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accountkey]).to.eql(x_ais_AccountKey);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
									"\r",
									"                            console.log(\"resquest.body.ThingId : \" + jsonParseRequestObject.body.ThingId + \" = \" + ThingId);\r",
									"                            pm.expect(jsonParseRequestObject.body.ThingId).to.eql(ThingId);\r",
									"\r",
									"                            // check responseObject\r",
									"                            // \"responseObject\":\"{\\\"ThingInfo\\\":[{\\\"ThingId\\\":\\\"606edc1863fa0e0001bf6e4d\\\",\\\"ThingName\\\":\\\"QAtestthing_T01511537\\\",\\\"ThingToken\\\":\\\"6d53ab03-cfbc-40f7-bd07-cc5d74cb2679\\\",\\\"ThingStatus\\\":\\\"Active\\\",\\\"IMEI\\\":\\\"427666067926748\\\",\\\"IMSI\\\":\\\"427666067926748\\\", \\\"ICCID\\\":\\\"8966034190840384338\\\",\\\"RouteInfo\\\":{\\\"MIMO_ID\\\":\\\"606edada\\\",\\\"MIMO_SerialNo\\\":\\\"5466758878\\\"},\\\"StateInfo\\\":{}}],\\\"_Metadata\\\":{\\\"TotalCount\\\":1,\\\"Limit\\\":10000,\\\"OffSet\\\":0 },\\\"OperationStatus\\\":{\\\"Code\\\":\\\"20000\\\",\\\"Description\\\":\\\"InquiryThing is Success\\\"}}\"\r",
									"\r",
									"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
									"                            // console.log('jsonParseResponseObject',jsonParseResponseObject);\r",
									"                            let countRes = jsonParseResponseObject.ThingInfo;\r",
									"                            for(let i=0;i<countRes.length;i++){\r",
									"                                console.log(\"response.ThingInfo[\" + [i] +\"].ThingId : \" + jsonParseResponseObject.ThingInfo[i].ThingId + \" = \" + ThingId);\r",
									"                                console.log(\"response.ThingInfo[\" + [i] +\"].ThingName : \" + jsonParseResponseObject.ThingInfo[i].ThingName + \" = \" + ThingName);\r",
									"                                console.log(\"response.ThingInfo[\" + [i] +\"].IMEI : \" + jsonParseResponseObject.ThingInfo[i].IMEI + \" = \" + resIMEI);\r",
									"                                console.log(\"response.ThingInfo[\" + [i] +\"].IMSI : \" + jsonParseResponseObject.ThingInfo[i].IMSI + \" = \" + resIMSI);\r",
									"                                console.log(\"response.ThingInfo[\" + [i] +\"].ICCID : \" + jsonParseResponseObject.ThingInfo[i].ICCID + \" = \" + resICCID);\r",
									"                                console.log(\"response.ThingInfo[\" + [i] +\"].RouteInfo.MIMO_ID : \" + jsonParseResponseObject.ThingInfo[i].RouteInfo.MIMO_ID + \" = \" + RouteInfoMIMO_ID);\r",
									"                                console.log(\"response.ThingInfo[\" + [i] +\"].RouteInfo.MIMO_SerialNo : \" + jsonParseResponseObject.ThingInfo[i].RouteInfo.MIMO_SerialNo + \" = \" + RouteInfoMIMO_SerialNo);\r",
									"\r",
									"                                pm.expect(jsonParseResponseObject.ThingInfo[i].ThingId).to.eql(ThingId);\r",
									"                                pm.expect(jsonParseResponseObject.ThingInfo[i].ThingName).to.eql(ThingName);\r",
									"                                pm.expect(jsonParseResponseObject.ThingInfo[i].IMEI).to.eql(resIMEI);\r",
									"                                pm.expect(jsonParseResponseObject.ThingInfo[i].IMSI).to.eql(resIMSI);\r",
									"                                pm.expect(jsonParseResponseObject.ThingInfo[i].ICCID).to.eql(resICCID);\r",
									"                                pm.expect(jsonParseResponseObject.ThingInfo[i].RouteInfo.MIMO_ID).to.eql(RouteInfoMIMO_ID);\r",
									"                                pm.expect(jsonParseResponseObject.ThingInfo[i].RouteInfo.MIMO_SerialNo).to.eql(RouteInfoMIMO_SerialNo);\r",
									"                            }\r",
									"    \r",
									"                            console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeSuccess);\r",
									"                            console.log(\"response.OperationStatus.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionInquiryThing); \r",
									"\r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeSuccess);\r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionInquiryThing);\r",
									"                        }\r",
									"                    });\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"setTimeout(function(){SearchLogFindTid();}, 10000); \r",
									"setTimeout(function(){CheckLog();}, 30000); \r",
									"\r",
									"setTimeout(function(){RemoveThing();}, 40000); \r",
									"setTimeout(function(){RemoveAccount();}, 50000); \r",
									"setTimeout(function(){RemovePartner();}, 60000); \r",
									"\r",
									"setTimeout(function(){\r",
									"pm.environment.unset(\"current_timestamp\");\r",
									"pm.environment.unset(\"AccessToken\");\r",
									"pm.environment.unset(\"AccessToken2\");\r",
									"pm.environment.unset(\"random_number\");\r",
									"pm.environment.unset(\"PartnerName\");\r",
									"pm.environment.unset(\"MerchantContact\");\r",
									"pm.environment.unset(\"CPID\");\r",
									"pm.environment.unset(\"GetResponse_PartnerId\");\r",
									"pm.environment.unset(\"AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountId\");\r",
									"pm.environment.unset(\"random_IM\");\r",
									"pm.environment.unset(\"random_ICCID\");\r",
									"pm.environment.unset(\"ThingName\");\r",
									"pm.environment.unset(\"RouteUrl\");\r",
									"pm.environment.unset(\"MIMO_ID\");\r",
									"pm.environment.unset(\"MIMO_SerialNo\");\r",
									"pm.environment.unset(\"GetResponse_ThingID\");\r",
									"pm.environment.unset(\"tid\");\r",
									"}, 65000);\r",
									"setTimeout(function(){}, 70000); "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var Username = pm.environment.get(\"Username\");\r",
									"var Password = pm.environment.get(\"Password\");\r",
									"var Username_CustomerAdmin = pm.environment.get(\"Username_CustomerAdmin\");\r",
									"var Password_CustomerAdmin = pm.environment.get(\"Password_CustomerAdmin\");\r",
									"var accountId_role_other = pm.environment.get(\"accountId_role_other\");\r",
									"\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"pm.environment.set(\"MIMO_ID\",fieldDataValue.Provisioning.Thing.CreateThing.RouteInfoMIMOIDValue)\r",
									"pm.environment.set(\"MIMO_SerialNo\",fieldDataValue.Provisioning.Thing.CreateThing.RouteInfoMIMOSerialNoValue)\r",
									"\r",
									"//format YYYYMMDDHHMMSSS\r",
									"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
									"// console.log('currentTmestamp',currentTmestamp);\r",
									"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- statusCodeList --------------//\r",
									"//set variable to statusCodeList JSON.parse\r",
									"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
									"//set global variable to statusCode 200\r",
									"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
									"//set global variable to statusCode 201\r",
									"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultCodeList --------------//\r",
									"//set variable to resultCodeList JSON.parse\r",
									"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
									"//set global variable to resultCode \"20000\"\r",
									"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
									"//set global variable to resultCode \"20100\"\r",
									"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionSuccessList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
									"//set global variable to resultDescription \"SignInProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
									"//set global variable to resultDescription \"CreatePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
									"//set global variable to resultDescription \"CreateAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
									"//set global variable to resultDescription \"CreateThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThing\", resultDescriptionSuccessList.resultDescriptionCreateThing);\r",
									"//set global variable to resultDescription \"RemovePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
									"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
									"//set global variable to resultDescription \"RemoveThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThing\", resultDescriptionSuccessList.resultDescriptionRemoveThing);\r",
									"//set global variable to resultDescription \"InquiryThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionInquiryThing\", resultDescriptionSuccessList.resultDescriptionInquiryThing);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- HeaderList --------------//\r",
									"//set variable to HeaderList JSON.parse\r",
									"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
									"//---------------- set globals Other --------------//\r",
									"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
									"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
									"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
									"//set global variable to kbn-versio \"7.5.1\"\r",
									"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Signin_ --------------//\r",
									"//set global variable to x_ais_OrderRef \"Signin_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreatePartner --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
									"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
									"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
									"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreateAccount --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
									"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
									"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Thing --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThing\", HeaderList.Thing.x_ais_OrderRef_CreateThing);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThing\", HeaderList.Thing.x_ais_OrderDesc_CreateThing);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThing\", HeaderList.Thing.x_ais_OrderRef_RemoveThing);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThing\", HeaderList.Thing.x_ais_OrderDesc_RemoveThing);\r",
									"//set global variable to x_ais_OrderRef \"InquiryThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_InquiryThing\", HeaderList.Thing.x_ais_OrderRef_InquiryThing);\r",
									"//set global variable to x_ais_OrderDesc \"InquiryThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_InquiryThing\", HeaderList.Thing.x_ais_OrderDesc_InquiryThing);\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"SignInProcess is Success\"\r",
									"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
									"//get global variable to resultDescription \"CreatePartner is Success\"\r",
									"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
									"//get global variable to resultDescription \"CreateAccount is Success\"\r",
									"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
									"//get global variable to resultDescription \"CreateThing is Success\"\r",
									"var resultDescriptionCreateThing = pm.globals.get(\"resultDescriptionCreateThing\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- urlRouteList --------------//\r",
									"//set variable to urlRouteList JSON.parse\r",
									"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
									"//---------------- set url Create --------------//\r",
									"//set global variable to url \"/api/v1/auth/signin\"\r",
									"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
									"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
									"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"pm.globals.set(\"urlThingCreateThing\", urlRouteList.Thing.urlThingCreateThing);\r",
									"//---------------- get url Create --------------//\r",
									"//get global variable to url \"/api/v1/auth/signin\"\r",
									"var urlSignin = pm.globals.get(\"urlSignin\");\r",
									"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
									"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"var urlThingCreateThing = pm.globals.get(\"urlThingCreateThing\");\r",
									"//---------------- set url Remove --------------//\r",
									"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
									"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"pm.globals.set(\"urlThingRemoveThing\", urlRouteList.Thing.urlThingRemoveThing);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Signin_ --------------//\r",
									"//get global variable to x_ais_OrderRef \"Signin_\"\r",
									"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"var x_ais_OrderRef_CreateThing = pm.globals.get(\"x_ais_OrderRef_CreateThing\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"var x_ais_OrderDesc_CreateThing = pm.globals.get(\"x_ais_OrderDesc_CreateThing\");\r",
									"//------------------------------------------------------------//\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// Signin get token\r",
									" Signin = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSignin = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestSignin = {\r",
									"            mode: 'raw',\r",
									"            raw: \r",
									"            JSON.stringify({\r",
									"                username:Username,\r",
									"                password:Password\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsSignin = {\r",
									"            url: url + provisioningapis + urlSignin,\r",
									"            method: 'POST',\r",
									"            header: headersOptSignin,\r",
									"            body: httpRequestSignin\r",
									"        };\r",
									"        // console.log('request Signin');\r",
									"        let response = await reqPromise(optionsSignin);\r",
									"        let jsonDataSignin = await response.json();\r",
									"\r",
									"        // setAccessToken\r",
									"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
									"\r",
									"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // SignInProcess is Success\r",
									"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
									"        });\r",
									"\r",
									"        //set random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //set PartnerName\r",
									"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
									"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
									"        //set MerchantContact\r",
									"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
									"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
									"        // set CPID\r",
									"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
									"        pm.environment.set(\"CPID\", CPIDValue)\r",
									"        \r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreatePartner\r",
									" CreatePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreatePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreatePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
									"                \"PartnerType\": fieldDataValue.Partner.PartnerTypeValue, //[\"Supplier\",\"Customer\"]\r",
									"                \"PartnerDetail\": {\r",
									"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
									"                    \"CPID\": pm.environment.get(\"CPID\")\r",
									"                },\r",
									"                \"Property\": {\r",
									"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsCreatePartner = {\r",
									"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreatePartner,\r",
									"            body: httpRequestCreatePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsCreatePartner);\r",
									"        let jsonDataCreatePartner = await response.json();\r",
									"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
									"    \r",
									"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreatePartner is Success\r",
									"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
									"        });\r",
									"\r",
									"        //GetResponse_PartnerId\r",
									"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
									"\r",
									"        //Accountname\r",
									"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
									"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateAccount\r",
									" CreateAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreateAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
									"                })\r",
									"        };\r",
									"        \r",
									"        let optionsCreateAccount = {\r",
									"            url: url + provisioningapis + urlAccountCreateAccount,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateAccount,\r",
									"            body: httpRequestCreateAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateAccount');\r",
									"        let response = await reqPromise(optionsCreateAccount);\r",
									"        let jsonDataCreateAccount = await response.json();\r",
									"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
									"    \r",
									"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateAccount : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateAccount is Success\r",
									"        pm.test('CreateAccount : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
									"        });\r",
									"        // GetResponse_AccountName\r",
									"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
									"        // GetResponse_AccountId\r",
									"        pm.environment.set(\"GetResponse_AccountId\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
									"        // random_IM\r",
									"        pm.environment.set(\"random_IM\", _.random(10000000, 99999999)+\" \"+_.random(1000000, 9999999))\r",
									"        // random_ICCID\r",
									"        pm.environment.set(\"random_ICCID\", _.random(1000000, 9999999)+\" \"+_.random(100000, 999999))\r",
									"        // random_number\r",
									"        pm.environment.set(\"random_number\",pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //ThingName\r",
									"        let thingNameValue = fieldDataValue.Provisioning.Thing.ThingNameValue; // \"QAtestthing_T01\"\r",
									"        pm.environment.set(\"ThingName\", thingNameValue + pm.environment.get(\"random_number\"))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThing\r",
									"CreateThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateThing+ current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey':accountId_role_other,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreateThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingName\": pm.environment.get(\"ThingName\"),\r",
									"                \"IMEI\": pm.environment.get(\"random_IM\"),\r",
									"                \"IMSI\": pm.environment.get(\"random_IM\"),\r",
									"                \"ICCID\": pm.environment.get(\"random_ICCID\"),\r",
									"                \"RouteUrl\": fieldDataValue.Provisioning.Thing.CreateThing.RouteUrlValue , //[\"http://10.12.3.4:2019/api/information/AddInformation\"]\r",
									"                \"RouteInfo\": {\r",
									"                    \"MIMO_ID\": pm.environment.get(\"MIMO_ID\") , //\"606edada\"\r",
									"                    \"MIMO_SerialNo\": pm.environment.get(\"MIMO_SerialNo\") //5466758878\r",
									"                },\r",
									"                \"RouteFlag\": {\r",
									"                    \"ThingName\": fieldDataValue.Provisioning.Thing.CreateThing.RouteFlagThingNameValue , //true\r",
									"                    \"ThingToken\": fieldDataValue.Provisioning.Thing.CreateThing.RouteFlagThingTokenValue, //true\r",
									"                    \"IMEI\": fieldDataValue.Provisioning.Thing.CreateThing.RouteFlagIMEIValue, //true\r",
									"                    \"ICCID\": fieldDataValue.Provisioning.Thing.CreateThing.RouteFlagICCIDValue, //true\r",
									"                    \"RouteInfo\": fieldDataValue.Provisioning.Thing.CreateThing.RouteFlagRouteInfoValue //true\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsCreateThing = {\r",
									"            url: url + provisioningapis + urlThingCreateThing,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThing,\r",
									"            body: httpRequestCreateThing\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThing');\r",
									"        let response = await reqPromise(optionsCreateThing);\r",
									"        let jsonDataCreateThing = await response.json();\r",
									"        // console.log('jsonDataCreateThing',jsonDataCreateThing)\r",
									"    \r",
									"        let operationStatusCreateThing = await jsonDataCreateThing.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateThing : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateThing : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateThing is Success\r",
									"        pm.test('CreateThing : OperationStatus Description is '+'\"'+ resultDescriptionCreateThing+'\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Description', resultDescriptionCreateThing);\r",
									"        });\r",
									"\r",
									"        pm.environment.set(\"GetResponse_ThingID\",jsonDataCreateThing.ThingInfo.ThingId)\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// Signin get token\r",
									" Signin2 = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSignin = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestSignin = {\r",
									"            mode: 'raw',\r",
									"            raw: \r",
									"            JSON.stringify({\r",
									"                username:Username_CustomerAdmin,\r",
									"                password:Password_CustomerAdmin\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsSignin = {\r",
									"            url: url + provisioningapis + urlSignin,\r",
									"            method: 'POST',\r",
									"            header: headersOptSignin,\r",
									"            body: httpRequestSignin\r",
									"        };\r",
									"        // console.log('request Signin');\r",
									"        let response = await reqPromise(optionsSignin);\r",
									"        let jsonDataSignin = await response.json();\r",
									"\r",
									"        // setAccessToken\r",
									"        await pm.environment.set(\"AccessToken2\" , jsonDataSignin.AccessToken);\r",
									"\r",
									"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // SignInProcess is Success\r",
									"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
									"        });\r",
									"        \r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"Signin();\r",
									"setTimeout(async function(){await CreatePartner();}, 3000); \r",
									"setTimeout(async function(){await CreateAccount();}, 6000); \r",
									"setTimeout(async function(){await CreateThing();}, 8000); \r",
									"setTimeout(async function(){await Signin2();}, 9000); \r",
									"setTimeout(async function(){}, 9500);  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-ais-UserName",
								"type": "text",
								"value": "{{x_ais_UserName_AisPartner}}"
							},
							{
								"key": "x-ais-OrderRef",
								"value": "{{x_ais_OrderRef_InquiryThing}}{{current_timestamp}}"
							},
							{
								"key": "x-ais-OrderDesc",
								"type": "text",
								"value": "{{x_ais_OrderDesc_InquiryThing}}"
							},
							{
								"key": "x-ais-AccessToken",
								"value": "{{Bearer}} {{AccessToken2}}"
							},
							{
								"key": "x-ais-AccountKey",
								"type": "text",
								"value": "{{accountId_role_other}}"
							},
							{
								"key": "Accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"ThingId\": \"{{GetResponse_ThingID}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}{{provisioningapis}}/api/v1/Thing/InquiryThing",
							"host": [
								"{{url}}{{provisioningapis}}"
							],
							"path": [
								"api",
								"v1",
								"Thing",
								"InquiryThing"
							]
						},
						"description": "Type:Desire"
					},
					"response": []
				},
				{
					"name": "InquiryThing_TST_F13_1_1_009_Success_InquiryByConfigGroupId_Supplier",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to xAisOrderRef \"RemoveThing_\"\r",
									"var x_ais_OrderRef_RemoveThing = pm.globals.get(\"x_ais_OrderRef_RemoveThing\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"var x_ais_OrderDesc_RemoveThing = pm.globals.get(\"x_ais_OrderDesc_RemoveThing\");\r",
									"//get global variable to x_ais_OrderRef \"InquiryThing_\"\r",
									"var x_ais_OrderRef_InquiryThing = pm.globals.get(\"x_ais_OrderRef_InquiryThing\");\r",
									"//get global variable to x_ais_OrderDesc \"InquiryThing\"\r",
									"var x_ais_OrderDesc_InquiryThing = pm.globals.get(\"x_ais_OrderDesc_InquiryThing\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get url Remove --------------//\r",
									"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
									"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"var urlThingRemoveThing = pm.globals.get(\"urlThingRemoveThing\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"RemovePartner is Success\"\r",
									"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
									"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
									"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
									"//get global variable to resultDescription \"RemoveThing is Success\"\r",
									"var resultDescriptionRemoveThing = pm.globals.get(\"resultDescriptionRemoveThing\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to resultDescription \"InquiryThing is Success\"\r",
									"var resultDescriptionInquiryThing = pm.globals.get(\"resultDescriptionInquiryThing\");\r",
									"//------------------------------------------------------------//\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"InquiryThing : Status code is \" + statusCodeSuccess, function () {\r",
									"    pm.response.to.have.status(statusCodeSuccess);\r",
									"});\r",
									"\r",
									"pm.test('InquiryThing : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeSuccess);\r",
									"});\r",
									"\r",
									"pm.test('InquiryThing : OperationStatus Description is '+'\"'+ resultDescriptionInquiryThing+'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionInquiryThing);\r",
									"});\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// RemovePartner\r",
									" RemovePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemovePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemovePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemovePartner = {\r",
									"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemovePartner,\r",
									"            body: httpRequestRemovePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request RemovePartner');\r",
									"        let response = await reqPromise(optionsRemovePartner);\r",
									"        let jsonDataRemovePartner = await response.json();\r",
									"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
									"    \r",
									"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemovePartner is Success\r",
									"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveAccount\r",
									" RemoveAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemoveAccount = {\r",
									"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveAccount,\r",
									"            body: httpRequestRemoveAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveAccount');\r",
									"        let response = await reqPromise(optionsRemoveAccount);\r",
									"        let jsonDataRemoveAccount = await response.json();\r",
									"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
									"    \r",
									"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveAccount is Success\r",
									"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThing\r",
									" RemoveThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"accountId_role_other\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThing = {\r",
									"            url: url + provisioningapis + urlThingRemoveThing,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThing,\r",
									"            body: httpRequestRemoveThing\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveThing');\r",
									"        let response = await reqPromise(optionsRemoveThing);\r",
									"        let jsonDataRemoveThing = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThing)\r",
									"    \r",
									"        let operationStatusRemoveThing = await jsonDataRemoveThing.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThing : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThing : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThing is Success\r",
									"        pm.test('RemoveThing : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThing+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Description', resultDescriptionRemoveThing);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"\r",
									"//---------------- LogDefaultValue --------------//\r",
									"//set variable to LogDefaultValue JSON.parse\r",
									"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
									"// console.log('LogDefaultValue',LogDefaultValue);\r",
									"//---------------- set globals Other --------------//\r",
									"var SearchLog = LogDefaultValue.SearchLog;\r",
									"// console.log('SearchLog',SearchLog);\r",
									"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
									"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
									"var kbn_version = SearchLog.header.kbn_version;\r",
									"var authorization = SearchLog.header.Authorization;\r",
									"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
									"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
									"var namespace = LogDefaultValue.Other.namespace;\r",
									"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
									"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
									"var header_x_ais_username = LogDefaultValue.Other.header_x_ais_username;\r",
									"var header_x_ais_accountkey = LogDefaultValue.Other.header_x_ais_accountkey;\r",
									"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
									"var methodPost = LogDefaultValue.Other.methodPost;\r",
									"\r",
									"// Detail\r",
									"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
									"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
									"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
									"\r",
									"// Summary\r",
									"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
									"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
									"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
									"\r",
									"// ProvisioningAPIs [InquiryThing]\r",
									"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
									"var cmdName = LogDefaultValue.Provisioning.Thing.cmdNameInquiryThing;\r",
									"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
									"var containerId = LogDefaultValue.Provisioning.containerId;\r",
									"var requestObjectUrlStaging = LogDefaultValue.Provisioning.Thing.requestObjectUrlInquiryThingMgStaging;\r",
									"\r",
									"// Check CDR (Summary Log) and EDR (Detail Log)\r",
									"SearchLogFindTid = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSearchLogFindTid = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = x_ais_OrderRef_InquiryThing + current_timestamp;\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\", valueSearch)\r",
									"\r",
									"        // body\r",
									"        let httpRequestSearchLogFindTid = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({ \"version\": \"true\", \"size\": 500, \"sort\": [{ \"@timestamp_es\": { \"order\": \"desc\", \"unmapped_type\": \"boolean\" } }], \"_source\": { \"excludes\": [] }, \"aggs\": { \"2\": { \"date_histogram\": { \"field\": \"@timestamp_es\", \"fixed_interval\": \"30s\", \"time_zone\": \"Asia/Bangkok\", \"min_doc_count\": 1 } } }, \"stored_fields\": [\"*\"], \"script_fields\": {}, \"docvalue_fields\": [{ \"field\": \"@timestamp_es\", \"format\": \"date_time\" }, { \"field\": \"cauldron.custom1.activityLog.endTime\", \"format\": \"date_time\" }, { \"field\": \"cauldron.custom1.activityLog.startTime\", \"format\": \"date_time\" }, { \"field\": \"time\", \"format\": \"date_time\" }], \"query\": { \"bool\": { \"must\": [], \"filter\": [{ \"multi_match\": { \"type\": \"best_fields\", \"query\": '\"' + valueSearch + '\"', \"lenient\": \"true\" } }, { \"range\": { \"@timestamp_es\": { \"format\": \"strict_date_optional_time\", \"gte\": setRangeGTE, \"lte\": setRangeLTE } } }], \"should\": [], \"must_not\": [] } }, \"highlight\": { \"pre_tags\": [\"@kibana-highlighted-field@\"], \"post_tags\": [\"@/kibana-highlighted-field@\"], \"fields\": { \"*\": {} }, \"fragment_size\": 2147483647 } })\r",
									"        };\r",
									"\r",
									"        let optionsSearchLogFindTid = {\r",
									"            url: url_staging_azure_cauldron,\r",
									"            method: 'POST',\r",
									"            header: headersOptSearchLogFindTid,\r",
									"            body: httpRequestSearchLogFindTid\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsSearchLogFindTid);\r",
									"        let jsonDataSearchLogFindTid = await response.json();\r",
									"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
									"        console.log('hits', hits)\r",
									"\r",
									"        // find tid\r",
									"        for (let i = 0; i < hits.length; i++) {\r",
									"            // let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"\r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            if (applicationNameValue == applicationName) {\r",
									"                let tid = hits[i]._source.cauldron.tid;\r",
									"                pm.environment.set(\"tid\", tid);\r",
									"                break;\r",
									"            }\r",
									"        }\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"CheckLog = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCheckLog = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = pm.environment.get(\"tid\");\r",
									"\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\", valueSearch)\r",
									"\r",
									"        // body\r",
									"        let httpRequestCheckLog = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({ \"version\": true, \"size\": 500, \"sort\": [{ \"@timestamp_es\": { \"order\": \"desc\", \"unmapped_type\": \"boolean\" } }], \"_source\": { \"excludes\": [] }, \"aggs\": { \"2\": { \"date_histogram\": { \"field\": \"@timestamp_es\", \"fixed_interval\": \"30s\", \"time_zone\": \"Asia/Bangkok\", \"min_doc_count\": 1 } } }, \"stored_fields\": [\"*\"], \"script_fields\": {}, \"docvalue_fields\": [{ \"field\": \"@timestamp_es\", \"format\": \"date_time\" }, { \"field\": \"cauldron.custom1.activityLog.endTime\", \"format\": \"date_time\" }, { \"field\": \"cauldron.custom1.activityLog.startTime\", \"format\": \"date_time\" }, { \"field\": \"time\", \"format\": \"date_time\" }], \"query\": { \"bool\": { \"must\": [], \"filter\": [{ \"multi_match\": { \"type\": \"best_fields\", \"query\": '\"' + valueSearch + '\"', \"lenient\": true } }, { \"range\": { \"@timestamp_es\": { \"format\": \"strict_date_optional_time\", \"gte\": setRangeGTE, \"lte\": setRangeLTE } } }], \"should\": [], \"must_not\": [] } }, \"highlight\": { \"pre_tags\": [\"@kibana-highlighted-field@\"], \"post_tags\": [\"@/kibana-highlighted-field@\"], \"fields\": { \"*\": {} }, \"fragment_size\": 2147483647 } })\r",
									"        };\r",
									"        let optionsCheckLog = {\r",
									"            url: url_staging_azure_cauldron,\r",
									"            method: 'POST',\r",
									"            header: headersOptCheckLog,\r",
									"            body: httpRequestCheckLog\r",
									"        };\r",
									"        let response = await reqPromise(optionsCheckLog);\r",
									"        let jsonDataCheckLog = await response.json();\r",
									"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataCheckLog.hits.hits\r",
									"        console.log('hits', hits)\r",
									"\r",
									"        // find logType\r",
									"        for (let i = 0; i < hits.length; i++) {\r",
									"            //  let logType = hits[i]._source.cauldron.logType\r",
									"            let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"\r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"\r",
									"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
									"            // console.log('resultDataLog',resultDataLog)\r",
									"\r",
									"            let tidControl = x_ais_OrderRef_InquiryThing + current_timestamp;\r",
									"            // console.log(tidControl);\r",
									"            if (applicationNameValue == applicationName) {\r",
									"\r",
									"                if (logType == logTypeSummary && applicationNameValue == applicationName) { // 'Summary' and ProvisioningAPIs\r",
									"                    pm.test(\"Check Summary Log : InquiryThing\" , function () {\r",
									"                        console.log(\"======== Check Summary Log ( Expected = Actual) [InquiryThing] ==================\");\r",
									"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
									"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
									"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeSuccess);\r",
									"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionInquiryThing);\r",
									"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
									"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
									"                        // console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
									"\r",
									"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp);\r",
									"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName);\r",
									"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeSuccess);\r",
									"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionInquiryThing);\r",
									"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp);\r",
									"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary);\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace);\r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName);\r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId);\r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
									"                        // pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
									"\r",
									"                        // check custom\r",
									"                        // \\\"custom\\\":{ \\\"endPointSummary\\\":[ { \\\"no\\\":\\\"1\\\", \\\"endPointName\\\":\\\"db.AccountsCollection\\\", \\\"responseStatus\\\":\\\"Success:InquiryAccount was successfully.\\\", \\\"processTime\\\":10.6148 }, { \\\"no\\\":\\\"2\\\", \\\"endPointName\\\":\\\"db.ThingsCollection\\\", \\\"responseStatus\\\":\\\"Success:InquiryThing was successfully.\\\", \\\"processTime\\\":9.0435 } ] }\r",
									"                        let custom = resultDataLog.custom.endPointSummary;\r",
									"                        let countCustom = custom.length;\r",
									"                       \r",
									"                        // [\"db.AccountsCollection\",\"db.ThingsCollection\"]\r",
									"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_InquiryThing;\r",
									"                        // [\"Success:InquiryAccount was successfully.\",\"Success:InquiryThing was successfully.\"]\r",
									"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_InquiryThing;\r",
									"                        let countCustomStep = dataEndPointName.length;\r",
									"\r",
									"                        console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep);\r",
									"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
									"                        \r",
									"                        for(let i=0;i<countCustomStep;i++){\r",
									"                            let no = custom[i].no;\r",
									"                            let valueEndPointName = custom[i].endPointName;\r",
									"                            let valueResponseStatus = custom[i].responseStatus;\r",
									"                            // console.log(\"i\",i);\r",
									"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
									"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
									"\r",
									"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString());\r",
									"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i]);\r",
									"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i]);\r",
									"\r",
									"                            pm.expect(no).to.eql((i+1).toString()); \r",
									"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
									"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]); \r",
									"                        }\r",
									"                    });\r",
									"                }\r",
									"\r",
									"                if (logType == logTypeDetail && applicationNameValue == applicationName) { //'Detail' and ProvisioningAPIs\r",
									"\r",
									"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
									"                    // console.log('endPointNameValue ',endPointNameValue)\r",
									"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [InquiryThing]\", function () {\r",
									"                        console.log(\"======== Check Detail Log ( Expected = Actual) [InquiryThing] ==================\");\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
									"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
									"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
									"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.custom1.activityLog.processTime + \" = \" + resultDataLog.custom1.activityLog.processTime);\r",
									"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
									"\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail);\r",
									"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail);\r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace);\r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName);\r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId);\r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime);\r",
									"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail);\r",
									"\r",
									"                        if (endPointNameValue == endPointNameProvisioningAPIs) {     //\"endPointName\":\"ProvisioningAPIs\"\r",
									"                            console.log(\"custom1.endPointName : \" + resultDataLog.custom1.endPointName + \" = \" + endPointNameProvisioningAPIs); \r",
									"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs);\r",
									"\r",
									"                            // check requestObject\r",
									"                            // \"requestObject\":\"{ \\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Thing/InquiryThing\\\", \\\"method\\\":\\\"POST\\\", \\\"headers\\\":{ \\\"x-ais-username\\\":\\\"AisPartner\\\", \\\"x-ais-orderref\\\":\\\"InquiryThing_202104081704157\\\", \\\"x-ais-orderdesc\\\":\\\"InquiryThing\\\", \\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAGUJ9zLPcvr1srlapD3VLIkylxBptnfFGrsXbdYpFNnXEIlAkkY2KW0\\\", \\\"x-ais-accountkey\\\":\\\"606edc1663fa0e0001bf6e45\\\" }, \\\"body\\\":{ \\\"ThingId\\\":\\\"606edc1863fa0e0001bf6e4d\\\" } }\"\r",
									"\r",
									"                            // \\\"requestObject\\\":\\\"{ \\\\\\\"url\\\\\\\":\\\\\\\"mg-iot.sandais.com/api/v1/Thing/InquiryThing\\\\\\\", \\\\\\\"method\\\\\\\":\\\\\\\"POST\\\\\\\", \\\\\\\"headers\\\\\\\":{ \\\\\\\"x-ais-username\\\\\\\":\\\\\\\"AisPartner\\\\\\\", \\\\\\\"x-ais-orderref\\\\\\\":\\\\\\\"InquiryThing_202105101605655\\\\\\\", \\\\\\\"x-ais-orderdesc\\\\\\\":\\\\\\\"InquiryThing\\\\\\\", \\\\\\\"x-ais-accesstoken\\\\\\\":\\\\\\\"Bearer ibnxnVhs5Rx3IwglWv7/gVA/1TpQnKqAOBAADlRDvYhOpXwmlpYOEb5yfY5aZpoj0YRWRZM26i9HOqtc1fc1jpNDOK5JpISttmMEy59g2py7nLWonDe2YW2OPRGWSowk6+9ZihLU1fZ5d5jAqqrZaKlOAAI3N1TXDNLsHuKcOJMcERbCcaMqRaku+MY4/kzE+eyIdkfwwbjT91S2VQq+Wk2ooMWuLk6/DHVJhwbMP7Y8okAOp9ce95xhEKZA2al3WNgbucFuMgxKVegMrc8SMg==\\\\\\\", \\\\\\\"x-ais-accountkey\\\\\\\":\\\\\\\"6098fa735316540001b19d6d\\\\\\\" }, \\\\\\\"body\\\\\\\":{ \\\\\\\"ThingId\\\\\\\":\\\\\\\"6098fa755316540001b19d77\\\\\\\" } }\\\"\r",
									"\r",
									"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
									"                            //  console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
									"\r",
									"                            let url = urlCheckLog + requestObjectUrlStaging;\r",
									"                            let x_ais_orderref = x_ais_OrderRef_InquiryThing + current_timestamp;\r",
									"                            let x_ais_orderdesc = x_ais_OrderDesc_InquiryThing;\r",
									"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken2\");\r",
									"                            let x_ais_userName = x_ais_UserName_AisPartner;\r",
									"                            let x_ais_AccountKey = pm.environment.get(\"accountId_role_other\");\r",
									"                            \r",
									"                            let ThingId = pm.environment.get(\"GetResponse_ThingID\");\r",
									"                            let ThingName = pm.environment.get(\"ThingName\");\r",
									"                            let resIMEI = (pm.environment.get(\"random_IM\")).replace(\" \", \"\");\r",
									"                            let resIMSI = (pm.environment.get(\"random_IM\")).replace(\" \", \"\");\r",
									"                            let resICCID = fieldDataValue.Provisioning.Thing.CreateThing.ICCIDPre + (pm.environment.get(\"random_ICCID\")).replace(\" \", \"\");\r",
									"                            let RouteInfoMIMO_ID = pm.environment.get(\"MIMO_ID\");\r",
									"                            let RouteInfoMIMO_SerialNo = pm.environment.get(\"MIMO_SerialNo\");\r",
									"\r",
									"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
									"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
									"                            console.log(\"headers.x_ais_userName : \" + jsonParseRequestObject.headers[header_x_ais_username] + \" = \" + x_ais_userName);\r",
									"                            console.log(\"headers.x_ais_AccountKey : \" + jsonParseRequestObject.headers[header_x_ais_accountkey] + \" = \" + x_ais_AccountKey);\r",
									"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
									"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.url).to.eql(url);\r",
									"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_username]).to.eql(x_ais_userName);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accountkey]).to.eql(x_ais_AccountKey);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
									"\r",
									"                            console.log(\"resquest.body.ThingId : \" + jsonParseRequestObject.body.ThingId + \" = \" + ThingId);\r",
									"                            pm.expect(jsonParseRequestObject.body.ThingId).to.eql(ThingId);\r",
									"\r",
									"                            // check responseObject\r",
									"                            // \"responseObject\":\"{\\\"ThingInfo\\\":[{\\\"ThingId\\\":\\\"606edc1863fa0e0001bf6e4d\\\",\\\"ThingName\\\":\\\"QAtestthing_T01511537\\\",\\\"ThingToken\\\":\\\"6d53ab03-cfbc-40f7-bd07-cc5d74cb2679\\\",\\\"ThingStatus\\\":\\\"Active\\\",\\\"IMEI\\\":\\\"427666067926748\\\",\\\"IMSI\\\":\\\"427666067926748\\\", \\\"ICCID\\\":\\\"8966034190840384338\\\",\\\"RouteInfo\\\":{\\\"MIMO_ID\\\":\\\"606edada\\\",\\\"MIMO_SerialNo\\\":\\\"5466758878\\\"},\\\"StateInfo\\\":{}}],\\\"_Metadata\\\":{\\\"TotalCount\\\":1,\\\"Limit\\\":10000,\\\"OffSet\\\":0 },\\\"OperationStatus\\\":{\\\"Code\\\":\\\"20000\\\",\\\"Description\\\":\\\"InquiryThing is Success\\\"}}\"\r",
									"\r",
									"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
									"                            // console.log('jsonParseResponseObject',jsonParseResponseObject);\r",
									"                            let countRes = jsonParseResponseObject.ThingInfo;\r",
									"                            for(let i=0;i<countRes.length;i++){\r",
									"                                console.log(\"response.ThingInfo[\" + [i] +\"].ThingId : \" + jsonParseResponseObject.ThingInfo[i].ThingId + \" = \" + ThingId);\r",
									"                                console.log(\"response.ThingInfo[\" + [i] +\"].ThingName : \" + jsonParseResponseObject.ThingInfo[i].ThingName + \" = \" + ThingName);\r",
									"                                console.log(\"response.ThingInfo[\" + [i] +\"].IMEI : \" + jsonParseResponseObject.ThingInfo[i].IMEI + \" = \" + resIMEI);\r",
									"                                console.log(\"response.ThingInfo[\" + [i] +\"].IMSI : \" + jsonParseResponseObject.ThingInfo[i].IMSI + \" = \" + resIMSI);\r",
									"                                console.log(\"response.ThingInfo[\" + [i] +\"].ICCID : \" + jsonParseResponseObject.ThingInfo[i].ICCID + \" = \" + resICCID);\r",
									"                                console.log(\"response.ThingInfo[\" + [i] +\"].RouteInfo.MIMO_ID : \" + jsonParseResponseObject.ThingInfo[i].RouteInfo.MIMO_ID + \" = \" + RouteInfoMIMO_ID);\r",
									"                                console.log(\"response.ThingInfo[\" + [i] +\"].RouteInfo.MIMO_SerialNo : \" + jsonParseResponseObject.ThingInfo[i].RouteInfo.MIMO_SerialNo + \" = \" + RouteInfoMIMO_SerialNo);\r",
									"\r",
									"                                pm.expect(jsonParseResponseObject.ThingInfo[i].ThingId).to.eql(ThingId);\r",
									"                                pm.expect(jsonParseResponseObject.ThingInfo[i].ThingName).to.eql(ThingName);\r",
									"                                pm.expect(jsonParseResponseObject.ThingInfo[i].IMEI).to.eql(resIMEI);\r",
									"                                pm.expect(jsonParseResponseObject.ThingInfo[i].IMSI).to.eql(resIMSI);\r",
									"                                pm.expect(jsonParseResponseObject.ThingInfo[i].ICCID).to.eql(resICCID);\r",
									"                                pm.expect(jsonParseResponseObject.ThingInfo[i].RouteInfo.MIMO_ID).to.eql(RouteInfoMIMO_ID);\r",
									"                                pm.expect(jsonParseResponseObject.ThingInfo[i].RouteInfo.MIMO_SerialNo).to.eql(RouteInfoMIMO_SerialNo);\r",
									"                            }\r",
									"    \r",
									"                            console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeSuccess);\r",
									"                            console.log(\"response.OperationStatus.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionInquiryThing); \r",
									"\r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeSuccess);\r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionInquiryThing);\r",
									"                        }\r",
									"                    });\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"setTimeout(function(){SearchLogFindTid();}, 10000); \r",
									"setTimeout(function(){CheckLog();}, 30000); \r",
									"\r",
									"setTimeout(function(){RemoveThing();}, 40000); \r",
									"setTimeout(function(){RemoveAccount();}, 50000); \r",
									"setTimeout(function(){RemovePartner();}, 60000); \r",
									"\r",
									"setTimeout(function(){\r",
									"pm.environment.unset(\"current_timestamp\");\r",
									"pm.environment.unset(\"AccessToken\");\r",
									"pm.environment.unset(\"AccessToken2\");\r",
									"pm.environment.unset(\"random_number\");\r",
									"pm.environment.unset(\"PartnerName\");\r",
									"pm.environment.unset(\"MerchantContact\");\r",
									"pm.environment.unset(\"CPID\");\r",
									"pm.environment.unset(\"GetResponse_PartnerId\");\r",
									"pm.environment.unset(\"AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountId\");\r",
									"pm.environment.unset(\"random_IM\");\r",
									"pm.environment.unset(\"random_ICCID\");\r",
									"pm.environment.unset(\"ThingName\");\r",
									"pm.environment.unset(\"RouteUrl\");\r",
									"pm.environment.unset(\"MIMO_ID\");\r",
									"pm.environment.unset(\"MIMO_SerialNo\");\r",
									"pm.environment.unset(\"GetResponse_ThingID\");\r",
									"pm.environment.unset(\"tid\");\r",
									"}, 65000);\r",
									"setTimeout(function(){}, 70000); "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var Username = pm.environment.get(\"Username\");\r",
									"var Password = pm.environment.get(\"Password\");\r",
									"var Username_Supplier = pm.environment.get(\"Username_Supplier\");\r",
									"var Password_Supplier = pm.environment.get(\"Password_Supplier\");\r",
									"var accountId_role_other = pm.environment.get(\"accountId_role_other\");\r",
									"\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"pm.environment.set(\"MIMO_ID\",fieldDataValue.Provisioning.Thing.CreateThing.RouteInfoMIMOIDValue)\r",
									"pm.environment.set(\"MIMO_SerialNo\",fieldDataValue.Provisioning.Thing.CreateThing.RouteInfoMIMOSerialNoValue)\r",
									"\r",
									"//format YYYYMMDDHHMMSSS\r",
									"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
									"// console.log('currentTmestamp',currentTmestamp);\r",
									"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- statusCodeList --------------//\r",
									"//set variable to statusCodeList JSON.parse\r",
									"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
									"//set global variable to statusCode 200\r",
									"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
									"//set global variable to statusCode 201\r",
									"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultCodeList --------------//\r",
									"//set variable to resultCodeList JSON.parse\r",
									"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
									"//set global variable to resultCode \"20000\"\r",
									"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
									"//set global variable to resultCode \"20100\"\r",
									"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionSuccessList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
									"//set global variable to resultDescription \"SignInProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
									"//set global variable to resultDescription \"CreatePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
									"//set global variable to resultDescription \"CreateAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
									"//set global variable to resultDescription \"CreateThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThing\", resultDescriptionSuccessList.resultDescriptionCreateThing);\r",
									"//set global variable to resultDescription \"RemovePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
									"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
									"//set global variable to resultDescription \"RemoveThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThing\", resultDescriptionSuccessList.resultDescriptionRemoveThing);\r",
									"//set global variable to resultDescription \"InquiryThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionInquiryThing\", resultDescriptionSuccessList.resultDescriptionInquiryThing);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- HeaderList --------------//\r",
									"//set variable to HeaderList JSON.parse\r",
									"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
									"//---------------- set globals Other --------------//\r",
									"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
									"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
									"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
									"//set global variable to kbn-versio \"7.5.1\"\r",
									"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Signin_ --------------//\r",
									"//set global variable to x_ais_OrderRef \"Signin_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreatePartner --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
									"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
									"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
									"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreateAccount --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
									"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
									"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Thing --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThing\", HeaderList.Thing.x_ais_OrderRef_CreateThing);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThing\", HeaderList.Thing.x_ais_OrderDesc_CreateThing);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThing\", HeaderList.Thing.x_ais_OrderRef_RemoveThing);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThing\", HeaderList.Thing.x_ais_OrderDesc_RemoveThing);\r",
									"//set global variable to x_ais_OrderRef \"InquiryThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_InquiryThing\", HeaderList.Thing.x_ais_OrderRef_InquiryThing);\r",
									"//set global variable to x_ais_OrderDesc \"InquiryThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_InquiryThing\", HeaderList.Thing.x_ais_OrderDesc_InquiryThing);\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"SignInProcess is Success\"\r",
									"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
									"//get global variable to resultDescription \"CreatePartner is Success\"\r",
									"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
									"//get global variable to resultDescription \"CreateAccount is Success\"\r",
									"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
									"//get global variable to resultDescription \"CreateThing is Success\"\r",
									"var resultDescriptionCreateThing = pm.globals.get(\"resultDescriptionCreateThing\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- urlRouteList --------------//\r",
									"//set variable to urlRouteList JSON.parse\r",
									"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
									"//---------------- set url Create --------------//\r",
									"//set global variable to url \"/api/v1/auth/signin\"\r",
									"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
									"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
									"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"pm.globals.set(\"urlThingCreateThing\", urlRouteList.Thing.urlThingCreateThing);\r",
									"//---------------- get url Create --------------//\r",
									"//get global variable to url \"/api/v1/auth/signin\"\r",
									"var urlSignin = pm.globals.get(\"urlSignin\");\r",
									"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
									"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"var urlThingCreateThing = pm.globals.get(\"urlThingCreateThing\");\r",
									"//---------------- set url Remove --------------//\r",
									"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
									"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"pm.globals.set(\"urlThingRemoveThing\", urlRouteList.Thing.urlThingRemoveThing);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Signin_ --------------//\r",
									"//get global variable to x_ais_OrderRef \"Signin_\"\r",
									"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"var x_ais_OrderRef_CreateThing = pm.globals.get(\"x_ais_OrderRef_CreateThing\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"var x_ais_OrderDesc_CreateThing = pm.globals.get(\"x_ais_OrderDesc_CreateThing\");\r",
									"//------------------------------------------------------------//\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// Signin get token\r",
									" Signin = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSignin = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestSignin = {\r",
									"            mode: 'raw',\r",
									"            raw: \r",
									"            JSON.stringify({\r",
									"                username:Username,\r",
									"                password:Password\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsSignin = {\r",
									"            url: url + provisioningapis + urlSignin,\r",
									"            method: 'POST',\r",
									"            header: headersOptSignin,\r",
									"            body: httpRequestSignin\r",
									"        };\r",
									"        // console.log('request Signin');\r",
									"        let response = await reqPromise(optionsSignin);\r",
									"        let jsonDataSignin = await response.json();\r",
									"\r",
									"        // setAccessToken\r",
									"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
									"\r",
									"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // SignInProcess is Success\r",
									"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
									"        });\r",
									"\r",
									"        //set random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //set PartnerName\r",
									"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
									"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
									"        //set MerchantContact\r",
									"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
									"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
									"        // set CPID\r",
									"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
									"        pm.environment.set(\"CPID\", CPIDValue)\r",
									"        \r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreatePartner\r",
									" CreatePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreatePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreatePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
									"                \"PartnerType\": fieldDataValue.Partner.PartnerTypeValue, //[\"Supplier\",\"Customer\"]\r",
									"                \"PartnerDetail\": {\r",
									"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
									"                    \"CPID\": pm.environment.get(\"CPID\")\r",
									"                },\r",
									"                \"Property\": {\r",
									"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsCreatePartner = {\r",
									"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreatePartner,\r",
									"            body: httpRequestCreatePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsCreatePartner);\r",
									"        let jsonDataCreatePartner = await response.json();\r",
									"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
									"    \r",
									"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreatePartner is Success\r",
									"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
									"        });\r",
									"\r",
									"        //GetResponse_PartnerId\r",
									"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
									"\r",
									"        //Accountname\r",
									"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
									"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateAccount\r",
									" CreateAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreateAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
									"                })\r",
									"        };\r",
									"        \r",
									"        let optionsCreateAccount = {\r",
									"            url: url + provisioningapis + urlAccountCreateAccount,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateAccount,\r",
									"            body: httpRequestCreateAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateAccount');\r",
									"        let response = await reqPromise(optionsCreateAccount);\r",
									"        let jsonDataCreateAccount = await response.json();\r",
									"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
									"    \r",
									"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateAccount : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateAccount is Success\r",
									"        pm.test('CreateAccount : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
									"        });\r",
									"        // GetResponse_AccountName\r",
									"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
									"        // GetResponse_AccountId\r",
									"        pm.environment.set(\"GetResponse_AccountId\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
									"        // random_IM\r",
									"        pm.environment.set(\"random_IM\", _.random(10000000, 99999999)+\" \"+_.random(1000000, 9999999))\r",
									"        // random_ICCID\r",
									"        pm.environment.set(\"random_ICCID\", _.random(1000000, 9999999)+\" \"+_.random(100000, 999999))\r",
									"        // random_number\r",
									"        pm.environment.set(\"random_number\",pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //ThingName\r",
									"        let thingNameValue = fieldDataValue.Provisioning.Thing.ThingNameValue; // \"QAtestthing_T01\"\r",
									"        pm.environment.set(\"ThingName\", thingNameValue + pm.environment.get(\"random_number\"))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThing\r",
									"CreateThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateThing+ current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey':accountId_role_other,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreateThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingName\": pm.environment.get(\"ThingName\"),\r",
									"                \"IMEI\": pm.environment.get(\"random_IM\"),\r",
									"                \"IMSI\": pm.environment.get(\"random_IM\"),\r",
									"                \"ICCID\": pm.environment.get(\"random_ICCID\"),\r",
									"                \"RouteUrl\": fieldDataValue.Provisioning.Thing.CreateThing.RouteUrlValue , //[\"http://10.12.3.4:2019/api/information/AddInformation\"]\r",
									"                \"RouteInfo\": {\r",
									"                    \"MIMO_ID\": pm.environment.get(\"MIMO_ID\") , //\"606edada\"\r",
									"                    \"MIMO_SerialNo\": pm.environment.get(\"MIMO_SerialNo\") //5466758878\r",
									"                },\r",
									"                \"RouteFlag\": {\r",
									"                    \"ThingName\": fieldDataValue.Provisioning.Thing.CreateThing.RouteFlagThingNameValue , //true\r",
									"                    \"ThingToken\": fieldDataValue.Provisioning.Thing.CreateThing.RouteFlagThingTokenValue, //true\r",
									"                    \"IMEI\": fieldDataValue.Provisioning.Thing.CreateThing.RouteFlagIMEIValue, //true\r",
									"                    \"ICCID\": fieldDataValue.Provisioning.Thing.CreateThing.RouteFlagICCIDValue, //true\r",
									"                    \"RouteInfo\": fieldDataValue.Provisioning.Thing.CreateThing.RouteFlagRouteInfoValue //true\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsCreateThing = {\r",
									"            url: url + provisioningapis + urlThingCreateThing,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThing,\r",
									"            body: httpRequestCreateThing\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThing');\r",
									"        let response = await reqPromise(optionsCreateThing);\r",
									"        let jsonDataCreateThing = await response.json();\r",
									"        // console.log('jsonDataCreateThing',jsonDataCreateThing)\r",
									"    \r",
									"        let operationStatusCreateThing = await jsonDataCreateThing.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateThing : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateThing : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateThing is Success\r",
									"        pm.test('CreateThing : OperationStatus Description is '+'\"'+ resultDescriptionCreateThing+'\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Description', resultDescriptionCreateThing);\r",
									"        });\r",
									"\r",
									"        pm.environment.set(\"GetResponse_ThingID\",jsonDataCreateThing.ThingInfo.ThingId)\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// Signin get token\r",
									" Signin2 = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSignin = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestSignin = {\r",
									"            mode: 'raw',\r",
									"            raw: \r",
									"            JSON.stringify({\r",
									"                username:Username_Supplier,\r",
									"                password:Password_Supplier\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsSignin = {\r",
									"            url: url + provisioningapis + urlSignin,\r",
									"            method: 'POST',\r",
									"            header: headersOptSignin,\r",
									"            body: httpRequestSignin\r",
									"        };\r",
									"        // console.log('request Signin');\r",
									"        let response = await reqPromise(optionsSignin);\r",
									"        let jsonDataSignin = await response.json();\r",
									"\r",
									"        // setAccessToken\r",
									"        await pm.environment.set(\"AccessToken2\" , jsonDataSignin.AccessToken);\r",
									"\r",
									"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // SignInProcess is Success\r",
									"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
									"        });\r",
									"        \r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"Signin();\r",
									"setTimeout(async function(){await CreatePartner();}, 3000); \r",
									"setTimeout(async function(){await CreateAccount();}, 6000); \r",
									"setTimeout(async function(){await CreateThing();}, 8000); \r",
									"setTimeout(async function(){await Signin2();}, 9000); \r",
									"setTimeout(async function(){}, 9500);  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-ais-UserName",
								"type": "text",
								"value": "{{x_ais_UserName_AisPartner}}"
							},
							{
								"key": "x-ais-OrderRef",
								"value": "{{x_ais_OrderRef_InquiryThing}}{{current_timestamp}}"
							},
							{
								"key": "x-ais-OrderDesc",
								"type": "text",
								"value": "{{x_ais_OrderDesc_InquiryThing}}"
							},
							{
								"key": "x-ais-AccessToken",
								"value": "{{Bearer}} {{AccessToken2}}"
							},
							{
								"key": "x-ais-AccountKey",
								"type": "text",
								"value": "{{accountId_role_other}}"
							},
							{
								"key": "Accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"ThingId\": \"{{GetResponse_ThingID}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}{{provisioningapis}}/api/v1/Thing/InquiryThing",
							"host": [
								"{{url}}{{provisioningapis}}"
							],
							"path": [
								"api",
								"v1",
								"Thing",
								"InquiryThing"
							]
						},
						"description": "Type:Desire"
					},
					"response": []
				},
				{
					"name": "InquiryThing_TST_F13_1_1_010_Success_InquiryByConfigGroupId_Customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to xAisOrderRef \"RemoveThing_\"\r",
									"var x_ais_OrderRef_RemoveThing = pm.globals.get(\"x_ais_OrderRef_RemoveThing\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"var x_ais_OrderDesc_RemoveThing = pm.globals.get(\"x_ais_OrderDesc_RemoveThing\");\r",
									"//get global variable to x_ais_OrderRef \"InquiryThing_\"\r",
									"var x_ais_OrderRef_InquiryThing = pm.globals.get(\"x_ais_OrderRef_InquiryThing\");\r",
									"//get global variable to x_ais_OrderDesc \"InquiryThing\"\r",
									"var x_ais_OrderDesc_InquiryThing = pm.globals.get(\"x_ais_OrderDesc_InquiryThing\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get url Remove --------------//\r",
									"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
									"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"var urlThingRemoveThing = pm.globals.get(\"urlThingRemoveThing\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"RemovePartner is Success\"\r",
									"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
									"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
									"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
									"//get global variable to resultDescription \"RemoveThing is Success\"\r",
									"var resultDescriptionRemoveThing = pm.globals.get(\"resultDescriptionRemoveThing\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to resultDescription \"InquiryThing is Success\"\r",
									"var resultDescriptionInquiryThing = pm.globals.get(\"resultDescriptionInquiryThing\");\r",
									"//------------------------------------------------------------//\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"InquiryThing : Status code is \" + statusCodeSuccess, function () {\r",
									"    pm.response.to.have.status(statusCodeSuccess);\r",
									"});\r",
									"\r",
									"pm.test('InquiryThing : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeSuccess);\r",
									"});\r",
									"\r",
									"pm.test('InquiryThing : OperationStatus Description is '+'\"'+ resultDescriptionInquiryThing+'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionInquiryThing);\r",
									"});\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// RemovePartner\r",
									" RemovePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemovePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemovePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemovePartner = {\r",
									"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemovePartner,\r",
									"            body: httpRequestRemovePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request RemovePartner');\r",
									"        let response = await reqPromise(optionsRemovePartner);\r",
									"        let jsonDataRemovePartner = await response.json();\r",
									"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
									"    \r",
									"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemovePartner is Success\r",
									"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveAccount\r",
									" RemoveAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemoveAccount = {\r",
									"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveAccount,\r",
									"            body: httpRequestRemoveAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveAccount');\r",
									"        let response = await reqPromise(optionsRemoveAccount);\r",
									"        let jsonDataRemoveAccount = await response.json();\r",
									"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
									"    \r",
									"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveAccount is Success\r",
									"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThing\r",
									" RemoveThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"accountId_role_other\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThing = {\r",
									"            url: url + provisioningapis + urlThingRemoveThing,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThing,\r",
									"            body: httpRequestRemoveThing\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveThing');\r",
									"        let response = await reqPromise(optionsRemoveThing);\r",
									"        let jsonDataRemoveThing = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThing)\r",
									"    \r",
									"        let operationStatusRemoveThing = await jsonDataRemoveThing.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThing : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThing : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThing is Success\r",
									"        pm.test('RemoveThing : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThing+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Description', resultDescriptionRemoveThing);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"\r",
									"//---------------- LogDefaultValue --------------//\r",
									"//set variable to LogDefaultValue JSON.parse\r",
									"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
									"// console.log('LogDefaultValue',LogDefaultValue);\r",
									"//---------------- set globals Other --------------//\r",
									"var SearchLog = LogDefaultValue.SearchLog;\r",
									"// console.log('SearchLog',SearchLog);\r",
									"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
									"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
									"var kbn_version = SearchLog.header.kbn_version;\r",
									"var authorization = SearchLog.header.Authorization;\r",
									"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
									"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
									"var namespace = LogDefaultValue.Other.namespace;\r",
									"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
									"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
									"var header_x_ais_username = LogDefaultValue.Other.header_x_ais_username;\r",
									"var header_x_ais_accountkey = LogDefaultValue.Other.header_x_ais_accountkey;\r",
									"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
									"var methodPost = LogDefaultValue.Other.methodPost;\r",
									"\r",
									"// Detail\r",
									"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
									"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
									"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
									"\r",
									"// Summary\r",
									"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
									"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
									"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
									"\r",
									"// ProvisioningAPIs [InquiryThing]\r",
									"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
									"var cmdName = LogDefaultValue.Provisioning.Thing.cmdNameInquiryThing;\r",
									"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
									"var containerId = LogDefaultValue.Provisioning.containerId;\r",
									"var requestObjectUrlStaging = LogDefaultValue.Provisioning.Thing.requestObjectUrlInquiryThingMgStaging;\r",
									"\r",
									"// Check CDR (Summary Log) and EDR (Detail Log)\r",
									"SearchLogFindTid = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSearchLogFindTid = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = x_ais_OrderRef_InquiryThing + current_timestamp;\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\", valueSearch)\r",
									"\r",
									"        // body\r",
									"        let httpRequestSearchLogFindTid = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({ \"version\": \"true\", \"size\": 500, \"sort\": [{ \"@timestamp_es\": { \"order\": \"desc\", \"unmapped_type\": \"boolean\" } }], \"_source\": { \"excludes\": [] }, \"aggs\": { \"2\": { \"date_histogram\": { \"field\": \"@timestamp_es\", \"fixed_interval\": \"30s\", \"time_zone\": \"Asia/Bangkok\", \"min_doc_count\": 1 } } }, \"stored_fields\": [\"*\"], \"script_fields\": {}, \"docvalue_fields\": [{ \"field\": \"@timestamp_es\", \"format\": \"date_time\" }, { \"field\": \"cauldron.custom1.activityLog.endTime\", \"format\": \"date_time\" }, { \"field\": \"cauldron.custom1.activityLog.startTime\", \"format\": \"date_time\" }, { \"field\": \"time\", \"format\": \"date_time\" }], \"query\": { \"bool\": { \"must\": [], \"filter\": [{ \"multi_match\": { \"type\": \"best_fields\", \"query\": '\"' + valueSearch + '\"', \"lenient\": \"true\" } }, { \"range\": { \"@timestamp_es\": { \"format\": \"strict_date_optional_time\", \"gte\": setRangeGTE, \"lte\": setRangeLTE } } }], \"should\": [], \"must_not\": [] } }, \"highlight\": { \"pre_tags\": [\"@kibana-highlighted-field@\"], \"post_tags\": [\"@/kibana-highlighted-field@\"], \"fields\": { \"*\": {} }, \"fragment_size\": 2147483647 } })\r",
									"        };\r",
									"\r",
									"        let optionsSearchLogFindTid = {\r",
									"            url: url_staging_azure_cauldron,\r",
									"            method: 'POST',\r",
									"            header: headersOptSearchLogFindTid,\r",
									"            body: httpRequestSearchLogFindTid\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsSearchLogFindTid);\r",
									"        let jsonDataSearchLogFindTid = await response.json();\r",
									"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
									"        console.log('hits', hits)\r",
									"\r",
									"        // find tid\r",
									"        for (let i = 0; i < hits.length; i++) {\r",
									"            // let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"\r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            if (applicationNameValue == applicationName) {\r",
									"                let tid = hits[i]._source.cauldron.tid;\r",
									"                pm.environment.set(\"tid\", tid);\r",
									"                break;\r",
									"            }\r",
									"        }\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"CheckLog = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCheckLog = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = pm.environment.get(\"tid\");\r",
									"\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\", valueSearch)\r",
									"\r",
									"        // body\r",
									"        let httpRequestCheckLog = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({ \"version\": true, \"size\": 500, \"sort\": [{ \"@timestamp_es\": { \"order\": \"desc\", \"unmapped_type\": \"boolean\" } }], \"_source\": { \"excludes\": [] }, \"aggs\": { \"2\": { \"date_histogram\": { \"field\": \"@timestamp_es\", \"fixed_interval\": \"30s\", \"time_zone\": \"Asia/Bangkok\", \"min_doc_count\": 1 } } }, \"stored_fields\": [\"*\"], \"script_fields\": {}, \"docvalue_fields\": [{ \"field\": \"@timestamp_es\", \"format\": \"date_time\" }, { \"field\": \"cauldron.custom1.activityLog.endTime\", \"format\": \"date_time\" }, { \"field\": \"cauldron.custom1.activityLog.startTime\", \"format\": \"date_time\" }, { \"field\": \"time\", \"format\": \"date_time\" }], \"query\": { \"bool\": { \"must\": [], \"filter\": [{ \"multi_match\": { \"type\": \"best_fields\", \"query\": '\"' + valueSearch + '\"', \"lenient\": true } }, { \"range\": { \"@timestamp_es\": { \"format\": \"strict_date_optional_time\", \"gte\": setRangeGTE, \"lte\": setRangeLTE } } }], \"should\": [], \"must_not\": [] } }, \"highlight\": { \"pre_tags\": [\"@kibana-highlighted-field@\"], \"post_tags\": [\"@/kibana-highlighted-field@\"], \"fields\": { \"*\": {} }, \"fragment_size\": 2147483647 } })\r",
									"        };\r",
									"        let optionsCheckLog = {\r",
									"            url: url_staging_azure_cauldron,\r",
									"            method: 'POST',\r",
									"            header: headersOptCheckLog,\r",
									"            body: httpRequestCheckLog\r",
									"        };\r",
									"        let response = await reqPromise(optionsCheckLog);\r",
									"        let jsonDataCheckLog = await response.json();\r",
									"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataCheckLog.hits.hits\r",
									"        console.log('hits', hits)\r",
									"\r",
									"        // find logType\r",
									"        for (let i = 0; i < hits.length; i++) {\r",
									"            //  let logType = hits[i]._source.cauldron.logType\r",
									"            let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"\r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"\r",
									"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
									"            // console.log('resultDataLog',resultDataLog)\r",
									"\r",
									"            let tidControl = x_ais_OrderRef_InquiryThing + current_timestamp;\r",
									"            // console.log(tidControl);\r",
									"            if (applicationNameValue == applicationName) {\r",
									"\r",
									"                if (logType == logTypeSummary && applicationNameValue == applicationName) { // 'Summary' and ProvisioningAPIs\r",
									"                    pm.test(\"Check Summary Log : InquiryThing\" , function () {\r",
									"                        console.log(\"======== Check Summary Log ( Expected = Actual) [InquiryThing] ==================\");\r",
									"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
									"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
									"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeSuccess);\r",
									"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionInquiryThing);\r",
									"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
									"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
									"                        // console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
									"\r",
									"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp);\r",
									"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName);\r",
									"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeSuccess);\r",
									"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionInquiryThing);\r",
									"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp);\r",
									"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary);\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace);\r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName);\r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId);\r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
									"                        // pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
									"\r",
									"                        // check custom\r",
									"                        // \\\"custom\\\":{ \\\"endPointSummary\\\":[ { \\\"no\\\":\\\"1\\\", \\\"endPointName\\\":\\\"db.AccountsCollection\\\", \\\"responseStatus\\\":\\\"Success:InquiryAccount was successfully.\\\", \\\"processTime\\\":10.6148 }, { \\\"no\\\":\\\"2\\\", \\\"endPointName\\\":\\\"db.ThingsCollection\\\", \\\"responseStatus\\\":\\\"Success:InquiryThing was successfully.\\\", \\\"processTime\\\":9.0435 } ] }\r",
									"                        let custom = resultDataLog.custom.endPointSummary;\r",
									"                        let countCustom = custom.length;\r",
									"                       \r",
									"                        // [\"db.AccountsCollection\",\"db.ThingsCollection\"]\r",
									"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_InquiryThing;\r",
									"                        // [\"Success:InquiryAccount was successfully.\",\"Success:InquiryThing was successfully.\"]\r",
									"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_InquiryThing;\r",
									"                        let countCustomStep = dataEndPointName.length;\r",
									"\r",
									"                        console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep);\r",
									"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
									"                        \r",
									"                        for(let i=0;i<countCustomStep;i++){\r",
									"                            let no = custom[i].no;\r",
									"                            let valueEndPointName = custom[i].endPointName;\r",
									"                            let valueResponseStatus = custom[i].responseStatus;\r",
									"                            // console.log(\"i\",i);\r",
									"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
									"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
									"\r",
									"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString());\r",
									"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i]);\r",
									"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i]);\r",
									"\r",
									"                            pm.expect(no).to.eql((i+1).toString()); \r",
									"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
									"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]); \r",
									"                        }\r",
									"                    });\r",
									"                }\r",
									"\r",
									"                if (logType == logTypeDetail && applicationNameValue == applicationName) { //'Detail' and ProvisioningAPIs\r",
									"\r",
									"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
									"                    // console.log('endPointNameValue ',endPointNameValue)\r",
									"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [InquiryThing]\", function () {\r",
									"                        console.log(\"======== Check Detail Log ( Expected = Actual) [InquiryThing] ==================\");\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
									"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
									"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
									"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.custom1.activityLog.processTime + \" = \" + resultDataLog.custom1.activityLog.processTime);\r",
									"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
									"\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail);\r",
									"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail);\r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace);\r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName);\r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId);\r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime);\r",
									"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail);\r",
									"\r",
									"                        if (endPointNameValue == endPointNameProvisioningAPIs) {     //\"endPointName\":\"ProvisioningAPIs\"\r",
									"                            console.log(\"custom1.endPointName : \" + resultDataLog.custom1.endPointName + \" = \" + endPointNameProvisioningAPIs); \r",
									"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs);\r",
									"\r",
									"                            // check requestObject\r",
									"                            // \"requestObject\":\"{ \\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Thing/InquiryThing\\\", \\\"method\\\":\\\"POST\\\", \\\"headers\\\":{ \\\"x-ais-username\\\":\\\"AisPartner\\\", \\\"x-ais-orderref\\\":\\\"InquiryThing_202104081704157\\\", \\\"x-ais-orderdesc\\\":\\\"InquiryThing\\\", \\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAGUJ9zLPcvr1srlapD3VLIkylxBptnfFGrsXbdYpFNnXEIlAkkY2KW0\\\", \\\"x-ais-accountkey\\\":\\\"606edc1663fa0e0001bf6e45\\\" }, \\\"body\\\":{ \\\"ThingId\\\":\\\"606edc1863fa0e0001bf6e4d\\\" } }\"\r",
									"\r",
									"                            // \\\"requestObject\\\":\\\"{ \\\\\\\"url\\\\\\\":\\\\\\\"mg-iot.sandais.com/api/v1/Thing/InquiryThing\\\\\\\", \\\\\\\"method\\\\\\\":\\\\\\\"POST\\\\\\\", \\\\\\\"headers\\\\\\\":{ \\\\\\\"x-ais-username\\\\\\\":\\\\\\\"AisPartner\\\\\\\", \\\\\\\"x-ais-orderref\\\\\\\":\\\\\\\"InquiryThing_202105101605655\\\\\\\", \\\\\\\"x-ais-orderdesc\\\\\\\":\\\\\\\"InquiryThing\\\\\\\", \\\\\\\"x-ais-accesstoken\\\\\\\":\\\\\\\"Bearer ibnxnVhs5Rx3IwglWv7/gVA/1TpQnKqAOBAADlRDvYhOpXwmlpYOEb5yfY5aZpoj0YRWRZM26i9HOqtc1fc1jpNDOK5JpISttmMEy59g2py7nLWonDe2YW2OPRGWSowk6+9ZihLU1fZ5d5jAqqrZaKlOAAI3N1TXDNLsHuKcOJMcERbCcaMqRaku+MY4/kzE+eyIdkfwwbjT91S2VQq+Wk2ooMWuLk6/DHVJhwbMP7Y8okAOp9ce95xhEKZA2al3WNgbucFuMgxKVegMrc8SMg==\\\\\\\", \\\\\\\"x-ais-accountkey\\\\\\\":\\\\\\\"6098fa735316540001b19d6d\\\\\\\" }, \\\\\\\"body\\\\\\\":{ \\\\\\\"ThingId\\\\\\\":\\\\\\\"6098fa755316540001b19d77\\\\\\\" } }\\\"\r",
									"\r",
									"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
									"                            //  console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
									"\r",
									"                            let url = urlCheckLog + requestObjectUrlStaging;\r",
									"                            let x_ais_orderref = x_ais_OrderRef_InquiryThing + current_timestamp;\r",
									"                            let x_ais_orderdesc = x_ais_OrderDesc_InquiryThing;\r",
									"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken2\");\r",
									"                            let x_ais_userName = x_ais_UserName_AisPartner;\r",
									"                            let x_ais_AccountKey = pm.environment.get(\"accountId_role_other\");\r",
									"                            \r",
									"                            let ThingId = pm.environment.get(\"GetResponse_ThingID\");\r",
									"                            let ThingName = pm.environment.get(\"ThingName\");\r",
									"                            let resIMEI = (pm.environment.get(\"random_IM\")).replace(\" \", \"\");\r",
									"                            let resIMSI = (pm.environment.get(\"random_IM\")).replace(\" \", \"\");\r",
									"                            let resICCID = fieldDataValue.Provisioning.Thing.CreateThing.ICCIDPre + (pm.environment.get(\"random_ICCID\")).replace(\" \", \"\");\r",
									"                            let RouteInfoMIMO_ID = pm.environment.get(\"MIMO_ID\");\r",
									"                            let RouteInfoMIMO_SerialNo = pm.environment.get(\"MIMO_SerialNo\");\r",
									"\r",
									"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
									"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
									"                            console.log(\"headers.x_ais_userName : \" + jsonParseRequestObject.headers[header_x_ais_username] + \" = \" + x_ais_userName);\r",
									"                            console.log(\"headers.x_ais_AccountKey : \" + jsonParseRequestObject.headers[header_x_ais_accountkey] + \" = \" + x_ais_AccountKey);\r",
									"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
									"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.url).to.eql(url);\r",
									"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_username]).to.eql(x_ais_userName);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accountkey]).to.eql(x_ais_AccountKey);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
									"\r",
									"                            console.log(\"resquest.body.ThingId : \" + jsonParseRequestObject.body.ThingId + \" = \" + ThingId);\r",
									"                            pm.expect(jsonParseRequestObject.body.ThingId).to.eql(ThingId);\r",
									"\r",
									"                            // check responseObject\r",
									"                            // \"responseObject\":\"{\\\"ThingInfo\\\":[{\\\"ThingId\\\":\\\"606edc1863fa0e0001bf6e4d\\\",\\\"ThingName\\\":\\\"QAtestthing_T01511537\\\",\\\"ThingToken\\\":\\\"6d53ab03-cfbc-40f7-bd07-cc5d74cb2679\\\",\\\"ThingStatus\\\":\\\"Active\\\",\\\"IMEI\\\":\\\"427666067926748\\\",\\\"IMSI\\\":\\\"427666067926748\\\", \\\"ICCID\\\":\\\"8966034190840384338\\\",\\\"RouteInfo\\\":{\\\"MIMO_ID\\\":\\\"606edada\\\",\\\"MIMO_SerialNo\\\":\\\"5466758878\\\"},\\\"StateInfo\\\":{}}],\\\"_Metadata\\\":{\\\"TotalCount\\\":1,\\\"Limit\\\":10000,\\\"OffSet\\\":0 },\\\"OperationStatus\\\":{\\\"Code\\\":\\\"20000\\\",\\\"Description\\\":\\\"InquiryThing is Success\\\"}}\"\r",
									"\r",
									"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
									"                            // console.log('jsonParseResponseObject',jsonParseResponseObject);\r",
									"                            let countRes = jsonParseResponseObject.ThingInfo;\r",
									"                            for(let i=0;i<countRes.length;i++){\r",
									"                                console.log(\"response.ThingInfo[\" + [i] +\"].ThingId : \" + jsonParseResponseObject.ThingInfo[i].ThingId + \" = \" + ThingId);\r",
									"                                console.log(\"response.ThingInfo[\" + [i] +\"].ThingName : \" + jsonParseResponseObject.ThingInfo[i].ThingName + \" = \" + ThingName);\r",
									"                                console.log(\"response.ThingInfo[\" + [i] +\"].IMEI : \" + jsonParseResponseObject.ThingInfo[i].IMEI + \" = \" + resIMEI);\r",
									"                                console.log(\"response.ThingInfo[\" + [i] +\"].IMSI : \" + jsonParseResponseObject.ThingInfo[i].IMSI + \" = \" + resIMSI);\r",
									"                                console.log(\"response.ThingInfo[\" + [i] +\"].ICCID : \" + jsonParseResponseObject.ThingInfo[i].ICCID + \" = \" + resICCID);\r",
									"                                console.log(\"response.ThingInfo[\" + [i] +\"].RouteInfo.MIMO_ID : \" + jsonParseResponseObject.ThingInfo[i].RouteInfo.MIMO_ID + \" = \" + RouteInfoMIMO_ID);\r",
									"                                console.log(\"response.ThingInfo[\" + [i] +\"].RouteInfo.MIMO_SerialNo : \" + jsonParseResponseObject.ThingInfo[i].RouteInfo.MIMO_SerialNo + \" = \" + RouteInfoMIMO_SerialNo);\r",
									"\r",
									"                                pm.expect(jsonParseResponseObject.ThingInfo[i].ThingId).to.eql(ThingId);\r",
									"                                pm.expect(jsonParseResponseObject.ThingInfo[i].ThingName).to.eql(ThingName);\r",
									"                                pm.expect(jsonParseResponseObject.ThingInfo[i].IMEI).to.eql(resIMEI);\r",
									"                                pm.expect(jsonParseResponseObject.ThingInfo[i].IMSI).to.eql(resIMSI);\r",
									"                                pm.expect(jsonParseResponseObject.ThingInfo[i].ICCID).to.eql(resICCID);\r",
									"                                pm.expect(jsonParseResponseObject.ThingInfo[i].RouteInfo.MIMO_ID).to.eql(RouteInfoMIMO_ID);\r",
									"                                pm.expect(jsonParseResponseObject.ThingInfo[i].RouteInfo.MIMO_SerialNo).to.eql(RouteInfoMIMO_SerialNo);\r",
									"                            }\r",
									"    \r",
									"                            console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeSuccess);\r",
									"                            console.log(\"response.OperationStatus.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionInquiryThing); \r",
									"\r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeSuccess);\r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionInquiryThing);\r",
									"                        }\r",
									"                    });\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"setTimeout(function(){SearchLogFindTid();}, 10000); \r",
									"setTimeout(function(){CheckLog();}, 30000); \r",
									"\r",
									"setTimeout(function(){RemoveThing();}, 40000); \r",
									"setTimeout(function(){RemoveAccount();}, 50000); \r",
									"setTimeout(function(){RemovePartner();}, 60000); \r",
									"\r",
									"setTimeout(function(){\r",
									"pm.environment.unset(\"current_timestamp\");\r",
									"pm.environment.unset(\"AccessToken\");\r",
									"pm.environment.unset(\"AccessToken2\");\r",
									"pm.environment.unset(\"random_number\");\r",
									"pm.environment.unset(\"PartnerName\");\r",
									"pm.environment.unset(\"MerchantContact\");\r",
									"pm.environment.unset(\"CPID\");\r",
									"pm.environment.unset(\"GetResponse_PartnerId\");\r",
									"pm.environment.unset(\"AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountId\");\r",
									"pm.environment.unset(\"random_IM\");\r",
									"pm.environment.unset(\"random_ICCID\");\r",
									"pm.environment.unset(\"ThingName\");\r",
									"pm.environment.unset(\"RouteUrl\");\r",
									"pm.environment.unset(\"MIMO_ID\");\r",
									"pm.environment.unset(\"MIMO_SerialNo\");\r",
									"pm.environment.unset(\"GetResponse_ThingID\");\r",
									"pm.environment.unset(\"tid\");\r",
									"}, 65000);\r",
									"setTimeout(function(){}, 70000); "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var Username = pm.environment.get(\"Username\");\r",
									"var Password = pm.environment.get(\"Password\");\r",
									"var Username_Customer = pm.environment.get(\"Username_Customer\");\r",
									"var Password_Customer = pm.environment.get(\"Password_Customer\");\r",
									"var accountId_role_other = pm.environment.get(\"accountId_role_other\");\r",
									"\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"pm.environment.set(\"MIMO_ID\",fieldDataValue.Provisioning.Thing.CreateThing.RouteInfoMIMOIDValue)\r",
									"pm.environment.set(\"MIMO_SerialNo\",fieldDataValue.Provisioning.Thing.CreateThing.RouteInfoMIMOSerialNoValue)\r",
									"\r",
									"//format YYYYMMDDHHMMSSS\r",
									"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
									"// console.log('currentTmestamp',currentTmestamp);\r",
									"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- statusCodeList --------------//\r",
									"//set variable to statusCodeList JSON.parse\r",
									"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
									"//set global variable to statusCode 200\r",
									"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
									"//set global variable to statusCode 201\r",
									"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultCodeList --------------//\r",
									"//set variable to resultCodeList JSON.parse\r",
									"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
									"//set global variable to resultCode \"20000\"\r",
									"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
									"//set global variable to resultCode \"20100\"\r",
									"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionSuccessList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
									"//set global variable to resultDescription \"SignInProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
									"//set global variable to resultDescription \"CreatePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
									"//set global variable to resultDescription \"CreateAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
									"//set global variable to resultDescription \"CreateThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateThing\", resultDescriptionSuccessList.resultDescriptionCreateThing);\r",
									"//set global variable to resultDescription \"RemovePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
									"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
									"//set global variable to resultDescription \"RemoveThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveThing\", resultDescriptionSuccessList.resultDescriptionRemoveThing);\r",
									"//set global variable to resultDescription \"InquiryThing is Success\"\r",
									"pm.globals.set(\"resultDescriptionInquiryThing\", resultDescriptionSuccessList.resultDescriptionInquiryThing);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- HeaderList --------------//\r",
									"//set variable to HeaderList JSON.parse\r",
									"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
									"//---------------- set globals Other --------------//\r",
									"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
									"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
									"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
									"//set global variable to kbn-versio \"7.5.1\"\r",
									"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Signin_ --------------//\r",
									"//set global variable to x_ais_OrderRef \"Signin_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreatePartner --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
									"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
									"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
									"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreateAccount --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
									"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
									"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Thing --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateThing\", HeaderList.Thing.x_ais_OrderRef_CreateThing);\r",
									"//set global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateThing\", HeaderList.Thing.x_ais_OrderDesc_CreateThing);\r",
									"//set global variable to x_ais_OrderRef \"RemoveThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveThing\", HeaderList.Thing.x_ais_OrderRef_RemoveThing);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveThing\", HeaderList.Thing.x_ais_OrderDesc_RemoveThing);\r",
									"//set global variable to x_ais_OrderRef \"InquiryThing_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_InquiryThing\", HeaderList.Thing.x_ais_OrderRef_InquiryThing);\r",
									"//set global variable to x_ais_OrderDesc \"InquiryThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_InquiryThing\", HeaderList.Thing.x_ais_OrderDesc_InquiryThing);\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"SignInProcess is Success\"\r",
									"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
									"//get global variable to resultDescription \"CreatePartner is Success\"\r",
									"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
									"//get global variable to resultDescription \"CreateAccount is Success\"\r",
									"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
									"//get global variable to resultDescription \"CreateThing is Success\"\r",
									"var resultDescriptionCreateThing = pm.globals.get(\"resultDescriptionCreateThing\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- urlRouteList --------------//\r",
									"//set variable to urlRouteList JSON.parse\r",
									"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
									"//---------------- set url Create --------------//\r",
									"//set global variable to url \"/api/v1/auth/signin\"\r",
									"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
									"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
									"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
									"//set global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"pm.globals.set(\"urlThingCreateThing\", urlRouteList.Thing.urlThingCreateThing);\r",
									"//---------------- get url Create --------------//\r",
									"//get global variable to url \"/api/v1/auth/signin\"\r",
									"var urlSignin = pm.globals.get(\"urlSignin\");\r",
									"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
									"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
									"//get global variable to url \"/api/v1/Thing/CreateThing\"\r",
									"var urlThingCreateThing = pm.globals.get(\"urlThingCreateThing\");\r",
									"//---------------- set url Remove --------------//\r",
									"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
									"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
									"//set global variable to url \"/api/v1/Thing/RemoveThing\"\r",
									"pm.globals.set(\"urlThingRemoveThing\", urlRouteList.Thing.urlThingRemoveThing);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Signin_ --------------//\r",
									"//get global variable to x_ais_OrderRef \"Signin_\"\r",
									"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateThing_\"\r",
									"var x_ais_OrderRef_CreateThing = pm.globals.get(\"x_ais_OrderRef_CreateThing\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateThing\"\r",
									"var x_ais_OrderDesc_CreateThing = pm.globals.get(\"x_ais_OrderDesc_CreateThing\");\r",
									"//------------------------------------------------------------//\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// Signin get token\r",
									" Signin = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSignin = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestSignin = {\r",
									"            mode: 'raw',\r",
									"            raw: \r",
									"            JSON.stringify({\r",
									"                username:Username,\r",
									"                password:Password\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsSignin = {\r",
									"            url: url + provisioningapis + urlSignin,\r",
									"            method: 'POST',\r",
									"            header: headersOptSignin,\r",
									"            body: httpRequestSignin\r",
									"        };\r",
									"        // console.log('request Signin');\r",
									"        let response = await reqPromise(optionsSignin);\r",
									"        let jsonDataSignin = await response.json();\r",
									"\r",
									"        // setAccessToken\r",
									"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
									"\r",
									"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // SignInProcess is Success\r",
									"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
									"        });\r",
									"\r",
									"        //set random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //set PartnerName\r",
									"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
									"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
									"        //set MerchantContact\r",
									"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
									"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
									"        // set CPID\r",
									"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
									"        pm.environment.set(\"CPID\", CPIDValue)\r",
									"        \r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreatePartner\r",
									" CreatePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreatePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreatePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
									"                \"PartnerType\": fieldDataValue.Partner.PartnerTypeValue, //[\"Supplier\",\"Customer\"]\r",
									"                \"PartnerDetail\": {\r",
									"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
									"                    \"CPID\": pm.environment.get(\"CPID\")\r",
									"                },\r",
									"                \"Property\": {\r",
									"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsCreatePartner = {\r",
									"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreatePartner,\r",
									"            body: httpRequestCreatePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsCreatePartner);\r",
									"        let jsonDataCreatePartner = await response.json();\r",
									"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
									"    \r",
									"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreatePartner is Success\r",
									"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
									"        });\r",
									"\r",
									"        //GetResponse_PartnerId\r",
									"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
									"\r",
									"        //Accountname\r",
									"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
									"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateAccount\r",
									" CreateAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreateAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
									"                })\r",
									"        };\r",
									"        \r",
									"        let optionsCreateAccount = {\r",
									"            url: url + provisioningapis + urlAccountCreateAccount,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateAccount,\r",
									"            body: httpRequestCreateAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateAccount');\r",
									"        let response = await reqPromise(optionsCreateAccount);\r",
									"        let jsonDataCreateAccount = await response.json();\r",
									"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
									"    \r",
									"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateAccount : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateAccount is Success\r",
									"        pm.test('CreateAccount : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
									"        });\r",
									"        // GetResponse_AccountName\r",
									"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
									"        // GetResponse_AccountId\r",
									"        pm.environment.set(\"GetResponse_AccountId\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
									"        // random_IM\r",
									"        pm.environment.set(\"random_IM\", _.random(10000000, 99999999)+\" \"+_.random(1000000, 9999999))\r",
									"        // random_ICCID\r",
									"        pm.environment.set(\"random_ICCID\", _.random(1000000, 9999999)+\" \"+_.random(100000, 999999))\r",
									"        // random_number\r",
									"        pm.environment.set(\"random_number\",pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //ThingName\r",
									"        let thingNameValue = fieldDataValue.Provisioning.Thing.ThingNameValue; // \"QAtestthing_T01\"\r",
									"        pm.environment.set(\"ThingName\", thingNameValue + pm.environment.get(\"random_number\"))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateThing\r",
									"CreateThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateThing+ current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey':accountId_role_other,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreateThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingName\": pm.environment.get(\"ThingName\"),\r",
									"                \"IMEI\": pm.environment.get(\"random_IM\"),\r",
									"                \"IMSI\": pm.environment.get(\"random_IM\"),\r",
									"                \"ICCID\": pm.environment.get(\"random_ICCID\"),\r",
									"                \"RouteUrl\": fieldDataValue.Provisioning.Thing.CreateThing.RouteUrlValue , //[\"http://10.12.3.4:2019/api/information/AddInformation\"]\r",
									"                \"RouteInfo\": {\r",
									"                    \"MIMO_ID\": pm.environment.get(\"MIMO_ID\") , //\"606edada\"\r",
									"                    \"MIMO_SerialNo\": pm.environment.get(\"MIMO_SerialNo\") //5466758878\r",
									"                },\r",
									"                \"RouteFlag\": {\r",
									"                    \"ThingName\": fieldDataValue.Provisioning.Thing.CreateThing.RouteFlagThingNameValue , //true\r",
									"                    \"ThingToken\": fieldDataValue.Provisioning.Thing.CreateThing.RouteFlagThingTokenValue, //true\r",
									"                    \"IMEI\": fieldDataValue.Provisioning.Thing.CreateThing.RouteFlagIMEIValue, //true\r",
									"                    \"ICCID\": fieldDataValue.Provisioning.Thing.CreateThing.RouteFlagICCIDValue, //true\r",
									"                    \"RouteInfo\": fieldDataValue.Provisioning.Thing.CreateThing.RouteFlagRouteInfoValue //true\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsCreateThing = {\r",
									"            url: url + provisioningapis + urlThingCreateThing,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateThing,\r",
									"            body: httpRequestCreateThing\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateThing');\r",
									"        let response = await reqPromise(optionsCreateThing);\r",
									"        let jsonDataCreateThing = await response.json();\r",
									"        // console.log('jsonDataCreateThing',jsonDataCreateThing)\r",
									"    \r",
									"        let operationStatusCreateThing = await jsonDataCreateThing.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateThing : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateThing : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateThing is Success\r",
									"        pm.test('CreateThing : OperationStatus Description is '+'\"'+ resultDescriptionCreateThing+'\"', function () {\r",
									"            pm.expect(operationStatusCreateThing).to.have.property('Description', resultDescriptionCreateThing);\r",
									"        });\r",
									"\r",
									"        pm.environment.set(\"GetResponse_ThingID\",jsonDataCreateThing.ThingInfo.ThingId)\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// Signin get token\r",
									" Signin2 = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSignin = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestSignin = {\r",
									"            mode: 'raw',\r",
									"            raw: \r",
									"            JSON.stringify({\r",
									"                username:Username_Customer,\r",
									"                password:Password_Customer\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsSignin = {\r",
									"            url: url + provisioningapis + urlSignin,\r",
									"            method: 'POST',\r",
									"            header: headersOptSignin,\r",
									"            body: httpRequestSignin\r",
									"        };\r",
									"        // console.log('request Signin');\r",
									"        let response = await reqPromise(optionsSignin);\r",
									"        let jsonDataSignin = await response.json();\r",
									"\r",
									"        // setAccessToken\r",
									"        await pm.environment.set(\"AccessToken2\" , jsonDataSignin.AccessToken);\r",
									"\r",
									"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // SignInProcess is Success\r",
									"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
									"        });\r",
									"        \r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"Signin();\r",
									"setTimeout(async function(){await CreatePartner();}, 3000); \r",
									"setTimeout(async function(){await CreateAccount();}, 6000); \r",
									"setTimeout(async function(){await CreateThing();}, 8000); \r",
									"setTimeout(async function(){await Signin2();}, 9000); \r",
									"setTimeout(async function(){}, 9500);  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-ais-UserName",
								"type": "text",
								"value": "{{x_ais_UserName_AisPartner}}"
							},
							{
								"key": "x-ais-OrderRef",
								"value": "{{x_ais_OrderRef_InquiryThing}}{{current_timestamp}}"
							},
							{
								"key": "x-ais-OrderDesc",
								"type": "text",
								"value": "{{x_ais_OrderDesc_InquiryThing}}"
							},
							{
								"key": "x-ais-AccessToken",
								"value": "{{Bearer}} {{AccessToken2}}"
							},
							{
								"key": "x-ais-AccountKey",
								"type": "text",
								"value": "{{accountId_role_other}}"
							},
							{
								"key": "Accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"ThingId\": \"{{GetResponse_ThingID}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}{{provisioningapis}}/api/v1/Thing/InquiryThing",
							"host": [
								"{{url}}{{provisioningapis}}"
							],
							"path": [
								"api",
								"v1",
								"Thing",
								"InquiryThing"
							]
						},
						"description": "Type:Desire"
					},
					"response": []
				},
				{
					"name": "InquiryThing_TST_F13_0_2_003_Error_AccountKeyUntrustedOrInvalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to x_ais_OrderRef \"InquiryThingfail_\"\r",
									"var x_ais_OrderRef_InquiryThing_fail = pm.globals.get(\"x_ais_OrderRef_InquiryThing_fail\");\r",
									"//get global variable to x_ais_OrderDesc \"InquiryThing\"\r",
									"var x_ais_OrderDesc_InquiryThing = pm.globals.get(\"x_ais_OrderDesc_InquiryThing\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get url Remove --------------//\r",
									"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
									"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"RemovePartner is Success\"\r",
									"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
									"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
									"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 401\r",
									"var statusCodeUnauthorized = pm.globals.get(\"statusCodeUnauthorized\");\r",
									"//get global variable to resultCode \"40103\"\r",
									"var resultCodeTheTokenIsUntrustedOrInvalid = pm.globals.get(\"resultCodeTheTokenIsUntrustedOrInvalid\");\r",
									"//get global variable to resultDescription \"The AccountKey is Untrusted or Invalid\"\r",
									"var resultDescriptionTheAccountKeyIsUntrustedOrInvalid = pm.globals.get(\"resultDescriptionTheAccountKeyIsUntrustedOrInvalid\");\r",
									"//------------------------------------------------------------//\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"InquiryThing : Status code is \" + statusCodeUnauthorized, function () {\r",
									"    pm.response.to.have.status(statusCodeUnauthorized);\r",
									"});\r",
									"\r",
									"pm.test('InquiryThing : OperationStatus code is '+'\"'+ resultCodeTheTokenIsUntrustedOrInvalid +'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeTheTokenIsUntrustedOrInvalid);\r",
									"});\r",
									"\r",
									"pm.test('InquiryThing : OperationStatus Description is '+'\"'+ resultDescriptionTheAccountKeyIsUntrustedOrInvalid+'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionTheAccountKeyIsUntrustedOrInvalid);\r",
									"});\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// RemovePartner\r",
									" RemovePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemovePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemovePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemovePartner = {\r",
									"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemovePartner,\r",
									"            body: httpRequestRemovePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request RemovePartner');\r",
									"        let response = await reqPromise(optionsRemovePartner);\r",
									"        let jsonDataRemovePartner = await response.json();\r",
									"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
									"    \r",
									"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemovePartner is Success\r",
									"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveAccount\r",
									" RemoveAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemoveAccount = {\r",
									"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveAccount,\r",
									"            body: httpRequestRemoveAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveAccount');\r",
									"        let response = await reqPromise(optionsRemoveAccount);\r",
									"        let jsonDataRemoveAccount = await response.json();\r",
									"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
									"    \r",
									"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveAccount is Success\r",
									"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThing\r",
									" RemoveThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThing = {\r",
									"            url: url + provisioningapis + urlThingRemoveThing,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThing,\r",
									"            body: httpRequestRemoveThing\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveThing');\r",
									"        let response = await reqPromise(optionsRemoveThing);\r",
									"        let jsonDataRemoveThing = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThing)\r",
									"    \r",
									"        let operationStatusRemoveThing = await jsonDataRemoveThing.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThing : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThing : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThing is Success\r",
									"        pm.test('RemoveThing : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThing+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Description', resultDescriptionRemoveThing);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"//---------------- LogDefaultValue --------------//\r",
									"//set variable to LogDefaultValue JSON.parse\r",
									"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
									"// console.log('LogDefaultValue',LogDefaultValue);\r",
									"//---------------- set globals Other --------------//\r",
									"var SearchLog = LogDefaultValue.SearchLog;\r",
									"// console.log('SearchLog',SearchLog);\r",
									"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
									"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
									"var kbn_version = SearchLog.header.kbn_version;\r",
									"var authorization = SearchLog.header.Authorization;\r",
									"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
									"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
									"var namespace = LogDefaultValue.Other.namespace;\r",
									"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
									"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
									"var header_x_ais_username = LogDefaultValue.Other.header_x_ais_username;\r",
									"var header_x_ais_accountkey = LogDefaultValue.Other.header_x_ais_accountkey;\r",
									"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
									"var methodPost = LogDefaultValue.Other.methodPost;\r",
									"\r",
									"// Detail\r",
									"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
									"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
									"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
									"\r",
									"// Summary\r",
									"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
									"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
									"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
									"\r",
									"// ProvisioningAPIs [InquiryThing]\r",
									"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
									"var cmdName = LogDefaultValue.Provisioning.Thing.cmdNameInquiryThing;\r",
									"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
									"var containerId = LogDefaultValue.Provisioning.containerId;\r",
									"var requestObjectUrlStaging = LogDefaultValue.Provisioning.Thing.requestObjectUrlInquiryThingMgStaging;\r",
									"\r",
									"// Check CDR (Summary Log) and EDR (Detail Log)\r",
									"SearchLogFindTid = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSearchLogFindTid = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = x_ais_OrderRef_InquiryThing_fail + current_timestamp;\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestSearchLogFindTid = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"\r",
									"        let optionsSearchLogFindTid = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptSearchLogFindTid,\r",
									"            body: httpRequestSearchLogFindTid\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsSearchLogFindTid);\r",
									"        let jsonDataSearchLogFindTid = await response.json();\r",
									"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
									"        console.log('hits',hits)\r",
									"  \r",
									"        // find tid\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            // let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"        \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            if(applicationNameValue == applicationName){\r",
									"                let tid = hits[i]._source.cauldron.tid;\r",
									"                pm.environment.set(\"tid\", tid);\r",
									"                break;\r",
									"           }\r",
									"        }\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"CheckLog = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCheckLog = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = pm.environment.get(\"tid\");\r",
									"\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestCheckLog = {\r",
									"            mode: 'raw',\r",
									"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"        let optionsCheckLog = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptCheckLog,\r",
									"            body: httpRequestCheckLog\r",
									"        }; \r",
									"        let response = await reqPromise(optionsCheckLog);\r",
									"        let jsonDataCheckLog = await response.json();\r",
									"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
									"        \r",
									"        // //200\r",
									"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });     \r",
									"        \r",
									"        let hits = jsonDataCheckLog.hits.hits\r",
									"        console.log('hits',hits)\r",
									"  \r",
									"        // find logType\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            //  let logType = hits[i]._source.cauldron.logType\r",
									"            let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"           \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            \r",
									"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
									"            // console.log('resultDataLog',resultDataLog)\r",
									"\r",
									"            let tidControl = x_ais_OrderRef_InquiryThing_fail + current_timestamp;\r",
									"            // console.log(tidControl);\r",
									"            if(applicationNameValue == applicationName){\r",
									"                 \r",
									"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ProvisioningAPIs\r",
									"                    pm.test(\"Check Summary Log : InquiryThing\" , function () {\r",
									"                        console.log(\"======== Check Summary Log ( Expected = Actual) [InquiryThing] ==================\");\r",
									"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
									"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
									"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeTheTokenIsUntrustedOrInvalid);\r",
									"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionTheAccountKeyIsUntrustedOrInvalid);\r",
									"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
									"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
									"                        // console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
									"\r",
									"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
									"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
									"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeTheTokenIsUntrustedOrInvalid); \r",
									"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionTheAccountKeyIsUntrustedOrInvalid); \r",
									"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
									"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
									"                        // pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
									"\r",
									"                        // check custom\r",
									"                        // \\\"custom\\\":{ \\\"endPointSummary\\\":[ { \\\"no\\\":\\\"1\\\", \\\"endPointName\\\":\\\"db.AccountsCollection\\\", \\\"responseStatus\\\":\\\"Success:InquiryAccount was successfully.\\\", \\\"processTime\\\":1.1377 } ] }\r",
									"                        let custom = resultDataLog.custom.endPointSummary;\r",
									"                        let countCustom = custom.length;\r",
									"                       \r",
									"                        // [\"db.AccountsCollection\"]\r",
									"                        let dataEndPointName = LogDefaultValue.OtherSummary.stepEndpointSummary.endPointName_InquiryThing_004;\r",
									"                        // [\"Success:InquiryAccount was successfully.\"]\r",
									"                        let dataResponseStatus = LogDefaultValue.OtherSummary.stepEndpointSummary.responseStatus_InquiryThing_004;\r",
									"                        let countCustomStep = dataEndPointName.length;\r",
									"\r",
									"                        console.log(\"custom.length : \" + countCustom + \" = \" + countCustomStep);\r",
									"                        pm.expect(countCustom).to.eql(countCustomStep); \r",
									"                        \r",
									"                        for(let i=0;i<countCustomStep;i++){\r",
									"                            let no = custom[i].no;\r",
									"                            let valueEndPointName = custom[i].endPointName;\r",
									"                            let valueResponseStatus = custom[i].responseStatus;\r",
									"                            // console.log(\"i\",i);\r",
									"                            // console.log(\"valueEndPointName\",valueEndPointName);\r",
									"                            // console.log(\"valueResponseStatus\",valueResponseStatus);\r",
									"\r",
									"                            console.log(\"custom.no : \" + no + \" = \" + (i+1).toString());\r",
									"                            console.log(\"custom.endPointName : \" + valueEndPointName + \" = \" + dataEndPointName[i]);\r",
									"                            console.log(\"custom.responseStatus : \" + valueResponseStatus + \" = \" + dataResponseStatus[i]);\r",
									"\r",
									"                            pm.expect(no).to.eql((i+1).toString()); \r",
									"                            pm.expect(valueEndPointName).to.eql(dataEndPointName[i]); \r",
									"                            pm.expect(valueResponseStatus).to.eql(dataResponseStatus[i]); \r",
									"                        }\r",
									"                    }); \r",
									"                }\r",
									"\r",
									"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ProvisioningAPIs\r",
									"\r",
									"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
									"                    // console.log('endPointNameValue ',endPointNameValue)\r",
									"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [InquiryThing]\", function () {\r",
									"                        console.log(\"======== Check Detail Log ( Expected = Actual) [InquiryThing] ==================\");\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
									"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
									"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
									"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.custom1.activityLog.processTime + \" = \" + resultDataLog.custom1.activityLog.processTime);\r",
									"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
									"\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
									"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
									"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
									"\r",
									"                        if( endPointNameValue == endPointNameProvisioningAPIs){     //\"endPointName\":\"ProvisioningAPIs\"\r",
									"                            console.log(\"custom1.endPointName : \" + resultDataLog.custom1.endPointName + \" = \" + endPointNameProvisioningAPIs); \r",
									"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs); \r",
									"                        \r",
									"                            // check requestObject\r",
									"                            //\"requestObject\":\"{ \\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Thing/InquiryThing\\\", \\\"method\\\":\\\"POST\\\", \\\"headers\\\":{ \\\"x-ais-username\\\":\\\"AisPartner\\\", \\\"x-ais-orderref\\\":\\\"InquiryThingfail_202104081804969\\\", \\\"x-ais-orderdesc\\\":\\\"InquiryThing\\\", \\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAGUJ9zLPcvr1gM8mkkf0xAaoI+G3tZEM4dw3oHSFyFWX0IlAkkY2KW0\\\", \\\"x-ais-accountkey\\\":\\\"606ee64963fa0e0001bf7295xx\\\" }, \\\"body\\\":{ } }\"\r",
									"\r",
									"                            // \\\"requestObject\\\":\\\"{ \\\\\\\"url\\\\\\\":\\\\\\\"mg-iot.sandais.com/api/v1/Thing/InquiryThing\\\\\\\", \\\\\\\"method\\\\\\\":\\\\\\\"POST\\\\\\\", \\\\\\\"headers\\\\\\\":{ \\\\\\\"x-ais-username\\\\\\\":\\\\\\\"AisPartner\\\\\\\", \\\\\\\"x-ais-orderref\\\\\\\":\\\\\\\"InquiryThingfail_202105101605251\\\\\\\", \\\\\\\"x-ais-orderdesc\\\\\\\":\\\\\\\"InquiryThing\\\\\\\", \\\\\\\"x-ais-accesstoken\\\\\\\":\\\\\\\"Bearer ibnxnVhs5Rx3IwglWv7/gVA/1TpQnKqAOBAADlRDvYhOpXwmlpYOEb5yfY5aZpoj0YRWRZM26i9HOqtc1fc1jpNDOK5JpISttmMEy59g2py7nLWonDe2YW2OPRGWSowk6+9ZihLU1fZ5d5jAqqrZaKlOAAI3N1TXDNLsHuKcOJMcERbCcaMqRaku+MY4/kzE+eyIdkfwwbjT91S2VQq+Wk2ooMWuLk6/DHVJhwbMP7YhB7x2MeVVLdSTDJCODv9qBagEZ+ET0gsHGIfmF+eiNg==\\\\\\\", \\\\\\\"x-ais-accountkey\\\\\\\":\\\\\\\"6098fb3d5316540001b19e77xx\\\\\\\" }, \\\\\\\"body\\\\\\\":{ } }\\\"\r",
									"                            \r",
									"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
									"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
									"\r",
									"                            let url = urlCheckLog + requestObjectUrlStaging;\r",
									"                            let x_ais_orderref = x_ais_OrderRef_InquiryThing_fail + current_timestamp;\r",
									"                            let x_ais_orderdesc = x_ais_OrderDesc_InquiryThing;\r",
									"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken\");\r",
									"                            let x_ais_userName = x_ais_UserName_AisPartner;\r",
									"                            let x_ais_AccountKey = pm.environment.get(\"GetResponse_AccountId\") + pm.environment.get(\"AccountKey_Invalid\") ;\r",
									"                            \r",
									"                            let body = {};\r",
									"\r",
									"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
									"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
									"                            console.log(\"headers.x_ais_userName : \" + jsonParseRequestObject.headers[header_x_ais_username] + \" = \" + x_ais_userName);\r",
									"                            console.log(\"headers.x_ais_AccountKey : \" + jsonParseRequestObject.headers[header_x_ais_accountkey] + \" = \" + x_ais_AccountKey);\r",
									"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
									"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.url).to.eql(url);\r",
									"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_username]).to.eql(x_ais_userName);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accountkey]).to.eql(x_ais_AccountKey);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
									"\r",
									"                            console.log(\"resquest.body : \" + JSON.stringify(jsonParseRequestObject.body) + \" = \" + JSON.stringify(body));\r",
									"                            pm.expect(jsonParseRequestObject.body).to.eql(body);\r",
									"            \r",
									"                            // check responseObject\r",
									"                            //  \"responseObject\":\"{ \\\"OperationStatus\\\":{ \\\"Code\\\":\\\"40103\\\", \\\"Description\\\":\\\"The AccountKey is Untrusted or Invalid\\\" } }\"\r",
									"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
									"                            // console.log('jsonParseResponseObject',jsonParseResponseObject);  \r",
									"\r",
									"                            console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeTheTokenIsUntrustedOrInvalid);\r",
									"                            console.log(\"response.OperationStatus.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionTheAccountKeyIsUntrustedOrInvalid);\r",
									"\r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeTheTokenIsUntrustedOrInvalid);  \r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionTheAccountKeyIsUntrustedOrInvalid);  \r",
									"                        }\r",
									"\r",
									"                    }); \r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"setTimeout(function(){SearchLogFindTid();}, 8000); \r",
									"setTimeout(function(){CheckLog();}, 20000); \r",
									"\r",
									"setTimeout(function(){RemoveAccount();}, 30000); \r",
									"setTimeout(function(){RemovePartner();}, 40000); \r",
									"\r",
									"setTimeout(function(){\r",
									"pm.environment.unset(\"current_timestamp\");\r",
									"pm.environment.unset(\"AccessToken\");\r",
									"pm.environment.unset(\"random_number\");\r",
									"pm.environment.unset(\"PartnerName\");\r",
									"pm.environment.unset(\"MerchantContact\");\r",
									"pm.environment.unset(\"CPID\");\r",
									"pm.environment.unset(\"GetResponse_PartnerId\");\r",
									"pm.environment.unset(\"AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountId\");\r",
									"pm.environment.unset(\"random_IM\");\r",
									"pm.environment.unset(\"random_ICCID\");\r",
									"pm.environment.unset(\"ThingName\");\r",
									"pm.environment.unset(\"tid\");\r",
									"pm.environment.unset(\"AccountKey_Invalid\");\r",
									"}, 45000);\r",
									"setTimeout(function(){}, 50000); "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var Username = pm.environment.get(\"Username\");\r",
									"var Password = pm.environment.get(\"Password\");\r",
									"\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"pm.environment.set(\"AccountKey_Invalid\",fieldDataValue.Provisioning.AccountKey_Invalid)\r",
									"\r",
									"//format YYYYMMDDHHMMSSS\r",
									"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
									"// console.log('currentTmestamp',currentTmestamp);\r",
									"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- statusCodeList --------------//\r",
									"//set variable to statusCodeList JSON.parse\r",
									"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
									"//set global variable to statusCode 200\r",
									"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
									"//set global variable to statusCode 201\r",
									"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
									"//set global variable to statusCode 401\r",
									"pm.globals.set(\"statusCodeUnauthorized\", statusCodeList.statusCodeUnauthorized);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultCodeList --------------//\r",
									"//set variable to resultCodeList JSON.parse\r",
									"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
									"//set global variable to resultCode \"20000\"\r",
									"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
									"//set global variable to resultCode \"20100\"\r",
									"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
									"//set global variable to resultCode \"40103\"\r",
									"pm.globals.set(\"resultCodeTheTokenIsUntrustedOrInvalid\", resultCodeList.resultCodeTheTokenIsUntrustedOrInvalid);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionSuccessList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
									"//set global variable to resultDescription \"SignInProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
									"//set global variable to resultDescription \"CreatePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
									"//set global variable to resultDescription \"CreateAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
									"//set global variable to resultDescription \"RemovePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
									"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionErrorList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
									"//set global variable to resultDescription \"The AccountKey is Untrusted or Invalid\"\r",
									"pm.globals.set(\"resultDescriptionTheAccountKeyIsUntrustedOrInvalid\", resultDescriptionErrorList.resultDescriptionTheAccountKeyIsUntrustedOrInvalid);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- HeaderList --------------//\r",
									"//set variable to HeaderList JSON.parse\r",
									"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
									"//---------------- set globals Other --------------//\r",
									"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
									"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
									"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
									"//set global variable to kbn-versio \"7.5.1\"\r",
									"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Signin_ --------------//\r",
									"//set global variable to x_ais_OrderRef \"Signin_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreatePartner --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
									"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
									"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
									"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreateAccount --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
									"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
									"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Thing --------------//\r",
									"//set global variable to x_ais_OrderRef \"InquiryThingfail_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_InquiryThing_fail\", HeaderList.Thing.x_ais_OrderRef_InquiryThing_fail);\r",
									"//set global variable to x_ais_OrderDesc \"InquiryThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_InquiryThing\", HeaderList.Thing.x_ais_OrderDesc_InquiryThing);\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"SignInProcess is Success\"\r",
									"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
									"//get global variable to resultDescription \"CreatePartner is Success\"\r",
									"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
									"//get global variable to resultDescription \"CreateAccount is Success\"\r",
									"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
									"//get global variable to resultDescription \"CreateThing is Success\"\r",
									"var resultDescriptionCreateThing = pm.globals.get(\"resultDescriptionCreateThing\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- urlRouteList --------------//\r",
									"//set variable to urlRouteList JSON.parse\r",
									"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
									"//---------------- set url Create --------------//\r",
									"//set global variable to url \"/api/v1/auth/signin\"\r",
									"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
									"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
									"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
									"//---------------- get url Create --------------//\r",
									"//get global variable to url \"/api/v1/auth/signin\"\r",
									"var urlSignin = pm.globals.get(\"urlSignin\");\r",
									"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
									"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");;\r",
									"//---------------- set url Remove --------------//\r",
									"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
									"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Signin_ --------------//\r",
									"//get global variable to x_ais_OrderRef \"Signin_\"\r",
									"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
									"//------------------------------------------------------------//\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// Signin get token\r",
									" Signin = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSignin = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestSignin = {\r",
									"            mode: 'raw',\r",
									"            raw: \r",
									"            JSON.stringify({\r",
									"                username:Username,\r",
									"                password:Password\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsSignin = {\r",
									"            url: url + provisioningapis + urlSignin,\r",
									"            method: 'POST',\r",
									"            header: headersOptSignin,\r",
									"            body: httpRequestSignin\r",
									"        };\r",
									"        // console.log('request Signin');\r",
									"        let response = await reqPromise(optionsSignin);\r",
									"        let jsonDataSignin = await response.json();\r",
									"\r",
									"        // setAccessToken\r",
									"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
									"\r",
									"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // SignInProcess is Success\r",
									"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
									"        });\r",
									"\r",
									"        //set random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //set PartnerName\r",
									"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
									"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
									"        //set MerchantContact\r",
									"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
									"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
									"        // set CPID\r",
									"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
									"        pm.environment.set(\"CPID\", CPIDValue)\r",
									"        \r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreatePartner\r",
									" CreatePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreatePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreatePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
									"                \"PartnerType\": fieldDataValue.Partner.PartnerTypeValue, //[\"Supplier\",\"Customer\"] \r",
									"                \"PartnerDetail\": {\r",
									"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
									"                    \"CPID\": pm.environment.get(\"CPID\")\r",
									"                },\r",
									"                \"Property\": {\r",
									"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsCreatePartner = {\r",
									"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreatePartner,\r",
									"            body: httpRequestCreatePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsCreatePartner);\r",
									"        let jsonDataCreatePartner = await response.json();\r",
									"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
									"    \r",
									"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreatePartner is Success\r",
									"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
									"        });\r",
									"\r",
									"        //GetResponse_PartnerId\r",
									"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
									"\r",
									"        //Accountname\r",
									"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
									"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateAccount\r",
									" CreateAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreateAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
									"                })\r",
									"        };\r",
									"        \r",
									"        let optionsCreateAccount = {\r",
									"            url: url + provisioningapis + urlAccountCreateAccount,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateAccount,\r",
									"            body: httpRequestCreateAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateAccount');\r",
									"        let response = await reqPromise(optionsCreateAccount);\r",
									"        let jsonDataCreateAccount = await response.json();\r",
									"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
									"    \r",
									"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateAccount : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateAccount is Success\r",
									"        pm.test('CreateAccount : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
									"        });\r",
									"        // GetResponse_AccountName\r",
									"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
									"        // GetResponse_AccountId\r",
									"        pm.environment.set(\"GetResponse_AccountId\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
									"        // random_IM\r",
									"        pm.environment.set(\"random_IM\", _.random(10000000, 99999999)+\" \"+_.random(1000000, 9999999))\r",
									"        // random_ICCID\r",
									"        pm.environment.set(\"random_ICCID\", _.random(1000000, 9999999)+\" \"+_.random(100000, 999999))\r",
									"        // random_number\r",
									"        pm.environment.set(\"random_number\",pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //ThingName\r",
									"        let thingNameValue = fieldDataValue.Provisioning.Thing.ThingNameValue; // \"QAtestthing_T01\"\r",
									"        pm.environment.set(\"ThingName\", thingNameValue + pm.environment.get(\"random_number\"))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"Signin();\r",
									"setTimeout(async function(){await CreatePartner();}, 3000); \r",
									"setTimeout(async function(){await CreateAccount();}, 6000); \r",
									"setTimeout(async function(){}, 6500); "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-ais-UserName",
								"type": "text",
								"value": "{{x_ais_UserName_AisPartner}}"
							},
							{
								"key": "x-ais-OrderRef",
								"value": "{{x_ais_OrderRef_InquiryThing_fail}}{{current_timestamp}}"
							},
							{
								"key": "x-ais-OrderDesc",
								"type": "text",
								"value": "{{x_ais_OrderDesc_InquiryThing}}"
							},
							{
								"key": "x-ais-AccessToken",
								"value": "{{Bearer}} {{AccessToken}}"
							},
							{
								"key": "Accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-ais-AccountKey",
								"type": "text",
								"value": "{{GetResponse_AccountId}}{{AccountKey_Invalid}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}{{provisioningapis}}/api/v1/Thing/InquiryThing",
							"host": [
								"{{url}}{{provisioningapis}}"
							],
							"path": [
								"api",
								"v1",
								"Thing",
								"InquiryThing"
							]
						},
						"description": "Type:Desire"
					},
					"response": []
				},
				{
					"name": "InquiryThing_TST_F13_0_2_004_Error_UnauthorizedAccessTokenDon'tHaveBearerOrDon'tHaveToken",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to x_ais_OrderRef \"InquiryThingfail_\"\r",
									"var x_ais_OrderRef_InquiryThing_fail = pm.globals.get(\"x_ais_OrderRef_InquiryThing_fail\");\r",
									"//get global variable to x_ais_OrderDesc \"InquiryThing\"\r",
									"var x_ais_OrderDesc_InquiryThing = pm.globals.get(\"x_ais_OrderDesc_InquiryThing\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get url Remove --------------//\r",
									"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
									"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"RemovePartner is Success\"\r",
									"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
									"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
									"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 401\r",
									"var statusCodeUnauthorized = pm.globals.get(\"statusCodeUnauthorized\");\r",
									"//get global variable to resultCode \"40100\"\r",
									"var resultCodeUnauthorizedAccessTokenNotFound = pm.globals.get(\"resultCodeUnauthorizedAccessTokenNotFound\");\r",
									"//get global variable to resultDescription \"Unauthorized AccessToken Don't Have Bearer or Don't Have Token\"\r",
									"var resultDescriptionUnauthorizedAccessTokenDontHaveBearerOrDontHaveToken = pm.globals.get(\"resultDescriptionUnauthorizedAccessTokenDontHaveBearerOrDontHaveToken\");\r",
									"//------------------------------------------------------------//\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"InquiryThing : Status code is \" + statusCodeUnauthorized, function () {\r",
									"    pm.response.to.have.status(statusCodeUnauthorized);\r",
									"});\r",
									"\r",
									"pm.test('InquiryThing : OperationStatus code is '+'\"'+ resultCodeUnauthorizedAccessTokenNotFound +'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeUnauthorizedAccessTokenNotFound);\r",
									"});\r",
									"\r",
									"pm.test('InquiryThing : OperationStatus Description is '+'\"'+ resultDescriptionUnauthorizedAccessTokenDontHaveBearerOrDontHaveToken+'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionUnauthorizedAccessTokenDontHaveBearerOrDontHaveToken);\r",
									"});\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// RemovePartner\r",
									" RemovePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemovePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemovePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemovePartner = {\r",
									"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemovePartner,\r",
									"            body: httpRequestRemovePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request RemovePartner');\r",
									"        let response = await reqPromise(optionsRemovePartner);\r",
									"        let jsonDataRemovePartner = await response.json();\r",
									"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
									"    \r",
									"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemovePartner is Success\r",
									"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveAccount\r",
									" RemoveAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemoveAccount = {\r",
									"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveAccount,\r",
									"            body: httpRequestRemoveAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveAccount');\r",
									"        let response = await reqPromise(optionsRemoveAccount);\r",
									"        let jsonDataRemoveAccount = await response.json();\r",
									"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
									"    \r",
									"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveAccount is Success\r",
									"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveThing\r",
									" RemoveThing = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveThing = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveThing + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveThing,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveThing = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"ThingId\": pm.environment.get(\"GetResponse_ThingID\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveThing = {\r",
									"            url: url + provisioningapis + urlThingRemoveThing,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveThing,\r",
									"            body: httpRequestRemoveThing\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveThing');\r",
									"        let response = await reqPromise(optionsRemoveThing);\r",
									"        let jsonDataRemoveThing = await response.json();\r",
									"        // console.log('jsonDataRemoveThing',jsonDataRemoveThing)\r",
									"    \r",
									"        let operationStatusRemoveThing = await jsonDataRemoveThing.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveThing : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveThing : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveThing is Success\r",
									"        pm.test('RemoveThing : OperationStatus Description is '+'\"'+ resultDescriptionRemoveThing+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveThing).to.have.property('Description', resultDescriptionRemoveThing);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"//---------------- LogDefaultValue --------------//\r",
									"//set variable to LogDefaultValue JSON.parse\r",
									"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
									"// console.log('LogDefaultValue',LogDefaultValue);\r",
									"//---------------- set globals Other --------------//\r",
									"var SearchLog = LogDefaultValue.SearchLog;\r",
									"// console.log('SearchLog',SearchLog);\r",
									"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
									"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
									"var kbn_version = SearchLog.header.kbn_version;\r",
									"var authorization = SearchLog.header.Authorization;\r",
									"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
									"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
									"var namespace = LogDefaultValue.Other.namespace;\r",
									"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
									"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
									"var header_x_ais_username = LogDefaultValue.Other.header_x_ais_username;\r",
									"var header_x_ais_accountkey = LogDefaultValue.Other.header_x_ais_accountkey;\r",
									"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
									"var methodPost = LogDefaultValue.Other.methodPost;\r",
									"\r",
									"// Detail\r",
									"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
									"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
									"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
									"\r",
									"// Summary\r",
									"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
									"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
									"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
									"\r",
									"// ProvisioningAPIs [InquiryThing]\r",
									"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
									"var cmdName = LogDefaultValue.Provisioning.Thing.cmdNameInquiryThing;\r",
									"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
									"var containerId = LogDefaultValue.Provisioning.containerId;\r",
									"var requestObjectUrlStaging = LogDefaultValue.Provisioning.Thing.requestObjectUrlInquiryThingMgStaging;\r",
									"\r",
									"// Check CDR (Summary Log) and EDR (Detail Log)\r",
									"SearchLogFindTid = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSearchLogFindTid = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = x_ais_OrderRef_InquiryThing_fail + current_timestamp;\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestSearchLogFindTid = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"\r",
									"        let optionsSearchLogFindTid = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptSearchLogFindTid,\r",
									"            body: httpRequestSearchLogFindTid\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsSearchLogFindTid);\r",
									"        let jsonDataSearchLogFindTid = await response.json();\r",
									"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
									"        console.log('hits',hits)\r",
									"  \r",
									"        // find tid\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            // let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"        \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            if(applicationNameValue == applicationName){\r",
									"                let tid = hits[i]._source.cauldron.tid;\r",
									"                pm.environment.set(\"tid\", tid);\r",
									"                break;\r",
									"           }\r",
									"        }\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"CheckLog = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCheckLog = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = pm.environment.get(\"tid\");\r",
									"\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestCheckLog = {\r",
									"            mode: 'raw',\r",
									"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"        let optionsCheckLog = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptCheckLog,\r",
									"            body: httpRequestCheckLog\r",
									"        }; \r",
									"        let response = await reqPromise(optionsCheckLog);\r",
									"        let jsonDataCheckLog = await response.json();\r",
									"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
									"        \r",
									"        // //200\r",
									"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });     \r",
									"        \r",
									"        let hits = jsonDataCheckLog.hits.hits\r",
									"        console.log('hits',hits)\r",
									"  \r",
									"        // find logType\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            //  let logType = hits[i]._source.cauldron.logType\r",
									"            let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"           \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            \r",
									"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
									"            // console.log('resultDataLog',resultDataLog)\r",
									"\r",
									"            let tidControl = x_ais_OrderRef_InquiryThing_fail + current_timestamp;\r",
									"            // console.log(tidControl);\r",
									"            if(applicationNameValue == applicationName){\r",
									"                 \r",
									"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ProvisioningAPIs\r",
									"                    pm.test(\"Check Summary Log : InquiryThing\" , function () {\r",
									"                        console.log(\"======== Check Summary Log ( Expected = Actual) [InquiryThing] ==================\");\r",
									"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
									"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
									"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeUnauthorizedAccessTokenNotFound);\r",
									"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionUnauthorizedAccessTokenDontHaveBearerOrDontHaveToken);\r",
									"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
									"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
									"                        console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
									"\r",
									"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
									"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
									"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeUnauthorizedAccessTokenNotFound); \r",
									"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionUnauthorizedAccessTokenDontHaveBearerOrDontHaveToken); \r",
									"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
									"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
									"                        pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
									"                    }); \r",
									"                }\r",
									"\r",
									"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ProvisioningAPIs\r",
									"\r",
									"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
									"                    // console.log('endPointNameValue ',endPointNameValue)\r",
									"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [InquiryThing]\", function () {\r",
									"                        console.log(\"======== Check Detail Log ( Expected = Actual) [InquiryThing] ==================\");\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
									"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
									"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
									"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.custom1.activityLog.processTime + \" = \" + resultDataLog.custom1.activityLog.processTime);\r",
									"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
									"\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
									"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
									"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
									"\r",
									"                        if( endPointNameValue == endPointNameProvisioningAPIs){     //\"endPointName\":\"ProvisioningAPIs\"\r",
									"                            console.log(\"custom1.endPointName : \" + resultDataLog.custom1.endPointName + \" = \" + endPointNameProvisioningAPIs); \r",
									"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs); \r",
									"                        \r",
									"                            // check requestObject\r",
									"                            //\"requestObject\":\"{ \\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Thing/InquiryThing\\\", \\\"method\\\":\\\"POST\\\", \\\"headers\\\":{ \\\"x-ais-username\\\":\\\"AisPartner\\\", \\\"x-ais-orderref\\\":\\\"InquiryThingfail_202104081804640\\\", \\\"x-ais-orderdesc\\\":\\\"InquiryThing\\\", \\\"x-ais-accesstoken\\\":\\\"Bearer\\\", \\\"x-ais-accountkey\\\":\\\"606ee76763fa0e0001bf733a\\\" }, \\\"body\\\":{ } }\"\r",
									"\r",
									"                            // \\\"requestObject\\\":\\\"{ \\\\\\\"url\\\\\\\":\\\\\\\"mg-iot.sandais.com/api/v1/Thing/InquiryThing\\\\\\\", \\\\\\\"method\\\\\\\":\\\\\\\"POST\\\\\\\", \\\\\\\"headers\\\\\\\":{ \\\\\\\"x-ais-username\\\\\\\":\\\\\\\"AisPartner\\\\\\\", \\\\\\\"x-ais-orderref\\\\\\\":\\\\\\\"InquiryThingfail_202105101605549\\\\\\\", \\\\\\\"x-ais-orderdesc\\\\\\\":\\\\\\\"InquiryThing\\\\\\\", \\\\\\\"x-ais-accesstoken\\\\\\\":\\\\\\\"Bearer\\\\\\\", \\\\\\\"x-ais-accountkey\\\\\\\":\\\\\\\"6098fbaba33c7f0001e82862\\\\\\\" }, \\\\\\\"body\\\\\\\":{ } }\\\"\r",
									"                            \r",
									"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
									"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
									"\r",
									"                            let url = urlCheckLog + requestObjectUrlStaging;\r",
									"                            let x_ais_orderref = x_ais_OrderRef_InquiryThing_fail + current_timestamp;\r",
									"                            let x_ais_orderdesc = x_ais_OrderDesc_InquiryThing;\r",
									"                            let x_ais_accesstoken = Bearer ;\r",
									"                            let x_ais_userName = x_ais_UserName_AisPartner;\r",
									"                            let x_ais_AccountKey = pm.environment.get(\"GetResponse_AccountId\");\r",
									"                            \r",
									"                            let body = {};\r",
									"\r",
									"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
									"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
									"                            console.log(\"headers.x_ais_userName : \" + jsonParseRequestObject.headers[header_x_ais_username] + \" = \" + x_ais_userName);\r",
									"                            console.log(\"headers.x_ais_AccountKey : \" + jsonParseRequestObject.headers[header_x_ais_accountkey] + \" = \" + x_ais_AccountKey);\r",
									"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
									"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.url).to.eql(url);\r",
									"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_username]).to.eql(x_ais_userName);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accountkey]).to.eql(x_ais_AccountKey);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
									"\r",
									"                            console.log(\"resquest.body : \" + JSON.stringify(jsonParseRequestObject.body) + \" = \" + JSON.stringify(body));\r",
									"                            pm.expect(jsonParseRequestObject.body).to.eql(body);\r",
									"                            \r",
									"                            // check responseObject\r",
									"                            // \"responseObject\":\"{ \\\"OperationStatus\\\":{ \\\"Code\\\":\\\"40100\\\", \\\"Description\\\":\\\"Unauthorized AccessToken Don't Have Bearer or Don't Have Token\\\" } }\"\r",
									"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
									"                            // console.log('jsonParseResponseObject',jsonParseResponseObject);  \r",
									"\r",
									"                            console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeUnauthorizedAccessTokenNotFound);\r",
									"                            console.log(\"response.OperationStatus.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionUnauthorizedAccessTokenDontHaveBearerOrDontHaveToken);\r",
									"\r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeUnauthorizedAccessTokenNotFound);  \r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionUnauthorizedAccessTokenDontHaveBearerOrDontHaveToken);  \r",
									"                        }\r",
									"\r",
									"                    }); \r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"setTimeout(function(){SearchLogFindTid();}, 8000); \r",
									"setTimeout(function(){CheckLog();}, 20000); \r",
									"\r",
									"setTimeout(function(){RemoveAccount();}, 30000); \r",
									"setTimeout(function(){RemovePartner();}, 40000); \r",
									"\r",
									"setTimeout(function(){\r",
									"pm.environment.unset(\"current_timestamp\");\r",
									"pm.environment.unset(\"AccessToken\");\r",
									"pm.environment.unset(\"random_number\");\r",
									"pm.environment.unset(\"PartnerName\");\r",
									"pm.environment.unset(\"MerchantContact\");\r",
									"pm.environment.unset(\"CPID\");\r",
									"pm.environment.unset(\"GetResponse_PartnerId\");\r",
									"pm.environment.unset(\"AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountId\");\r",
									"pm.environment.unset(\"random_IM\");\r",
									"pm.environment.unset(\"random_ICCID\");\r",
									"pm.environment.unset(\"ThingName\");\r",
									"pm.environment.unset(\"tid\");\r",
									"pm.environment.unset(\"AccountKey_Invalid\");\r",
									"}, 45000);\r",
									"setTimeout(function(){}, 50000); "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var Username = pm.environment.get(\"Username\");\r",
									"var Password = pm.environment.get(\"Password\");\r",
									"\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"//format YYYYMMDDHHMMSSS\r",
									"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
									"// console.log('currentTmestamp',currentTmestamp);\r",
									"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- statusCodeList --------------//\r",
									"//set variable to statusCodeList JSON.parse\r",
									"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
									"//set global variable to statusCode 200\r",
									"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
									"//set global variable to statusCode 201\r",
									"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
									"//set global variable to statusCode 401\r",
									"pm.globals.set(\"statusCodeUnauthorized\", statusCodeList.statusCodeUnauthorized);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultCodeList --------------//\r",
									"//set variable to resultCodeList JSON.parse\r",
									"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
									"//set global variable to resultCode \"20000\"\r",
									"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
									"//set global variable to resultCode \"20100\"\r",
									"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
									"//set global variable to resultCode \"40100\"\r",
									"pm.globals.set(\"resultCodeUnauthorizedAccessTokenNotFound\", resultCodeList.resultCodeUnauthorizedAccessTokenNotFound);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionSuccessList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
									"//set global variable to resultDescription \"SignInProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
									"//set global variable to resultDescription \"CreatePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
									"//set global variable to resultDescription \"CreateAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
									"//set global variable to resultDescription \"RemovePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
									"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionErrorList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
									"//set global variable to resultDescription \"Unauthorized AccessToken Don't Have Bearer or Don't Have Token\"\r",
									"pm.globals.set(\"resultDescriptionUnauthorizedAccessTokenDontHaveBearerOrDontHaveToken\", resultDescriptionErrorList.resultDescriptionUnauthorizedAccessTokenDontHaveBearerOrDontHaveToken);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- HeaderList --------------//\r",
									"//set variable to HeaderList JSON.parse\r",
									"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
									"//---------------- set globals Other --------------//\r",
									"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
									"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
									"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
									"//set global variable to kbn-versio \"7.5.1\"\r",
									"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Signin_ --------------//\r",
									"//set global variable to x_ais_OrderRef \"Signin_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreatePartner --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
									"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
									"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
									"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreateAccount --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
									"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
									"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Thing --------------//\r",
									"//set global variable to x_ais_OrderRef \"InquiryThingfail_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_InquiryThing_fail\", HeaderList.Thing.x_ais_OrderRef_InquiryThing_fail);\r",
									"//set global variable to x_ais_OrderDesc \"InquiryThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_InquiryThing\", HeaderList.Thing.x_ais_OrderDesc_InquiryThing);\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"SignInProcess is Success\"\r",
									"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
									"//get global variable to resultDescription \"CreatePartner is Success\"\r",
									"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
									"//get global variable to resultDescription \"CreateAccount is Success\"\r",
									"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- urlRouteList --------------//\r",
									"//set variable to urlRouteList JSON.parse\r",
									"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
									"//---------------- set url Create --------------//\r",
									"//set global variable to url \"/api/v1/auth/signin\"\r",
									"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
									"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
									"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
									"//---------------- get url Create --------------//\r",
									"//get global variable to url \"/api/v1/auth/signin\"\r",
									"var urlSignin = pm.globals.get(\"urlSignin\");\r",
									"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
									"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
									"//---------------- set url Remove --------------//\r",
									"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
									"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Signin_ --------------//\r",
									"//get global variable to x_ais_OrderRef \"Signin_\"\r",
									"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
									"//------------------------------------------------------------//\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// Signin get token\r",
									" Signin = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSignin = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestSignin = {\r",
									"            mode: 'raw',\r",
									"            raw: \r",
									"            JSON.stringify({\r",
									"                username:Username,\r",
									"                password:Password\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsSignin = {\r",
									"            url: url + provisioningapis + urlSignin,\r",
									"            method: 'POST',\r",
									"            header: headersOptSignin,\r",
									"            body: httpRequestSignin\r",
									"        };\r",
									"        // console.log('request Signin');\r",
									"        let response = await reqPromise(optionsSignin);\r",
									"        let jsonDataSignin = await response.json();\r",
									"\r",
									"        // setAccessToken\r",
									"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
									"\r",
									"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // SignInProcess is Success\r",
									"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
									"        });\r",
									"\r",
									"        //set random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //set PartnerName\r",
									"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
									"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
									"        //set MerchantContact\r",
									"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
									"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
									"        // set CPID\r",
									"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
									"        pm.environment.set(\"CPID\", CPIDValue)\r",
									"        \r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreatePartner\r",
									" CreatePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreatePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreatePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
									"                \"PartnerType\": fieldDataValue.Partner.PartnerTypeValue, //[\"Supplier\",\"Customer\"] \r",
									"                \"PartnerDetail\": {\r",
									"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
									"                    \"CPID\": pm.environment.get(\"CPID\")\r",
									"                },\r",
									"                \"Property\": {\r",
									"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsCreatePartner = {\r",
									"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreatePartner,\r",
									"            body: httpRequestCreatePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsCreatePartner);\r",
									"        let jsonDataCreatePartner = await response.json();\r",
									"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
									"    \r",
									"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreatePartner is Success\r",
									"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
									"        });\r",
									"\r",
									"        //GetResponse_PartnerId\r",
									"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
									"\r",
									"        //Accountname\r",
									"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
									"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateAccount\r",
									" CreateAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreateAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
									"                })\r",
									"        };\r",
									"        \r",
									"        let optionsCreateAccount = {\r",
									"            url: url + provisioningapis + urlAccountCreateAccount,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateAccount,\r",
									"            body: httpRequestCreateAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateAccount');\r",
									"        let response = await reqPromise(optionsCreateAccount);\r",
									"        let jsonDataCreateAccount = await response.json();\r",
									"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
									"    \r",
									"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateAccount : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateAccount is Success\r",
									"        pm.test('CreateAccount : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
									"        });\r",
									"        // GetResponse_AccountName\r",
									"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
									"        // GetResponse_AccountId\r",
									"        pm.environment.set(\"GetResponse_AccountId\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
									"        // random_IM\r",
									"        pm.environment.set(\"random_IM\", _.random(10000000, 99999999)+\" \"+_.random(1000000, 9999999))\r",
									"        // random_ICCID\r",
									"        pm.environment.set(\"random_ICCID\", _.random(1000000, 9999999)+\" \"+_.random(100000, 999999))\r",
									"        // random_number\r",
									"        pm.environment.set(\"random_number\",pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //ThingName\r",
									"        let thingNameValue = fieldDataValue.Provisioning.Thing.ThingNameValue; // \"QAtestthing_T01\"\r",
									"        pm.environment.set(\"ThingName\", thingNameValue + pm.environment.get(\"random_number\"))\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"Signin();\r",
									"setTimeout(async function(){await CreatePartner();}, 3000); \r",
									"setTimeout(async function(){await CreateAccount();}, 6000); \r",
									"setTimeout(async function(){}, 6500); "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-ais-UserName",
								"type": "text",
								"value": "{{x_ais_UserName_AisPartner}}"
							},
							{
								"key": "x-ais-OrderRef",
								"value": "{{x_ais_OrderRef_InquiryThing_fail}}{{current_timestamp}}"
							},
							{
								"key": "x-ais-OrderDesc",
								"type": "text",
								"value": "{{x_ais_OrderDesc_InquiryThing}}"
							},
							{
								"key": "x-ais-AccessToken",
								"value": "{{Bearer}}"
							},
							{
								"key": "Accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-ais-AccountKey",
								"type": "text",
								"value": "{{GetResponse_AccountId}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}{{provisioningapis}}/api/v1/Thing/InquiryThing",
							"host": [
								"{{url}}{{provisioningapis}}"
							],
							"path": [
								"api",
								"v1",
								"Thing",
								"InquiryThing"
							]
						},
						"description": "Type:Desire"
					},
					"response": []
				},
				{
					"name": "InquiryThing_TST_F13_0_2_005_Error_x_ais_AccountKeyMissing_Customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"var x_ais_OrderRef_RemovePartner = pm.globals.get(\"x_ais_OrderRef_RemovePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"var x_ais_OrderDesc_RemovePartner = pm.globals.get(\"x_ais_OrderDesc_RemovePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"var x_ais_OrderRef_RemoveAccount = pm.globals.get(\"x_ais_OrderRef_RemoveAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"var x_ais_OrderDesc_RemoveAccount = pm.globals.get(\"x_ais_OrderDesc_RemoveAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals SystemUser --------------//\r",
									"//get global variable to x_ais_OrderRef \"RemoveSystemUser_\"\r",
									"var x_ais_OrderRef_RemoveSystemUser = pm.globals.get(\"x_ais_OrderRef_RemoveSystemUser\");\r",
									"//get global variable to x_ais_OrderDesc \"RemoveSystemUser\"\r",
									"var x_ais_OrderDesc_RemoveSystemUser = pm.globals.get(\"x_ais_OrderDesc_RemoveSystemUser\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Thing --------------//\r",
									"//get global variable to x_ais_OrderRef \"InquiryThingfail_\"\r",
									"var x_ais_OrderRef_InquiryThing_fail = pm.globals.get(\"x_ais_OrderRef_InquiryThing_fail\");\r",
									"//get global variable to x_ais_OrderDesc \"InquiryThing\"\r",
									"var x_ais_OrderDesc_InquiryThing = pm.globals.get(\"x_ais_OrderDesc_InquiryThing\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get url Remove --------------//\r",
									"//get global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"var urlPartnerRemovePartner = pm.globals.get(\"urlPartnerRemovePartner\");\r",
									"//get global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"var urlAccountRemoveAccount = pm.globals.get(\"urlAccountRemoveAccount\");\r",
									"//get global variable to url \"/api/v1/SystemUser/RemoveSystemUser\"\r",
									"var urlSystemUserRemoveSystemUser = pm.globals.get(\"urlSystemUserRemoveSystemUser\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"RemovePartner is Success\"\r",
									"var resultDescriptionRemovePartner = pm.globals.get(\"resultDescriptionRemovePartner\");\r",
									"//get global variable to resultDescription \"RemoveAccount is Success\"\r",
									"var resultDescriptionRemoveAccount = pm.globals.get(\"resultDescriptionRemoveAccount\");\r",
									"//get global variable to resultDescription \"RemoveSystemUser is Success\"\r",
									"var resultDescriptionRemoveSystemUser = pm.globals.get(\"resultDescriptionRemoveSystemUser\");\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 403\r",
									"var statusCodeForbidden = pm.globals.get(\"statusCodeForbidden\");\r",
									"//get global variable to resultCode \"40300\"\r",
									"var resultCodeForbiddenMissingOrInvalidParameter = pm.globals.get(\"resultCodeForbiddenMissingOrInvalidParameter\");\r",
									"//get global variable to resultDescription \"The x_ais_AccountKey field is required.\"\r",
									"var resultDescriptionThexaisAccountKeyFieldIsRequired = pm.globals.get(\"resultDescriptionThexaisAccountKeyFieldIsRequired\");\r",
									"//------------------------------------------------------------//\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"InquiryThing : Status code is \" + statusCodeForbidden, function () {\r",
									"    pm.response.to.have.status(statusCodeForbidden);\r",
									"});\r",
									"\r",
									"pm.test('InquiryThing : OperationStatus code is '+'\"'+ resultCodeForbiddenMissingOrInvalidParameter +'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Code).to.eql(resultCodeForbiddenMissingOrInvalidParameter);\r",
									"});\r",
									"\r",
									"pm.test('InquiryThing : OperationStatus Description is '+'\"'+ resultDescriptionThexaisAccountKeyFieldIsRequired+'\"', function () {\r",
									"    pm.expect(jsonData.OperationStatus.Description).to.eql(resultDescriptionThexaisAccountKeyFieldIsRequired);\r",
									"});\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// RemovePartner\r",
									" RemovePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemovePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemovePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemovePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemovePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemovePartner = {\r",
									"            url: url + provisioningapis + urlPartnerRemovePartner,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemovePartner,\r",
									"            body: httpRequestRemovePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request RemovePartner');\r",
									"        let response = await reqPromise(optionsRemovePartner);\r",
									"        let jsonDataRemovePartner = await response.json();\r",
									"        // console.log('jsonDataRemovePartner',jsonDataRemovePartner)\r",
									"    \r",
									"        let operationStatusRemovePartner = await jsonDataRemovePartner.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemovePartner : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemovePartner : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemovePartner is Success\r",
									"        pm.test('RemovePartner : OperationStatus Description is '+'\"'+ resultDescriptionRemovePartner+'\"', function () {\r",
									"            pm.expect(operationStatusRemovePartner).to.have.property('Description', resultDescriptionRemovePartner);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// RemoveAccount\r",
									" RemoveAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerId\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountId\": pm.environment.get(\"GetResponse_AccountId\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsRemoveAccount = {\r",
									"            url: url + provisioningapis + urlAccountRemoveAccount,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveAccount,\r",
									"            body: httpRequestRemoveAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveAccount');\r",
									"        let response = await reqPromise(optionsRemoveAccount);\r",
									"        let jsonDataRemoveAccount = await response.json();\r",
									"        // console.log('jsonDataRemoveAccount',jsonDataRemoveAccount)\r",
									"    \r",
									"        let operationStatusRemoveAccount = await jsonDataRemoveAccount.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveAccount : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveAccount : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveAccount is Success\r",
									"        pm.test('RemoveAccount : OperationStatus Description is '+'\"'+ resultDescriptionRemoveAccount+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveAccount).to.have.property('Description', resultDescriptionRemoveAccount);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"// RemoveSystemUser\r",
									" RemoveSystemUser = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptRemoveSystemUser = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_RemoveSystemUser + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_RemoveSystemUser,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestRemoveSystemUser = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"SystemUserId\": pm.environment.get(\"GetResponse_SystemUserId\")\r",
									"            })\r",
									"        };\r",
									"\r",
									"        let optionsRemoveSystemUser = {\r",
									"            url: url + provisioningapis + urlSystemUserRemoveSystemUser,\r",
									"            method: 'DELETE',\r",
									"            header: headersOptRemoveSystemUser,\r",
									"            body: httpRequestRemoveSystemUser\r",
									"        };\r",
									"\r",
									"        // console.log('request RemoveSystemUser');\r",
									"        let response = await reqPromise(optionsRemoveSystemUser);\r",
									"        let jsonDataRemoveSystemUser = await response.json();\r",
									"        // console.log('jsonDataRemoveSystemUser',jsonDataRemoveSystemUser)\r",
									"    \r",
									"        let operationStatusRemoveSystemUser = await jsonDataRemoveSystemUser.OperationStatus;\r",
									"\r",
									"        //200\r",
									"        pm.test(\"RemoveSystemUser : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        //20000\r",
									"        pm.test('RemoveSystemUser : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusRemoveSystemUser).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        //RemoveSystemUser is Success\r",
									"        pm.test('RemoveSystemUser : OperationStatus Description is '+'\"'+ resultDescriptionRemoveSystemUser+'\"', function () {\r",
									"            pm.expect(operationStatusRemoveSystemUser).to.have.property('Description', resultDescriptionRemoveSystemUser);\r",
									"        });\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"//---------------- LogDefaultValue --------------//\r",
									"//set variable to LogDefaultValue JSON.parse\r",
									"var LogDefaultValue = JSON.parse(pm.environment.get(\"LogDefaultValue\"));\r",
									"// console.log('LogDefaultValue',LogDefaultValue);\r",
									"//---------------- set globals Other --------------//\r",
									"var SearchLog = LogDefaultValue.SearchLog;\r",
									"// console.log('SearchLog',SearchLog);\r",
									"var url_staging_azure_cauldron = SearchLog.url.log_url_staging_azure_cauldron;\r",
									"var urlCheckLog = LogDefaultValue.SearchLog.url.urlCheckLog;\r",
									"var kbn_version = SearchLog.header.kbn_version;\r",
									"var authorization = SearchLog.header.Authorization;\r",
									"var log_numberSubGTE = SearchLog.log_numberSubGTE;\r",
									"var log_timeStringSubGTE = SearchLog.log_timeStringSubGTE;\r",
									"var namespace = LogDefaultValue.Other.namespace;\r",
									"var header_x_ais_orderref = LogDefaultValue.Other.header_x_ais_orderref;\r",
									"var header_x_ais_orderdesc = LogDefaultValue.Other.header_x_ais_orderdesc;\r",
									"var header_x_ais_username = LogDefaultValue.Other.header_x_ais_username;\r",
									"var header_x_ais_accountkey = LogDefaultValue.Other.header_x_ais_accountkey;\r",
									"var header_x_ais_accesstoken = LogDefaultValue.Other.header_x_ais_accesstoken;\r",
									"var methodPost = LogDefaultValue.Other.methodPost;\r",
									"\r",
									"// Detail\r",
									"var logTypeDetail = LogDefaultValue.OtherDetail.logTypeDetail;\r",
									"var logLevelDetail = LogDefaultValue.OtherDetail.logLevel;\r",
									"var custom2Detail = LogDefaultValue.OtherDetail.custom2;\r",
									"\r",
									"// Summary\r",
									"var logTypeSummary = LogDefaultValue.OtherSummary.logTypeSummary;\r",
									"var identitySummary = LogDefaultValue.OtherSummary.identity;\r",
									"var customSummary = LogDefaultValue.OtherSummary.custom;\r",
									"\r",
									"// ProvisioningAPIs [InquiryThing]\r",
									"var applicationName = LogDefaultValue.Provisioning.applicationName;\r",
									"var cmdName = LogDefaultValue.Provisioning.Thing.cmdNameInquiryThing;\r",
									"var endPointNameProvisioningAPIs = LogDefaultValue.Provisioning.endPointName;\r",
									"var containerId = LogDefaultValue.Provisioning.containerId;\r",
									"var requestObjectUrlStaging = LogDefaultValue.Provisioning.Thing.requestObjectUrlInquiryThingMgStaging;\r",
									"\r",
									"// Check CDR (Summary Log) and EDR (Detail Log)\r",
									"SearchLogFindTid = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSearchLogFindTid = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = x_ais_OrderRef_InquiryThing_fail + current_timestamp;\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestSearchLogFindTid = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\"version\":\"true\",\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":\"true\"}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"\r",
									"        let optionsSearchLogFindTid = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptSearchLogFindTid,\r",
									"            body: httpRequestSearchLogFindTid\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsSearchLogFindTid);\r",
									"        let jsonDataSearchLogFindTid = await response.json();\r",
									"        // console.log('jsonDataSearchLogFindTid',jsonDataSearchLogFindTid)\r",
									"\r",
									"        // //200\r",
									"        pm.test(\"Search Log Find Tid : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"\r",
									"        let hits = jsonDataSearchLogFindTid.hits.hits\r",
									"        console.log('hits',hits)\r",
									"  \r",
									"        // find tid\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            // let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"        \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            if(applicationNameValue == applicationName){\r",
									"                let tid = hits[i]._source.cauldron.tid;\r",
									"                pm.environment.set(\"tid\", tid);\r",
									"                break;\r",
									"           }\r",
									"        }\r",
									"\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"CheckLog = async () => {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCheckLog = {\r",
									"            'Content-Type': ContentType_ApplicationJson,\r",
									"            'kbn-version': kbn_version,\r",
									"            'Authorization': authorization\r",
									"        };\r",
									"\r",
									"        let setRangeGTE = moment().subtract(log_numberSubGTE, log_timeStringSubGTE).toJSON();\r",
									"        let setRangeLTE = moment().toJSON();\r",
									"        let valueSearch = pm.environment.get(\"tid\");\r",
									"\r",
									"        // console.log(setRangeGTE)\r",
									"        // console.log(setRangeLTE)\r",
									"        console.log(\"valueSearch\",valueSearch)\r",
									"            \r",
									"        // body\r",
									"        let httpRequestCheckLog = {\r",
									"            mode: 'raw',\r",
									"           raw: JSON.stringify({\"version\":true,\"size\":500,\"sort\":[{\"@timestamp_es\":{\"order\":\"desc\",\"unmapped_type\":\"boolean\"}}],\"_source\":{\"excludes\":[]},\"aggs\":{\"2\":{\"date_histogram\":{\"field\":\"@timestamp_es\",\"fixed_interval\":\"30s\",\"time_zone\":\"Asia/Bangkok\",\"min_doc_count\":1}}},\"stored_fields\":[\"*\"],\"script_fields\":{},\"docvalue_fields\":[{\"field\":\"@timestamp_es\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.endTime\",\"format\":\"date_time\"},{\"field\":\"cauldron.custom1.activityLog.startTime\",\"format\":\"date_time\"},{\"field\":\"time\",\"format\":\"date_time\"}],\"query\":{\"bool\":{\"must\":[],\"filter\":[{\"multi_match\":{\"type\":\"best_fields\",\"query\":'\"'+valueSearch+'\"',\"lenient\":true}},{\"range\":{\"@timestamp_es\":{\"format\":\"strict_date_optional_time\",\"gte\":setRangeGTE,\"lte\":setRangeLTE}}}],\"should\":[],\"must_not\":[]}},\"highlight\":{\"pre_tags\":[\"@kibana-highlighted-field@\"],\"post_tags\":[\"@/kibana-highlighted-field@\"],\"fields\":{\"*\":{}},\"fragment_size\":2147483647}})\r",
									"        };\r",
									"        let optionsCheckLog = {\r",
									"            url: url_staging_azure_cauldron ,\r",
									"            method: 'POST',\r",
									"            header: headersOptCheckLog,\r",
									"            body: httpRequestCheckLog\r",
									"        }; \r",
									"        let response = await reqPromise(optionsCheckLog);\r",
									"        let jsonDataCheckLog = await response.json();\r",
									"        // console.log('jsonDataCheckLog',jsonDataCheckLog)\r",
									"        \r",
									"        // //200\r",
									"        pm.test(\"Check Log : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });     \r",
									"        \r",
									"        let hits = jsonDataCheckLog.hits.hits\r",
									"        console.log('hits',hits)\r",
									"  \r",
									"        // find logType\r",
									"        for(let i=0;i<hits.length;i++){\r",
									"            //  let logType = hits[i]._source.cauldron.logType\r",
									"            let logType = hits[i]._source.cauldron.logType;\r",
									"            let applicationNameValue = hits[i]._source.cauldron.applicationName;\r",
									"           \r",
									"            // console.log('logType',logType)\r",
									"            // console.log('applicationNameValue',applicationNameValue)\r",
									"            // console.log('applicationName',applicationName)\r",
									"            \r",
									"            let resultDataLog = JSON.parse(hits[i]._source.log);\r",
									"            // console.log('resultDataLog',resultDataLog)\r",
									"\r",
									"            let tidControl = x_ais_OrderRef_InquiryThing_fail + current_timestamp;\r",
									"            // console.log(tidControl);\r",
									"            if(applicationNameValue == applicationName){\r",
									"                 \r",
									"                if(logType == logTypeSummary && applicationNameValue == applicationName){ // 'Summary' and ProvisioningAPIs\r",
									"                    pm.test(\"Check Summary Log : InquiryThing\" , function () {\r",
									"                        console.log(\"======== Check Summary Log ( Expected = Actual) [InquiryThing] ==================\");\r",
									"                        console.log(\"reqTimestamp : \" + resultDataLog.reqTimestamp + \" = \" + resultDataLog.reqTimestamp);\r",
									"                        console.log(\"cmdName : \" + resultDataLog.cmdName + \" = \" + cmdName);\r",
									"                        console.log(\"resultCode : \" + resultDataLog.resultCode + \" = \" + resultCodeForbiddenMissingOrInvalidParameter);\r",
									"                        console.log(\"resultDesc : \" + resultDataLog.resultDesc + \" = \" + resultDescriptionThexaisAccountKeyFieldIsRequired);\r",
									"                        console.log(\"resTimestamp : \" + resultDataLog.resTimestamp + \" = \" + resultDataLog.resTimestamp);\r",
									"                        console.log(\"usageTime : \" + resultDataLog.usageTime + \" = \" + resultDataLog.usageTime);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeSummary);\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId );\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"identity : \" + resultDataLog.identity + \" = \" + identitySummary);\r",
									"                        console.log(\"custom : \" + resultDataLog.custom + \" = \" + customSummary);\r",
									"\r",
									"                        pm.expect(resultDataLog.reqTimestamp).to.eql(resultDataLog.reqTimestamp); \r",
									"                        pm.expect(resultDataLog.cmdName).to.eql(cmdName); \r",
									"                        pm.expect(resultDataLog.resultCode).to.eql(resultCodeForbiddenMissingOrInvalidParameter); \r",
									"                        pm.expect(resultDataLog.resultDesc).to.eql(resultDescriptionThexaisAccountKeyFieldIsRequired); \r",
									"                        pm.expect(resultDataLog.resTimestamp).to.eql(resultDataLog.resTimestamp); \r",
									"                        pm.expect(resultDataLog.usageTime).to.eql(resultDataLog.usageTime); \r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeSummary); \r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.identity).to.eql(identitySummary);\r",
									"                        pm.expect(resultDataLog.custom).to.eql(customSummary);\r",
									"                    }); \r",
									"                }\r",
									"\r",
									"                if(logType == logTypeDetail && applicationNameValue == applicationName ){ //'Detail' and ProvisioningAPIs\r",
									"\r",
									"                    let endPointNameValue = hits[i]._source.cauldron.custom1.endPointName;\r",
									"                    // console.log('endPointNameValue ',endPointNameValue)\r",
									"                    pm.test(\"Check Detail Log : \" + endPointNameValue + \" [InquiryThing]\", function () {\r",
									"                        console.log(\"======== Check Detail Log ( Expected = Actual) [InquiryThing] ==================\");\r",
									"                        console.log(\"systemTimestamp : \" + resultDataLog.systemTimestamp + \" = \" + resultDataLog.systemTimestamp);\r",
									"                        console.log(\"logType : \" + resultDataLog.logType + \" = \" + logTypeDetail);\r",
									"                        console.log(\"logLevel : \" + resultDataLog.logLevel + \" = \" + logLevelDetail);\r",
									"                        console.log(\"namespace : \" + resultDataLog.namespace + \" = \" + namespace);\r",
									"                        console.log(\"applicationName : \" + resultDataLog.applicationName + \" = \" + applicationName);\r",
									"                        // console.log(\"containerId : \" + resultDataLog.containerId + \" = \" + containerId);\r",
									"                        console.log(\"sessionId : \" + resultDataLog.sessionId + \" = \" + resultDataLog.sessionId);\r",
									"                        console.log(\"tid : \" + resultDataLog.tid + \" = \" + tidControl);\r",
									"                        console.log(\"custom1.activityLog.startTime : \" + resultDataLog.custom1.activityLog.startTime + \" = \" + resultDataLog.custom1.activityLog.startTime);\r",
									"                        console.log(\"custom1.activityLog.endTime : \" + resultDataLog.custom1.activityLog.endTime + \" = \" + resultDataLog.custom1.activityLog.endTime);\r",
									"                        console.log(\"custom1.activityLog.processTime : \" + resultDataLog.custom1.activityLog.processTime + \" = \" + resultDataLog.custom1.activityLog.processTime);\r",
									"                        console.log(\"custom2 : \" + resultDataLog.custom2 + \" = \" + custom2Detail);\r",
									"\r",
									"                        pm.expect(resultDataLog.systemTimestamp).to.eql(resultDataLog.systemTimestamp);\r",
									"                        pm.expect(resultDataLog.logType).to.eql(logTypeDetail); \r",
									"                        pm.expect(resultDataLog.logLevel).to.eql(logLevelDetail); \r",
									"                        pm.expect(resultDataLog.namespace).to.eql(namespace); \r",
									"                        pm.expect(resultDataLog.applicationName).to.eql(applicationName); \r",
									"                        // pm.expect(resultDataLog.containerId).to.eql(containerId); \r",
									"                        pm.expect(resultDataLog.sessionId).to.eql(resultDataLog.sessionId); \r",
									"                        pm.expect(resultDataLog.tid).to.eql(tidControl);\r",
									"                        pm.expect(resultDataLog.custom1.activityLog.startTime).to.eql(resultDataLog.custom1.activityLog.startTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.endTime).to.eql(resultDataLog.custom1.activityLog.endTime); \r",
									"                        pm.expect(resultDataLog.custom1.activityLog.processTime).to.eql(resultDataLog.custom1.activityLog.processTime); \r",
									"                        pm.expect(resultDataLog.custom2).to.eql(custom2Detail); \r",
									"\r",
									"                        if( endPointNameValue == endPointNameProvisioningAPIs){     //\"endPointName\":\"ProvisioningAPIs\"\r",
									"                            console.log(\"custom1.endPointName : \" + resultDataLog.custom1.endPointName + \" = \" + endPointNameProvisioningAPIs); \r",
									"                            pm.expect(resultDataLog.custom1.endPointName).to.eql(endPointNameProvisioningAPIs); \r",
									"                        \r",
									"                            // check requestObject\r",
									"                            // \"requestObject\":\"{ \\\"url\\\":\\\"mg-staging.sandais.com/api/v1/Thing/InquiryThing\\\", \\\"method\\\":\\\"POST\\\", \\\"headers\\\":{ \\\"x-ais-username\\\":\\\"AisPartner\\\", \\\"x-ais-orderref\\\":\\\"InquiryThingfail_202104081804899\\\", \\\"x-ais-orderdesc\\\":\\\"InquiryThing\\\", \\\"x-ais-accesstoken\\\":\\\"Bearer Q2fLUj3Go/nOqZyrJ6FnhSYfeOn1ZSwT0V0ycpecp/S8G3Vu9DD/qLF6WJcjQMRlKIO1U/gfXg2C7HYTAUve2kWbxBhqkK8ml+8QQAvQKleSf2pe/jHMMMPgj8E1ekdRNRNHSXYJnvN9GOENjUqqw26onqTUlbuLceqgzLAVpRUoVVsksNP5MSpSmIGP3BkbUhxxQFXQuZW8W/AtN7G/RjbcKaYarVLhK/s8BSZ0SAGUJ9zLPcvr1os2Lti77YL+R7DkbdGIvnavuC4tlIIbY0IlAkkY2KW0\\\" }, \\\"body\\\":{ } }\"\r",
									"\r",
									"                            // \\\"requestObject\\\":\\\"{ \\\\\\\"url\\\\\\\":\\\\\\\"mg-iot.sandais.com/api/v1/Thing/InquiryThing\\\\\\\", \\\\\\\"method\\\\\\\":\\\\\\\"POST\\\\\\\", \\\\\\\"headers\\\\\\\":{ \\\\\\\"x-ais-username\\\\\\\":\\\\\\\"AisPartner\\\\\\\", \\\\\\\"x-ais-orderref\\\\\\\":\\\\\\\"InquiryThingfail_202105101605405\\\\\\\", \\\\\\\"x-ais-orderdesc\\\\\\\":\\\\\\\"InquiryThing\\\\\\\", \\\\\\\"x-ais-accesstoken\\\\\\\":\\\\\\\"Bearer JRfh5UmbEyFPY/EonTn+mIubFZVfMTBJnWTGiFlTAnqsXitDS95KEeqSd95k93zWjSBJE+m0q96hSzVPn+DmrnImzqj/f5bqXg7uc9nlRp0ZykgS+UjFDgCjY3rCNzqWbBUl8t+nqkh2OfHIAEeuEgam0iLhyH6XSTrXGTDywtuZBp9H61N/j8Qv7n+HoIAiHgLAzsziWcb6a2J/GmWPNiWoO47VZRrYsznSSlw6uY2cae6Hxm/6DIbxDzoOyhKD2375v9FT4z8JSWa1a/LqE63xtL2tnOlDnmmzv6UbSaU=\\\\\\\" }, \\\\\\\"body\\\\\\\":{ } }\\\"\r",
									"                            \r",
									"                            let jsonParseRequestObject = JSON.parse(resultDataLog.custom1.requestObject);\r",
									"                            // console.log('jsonParseRequestObject',jsonParseRequestObject);\r",
									"                            \r",
									"                            let url = urlCheckLog + requestObjectUrlStaging;\r",
									"                            let x_ais_orderref = x_ais_OrderRef_InquiryThing_fail + current_timestamp;\r",
									"                            let x_ais_orderdesc = x_ais_OrderDesc_InquiryThing;\r",
									"                            let x_ais_accesstoken = Bearer + ' ' + pm.environment.get(\"AccessToken2\");\r",
									"                            let x_ais_userName = x_ais_UserName_AisPartner;\r",
									"                            // let x_ais_AccountKey = pm.environment.get(\"GetResponse_AccountId\");\r",
									"                            \r",
									"                            let body = {};\r",
									"\r",
									"                            console.log(\"url : \" + jsonParseRequestObject.url + \" = \" + url);\r",
									"                            console.log(\"method : \" + jsonParseRequestObject.method + \" = \" + methodPost);\r",
									"                            console.log(\"headers.x_ais_userName : \" + jsonParseRequestObject.headers[header_x_ais_username] + \" = \" + x_ais_userName);\r",
									"                            // console.log(\"headers.x_ais_AccountKey : \" + jsonParseRequestObject.headers[header_x_ais_accountkey] + \" = \" + x_ais_AccountKey);\r",
									"                            console.log(\"headers.x_ais_orderref : \" + jsonParseRequestObject.headers[header_x_ais_orderref] + \" = \" + x_ais_orderref);\r",
									"                            console.log(\"headers.x_ais_orderdesc : \" + jsonParseRequestObject.headers[header_x_ais_orderdesc] + \" = \" + x_ais_orderdesc);\r",
									"                            console.log(\"headers.x_ais_accesstoken : \" + jsonParseRequestObject.headers[header_x_ais_accesstoken] + \" = \" + x_ais_accesstoken);\r",
									"\r",
									"                            pm.expect(jsonParseRequestObject.url).to.eql(url);\r",
									"                            pm.expect(jsonParseRequestObject.method).to.eql(methodPost);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_username]).to.eql(x_ais_userName);\r",
									"                            // pm.expect(jsonParseRequestObject.headers[header_x_ais_accountkey]).to.eql(x_ais_AccountKey);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderref]).to.eql(x_ais_orderref);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_orderdesc]).to.eql(x_ais_orderdesc);\r",
									"                            pm.expect(jsonParseRequestObject.headers[header_x_ais_accesstoken]).to.eql(x_ais_accesstoken);\r",
									"\r",
									"                            console.log(\"resquest.body : \" + JSON.stringify(jsonParseRequestObject.body) + \" = \" + JSON.stringify(body));\r",
									"                            pm.expect(jsonParseRequestObject.body).to.eql(body);\r",
									"                            \r",
									"                            // check responseObject\r",
									"                            // \"responseObject\":\"{ \\\"OperationStatus\\\":{ \\\"Code\\\":\\\"40300\\\", \\\"Description\\\":\\\"The x_ais_AccountKey field is required.\\\" } }\"\r",
									"                            let jsonParseResponseObject = JSON.parse(resultDataLog.custom1.responseObject);\r",
									"                            // console.log('jsonParseResponseObject',jsonParseResponseObject);  \r",
									"\r",
									"                            console.log(\"response.OperationStatus.Code : \" + jsonParseResponseObject.OperationStatus.Code + \" = \" + resultCodeForbiddenMissingOrInvalidParameter);\r",
									"                            console.log(\"response.OperationStatus.Description : \" + jsonParseResponseObject.OperationStatus.Description + \" = \" + resultDescriptionThexaisAccountKeyFieldIsRequired); \r",
									"\r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Code).to.eql(resultCodeForbiddenMissingOrInvalidParameter);  \r",
									"                            pm.expect(jsonParseResponseObject.OperationStatus.Description).to.eql(resultDescriptionThexaisAccountKeyFieldIsRequired);  \r",
									"                        }\r",
									"\r",
									"                    }); \r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.log('err', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"setTimeout(function(){SearchLogFindTid();}, 20000); \r",
									"setTimeout(function(){CheckLog();}, 40000); \r",
									"\r",
									"setTimeout(function(){RemoveSystemUser();}, 50000);\r",
									"setTimeout(function(){RemoveAccount();}, 60000); \r",
									"setTimeout(function(){RemovePartner();}, 70000);  \r",
									"\r",
									"setTimeout(function(){\r",
									"pm.environment.unset(\"current_timestamp\");\r",
									"pm.environment.unset(\"AccessToken\");\r",
									"pm.environment.unset(\"AccessToken2\");\r",
									"pm.environment.unset(\"random_number\");\r",
									"pm.environment.unset(\"PartnerName\");\r",
									"pm.environment.unset(\"MerchantContact\");\r",
									"pm.environment.unset(\"CPID\");\r",
									"pm.environment.unset(\"GetResponse_PartnerId\");\r",
									"pm.environment.unset(\"AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountName\");\r",
									"pm.environment.unset(\"GetResponse_AccountId\");\r",
									"pm.environment.unset(\"random_IM\");\r",
									"pm.environment.unset(\"random_ICCID\");\r",
									"pm.environment.unset(\"ThingName\");\r",
									"pm.environment.unset(\"AuthenInfo_Username\");\r",
									"pm.environment.unset(\"AuthenInfo_Password\");\r",
									"pm.environment.unset(\"GetResponse_SystemUserId\");\r",
									"pm.environment.unset(\"tid\");\r",
									"}, 75000);\r",
									"setTimeout(function(){}, 80000); "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"var Username = pm.environment.get(\"Username\");\r",
									"var Password = pm.environment.get(\"Password\");\r",
									"\r",
									"var url = pm.environment.get(\"url\");\r",
									"var provisioningapis = pm.environment.get(\"provisioningapis\");\r",
									"\r",
									"//---------------- fieldDataValue --------------//\r",
									"//set variable to fieldDataValue JSON.parse\r",
									"var fieldDataValue = JSON.parse(pm.environment.get(\"fieldDataValue\"));\r",
									"// console.log('fieldDataValue',fieldDataValue);\r",
									"\r",
									"let UserRole = fieldDataValue.role.role_Supplier;\r",
									"\r",
									"//format YYYYMMDDHHMMSSS\r",
									"var currentTmestamp = moment().format(fieldDataValue.Other.format_current_timestamp);\r",
									"// console.log('currentTmestamp',currentTmestamp);\r",
									"pm.environment.set(\"current_timestamp\", currentTmestamp);\r",
									"\r",
									"var Bearer = pm.environment.get(\"Bearer\");\r",
									"var ContentType_ApplicationJson = pm.environment.get(\"ContentType_ApplicationJson\");\r",
									"var current_timestamp = pm.environment.get(\"current_timestamp\");\r",
									"var Accept = pm.environment.get(\"Accept\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- statusCodeList --------------//\r",
									"//set variable to statusCodeList JSON.parse\r",
									"var statusCodeList = JSON.parse(pm.environment.get(\"statusCodeList\"));\r",
									"//set global variable to statusCode 200\r",
									"pm.globals.set(\"statusCodeSuccess\", statusCodeList.statusCodeSuccess);\r",
									"//set global variable to statusCode 201\r",
									"pm.globals.set(\"statusCodeCreatedSuccess\", statusCodeList.statusCodeCreatedSuccess);\r",
									"//set global variable to statusCode 403\r",
									"pm.globals.set(\"statusCodeForbidden\", statusCodeList.statusCodeForbidden);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultCodeList --------------//\r",
									"//set variable to resultCodeList JSON.parse\r",
									"var resultCodeList = JSON.parse(pm.environment.get(\"resultCodeList\"));\r",
									"//set global variable to resultCode \"20000\"\r",
									"pm.globals.set(\"resultCodeSuccess\", resultCodeList.resultCodeSuccess);\r",
									"//set global variable to resultCode \"20100\"\r",
									"pm.globals.set(\"resultCodeCreatedSuccess\", resultCodeList.resultCodeCreatedSuccess);\r",
									"//set global variable to resultCode \"40300\"\r",
									"pm.globals.set(\"resultCodeForbiddenMissingOrInvalidParameter\", resultCodeList.resultCodeForbiddenMissingOrInvalidParameter);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionSuccessList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionSuccessList = JSON.parse(pm.environment.get(\"resultDescriptionSuccessList\"));\r",
									"//set global variable to resultDescription \"SignInProcess is Success\"\r",
									"pm.globals.set(\"resultDescriptionSuccessSignIn\", resultDescriptionSuccessList.resultDescriptionSuccessSignIn);\r",
									"//set global variable to resultDescription \"CreatePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreatePartner\", resultDescriptionSuccessList.resultDescriptionCreatePartner);\r",
									"//set global variable to resultDescription \"CreateAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateAccount\", resultDescriptionSuccessList.resultDescriptionCreateAccount);\r",
									"//set global variable to resultDescription \"CreateSystemUser is Success\"\r",
									"pm.globals.set(\"resultDescriptionCreateSystemUser\", resultDescriptionSuccessList.resultDescriptionCreateSystemUser);\r",
									"//set global variable to resultDescription \"RemovePartner is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemovePartner\", resultDescriptionSuccessList.resultDescriptionRemovePartner);\r",
									"//set global variable to resultDescription \"RemoveAccount is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveAccount\", resultDescriptionSuccessList.resultDescriptionRemoveAccount);\r",
									"//set global variable to resultDescription \"RemoveSystemUser is Success\"\r",
									"pm.globals.set(\"resultDescriptionRemoveSystemUser\", resultDescriptionSuccessList.resultDescriptionRemoveSystemUser);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- resultDescriptionErrorList --------------//\r",
									"//set variable to resultDescriptionList JSON.parse\r",
									"var resultDescriptionErrorList = JSON.parse(pm.environment.get(\"resultDescriptionErrorList\"));\r",
									"//set global variable to resultDescription \"The x_ais_AccountKey field is required.\"\r",
									"pm.globals.set(\"resultDescriptionThexaisAccountKeyFieldIsRequired\", resultDescriptionErrorList.resultDescriptionThexaisAccountKeyFieldIsRequired);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- HeaderList --------------//\r",
									"//set variable to HeaderList JSON.parse\r",
									"var HeaderList = JSON.parse(pm.environment.get(\"HeaderList\"));\r",
									"//---------------- set globals Other --------------//\r",
									"//set global variable to x_ais_OrderRef \"AisPartner\"\r",
									"pm.globals.set(\"x_ais_UserName_AisPartner\", HeaderList.Other.x_ais_UserName_AisPartner);\r",
									"//set global variable to x_ais_OrderRef \"User Authentication\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_UserAuthentication\", HeaderList.Other.x_ais_OrderDesc_UserAuthentication);\r",
									"//set global variable to kbn-versio \"7.5.1\"\r",
									"pm.globals.set(\"kbn_version\", HeaderList.Other.kbn_version);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Signin_ --------------//\r",
									"//set global variable to x_ais_OrderRef \"Signin_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_Signin\", HeaderList.Signin.x_ais_OrderRef_Signin);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreatePartner --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreatePartner\", HeaderList.Partner.x_ais_OrderRef_CreatePartner);\r",
									"//set global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreatePartner\", HeaderList.Partner.x_ais_OrderDesc_CreatePartner);\r",
									"//set global variable to x_ais_OrderRef \"RemovePartner_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemovePartner\", HeaderList.Partner.x_ais_OrderRef_RemovePartner);\r",
									"//set global variable to x_ais_OrderDesc \"RemovePartner\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemovePartner\", HeaderList.Partner.x_ais_OrderDesc_RemovePartner);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals CreateAccount --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateAccount\", HeaderList.Account.x_ais_OrderRef_CreateAccount);\r",
									"//set global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateAccount\", HeaderList.Account.x_ais_OrderDesc_CreateAccount);\r",
									"//set global variable to x_ais_OrderRef \"RemoveAccount_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveAccount\", HeaderList.Account.x_ais_OrderRef_RemoveAccount);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveAccount\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveAccount\", HeaderList.Account.x_ais_OrderDesc_RemoveAccount);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals SystemUser --------------//\r",
									"//set global variable to x_ais_OrderRef \"CreateSystemUser_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_CreateSystemUser\", HeaderList.SystemUser.x_ais_OrderRef_CreateSystemUser);\r",
									"//set global variable to x_ais_OrderDesc \"CreateSystemUser\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_CreateSystemUser\", HeaderList.SystemUser.x_ais_OrderDesc_CreateSystemUser);\r",
									"//set global variable to x_ais_OrderRef \"RemoveSystemUser_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_RemoveSystemUser\", HeaderList.SystemUser.x_ais_OrderRef_RemoveSystemUser);\r",
									"//set global variable to x_ais_OrderDesc \"RemoveSystemUser\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_RemoveSystemUser\", HeaderList.SystemUser.x_ais_OrderDesc_RemoveSystemUser);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- set globals Thing --------------//\r",
									"//set global variable to x_ais_OrderRef \"InquiryThingfail_\"\r",
									"pm.globals.set(\"x_ais_OrderRef_InquiryThing_fail\", HeaderList.Thing.x_ais_OrderRef_InquiryThing_fail);\r",
									"//set global variable to x_ais_OrderDesc \"InquiryThing\"\r",
									"pm.globals.set(\"x_ais_OrderDesc_InquiryThing\", HeaderList.Thing.x_ais_OrderDesc_InquiryThing);\r",
									"//------------------------------------------------------------//\r",
									"//get global variable to statusCode 200\r",
									"var statusCodeSuccess = pm.globals.get(\"statusCodeSuccess\");\r",
									"//get global variable to statusCode 201\r",
									"var statusCodeCreatedSuccess = pm.globals.get(\"statusCodeCreatedSuccess\");\r",
									"//get global variable to resultCode \"20000\"\r",
									"var resultCodeSuccess = pm.globals.get(\"resultCodeSuccess\");\r",
									"//get global variable to resultCode \"20100\"\r",
									"var resultCodeCreatedSuccess = pm.globals.get(\"resultCodeCreatedSuccess\");\r",
									"//get global variable to resultDescription \"SignInProcess is Success\"\r",
									"var resultDescriptionSuccessSignIn = pm.globals.get(\"resultDescriptionSuccessSignIn\");\r",
									"//get global variable to resultDescription \"CreatePartner is Success\"\r",
									"var resultDescriptionCreatePartner = pm.globals.get(\"resultDescriptionCreatePartner\");\r",
									"//get global variable to resultDescription \"CreateAccount is Success\"\r",
									"var resultDescriptionCreateAccount = pm.globals.get(\"resultDescriptionCreateAccount\");\r",
									"//get global variable to resultDescription \"CreateSystemUser is Success\"\r",
									"var resultDescriptionCreateSystemUser = pm.globals.get(\"resultDescriptionCreateSystemUser\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- urlRouteList --------------//\r",
									"//set variable to urlRouteList JSON.parse\r",
									"var urlRouteList = JSON.parse(pm.environment.get(\"urlRouteList\"));\r",
									"//---------------- set url Create --------------//\r",
									"//set global variable to url \"/api/v1/auth/signin\"\r",
									"pm.globals.set(\"urlSignin\", urlRouteList.Signin.urlSignin);\r",
									"//set global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"pm.globals.set(\"urlPartnerCreatePartner\", urlRouteList.Partner.urlPartnerCreatePartner);\r",
									"//set global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"pm.globals.set(\"urlAccountCreateAccount\", urlRouteList.Account.urlAccountCreateAccount);\r",
									"//set global variable to url \"/api/v1/SystemUser/CreateSystemUser\"\r",
									"pm.globals.set(\"urlSystemUserCreateSystemUser\", urlRouteList.SystemUser.urlSystemUserCreateSystemUser);\r",
									"//---------------- get url Create --------------//\r",
									"//get global variable to url \"/api/v1/auth/signin\"\r",
									"var urlSignin = pm.globals.get(\"urlSignin\");\r",
									"//get global variable to url \"/api/v1/Partner/CreatePartner\"\r",
									"var urlPartnerCreatePartner = pm.globals.get(\"urlPartnerCreatePartner\");\r",
									"//get global variable to url \"/api/v1/Account/CreateAccount\"\r",
									"var urlAccountCreateAccount = pm.globals.get(\"urlAccountCreateAccount\");\r",
									"//get global variable to url \"/api/v1/SystemUser/CreateSystemUser\"\r",
									"var urlSystemUserCreateSystemUser = pm.globals.get(\"urlSystemUserCreateSystemUser\");\r",
									"//---------------- set url Remove --------------//\r",
									"//set global variable to url \"/api/v1/Partner/RemovePartner\"\r",
									"pm.globals.set(\"urlPartnerRemovePartner\", urlRouteList.Partner.urlPartnerRemovePartner);\r",
									"//set global variable to url \"/api/v1/Account/RemoveAccount\"\r",
									"pm.globals.set(\"urlAccountRemoveAccount\", urlRouteList.Account.urlAccountRemoveAccount);\r",
									"//set global variable to url \"/api/v1/SystemUser/RemoveSystemUser\"\r",
									"pm.globals.set(\"urlSystemUserRemoveSystemUser\", urlRouteList.SystemUser.urlSystemUserRemoveSystemUser);\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals HeaderList --------------//\r",
									"//---------------- get globals Other --------------//\r",
									"//get global variable to x_ais_UserName \"AisPartner\"\r",
									"var x_ais_UserName_AisPartner = pm.globals.get(\"x_ais_UserName_AisPartner\");\r",
									"//get global variable to x_ais_OrderDesc \"User Authentication\"\r",
									"var x_ais_OrderDesc_UserAuthentication = pm.globals.get(\"x_ais_OrderDesc_UserAuthentication\");\r",
									"//---------------- get globals Signin_ --------------//\r",
									"//get global variable to x_ais_OrderRef \"Signin_\"\r",
									"var x_ais_OrderRef_Signin = pm.globals.get(\"x_ais_OrderRef_Signin\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Partner --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreatePartner_\"\r",
									"var x_ais_OrderRef_CreatePartner = pm.globals.get(\"x_ais_OrderRef_CreatePartner\");\r",
									"//get global variable to x_ais_OrderDesc \"CreatePartner\"\r",
									"var x_ais_OrderDesc_CreatePartner = pm.globals.get(\"x_ais_OrderDesc_CreatePartner\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals Account --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateAccount_\"\r",
									"var x_ais_OrderRef_CreateAccount = pm.globals.get(\"x_ais_OrderRef_CreateAccount\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateAccount\"\r",
									"var x_ais_OrderDesc_CreateAccount = pm.globals.get(\"x_ais_OrderDesc_CreateAccount\");\r",
									"//------------------------------------------------------------//\r",
									"//---------------- get globals SystemUser --------------//\r",
									"//get global variable to x_ais_OrderRef \"CreateSystemUser_\"\r",
									"var x_ais_OrderRef_CreateSystemUser = pm.globals.get(\"x_ais_OrderRef_CreateSystemUser\");\r",
									"//get global variable to x_ais_OrderDesc \"CreateSystemUser\"\r",
									"var x_ais_OrderDesc_CreateSystemUser = pm.globals.get(\"x_ais_OrderDesc_CreateSystemUser\");\r",
									"//------------------------------------------------------------//\r",
									"\r",
									"const reqPromise = (options) => {\r",
									"    return new Promise ((resolve, reject) => {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"// Signin get token\r",
									" Signin = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSignin = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestSignin = {\r",
									"            mode: 'raw',\r",
									"            raw: \r",
									"            JSON.stringify({\r",
									"                username:Username,\r",
									"                password:Password\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsSignin = {\r",
									"            url: url + provisioningapis + urlSignin,\r",
									"            method: 'POST',\r",
									"            header: headersOptSignin,\r",
									"            body: httpRequestSignin\r",
									"        };\r",
									"        // console.log('request Signin');\r",
									"        let response = await reqPromise(optionsSignin);\r",
									"        let jsonDataSignin = await response.json();\r",
									"\r",
									"        // setAccessToken\r",
									"        await pm.environment.set(\"AccessToken\" , jsonDataSignin.AccessToken);\r",
									"\r",
									"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // SignInProcess is Success\r",
									"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
									"        });\r",
									"\r",
									"        //set random_number\r",
									"        pm.environment.set(\"random_number\", pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //set PartnerName\r",
									"         let partnerNameValue = fieldDataValue.Partner.PartnerNameValue; // \"Jida_TestPartnerName\"\r",
									"        pm.environment.set(\"PartnerName\", partnerNameValue + pm.environment.get(\"random_number\"))\r",
									"        //set MerchantContact\r",
									"        let merchantContactValue = fieldDataValue.Partner.MerchantContactValue; // \"Jida_TestMerchantContact@ais.co.th\"\r",
									"        pm.environment.set(\"MerchantContact\", merchantContactValue)\r",
									"        // set CPID\r",
									"        let CPIDValue = fieldDataValue.Partner.CPIDValue; // \"Jida_TesCPID@ais.co.th\"\r",
									"        pm.environment.set(\"CPID\", CPIDValue)\r",
									"        \r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreatePartner\r",
									" CreatePartner = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreatePartner = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreatePartner + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreatePartner,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreatePartner = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerName\": pm.environment.get(\"PartnerName\"),\r",
									"                \"PartnerType\": fieldDataValue.Partner.PartnerTypeValue, //[\"Supplier\",\"Customer\"]\r",
									"                \"PartnerDetail\": {\r",
									"                    \"MerchantContact\": pm.environment.get(\"MerchantContact\"),\r",
									"                    \"CPID\": pm.environment.get(\"CPID\")\r",
									"                },\r",
									"                \"Property\": {\r",
									"                    \"RouteEngine\": fieldDataValue.Partner.PropertyRouteEngineValue //false\r",
									"                }\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsCreatePartner = {\r",
									"            url: url + provisioningapis + urlPartnerCreatePartner,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreatePartner,\r",
									"            body: httpRequestCreatePartner\r",
									"        };\r",
									"\r",
									"        // console.log('request CreatePartner');\r",
									"        let response = await reqPromise(optionsCreatePartner);\r",
									"        let jsonDataCreatePartner = await response.json();\r",
									"        // console.log('jsonDataCreatePartner',jsonDataCreatePartner)\r",
									"    \r",
									"        let operationStatusCreatePartner = await jsonDataCreatePartner.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreatePartner : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreatePartner : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreatePartner is Success\r",
									"        pm.test('CreatePartner : OperationStatus Description is '+'\"'+ resultDescriptionCreatePartner+'\"', function () {\r",
									"            pm.expect(operationStatusCreatePartner).to.have.property('Description', resultDescriptionCreatePartner);\r",
									"        });\r",
									"\r",
									"        //GetResponse_PartnerId\r",
									"        pm.environment.set(\"GetResponse_PartnerId\", jsonDataCreatePartner.PartnerInfo.PartnerId);\r",
									"\r",
									"        //Accountname\r",
									"        let accountNameValue = fieldDataValue.Account.AccountNameValue; // \"Jida_TestAccountname\"\r",
									"        pm.environment.set(\"AccountName\", accountNameValue + pm.environment.get(\"random_number\"))\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateAccount\r",
									" CreateAccount = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateAccount = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateAccount + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateAccount,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreateAccount = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"PartnerID\": pm.environment.get(\"GetResponse_PartnerId\"),\r",
									"                \"AccountName\": pm.environment.get(\"AccountName\")\r",
									"                })\r",
									"        };\r",
									"        \r",
									"        let optionsCreateAccount = {\r",
									"            url: url + provisioningapis + urlAccountCreateAccount,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateAccount,\r",
									"            body: httpRequestCreateAccount\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateAccount');\r",
									"        let response = await reqPromise(optionsCreateAccount);\r",
									"        let jsonDataCreateAccount = await response.json();\r",
									"        // console.log('jsonDataCreateAccount',jsonDataCreateAccount)\r",
									"    \r",
									"        let operationStatusCreateAccount = await jsonDataCreateAccount.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateAccount : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateAccount : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateAccount is Success\r",
									"        pm.test('CreateAccount : OperationStatus Description is '+'\"'+ resultDescriptionCreateAccount+'\"', function () {\r",
									"            pm.expect(operationStatusCreateAccount).to.have.property('Description', resultDescriptionCreateAccount);\r",
									"        });\r",
									"        // GetResponse_AccountName\r",
									"        pm.environment.set(\"GetResponse_AccountName\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountName)\r",
									"        // GetResponse_AccountId\r",
									"        pm.environment.set(\"GetResponse_AccountId\",jsonDataCreateAccount.PartnerInfo.AccountInfo[0].AccountId)\r",
									"        // random_IM\r",
									"        pm.environment.set(\"random_IM\", _.random(10000000, 99999999)+\" \"+_.random(1000000, 9999999))\r",
									"        // random_ICCID\r",
									"        pm.environment.set(\"random_ICCID\", _.random(1000000, 9999999)+\" \"+_.random(100000, 999999))\r",
									"        // random_number\r",
									"        pm.environment.set(\"random_number\",pm.variables.replaceIn('{{$randomInt}}{{$randomInt}}'))\r",
									"        //ThingName\r",
									"        let thingNameValue = fieldDataValue.Provisioning.Thing.ThingNameValue; // \"QAtestthing_T01\"\r",
									"        pm.environment.set(\"ThingName\", thingNameValue + pm.environment.get(\"random_number\"))\r",
									"\r",
									"        // AuthenInfo_Username\r",
									"        let AuthenInfoUsernameValue = fieldDataValue.Provisioning.SystemUser.AuthenInfo_Username; // \"AuthenInfoUsername\"\r",
									"        pm.environment.set(\"AuthenInfo_Username\", AuthenInfoUsernameValue + pm.environment.get(\"random_number\"))\r",
									"        // AuthenInfo_Password\r",
									"        let AuthenInfoPasswordValue = fieldDataValue.Provisioning.SystemUser.AuthenInfo_Password; // \"bnZkZm5nZXJnbGtkanZlaWdqbmVvZGtsZA==\"\r",
									"        pm.environment.set(\"AuthenInfo_Password\",AuthenInfoPasswordValue)\r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// CreateSystemUser\r",
									" CreateSystemUser = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptCreateSystemUser = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_CreateSystemUser + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_CreateSystemUser,\r",
									"            'x-ais-AccessToken':Bearer + ' ' + pm.environment.get(\"AccessToken\"),\r",
									"            'x-ais-AccountKey':pm.environment.get(\"GetResponse_AccountId\"),\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestCreateSystemUser = {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"AccountId\": [\r",
									"                    pm.environment.get(\"GetResponse_AccountId\")\r",
									"                ],\r",
									"                \"AuthenInfo\": {\r",
									"                    \"Username\": pm.environment.get(\"AuthenInfo_Username\"),\r",
									"                    \"Password\": pm.environment.get(\"AuthenInfo_Password\")\r",
									"                },\r",
									"                \"UserRole\": [UserRole]\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsCreateSystemUser = {\r",
									"            url: url + provisioningapis + urlSystemUserCreateSystemUser,\r",
									"            method: 'POST',\r",
									"            header: headersOptCreateSystemUser,\r",
									"            body: httpRequestCreateSystemUser\r",
									"        };\r",
									"\r",
									"        // console.log('request CreateSystemUser');\r",
									"        let response = await reqPromise(optionsCreateSystemUser);\r",
									"        let jsonDataCreateSystemUser = await response.json();\r",
									"        // console.log('jsonDataCreateSystemUser',jsonDataCreateSystemUser)\r",
									"    \r",
									"        let operationStatusCreateSystemUser = await jsonDataCreateSystemUser.OperationStatus;\r",
									"\r",
									"        //201\r",
									"        pm.test(\"CreateSystemUser : Status code is \" + statusCodeCreatedSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeCreatedSuccess);\r",
									"        });\r",
									"        //20100\r",
									"        pm.test('CreateSystemUser : OperationStatus Code is '+'\"'+ resultCodeCreatedSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusCreateSystemUser).to.have.property('Code', resultCodeCreatedSuccess);\r",
									"        });\r",
									"        //CreateSystemUser is Success\r",
									"        pm.test('CreateSystemUser : OperationStatus Description is '+'\"'+ resultDescriptionCreateSystemUser+'\"', function () {\r",
									"            pm.expect(operationStatusCreateSystemUser).to.have.property('Description', resultDescriptionCreateSystemUser);\r",
									"        });\r",
									"\r",
									"        // GetResponse_SystemUserId\r",
									"        pm.environment.set(\"GetResponse_SystemUserId\",jsonDataCreateSystemUser.SystemUserInfo.SystemUserId)\r",
									"        \r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"// Signin get token\r",
									" Signin2 = async () =>  {\r",
									"    try {\r",
									"        // header\r",
									"        let headersOptSignin = {\r",
									"            'Content-Type':ContentType_ApplicationJson,\r",
									"            'x-ais-UserName':x_ais_UserName_AisPartner,\r",
									"            'x-ais-OrderRef':x_ais_OrderRef_Signin + current_timestamp,\r",
									"            'x-ais-OrderDesc':x_ais_OrderDesc_UserAuthentication,\r",
									"            'Accept':Accept\r",
									"        };\r",
									"        \r",
									"        // body\r",
									"        let httpRequestSignin = {\r",
									"            mode: 'raw',\r",
									"            raw: \r",
									"            JSON.stringify({\r",
									"                username:pm.environment.get(\"AuthenInfo_Username\"),\r",
									"                password:pm.environment.get(\"AuthenInfo_Password\")\r",
									"            })\r",
									"        };\r",
									"        \r",
									"        let optionsSignin = {\r",
									"            url: url + provisioningapis + urlSignin,\r",
									"            method: 'POST',\r",
									"            header: headersOptSignin,\r",
									"            body: httpRequestSignin\r",
									"        };\r",
									"        // console.log('request Signin');\r",
									"        let response = await reqPromise(optionsSignin);\r",
									"        let jsonDataSignin = await response.json();\r",
									"\r",
									"        // setAccessToken\r",
									"        await pm.environment.set(\"AccessToken2\" , jsonDataSignin.AccessToken);\r",
									"\r",
									"        let operationStatusSignin = await jsonDataSignin.OperationStatus;\r",
									"\r",
									"        // 200\r",
									"        pm.test(\"Signin : Status code is \" + statusCodeSuccess, function () {\r",
									"            pm.expect(response).to.have.property('code', statusCodeSuccess);\r",
									"        });\r",
									"        // 20000\r",
									"        pm.test('Signin : OperationStatus Code is '+'\"'+ resultCodeSuccess +'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Code', resultCodeSuccess);\r",
									"        });\r",
									"        // SignInProcess is Success\r",
									"        pm.test('Signin : OperationStatus Description is '+'\"'+ resultDescriptionSuccessSignIn+'\"', function () {\r",
									"            pm.expect(operationStatusSignin).to.have.property('Description', resultDescriptionSuccessSignIn);\r",
									"        });\r",
									"        \r",
									"    } catch (err) {\r",
									"        console.log('err',err);\r",
									"    }\r",
									"}\r",
									"\r",
									"Signin();\r",
									"setTimeout(async function(){await CreatePartner();}, 3000); \r",
									"setTimeout(async function(){await CreateAccount();}, 6000); \r",
									"setTimeout(async function(){await CreateSystemUser();}, 9000);\r",
									"setTimeout(async function(){await Signin2();}, 10000); \r",
									"setTimeout(async function(){}, 15000); "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-ais-UserName",
								"type": "text",
								"value": "{{x_ais_UserName_AisPartner}}"
							},
							{
								"key": "x-ais-OrderRef",
								"value": "{{x_ais_OrderRef_InquiryThing_fail}}{{current_timestamp}}"
							},
							{
								"key": "x-ais-OrderDesc",
								"type": "text",
								"value": "{{x_ais_OrderDesc_InquiryThing}}"
							},
							{
								"key": "x-ais-AccessToken",
								"value": "{{Bearer}} {{AccessToken2}}"
							},
							{
								"key": "Accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-ais-AccountKey",
								"type": "text",
								"value": "{{GetResponse_AccountId}}",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}{{provisioningapis}}/api/v1/Thing/InquiryThing",
							"host": [
								"{{url}}{{provisioningapis}}"
							],
							"path": [
								"api",
								"v1",
								"Thing",
								"InquiryThing"
							]
						},
						"description": "Type:Desire"
					},
					"response": []
				}
			]
		}
	]
}